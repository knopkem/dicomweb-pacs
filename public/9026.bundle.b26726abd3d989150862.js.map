{"version":3,"file":"9026.bundle.b26726abd3d989150862.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/utils.ts","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/index.ts","webpack:///../../../extensions/cornerstone/src/components/OHIFViewportActionCorners.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/getWindowLevelActionMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/ViewportSegmentationMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/ViewportSegmentationMenuWrapper.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/index.tsx","webpack:///../../../extensions/cornerstone/src/utils/ActiveViewportBehavior.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx","webpack:///../../../extensions/cornerstone/src/utils/presentations/getViewportPresentations.ts"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums, VolumeViewport3D, utilities as csUtils } from '@cornerstonejs/core';\r\nimport { ImageScrollbar } from '@ohif/ui-next';\r\n\r\nfunction CornerstoneImageScrollbar({\r\n  viewportData,\r\n  viewportId,\r\n  element,\r\n  imageSliceData,\r\n  setImageSliceData,\r\n  scrollbarHeight,\r\n  servicesManager,\r\n}: withAppTypes<{\r\n  element: HTMLElement;\r\n}>) {\r\n  const { cineService, cornerstoneViewportService } = servicesManager.services;\r\n\r\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    const { isCineEnabled } = cineService.getState();\r\n\r\n    if (isCineEnabled) {\r\n      // on image scrollbar change, stop the CINE if it is playing\r\n      cineService.stopClip(element, { viewportId });\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n    }\r\n\r\n    csUtils.jumpToSlice(viewport.element, {\r\n      imageIndex,\r\n      debounceLoading: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    if (!viewport || viewport instanceof VolumeViewport3D) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imageIndex = viewport.getCurrentImageIdIndex();\r\n      const numberOfSlices = viewport.getNumberOfSlices();\r\n\r\n      setImageSliceData({\r\n        imageIndex: imageIndex,\r\n        numberOfSlices,\r\n      });\r\n    } catch (error) {\r\n      console.warn(error);\r\n    }\r\n  }, [viewportId, viewportData]);\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n    const { viewportType } = viewportData;\r\n    const eventId =\r\n      (viewportType === Enums.ViewportType.STACK && Enums.Events.STACK_VIEWPORT_SCROLL) ||\r\n      (viewportType === Enums.ViewportType.ORTHOGRAPHIC && Enums.Events.VOLUME_NEW_IMAGE) ||\r\n      Enums.Events.IMAGE_RENDERED;\r\n\r\n    const updateIndex = event => {\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n      if (!viewport || viewport instanceof VolumeViewport3D) {\r\n        return;\r\n      }\r\n      const { imageIndex, newImageIdIndex = imageIndex } = event.detail;\r\n      const numberOfSlices = viewport.getNumberOfSlices();\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({\r\n        imageIndex: newImageIdIndex,\r\n        numberOfSlices,\r\n      });\r\n    };\r\n\r\n    element.addEventListener(eventId, updateIndex);\r\n\r\n    return () => {\r\n      element.removeEventListener(eventId, updateIndex);\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  return (\r\n    <ImageScrollbar\r\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\r\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\r\n      height={scrollbarHeight}\r\n      value={imageSliceData.imageIndex || 0}\r\n    />\r\n  );\r\n}\r\n\r\nCornerstoneImageScrollbar.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  viewportId: PropTypes.string.isRequired,\r\n  element: PropTypes.instanceOf(Element),\r\n  scrollbarHeight: PropTypes.string,\r\n  imageSliceData: PropTypes.object.isRequired,\r\n  setImageSliceData: PropTypes.func.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CornerstoneImageScrollbar;\r\n","import moment from 'moment';\r\nimport { metaData } from '@cornerstonejs/core';\r\n\r\n/**\r\n * Checks if value is valid.\r\n *\r\n * @param {number} value\r\n * @returns {boolean} is valid.\r\n */\r\nexport function isValidNumber(value) {\r\n  return typeof value === 'number' && !isNaN(value);\r\n}\r\n\r\n/**\r\n * Formats number precision.\r\n *\r\n * @param {number} number\r\n * @param {number} precision\r\n * @returns {number} formatted number.\r\n */\r\nexport function formatNumberPrecision(number, precision = 0) {\r\n  if (number !== null) {\r\n    return parseFloat(number).toFixed(precision);\r\n  }\r\n}\r\n\r\n/**\r\n * Formats DICOM date.\r\n *\r\n * @param {string} date\r\n * @param {string} strFormat\r\n * @returns {string} formatted date.\r\n */\r\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\r\n  return moment(date, 'YYYYMMDD').format(strFormat);\r\n}\r\n\r\n/**\r\n *    DICOM Time is stored as HHmmss.SSS, where:\r\n *      HH 24 hour time:\r\n *        m mm        0..59   Minutes\r\n *        s ss        0..59   Seconds\r\n *        S SS SSS    0..999  Fractional seconds\r\n *\r\n *        Goal: '24:12:12'\r\n *\r\n * @param {*} time\r\n * @param {string} strFormat\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\r\n  return moment(time, 'HH:mm:ss').format(strFormat);\r\n}\r\n\r\n/**\r\n * Gets compression type\r\n *\r\n * @param {number} imageId\r\n * @returns {string} compression type.\r\n */\r\nexport function getCompression(imageId) {\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const { lossyImageCompression, lossyImageCompressionRatio, lossyImageCompressionMethod } =\r\n    generalImageModule;\r\n\r\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\r\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\r\n    const compressionRatio = formatNumberPrecision(lossyImageCompressionRatio, 2);\r\n    return compressionMethod + compressionRatio + ' : 1';\r\n  }\r\n\r\n  return 'Lossless / Uncompressed';\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { vec3 } from 'gl-matrix';\r\nimport PropTypes from 'prop-types';\r\nimport { metaData, Enums, utilities } from '@cornerstonejs/core';\r\nimport type { ImageSliceData } from '@cornerstonejs/core/types';\r\nimport { ViewportOverlay } from '@ohif/ui-next';\r\nimport type { InstanceMetadata } from '@ohif/core/src/types';\r\nimport { formatDICOMDate, formatDICOMTime, formatNumberPrecision } from './utils';\r\nimport { utils } from '@ohif/core';\r\nimport { StackViewportData, VolumeViewportData } from '../../types/CornerstoneCacheService';\r\n\r\nimport './CustomizableViewportOverlay.css';\r\n\r\nconst EPSILON = 1e-4;\r\nconst { formatPN } = utils;\r\n\r\ntype ViewportData = StackViewportData | VolumeViewportData;\r\n\r\ninterface OverlayItemProps {\r\n  element: HTMLElement;\r\n  viewportData: ViewportData;\r\n  imageSliceData: ImageSliceData;\r\n  servicesManager: AppTypes.ServicesManager;\r\n  viewportId: string;\r\n  instance: InstanceMetadata;\r\n  customization: any;\r\n  formatters: {\r\n    formatPN: (val) => string;\r\n    formatDate: (val) => string;\r\n    formatTime: (val) => string;\r\n    formatNumberPrecision: (val, number) => string;\r\n  };\r\n\r\n  // calculated values\r\n  voi: {\r\n    windowWidth: number;\r\n    windowCenter: number;\r\n  };\r\n  instanceNumber?: number;\r\n  scale?: number;\r\n}\r\n\r\nconst OverlayItemComponents = {\r\n  'ohif.overlayItem': OverlayItem,\r\n  'ohif.overlayItem.windowLevel': VOIOverlayItem,\r\n  'ohif.overlayItem.zoomLevel': ZoomOverlayItem,\r\n  'ohif.overlayItem.instanceNumber': InstanceNumberOverlayItem,\r\n};\r\n\r\n/**\r\n * Customizable Viewport Overlay\r\n */\r\nfunction CustomizableViewportOverlay({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportId,\r\n  servicesManager,\r\n}: {\r\n  element: HTMLElement;\r\n  viewportData: ViewportData;\r\n  imageSliceData: ImageSliceData;\r\n  viewportId: string;\r\n  servicesManager: AppTypes.ServicesManager;\r\n}) {\r\n  const { cornerstoneViewportService, customizationService, toolGroupService, displaySetService } =\r\n    servicesManager.services;\r\n  const [voi, setVOI] = useState({ windowCenter: null, windowWidth: null });\r\n  const [scale, setScale] = useState(1);\r\n  const { imageIndex } = imageSliceData;\r\n\r\n  // Historical usage defined the overlays as separate items due to lack of\r\n  // append functionality.  This code enables the historical usage, but\r\n  // the recommended functionality is to append to the default values in\r\n  // cornerstoneOverlay rather than defining individual items.\r\n  const topLeftCustomization = customizationService.getCustomization('viewportOverlay.topLeft');\r\n  const topRightCustomization = customizationService.getCustomization('viewportOverlay.topRight');\r\n  const bottomLeftCustomization = customizationService.getCustomization(\r\n    'viewportOverlay.bottomLeft'\r\n  );\r\n  const bottomRightCustomization = customizationService.getCustomization(\r\n    'viewportOverlay.bottomRight'\r\n  );\r\n\r\n  const instanceNumber = useMemo(\r\n    () =>\r\n      viewportData\r\n        ? getInstanceNumber(viewportData, viewportId, imageIndex, cornerstoneViewportService)\r\n        : null,\r\n    [viewportData, viewportId, imageIndex, cornerstoneViewportService]\r\n  );\r\n\r\n  const displaySetProps = useMemo(() => {\r\n    const displaySets = getDisplaySets(viewportData, displaySetService);\r\n    if (!displaySets) {\r\n      return null;\r\n    }\r\n    const [displaySet] = displaySets;\r\n    const { instances, instance: referenceInstance } = displaySet;\r\n    return {\r\n      displaySets,\r\n      displaySet,\r\n      instance: instances?.[imageIndex],\r\n      instances,\r\n      referenceInstance,\r\n    };\r\n  }, [viewportData, viewportId, instanceNumber, cornerstoneViewportService]);\r\n\r\n  /**\r\n   * Updating the VOI when the viewport changes its voi\r\n   */\r\n  useEffect(() => {\r\n    const updateVOI = eventDetail => {\r\n      const { range } = eventDetail.detail;\r\n\r\n      if (!range) {\r\n        return;\r\n      }\r\n\r\n      const { lower, upper } = range;\r\n      const { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\r\n\r\n      setVOI({ windowCenter, windowWidth });\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\r\n    };\r\n  }, [viewportId, viewportData, voi, element]);\r\n\r\n  /**\r\n   * Updating the scale when the viewport changes its zoom\r\n   */\r\n  useEffect(() => {\r\n    const updateScale = eventDetail => {\r\n      const { previousCamera, camera } = eventDetail.detail;\r\n\r\n      if (\r\n        previousCamera.parallelScale !== camera.parallelScale ||\r\n        previousCamera.scale !== camera.scale\r\n      ) {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n        if (!viewport) {\r\n          return;\r\n        }\r\n\r\n        const scale = viewport.getZoom();\r\n\r\n        setScale(scale);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\r\n    };\r\n  }, [viewportId, viewportData, cornerstoneViewportService, element]);\r\n\r\n  const _renderOverlayItem = useCallback(\r\n    (item, props) => {\r\n      const overlayItemProps = {\r\n        ...props,\r\n        element,\r\n        viewportData,\r\n        imageSliceData,\r\n        viewportId,\r\n        servicesManager,\r\n        customization: item,\r\n        formatters: {\r\n          formatPN,\r\n          formatDate: formatDICOMDate,\r\n          formatTime: formatDICOMTime,\r\n          formatNumberPrecision,\r\n        },\r\n      };\r\n\r\n      if (!item) {\r\n        return null;\r\n      }\r\n\r\n      const { inheritsFrom } = item;\r\n      const OverlayItemComponent = OverlayItemComponents[inheritsFrom];\r\n\r\n      if (OverlayItemComponent) {\r\n        return <OverlayItemComponent {...overlayItemProps} />;\r\n      } else {\r\n        const renderItem = customizationService.transform(item);\r\n\r\n        if (typeof renderItem.contentF === 'function') {\r\n          return renderItem.contentF(overlayItemProps);\r\n        }\r\n      }\r\n    },\r\n    [\r\n      element,\r\n      viewportData,\r\n      imageSliceData,\r\n      viewportId,\r\n      servicesManager,\r\n      customizationService,\r\n      displaySetProps,\r\n      voi,\r\n      scale,\r\n      instanceNumber,\r\n    ]\r\n  );\r\n\r\n  const getContent = useCallback(\r\n    (customization, keyPrefix) => {\r\n      const props = {\r\n        ...displaySetProps,\r\n        formatters: { formatDate: formatDICOMDate },\r\n        voi,\r\n        scale,\r\n        instanceNumber,\r\n        viewportId,\r\n        toolGroupService,\r\n      };\r\n\r\n      return (\r\n        <>\r\n          {customization.map((item, index) => (\r\n            <div key={`${keyPrefix}_${index}`}>\r\n              {((!item?.condition || item.condition(props)) && _renderOverlayItem(item, props)) ||\r\n                null}\r\n            </div>\r\n          ))}\r\n        </>\r\n      );\r\n    },\r\n    [_renderOverlayItem]\r\n  );\r\n\r\n  return (\r\n    <ViewportOverlay\r\n      topLeft={getContent(topLeftCustomization, 'topLeftOverlayItem')}\r\n      topRight={getContent(topRightCustomization, 'topRightOverlayItem')}\r\n      bottomLeft={getContent(bottomLeftCustomization, 'bottomLeftOverlayItem')}\r\n      bottomRight={getContent(bottomRightCustomization, 'bottomRightOverlayItem')}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Gets an array of display sets for the given viewport, based on the viewport data.\r\n * Returns null if none found.\r\n */\r\nfunction getDisplaySets(viewportData, displaySetService) {\r\n  if (!viewportData?.data?.length) {\r\n    return null;\r\n  }\r\n  const displaySets = viewportData.data\r\n    .map(datum => displaySetService.getDisplaySetByUID(datum.displaySetInstanceUID))\r\n    .filter(it => !!it);\r\n  if (!displaySets.length) {\r\n    return null;\r\n  }\r\n  return displaySets;\r\n}\r\n\r\nconst getInstanceNumber = (viewportData, viewportId, imageIndex, cornerstoneViewportService) => {\r\n  let instanceNumber;\r\n\r\n  switch (viewportData.viewportType) {\r\n    case Enums.ViewportType.STACK:\r\n      instanceNumber = _getInstanceNumberFromStack(viewportData, imageIndex);\r\n      break;\r\n    case Enums.ViewportType.ORTHOGRAPHIC:\r\n      instanceNumber = _getInstanceNumberFromVolume(\r\n        viewportData,\r\n        viewportId,\r\n        cornerstoneViewportService,\r\n        imageIndex\r\n      );\r\n      break;\r\n  }\r\n\r\n  return instanceNumber ?? null;\r\n};\r\n\r\nfunction _getInstanceNumberFromStack(viewportData, imageIndex) {\r\n  const imageIds = viewportData.data[0].imageIds;\r\n  const imageId = imageIds[imageIndex];\r\n\r\n  if (!imageId) {\r\n    return;\r\n  }\r\n\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const { instanceNumber } = generalImageModule;\r\n\r\n  const stackSize = imageIds.length;\r\n\r\n  if (stackSize <= 1) {\r\n    return;\r\n  }\r\n\r\n  return parseInt(instanceNumber);\r\n}\r\n\r\n// Since volume viewports can be in any view direction, they can render\r\n// a reconstructed image which don't have imageIds; therefore, no instance and instanceNumber\r\n// Here we check if viewport is in the acquisition direction and if so, we get the instanceNumber\r\nfunction _getInstanceNumberFromVolume(\r\n  viewportData,\r\n  viewportId,\r\n  cornerstoneViewportService,\r\n  imageIndex\r\n) {\r\n  const volumes = viewportData.data;\r\n\r\n  if (!volumes) {\r\n    return;\r\n  }\r\n\r\n  // Todo: support fusion of acquisition plane which has instanceNumber\r\n  const { volume } = volumes[0];\r\n\r\n  if (!volume) {\r\n    return;\r\n  }\r\n\r\n  const { direction, imageIds } = volume;\r\n\r\n  const cornerstoneViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n  if (!cornerstoneViewport) {\r\n    return;\r\n  }\r\n\r\n  const camera = cornerstoneViewport.getCamera();\r\n  const { viewPlaneNormal } = camera;\r\n  // checking if camera is looking at the acquisition plane (defined by the direction on the volume)\r\n\r\n  const scanAxisNormal = direction.slice(6, 9);\r\n\r\n  // check if viewPlaneNormal is parallel to scanAxisNormal\r\n  const cross = vec3.cross(vec3.create(), viewPlaneNormal, scanAxisNormal);\r\n  const isAcquisitionPlane = vec3.length(cross) < EPSILON;\r\n\r\n  if (isAcquisitionPlane) {\r\n    const imageId = imageIds[imageIndex];\r\n\r\n    if (!imageId) {\r\n      return {};\r\n    }\r\n\r\n    const { instanceNumber } = metaData.get('generalImageModule', imageId) || {};\r\n    return parseInt(instanceNumber);\r\n  }\r\n}\r\n\r\nfunction OverlayItem(props) {\r\n  const { instance, customization = {} } = props;\r\n  const { color, attribute, title, label, background } = customization;\r\n  const value = customization.contentF?.(props, customization) ?? instance?.[attribute];\r\n  if (value === undefined || value === null) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color, background }}\r\n      title={title}\r\n    >\r\n      {label ? <span className=\"mr-1 shrink-0\">{label}</span> : null}\r\n      <span className=\"ml-0 mr-2 shrink-0\">{value}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Window Level / Center Overlay item\r\n */\r\nfunction VOIOverlayItem({ voi, customization }: OverlayItemProps) {\r\n  const { windowWidth, windowCenter } = voi;\r\n  if (typeof windowCenter !== 'number' || typeof windowWidth !== 'number') {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: customization?.color }}\r\n    >\r\n      <span className=\"mr-0.5 shrink-0 opacity-[0.67]\">W:</span>\r\n      <span className=\"mr-2.5 shrink-0\">{windowWidth.toFixed(0)}</span>\r\n      <span className=\"mr-0.5 shrink-0 opacity-[0.67]\">L:</span>\r\n      <span className=\"shrink-0\">{windowCenter.toFixed(0)}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Zoom Level Overlay item\r\n */\r\nfunction ZoomOverlayItem({ scale, customization }: OverlayItemProps) {\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span className=\"mr-0.5 shrink-0 opacity-[0.67]\">Zoom:</span>\r\n      <span>{scale.toFixed(2)}x</span>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Instance Number Overlay Item\r\n */\r\nfunction InstanceNumberOverlayItem({\r\n  instanceNumber,\r\n  imageSliceData,\r\n  customization,\r\n}: OverlayItemProps) {\r\n  const { imageIndex, numberOfSlices } = imageSliceData;\r\n\r\n  return (\r\n    <div\r\n      className=\"overlay-item flex flex-row\"\r\n      style={{ color: (customization && customization.color) || undefined }}\r\n    >\r\n      <span>\r\n        {instanceNumber !== undefined && instanceNumber !== null ? (\r\n          <>\r\n            <span className=\"mr-0.5 shrink-0 opacity-[0.67]\">I:</span>\r\n            <span>{`${instanceNumber} (${imageIndex + 1}/${numberOfSlices})`}</span>\r\n          </>\r\n        ) : (\r\n          `${imageIndex + 1}/${numberOfSlices}`\r\n        )}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nCustomizableViewportOverlay.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  imageIndex: PropTypes.number,\r\n  viewportId: PropTypes.string,\r\n};\r\n\r\nexport default CustomizableViewportOverlay;\r\n\r\nexport { CustomizableViewportOverlay };\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport classNames from 'classnames';\r\nimport { metaData, Enums, Types, getEnabledElement } from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/tools';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport './ViewportOrientationMarkers.css';\r\n\r\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\r\n\r\nfunction ViewportOrientationMarkers({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportId,\r\n  servicesManager,\r\n  orientationMarkers = ['top', 'left'],\r\n}: withAppTypes) {\r\n  // Rotation is in degrees\r\n  const [rotation, setRotation] = useState(0);\r\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\r\n  const [flipVertical, setFlipVertical] = useState(false);\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const cameraModifiedListener = (evt: Types.EventTypes.CameraModifiedEvent) => {\r\n      const { previousCamera, camera } = evt.detail;\r\n\r\n      const { rotation } = camera;\r\n      if (rotation !== undefined) {\r\n        setRotation(rotation);\r\n      }\r\n\r\n      if (\r\n        camera.flipHorizontal !== undefined &&\r\n        previousCamera.flipHorizontal !== camera.flipHorizontal\r\n      ) {\r\n        setFlipHorizontal(camera.flipHorizontal);\r\n      }\r\n\r\n      if (\r\n        camera.flipVertical !== undefined &&\r\n        previousCamera.flipVertical !== camera.flipVertical\r\n      ) {\r\n        setFlipVertical(camera.flipVertical);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n    };\r\n  }, []);\r\n\r\n  const markers = useMemo(() => {\r\n    if (!viewportData) {\r\n      return '';\r\n    }\r\n\r\n    let rowCosines, columnCosines, isDefaultValueSetForRowCosine, isDefaultValueSetForColumnCosine;\r\n    if (viewportData.viewportType === 'stack') {\r\n      const imageIndex = imageSliceData.imageIndex;\r\n      const imageId = viewportData.data[0].imageIds?.[imageIndex];\r\n\r\n      // Workaround for below TODO stub\r\n      if (!imageId) {\r\n        return false;\r\n      }\r\n\r\n      ({\r\n        rowCosines,\r\n        columnCosines,\r\n        isDefaultValueSetForColumnCosine,\r\n        isDefaultValueSetForColumnCosine,\r\n      } = metaData.get('imagePlaneModule', imageId) || {});\r\n    } else {\r\n      if (!element || !getEnabledElement(element)) {\r\n        return '';\r\n      }\r\n\r\n      const { viewport } = getEnabledElement(element);\r\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\r\n\r\n      const viewRight = vec3.create();\r\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\r\n\r\n      columnCosines = [-viewUp[0], -viewUp[1], -viewUp[2]];\r\n      rowCosines = viewRight;\r\n    }\r\n\r\n    if (\r\n      !rowCosines ||\r\n      !columnCosines ||\r\n      rotation === undefined ||\r\n      isDefaultValueSetForRowCosine ||\r\n      isDefaultValueSetForColumnCosine\r\n    ) {\r\n      return '';\r\n    }\r\n\r\n    const markers = _getOrientationMarkers(\r\n      rowCosines,\r\n      columnCosines,\r\n      rotation,\r\n      flipVertical,\r\n      flipHorizontal\r\n    );\r\n\r\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (!ohifViewport) {\r\n      console.log('ViewportOrientationMarkers::No viewport');\r\n      return null;\r\n    }\r\n\r\n    return orientationMarkers.map((m, index) => (\r\n      <div\r\n        className={classNames(\r\n          'overlay-text',\r\n          `${m}-mid orientation-marker`,\r\n          'text-highlight/65',\r\n          'text-base',\r\n          'leading-5'\r\n        )}\r\n        key={`${m}-mid orientation-marker`}\r\n      >\r\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\r\n      </div>\r\n    ));\r\n  }, [\r\n    viewportData,\r\n    imageSliceData,\r\n    rotation,\r\n    flipVertical,\r\n    flipHorizontal,\r\n    orientationMarkers,\r\n    element,\r\n  ]);\r\n\r\n  return <div className=\"ViewportOrientationMarkers select-none\">{markers}</div>;\r\n}\r\n\r\n/**\r\n *\r\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\r\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\r\n *\r\n * @param {*} rowCosines\r\n * @param {*} columnCosines\r\n * @param {*} rotation in degrees\r\n * @returns\r\n */\r\nfunction _getOrientationMarkers(rowCosines, columnCosines, rotation, flipVertical, flipHorizontal) {\r\n  const rowString = getOrientationStringLPS(rowCosines);\r\n  const columnString = getOrientationStringLPS(columnCosines);\r\n  const oppositeRowString = invertOrientationStringLPS(rowString);\r\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\r\n\r\n  const markers = {\r\n    top: oppositeColumnString,\r\n    left: oppositeRowString,\r\n    right: rowString,\r\n    bottom: columnString,\r\n  };\r\n\r\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\r\n  // the rotation applications\r\n  if (flipVertical) {\r\n    markers.top = invertOrientationStringLPS(markers.top);\r\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\r\n  }\r\n\r\n  if (flipHorizontal) {\r\n    markers.left = invertOrientationStringLPS(markers.left);\r\n    markers.right = invertOrientationStringLPS(markers.right);\r\n  }\r\n\r\n  // Swap the labels accordingly if the viewport has been rotated\r\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\r\n  if (rotation === 90 || rotation === -270) {\r\n    return {\r\n      top: markers.left,\r\n      left: invertOrientationStringLPS(markers.top),\r\n      right: invertOrientationStringLPS(markers.bottom),\r\n      bottom: markers.right, // left\r\n    };\r\n  } else if (rotation === -90 || rotation === 270) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.left),\r\n      left: markers.top,\r\n      bottom: markers.left,\r\n      right: markers.bottom,\r\n    };\r\n  } else if (rotation === 180 || rotation === -180) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.top),\r\n      left: invertOrientationStringLPS(markers.left),\r\n      bottom: invertOrientationStringLPS(markers.bottom),\r\n      right: invertOrientationStringLPS(markers.right),\r\n    };\r\n  }\r\n\r\n  return markers;\r\n}\r\n\r\nexport default ViewportOrientationMarkers;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const loadIndicatorRef = useRef(null);\r\n  const imageIdToBeLoaded = useRef(null);\r\n\r\n  const setLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    loadIndicatorRef.current = setTimeout(() => {\r\n      setLoading(true);\r\n    }, 50);\r\n  };\r\n\r\n  const setFinishLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const setErrorState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\r\n      setError(evt.detail.error);\r\n      imageIdToBeLoaded.current = null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    };\r\n  }, [element, viewportData]);\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-50\">\r\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n            <p className=\"text-primary-light text-xl font-light\">\r\n              <h4>Error Loading Image</h4>\r\n              <p>An error has occurred.</p>\r\n              <p>{error}</p>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\r\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\r\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-black opacity-50\">\r\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nViewportImageSliceLoadingIndicator.propTypes = {\r\n  error: PropTypes.object,\r\n  element: PropTypes.object,\r\n};\r\n\r\nexport default ViewportImageSliceLoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\r\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\r\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\r\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\r\n\r\nfunction CornerstoneOverlays(props: withAppTypes) {\r\n  const { viewportId, element, scrollbarHeight, servicesManager } = props;\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [imageSliceData, setImageSliceData] = useState({\r\n    imageIndex: 0,\r\n    numberOfSlices: 0,\r\n  });\r\n  const [viewportData, setViewportData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportId !== viewportId) {\r\n          return;\r\n        }\r\n\r\n        setViewportData(props.viewportData);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  if (viewportData) {\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"noselect\">\r\n      <ViewportImageScrollbar\r\n        viewportId={viewportId}\r\n        viewportData={viewportData}\r\n        element={element}\r\n        imageSliceData={imageSliceData}\r\n        setImageSliceData={setImageSliceData}\r\n        scrollbarHeight={scrollbarHeight}\r\n        servicesManager={servicesManager}\r\n      />\r\n\r\n      <CustomizableViewportOverlay\r\n        imageSliceData={imageSliceData}\r\n        viewportData={viewportData}\r\n        viewportId={viewportId}\r\n        servicesManager={servicesManager}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportImageSliceLoadingIndicator\r\n        viewportData={viewportData}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportOrientationMarkers\r\n        imageSliceData={imageSliceData}\r\n        element={element}\r\n        viewportData={viewportData}\r\n        servicesManager={servicesManager}\r\n        viewportId={viewportId}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CornerstoneOverlays;\r\n","import React, { useCallback, useEffect, useState, useRef } from 'react';\r\nimport { useCine } from '@ohif/ui-next';\r\nimport { Enums, eventTarget, cache } from '@cornerstonejs/core';\r\nimport { useAppConfig } from '@state';\r\n\r\nfunction WrappedCinePlayer({\r\n  enabledVPElement,\r\n  viewportId,\r\n  servicesManager,\r\n}: withAppTypes<{\r\n  enabledVPElement: HTMLElement;\r\n  viewportId: string;\r\n}>) {\r\n  const { customizationService, displaySetService, viewportGridService } = servicesManager.services;\r\n  const [{ isCineEnabled, cines }, cineService] = useCine();\r\n  const [newStackFrameRate, setNewStackFrameRate] = useState(24);\r\n  const [dynamicInfo, setDynamicInfo] = useState(null);\r\n  const [appConfig] = useAppConfig();\r\n  const isMountedRef = useRef(null);\r\n\r\n  const cineHandler = () => {\r\n    if (!cines?.[viewportId] || !enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    const { isPlaying = false, frameRate = 24 } = cines[viewportId];\r\n    const validFrameRate = Math.max(frameRate, 1);\r\n\r\n    return isPlaying\r\n      ? cineService.playClip(enabledVPElement, { framesPerSecond: validFrameRate, viewportId })\r\n      : cineService.stopClip(enabledVPElement);\r\n  };\r\n\r\n  const newDisplaySetHandler = useCallback(() => {\r\n    if (!enabledVPElement || !isCineEnabled) {\r\n      return;\r\n    }\r\n\r\n    const { viewports } = viewportGridService.getState();\r\n    const { displaySetInstanceUIDs } = viewports.get(viewportId);\r\n    let frameRate = 24;\r\n    let isPlaying = cines[viewportId]?.isPlaying || false;\r\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n      if (displaySet.FrameRate) {\r\n        // displaySet.FrameRate corresponds to DICOM tag (0018,1063) which is defined as the the frame time in milliseconds\r\n        // So a bit of math to get the actual frame rate.\r\n        frameRate = Math.round(1000 / displaySet.FrameRate);\r\n        isPlaying ||= !!appConfig.autoPlayCine;\r\n      }\r\n\r\n      // check if the displaySet is dynamic and set the dynamic info\r\n      if (displaySet.isDynamicVolume) {\r\n        const { dynamicVolumeInfo } = displaySet;\r\n        const numDimensionGroups = dynamicVolumeInfo.timePoints.length;\r\n        const label = dynamicVolumeInfo.splittingTag;\r\n        const dimensionGroupNumber = dynamicVolumeInfo.dimensionGroupNumber || 1;\r\n        setDynamicInfo({\r\n          volumeId: displaySet.displaySetInstanceUID,\r\n          dimensionGroupNumber,\r\n          numDimensionGroups,\r\n          label,\r\n        });\r\n      } else {\r\n        setDynamicInfo(null);\r\n      }\r\n    });\r\n\r\n    if (isPlaying) {\r\n      cineService.setIsCineEnabled(isPlaying);\r\n    }\r\n    cineService.setCine({ id: viewportId, isPlaying, frameRate });\r\n    setNewStackFrameRate(frameRate);\r\n  }, [displaySetService, viewportId, viewportGridService, cines, isCineEnabled, enabledVPElement]);\r\n\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n\r\n    newDisplaySetHandler();\r\n\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, [isCineEnabled, newDisplaySetHandler]);\r\n\r\n  useEffect(() => {\r\n    if (!isCineEnabled) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n  }, [isCineEnabled, cineHandler, enabledVPElement]);\r\n\r\n  /**\r\n   * Use effect for handling new display set\r\n   */\r\n  useEffect(() => {\r\n    if (!enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    enabledVPElement.addEventListener(Enums.Events.VIEWPORT_NEW_IMAGE_SET, newDisplaySetHandler);\r\n    // this doesn't makes sense that we are listening to this event on viewport element\r\n    enabledVPElement.addEventListener(\r\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n      newDisplaySetHandler\r\n    );\r\n\r\n    return () => {\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n\r\n      enabledVPElement.removeEventListener(\r\n        Enums.Events.VIEWPORT_NEW_IMAGE_SET,\r\n        newDisplaySetHandler\r\n      );\r\n      enabledVPElement.removeEventListener(\r\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n        newDisplaySetHandler\r\n      );\r\n    };\r\n  }, [enabledVPElement, newDisplaySetHandler, viewportId]);\r\n\r\n  useEffect(() => {\r\n    if (!cines || !cines[viewportId] || !enabledVPElement || !isMountedRef.current) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n\r\n    return () => {\r\n      cineService.stopClip(enabledVPElement, { viewportId });\r\n    };\r\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\r\n\r\n  if (!isCineEnabled) {\r\n    return null;\r\n  }\r\n\r\n  const cine = cines[viewportId];\r\n  const isPlaying = cine?.isPlaying || false;\r\n\r\n  return (\r\n    <RenderCinePlayer\r\n      viewportId={viewportId}\r\n      cineService={cineService}\r\n      newStackFrameRate={newStackFrameRate}\r\n      isPlaying={isPlaying}\r\n      dynamicInfo={dynamicInfo}\r\n      customizationService={customizationService}\r\n    />\r\n  );\r\n}\r\n\r\nfunction RenderCinePlayer({\r\n  viewportId,\r\n  cineService,\r\n  newStackFrameRate,\r\n  isPlaying,\r\n  dynamicInfo: dynamicInfoProp,\r\n  customizationService,\r\n}) {\r\n  const CinePlayerComponent = customizationService.getCustomization('cinePlayer');\r\n\r\n  const [dynamicInfo, setDynamicInfo] = useState(dynamicInfoProp);\r\n\r\n  useEffect(() => {\r\n    setDynamicInfo(dynamicInfoProp);\r\n  }, [dynamicInfoProp]);\r\n\r\n  /**\r\n   * Use effect for handling 4D time index changed\r\n   */\r\n  useEffect(() => {\r\n    if (!dynamicInfo) {\r\n      return;\r\n    }\r\n\r\n    const handleDimensionGroupChange = evt => {\r\n      const { volumeId, dimensionGroupNumber, numDimensionGroups, splittingTag } = evt.detail;\r\n      setDynamicInfo({ volumeId, dimensionGroupNumber, numDimensionGroups, label: splittingTag });\r\n    };\r\n\r\n    eventTarget.addEventListener(\r\n      Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED,\r\n      handleDimensionGroupChange\r\n    );\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(\r\n        Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED,\r\n        handleDimensionGroupChange\r\n      );\r\n    };\r\n  }, [dynamicInfo]);\r\n\r\n  useEffect(() => {\r\n    if (!dynamicInfo) {\r\n      return;\r\n    }\r\n\r\n    const { volumeId, dimensionGroupNumber, numDimensionGroups, splittingTag } = dynamicInfo || {};\r\n    const volume = cache.getVolume(volumeId, true);\r\n    volume.dimensionGroupNumber = dimensionGroupNumber;\r\n\r\n    setDynamicInfo({ volumeId, dimensionGroupNumber, numDimensionGroups, label: splittingTag });\r\n  }, []);\r\n\r\n  const updateDynamicInfo = useCallback(props => {\r\n    const { volumeId, dimensionGroupNumber } = props;\r\n    const volume = cache.getVolume(volumeId, true);\r\n    volume.dimensionGroupNumber = dimensionGroupNumber;\r\n  }, []);\r\n\r\n  return (\r\n    <CinePlayerComponent\r\n      className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\r\n      frameRate={newStackFrameRate}\r\n      isPlaying={isPlaying}\r\n      onClose={() => {\r\n        // also stop the clip\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          isPlaying: false,\r\n        });\r\n        cineService.setIsCineEnabled(false);\r\n        cineService.setViewportCineClosed(viewportId);\r\n      }}\r\n      onPlayPauseChange={isPlaying => {\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          isPlaying,\r\n        });\r\n      }}\r\n      onFrameRateChange={frameRate =>\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          frameRate,\r\n        })\r\n      }\r\n      dynamicInfo={dynamicInfo}\r\n      updateDynamicInfo={updateDynamicInfo}\r\n    />\r\n  );\r\n}\r\n\r\nexport default WrappedCinePlayer;","import CinePlayer from './CinePlayer';\r\n\r\nexport default CinePlayer;\r\n","import React from 'react';\r\nimport { useViewportActionCornersContext } from '../contextProviders/ViewportActionCornersProvider';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nexport type OHIFViewportActionCornersProps = {\r\n  viewportId: string;\r\n};\r\n\r\nfunction OHIFViewportActionCorners({ viewportId }: OHIFViewportActionCornersProps) {\r\n  const { servicesManager } = useSystem();\r\n  const [viewportActionCornersState] = useViewportActionCornersContext();\r\n  const ViewportActionCorners =\r\n    servicesManager.services.customizationService.getCustomization('ui.viewportActionCorner');\r\n  if (!viewportActionCornersState[viewportId]) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ViewportActionCorners\r\n      cornerComponents={viewportActionCornersState[viewportId]}\r\n    ></ViewportActionCorners>\r\n  );\r\n}\r\n\r\nexport default OHIFViewportActionCorners;\r\n","import React, { ReactNode } from 'react';\r\nimport { nonWLModalities } from './WindowLevelActionMenu';\r\n\r\nexport function getWindowLevelActionMenu({\r\n  viewportId,\r\n  element,\r\n  displaySets,\r\n  servicesManager,\r\n  commandsManager,\r\n  verticalDirection,\r\n  horizontalDirection,\r\n}: withAppTypes<{\r\n  viewportId: string;\r\n  element: HTMLElement;\r\n  displaySets: AppTypes.DisplaySet[];\r\n}>): ReactNode {\r\n  const { customizationService } = servicesManager.services;\r\n\r\n  const presets = customizationService.getCustomization('cornerstone.windowLevelPresets');\r\n  const colorbarProperties = customizationService.getCustomization('cornerstone.colorbar');\r\n  const { volumeRenderingPresets, volumeRenderingQualityRange } =\r\n    customizationService.getCustomization('cornerstone.3dVolumeRendering');\r\n  const WindowLevelActionMenu = customizationService.getCustomization(\r\n    'viewportActionMenu.windowLevelActionMenu'\r\n  );\r\n  const displaySetPresets = displaySets\r\n    .filter(displaySet => presets[displaySet.Modality])\r\n    .map(displaySet => {\r\n      return { [displaySet.Modality]: presets[displaySet.Modality] };\r\n    });\r\n\r\n  const modalities = displaySets\r\n    .map(displaySet => displaySet.Modality)\r\n    .filter(modality => !nonWLModalities.includes(modality));\r\n\r\n  if (modalities.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const WindowLevelActionMenuComponent = WindowLevelActionMenu?.component;\r\n\r\n  return (\r\n    <WindowLevelActionMenuComponent\r\n      viewportId={viewportId}\r\n      element={element}\r\n      presets={displaySetPresets}\r\n      verticalDirection={verticalDirection}\r\n      horizontalDirection={horizontalDirection}\r\n      commandsManager={commandsManager}\r\n      servicesManager={servicesManager}\r\n      colorbarProperties={colorbarProperties}\r\n      displaySets={displaySets}\r\n      volumeRenderingPresets={volumeRenderingPresets}\r\n      volumeRenderingQualityRange={volumeRenderingQualityRange}\r\n    />\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Icons, Separator } from '@ohif/ui-next';\r\nimport { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\r\n\r\nfunction ViewportSegmentationMenu({\r\n  viewportId,\r\n  servicesManager,\r\n}: withAppTypes<{ viewportId: string }>) {\r\n  const { segmentationService } = servicesManager.services;\r\n  const [activeSegmentations, setActiveSegmentations] = useState([]);\r\n  const [availableSegmentations, setAvailableSegmentations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const updateSegmentations = () => {\r\n      const active = segmentationService.getSegmentationRepresentations(viewportId);\r\n      setActiveSegmentations(active);\r\n\r\n      const all = segmentationService.getSegmentations();\r\n      const available = all.filter(\r\n        seg => !active.some(activeSeg => activeSeg.segmentationId === seg.segmentationId)\r\n      );\r\n      setAvailableSegmentations(available);\r\n    };\r\n\r\n    updateSegmentations();\r\n\r\n    const subscriptions = [\r\n      segmentationService.EVENTS.SEGMENTATION_MODIFIED,\r\n      segmentationService.EVENTS.SEGMENTATION_REMOVED,\r\n      segmentationService.EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\r\n    ].map(event => segmentationService.subscribe(event, updateSegmentations));\r\n\r\n    return () => {\r\n      subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    };\r\n  }, [segmentationService, viewportId]);\r\n\r\n  const toggleSegmentationRepresentationVisibility = (\r\n    segmentationId,\r\n    type = SegmentationRepresentations.Labelmap\r\n  ) => {\r\n    segmentationService.toggleSegmentationRepresentationVisibility(viewportId, {\r\n      segmentationId,\r\n      type,\r\n    });\r\n  };\r\n\r\n  const addSegmentationToViewport = segmentationId => {\r\n    segmentationService.addSegmentationRepresentation(viewportId, { segmentationId });\r\n  };\r\n\r\n  const removeSegmentationFromViewport = segmentationId => {\r\n    segmentationService.removeSegmentationRepresentations(viewportId, {\r\n      segmentationId,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-muted flex h-full w-[262px] flex-col rounded p-3\">\r\n      <span className=\"text-muted-foreground mb-2 text-xs font-semibold\">Current Viewport</span>\r\n      <ul className=\"space-y-1\">\r\n        {activeSegmentations.map(segmentation => (\r\n          <li\r\n            key={segmentation.id}\r\n            className=\"flex items-center text-sm\"\r\n          >\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              className=\"text-muted-foreground mr-2\"\r\n              onClick={() => removeSegmentationFromViewport(segmentation.segmentationId)}\r\n            >\r\n              <Icons.Minus className=\"h-6 w-6\" />\r\n            </Button>\r\n            <span className=\"text-foreground flex-grow\">{segmentation.label}</span>\r\n            {segmentation.visible ? (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                className=\"text-muted-foreground\"\r\n                onClick={() =>\r\n                  toggleSegmentationRepresentationVisibility(\r\n                    segmentation.segmentationId,\r\n                    segmentation.type\r\n                  )\r\n                }\r\n              >\r\n                <Icons.Hide className=\"h-6 w-6\" />\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                className=\"text-muted-foreground\"\r\n                onClick={() =>\r\n                  toggleSegmentationRepresentationVisibility(\r\n                    segmentation.segmentationId,\r\n                    segmentation.type\r\n                  )\r\n                }\r\n              >\r\n                <Icons.Show className=\"h-6 w-6\" />\r\n              </Button>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {availableSegmentations.length > 0 && (\r\n        <>\r\n          <Separator className=\"bg-input mb-3\" />\r\n          <span className=\"text-muted-foreground mb-2 text-xs font-semibold\">Available</span>\r\n          <ul className=\"space-y-1\">\r\n            {availableSegmentations.map(({ segmentationId, label }) => (\r\n              <li\r\n                key={segmentationId}\r\n                className=\"flex items-center text-sm\"\r\n              >\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"icon\"\r\n                  className=\"text-muted-foreground mr-2\"\r\n                  onClick={() => addSegmentationToViewport(segmentationId)}\r\n                >\r\n                  <Icons.Plus className=\"h-6 w-6\" />\r\n                </Button>\r\n                <span className=\"text-foreground/60\">{label}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewportSegmentationMenu;\r\n","import React, { ReactNode, useEffect, useState } from 'react';\r\nimport { Button, Icons, Popover, PopoverContent, PopoverTrigger } from '@ohif/ui-next';\r\nimport ViewportSegmentationMenu from './ViewportSegmentationMenu';\r\nimport classNames from 'classnames';\r\nimport { useSegmentations } from '../../hooks/useSegmentations';\r\n\r\nexport function ViewportSegmentationMenuWrapper({\r\n  viewportId,\r\n  displaySets,\r\n  servicesManager,\r\n  commandsManager,\r\n  location,\r\n}: withAppTypes<{\r\n  viewportId: string;\r\n  element: HTMLElement;\r\n}>): ReactNode {\r\n  const { viewportActionCornersService, viewportGridService } = servicesManager.services;\r\n\r\n  const segmentations = useSegmentations({ servicesManager });\r\n\r\n  const activeViewportId = viewportGridService.getActiveViewportId();\r\n  const isActiveViewport = viewportId === activeViewportId;\r\n\r\n  const { align, side } = getAlignAndSide(viewportActionCornersService, location);\r\n\r\n  if (!segmentations?.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger\r\n        asChild\r\n        className=\"flex items-center justify-center\"\r\n      >\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"icon\"\r\n        >\r\n          <Icons.ViewportViews\r\n            className={classNames(\r\n              'text-highlight',\r\n              isActiveViewport ? 'visible' : 'invisible group-hover/pane:visible'\r\n            )}\r\n          />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent\r\n        className=\"border-none bg-transparent p-0 shadow-none\"\r\n        side={side}\r\n        align={align}\r\n        alignOffset={-15}\r\n        sideOffset={5}\r\n      >\r\n        <ViewportSegmentationMenu\r\n          className=\"w-full\"\r\n          viewportId={viewportId}\r\n          displaySets={displaySets}\r\n          servicesManager={servicesManager}\r\n          commandsManager={commandsManager}\r\n        />\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nconst getAlignAndSide = (viewportActionCornersService, location) => {\r\n  const ViewportActionCornersLocations = viewportActionCornersService.LOCATIONS;\r\n\r\n  switch (location) {\r\n    case ViewportActionCornersLocations.topLeft:\r\n      return { align: 'start', side: 'bottom' };\r\n    case ViewportActionCornersLocations.topRight:\r\n      return { align: 'end', side: 'bottom' };\r\n    case ViewportActionCornersLocations.bottomLeft:\r\n      return { align: 'start', side: 'top' };\r\n    case ViewportActionCornersLocations.bottomRight:\r\n      return { align: 'end', side: 'top' };\r\n    default:\r\n      console.debug('Unknown location, defaulting to bottom-start');\r\n      return { align: 'start', side: 'bottom' };\r\n  }\r\n};\r\n","import React, { ReactNode } from 'react';\r\nimport { ViewportSegmentationMenuWrapper } from './ViewportSegmentationMenuWrapper';\r\n\r\nexport function getViewportDataOverlaySettingsMenu(\r\n  props: withAppTypes<{\r\n    viewportId: string;\r\n    element: HTMLElement;\r\n  }>\r\n): ReactNode {\r\n  return <ViewportSegmentationMenuWrapper {...props} />;\r\n}\r\n","import { useEffect, useState, memo, useCallback } from 'react';\r\n\r\nconst ActiveViewportBehavior = memo(\r\n  ({ servicesManager, viewportId }: withAppTypes<{ viewportId: string }>) => {\r\n    const {\r\n      displaySetService,\r\n      cineService,\r\n      viewportGridService,\r\n      customizationService,\r\n      cornerstoneViewportService,\r\n    } = servicesManager.services;\r\n\r\n    const [activeViewportId, setActiveViewportId] = useState(viewportId);\r\n\r\n    const handleCineEnable = useCallback(() => {\r\n      if (cineService.isViewportCineClosed(activeViewportId)) {\r\n        return;\r\n      }\r\n\r\n      const displaySetInstanceUIDs =\r\n        viewportGridService.getDisplaySetsUIDsForViewport(activeViewportId);\r\n\r\n      if (!displaySetInstanceUIDs) {\r\n        return;\r\n      }\r\n\r\n      const displaySets = displaySetInstanceUIDs.map(uid =>\r\n        displaySetService.getDisplaySetByUID(uid)\r\n      );\r\n\r\n      if (!displaySets.length) {\r\n        return;\r\n      }\r\n\r\n      const modalities = displaySets.map(displaySet => displaySet?.Modality);\r\n      const isDynamicVolume = displaySets.some(displaySet => displaySet?.isDynamicVolume);\r\n\r\n      const sourceModalities = customizationService.getCustomization('autoCineModalities');\r\n\r\n      const requiresCine = modalities.some(modality => sourceModalities.includes(modality));\r\n\r\n      if ((requiresCine || isDynamicVolume) && !cineService.getState().isCineEnabled) {\r\n        cineService.setIsCineEnabled(true);\r\n      }\r\n    }, [\r\n      activeViewportId,\r\n      cineService,\r\n      viewportGridService,\r\n      displaySetService,\r\n      customizationService,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n      const subscription = viewportGridService.subscribe(\r\n        viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED,\r\n        ({ viewportId }) => setActiveViewportId(viewportId)\r\n      );\r\n\r\n      return () => subscription.unsubscribe();\r\n    }, [viewportId, viewportGridService]);\r\n\r\n    useEffect(() => {\r\n      const subscription = cornerstoneViewportService.subscribe(\r\n        cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n        () => {\r\n          const activeViewportId = viewportGridService.getActiveViewportId();\r\n          setActiveViewportId(activeViewportId);\r\n          handleCineEnable();\r\n        }\r\n      );\r\n\r\n      return () => subscription.unsubscribe();\r\n    }, [viewportId, cornerstoneViewportService, viewportGridService, handleCineEnable]);\r\n\r\n    useEffect(() => {\r\n      handleCineEnable();\r\n    }, [handleCineEnable]);\r\n\r\n    return null;\r\n  },\r\n  arePropsEqual\r\n);\r\n\r\nActiveViewportBehavior.displayName = 'ActiveViewportBehavior';\r\n\r\nfunction arePropsEqual(prevProps, nextProps) {\r\n  return (\r\n    prevProps.viewportId === nextProps.viewportId &&\r\n    prevProps.servicesManager === nextProps.servicesManager\r\n  );\r\n}\r\n\r\nexport default ActiveViewportBehavior;\r\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\r\nimport { useResizeDetector } from 'react-resize-detector';\r\nimport * as cs3DTools from '@cornerstonejs/tools';\r\nimport { Enums, eventTarget, getEnabledElement } from '@cornerstonejs/core';\r\nimport { MeasurementService } from '@ohif/core';\r\nimport { AllInOneMenu } from '@ohif/ui-next';\r\nimport { useViewportDialog } from '@ohif/ui-next';\r\nimport type { Types as csTypes } from '@cornerstonejs/core';\r\n\r\nimport { setEnabledElement } from '../state';\r\n\r\nimport './OHIFCornerstoneViewport.css';\r\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\r\nimport CinePlayer from '../components/CinePlayer';\r\nimport type { Types } from '@ohif/core';\r\n\r\nimport OHIFViewportActionCorners from '../components/OHIFViewportActionCorners';\r\nimport { getWindowLevelActionMenu } from '../components/WindowLevelActionMenu/getWindowLevelActionMenu';\r\nimport { getViewportDataOverlaySettingsMenu } from '../components/ViewportDataOverlaySettingMenu';\r\nimport { getViewportPresentations } from '../utils/presentations/getViewportPresentations';\r\nimport { useSynchronizersStore } from '../stores/useSynchronizersStore';\r\nimport ActiveViewportBehavior from '../utils/ActiveViewportBehavior';\r\nimport { WITH_NAVIGATION } from '../services/ViewportService/CornerstoneViewportService';\r\n\r\nconst STACK = 'stack';\r\n\r\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\r\n// Then we don't need to worry about the re-renders if the props change.\r\nconst OHIFCornerstoneViewport = React.memo(\r\n  (\r\n    props: withAppTypes<{\r\n      viewportId: string;\r\n      displaySets: AppTypes.DisplaySet[];\r\n      viewportOptions: AppTypes.ViewportGrid.GridViewportOptions;\r\n      initialImageIndex: number;\r\n    }>\r\n  ) => {\r\n    const {\r\n      displaySets,\r\n      dataSource,\r\n      viewportOptions,\r\n      displaySetOptions,\r\n      servicesManager,\r\n      commandsManager,\r\n      onElementEnabled,\r\n      // eslint-disable-next-line react/prop-types\r\n      onElementDisabled,\r\n      isJumpToMeasurementDisabled = false,\r\n      // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n      // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n      // to set the initial state of the viewport's first image to render\r\n      // eslint-disable-next-line react/prop-types\r\n      initialImageIndex,\r\n      // if the viewport is part of a hanging protocol layout\r\n      // we should not really rely on the old synchronizers and\r\n      // you see below we only rehydrate the synchronizers if the viewport\r\n      // is not part of the hanging protocol layout. HPs should\r\n      // define their own synchronizers. Since the synchronizers are\r\n      // viewportId dependent and\r\n      // eslint-disable-next-line react/prop-types\r\n      isHangingProtocolLayout,\r\n    } = props;\r\n    const viewportId = viewportOptions.viewportId;\r\n\r\n    if (!viewportId) {\r\n      throw new Error('Viewport ID is required');\r\n    }\r\n\r\n    // Make sure displaySetOptions has one object per displaySet\r\n    while (displaySetOptions.length < displaySets.length) {\r\n      displaySetOptions.push({});\r\n    }\r\n\r\n    // Since we only have support for dynamic data in volume viewports, we should\r\n    // handle this case here and set the viewportType to volume if any of the\r\n    // displaySets are dynamic volumes\r\n    viewportOptions.viewportType = displaySets.some(\r\n      ds => ds.isDynamicVolume && ds.isReconstructable\r\n    )\r\n      ? 'volume'\r\n      : viewportOptions.viewportType;\r\n\r\n    const [scrollbarHeight, setScrollbarHeight] = useState('100px');\r\n    const [enabledVPElement, setEnabledVPElement] = useState(null);\r\n    const elementRef = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n\r\n    const {\r\n      displaySetService,\r\n      toolbarService,\r\n      toolGroupService,\r\n      syncGroupService,\r\n      cornerstoneViewportService,\r\n      segmentationService,\r\n      cornerstoneCacheService,\r\n      viewportActionCornersService,\r\n      customizationService,\r\n      measurementService,\r\n    } = servicesManager.services;\r\n\r\n    const [viewportDialogState] = useViewportDialog();\r\n    // useCallback for scroll bar height calculation\r\n    const setImageScrollBarHeight = useCallback(() => {\r\n      const scrollbarHeight = `${elementRef.current.clientHeight - 10}px`;\r\n      setScrollbarHeight(scrollbarHeight);\r\n    }, [elementRef]);\r\n\r\n    // useCallback for onResize\r\n    const onResize = useCallback(() => {\r\n      if (elementRef.current) {\r\n        cornerstoneViewportService.resize();\r\n        setImageScrollBarHeight();\r\n      }\r\n    }, [elementRef]);\r\n\r\n    const cleanUpServices = useCallback(\r\n      viewportInfo => {\r\n        const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n        const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n        toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\r\n        syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n        segmentationService.clearSegmentationRepresentations(viewportId);\r\n\r\n        viewportActionCornersService.clear(viewportId);\r\n      },\r\n      [\r\n        viewportId,\r\n        segmentationService,\r\n        syncGroupService,\r\n        toolGroupService,\r\n        viewportActionCornersService,\r\n      ]\r\n    );\r\n\r\n    const elementEnabledHandler = useCallback(\r\n      evt => {\r\n        // check this is this element reference and return early if doesn't match\r\n        if (evt.detail.element !== elementRef.current) {\r\n          return;\r\n        }\r\n\r\n        const { viewportId, element } = evt.detail;\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n        if (!viewportInfo) {\r\n          return;\r\n        }\r\n\r\n        setEnabledElement(viewportId, element);\r\n        setEnabledVPElement(element);\r\n\r\n        const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n        const toolGroupId = viewportInfo.getToolGroupId();\r\n        const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n        toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\r\n\r\n        syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n        // we don't need reactivity here so just use state\r\n        const { synchronizersStore } = useSynchronizersStore.getState();\r\n        if (synchronizersStore?.[viewportId]?.length && !isHangingProtocolLayout) {\r\n          // If the viewport used to have a synchronizer, re apply it again\r\n          _rehydrateSynchronizers(viewportId, syncGroupService);\r\n        }\r\n\r\n        if (onElementEnabled && typeof onElementEnabled === 'function') {\r\n          onElementEnabled(evt);\r\n        }\r\n      },\r\n      [viewportId, onElementEnabled, toolGroupService]\r\n    );\r\n\r\n    // disable the element upon unmounting\r\n    useEffect(() => {\r\n      cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\r\n\r\n      eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n\r\n      setImageScrollBarHeight();\r\n\r\n      return () => {\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n        if (!viewportInfo) {\r\n          return;\r\n        }\r\n\r\n        cornerstoneViewportService.storePresentation({ viewportId });\r\n\r\n        // This should be done after the store presentation since synchronizers\r\n        // will get cleaned up and they need the viewportInfo to be present\r\n        cleanUpServices(viewportInfo);\r\n\r\n        if (onElementDisabled && typeof onElementDisabled === 'function') {\r\n          onElementDisabled(viewportInfo);\r\n        }\r\n\r\n        cornerstoneViewportService.disableElement(viewportId);\r\n\r\n        eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n      };\r\n    }, []);\r\n\r\n    // subscribe to displaySet metadata invalidation (updates)\r\n    // Currently, if the metadata changes we need to re-render the display set\r\n    // for it to take effect in the viewport. As we deal with scaling in the loading,\r\n    // we need to remove the old volume from the cache, and let the\r\n    // viewport to re-add it which will use the new metadata. Otherwise, the\r\n    // viewport will use the cached volume and the new metadata will not be used.\r\n    // Note: this approach does not actually end of sending network requests\r\n    // and it uses the network cache\r\n    useEffect(() => {\r\n      const { unsubscribe } = displaySetService.subscribe(\r\n        displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n        async ({\r\n          displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\r\n          invalidateData,\r\n        }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\r\n          if (!invalidateData) {\r\n            return;\r\n          }\r\n\r\n          const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n          if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\r\n            const viewportData = viewportInfo.getViewportData();\r\n            const newViewportData = await cornerstoneCacheService.invalidateViewportData(\r\n              viewportData,\r\n              invalidatedDisplaySetInstanceUID,\r\n              dataSource,\r\n              displaySetService\r\n            );\r\n\r\n            const keepCamera = true;\r\n            cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\r\n          }\r\n        }\r\n      );\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [viewportId]);\r\n\r\n    useEffect(() => {\r\n      // handle the default viewportType to be stack\r\n      if (!viewportOptions.viewportType) {\r\n        viewportOptions.viewportType = STACK;\r\n      }\r\n\r\n      const loadViewportData = async () => {\r\n        const viewportData = await cornerstoneCacheService.createViewportData(\r\n          displaySets,\r\n          viewportOptions,\r\n          dataSource,\r\n          initialImageIndex\r\n        );\r\n\r\n        const presentations = getViewportPresentations(viewportId, viewportOptions);\r\n\r\n        // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\r\n        // Used for segmentation hydration right now, since the logic to decide whether\r\n        // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\r\n        // so we need to re-render (force update via change of the needsRerendering) so that React\r\n        // does the diffing and decides we should render this again (although the id and element has not changed)\r\n        // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\r\n        if (viewportOptions.needsRerendering) {\r\n          viewportOptions.needsRerendering = false;\r\n        }\r\n\r\n        cornerstoneViewportService.setViewportData(\r\n          viewportId,\r\n          viewportData,\r\n          viewportOptions,\r\n          displaySetOptions,\r\n          presentations\r\n        );\r\n      };\r\n\r\n      loadViewportData();\r\n    }, [viewportOptions, displaySets, dataSource]);\r\n\r\n    /**\r\n     * There are two scenarios for jump to click\r\n     * 1. Current viewports contain the displaySet that the annotation was drawn on\r\n     * 2. Current viewports don't contain the displaySet that the annotation was drawn on\r\n     * and we need to change the viewports displaySet for jumping.\r\n     * Since measurement_jump happens via events and listeners, the former case is handled\r\n     * by the measurement_jump direct callback, but the latter case is handled first by\r\n     * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\r\n     * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\r\n     */\r\n    useEffect(() => {\r\n      if (isJumpToMeasurementDisabled) {\r\n        return;\r\n      }\r\n\r\n      const { unsubscribe } = measurementService.subscribe(\r\n        MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\r\n        event => handleJumpToMeasurement(event, elementRef, viewportId, cornerstoneViewportService)\r\n      );\r\n\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [displaySets, elementRef, viewportId, isJumpToMeasurementDisabled, servicesManager]);\r\n\r\n    // Set up the window level action menu in the viewport action corners.\r\n    useEffect(() => {\r\n      const windowLevelActionMenu = customizationService.getCustomization(\r\n        'viewportActionMenu.windowLevelActionMenu'\r\n      );\r\n      const segmentationOverlay = customizationService.getCustomization(\r\n        'viewportActionMenu.segmentationOverlay'\r\n      );\r\n\r\n      if (windowLevelActionMenu?.enabled) {\r\n        viewportActionCornersService.addComponent({\r\n          viewportId,\r\n          id: 'windowLevelActionMenu',\r\n          component: getWindowLevelActionMenu({\r\n            viewportId,\r\n            element: elementRef.current,\r\n            displaySets,\r\n            servicesManager,\r\n            commandsManager,\r\n            location: windowLevelActionMenu.location,\r\n            verticalDirection: AllInOneMenu.VerticalDirection.TopToBottom,\r\n            horizontalDirection: AllInOneMenu.HorizontalDirection.RightToLeft,\r\n          }),\r\n          location: windowLevelActionMenu.location,\r\n        });\r\n      }\r\n\r\n      if (segmentationOverlay?.enabled) {\r\n        viewportActionCornersService.addComponent({\r\n          viewportId,\r\n          id: 'segmentation',\r\n          component: getViewportDataOverlaySettingsMenu({\r\n            viewportId,\r\n            element: elementRef.current,\r\n            displaySets,\r\n            servicesManager,\r\n            commandsManager,\r\n            location: segmentationOverlay.location,\r\n          }),\r\n          location: segmentationOverlay.location,\r\n        });\r\n      }\r\n    }, [displaySets, viewportId, viewportActionCornersService, servicesManager, commandsManager]);\r\n\r\n    const { ref: resizeRef } = useResizeDetector({\r\n      onResize,\r\n    });\r\n\r\n    const Notification = customizationService.getCustomization('ui.notificationComponent');\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"viewport-wrapper\">\r\n          <div\r\n            className=\"cornerstone-viewport-element\"\r\n            style={{ height: '100%', width: '100%' }}\r\n            onContextMenu={e => e.preventDefault()}\r\n            onMouseDown={e => e.preventDefault()}\r\n            ref={el => {\r\n              resizeRef.current = el;\r\n              elementRef.current = el;\r\n            }}\r\n          ></div>\r\n          <CornerstoneOverlays\r\n            viewportId={viewportId}\r\n            toolBarService={toolbarService}\r\n            element={elementRef.current}\r\n            scrollbarHeight={scrollbarHeight}\r\n            servicesManager={servicesManager}\r\n          />\r\n          <CinePlayer\r\n            enabledVPElement={enabledVPElement}\r\n            viewportId={viewportId}\r\n            servicesManager={servicesManager}\r\n          />\r\n          <ActiveViewportBehavior\r\n            viewportId={viewportId}\r\n            servicesManager={servicesManager}\r\n          />\r\n        </div>\r\n        {/* top offset of 24px to account for ViewportActionCorners. */}\r\n        <div className=\"absolute top-[24px] w-full\">\r\n          {viewportDialogState.viewportId === viewportId && (\r\n            <Notification\r\n              id=\"viewport-notification\"\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n              onKeyPress={viewportDialogState.onKeyPress}\r\n            />\r\n          )}\r\n        </div>\r\n        {/* The OHIFViewportActionCorners follows the viewport in the DOM so that it is naturally at a higher z-index.*/}\r\n        <OHIFViewportActionCorners viewportId={viewportId} />\r\n      </React.Fragment>\r\n    );\r\n  },\r\n  areEqual\r\n);\r\n\r\n// Helper function to handle jumping to measurements\r\nfunction handleJumpToMeasurement(event, elementRef, viewportId, cornerstoneViewportService) {\r\n  const { measurement, isConsumed } = event;\r\n  if (!measurement || isConsumed) {\r\n    return;\r\n  }\r\n\r\n  const enabledElement = getEnabledElement(elementRef.current);\r\n\r\n  if (!enabledElement) {\r\n    return;\r\n  }\r\n\r\n  const viewport = enabledElement.viewport as csTypes.IStackViewport | csTypes.IVolumeViewport;\r\n\r\n  const { metadata, displaySetInstanceUID } = measurement;\r\n\r\n  const viewportDisplaySets = cornerstoneViewportService.getViewportDisplaySets(viewportId);\r\n\r\n  const showingDisplaySet = viewportDisplaySets.find(\r\n    ds => ds.displaySetInstanceUID === displaySetInstanceUID\r\n  );\r\n\r\n  let metadataToUse = metadata;\r\n  // if it is not showing the displaySet we need to remove the FOR from the metadata\r\n  if (!showingDisplaySet) {\r\n    metadataToUse = {\r\n      ...metadata,\r\n      FrameOfReferenceUID: undefined,\r\n    };\r\n  }\r\n\r\n  // Todo: make it work with cases where we want to define FOR based measurements too\r\n  if (!viewport.isReferenceViewable(metadataToUse, WITH_NAVIGATION)) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    viewport.setViewReference(metadata);\r\n    viewport.render();\r\n  } catch (e) {\r\n    console.warn('Unable to apply', metadata, e);\r\n  }\r\n\r\n  cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n  event?.consume?.();\r\n}\r\n\r\nfunction _rehydrateSynchronizers(viewportId: string, syncGroupService: any) {\r\n  const { synchronizersStore } = useSynchronizersStore.getState();\r\n  const synchronizers = synchronizersStore[viewportId];\r\n\r\n  if (!synchronizers) {\r\n    return;\r\n  }\r\n\r\n  synchronizers.forEach(synchronizerObj => {\r\n    if (!synchronizerObj.id) {\r\n      return;\r\n    }\r\n\r\n    const { id, sourceViewports, targetViewports } = synchronizerObj;\r\n\r\n    const synchronizer = syncGroupService.getSynchronizer(id);\r\n\r\n    if (!synchronizer) {\r\n      return;\r\n    }\r\n\r\n    const sourceViewportInfo = sourceViewports.find(\r\n      sourceViewport => sourceViewport.viewportId === viewportId\r\n    );\r\n\r\n    const targetViewportInfo = targetViewports.find(\r\n      targetViewport => targetViewport.viewportId === viewportId\r\n    );\r\n\r\n    const isSourceViewportInSynchronizer = synchronizer\r\n      .getSourceViewports()\r\n      .find(sourceViewport => sourceViewport.viewportId === viewportId);\r\n\r\n    const isTargetViewportInSynchronizer = synchronizer\r\n      .getTargetViewports()\r\n      .find(targetViewport => targetViewport.viewportId === viewportId);\r\n\r\n    // if the viewport was previously a source viewport, add it again\r\n    if (sourceViewportInfo && !isSourceViewportInSynchronizer) {\r\n      synchronizer.addSource({\r\n        viewportId: sourceViewportInfo.viewportId,\r\n        renderingEngineId: sourceViewportInfo.renderingEngineId,\r\n      });\r\n    }\r\n\r\n    // if the viewport was previously a target viewport, add it again\r\n    if (targetViewportInfo && !isTargetViewportInSynchronizer) {\r\n      synchronizer.addTarget({\r\n        viewportId: targetViewportInfo.viewportId,\r\n        renderingEngineId: targetViewportInfo.renderingEngineId,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// Component displayName\r\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n  if (nextProps.needsRerendering) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: needsRerendering');\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: displaySets length change');\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: orientation change');\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: toolGroupId change');\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    nextProps.viewportOptions.viewportType &&\r\n    prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType\r\n  ) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: viewportType change');\r\n    return false;\r\n  }\r\n\r\n  if (nextProps.viewportOptions.needsRerendering) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: viewportOptions.needsRerendering');\r\n    return false;\r\n  }\r\n\r\n  const prevDisplaySets = prevProps.displaySets;\r\n  const nextDisplaySets = nextProps.displaySets;\r\n\r\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: displaySets length mismatch');\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < prevDisplaySets.length; i++) {\r\n    const prevDisplaySet = prevDisplaySets[i];\r\n\r\n    const foundDisplaySet = nextDisplaySets.find(\r\n      nextDisplaySet =>\r\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\r\n    );\r\n\r\n    if (!foundDisplaySet) {\r\n      console.debug('OHIFCornerstoneViewport: Rerender caused by: displaySet not found');\r\n      return false;\r\n    }\r\n\r\n    // check they contain the same image\r\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\r\n      console.debug('OHIFCornerstoneViewport: Rerender caused by: images length mismatch');\r\n      return false;\r\n    }\r\n\r\n    // check if their imageIds are the same\r\n    if (foundDisplaySet.images?.length) {\r\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\r\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\r\n          console.debug('OHIFCornerstoneViewport: Rerender caused by: imageId mismatch');\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Helper function to check if display sets have changed\r\nfunction haveDisplaySetsChanged(prevDisplaySets, currentDisplaySets) {\r\n  if (prevDisplaySets.length !== currentDisplaySets.length) {\r\n    return true;\r\n  }\r\n\r\n  return currentDisplaySets.some((currentDS, index) => {\r\n    const prevDS = prevDisplaySets[index];\r\n    return currentDS.displaySetInstanceUID !== prevDS.displaySetInstanceUID;\r\n  });\r\n}\r\n\r\nexport default OHIFCornerstoneViewport;\r\n","import { usePositionPresentationStore } from '../../stores/usePositionPresentationStore';\r\nimport { useLutPresentationStore } from '../../stores/useLutPresentationStore';\r\nimport { useSegmentationPresentationStore } from '../../stores/useSegmentationPresentationStore';\r\n\r\nexport function getViewportPresentations(\r\n  viewportId: string,\r\n  viewportOptions: AppTypes.ViewportGrid.GridViewportOptions\r\n) {\r\n  const { lutPresentationStore } = useLutPresentationStore.getState();\r\n  const { positionPresentationStore } = usePositionPresentationStore.getState();\r\n  const { segmentationPresentationStore } = useSegmentationPresentationStore.getState();\r\n\r\n  // NOTE: this is the new viewport state, we should not get the presentationIds from the cornerstoneViewportService\r\n  // since that has the old viewport state\r\n  const { presentationIds } = viewportOptions;\r\n\r\n  if (!presentationIds) {\r\n    return {\r\n      positionPresentation: null,\r\n      lutPresentation: null,\r\n      segmentationPresentation: null,\r\n    };\r\n  }\r\n\r\n  const { lutPresentationId, positionPresentationId, segmentationPresentationId } = presentationIds;\r\n\r\n  return {\r\n    positionPresentation: positionPresentationStore[positionPresentationId],\r\n    lutPresentation: lutPresentationStore[lutPresentationId],\r\n    segmentationPresentation: segmentationPresentationStore[segmentationPresentationId],\r\n  };\r\n}\r\n"],"names":["CornerstoneImageScrollbar","viewportData","viewportId","element","imageSliceData","setImageSliceData","scrollbarHeight","servicesManager","cineService","cornerstoneViewportService","services","useEffect","viewport","getCornerstoneViewport","VolumeViewport3D","imageIndex","getCurrentImageIdIndex","numberOfSlices","getNumberOfSlices","error","console","warn","viewportType","eventId","Enums","STACK","STACK_VIEWPORT_SCROLL","ORTHOGRAPHIC","VOLUME_NEW_IMAGE","IMAGE_RENDERED","updateIndex","event","newImageIdIndex","detail","addEventListener","removeEventListener","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","isCineEnabled","getState","stopClip","setCine","id","isPlaying","csUtils","debounceLoading","max","height","value","propTypes","PropTypes","isRequired","Element","formatNumberPrecision","number","precision","parseFloat","toFixed","formatDICOMDate","date","strFormat","moment","format","formatDICOMTime","time","EPSILON","formatPN","utils","OverlayItemComponents","props","instance","customization","color","attribute","title","label","background","contentF","className","style","voi","windowWidth","windowCenter","scale","undefined","instanceNumber","CustomizableViewportOverlay","customizationService","toolGroupService","displaySetService","setVOI","useState","setScale","topLeftCustomization","getCustomization","topRightCustomization","bottomLeftCustomization","bottomRightCustomization","useMemo","getInstanceNumber","displaySetProps","displaySets","data","length","map","datum","getDisplaySetByUID","displaySetInstanceUID","filter","it","getDisplaySets","displaySet","instances","referenceInstance","updateVOI","eventDetail","range","lower","upper","utilities","VOI_MODIFIED","updateScale","previousCamera","camera","parallelScale","getZoom","CAMERA_MODIFIED","_renderOverlayItem","useCallback","item","overlayItemProps","formatters","formatDate","formatTime","inheritsFrom","OverlayItemComponent","renderItem","transform","getContent","keyPrefix","index","key","condition","ViewportOverlay","topLeft","topRight","bottomLeft","bottomRight","imageIds","imageId","generalImageModule","metaData","parseInt","_getInstanceNumberFromStack","volumes","volume","direction","cornerstoneViewport","getCamera","viewPlaneNormal","scanAxisNormal","slice","cross","vec3","_getInstanceNumberFromVolume","getOrientationStringLPS","invertOrientationStringLPS","orientationMarkers","rotation","setRotation","flipHorizontal","setFlipHorizontal","flipVertical","setFlipVertical","cameraModifiedListener","markers","rowCosines","columnCosines","isDefaultValueSetForColumnCosine","getEnabledElement","viewUp","viewRight","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","getViewportInfo","m","classNames","log","ViewportImageSliceLoadingIndicator","loading","setLoading","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","IMAGE_LOAD_ERROR","STACK_NEW_IMAGE","setViewportData","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","ViewportOrientationMarkers","RenderCinePlayer","newStackFrameRate","dynamicInfo","dynamicInfoProp","CinePlayerComponent","setDynamicInfo","handleDimensionGroupChange","volumeId","dimensionGroupNumber","numDimensionGroups","splittingTag","eventTarget","DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED","cache","getVolume","updateDynamicInfo","frameRate","onClose","setIsCineEnabled","setViewportCineClosed","onPlayPauseChange","onFrameRateChange","enabledVPElement","viewportGridService","cines","useCine","setNewStackFrameRate","appConfig","useAppConfig","isMountedRef","cineHandler","validFrameRate","Math","playClip","framesPerSecond","newDisplaySetHandler","viewports","displaySetInstanceUIDs","get","forEach","FrameRate","round","autoPlayCine","isDynamicVolume","dynamicVolumeInfo","timePoints","VIEWPORT_NEW_IMAGE_SET","VOLUME_VIEWPORT_NEW_VOLUME","cine","useSystem","viewportActionCornersState","useViewportActionCornersContext","ViewportActionCorners","cornerComponents","getWindowLevelActionMenu","commandsManager","verticalDirection","horizontalDirection","presets","colorbarProperties","volumeRenderingPresets","volumeRenderingQualityRange","WindowLevelActionMenu","displaySetPresets","Modality","modality","nonWLModalities","includes","WindowLevelActionMenuComponent","component","segmentationService","activeSegmentations","setActiveSegmentations","availableSegmentations","setAvailableSegmentations","updateSegmentations","active","getSegmentationRepresentations","available","getSegmentations","seg","some","activeSeg","segmentationId","subscriptions","SEGMENTATION_MODIFIED","SEGMENTATION_REMOVED","SEGMENTATION_REPRESENTATION_MODIFIED","subscription","toggleSegmentationRepresentationVisibility","type","SegmentationRepresentations","Labelmap","segmentation","Button","variant","size","onClick","removeSegmentationFromViewport","removeSegmentationRepresentations","Icons","Minus","visible","Hide","Show","Separator","addSegmentationRepresentation","addSegmentationToViewport","Plus","ViewportSegmentationMenuWrapper","location","viewportActionCornersService","segmentations","useSegmentations","isActiveViewport","getActiveViewportId","align","side","getAlignAndSide","Popover","PopoverTrigger","asChild","ViewportViews","PopoverContent","alignOffset","sideOffset","ViewportSegmentationMenu","ViewportActionCornersLocations","LOCATIONS","debug","getViewportDataOverlaySettingsMenu","ActiveViewportBehavior","memo","activeViewportId","setActiveViewportId","handleCineEnable","isViewportCineClosed","getDisplaySetsUIDsForViewport","uid","modalities","sourceModalities","ACTIVE_VIEWPORT_ID_CHANGED","arePropsEqual","prevProps","nextProps","displayName","OHIFCornerstoneViewport","dataSource","displaySetOptions","onElementEnabled","onElementDisabled","isJumpToMeasurementDisabled","initialImageIndex","isHangingProtocolLayout","Error","push","ds","isReconstructable","setScrollbarHeight","setEnabledVPElement","elementRef","toolbarService","syncGroupService","cornerstoneCacheService","measurementService","viewportDialogState","useViewportDialog","setImageScrollBarHeight","clientHeight","onResize","resize","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","clearSegmentationRepresentations","clear","elementEnabledHandler","setEnabledElement","toolGroupId","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","synchronizersStore","useSynchronizersStore","synchronizers","synchronizerObj","sourceViewports","targetViewports","synchronizer","getSynchronizer","sourceViewportInfo","find","sourceViewport","targetViewportInfo","targetViewport","isSourceViewportInSynchronizer","getSourceViewports","isTargetViewportInSynchronizer","getTargetViewports","addSource","addTarget","_rehydrateSynchronizers","enableViewport","ELEMENT_ENABLED","storePresentation","disableElement","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","invalidatedDisplaySetInstanceUID","invalidateData","hasDisplaySet","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","presentations","lutPresentationStore","useLutPresentationStore","positionPresentationStore","usePositionPresentationStore","segmentationPresentationStore","useSegmentationPresentationStore","presentationIds","positionPresentation","lutPresentation","segmentationPresentation","lutPresentationId","positionPresentationId","segmentationPresentationId","getViewportPresentations","needsRerendering","loadViewportData","MeasurementService","JUMP_TO_MEASUREMENT_VIEWPORT","measurement","isConsumed","enabledElement","metadata","viewportDisplaySets","getViewportDisplaySets","showingDisplaySet","metadataToUse","FrameOfReferenceUID","isReferenceViewable","WITH_NAVIGATION","setViewReference","render","e","cs3DTools","consume","handleJumpToMeasurement","windowLevelActionMenu","segmentationOverlay","enabled","addComponent","AllInOneMenu","VerticalDirection","TopToBottom","HorizontalDirection","RightToLeft","ref","resizeRef","useResizeDetector","Notification","width","onContextMenu","preventDefault","onMouseDown","el","CornerstoneOverlays","toolBarService","CinePlayer","message","actions","onSubmit","onOutsideClick","onKeyPress","OHIFViewportActionCorners","areEqual","orientation","prevDisplaySets","nextDisplaySets","i","prevDisplaySet","foundDisplaySet","nextDisplaySet","images","j"],"sourceRoot":""}