{"version":3,"file":"905.bundle.66b6940b1ccafbe26791.js","mappings":"gLAEMA,E,6CAAKC,GCmJX,EAnJuB,CACrB,CACED,GAAI,mBACJE,OAAQ,mBACRC,MAAO,CACLC,QAAS,mBAETC,SAAU,kCACVC,QAASC,EAAAA,eAAeC,aAAa,CACnCR,GAAI,OACJS,KAAM,cACNC,MAAO,OACPC,QAAS,OACTC,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,QAC5BC,QAAS,eAGbX,SAAU,4BAEZY,UAAW,CACTR,KAAM,eACNE,QAAS,sBAEXO,MAAO,CACLX,EAAAA,eAAeC,aAAa,CAC1BR,GAAI,OACJS,KAAM,cACNC,MAAO,OACPC,QAAS,OACTC,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,QAC5BC,QAAS,eAGbX,SAAU,4BAEZE,EAAAA,eAAeC,aAAa,CAC1BR,GAAI,QACJS,KAAM,aACNC,MAAO,QACPC,QAAS,aACTC,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,SAC5BC,QAAS,eAGbX,SAAU,4BAGZE,EAAAA,eAAeC,aAAa,CAC1BR,GAAI,UACJS,KAAM,eACNC,MAAO,UACPC,QAAS,eACTC,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,WAC5BC,QAAS,eAGbX,SAAU,4BAEZE,EAAAA,eAAeC,aAAa,CAC1BR,GAAI,SACJS,KAAM,cACNC,MAAO,SACPC,QAAS,cACTC,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,UAC5BC,QAAS,eAGbX,SAAU,4BAEZE,EAAAA,eAAeC,aAAa,CAC1BR,GAAI,MACJS,KAAM,iBACNC,MAAO,MACPC,QAAS,WACTC,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,OAC5BC,QAAS,eAGbX,SAAU,4BAEZE,EAAAA,eAAeC,aAAa,CAC1BR,GAAI,kBACJS,KAAM,wBACNC,MAAO,mBACPC,QAAS,wBACTC,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,mBAC5BC,QAAS,eAGbX,SAAU,4BAEZE,EAAAA,eAAeC,aAAa,CAC1BR,GAAI,eACJS,KAAM,qBACNC,MAAO,gBACPC,QAAS,qBACTC,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,gBAC5BC,QAAS,eAGbX,SAAU,+BAKlB,CACEL,GAAI,UACJE,OAAQ,kBACRC,MAAO,CACLM,KAAM,YACNC,MAAO,MACPE,SAAU,CACR,CACEC,YAAa,gBACbC,eAAgB,CAAEC,SAAU,WAC5BC,QAAS,eAGbX,SAAU,6BC1IVc,EACI,4DADJA,EAGc,wDAHdA,EAIO,iDAIAC,EAAc,CACzBC,SAAU,0DAGNC,EACa,gEADbA,EAEM,yDAGNC,EACa,4DADbA,EAEM,qDAGNC,EAAwB,CAE5B,0BAA2B,SAC3B,8BAA+B,SAC/B,uCAAwC,SACxC,4BAA6B,SAC7B,8BAA+B,SAC/B,mCAAoC,UAkGtC,MAMA,EANa,CACXxB,GAAE,EACFyB,YAjGF,UAAqB,kBAAEC,IACrB,MAAO,CAGL1B,GAAE,EACF2B,UAAW,aACXC,YAAaC,EAAAA,EAAKC,EAAE,oBAKpBC,YAAaA,EAAGC,kBAAiBC,mBAAkBC,sBACjD,MAAM,eAAEC,GAAmBH,EAAgBI,SAE3CD,EAAeE,WAAWC,GAC1BH,EAAeI,oBAAoB,UAAW,CAAC,mBAAoB,WAAW,EAGhFC,WAAYA,EAAGR,sBACb,MAAM,eAAEG,EAAc,gBAAEM,EAAe,eAAEC,GAAmBV,EAAgBI,SAE5EK,EAAgBE,aAChBD,EAAeE,OACfT,EAAeU,OAAO,EAGxBC,eAAgB,CACdC,MAAO,GACPC,OAAQ,IAGVC,YAAaA,EAAGC,iBAGP,CACLC,MAHsBD,EAAWE,MAAM,MAGhBC,SAAS,MAChCC,YAAa,kDAIjBC,OAAQ,CACN,CACEC,KAAM,aAINC,eAAgBA,EAAGC,WAAU1B,sBACpB,CACLhC,GAAImB,EACJhB,MAAO,CACLwD,WAAY,CAACxC,GACbyC,iBAAiB,EACjBC,kBAAkB,EAClBC,YAAa,CAAC,wDACdC,UAAW,CACT,CACEC,UAAW,mEACXC,qBAAsB,CACpB,wFACA,4FAGJ,CACED,UAAW1C,EACX2C,qBAAsB,CAAC3C,IAEzB,CACE0C,UAAWzC,EACX0C,qBAAsB,CAAC1C,UAQrC2C,WAAY1C,EACZ2C,iBAAkB,CAAChD,GACnBiD,gBAAiB,CAAC,WAMlBC,iBAAkB,CAChB,wFACA,0FACA/C,EACAC,GAEF+C,QAAS,IAAIA,EAAAA,GAAQC,SAASC,mBAC3B9C,EAEP,EAKEF,wB","sources":["webpack:///../../../modes/microscopy/src/id.js","webpack:///../../../modes/microscopy/src/toolbarButtons.js","webpack:///../../../modes/microscopy/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { ToolbarService } from '@ohif/core';\n\nconst toolbarButtons = [\n  {\n    id: 'MeasurementTools',\n    uiType: 'ohif.splitButton',\n    props: {\n      groupId: 'MeasurementTools',\n      // group evaluate to determine which item should move to the top\n      evaluate: 'evaluate.group.promoteToPrimary',\n      primary: ToolbarService.createButton({\n        id: 'line',\n        icon: 'tool-length',\n        label: 'Line',\n        tooltip: 'Line',\n        commands: [\n          {\n            commandName: 'setToolActive',\n            commandOptions: { toolName: 'line' },\n            context: 'MICROSCOPY',\n          },\n        ],\n        evaluate: 'evaluate.microscopyTool',\n      }),\n      secondary: {\n        icon: 'chevron-down',\n        tooltip: 'More Measure Tools',\n      },\n      items: [\n        ToolbarService.createButton({\n          id: 'line',\n          icon: 'tool-length',\n          label: 'Line',\n          tooltip: 'Line',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: { toolName: 'line' },\n              context: 'MICROSCOPY',\n            },\n          ],\n          evaluate: 'evaluate.microscopyTool',\n        }),\n        ToolbarService.createButton({\n          id: 'point',\n          icon: 'tool-point',\n          label: 'Point',\n          tooltip: 'Point Tool',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: { toolName: 'point' },\n              context: 'MICROSCOPY',\n            },\n          ],\n          evaluate: 'evaluate.microscopyTool',\n        }),\n        // Point Tool was previously defined\n        ToolbarService.createButton({\n          id: 'polygon',\n          icon: 'tool-polygon',\n          label: 'Polygon',\n          tooltip: 'Polygon Tool',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: { toolName: 'polygon' },\n              context: 'MICROSCOPY',\n            },\n          ],\n          evaluate: 'evaluate.microscopyTool',\n        }),\n        ToolbarService.createButton({\n          id: 'circle',\n          icon: 'tool-circle',\n          label: 'Circle',\n          tooltip: 'Circle Tool',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: { toolName: 'circle' },\n              context: 'MICROSCOPY',\n            },\n          ],\n          evaluate: 'evaluate.microscopyTool',\n        }),\n        ToolbarService.createButton({\n          id: 'box',\n          icon: 'tool-rectangle',\n          label: 'Box',\n          tooltip: 'Box Tool',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: { toolName: 'box' },\n              context: 'MICROSCOPY',\n            },\n          ],\n          evaluate: 'evaluate.microscopyTool',\n        }),\n        ToolbarService.createButton({\n          id: 'freehandpolygon',\n          icon: 'tool-freehand-polygon',\n          label: 'Freehand Polygon',\n          tooltip: 'Freehand Polygon Tool',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: { toolName: 'freehandpolygon' },\n              context: 'MICROSCOPY',\n            },\n          ],\n          evaluate: 'evaluate.microscopyTool',\n        }),\n        ToolbarService.createButton({\n          id: 'freehandline',\n          icon: 'tool-freehand-line',\n          label: 'Freehand Line',\n          tooltip: 'Freehand Line Tool',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: { toolName: 'freehandline' },\n              context: 'MICROSCOPY',\n            },\n          ],\n          evaluate: 'evaluate.microscopyTool',\n        }),\n      ],\n    },\n  },\n  {\n    id: 'dragPan',\n    uiType: 'ohif.radioGroup',\n    props: {\n      icon: 'tool-move',\n      label: 'Pan',\n      commands: [\n        {\n          commandName: 'setToolActive',\n          commandOptions: { toolName: 'dragPan' },\n          context: 'MICROSCOPY',\n        },\n      ],\n      evaluate: 'evaluate.microscopyTool',\n    },\n  },\n];\n\nexport default toolbarButtons;\n","import { hotkeys } from '@ohif/core';\nimport i18n from 'i18next';\n\nimport { id } from './id';\nimport toolbarButtons from './toolbarButtons';\n\nconst ohif = {\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\n  hangingProtocols: '@ohif/extension-default.hangingProtocolModule.default',\n  leftPanel: '@ohif/extension-default.panelModule.seriesList',\n  rightPanel: '@ohif/extension-default.panelModule.measure',\n};\n\nexport const cornerstone = {\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\n};\n\nconst dicomvideo = {\n  sopClassHandler: '@ohif/extension-dicom-video.sopClassHandlerModule.dicom-video',\n  viewport: '@ohif/extension-dicom-video.viewportModule.dicom-video',\n};\n\nconst dicompdf = {\n  sopClassHandler: '@ohif/extension-dicom-pdf.sopClassHandlerModule.dicom-pdf',\n  viewport: '@ohif/extension-dicom-pdf.viewportModule.dicom-pdf',\n};\n\nconst extensionDependencies = {\n  // Can derive the versions at least process.env.from npm_package_version\n  '@ohif/extension-default': '^3.0.0',\n  '@ohif/extension-cornerstone': '^3.0.0',\n  '@ohif/extension-cornerstone-dicom-sr': '^3.0.0',\n  '@ohif/extension-dicom-pdf': '^3.0.1',\n  '@ohif/extension-dicom-video': '^3.0.1',\n  '@ohif/extension-dicom-microscopy': '^3.0.0',\n};\n\nfunction modeFactory({ modeConfiguration }) {\n  return {\n    // TODO: We're using this as a route segment\n    // We should not be.\n    id,\n    routeName: 'microscopy',\n    displayName: i18n.t('Modes:Microscopy'),\n\n    /**\n     * Lifecycle hooks\n     */\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }) => {\n      const { toolbarService } = servicesManager.services;\n\n      toolbarService.addButtons(toolbarButtons);\n      toolbarService.createButtonSection('primary', ['MeasurementTools', 'dragPan']);\n    },\n\n    onModeExit: ({ servicesManager }) => {\n      const { toolbarService, uiDialogService, uiModalService } = servicesManager.services;\n\n      uiDialogService.dismissAll();\n      uiModalService.hide();\n      toolbarService.reset();\n    },\n\n    validationTags: {\n      study: [],\n      series: [],\n    },\n\n    isValidMode: ({ modalities }) => {\n      const modalities_list = modalities.split('\\\\');\n\n      return {\n        valid: modalities_list.includes('SM'),\n        description: 'Microscopy mode only supports the SM modality',\n      };\n    },\n\n    routes: [\n      {\n        path: 'microscopy',\n        /*init: ({ servicesManager, extensionManager }) => {\n          //defaultViewerRouteInit\n        },*/\n        layoutTemplate: ({ location, servicesManager }) => {\n          return {\n            id: ohif.layout,\n            props: {\n              leftPanels: [ohif.leftPanel],\n              leftPanelClosed: true, // we have problem with rendering thumbnails for microscopy images\n              rightPanelClosed: true, // we do not have the save microscopy measurements yet\n              rightPanels: ['@ohif/extension-dicom-microscopy.panelModule.measure'],\n              viewports: [\n                {\n                  namespace: '@ohif/extension-dicom-microscopy.viewportModule.microscopy-dicom',\n                  displaySetsToDisplay: [\n                    '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler',\n                    '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler',\n                  ],\n                },\n                {\n                  namespace: dicomvideo.viewport,\n                  displaySetsToDisplay: [dicomvideo.sopClassHandler],\n                },\n                {\n                  namespace: dicompdf.viewport,\n                  displaySetsToDisplay: [dicompdf.sopClassHandler],\n                },\n              ],\n            },\n          };\n        },\n      },\n    ],\n    extensions: extensionDependencies,\n    hangingProtocols: [ohif.hangingProtocols],\n    hangingProtocol: ['default'],\n\n    // Order is important in sop class handlers when two handlers both use\n    // the same sop class under different situations.  In that case, the more\n    // general handler needs to come last.  For this case, the dicomvideo must\n    // come first to remove video transfer syntax before ohif uses images\n    sopClassHandlers: [\n      '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler',\n      '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler',\n      dicomvideo.sopClassHandler,\n      dicompdf.sopClassHandler,\n    ],\n    hotkeys: [...hotkeys.defaults.hotkeyBindings],\n    ...modeConfiguration,\n  };\n}\n\nconst mode = {\n  id,\n  modeFactory,\n  extensionDependencies,\n};\n\nexport default mode;\n"],"names":["id","packageJson","uiType","props","groupId","evaluate","primary","ToolbarService","createButton","icon","label","tooltip","commands","commandName","commandOptions","toolName","context","secondary","items","ohif","cornerstone","viewport","dicomvideo","dicompdf","extensionDependencies","modeFactory","modeConfiguration","routeName","displayName","i18n","t","onModeEnter","servicesManager","extensionManager","commandsManager","toolbarService","services","addButtons","toolbarButtons","createButtonSection","onModeExit","uiDialogService","uiModalService","dismissAll","hide","reset","validationTags","study","series","isValidMode","modalities","valid","split","includes","description","routes","path","layoutTemplate","location","leftPanels","leftPanelClosed","rightPanelClosed","rightPanels","viewports","namespace","displaySetsToDisplay","extensions","hangingProtocols","hangingProtocol","sopClassHandlers","hotkeys","defaults","hotkeyBindings"],"sourceRoot":""}