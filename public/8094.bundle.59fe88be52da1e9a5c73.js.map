{"version":3,"file":"8094.bundle.59fe88be52da1e9a5c73.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/dicom-image-loader/dist/esm/codecs/jpeg.js"],"sourcesContent":["var ColorSpace = { Unkown: 0, Grayscale: 1, AdobeRGB: 2, RGB: 3, CYMK: 4 };\nvar dctZigZag = new Int32Array([\n    0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29,\n    22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54,\n    47, 55, 62, 63,\n]);\nvar dctCos1 = 4017;\nvar dctSin1 = 799;\nvar dctCos3 = 3406;\nvar dctSin3 = 2276;\nvar dctCos6 = 1567;\nvar dctSin6 = 3784;\nvar dctSqrt2 = 5793;\nvar dctSqrt1d2 = 2896;\nfunction buildHuffmanTable(codeLengths, values) {\n    var k = 0, code = [], i, j, length = 16;\n    while (length > 0 && !codeLengths[length - 1])\n        length--;\n    code.push({ children: [], index: 0 });\n    var p = code[0], q;\n    for (i = 0; i < length; i++) {\n        for (j = 0; j < codeLengths[i]; j++) {\n            p = code.pop();\n            p.children[p.index] = values[k];\n            while (p.index > 0) {\n                p = code.pop();\n            }\n            p.index++;\n            code.push(p);\n            while (code.length <= i) {\n                code.push((q = { children: [], index: 0 }));\n                p.children[p.index] = q.children;\n                p = q;\n            }\n            k++;\n        }\n        if (i + 1 < length) {\n            code.push((q = { children: [], index: 0 }));\n            p.children[p.index] = q.children;\n            p = q;\n        }\n    }\n    return code[0].children;\n}\nfunction getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n}\nfunction decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {\n    var precision = frame.precision;\n    var samplesPerLine = frame.samplesPerLine;\n    var scanLines = frame.scanLines;\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    var maxH = frame.maxH, maxV = frame.maxV;\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\n    function readBit() {\n        if (bitsCount > 0) {\n            bitsCount--;\n            return (bitsData >> bitsCount) & 1;\n        }\n        bitsData = data[offset++];\n        if (bitsData == 0xff) {\n            var nextByte = data[offset++];\n            if (nextByte) {\n                throw 'unexpected marker: ' + ((bitsData << 8) | nextByte).toString(16);\n            }\n        }\n        bitsCount = 7;\n        return bitsData >>> 7;\n    }\n    function decodeHuffman(tree) {\n        var node = tree;\n        var bit;\n        while ((bit = readBit()) !== null) {\n            node = node[bit];\n            if (typeof node === 'number')\n                return node;\n            if (typeof node !== 'object')\n                throw 'invalid huffman sequence';\n        }\n        return null;\n    }\n    function receive(length) {\n        var n = 0;\n        while (length > 0) {\n            var bit = readBit();\n            if (bit === null)\n                return;\n            n = (n << 1) | bit;\n            length--;\n        }\n        return n;\n    }\n    function receiveAndExtend(length) {\n        var n = receive(length);\n        if (n >= 1 << (length - 1))\n            return n;\n        return n + (-1 << length) + 1;\n    }\n    function decodeBaseline(component, offset) {\n        var t = decodeHuffman(component.huffmanTableDC);\n        var diff = t === 0 ? 0 : receiveAndExtend(t);\n        component.blockData[offset] = component.pred += diff;\n        var k = 1;\n        while (k < 64) {\n            var rs = decodeHuffman(component.huffmanTableAC);\n            var s = rs & 15, r = rs >> 4;\n            if (s === 0) {\n                if (r < 15)\n                    break;\n                k += 16;\n                continue;\n            }\n            k += r;\n            var z = dctZigZag[k];\n            component.blockData[offset + z] = receiveAndExtend(s);\n            k++;\n        }\n    }\n    function decodeDCFirst(component, offset) {\n        var t = decodeHuffman(component.huffmanTableDC);\n        var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n        component.blockData[offset] = component.pred += diff;\n    }\n    function decodeDCSuccessive(component, offset) {\n        component.blockData[offset] |= readBit() << successive;\n    }\n    var eobrun = 0;\n    function decodeACFirst(component, offset) {\n        if (eobrun > 0) {\n            eobrun--;\n            return;\n        }\n        var k = spectralStart, e = spectralEnd;\n        while (k <= e) {\n            var rs = decodeHuffman(component.huffmanTableAC);\n            var s = rs & 15, r = rs >> 4;\n            if (s === 0) {\n                if (r < 15) {\n                    eobrun = receive(r) + (1 << r) - 1;\n                    break;\n                }\n                k += 16;\n                continue;\n            }\n            k += r;\n            var z = dctZigZag[k];\n            component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);\n            k++;\n        }\n    }\n    var successiveACState = 0, successiveACNextValue;\n    function decodeACSuccessive(component, offset) {\n        var k = spectralStart, e = spectralEnd, r = 0;\n        while (k <= e) {\n            var z = dctZigZag[k];\n            switch (successiveACState) {\n                case 0:\n                    var rs = decodeHuffman(component.huffmanTableAC);\n                    var s = rs & 15;\n                    r = rs >> 4;\n                    if (s === 0) {\n                        if (r < 15) {\n                            eobrun = receive(r) + (1 << r);\n                            successiveACState = 4;\n                        }\n                        else {\n                            r = 16;\n                            successiveACState = 1;\n                        }\n                    }\n                    else {\n                        if (s !== 1)\n                            throw 'invalid ACn encoding';\n                        successiveACNextValue = receiveAndExtend(s);\n                        successiveACState = r ? 2 : 3;\n                    }\n                    continue;\n                case 1:\n                case 2:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    else {\n                        r--;\n                        if (r === 0)\n                            successiveACState = successiveACState == 2 ? 3 : 0;\n                    }\n                    break;\n                case 3:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    else {\n                        component.blockData[offset + z] =\n                            successiveACNextValue << successive;\n                        successiveACState = 0;\n                    }\n                    break;\n                case 4:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    break;\n            }\n            k++;\n        }\n        if (successiveACState === 4) {\n            eobrun--;\n            if (eobrun === 0)\n                successiveACState = 0;\n        }\n    }\n    function decodeMcu(component, decode, mcu, row, col) {\n        var mcuRow = (mcu / mcusPerLine) | 0;\n        var mcuCol = mcu % mcusPerLine;\n        var blockRow = mcuRow * component.v + row;\n        var blockCol = mcuCol * component.h + col;\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        decode(component, offset);\n    }\n    function decodeBlock(component, decode, mcu) {\n        var blockRow = (mcu / component.blocksPerLine) | 0;\n        var blockCol = mcu % component.blocksPerLine;\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        decode(component, offset);\n    }\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n        if (spectralStart === 0)\n            decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n        else\n            decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    }\n    else {\n        decodeFn = decodeBaseline;\n    }\n    var mcu = 0, marker;\n    var mcuExpected;\n    if (componentsLength == 1) {\n        mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    }\n    else {\n        mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n    if (!resetInterval) {\n        resetInterval = mcuExpected;\n    }\n    var h, v;\n    while (mcu < mcuExpected) {\n        for (i = 0; i < componentsLength; i++) {\n            components[i].pred = 0;\n        }\n        eobrun = 0;\n        if (componentsLength == 1) {\n            component = components[0];\n            for (n = 0; n < resetInterval; n++) {\n                decodeBlock(component, decodeFn, mcu);\n                mcu++;\n            }\n        }\n        else {\n            for (n = 0; n < resetInterval; n++) {\n                for (i = 0; i < componentsLength; i++) {\n                    component = components[i];\n                    h = component.h;\n                    v = component.v;\n                    for (j = 0; j < v; j++) {\n                        for (k = 0; k < h; k++) {\n                            decodeMcu(component, decodeFn, mcu, j, k);\n                        }\n                    }\n                }\n                mcu++;\n            }\n        }\n        bitsCount = 0;\n        marker = (data[offset] << 8) | data[offset + 1];\n        if (marker <= 0xff00) {\n            throw 'marker was not found';\n        }\n        if (marker >= 0xffd0 && marker <= 0xffd7) {\n            offset += 2;\n        }\n        else {\n            break;\n        }\n    }\n    return offset - startOffset;\n}\nfunction quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable;\n    var v0, v1, v2, v3, v4, v5, v6, v7, t;\n    var i;\n    for (i = 0; i < 64; i++) {\n        p[i] = component.blockData[blockBufferOffset + i] * qt[i];\n    }\n    for (i = 0; i < 8; ++i) {\n        var row = 8 * i;\n        if (p[1 + row] === 0 &&\n            p[2 + row] === 0 &&\n            p[3 + row] === 0 &&\n            p[4 + row] === 0 &&\n            p[5 + row] === 0 &&\n            p[6 + row] === 0 &&\n            p[7 + row] === 0) {\n            t = (dctSqrt2 * p[0 + row] + 512) >> 10;\n            p[0 + row] = t;\n            p[1 + row] = t;\n            p[2 + row] = t;\n            p[3 + row] = t;\n            p[4 + row] = t;\n            p[5 + row] = t;\n            p[6 + row] = t;\n            p[7 + row] = t;\n            continue;\n        }\n        v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\n        v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\n        v2 = p[2 + row];\n        v3 = p[6 + row];\n        v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n        v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n        v5 = p[3 + row] << 4;\n        v6 = p[5 + row] << 4;\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n        p[0 + row] = v0 + v7;\n        p[7 + row] = v0 - v7;\n        p[1 + row] = v1 + v6;\n        p[6 + row] = v1 - v6;\n        p[2 + row] = v2 + v5;\n        p[5 + row] = v2 - v5;\n        p[3 + row] = v3 + v4;\n        p[4 + row] = v3 - v4;\n    }\n    for (i = 0; i < 8; ++i) {\n        var col = i;\n        if (p[1 * 8 + col] === 0 &&\n            p[2 * 8 + col] === 0 &&\n            p[3 * 8 + col] === 0 &&\n            p[4 * 8 + col] === 0 &&\n            p[5 * 8 + col] === 0 &&\n            p[6 * 8 + col] === 0 &&\n            p[7 * 8 + col] === 0) {\n            t = (dctSqrt2 * p[i + 0] + 8192) >> 14;\n            p[0 * 8 + col] = t;\n            p[1 * 8 + col] = t;\n            p[2 * 8 + col] = t;\n            p[3 * 8 + col] = t;\n            p[4 * 8 + col] = t;\n            p[5 * 8 + col] = t;\n            p[6 * 8 + col] = t;\n            p[7 * 8 + col] = t;\n            continue;\n        }\n        v0 = (dctSqrt2 * p[0 * 8 + col] + 2048) >> 12;\n        v1 = (dctSqrt2 * p[4 * 8 + col] + 2048) >> 12;\n        v2 = p[2 * 8 + col];\n        v3 = p[6 * 8 + col];\n        v4 = (dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;\n        v7 = (dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;\n        v5 = p[3 * 8 + col];\n        v6 = p[5 * 8 + col];\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n        p[0 * 8 + col] = v0 + v7;\n        p[7 * 8 + col] = v0 - v7;\n        p[1 * 8 + col] = v1 + v6;\n        p[6 * 8 + col] = v1 - v6;\n        p[2 * 8 + col] = v2 + v5;\n        p[5 * 8 + col] = v2 - v5;\n        p[3 * 8 + col] = v3 + v4;\n        p[4 * 8 + col] = v3 - v4;\n    }\n    for (i = 0; i < 64; ++i) {\n        var index = blockBufferOffset + i;\n        var q = p[i];\n        q =\n            q <= -2056 / component.bitConversion\n                ? 0\n                : q >= 2024 / component.bitConversion\n                    ? 255 / component.bitConversion\n                    : (q + 2056 / component.bitConversion) >> 4;\n        component.blockData[index] = q;\n    }\n}\nfunction buildComponentData(frame, component) {\n    var lines = [];\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var samplesPerLine = blocksPerLine << 3;\n    var computationBuffer = new Int32Array(64);\n    var i, j, ll = 0;\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n        for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n            var offset = getBlockBufferOffset(component, blockRow, blockCol);\n            quantizeAndInverse(component, offset, computationBuffer);\n        }\n    }\n    return component.blockData;\n}\nfunction clampToUint8(a) {\n    return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;\n}\nclass JpegImage {\n    constructor() { }\n    load(path) {\n        var handleData = function (data) {\n            this.parse(data);\n            if (this.onload)\n                this.onload();\n        }.bind(this);\n        if (path.indexOf('data:') > -1) {\n            var offset = path.indexOf('base64,') + 7;\n            var data = atob(path.substring(offset));\n            var arr = new Uint8Array(data.length);\n            for (var i = data.length - 1; i >= 0; i--) {\n                arr[i] = data.charCodeAt(i);\n            }\n            handleData(data);\n        }\n        else {\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', path, true);\n            xhr.responseType = 'arraybuffer';\n            xhr.onload = function () {\n                var data = new Uint8Array(xhr.response);\n                handleData(data);\n            }.bind(this);\n            xhr.send(null);\n        }\n    }\n    parse(data) {\n        function readUint16() {\n            var value = (data[offset] << 8) | data[offset + 1];\n            offset += 2;\n            return value;\n        }\n        function readDataBlock() {\n            var length = readUint16();\n            var array = data.subarray(offset, offset + length - 2);\n            offset += array.length;\n            return array;\n        }\n        function prepareComponents(frame) {\n            var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n            var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n            for (var i = 0; i < frame.components.length; i++) {\n                component = frame.components[i];\n                var blocksPerLine = Math.ceil((Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH);\n                var blocksPerColumn = Math.ceil((Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV);\n                var blocksPerLineForMcu = mcusPerLine * component.h;\n                var blocksPerColumnForMcu = mcusPerColumn * component.v;\n                var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n                component.blockData = new Int16Array(blocksBufferSize);\n                component.blocksPerLine = blocksPerLine;\n                component.blocksPerColumn = blocksPerColumn;\n            }\n            frame.mcusPerLine = mcusPerLine;\n            frame.mcusPerColumn = mcusPerColumn;\n        }\n        var offset = 0, length = data.length;\n        var jfif = null;\n        var adobe = null;\n        var pixels = null;\n        var frame, resetInterval;\n        var quantizationTables = [];\n        var huffmanTablesAC = [], huffmanTablesDC = [];\n        var fileMarker = readUint16();\n        if (fileMarker != 0xffd8) {\n            throw 'SOI not found';\n        }\n        fileMarker = readUint16();\n        while (fileMarker != 0xffd9) {\n            var i, j, l;\n            switch (fileMarker) {\n                case 0xffe0:\n                case 0xffe1:\n                case 0xffe2:\n                case 0xffe3:\n                case 0xffe4:\n                case 0xffe5:\n                case 0xffe6:\n                case 0xffe7:\n                case 0xffe8:\n                case 0xffe9:\n                case 0xffea:\n                case 0xffeb:\n                case 0xffec:\n                case 0xffed:\n                case 0xffee:\n                case 0xffef:\n                case 0xfffe:\n                    var appData = readDataBlock();\n                    if (fileMarker === 0xffe0) {\n                        if (appData[0] === 0x4a &&\n                            appData[1] === 0x46 &&\n                            appData[2] === 0x49 &&\n                            appData[3] === 0x46 &&\n                            appData[4] === 0) {\n                            jfif = {\n                                version: { major: appData[5], minor: appData[6] },\n                                densityUnits: appData[7],\n                                xDensity: (appData[8] << 8) | appData[9],\n                                yDensity: (appData[10] << 8) | appData[11],\n                                thumbWidth: appData[12],\n                                thumbHeight: appData[13],\n                                thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13]),\n                            };\n                        }\n                    }\n                    if (fileMarker === 0xffee) {\n                        if (appData[0] === 0x41 &&\n                            appData[1] === 0x64 &&\n                            appData[2] === 0x6f &&\n                            appData[3] === 0x62 &&\n                            appData[4] === 0x65 &&\n                            appData[5] === 0) {\n                            adobe = {\n                                version: appData[6],\n                                flags0: (appData[7] << 8) | appData[8],\n                                flags1: (appData[9] << 8) | appData[10],\n                                transformCode: appData[11],\n                            };\n                        }\n                    }\n                    break;\n                case 0xffdb:\n                    var quantizationTablesLength = readUint16();\n                    var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n                    while (offset < quantizationTablesEnd) {\n                        var quantizationTableSpec = data[offset++];\n                        var tableData = new Int32Array(64);\n                        if (quantizationTableSpec >> 4 === 0) {\n                            for (j = 0; j < 64; j++) {\n                                var z = dctZigZag[j];\n                                tableData[z] = data[offset++];\n                            }\n                        }\n                        else if (quantizationTableSpec >> 4 === 1) {\n                            for (j = 0; j < 64; j++) {\n                                var zz = dctZigZag[j];\n                                tableData[zz] = readUint16();\n                            }\n                        }\n                        else\n                            throw 'DQT: invalid table spec';\n                        quantizationTables[quantizationTableSpec & 15] = tableData;\n                    }\n                    break;\n                case 0xffc0:\n                case 0xffc1:\n                case 0xffc2:\n                    if (frame) {\n                        throw 'Only single frame JPEGs supported';\n                    }\n                    readUint16();\n                    frame = {};\n                    frame.extended = fileMarker === 0xffc1;\n                    frame.progressive = fileMarker === 0xffc2;\n                    frame.precision = data[offset++];\n                    frame.scanLines = readUint16();\n                    frame.samplesPerLine = readUint16();\n                    frame.components = [];\n                    frame.componentIds = {};\n                    var componentsCount = data[offset++], componentId;\n                    var maxH = 0, maxV = 0;\n                    for (i = 0; i < componentsCount; i++) {\n                        componentId = data[offset];\n                        var h = data[offset + 1] >> 4;\n                        var v = data[offset + 1] & 15;\n                        if (maxH < h)\n                            maxH = h;\n                        if (maxV < v)\n                            maxV = v;\n                        var qId = data[offset + 2];\n                        l = frame.components.push({\n                            h: h,\n                            v: v,\n                            quantizationTable: quantizationTables[qId],\n                            quantizationTableId: qId,\n                            bitConversion: 255 / ((1 << frame.precision) - 1),\n                        });\n                        frame.componentIds[componentId] = l - 1;\n                        offset += 3;\n                    }\n                    frame.maxH = maxH;\n                    frame.maxV = maxV;\n                    prepareComponents(frame);\n                    break;\n                case 0xffc4:\n                    var huffmanLength = readUint16();\n                    for (i = 2; i < huffmanLength;) {\n                        var huffmanTableSpec = data[offset++];\n                        var codeLengths = new Uint8Array(16);\n                        var codeLengthSum = 0;\n                        for (j = 0; j < 16; j++, offset++)\n                            codeLengthSum += codeLengths[j] = data[offset];\n                        var huffmanValues = new Uint8Array(codeLengthSum);\n                        for (j = 0; j < codeLengthSum; j++, offset++)\n                            huffmanValues[j] = data[offset];\n                        i += 17 + codeLengthSum;\n                        (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n                    }\n                    break;\n                case 0xffdd:\n                    readUint16();\n                    resetInterval = readUint16();\n                    break;\n                case 0xffda:\n                    var scanLength = readUint16();\n                    var selectorsCount = data[offset++];\n                    var components = [], component;\n                    for (i = 0; i < selectorsCount; i++) {\n                        var componentIndex = frame.componentIds[data[offset++]];\n                        component = frame.components[componentIndex];\n                        var tableSpec = data[offset++];\n                        component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n                        component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n                        components.push(component);\n                    }\n                    var spectralStart = data[offset++];\n                    var spectralEnd = data[offset++];\n                    var successiveApproximation = data[offset++];\n                    var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);\n                    offset += processed;\n                    break;\n                case 0xffff:\n                    if (data[offset] !== 0xff) {\n                        offset--;\n                    }\n                    break;\n                default:\n                    if (data[offset - 3] == 0xff &&\n                        data[offset - 2] >= 0xc0 &&\n                        data[offset - 2] <= 0xfe) {\n                        offset -= 3;\n                        break;\n                    }\n                    throw 'unknown JPEG marker ' + fileMarker.toString(16);\n            }\n            fileMarker = readUint16();\n        }\n        this.width = frame.samplesPerLine;\n        this.height = frame.scanLines;\n        this.jfif = jfif;\n        this.adobe = adobe;\n        this.components = [];\n        switch (frame.components.length) {\n            case 1:\n                this.colorspace = ColorSpace.Grayscale;\n                break;\n            case 3:\n                if (this.adobe)\n                    this.colorspace = ColorSpace.AdobeRGB;\n                else\n                    this.colorspace = ColorSpace.RGB;\n                break;\n            case 4:\n                this.colorspace = ColorSpace.CYMK;\n                break;\n            default:\n                this.colorspace = ColorSpace.Unknown;\n        }\n        for (var i = 0; i < frame.components.length; i++) {\n            var component = frame.components[i];\n            if (!component.quantizationTable &&\n                component.quantizationTableId !== null)\n                component.quantizationTable =\n                    quantizationTables[component.quantizationTableId];\n            this.components.push({\n                output: buildComponentData(frame, component),\n                scaleX: component.h / frame.maxH,\n                scaleY: component.v / frame.maxV,\n                blocksPerLine: component.blocksPerLine,\n                blocksPerColumn: component.blocksPerColumn,\n                bitConversion: component.bitConversion,\n            });\n        }\n    }\n    getData16(width, height) {\n        if (this.components.length !== 1)\n            throw 'Unsupported color mode';\n        var scaleX = this.width / width, scaleY = this.height / height;\n        var component, componentScaleX, componentScaleY;\n        var x, y, i;\n        var offset = 0;\n        var numComponents = this.components.length;\n        var dataLength = width * height * numComponents;\n        var data = new Uint16Array(dataLength);\n        var componentLine;\n        var lineData = new Uint16Array((this.components[0].blocksPerLine << 3) *\n            this.components[0].blocksPerColumn *\n            8);\n        for (i = 0; i < numComponents; i++) {\n            component = this.components[i];\n            var blocksPerLine = component.blocksPerLine;\n            var blocksPerColumn = component.blocksPerColumn;\n            var samplesPerLine = blocksPerLine << 3;\n            var j, k, ll = 0;\n            var lineOffset = 0;\n            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n                var scanLine = blockRow << 3;\n                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                    var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n                    var offset = 0, sample = blockCol << 3;\n                    for (j = 0; j < 8; j++) {\n                        var lineOffset = (scanLine + j) * samplesPerLine;\n                        for (k = 0; k < 8; k++) {\n                            lineData[lineOffset + sample + k] =\n                                component.output[bufferOffset + offset++];\n                        }\n                    }\n                }\n            }\n            componentScaleX = component.scaleX * scaleX;\n            componentScaleY = component.scaleY * scaleY;\n            offset = i;\n            var cx, cy;\n            var index;\n            for (y = 0; y < height; y++) {\n                for (x = 0; x < width; x++) {\n                    cy = 0 | (y * componentScaleY);\n                    cx = 0 | (x * componentScaleX);\n                    index = cy * samplesPerLine + cx;\n                    data[offset] = lineData[index];\n                    offset += numComponents;\n                }\n            }\n        }\n        return data;\n    }\n    getData(width, height) {\n        var scaleX = this.width / width, scaleY = this.height / height;\n        var component, componentScaleX, componentScaleY;\n        var x, y, i;\n        var offset = 0;\n        var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n        var colorTransform;\n        var numComponents = this.components.length;\n        var dataLength = width * height * numComponents;\n        var data = new Uint8Array(dataLength);\n        var componentLine;\n        var lineData = new Uint8Array((this.components[0].blocksPerLine << 3) *\n            this.components[0].blocksPerColumn *\n            8);\n        for (i = 0; i < numComponents; i++) {\n            component = this.components[i];\n            var blocksPerLine = component.blocksPerLine;\n            var blocksPerColumn = component.blocksPerColumn;\n            var samplesPerLine = blocksPerLine << 3;\n            var j, k, ll = 0;\n            var lineOffset = 0;\n            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n                var scanLine = blockRow << 3;\n                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                    var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n                    var offset = 0, sample = blockCol << 3;\n                    for (j = 0; j < 8; j++) {\n                        var lineOffset = (scanLine + j) * samplesPerLine;\n                        for (k = 0; k < 8; k++) {\n                            lineData[lineOffset + sample + k] =\n                                component.output[bufferOffset + offset++] *\n                                    component.bitConversion;\n                        }\n                    }\n                }\n            }\n            componentScaleX = component.scaleX * scaleX;\n            componentScaleY = component.scaleY * scaleY;\n            offset = i;\n            var cx, cy;\n            var index;\n            for (y = 0; y < height; y++) {\n                for (x = 0; x < width; x++) {\n                    cy = 0 | (y * componentScaleY);\n                    cx = 0 | (x * componentScaleX);\n                    index = cy * samplesPerLine + cx;\n                    data[offset] = lineData[index];\n                    offset += numComponents;\n                }\n            }\n        }\n        switch (numComponents) {\n            case 1:\n            case 2:\n                break;\n            case 3:\n                colorTransform = true;\n                if (this.adobe && this.adobe.transformCode)\n                    colorTransform = true;\n                else if (typeof this.colorTransform !== 'undefined')\n                    colorTransform = !!this.colorTransform;\n                if (colorTransform) {\n                    for (i = 0; i < dataLength; i += numComponents) {\n                        Y = data[i];\n                        Cb = data[i + 1];\n                        Cr = data[i + 2];\n                        R = clampToUint8(Y - 179.456 + 1.402 * Cr);\n                        G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\n                        B = clampToUint8(Y - 226.816 + 1.772 * Cb);\n                        data[i] = R;\n                        data[i + 1] = G;\n                        data[i + 2] = B;\n                    }\n                }\n                break;\n            case 4:\n                if (!this.adobe)\n                    throw 'Unsupported color mode (4 components)';\n                colorTransform = false;\n                if (this.adobe && this.adobe.transformCode)\n                    colorTransform = true;\n                else if (typeof this.colorTransform !== 'undefined')\n                    colorTransform = !!this.colorTransform;\n                if (colorTransform) {\n                    for (i = 0; i < dataLength; i += numComponents) {\n                        Y = data[i];\n                        Cb = data[i + 1];\n                        Cr = data[i + 2];\n                        C = clampToUint8(434.456 - Y - 1.402 * Cr);\n                        M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\n                        Y = clampToUint8(481.816 - Y - 1.772 * Cb);\n                        data[i] = C;\n                        data[i + 1] = M;\n                        data[i + 2] = Y;\n                    }\n                }\n                break;\n            default:\n                throw 'Unsupported color mode';\n        }\n        return data;\n    }\n}\nexport default JpegImage;\n"],"names":["ColorSpace","Unkown","Grayscale","AdobeRGB","RGB","CYMK","dctZigZag","Int32Array","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","buildHuffmanTable","codeLengths","values","i","j","k","code","length","push","children","index","q","p","pop","getBlockBufferOffset","component","row","col","blocksPerLine","decodeScan","data","offset","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","precision","samplesPerLine","scanLines","mcusPerLine","progressive","startOffset","maxH","maxV","bitsData","bitsCount","readBit","nextByte","toString","decodeHuffman","tree","bit","node","receive","n","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","decode","mcu","mcuCol","v","h","decodeBlock","decodeFn","componentsLength","t","huffmanTableDC","diff","blockData","pred","e","rs","huffmanTableAC","s","r","z","marker","mcuExpected","blocksPerColumn","mcusPerColumn","quantizeAndInverse","blockBufferOffset","v0","v1","v2","v3","v4","v5","v6","v7","qt","quantizationTable","bitConversion","buildComponentData","computationBuffer","blockRow","blockCol","clampToUint8","a","constructor","load","path","handleData","this","parse","onload","bind","indexOf","atob","substring","arr","Uint8Array","charCodeAt","xhr","XMLHttpRequest","open","responseType","response","send","readUint16","value","readDataBlock","array","subarray","prepareComponents","Math","ceil","blocksPerLineForMcu","blocksBufferSize","Int16Array","jfif","adobe","quantizationTables","huffmanTablesAC","huffmanTablesDC","fileMarker","l","appData","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","extended","componentIds","componentId","componentsCount","qId","quantizationTableId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","processed","width","height","colorspace","Unknown","output","scaleX","scaleY","getData16","componentScaleX","componentScaleY","x","y","numComponents","Uint16Array","lineData","lineOffset","scanLine","bufferOffset","sample","getData","Y","Cb","Cr","C","M","R","G","B","colorTransform","dataLength"],"sourceRoot":""}