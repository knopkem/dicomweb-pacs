{"version":3,"file":"1919.bundle.7fe19b7e3f8c31b45991.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/StrategyCallbacks.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/WorkerTypes.js","webpack:///../../../extensions/cornerstone-dynamic-volume/src/id.js","webpack:///../../../extensions/cornerstone-dynamic-volume/src/actions/updateSegmentationsChartDisplaySet.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicVolumeControls.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/PanelGenerateImage.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicDataPanel.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/panels/DynamicExport.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dynamic-volume/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dynamic-volume/src/index.ts"],"sourcesContent":["var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Events;\n(function (Events) {\n    Events[\"TOOL_ACTIVATED\"] = \"CORNERSTONE_TOOLS_TOOL_ACTIVATED\";\n    Events[\"TOOLGROUP_VIEWPORT_ADDED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED\";\n    Events[\"TOOLGROUP_VIEWPORT_REMOVED\"] = \"CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED\";\n    Events[\"TOOL_MODE_CHANGED\"] = \"CORNERSTONE_TOOLS_TOOL_MODE_CHANGED\";\n    Events[\"CROSSHAIR_TOOL_CENTER_CHANGED\"] = \"CORNERSTONE_TOOLS_CROSSHAIR_TOOL_CENTER_CHANGED\";\n    Events[\"ANNOTATION_ADDED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_ADDED\";\n    Events[\"ANNOTATION_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_COMPLETED\";\n    Events[\"ANNOTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_MODIFIED\";\n    Events[\"ANNOTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_REMOVED\";\n    Events[\"ANNOTATION_SELECTION_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE\";\n    Events[\"ANNOTATION_LOCK_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE\";\n    Events[\"ANNOTATION_VISIBILITY_CHANGE\"] = \"CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE\";\n    Events[\"ANNOTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_RENDERED\";\n    Events[\"ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\"] = \"CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED\";\n    Events[\"INTERPOLATED_ANNOTATIONS_REMOVED\"] = \"CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED\";\n    Events[\"SEGMENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_RENDERED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_RENDERED\";\n    Events[\"SEGMENTATION_REPRESENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_ADDED\";\n    Events[\"SEGMENTATION_ADDED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_ADDED\";\n    Events[\"SEGMENTATION_REPRESENTATION_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED\";\n    Events[\"SEGMENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REMOVED\";\n    Events[\"SEGMENTATION_REPRESENTATION_REMOVED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED\";\n    Events[\"SEGMENTATION_DATA_MODIFIED\"] = \"CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED\";\n    Events[\"HISTORY_UNDO\"] = \"CORNERSTONE_TOOLS_HISTORY_UNDO\";\n    Events[\"HISTORY_REDO\"] = \"CORNERSTONE_TOOLS_HISTORY_REDO\";\n    Events[\"KEY_DOWN\"] = \"CORNERSTONE_TOOLS_KEY_DOWN\";\n    Events[\"KEY_UP\"] = \"CORNERSTONE_TOOLS_KEY_UP\";\n    Events[\"MOUSE_DOWN\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN\";\n    Events[\"MOUSE_UP\"] = \"CORNERSTONE_TOOLS_MOUSE_UP\";\n    Events[\"MOUSE_DOWN_ACTIVATE\"] = \"CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE\";\n    Events[\"MOUSE_DRAG\"] = \"CORNERSTONE_TOOLS_MOUSE_DRAG\";\n    Events[\"MOUSE_MOVE\"] = \"CORNERSTONE_TOOLS_MOUSE_MOVE\";\n    Events[\"MOUSE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_CLICK\";\n    Events[\"MOUSE_DOUBLE_CLICK\"] = \"CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK\";\n    Events[\"MOUSE_WHEEL\"] = \"CORNERSTONE_TOOLS_MOUSE_WHEEL\";\n    Events[\"TOUCH_START\"] = \"CORNERSTONE_TOOLS_TOUCH_START\";\n    Events[\"TOUCH_START_ACTIVATE\"] = \"CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE\";\n    Events[\"TOUCH_PRESS\"] = \"CORNERSTONE_TOOLS_TOUCH_PRESS\";\n    Events[\"TOUCH_DRAG\"] = \"CORNERSTONE_TOOLS_TOUCH_DRAG\";\n    Events[\"TOUCH_END\"] = \"CORNERSTONE_TOOLS_TOUCH_END\";\n    Events[\"TOUCH_TAP\"] = \"CORNERSTONE_TOOLS_TAP\";\n    Events[\"TOUCH_SWIPE\"] = \"CORNERSTONE_TOOLS_SWIPE\";\n})(Events || (Events = {}));\nexport default Events;\n","var SegmentationRepresentations;\n(function (SegmentationRepresentations) {\n    SegmentationRepresentations[\"Labelmap\"] = \"Labelmap\";\n    SegmentationRepresentations[\"Contour\"] = \"Contour\";\n    SegmentationRepresentations[\"Surface\"] = \"Surface\";\n})(SegmentationRepresentations || (SegmentationRepresentations = {}));\nexport default SegmentationRepresentations;\n","var StrategyCallbacks;\n(function (StrategyCallbacks) {\n    StrategyCallbacks[\"OnInteractionStart\"] = \"onInteractionStart\";\n    StrategyCallbacks[\"OnInteractionEnd\"] = \"onInteractionEnd\";\n    StrategyCallbacks[\"Preview\"] = \"preview\";\n    StrategyCallbacks[\"RejectPreview\"] = \"rejectPreview\";\n    StrategyCallbacks[\"AcceptPreview\"] = \"acceptPreview\";\n    StrategyCallbacks[\"Fill\"] = \"fill\";\n    StrategyCallbacks[\"Interpolate\"] = \"interpolate\";\n    StrategyCallbacks[\"StrategyFunction\"] = \"strategyFunction\";\n    StrategyCallbacks[\"CreateIsInThreshold\"] = \"createIsInThreshold\";\n    StrategyCallbacks[\"Initialize\"] = \"initialize\";\n    StrategyCallbacks[\"INTERNAL_setValue\"] = \"setValue\";\n    StrategyCallbacks[\"AddPreview\"] = \"addPreview\";\n    StrategyCallbacks[\"ComputeInnerCircleRadius\"] = \"computeInnerCircleRadius\";\n    StrategyCallbacks[\"GetStatistics\"] = \"getStatistics\";\n    StrategyCallbacks[\"EnsureImageVolumeFor3DManipulation\"] = \"ensureImageVolumeFor3DManipulation\";\n    StrategyCallbacks[\"EnsureSegmentationVolumeFor3DManipulation\"] = \"ensureSegmentationVolumeFor3DManipulation\";\n})(StrategyCallbacks || (StrategyCallbacks = {}));\nexport default StrategyCallbacks;\n","var MouseBindings;\n(function (MouseBindings) {\n    MouseBindings[MouseBindings[\"Primary\"] = 1] = \"Primary\";\n    MouseBindings[MouseBindings[\"Secondary\"] = 2] = \"Secondary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary\"] = 3] = \"Primary_And_Secondary\";\n    MouseBindings[MouseBindings[\"Auxiliary\"] = 4] = \"Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Auxiliary\"] = 5] = \"Primary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Secondary_And_Auxiliary\"] = 6] = \"Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Primary_And_Secondary_And_Auxiliary\"] = 7] = \"Primary_And_Secondary_And_Auxiliary\";\n    MouseBindings[MouseBindings[\"Fourth_Button\"] = 8] = \"Fourth_Button\";\n    MouseBindings[MouseBindings[\"Fifth_Button\"] = 16] = \"Fifth_Button\";\n    MouseBindings[MouseBindings[\"Wheel\"] = 524288] = \"Wheel\";\n    MouseBindings[MouseBindings[\"Wheel_Primary\"] = 524289] = \"Wheel_Primary\";\n})(MouseBindings || (MouseBindings = {}));\nvar KeyboardBindings;\n(function (KeyboardBindings) {\n    KeyboardBindings[KeyboardBindings[\"Shift\"] = 16] = \"Shift\";\n    KeyboardBindings[KeyboardBindings[\"Ctrl\"] = 17] = \"Ctrl\";\n    KeyboardBindings[KeyboardBindings[\"Alt\"] = 18] = \"Alt\";\n    KeyboardBindings[KeyboardBindings[\"Meta\"] = 91] = \"Meta\";\n    KeyboardBindings[KeyboardBindings[\"ShiftCtrl\"] = 1617] = \"ShiftCtrl\";\n    KeyboardBindings[KeyboardBindings[\"ShiftAlt\"] = 1618] = \"ShiftAlt\";\n    KeyboardBindings[KeyboardBindings[\"ShiftMeta\"] = 1691] = \"ShiftMeta\";\n    KeyboardBindings[KeyboardBindings[\"CtrlAlt\"] = 1718] = \"CtrlAlt\";\n    KeyboardBindings[KeyboardBindings[\"CtrlMeta\"] = 1791] = \"CtrlMeta\";\n    KeyboardBindings[KeyboardBindings[\"AltMeta\"] = 1891] = \"AltMeta\";\n})(KeyboardBindings || (KeyboardBindings = {}));\nexport { MouseBindings, KeyboardBindings };\n","var ToolModes;\n(function (ToolModes) {\n    ToolModes[\"Active\"] = \"Active\";\n    ToolModes[\"Passive\"] = \"Passive\";\n    ToolModes[\"Enabled\"] = \"Enabled\";\n    ToolModes[\"Disabled\"] = \"Disabled\";\n})(ToolModes || (ToolModes = {}));\nexport default ToolModes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","var AnnotationStyleStates;\n(function (AnnotationStyleStates) {\n    AnnotationStyleStates[\"Default\"] = \"\";\n    AnnotationStyleStates[\"Highlighted\"] = \"Highlighted\";\n    AnnotationStyleStates[\"Selected\"] = \"Selected\";\n    AnnotationStyleStates[\"Locked\"] = \"Locked\";\n    AnnotationStyleStates[\"AutoGenerated\"] = \"AutoGenerated\";\n})(AnnotationStyleStates || (AnnotationStyleStates = {}));\nexport default AnnotationStyleStates;\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_LABELMAP\"] = \"Converting Contour to Labelmap\";\n    ChangeTypes[\"POLYSEG_SURFACE_TO_LABELMAP\"] = \"Converting Surfaces to Labelmap\";\n    ChangeTypes[\"POLYSEG_CONTOUR_TO_SURFACE\"] = \"Converting Contour to Surface\";\n    ChangeTypes[\"POLYSEG_LABELMAP_TO_SURFACE\"] = \"Converting Labelmap to Surface\";\n    ChangeTypes[\"SURFACE_CLIPPING\"] = \"Clipping Surfaces\";\n    ChangeTypes[\"COMPUTE_STATISTICS\"] = \"Computing Statistics\";\n    ChangeTypes[\"INTERPOLATE_LABELMAP\"] = \"Interpolating Labelmap\";\n    ChangeTypes[\"COMPUTE_LARGEST_BIDIRECTIONAL\"] = \"Computing Largest Bidirectional\";\n    ChangeTypes[\"GENERATE_CONTOUR_SETS\"] = \"Generating Contour Sets\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dynamic-volume';\r\n\r\nexport { id, SOPClassHandlerName };\r\n","import { DicomMetadataStore, utils } from '@ohif/core';\r\n\r\nimport * as cs from '@cornerstonejs/core';\r\nimport * as csTools from '@cornerstonejs/tools';\r\n\r\nconst CHART_MODALITY = 'CHT';\r\nconst SEG_CHART_INSTANCE_UID = utils.guid();\r\n\r\n// Private SOPClassUid for chart data\r\nconst ChartDataSOPClassUid = '1.9.451.13215.7.3.2.7.6.1';\r\n\r\nconst { utilities: csToolsUtils } = csTools;\r\n\r\nfunction _getDateTimeStr() {\r\n  const now = new Date();\r\n  const date =\r\n    now.getFullYear() + ('0' + now.getUTCMonth()).slice(-2) + ('0' + now.getUTCDate()).slice(-2);\r\n  const time =\r\n    ('0' + now.getUTCHours()).slice(-2) +\r\n    ('0' + now.getUTCMinutes()).slice(-2) +\r\n    ('0' + now.getUTCSeconds()).slice(-2);\r\n\r\n  return { date, time };\r\n}\r\n\r\nfunction _getTimePointsDataByTagName(volume, timePointsTag) {\r\n  const uniqueTimePoints = volume.imageIds.reduce((timePoints, imageId) => {\r\n    const instance = DicomMetadataStore.getInstanceByImageId(imageId);\r\n    const timePointValue = instance[timePointsTag];\r\n\r\n    if (timePointValue !== undefined) {\r\n      timePoints.add(timePointValue);\r\n    }\r\n\r\n    return timePoints;\r\n  }, new Set());\r\n\r\n  return Array.from(uniqueTimePoints).sort((a: number, b: number) => a - b);\r\n}\r\n\r\nfunction _convertTimePointsUnit(timePoints, timePointsUnit) {\r\n  const validUnits = ['ms', 's', 'm', 'h'];\r\n  const divisors = [1000, 60, 60];\r\n  const currentUnitIndex = validUnits.indexOf(timePointsUnit);\r\n  let divisor = 1;\r\n\r\n  if (currentUnitIndex !== -1) {\r\n    for (let i = currentUnitIndex; i < validUnits.length - 1; i++) {\r\n      const newDivisor = divisor * divisors[i];\r\n      const greaterThanDivisorCount = timePoints.filter(timePoint => timePoint > newDivisor).length;\r\n\r\n      // Change the scale only if more than 50% of the time points are\r\n      // greater than the new divisor.\r\n      if (greaterThanDivisorCount <= timePoints.length / 2) {\r\n        break;\r\n      }\r\n\r\n      divisor = newDivisor;\r\n      timePointsUnit = validUnits[i + 1];\r\n    }\r\n\r\n    if (divisor > 1) {\r\n      timePoints = timePoints.map(timePoint => timePoint / divisor);\r\n    }\r\n  }\r\n\r\n  return { timePoints, timePointsUnit };\r\n}\r\n\r\n// It currently supports only one tag but a few other will be added soon\r\n// Supported 4D Tags\r\n//   (0018,1060) Trigger Time                   [NOK]\r\n//   (0018,0081) Echo Time                      [NOK]\r\n//   (0018,0086) Echo Number                    [NOK]\r\n//   (0020,0100) Temporal Position Identifier   [NOK]\r\n//   (0054,1300) FrameReferenceTime             [OK]\r\nfunction _getTimePointsData(volume) {\r\n  const timePointsTags = {\r\n    FrameReferenceTime: {\r\n      unit: 'ms',\r\n    },\r\n  };\r\n\r\n  const timePointsTagNames = Object.keys(timePointsTags);\r\n  let timePoints;\r\n  let timePointsUnit;\r\n\r\n  for (let i = 0; i < timePointsTagNames.length; i++) {\r\n    const tagName = timePointsTagNames[i];\r\n    const curTimePoints = _getTimePointsDataByTagName(volume, tagName);\r\n\r\n    if (curTimePoints.length) {\r\n      timePoints = curTimePoints;\r\n      timePointsUnit = timePointsTags[tagName].unit;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!timePoints.length) {\r\n    const concatTagNames = timePointsTagNames.join(', ');\r\n\r\n    throw new Error(`Could not extract time points data for the following tags: ${concatTagNames}`);\r\n  }\r\n\r\n  const convertedTimePoints = _convertTimePointsUnit(timePoints, timePointsUnit);\r\n\r\n  timePoints = convertedTimePoints.timePoints;\r\n  timePointsUnit = convertedTimePoints.timePointsUnit;\r\n\r\n  return { timePoints, timePointsUnit };\r\n}\r\n\r\nfunction _getSegmentationData(\r\n  segmentation,\r\n  volumesTimePointsCache,\r\n  { servicesManager }: { servicesManager: AppTypes.ServicesManager }\r\n) {\r\n  const { displaySetService, segmentationService, viewportGridService } = servicesManager.services;\r\n  const displaySets = displaySetService.getActiveDisplaySets();\r\n\r\n  const dynamic4DDisplaySet = displaySets.find(displaySet => {\r\n    const anInstance = displaySet.instances?.[0];\r\n\r\n    if (anInstance) {\r\n      return (\r\n        anInstance.FrameReferenceTime !== undefined || anInstance.NumberOfTimeSlices !== undefined\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // const referencedDynamicVolume = cs.cache.getVolume(dynamic4DDisplaySet.displaySetInstanceUID);\r\n  let volumeCacheKey: string | undefined;\r\n  const volumeId = dynamic4DDisplaySet.displaySetInstanceUID;\r\n\r\n  for (const [key] of cs.cache._volumeCache) {\r\n    if (key.includes(volumeId)) {\r\n      volumeCacheKey = key;\r\n      break;\r\n    }\r\n  }\r\n\r\n  let referencedDynamicVolume;\r\n  if (volumeCacheKey) {\r\n    referencedDynamicVolume = cs.cache.getVolume(volumeCacheKey);\r\n  }\r\n\r\n  const { StudyInstanceUID, StudyDescription } = DicomMetadataStore.getInstanceByImageId(\r\n    referencedDynamicVolume.imageIds[0]\r\n  );\r\n\r\n  const segmentationVolume = segmentationService.getLabelmapVolume(segmentation.segmentationId);\r\n  const maskVolumeId = segmentationVolume?.volumeId;\r\n\r\n  const [timeData, _] = csToolsUtils.dynamicVolume.getDataInTime(referencedDynamicVolume, {\r\n    maskVolumeId,\r\n  }) as number[][];\r\n\r\n  const pixelCount = timeData.length;\r\n\r\n  if (pixelCount === 0) {\r\n    return [];\r\n  }\r\n\r\n  // Todo: this is useless we should be able to grab color with just segRepUID and segmentIndex\r\n  // const color = csTools.segmentation.config.color.getSegmentIndexColor(\r\n  //   segmentationRepresentationUID,\r\n  //   1 // segmentIndex\r\n  // );\r\n  const viewportId = viewportGridService.getActiveViewportId();\r\n  const color = segmentationService.getSegmentColor(viewportId, segmentation.segmentationId, 1);\r\n\r\n  const hexColor = cs.utilities.color.rgbToHex(color[0], color[1], color[2]);\r\n  let timePointsData = volumesTimePointsCache.get(referencedDynamicVolume);\r\n\r\n  if (!timePointsData) {\r\n    timePointsData = _getTimePointsData(referencedDynamicVolume);\r\n    volumesTimePointsCache.set(referencedDynamicVolume, timePointsData);\r\n  }\r\n\r\n  const { timePoints, timePointsUnit } = timePointsData;\r\n\r\n  if (timePoints.length !== timeData[0].length) {\r\n    throw new Error('Invalid number of time points returned');\r\n  }\r\n\r\n  const timepointsCount = timePoints.length;\r\n  const chartSeriesData = new Array(timepointsCount);\r\n\r\n  for (let i = 0; i < timepointsCount; i++) {\r\n    const average = timeData.reduce((acc, cur) => acc + cur[i] / pixelCount, 0);\r\n\r\n    chartSeriesData[i] = [timePoints[i], average];\r\n  }\r\n\r\n  return {\r\n    StudyInstanceUID,\r\n    StudyDescription,\r\n    chartData: {\r\n      series: {\r\n        label: segmentation.label,\r\n        points: chartSeriesData,\r\n        color: hexColor,\r\n      },\r\n      axis: {\r\n        x: {\r\n          label: `Time (${timePointsUnit})`,\r\n        },\r\n        y: {\r\n          label: `Vl (Bq/ml)`,\r\n        },\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nfunction _getInstanceFromSegmentations(segmentations, { servicesManager }) {\r\n  if (!segmentations.length) {\r\n    return;\r\n  }\r\n\r\n  const volumesTimePointsCache = new WeakMap();\r\n  const segmentationsData = segmentations.map(segmentation =>\r\n    _getSegmentationData(segmentation, volumesTimePointsCache, { servicesManager })\r\n  );\r\n\r\n  const { date: seriesDate, time: seriesTime } = _getDateTimeStr();\r\n  const series = segmentationsData.reduce((allSeries, curSegData) => {\r\n    return [...allSeries, curSegData.chartData.series];\r\n  }, []);\r\n\r\n  const instance = {\r\n    SOPClassUID: ChartDataSOPClassUid,\r\n    Modality: CHART_MODALITY,\r\n    SOPInstanceUID: utils.guid(),\r\n    SeriesDate: seriesDate,\r\n    SeriesTime: seriesTime,\r\n    SeriesInstanceUID: SEG_CHART_INSTANCE_UID,\r\n    StudyInstanceUID: segmentationsData[0].StudyInstanceUID,\r\n    StudyDescription: segmentationsData[0].StudyDescription,\r\n    SeriesNumber: 100,\r\n    SeriesDescription: 'Segmentation chart series data',\r\n    chartData: {\r\n      series,\r\n      axis: { ...segmentationsData[0].chartData.axis },\r\n    },\r\n  };\r\n\r\n  const seriesMetadata = {\r\n    StudyInstanceUID: instance.StudyInstanceUID,\r\n    StudyDescription: instance.StudyDescription,\r\n    SeriesInstanceUID: instance.SeriesInstanceUID,\r\n    SeriesDescription: instance.SeriesDescription,\r\n    SeriesNumber: instance.SeriesNumber,\r\n    SeriesTime: instance.SeriesTime,\r\n    SOPClassUID: instance.SOPClassUID,\r\n    Modality: instance.Modality,\r\n  };\r\n\r\n  return { seriesMetadata, instance };\r\n}\r\n\r\nfunction updateSegmentationsChartDisplaySet({ servicesManager }: withAppTypes): void {\r\n  const { segmentationService } = servicesManager.services;\r\n  const segmentations = segmentationService.getSegmentations();\r\n  const { seriesMetadata, instance } =\r\n    _getInstanceFromSegmentations(segmentations, { servicesManager }) ?? {};\r\n\r\n  if (seriesMetadata && instance) {\r\n    // An event is triggered after adding the instance and the displaySet is created\r\n    DicomMetadataStore.addSeriesMetadata([seriesMetadata], true);\r\n    DicomMetadataStore.addInstances([instance], true);\r\n  }\r\n}\r\n\r\nexport { updateSegmentationsChartDisplaySet as default };\r\n","import * as importedActions from './actions';\r\nimport { utilities, Enums } from '@cornerstonejs/tools';\r\nimport { cache } from '@cornerstonejs/core';\r\n\r\nconst LABELMAP = Enums.SegmentationRepresentations.Labelmap;\r\n\r\nconst commandsModule = ({ commandsManager, servicesManager }: withAppTypes) => {\r\n  const services = servicesManager.services;\r\n  const { displaySetService, viewportGridService, segmentationService } = services;\r\n\r\n  const actions = {\r\n    ...importedActions,\r\n    getDynamic4DDisplaySet: () => {\r\n      const displaySets = displaySetService.getActiveDisplaySets();\r\n\r\n      const dynamic4DDisplaySet = displaySets.find(displaySet => {\r\n        const anInstance = displaySet.instances?.[0];\r\n\r\n        if (anInstance) {\r\n          return (\r\n            anInstance.FrameReferenceTime !== undefined ||\r\n            anInstance.NumberOfTimeSlices !== undefined ||\r\n            anInstance.TemporalPositionIdentifier !== undefined\r\n          );\r\n        }\r\n\r\n        return false;\r\n      });\r\n\r\n      return dynamic4DDisplaySet;\r\n    },\r\n    getComputedDisplaySets: () => {\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySets = [...displaySetCache.values()];\r\n      const computedDisplaySets = cachedDisplaySets.filter(displaySet => {\r\n        return displaySet.isDerived;\r\n      });\r\n      return computedDisplaySets;\r\n    },\r\n    exportTimeReportCSV: ({ segmentations, config, options, summaryStats }) => {\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const volumeId = dynamic4DDisplaySet?.displaySetInstanceUID;\r\n\r\n      // cache._volumeCache is a map that has a key that includes the volumeId\r\n      // it is not exactly the volumeId, but it is the key that includes the volumeId\r\n      // so we can't do cache._volumeCache.get(volumeId) we should iterate\r\n      // over the keys and find the one that includes the volumeId\r\n      let volumeCacheKey: string | undefined;\r\n\r\n      for (const [key] of cache._volumeCache) {\r\n        if (key.includes(volumeId)) {\r\n          volumeCacheKey = key;\r\n          break;\r\n        }\r\n      }\r\n\r\n      let dynamicVolume;\r\n      if (volumeCacheKey) {\r\n        dynamicVolume = cache.getVolume(volumeCacheKey);\r\n      }\r\n\r\n      const instance = dynamic4DDisplaySet.instances[0];\r\n\r\n      const csv = [];\r\n\r\n      // CSV header information with placeholder empty values for the metadata lines\r\n      csv.push(`Patient ID,${instance.PatientID},`);\r\n      csv.push(`Study Date,${instance.StudyDate},`);\r\n      csv.push(`StudyInstanceUID,${instance.StudyInstanceUID},`);\r\n      csv.push(`StudyDescription,${instance.StudyDescription},`);\r\n      csv.push(`SeriesInstanceUID,${instance.SeriesInstanceUID},`);\r\n\r\n      // empty line\r\n      csv.push('');\r\n      csv.push('');\r\n\r\n      // Helper function to calculate standard deviation\r\n      function calculateStandardDeviation(data) {\r\n        const n = data.length;\r\n        const mean = data.reduce((acc, value) => acc + value, 0) / n;\r\n        const squaredDifferences = data.map(value => (value - mean) ** 2);\r\n        const variance = squaredDifferences.reduce((acc, value) => acc + value, 0) / n;\r\n        const stdDeviation = Math.sqrt(variance);\r\n        return stdDeviation;\r\n      }\r\n      // Iterate through each segmentation to get the timeData and ijkCoords\r\n      segmentations.forEach(segmentation => {\r\n        const volume = segmentationService.getLabelmapVolume(segmentation.segmentationId);\r\n        const [timeData, ijkCoords] = utilities.dynamicVolume.getDataInTime(dynamicVolume, {\r\n          maskVolumeId: volume.volumeId,\r\n        }) as number[][];\r\n\r\n        if (summaryStats) {\r\n          // Adding column headers for pixel identifier and segmentation label ids\r\n          let headers = 'Operation,Segmentation Label ID';\r\n          const maxLength = dynamicVolume.numTimePoints;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            headers += `,Time Point ${t}`;\r\n          }\r\n          csv.push(headers);\r\n          // // perform summary statistics on the timeData including for each time point, mean, median, min, max, and standard deviation for\r\n          // // all the voxels in the ROI\r\n          const mean = [];\r\n          const min = [];\r\n          const minIJK = [];\r\n          const max = [];\r\n          const maxIJK = [];\r\n          const std = [];\r\n\r\n          const numVoxels = timeData.length;\r\n          // Helper function to calculate standard deviation\r\n          for (let timeIndex = 0; timeIndex < maxLength; timeIndex++) {\r\n            // for each voxel in the ROI, get the value at the current time point\r\n            const voxelValues = [];\r\n            let sum = 0;\r\n            let minValue = Infinity;\r\n            let maxValue = -Infinity;\r\n            let minIndex = 0;\r\n            let maxIndex = 0;\r\n\r\n            // Single pass through the data to collect all needed values\r\n            for (let voxelIndex = 0; voxelIndex < numVoxels; voxelIndex++) {\r\n              const value = timeData[voxelIndex][timeIndex];\r\n              voxelValues.push(value);\r\n              sum += value;\r\n\r\n              if (value < minValue) {\r\n                minValue = value;\r\n                minIndex = voxelIndex;\r\n              }\r\n              if (value > maxValue) {\r\n                maxValue = value;\r\n                maxIndex = voxelIndex;\r\n              }\r\n            }\r\n\r\n            mean.push(sum / numVoxels);\r\n            min.push(minValue);\r\n            minIJK.push(ijkCoords[minIndex]);\r\n            max.push(maxValue);\r\n            maxIJK.push(ijkCoords[maxIndex]);\r\n            std.push(calculateStandardDeviation(voxelValues));\r\n          }\r\n\r\n          let row = `Mean,${segmentation.label}`;\r\n          // Generate separate rows for each statistic\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${mean[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Standard Deviation,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${std[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Min,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${min[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n\r\n          row = `Max,${segmentation.label}`;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            row += `,${max[t]}`;\r\n          }\r\n\r\n          csv.push(row);\r\n        } else {\r\n          // Adding column headers for pixel identifier and segmentation label ids\r\n          let headers = 'Pixel Identifier (IJK),Segmentation Label ID';\r\n          const maxLength = dynamicVolume.numTimePoints;\r\n          for (let t = 0; t < maxLength; t++) {\r\n            headers += `,Time Point ${t}`;\r\n          }\r\n          csv.push(headers);\r\n          // Assuming timeData and ijkCoords are of the same length\r\n          for (let i = 0; i < timeData.length; i++) {\r\n            // Generate the pixel identifier\r\n            const pixelIdentifier = `${ijkCoords[i][0]}_${ijkCoords[i][1]}_${ijkCoords[i][2]}`;\r\n\r\n            // Start a new row for the current pixel\r\n            let row = `${pixelIdentifier},${segmentation.label}`;\r\n\r\n            // Add time data points for this pixel\r\n            for (let t = 0; t < timeData[i].length; t++) {\r\n              row += `,${timeData[i][t]}`;\r\n            }\r\n\r\n            // Append the row to the CSV array\r\n            csv.push(row);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Convert to CSV string\r\n      const csvContent = csv.join('\\n');\r\n\r\n      // Generate filename and trigger download\r\n      const filename = `${instance.PatientID}.csv`;\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement('a');\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', filename);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    },\r\n    swapDynamicWithComputedDisplaySet: ({ displaySet }) => {\r\n      const computedDisplaySet = displaySet;\r\n\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySetKeys = [displaySetCache.keys()];\r\n      const { displaySetInstanceUID } = computedDisplaySet;\r\n      // Check to see if computed display set is already in cache\r\n      if (!cachedDisplaySetKeys.includes(displaySetInstanceUID)) {\r\n        displaySetCache.set(displaySetInstanceUID, computedDisplaySet);\r\n      }\r\n\r\n      // Get all viewports and their corresponding indices\r\n      const { viewports } = viewportGridService.getState();\r\n\r\n      // get the viewports in the grid\r\n      // iterate over them and find the ones that are showing a dynamic\r\n      // volume (displaySet), and replace that exact displaySet with the\r\n      // computed displaySet\r\n\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const viewportsToUpdate = [];\r\n\r\n      for (const [key, value] of viewports) {\r\n        const viewport = value;\r\n        const viewportOptions = viewport.viewportOptions;\r\n        const { displaySetInstanceUIDs } = viewport;\r\n        const displaySetInstanceUIDIndex = displaySetInstanceUIDs.indexOf(\r\n          dynamic4DDisplaySet.displaySetInstanceUID\r\n        );\r\n        if (displaySetInstanceUIDIndex !== -1) {\r\n          const newViewport = {\r\n            viewportId: viewport.viewportId,\r\n            // merge the other displaySetInstanceUIDs with the new one\r\n            displaySetInstanceUIDs: [\r\n              ...displaySetInstanceUIDs.slice(0, displaySetInstanceUIDIndex),\r\n              displaySetInstanceUID,\r\n              ...displaySetInstanceUIDs.slice(displaySetInstanceUIDIndex + 1),\r\n            ],\r\n            viewportOptions: {\r\n              initialImageOptions: viewportOptions.initialImageOptions,\r\n              viewportType: 'volume',\r\n              orientation: viewportOptions.orientation,\r\n              background: viewportOptions.background,\r\n            },\r\n          };\r\n          viewportsToUpdate.push(newViewport);\r\n        }\r\n      }\r\n\r\n      commandsManager.run('setDisplaySetsForViewports', { viewportsToUpdate });\r\n    },\r\n    swapComputedWithDynamicDisplaySet: () => {\r\n      // Todo: this assumes there is only one dynamic display set in the viewer\r\n      const dynamicDisplaySet = actions.getDynamic4DDisplaySet();\r\n\r\n      const displaySetCache = displaySetService.getDisplaySetCache();\r\n      const cachedDisplaySetKeys = [...displaySetCache.keys()]; // Fix: Spread to get the array\r\n      const { displaySetInstanceUID } = dynamicDisplaySet;\r\n\r\n      // Check to see if dynamic display set is already in cache\r\n      if (!cachedDisplaySetKeys.includes(displaySetInstanceUID)) {\r\n        displaySetCache.set(displaySetInstanceUID, dynamicDisplaySet);\r\n      }\r\n\r\n      // Get all viewports and their corresponding indices\r\n      const { viewports } = viewportGridService.getState();\r\n\r\n      // Get the computed 4D display set\r\n      const computed4DDisplaySet = actions.getComputedDisplaySets()[0];\r\n\r\n      const viewportsToUpdate = [];\r\n\r\n      for (const [key, value] of viewports) {\r\n        const viewport = value;\r\n        const viewportOptions = viewport.viewportOptions;\r\n        const { displaySetInstanceUIDs } = viewport;\r\n        const displaySetInstanceUIDIndex = displaySetInstanceUIDs.indexOf(\r\n          computed4DDisplaySet.displaySetInstanceUID\r\n        );\r\n        if (displaySetInstanceUIDIndex !== -1) {\r\n          const newViewport = {\r\n            viewportId: viewport.viewportId,\r\n            // merge the other displaySetInstanceUIDs with the new one\r\n            displaySetInstanceUIDs: [\r\n              ...displaySetInstanceUIDs.slice(0, displaySetInstanceUIDIndex),\r\n              displaySetInstanceUID,\r\n              ...displaySetInstanceUIDs.slice(displaySetInstanceUIDIndex + 1),\r\n            ],\r\n            viewportOptions: {\r\n              initialImageOptions: viewportOptions.initialImageOptions,\r\n              viewportType: 'volume',\r\n              orientation: viewportOptions.orientation,\r\n              background: viewportOptions.background,\r\n            },\r\n          };\r\n          viewportsToUpdate.push(newViewport);\r\n        }\r\n      }\r\n\r\n      commandsManager.run('setDisplaySetsForViewports', { viewportsToUpdate });\r\n    },\r\n    createNewLabelMapForDynamicVolume: async ({ label }) => {\r\n      const { viewports, activeViewportId } = viewportGridService.getState();\r\n\r\n      // get the dynamic 4D display set\r\n      const dynamic4DDisplaySet = actions.getDynamic4DDisplaySet();\r\n      const dynamic4DDisplaySetInstanceUID = dynamic4DDisplaySet.displaySetInstanceUID;\r\n\r\n      // check if the dynamic 4D display set is in the display, if not we might have\r\n      // the computed volumes and we should choose them for the segmentation\r\n      // creation\r\n\r\n      let referenceDisplaySet;\r\n\r\n      const activeViewport = viewports.get(activeViewportId);\r\n      const activeDisplaySetInstanceUIDs = activeViewport.displaySetInstanceUIDs;\r\n      const dynamicIsInActiveViewport = activeDisplaySetInstanceUIDs.includes(\r\n        dynamic4DDisplaySetInstanceUID\r\n      );\r\n\r\n      if (dynamicIsInActiveViewport) {\r\n        referenceDisplaySet = dynamic4DDisplaySet;\r\n      }\r\n\r\n      if (!referenceDisplaySet) {\r\n        // try to see if there is any derived displaySet in the active viewport\r\n        // which is referencing the dynamic 4D display set\r\n\r\n        // Todo: this is wrong but I don't have time to fix it now\r\n        const cachedDisplaySets = displaySetService.getDisplaySetCache();\r\n        for (const [key, displaySet] of cachedDisplaySets) {\r\n          if (displaySet.referenceDisplaySetUID === dynamic4DDisplaySetInstanceUID) {\r\n            referenceDisplaySet = displaySet;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!referenceDisplaySet) {\r\n        throw new Error('No reference display set found based on the dynamic data');\r\n      }\r\n\r\n      const displaySet = displaySetService.getDisplaySetByUID(\r\n        referenceDisplaySet.displaySetInstanceUID\r\n      );\r\n\r\n      const segmentationId = await segmentationService.createLabelmapForDisplaySet(displaySet, {\r\n        label,\r\n      });\r\n\r\n      const firstViewport = viewports.values().next().value;\r\n\r\n      await segmentationService.addSegmentationRepresentation(firstViewport.viewportId, {\r\n        segmentationId,\r\n      });\r\n\r\n      return segmentationId;\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    updateSegmentationsChartDisplaySet: {\r\n      commandFn: actions.updateSegmentationsChartDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    exportTimeReportCSV: {\r\n      commandFn: actions.exportTimeReportCSV,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    swapDynamicWithComputedDisplaySet: {\r\n      commandFn: actions.swapDynamicWithComputedDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    createNewLabelMapForDynamicVolume: {\r\n      commandFn: actions.createNewLabelMapForDynamicVolume,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n    swapComputedWithDynamicDisplaySet: {\r\n      commandFn: actions.swapComputedWithDynamicDisplaySet,\r\n      storeContexts: [],\r\n      options: {},\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'DYNAMIC-VOLUME:CORNERSTONE',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Tabs,\r\n  TabsList,\r\n  TabsTrigger,\r\n  Button,\r\n  PanelSection,\r\n  Icons,\r\n  Tooltip,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n  Numeric,\r\n} from '@ohif/ui-next';\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\n// Helper function to safely convert any value to uppercase string\r\nconst toUpperCaseString = value => {\r\n  if (value === null || value === undefined) {\r\n    return '';\r\n  }\r\n  return String(value).toUpperCase();\r\n};\r\n\r\nconst Header = ({ title, tooltip }) => (\r\n  <div className=\"flex items-center space-x-1\">\r\n    <Tooltip>\r\n      <TooltipTrigger asChild>\r\n        <span>\r\n          <Icons.ByName\r\n            name=\"info-link\"\r\n            className=\"text-primary h-3 w-3\"\r\n          />\r\n        </span>\r\n      </TooltipTrigger>\r\n      <TooltipContent\r\n        sideOffset={4}\r\n        className=\"max-w-xs\"\r\n      >\r\n        <div>{tooltip}</div>\r\n      </TooltipContent>\r\n    </Tooltip>\r\n    <span className=\"text-muted-foreground text-xs uppercase tracking-wide\">{title}</span>\r\n  </div>\r\n);\r\n\r\nconst DynamicVolumeControls = ({\r\n  isPlaying,\r\n  onPlayPauseChange,\r\n  // fps\r\n  fps,\r\n  onFpsChange,\r\n  minFps,\r\n  maxFps,\r\n  // Frames\r\n  currentDimensionGroupNumber,\r\n  onDimensionGroupChange,\r\n  numDimensionGroups,\r\n  onGenerate,\r\n  onDoubleRangeChange,\r\n  rangeValues,\r\n  onDynamicClick,\r\n}) => {\r\n  const [computedView, setComputedView] = useState(false);\r\n  const [computeViewMode, setComputeViewMode] = useState(Enums.DynamicOperatorType.SUM);\r\n\r\n  // Wrapper for onGenerate to handle potential errors\r\n  const handleGenerate = () => {\r\n    try {\r\n      if (typeof onGenerate === 'function') {\r\n        onGenerate(computeViewMode);\r\n      } else {\r\n        console.error('onGenerate is not a function', onGenerate);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in onGenerate:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex select-none flex-col\">\r\n      <PanelSection defaultOpen={true}>\r\n        <PanelSection.Header>Controls</PanelSection.Header>\r\n        <PanelSection.Content className=\"bg-muted space-y-4 px-5 pt-2 pb-4\">\r\n          <div className=\"mb-4\">\r\n            <Header\r\n              title=\"View\"\r\n              tooltip={\r\n                'Select the view mode, 4D to view the dynamic volume or Computed to view the computed volume'\r\n              }\r\n            />\r\n            <Tabs\r\n              value={computedView ? 'computed' : '4d'}\r\n              onValueChange={value => {\r\n                const isComputed = value === 'computed';\r\n                setComputedView(isComputed);\r\n                if (!isComputed && typeof onDynamicClick === 'function') {\r\n                  onDynamicClick();\r\n                }\r\n              }}\r\n              className=\"my-2 w-full\"\r\n            >\r\n              <TabsList className=\"w-full\">\r\n                <TabsTrigger\r\n                  value=\"4d\"\r\n                  className=\"w-1/2\"\r\n                >\r\n                  4D\r\n                </TabsTrigger>\r\n                <TabsTrigger\r\n                  value=\"computed\"\r\n                  className=\"w-1/2\"\r\n                >\r\n                  Computed\r\n                </TabsTrigger>\r\n              </TabsList>\r\n            </Tabs>\r\n          </div>\r\n          <div>\r\n            <DimensionGroupControls\r\n              onPlayPauseChange={onPlayPauseChange}\r\n              isPlaying={isPlaying}\r\n              computedView={computedView}\r\n              // fps\r\n              fps={fps}\r\n              onFpsChange={onFpsChange}\r\n              minFps={minFps}\r\n              maxFps={maxFps}\r\n              //\r\n              numDimensionGroups={numDimensionGroups}\r\n              onDimensionGroupChange={onDimensionGroupChange}\r\n              currentDimensionGroupNumber={currentDimensionGroupNumber}\r\n            />\r\n          </div>\r\n          <div className={`mt-3 flex flex-col ${computedView ? '' : 'ohif-disabled'}`}>\r\n            <Header\r\n              title=\"Computed Operation\"\r\n              tooltip={\r\n                <div>\r\n                  Operation Buttons (SUM, AVERAGE, SUBTRACT): Select the mathematical operation to\r\n                  be applied to the data set.\r\n                  <br /> Range Slider: Choose the numeric range of dimension groups within which the\r\n                  operation will be performed.\r\n                  <br />\r\n                  Generate Button: Execute the chosen operation on the specified range of data.\r\n                </div>\r\n              }\r\n            />\r\n            <Tabs\r\n              value={String(computeViewMode)}\r\n              onValueChange={value => {\r\n                setComputeViewMode(value);\r\n              }}\r\n              className=\"mt-2 w-full\"\r\n            >\r\n              <TabsList className=\"w-full gap-1\">\r\n                {' '}\r\n                <TabsTrigger\r\n                  value={String(Enums.DynamicOperatorType.SUM)}\r\n                  className=\"w-1/3\"\r\n                >\r\n                  {toUpperCaseString(Enums.DynamicOperatorType.SUM)}\r\n                </TabsTrigger>\r\n                <TabsTrigger\r\n                  value={String(Enums.DynamicOperatorType.AVERAGE)}\r\n                  className=\"w-1/3\"\r\n                >\r\n                  {toUpperCaseString(Enums.DynamicOperatorType.AVERAGE)}\r\n                </TabsTrigger>\r\n                <TabsTrigger\r\n                  value={String(Enums.DynamicOperatorType.SUBTRACT)}\r\n                  className=\"w-1/3\"\r\n                >\r\n                  {toUpperCaseString(Enums.DynamicOperatorType.SUBTRACT)}\r\n                </TabsTrigger>\r\n              </TabsList>\r\n            </Tabs>\r\n            <div className=\"mt-2 w-full\">\r\n              <Numeric.Container\r\n                mode=\"doubleRange\"\r\n                min={1}\r\n                max={numDimensionGroups || 1}\r\n                values={rangeValues || [1, numDimensionGroups || 1]}\r\n                onChange={onDoubleRangeChange || (() => {})}\r\n              >\r\n                <Numeric.DoubleRange showNumberInputs />\r\n              </Numeric.Container>\r\n            </div>\r\n            <Button\r\n              variant=\"default\"\r\n              size=\"sm\"\r\n              className=\"mt-2 h-[26px] w-[115px] self-start p-0\"\r\n              onClick={handleGenerate}\r\n            >\r\n              Generate\r\n            </Button>\r\n          </div>\r\n        </PanelSection.Content>\r\n      </PanelSection>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicVolumeControls;\r\n\r\nfunction DimensionGroupControls({\r\n  isPlaying,\r\n  onPlayPauseChange,\r\n  fps,\r\n  minFps,\r\n  maxFps,\r\n  onFpsChange,\r\n  numDimensionGroups,\r\n  onDimensionGroupChange,\r\n  currentDimensionGroupNumber,\r\n  computedView,\r\n}) {\r\n  const getPlayPauseIconName = () => (isPlaying ? 'icon-pause' : 'icon-play');\r\n\r\n  return (\r\n    <div className={computedView ? 'ohif-disabled' : ''}>\r\n      <Header\r\n        title=\"4D Controls\"\r\n        tooltip={\r\n          <div>\r\n            Play/Pause Button: Begin or pause the animation of the 4D visualization. <br />\r\n            Dimension Group Selector: Navigate through individual dimension groups of the 4D data.{' '}\r\n            <br />\r\n            FPS (Frames Per Second) Selector: Adjust the playback speed of the animation.\r\n          </div>\r\n        }\r\n      />\r\n      <div className=\"mt-3 flex justify-between\">\r\n        <Button\r\n          id=\"play-pause-button\"\r\n          variant=\"secondary\"\r\n          size=\"default\"\r\n          className=\"w-[58px]\"\r\n          onClick={() => {\r\n            if (typeof onPlayPauseChange === 'function') {\r\n              onPlayPauseChange(!isPlaying);\r\n            }\r\n          }}\r\n        >\r\n          <Icons.ByName\r\n            name={getPlayPauseIconName()}\r\n            className=\"text-foreground h-[24px] w-[24px]\"\r\n          />\r\n        </Button>\r\n\r\n        <Numeric.Container\r\n          mode=\"stepper\"\r\n          value={currentDimensionGroupNumber || 1}\r\n          onChange={onDimensionGroupChange || (() => {})}\r\n          min={1}\r\n          max={numDimensionGroups || 1}\r\n          step={1}\r\n        >\r\n          <div className=\"flex flex-col items-center\">\r\n            <Numeric.NumberStepper\r\n              className=\"h-[28px] w-[58px]\"\r\n              direction=\"horizontal\"\r\n            />\r\n            <Numeric.Label className=\"text-muted-foreground mt-1 text-sm\">Frame</Numeric.Label>\r\n          </div>\r\n        </Numeric.Container>\r\n\r\n        <Numeric.Container\r\n          mode=\"stepper\"\r\n          value={fps || 1}\r\n          onChange={onFpsChange || (() => {})}\r\n          min={minFps || 1}\r\n          max={maxFps || 30}\r\n          step={1}\r\n        >\r\n          <div className=\"flex flex-col items-center\">\r\n            <Numeric.NumberStepper\r\n              className=\"h-[28px] w-[58px]\"\r\n              direction=\"horizontal\"\r\n            />\r\n            <Numeric.Label className=\"text-muted-foreground mt-1 text-sm\">FPS</Numeric.Label>\r\n          </div>\r\n        </Numeric.Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useCine } from '@ohif/ui-next';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\nimport { utilities as csUtils, volumeLoader, eventTarget, Enums, cache } from '@cornerstonejs/core';\r\nimport { utilities as cstUtils } from '@cornerstonejs/tools';\r\nimport DynamicVolumeControls from './DynamicVolumeControls';\r\n\r\nconst SOPClassHandlerId = '@ohif/extension-default.sopClassHandlerModule.stack';\r\n\r\nexport default function PanelGenerateImage({ servicesManager, commandsManager }: withAppTypes) {\r\n  const { cornerstoneViewportService, viewportGridService, displaySetService } =\r\n    servicesManager.services;\r\n\r\n  const [{ isCineEnabled }, cineService] = useCine();\r\n  const [{ activeViewportId }] = useViewportGrid();\r\n\r\n  //\r\n  const [dimensionGroupRange, setDimensionGroupRange] = useState([1, 1]);\r\n  const [computedDisplaySet, setComputedDisplaySet] = useState(null);\r\n  const [dynamicVolume, setDynamicVolume] = useState(null);\r\n  const [frameRate, setFrameRate] = useState(20);\r\n  const [isPlaying, setIsPlaying] = useState(isCineEnabled);\r\n  const [dimensionGroupNumberRendered, setDimensionGroupNumberRendered] = useState(null);\r\n  const [displayingComputed, setDisplayingComputed] = useState(false);\r\n\r\n  //\r\n  const uuidComputedVolume = useRef(csUtils.uuidv4());\r\n  const uuidDynamicVolume = useRef(null);\r\n  const computedVolumeId = `cornerstoneStreamingImageVolume:${uuidComputedVolume.current}`;\r\n\r\n  useEffect(() => {\r\n    const viewportDataChangedEvt = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\r\n    const cineStateChangedEvt = servicesManager.services.cineService.EVENTS.CINE_STATE_CHANGED;\r\n\r\n    const viewportDataChangedCallback = evtDetails => {\r\n      evtDetails.viewportData.data.forEach(volumeData => {\r\n        if (volumeData.volume?.isDynamicVolume()) {\r\n          setDynamicVolume(volumeData.volume);\r\n          uuidDynamicVolume.current = volumeData.displaySetInstanceUID;\r\n          const newRange = [1, volumeData.volume.numDimensionGroups];\r\n          setDimensionGroupRange(newRange);\r\n        }\r\n      });\r\n    };\r\n\r\n    const cineStateChangedCallback = evt => {\r\n      setIsPlaying(evt.isPlaying);\r\n    };\r\n\r\n    const { unsubscribe: unsubscribeViewportData } = cornerstoneViewportService.subscribe(\r\n      viewportDataChangedEvt,\r\n      viewportDataChangedCallback\r\n    );\r\n    const { unsubscribe: unsubscribeCineState } = servicesManager.services.cineService.subscribe(\r\n      cineStateChangedEvt,\r\n      cineStateChangedCallback\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeViewportData();\r\n      unsubscribeCineState();\r\n    };\r\n  }, [cornerstoneViewportService, cineService, servicesManager.services.cineService]);\r\n\r\n  useEffect(() => {\r\n    const evt = Enums.Events.DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED;\r\n\r\n    const callback = evt => {\r\n      setDimensionGroupNumberRendered(evt.detail.dimensionGroupNumber);\r\n    };\r\n\r\n    eventTarget.addEventListener(evt, callback);\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(evt, callback);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(activeViewportId);\r\n\r\n    if (!displaySetUIDs?.length) {\r\n      return;\r\n    }\r\n\r\n    const displaySets = displaySetUIDs.map(displaySetService.getDisplaySetByUID);\r\n    const dynamicVolumeDisplaySet = displaySets.find(displaySet => displaySet.isDynamicVolume);\r\n\r\n    if (!dynamicVolumeDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const dynamicVolume = cache\r\n      .getVolumes()\r\n      .find(volume => volume.volumeId.includes(dynamicVolumeDisplaySet.displaySetInstanceUID));\r\n\r\n    if (!dynamicVolume) {\r\n      return;\r\n    }\r\n\r\n    setDynamicVolume(dynamicVolume);\r\n    uuidDynamicVolume.current = dynamicVolumeDisplaySet.displaySetInstanceUID;\r\n    setDimensionGroupRange([1, dynamicVolume.numDimensionGroups]);\r\n  }, [\r\n    activeViewportId,\r\n    viewportGridService,\r\n    displaySetService,\r\n    cornerstoneViewportService,\r\n    cineService,\r\n  ]);\r\n\r\n  function renderGeneratedImage(displaySet) {\r\n    commandsManager.runCommand('swapDynamicWithComputedDisplaySet', {\r\n      displaySet,\r\n    });\r\n\r\n    setDisplayingComputed(true);\r\n  }\r\n\r\n  function renderDynamicImage(displaySet) {\r\n    commandsManager.runCommand('swapComputedWithDynamicDisplaySet');\r\n  }\r\n\r\n  // Get computed volume from cache, calculate the data across the time frames,\r\n  // set the scalar data to the computedVolume, and create displaySet\r\n  async function onGenerateImage(operationName) {\r\n    const dynamicVolumeId = dynamicVolume.volumeId;\r\n\r\n    if (!dynamicVolumeId) {\r\n      return;\r\n    }\r\n\r\n    let computedVolume = cache.getVolume(computedVolumeId);\r\n\r\n    if (!computedVolume) {\r\n      computedVolume = await volumeLoader.createAndCacheDerivedVolume(dynamicVolumeId, {\r\n        volumeId: computedVolumeId,\r\n      });\r\n    }\r\n    const [start, end] = dimensionGroupRange;\r\n    // from start to end, with steps of 1\r\n    const frameNumbers = Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n\r\n    const options = {\r\n      dimensionGroupNumbers: operationName === 'SUBTRACT' ? [start, end] : frameNumbers,\r\n      targetVolume: computedVolume,\r\n    };\r\n\r\n    cstUtils.dynamicVolume.updateVolumeFromTimeData(dynamicVolume, operationName, options);\r\n\r\n    // If computed display set does not exist, create an object to be used as\r\n    // the displaySet. If it does exist, update the image data and vtkTexture\r\n    if (!computedDisplaySet) {\r\n      const displaySet = {\r\n        volumeLoaderSchema: computedVolume.volumeId.split(':')[0],\r\n        displaySetInstanceUID: uuidComputedVolume.current,\r\n        SOPClassHandlerId: SOPClassHandlerId,\r\n        Modality: dynamicVolume.metadata.Modality,\r\n        isMultiFrame: false,\r\n        numImageFrames: 1,\r\n        uid: uuidComputedVolume.current,\r\n        referenceDisplaySetUID: dynamicVolume.volumeId.split(':')[1],\r\n        madeInClient: true,\r\n        FrameOfReferenceUID: dynamicVolume.metadata.FrameOfReferenceUID,\r\n        isDerived: true,\r\n        imageIds: computedVolume.imageIds,\r\n      };\r\n      setComputedDisplaySet(displaySet);\r\n      renderGeneratedImage(displaySet);\r\n    } else {\r\n      commandsManager.runCommand('updateVolumeData', {\r\n        volume: computedVolume,\r\n      });\r\n      cornerstoneViewportService.getRenderingEngine().render();\r\n      renderGeneratedImage(computedDisplaySet);\r\n    }\r\n  }\r\n\r\n  const onPlayPauseChange = isPlaying => {\r\n    isPlaying ? handlePlay() : handleStop();\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    setIsPlaying(true);\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(activeViewportId);\r\n\r\n    if (!viewportInfo) {\r\n      return;\r\n    }\r\n\r\n    const { element } = viewportInfo;\r\n    cineService.playClip(element, { framesPerSecond: frameRate, viewportId: activeViewportId });\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setIsPlaying(false);\r\n    const { element } = cornerstoneViewportService.getViewportInfo(activeViewportId);\r\n    cineService.stopClip(element);\r\n  };\r\n\r\n  const handleSetFrameRate = newFrameRate => {\r\n    setFrameRate(newFrameRate);\r\n    handleStop();\r\n    handlePlay();\r\n  };\r\n\r\n  return (\r\n    <DynamicVolumeControls\r\n      fps={frameRate}\r\n      isPlaying={isPlaying}\r\n      onPlayPauseChange={onPlayPauseChange}\r\n      minFps={1}\r\n      maxFps={50}\r\n      onFpsChange={handleSetFrameRate}\r\n      currentDimensionGroupNumber={dimensionGroupNumberRendered}\r\n      numDimensionGroups={dynamicVolume?.numDimensionGroups || 1}\r\n      onDimensionGroupChange={dimensionGroupNumber => {\r\n        dynamicVolume.dimensionGroupNumber = dimensionGroupNumber;\r\n      }}\r\n      onGenerate={onGenerateImage}\r\n      onDynamicClick={displayingComputed ? () => renderDynamicImage(computedDisplaySet) : null}\r\n      onDoubleRangeChange={setDimensionGroupRange}\r\n      rangeValues={dimensionGroupRange}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PanelGenerateImage from './PanelGenerateImage';\r\n\r\nfunction DynamicDataPanel({ servicesManager, commandsManager, tab }: withAppTypes) {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"flex flex-col text-white\"\r\n        data-cy={'dynamic-volume-panel'}\r\n      >\r\n        <PanelGenerateImage\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n        ></PanelGenerateImage>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DynamicDataPanel;\r\n","import React from 'react';\r\nimport { Button, Icons } from '@ohif/ui-next';\r\nimport { useSegmentations } from '@ohif/extension-cornerstone';\r\n\r\nfunction DynamicExport({ commandsManager, servicesManager }: withAppTypes) {\r\n  const segmentations = useSegmentations({ servicesManager });\r\n\r\n  if (!segmentations?.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      <div className=\"flex h-8 w-full items-center rounded pr-0.5\">\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          className=\"pl-1.5\"\r\n          onClick={() => {\r\n            commandsManager.runCommand('exportTimeReportCSV', {\r\n              segmentations,\r\n              options: {\r\n                filename: 'TimeData.csv',\r\n              },\r\n            });\r\n          }}\r\n        >\r\n          <Icons.Export />\r\n          <span className=\"pl-1\">Time Data</span>\r\n        </Button>\r\n      </div>\r\n      <div className=\"flex h-8 w-full items-center rounded pr-0.5\">\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"ghost\"\r\n          className=\"pl-1.5\"\r\n          onClick={() => {\r\n            commandsManager.runCommand('exportTimeReportCSV', {\r\n              segmentations,\r\n              summaryStats: true,\r\n              options: {\r\n                filename: 'ROIStats.csv',\r\n              },\r\n            });\r\n          }}\r\n        >\r\n          <Icons.Export />\r\n          <span className=\"pl-1\">ROI Stats</span>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DynamicExport;\r\n","import React from 'react';\r\nimport { DynamicDataPanel } from './panels';\r\nimport { Toolbox } from '@ohif/extension-default';\r\nimport { PanelSegmentation } from '@ohif/extension-cornerstone';\r\nimport DynamicExport from './panels/DynamicExport';\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager, configuration }) {\r\n  const wrappedDynamicDataPanel = () => {\r\n    return (\r\n      <DynamicDataPanel\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedDynamicSegmentation = () => {\r\n    return (\r\n      <>\r\n        <Toolbox\r\n          buttonSectionId=\"dynamic-toolbox\"\r\n          title=\"Threshold Tools\"\r\n        />\r\n        <PanelSegmentation\r\n          servicesManager={servicesManager}\r\n          commandsManager={commandsManager}\r\n          extensionManager={extensionManager}\r\n          configuration={configuration}\r\n        >\r\n          <DynamicExport\r\n            servicesManager={servicesManager}\r\n            commandsManager={commandsManager}\r\n          />\r\n        </PanelSegmentation>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dynamic-volume',\r\n      iconName: 'tab-4d',\r\n      iconLabel: '4D Workflow',\r\n      label: '4D Workflow',\r\n      component: wrappedDynamicDataPanel,\r\n    },\r\n    {\r\n      name: 'dynamic-segmentation',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation',\r\n      component: wrappedDynamicSegmentation,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","const DEFAULT_COLORMAP = '2hot';\r\nconst toolGroupIds = {\r\n  pt: 'dynamic4D-pt',\r\n  fusion: 'dynamic4D-fusion',\r\n  ct: 'dynamic4D-ct',\r\n};\r\n\r\nfunction getPTOptions({\r\n  colormap,\r\n  voiInverted,\r\n}: {\r\n  colormap?: {\r\n    name: string;\r\n    opacity:\r\n      | number\r\n      | {\r\n          value: number;\r\n          opacity: number;\r\n        }[];\r\n  };\r\n  voiInverted?: boolean;\r\n} = {}) {\r\n  return {\r\n    blendMode: 'MIP',\r\n    colormap,\r\n    voi: {\r\n      windowWidth: 5,\r\n      windowCenter: 2.5,\r\n    },\r\n    voiInverted,\r\n  };\r\n}\r\n\r\nfunction getPTViewports() {\r\n  const ptOptionsParams = {\r\n    colormap: {\r\n      name: DEFAULT_COLORMAP,\r\n      opacity: [\r\n        { value: 0, opacity: 0 },\r\n        { value: 0.1, opacity: 1 },\r\n        { value: 1, opacity: 1 },\r\n      ],\r\n    },\r\n    voiInverted: false,\r\n  };\r\n\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ptCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.pt,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ptDisplaySet',\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nfunction getFusionViewports() {\r\n  const ptOptionsParams = {\r\n    colormap: {\r\n      name: DEFAULT_COLORMAP,\r\n      opacity: [\r\n        { value: 0, opacity: 0 },\r\n        { value: 0.1, opacity: 0.8 },\r\n        { value: 1, opacity: 0.8 },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n          {\r\n            type: 'hydrateseg',\r\n            id: 'sameFORId',\r\n            source: true,\r\n            target: true,\r\n            options: {\r\n              matchingRules: ['sameFOR'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n          {\r\n            type: 'hydrateseg',\r\n            id: 'sameFORId',\r\n            source: true,\r\n            target: true,\r\n            options: {\r\n              matchingRules: ['sameFOR'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'fusionCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.fusion,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: false,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'fusionWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ptFusionWLSync',\r\n            source: false,\r\n            target: true,\r\n            options: {\r\n              syncInvertState: false,\r\n            },\r\n          },\r\n          {\r\n            type: 'hydrateseg',\r\n            id: 'sameFORId',\r\n            source: true,\r\n            target: true,\r\n            options: {\r\n              matchingRules: ['sameFOR'],\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n        {\r\n          options: { ...getPTOptions(ptOptionsParams) },\r\n          id: 'ptDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nfunction getSeriesChartViewport() {\r\n  return {\r\n    viewportOptions: {\r\n      viewportId: 'seriesChart',\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'chartDisplaySet',\r\n        options: {\r\n          // This dataset does not require the download of any instance since it is pre-computed locally,\r\n          // but interleaveTopToBottom.ts was not loading any series because it consider that all viewports\r\n          // are a Cornerstone viewport which is not true in this case and it waits for all viewports to\r\n          // have called interleaveTopToBottom(...).\r\n          skipLoading: true,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nfunction getCTViewports() {\r\n  return [\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctAxial',\r\n        viewportType: 'volume',\r\n        orientation: 'axial',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle', // 'first', 'last', 'middle'\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'axialSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctSagittal',\r\n        viewportType: 'volume',\r\n        orientation: 'sagittal',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle',\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'sagittalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      viewportOptions: {\r\n        viewportId: 'ctCoronal',\r\n        viewportType: 'volume',\r\n        orientation: 'coronal',\r\n        toolGroupId: toolGroupIds.ct,\r\n        initialImageOptions: {\r\n          preset: 'middle',\r\n        },\r\n        syncGroups: [\r\n          {\r\n            type: 'cameraPosition',\r\n            id: 'coronalSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n          {\r\n            type: 'voi',\r\n            id: 'ctWLSync',\r\n            source: true,\r\n            target: true,\r\n          },\r\n        ],\r\n      },\r\n      displaySets: [\r\n        {\r\n          id: 'ctDisplaySet',\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nconst defaultProtocol = {\r\n  id: 'default4D',\r\n  locked: true,\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  hasUpdatedPriorsInformation: false,\r\n  name: 'Default',\r\n  createdDate: '2023-01-01T00:00:00.000Z',\r\n  modifiedDate: '2023-01-01T00:00:00.000Z',\r\n  availableTo: {},\r\n  editableBy: {},\r\n  imageLoadStrategy: 'default', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\r\n  protocolMatchingRules: [\r\n    {\r\n      attribute: 'ModalitiesInStudy',\r\n      constraint: {\r\n        contains: ['CT', 'PT'],\r\n      },\r\n    },\r\n  ],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: -1,\r\n  displaySetSelectors: {\r\n    defaultDisplaySetId: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        // Try to match series with images by default, to prevent weird display\r\n        // on SEG/SR containing studies\r\n        {\r\n          attribute: 'numImageFrames',\r\n          constraint: {\r\n            greaterThan: { value: 0 },\r\n          },\r\n        },\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    ctDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    ptDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'PT',\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'Corrected',\r\n          },\r\n        },\r\n        {\r\n          weight: 2,\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            doesNotContain: {\r\n              value: 'Uncorrected',\r\n            },\r\n          },\r\n        },\r\n\r\n        // Should we check if CorrectedImage contains ATTN?\r\n        // (0028,0051) (CorrectedImage): NORM\\DTIM\\ATTN\\SCAT\\RADL\\DECY\r\n      ],\r\n      // Can be used to select matching studies\r\n      // studyMatchingRules: [],\r\n    },\r\n    chartDisplaySet: {\r\n      // Unused currently\r\n      imageMatchingRules: [],\r\n      // Matches displaysets, NOT series\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CHT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      id: 'dataPreparation',\r\n      name: 'Data Preparation',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getPTViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'registration',\r\n      name: 'Registration',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 3,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports(), ...getCTViewports(), ...getPTViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'roiQuantification',\r\n      name: 'ROI Quantification',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 3,\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n\r\n    {\r\n      id: 'kineticAnalysis',\r\n      name: 'Kinetic Analysis',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 2,\r\n          columns: 3,\r\n          layoutOptions: [\r\n            {\r\n              x: 0,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 1 / 3,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 2 / 3,\r\n              y: 0,\r\n              width: 1 / 3,\r\n              height: 1 / 2,\r\n            },\r\n            {\r\n              x: 0,\r\n              y: 1 / 2,\r\n              width: 1,\r\n              height: 1 / 2,\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      viewports: [...getFusionViewports(), getSeriesChartViewport()],\r\n      createdDate: '2023-01-01T00:00:00.000Z',\r\n    },\r\n  ],\r\n};\r\n\r\n/**\r\n * HangingProtocolModule should provide a list of hanging protocols that will be\r\n * available in OHIF for Modes to use to decide on the structure of the viewports\r\n * and also the series that hung in the viewports. Each hanging protocol is defined by\r\n * { name, protocols}. Examples include the default hanging protocol provided by\r\n * the default extension that shows 2x2 viewports.\r\n */\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: defaultProtocol.id,\r\n      protocol: defaultProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\n","import { id } from './id';\r\nimport commandsModule from './commandsModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport { cache } from '@cornerstonejs/core';\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst dynamicVolumeExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  /**\r\n   * Perform any pre-registration tasks here. This is called before the extension\r\n   * is registered. Usually we run tasks such as: configuring the libraries\r\n   * (e.g. cornerstone, cornerstoneTools, ...) or registering any services that\r\n   * this extension is providing.\r\n   */\r\n  preRegistration: ({ servicesManager, commandsManager, configuration = {} }) => {\r\n    // TODO: look for the right fix\r\n    cache.setMaxCacheSize(5 * 1024 * 1024 * 1024);\r\n  },\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule,\r\n  /**\r\n   * ViewportModule should provide a list of viewports that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each viewport is defined by\r\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\r\n   * that is provided by the Cornerstone extension in OHIF.\r\n   */\r\n  getHangingProtocolModule,\r\n  /**\r\n   * CommandsModule should provide a list of commands that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each command is defined by\r\n   * an object of { actions, definitions, defaultContext } where actions is an\r\n   * object of functions, definitions is an object of available commands, their\r\n   * options, and defaultContext is the default context for the command to run against.\r\n   */\r\n  getCommandsModule: ({ servicesManager, commandsManager, extensionManager }) => {\r\n    return commandsModule({\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n    });\r\n  },\r\n};\r\n\r\nexport { dynamicVolumeExtension as default };\r\n"],"names":["ChangeTypes","Events","SegmentationRepresentations","StrategyCallbacks","MouseBindings","KeyboardBindings","ToolModes","Swipe","AnnotationStyleStates","id","packageJson","CHART_MODALITY","SEG_CHART_INSTANCE_UID","utils","guid","ChartDataSOPClassUid","utilities","csToolsUtils","csTools","_getTimePointsDataByTagName","volume","timePointsTag","uniqueTimePoints","imageIds","reduce","timePoints","imageId","timePointValue","DicomMetadataStore","getInstanceByImageId","undefined","add","Set","Array","from","sort","a","b","_getSegmentationData","segmentation","volumesTimePointsCache","servicesManager","displaySetService","segmentationService","viewportGridService","services","volumeCacheKey","volumeId","getActiveDisplaySets","find","displaySet","anInstance","instances","FrameReferenceTime","NumberOfTimeSlices","displaySetInstanceUID","key","cs","_volumeCache","includes","referencedDynamicVolume","getVolume","StudyInstanceUID","StudyDescription","segmentationVolume","getLabelmapVolume","segmentationId","maskVolumeId","timeData","_","dynamicVolume","getDataInTime","pixelCount","length","viewportId","getActiveViewportId","color","getSegmentColor","hexColor","timePointsData","get","timePointsTags","unit","timePointsTagNames","Object","keys","timePointsUnit","i","tagName","curTimePoints","concatTagNames","join","Error","convertedTimePoints","validUnits","divisors","currentUnitIndex","indexOf","divisor","newDivisor","filter","timePoint","map","_convertTimePointsUnit","_getTimePointsData","set","timepointsCount","chartSeriesData","average","acc","cur","chartData","series","label","points","axis","x","y","_getInstanceFromSegmentations","segmentations","WeakMap","segmentationsData","date","seriesDate","time","seriesTime","now","Date","getFullYear","getUTCMonth","slice","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_getDateTimeStr","allSeries","curSegData","instance","SOPClassUID","Modality","SOPInstanceUID","SeriesDate","SeriesTime","SeriesInstanceUID","SeriesNumber","SeriesDescription","seriesMetadata","updateSegmentationsChartDisplaySet","getSegmentations","addSeriesMetadata","addInstances","Enums","Labelmap","commandsModule","commandsManager","actions","importedActions","getDynamic4DDisplaySet","TemporalPositionIdentifier","getComputedDisplaySets","getDisplaySetCache","values","isDerived","exportTimeReportCSV","config","options","summaryStats","dynamic4DDisplaySet","cache","csv","calculateStandardDeviation","data","n","mean","value","variance","Math","sqrt","push","PatientID","StudyDate","forEach","ijkCoords","headers","maxLength","numTimePoints","t","min","minIJK","max","maxIJK","std","numVoxels","timeIndex","voxelValues","sum","minValue","Infinity","maxValue","minIndex","maxIndex","voxelIndex","row","csvContent","filename","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","swapDynamicWithComputedDisplaySet","computedDisplaySet","displaySetCache","cachedDisplaySetKeys","viewports","getState","viewportsToUpdate","viewport","viewportOptions","displaySetInstanceUIDs","displaySetInstanceUIDIndex","newViewport","initialImageOptions","viewportType","orientation","background","run","swapComputedWithDynamicDisplaySet","dynamicDisplaySet","computed4DDisplaySet","createNewLabelMapForDynamicVolume","async","activeViewportId","dynamic4DDisplaySetInstanceUID","referenceDisplaySet","cachedDisplaySets","referenceDisplaySetUID","getDisplaySetByUID","createLabelmapForDisplaySet","firstViewport","next","addSegmentationRepresentation","definitions","commandFn","storeContexts","defaultContext","toUpperCaseString","String","toUpperCase","Header","title","tooltip","React","className","Tooltip","TooltipTrigger","asChild","Icons","ByName","name","TooltipContent","sideOffset","DynamicVolumeControls","isPlaying","onPlayPauseChange","fps","onFpsChange","minFps","maxFps","currentDimensionGroupNumber","onDimensionGroupChange","numDimensionGroups","onGenerate","onDoubleRangeChange","rangeValues","onDynamicClick","computedView","setComputedView","useState","computeViewMode","setComputeViewMode","SUM","PanelSection","defaultOpen","Content","Tabs","onValueChange","isComputed","TabsList","TabsTrigger","DimensionGroupControls","AVERAGE","SUBTRACT","Numeric","Container","mode","onChange","DoubleRange","showNumberInputs","Button","variant","size","onClick","handleGenerate","console","error","step","NumberStepper","direction","Label","SOPClassHandlerId","PanelGenerateImage","cornerstoneViewportService","isCineEnabled","cineService","useCine","useViewportGrid","dimensionGroupRange","setDimensionGroupRange","setComputedDisplaySet","setDynamicVolume","frameRate","setFrameRate","setIsPlaying","dimensionGroupNumberRendered","setDimensionGroupNumberRendered","displayingComputed","setDisplayingComputed","uuidComputedVolume","useRef","csUtils","uuidDynamicVolume","computedVolumeId","current","renderGeneratedImage","runCommand","useEffect","viewportDataChangedEvt","EVENTS","VIEWPORT_DATA_CHANGED","cineStateChangedEvt","CINE_STATE_CHANGED","unsubscribe","unsubscribeViewportData","subscribe","evtDetails","viewportData","volumeData","isDynamicVolume","newRange","unsubscribeCineState","evt","DYNAMIC_VOLUME_DIMENSION_GROUP_CHANGED","callback","detail","dimensionGroupNumber","eventTarget","addEventListener","removeEventListener","displaySetUIDs","getDisplaySetsUIDsForViewport","dynamicVolumeDisplaySet","getVolumes","handlePlay","viewportInfo","getViewportInfo","element","playClip","framesPerSecond","handleStop","stopClip","newFrameRate","operationName","dynamicVolumeId","computedVolume","volumeLoader","start","end","frameNumbers","dimensionGroupNumbers","targetVolume","cstUtils","getRenderingEngine","render","volumeLoaderSchema","split","metadata","isMultiFrame","numImageFrames","uid","madeInClient","FrameOfReferenceUID","tab","useSegmentations","Export","extensionManager","configuration","iconName","iconLabel","component","wrappedDynamicDataPanel","DynamicDataPanel","wrappedDynamicSegmentation","Toolbox","buttonSectionId","PanelSegmentation","DynamicExport","DEFAULT_COLORMAP","toolGroupIds","getPTOptions","colormap","voiInverted","blendMode","voi","windowWidth","windowCenter","getPTViewports","ptOptionsParams","opacity","toolGroupId","preset","syncGroups","source","target","displaySets","getFusionViewports","syncInvertState","matchingRules","defaultProtocol","locked","hasUpdatedPriorsInformation","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","numberOfPriorsReferenced","displaySetSelectors","defaultDisplaySetId","imageMatchingRules","seriesMatchingRules","greaterThan","ctDisplaySet","equals","required","ptDisplaySet","weight","doesNotContain","chartDisplaySet","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","width","height","skipLoading","dynamicVolumeExtension","preRegistration","setMaxCacheSize","getPanelModule","getHangingProtocolModule","protocol","getCommandsModule"],"sourceRoot":""}