{"version":3,"file":"544.bundle.15dd31ede2fb8f842f21.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/listComponentGenerator.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/utils/cleanDenaturalizedDataset.ts","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopyViewport.tsx","webpack:///../../../extensions/dicom-microscopy/src/utils/dicomWebClient.ts"],"sourcesContent":["const listComponentGenerator = props => {\n  const { list, itemGenerator } = props;\n  if (!list) {\n    return;\n  }\n  return list.map(item => {\n    if (!item) {\n      return;\n    }\n    const generator = item.generator || itemGenerator;\n    if (!generator) {\n      throw new Error(`No generator for ${item}`);\n    }\n    return generator({ ...props, item });\n  });\n};\n\nexport default listComponentGenerator;\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport listComponentGenerator from './listComponentGenerator';\nimport './ViewportOverlay.css';\nimport { formatDICOMDate, formatDICOMTime, formatNumberPrecision, formatPN } from './utils';\n\ninterface OverlayItem {\n  id: string;\n  title: string;\n  value?: (props: any) => string;\n  condition?: (props: any) => boolean;\n  contents?: (props: any) => { className: string; value: any };\n  generator?: (props: any) => any;\n}\n\n/**\n *\n * @param {*} config is a configuration object that defines four lists of elements,\n * one topLeft, topRight, bottomLeft, bottomRight contents.\n * @param {*} extensionManager is used to load the image data.\n * @returns\n */\nexport const generateFromConfig = ({\n  topLeft = [],\n  topRight = [],\n  bottomLeft = [],\n  bottomRight = [],\n  itemGenerator = () => {},\n}: {\n  topLeft?: OverlayItem[];\n  topRight?: OverlayItem[];\n  bottomLeft?: OverlayItem[];\n  bottomRight?: OverlayItem[];\n  itemGenerator?: (props: any) => any;\n}) => {\n  return (props: any) => {\n    const topLeftClass = 'top-viewport left-viewport text-primary-light';\n    const topRightClass = 'top-viewport right-viewport-scrollbar text-primary-light';\n    const bottomRightClass = 'bottom-viewport right-viewport-scrollbar text-primary-light';\n    const bottomLeftClass = 'bottom-viewport left-viewport text-primary-light';\n    const overlay = 'absolute pointer-events-none microscopy-viewport-overlay';\n\n    return (\n      <>\n        {topLeft && topLeft.length > 0 && (\n          <div data-cy={'viewport-overlay-top-left'} className={classnames(overlay, topLeftClass)}>\n            {listComponentGenerator({ ...props, list: topLeft, itemGenerator })}\n          </div>\n        )}\n        {topRight && topRight.length > 0 && (\n          <div\n            data-cy={'viewport-overlay-top-right'}\n            className={classnames(overlay, topRightClass)}\n          >\n            {listComponentGenerator({\n              ...props,\n              list: topRight,\n              itemGenerator,\n            })}\n          </div>\n        )}\n        {bottomRight && bottomRight.length > 0 && (\n          <div\n            data-cy={'viewport-overlay-bottom-right'}\n            className={classnames(overlay, bottomRightClass)}\n          >\n            {listComponentGenerator({\n              ...props,\n              list: bottomRight,\n              itemGenerator,\n            })}\n          </div>\n        )}\n        {bottomLeft && bottomLeft.length > 0 && (\n          <div\n            data-cy={'viewport-overlay-bottom-left'}\n            className={classnames(overlay, bottomLeftClass)}\n          >\n            {listComponentGenerator({\n              ...props,\n              list: bottomLeft,\n              itemGenerator,\n            })}\n          </div>\n        )}\n      </>\n    );\n  };\n};\n\nconst itemGenerator = (props: any) => {\n  const { item } = props;\n  const { title, value: valueFunc, condition, contents } = item;\n  props.image = { ...props.image, ...props.metadata };\n  props.formatDate = formatDICOMDate;\n  props.formatTime = formatDICOMTime;\n  props.formatPN = formatPN;\n  props.formatNumberPrecision = formatNumberPrecision;\n  if (condition && !condition(props)) {\n    return null;\n  }\n  if (!contents && !valueFunc) {\n    return null;\n  }\n  const value = valueFunc && valueFunc(props);\n  const contentsValue = (contents && contents(props)) || [\n    { className: 'mr-1', value: title },\n    { classname: 'mr-1 font-light', value },\n  ];\n\n  return (\n    <div key={item.id} className=\"flex flex-row\">\n      {contentsValue.map((content, idx) => (\n        <span key={idx} className={content.className}>\n          {content.value}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default generateFromConfig({});\n","import { dicomWebUtils } from '@ohif/extension-default';\n\nfunction isPrimitive(v: any) {\n  return !(typeof v == 'object' || Array.isArray(v));\n}\n\nconst vrNumerics = [\n  'DS',\n  'FL',\n  'FD',\n  'IS',\n  'OD',\n  'OF',\n  'OL',\n  'OV',\n  'SL',\n  'SS',\n  'SV',\n  'UL',\n  'US',\n  'UV',\n];\n\n/**\n * Specialized for DICOM JSON format dataset cleaning.\n * @param obj\n * @returns\n */\nexport default function cleanDenaturalizedDataset(\n  obj: any,\n  options: {\n    StudyInstanceUID: string;\n    SeriesInstanceUID: string;\n    dataSourceConfig: unknown;\n  }\n): any {\n  if (Array.isArray(obj)) {\n    const newAry = obj.map(o => (isPrimitive(o) ? o : cleanDenaturalizedDataset(o, options)));\n    return newAry;\n  } else if (isPrimitive(obj)) {\n    return obj;\n  } else {\n    Object.keys(obj).forEach(key => {\n      if (obj[key].Value === null && obj[key].vr) {\n        delete obj[key].Value;\n      } else if (Array.isArray(obj[key].Value) && obj[key].vr) {\n        if (obj[key].Value.length === 1 && obj[key].Value[0].BulkDataURI) {\n          dicomWebUtils.fixBulkDataURI(obj[key].Value[0], options, options.dataSourceConfig);\n\n          obj[key].BulkDataURI = obj[key].Value[0].BulkDataURI;\n\n          // prevent mixed-content blockage\n          if (window.location.protocol === 'https:' && obj[key].BulkDataURI.startsWith('http:')) {\n            obj[key].BulkDataURI = obj[key].BulkDataURI.replace('http:', 'https:');\n          }\n          delete obj[key].Value;\n        } else if (vrNumerics.includes(obj[key].vr)) {\n          obj[key].Value = obj[key].Value.map(v => +v);\n        } else {\n          obj[key].Value = obj[key].Value.map(entry => cleanDenaturalizedDataset(entry, options));\n        }\n      }\n    });\n    return obj;\n  }\n}\n","import React, { Component } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport { LoadingIndicatorProgress } from '@ohif/ui';\n\nimport './DicomMicroscopyViewport.css';\nimport ViewportOverlay from './components/ViewportOverlay';\nimport getDicomWebClient from './utils/dicomWebClient';\nimport dcmjs from 'dcmjs';\nimport cleanDenaturalizedDataset from './utils/cleanDenaturalizedDataset';\nimport MicroscopyService from './services/MicroscopyService';\n\nclass DicomMicroscopyViewport extends Component {\n  state = {\n    error: null as any,\n    isLoaded: false,\n  };\n\n  microscopyService: MicroscopyService;\n  viewer: any = null; // dicom-microscopy-viewer instance\n  managedViewer: any = null; // managed wrapper of microscopy-dicom extension\n\n  container = React.createRef();\n  overlayElement = React.createRef();\n  debouncedResize: () => any;\n\n  constructor(props: any) {\n    super(props);\n\n    const { microscopyService } = this.props.servicesManager.services;\n    this.microscopyService = microscopyService;\n    this.debouncedResize = debounce(() => {\n      if (this.viewer) {\n        this.viewer.resize();\n      }\n    }, 100);\n  }\n\n  static propTypes = {\n    viewportData: PropTypes.object,\n    activeViewportId: PropTypes.string,\n    setViewportActive: PropTypes.func,\n\n    // props from OHIF Viewport Grid\n    displaySets: PropTypes.array,\n    viewportId: PropTypes.string,\n    viewportLabel: PropTypes.string,\n    dataSource: PropTypes.object,\n    viewportOptions: PropTypes.object,\n    displaySetOptions: PropTypes.array,\n\n    // other props from wrapping component\n    servicesManager: PropTypes.object,\n    extensionManager: PropTypes.object,\n    commandsManager: PropTypes.object,\n  };\n\n  /**\n   * Get the nearest ROI from the mouse click point\n   *\n   * @param event\n   * @param autoselect\n   * @returns\n   */\n  getNearbyROI(event: Event, autoselect = true) {\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    const _drawingSource = symbols.find(p => p.description === 'drawingSource');\n    const _pyramid = symbols.find(p => p.description === 'pyramid');\n    const _map = symbols.find(p => p.description === 'map');\n    const _affine = symbols.find(p => p.description === 'affine');\n\n    const feature = this.viewer[_drawingSource].getClosestFeatureToCoordinate(\n      this.viewer[_map].getEventCoordinate(event)\n    );\n\n    if (!feature) {\n      return null;\n    }\n\n    const roiAnnotation = this.viewer._getROIFromFeature(\n      feature,\n      this.viewer[_pyramid].metadata,\n      this.viewer[_affine]\n    );\n    if (roiAnnotation && autoselect) {\n      this.microscopyService.selectAnnotation(roiAnnotation);\n    }\n    return roiAnnotation;\n  }\n\n  // install the microscopy renderer into the web page.\n  // you should only do this once.\n  async installOpenLayersRenderer(container, displaySet) {\n    const loadViewer = async metadata => {\n      const { viewer: DicomMicroscopyViewer, metadata: metadataUtils } = await import(\n        /* webpackChunkName: \"dicom-microscopy-viewer\" */ 'dicom-microscopy-viewer'\n      );\n      const microscopyViewer = DicomMicroscopyViewer.VolumeImageViewer;\n\n      const client = getDicomWebClient({\n        extensionManager: this.props.extensionManager,\n        servicesManager: this.props.servicesManager,\n      });\n\n      // Parse, format, and filter metadata\n      const volumeImages: any[] = [];\n\n      /**\n       * This block of code is the original way of loading DICOM into dicom-microscopy-viewer\n       * as in their documentation.\n       * But we have the metadata already loaded by our loaders.\n       * As the metadata for microscopy DIOM files tends to be big and we don't\n       * want to double load it, below we have the mechanism to reconstruct the\n       * DICOM JSON structure (denaturalized) from naturalized metadata.\n       * (NOTE: Our loaders cache only naturalized metadata, not the denaturalized.)\n       */\n      // {\n      //   const retrieveOptions = {\n      //     studyInstanceUID: metadata[0].StudyInstanceUID,\n      //     seriesInstanceUID: metadata[0].SeriesInstanceUID,\n      //   };\n      //   metadata = await client.retrieveSeriesMetadata(retrieveOptions);\n      //   // Parse, format, and filter metadata\n      //   metadata.forEach(m => {\n      //     if (\n      //       volumeImages.length > 0 &&\n      //       m['00200052'].Value[0] != volumeImages[0].FrameOfReferenceUID\n      //     ) {\n      //       console.warn(\n      //         'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\n      //         m['00200052'].Value[0]\n      //       );\n      //       m['00200052'].Value[0] = volumeImages[0].FrameOfReferenceUID;\n      //     }\n      //     NOTE: depending on different data source, image.ImageType sometimes\n      //     is a string, not a string array.\n      //     m['00080008'] = transformImageTypeUnnaturalized(m['00080008']);\n\n      //     const image = new metadataUtils.VLWholeSlideMicroscopyImage({\n      //       metadata: m,\n      //     });\n      //     const imageFlavor = image.ImageType[2];\n      //     if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\n      //       volumeImages.push(image);\n      //     }\n      //   });\n      // }\n\n      metadata.forEach(m => {\n        // NOTE: depending on different data source, image.ImageType sometimes\n        //    is a string, not a string array.\n        m.ImageType = typeof m.ImageType === 'string' ? m.ImageType.split('\\\\') : m.ImageType;\n\n        const inst = cleanDenaturalizedDataset(\n          dcmjs.data.DicomMetaDictionary.denaturalizeDataset(m),\n          {\n            StudyInstanceUID: m.StudyInstanceUID,\n            SeriesInstanceUID: m.SeriesInstanceUID,\n            dataSourceConfig: this.props.dataSource.getConfig(),\n          }\n        );\n        if (!inst['00480105']) {\n          // Optical Path Sequence, no OpticalPathIdentifier?\n          // NOTE: this is actually a not-well formatted DICOM VL Whole Slide Microscopy Image.\n          inst['00480105'] = {\n            vr: 'SQ',\n            Value: [\n              {\n                '00480106': {\n                  vr: 'SH',\n                  Value: ['1'],\n                },\n              },\n            ],\n          };\n        }\n        const image = new metadataUtils.VLWholeSlideMicroscopyImage({\n          metadata: inst,\n        });\n\n        const imageFlavor = image.ImageType[2];\n        if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\n          volumeImages.push(image);\n        }\n      });\n\n      // format metadata for microscopy-viewer\n      const options = {\n        client,\n        metadata: volumeImages,\n        retrieveRendered: false,\n        controls: ['overview', 'position'],\n      };\n\n      this.viewer = new microscopyViewer(options);\n\n      if (this.overlayElement && this.overlayElement.current && this.viewer.addViewportOverlay) {\n        this.viewer.addViewportOverlay({\n          element: this.overlayElement.current,\n          coordinates: [0, 0], // TODO: dicom-microscopy-viewer documentation says this can be false to be automatically, but it is not.\n          navigate: true,\n          className: 'OpenLayersOverlay',\n        });\n      }\n\n      this.viewer.render({ container });\n\n      const { StudyInstanceUID, SeriesInstanceUID } = displaySet;\n\n      this.managedViewer = this.microscopyService.addViewer(\n        this.viewer,\n        this.props.viewportId,\n        container,\n        StudyInstanceUID,\n        SeriesInstanceUID\n      );\n\n      this.managedViewer.addContextMenuCallback((event: Event) => {\n        // TODO: refactor this after Bill's changes on ContextMenu feature get merged\n        // const roiAnnotationNearBy = this.getNearbyROI(event);\n      });\n    };\n\n    this.microscopyService.clearAnnotations();\n\n    let smDisplaySet = displaySet;\n    if (displaySet.Modality === 'SR') {\n      // for SR displaySet, let's load the actual image displaySet\n      smDisplaySet = displaySet.getSourceDisplaySet();\n    }\n    console.log('Loading viewer metadata', smDisplaySet);\n\n    await loadViewer(smDisplaySet.others);\n\n    if (displaySet.Modality === 'SR') {\n      displaySet.load(smDisplaySet);\n    }\n  }\n\n  componentDidMount() {\n    const { displaySets, viewportOptions } = this.props;\n    // Todo-rename: this is always getting the 0\n    const displaySet = displaySets[0];\n    this.installOpenLayersRenderer(this.container.current, displaySet).then(() => {\n      this.setState({ isLoaded: true });\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<{}>, snapshot?: any): void {\n    if (this.managedViewer && prevProps.displaySets !== this.props.displaySets) {\n      const { displaySets } = this.props;\n      const displaySet = displaySets[0];\n\n      this.microscopyService.clearAnnotations();\n\n      // loading SR\n      if (displaySet.Modality === 'SR') {\n        const referencedDisplaySet = displaySet.getSourceDisplaySet();\n        displaySet.load(referencedDisplaySet);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.microscopyService.removeViewer(this.viewer);\n  }\n\n  setViewportActiveHandler = () => {\n    const { setViewportActive, viewportId, activeViewportId } = this.props;\n\n    if (viewportId !== activeViewportId) {\n      setViewportActive(viewportId);\n    }\n  };\n\n  render() {\n    const style = { width: '100%', height: '100%' };\n    const displaySet = this.props.displaySets[0];\n    const firstInstance = displaySet.firstInstance || displaySet.instance;\n\n    return (\n      <div\n        className={'DicomMicroscopyViewer'}\n        style={style}\n        onClick={this.setViewportActiveHandler}\n      >\n        <div style={{ ...style, display: 'none' }}>\n          <div style={{ ...style }} ref={this.overlayElement}>\n            <div style={{ position: 'relative', height: '100%', width: '100%' }}>\n              {displaySet && firstInstance.imageId && (\n                <ViewportOverlay\n                  displaySet={displaySet}\n                  instance={displaySet.instance}\n                  metadata={displaySet.metadata}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n        {ReactResizeDetector && (\n          <ReactResizeDetector handleWidth handleHeight onResize={this.onWindowResize} />\n        )}\n        {this.state.error ? (\n          <h2>{JSON.stringify(this.state.error)}</h2>\n        ) : (\n          <div style={style} ref={this.container} />\n        )}\n        {this.state.isLoaded ? null : (\n          <LoadingIndicatorProgress className={'h-full w-full bg-black'} />\n        )}\n      </div>\n    );\n  }\n\n  onWindowResize = () => {\n    this.debouncedResize();\n  };\n}\n\nexport default DicomMicroscopyViewport;\n","import { errorHandler, DicomMetadataStore } from '@ohif/core';\nimport { StaticWadoClient } from '@ohif/extension-default';\n\n/**\n * create a DICOMwebClient object to be used by Dicom Microscopy Viewer\n *\n * Referenced the code from `/extensions/default/src/DicomWebDataSource/index.js`\n *\n * @param param0\n * @returns\n */\nexport default function getDicomWebClient({ extensionManager, servicesManager }) {\n  const dataSourceConfig = window.config.dataSources.find(\n    ds => ds.sourceName === extensionManager.activeDataSource\n  );\n  const { userAuthenticationService } = servicesManager.services;\n\n  const { wadoRoot, staticWado, singlepart } = dataSourceConfig.configuration;\n\n  const wadoConfig = {\n    url: wadoRoot || '/dicomlocal',\n    staticWado,\n    singlepart,\n    headers: userAuthenticationService.getAuthorizationHeader(),\n    errorInterceptor: errorHandler.getHTTPErrorHandler(),\n  };\n\n  const client = new StaticWadoClient(wadoConfig);\n  client.wadoURL = wadoConfig.url;\n\n  if (extensionManager.activeDataSource === 'dicomlocal') {\n    /**\n     * For local data source, override the retrieveInstanceFrames() method of the\n     * dicomweb-client to retrieve image data from memory cached metadata.\n     * Other methods of the client doesn't matter, as we are feeding the DMV\n     * with the series metadata already.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @param {String} options.frameNumbers - One-based indices of Frame Items\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\n     */\n    //\n    client.retrieveInstanceFrames = async options => {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of instance frames');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of instance frames');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of instance frames');\n      }\n      if (!('frameNumbers' in options)) {\n        throw new Error('frame numbers are required for retrieval of instance frames');\n      }\n      console.log(\n        `retrieve frames ${options.frameNumbers.toString()} of instance ${options.sopInstanceUID}`\n      );\n\n      const instance = DicomMetadataStore.getInstance(\n        options.studyInstanceUID,\n        options.seriesInstanceUID,\n        options.sopInstanceUID\n      );\n\n      const frameNumbers = Array.isArray(options.frameNumbers)\n        ? options.frameNumbers\n        : options.frameNumbers.split(',');\n\n      return frameNumbers.map(fr =>\n        Array.isArray(instance.PixelData) ? instance.PixelData[+fr - 1] : instance.PixelData\n      );\n    };\n  }\n\n  return client;\n}\n"],"names":["props","list","itemGenerator","map","item","generator","Error","generateFromConfig","topLeft","topRight","bottomLeft","bottomRight","overlay","React","length","className","classnames","listComponentGenerator","isPrimitive","v","Array","isArray","vrNumerics","cleanDenaturalizedDataset","obj","options","o","Object","keys","forEach","key","Value","vr","BulkDataURI","dicomWebUtils","dataSourceConfig","window","location","protocol","startsWith","replace","includes","entry","DicomMicroscopyViewport","Component","constructor","super","state","error","isLoaded","microscopyService","viewer","managedViewer","container","overlayElement","debouncedResize","setViewportActiveHandler","setViewportActive","viewportId","activeViewportId","this","onWindowResize","servicesManager","services","debounce","resize","getNearbyROI","event","autoselect","symbols","getOwnPropertySymbols","_drawingSource","find","p","description","_pyramid","_map","_affine","feature","getClosestFeatureToCoordinate","getEventCoordinate","roiAnnotation","_getROIFromFeature","metadata","selectAnnotation","installOpenLayersRenderer","displaySet","clearAnnotations","smDisplaySet","Modality","getSourceDisplaySet","console","log","async","DicomMicroscopyViewer","metadataUtils","microscopyViewer","VolumeImageViewer","client","extensionManager","config","dataSources","ds","sourceName","activeDataSource","userAuthenticationService","wadoRoot","staticWado","singlepart","configuration","wadoConfig","url","headers","getAuthorizationHeader","errorInterceptor","errorHandler","getHTTPErrorHandler","StaticWadoClient","wadoURL","retrieveInstanceFrames","frameNumbers","toString","sopInstanceUID","instance","DicomMetadataStore","getInstance","studyInstanceUID","seriesInstanceUID","split","fr","PixelData","getDicomWebClient","volumeImages","m","ImageType","inst","dcmjs","DicomMetaDictionary","denaturalizeDataset","StudyInstanceUID","SeriesInstanceUID","dataSource","getConfig","image","VLWholeSlideMicroscopyImage","imageFlavor","push","retrieveRendered","controls","current","addViewportOverlay","element","coordinates","navigate","render","addViewer","addContextMenuCallback","loadViewer","others","load","componentDidMount","displaySets","viewportOptions","then","setState","componentDidUpdate","prevProps","prevState","snapshot","referencedDisplaySet","componentWillUnmount","removeViewer","style","width","height","firstInstance","onClick","display","ref","position","imageId","ViewportOverlay","ReactResizeDetector","handleWidth","handleHeight","onResize","JSON","stringify","LoadingIndicatorProgress","propTypes","viewportData","PropTypes","viewportLabel","displaySetOptions","commandsManager"],"sourceRoot":""}