{"version":3,"file":"931.bundle.07e3fdf665ae0be6c508.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/combineDateTime.ts","webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/parseDA.ts","webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/parseTM.ts","webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/dateTimeToFullDateInterface.ts","webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/calculateSUVScalingFactors.ts","webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/calculateScanTimes.ts","webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/calculateStartTime.ts","webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/calculateSUVbsaScalingFactor.ts","webpack:///../../../node_modules/@cornerstonejs/calculate-suv/src/calculateSUVlbmScalingFactor.ts","webpack:///../../../node_modules/react-window/src/timer.js","webpack:///../../../node_modules/react-window/src/domHelpers.js","webpack:///../../../node_modules/react-window/src/createGridComponent.js","webpack:///../../../node_modules/react-window/src/createListComponent.js","webpack:///../../../node_modules/react-window/src/VariableSizeList.js"],"sourcesContent":["import { DateInterface } from './parseDA';\nimport { TimeInterface } from './parseTM';\n\n/**\n * Javascript object that handles dates and compute the time.\n *\n * @export\n * @class FullDateInterface\n */\nexport class FullDateInterface {\n  fullDate: string;\n\n  /**\n   * Creates an instance of FullDateInterface.\n   * @param {string} date formatted as yyyy-mm-ddTHH:MM:SS.FFFFFFZ\n   * @memberof FullDateInterface\n   */\n  constructor(date: string) {\n    this.fullDate = date;\n  }\n\n  /**\n   * returns time since 1 january 1970\n   *\n   * @returns {number} time in sec\n   * @memberof FullDateInterface\n   */\n  getTimeInSec(): number {\n    // yyyy-mm-ddTHH:MM:SS.FFFFFFZ\n    const dateString = this.fullDate.substring(0, 10);\n    const timeString = this.fullDate.substring(11, 28);\n\n    // yyyy-mm-dd\n    const yyyy = parseInt(dateString.substring(0, 4), 10);\n    const mm =\n      dateString.length >= 7\n        ? parseInt(dateString.substring(5, 7), 10)\n        : undefined;\n    const dd =\n      dateString.length >= 10\n        ? parseInt(dateString.substring(8, 10), 10)\n        : undefined;\n\n    if (\n      isNaN(yyyy) ||\n      (mm !== undefined && isNaN(mm)) ||\n      (dd !== undefined && isNaN(dd)) ||\n      yyyy > 3000 ||\n      (mm && (mm < 1 || mm > 12)) ||\n      (dd && (dd < 1 || dd > 31))\n    ) {\n      throw new Error(`invalid date '${dateString}'`);\n    }\n\n    const dateJS = new Date(`${dateString}T00:00:00.000000Z`);\n\n    // HHMMSS.FFFFFF\n    const HH = parseInt(timeString.substring(0, 2), 10);\n    const MM =\n      timeString.length >= 5\n        ? parseInt(timeString.substring(3, 5), 10)\n        : undefined;\n    const SS =\n      timeString.length >= 8\n        ? parseInt(timeString.substring(6, 8), 10)\n        : undefined;\n    const fractionalStr = timeString.substring(9, 15);\n    const FFFFFF = fractionalStr\n      ? parseInt(fractionalStr, 10) * Math.pow(10, -fractionalStr.length)\n      : undefined;\n\n    if (\n      isNaN(HH) ||\n      (MM !== undefined && isNaN(MM)) ||\n      (SS !== undefined && isNaN(SS)) ||\n      (FFFFFF !== undefined && isNaN(FFFFFF)) ||\n      HH < 0 ||\n      HH > 23 ||\n      (MM && (MM < 0 || MM > 59)) ||\n      (SS && (SS < 0 || SS > 59)) ||\n      (FFFFFF && (FFFFFF < 0 || FFFFFF > 999999))\n    ) {\n      throw new Error(`invalid time '${timeString}'`);\n    }\n\n    let timeInSec = dateJS.getTime() / 1000;\n\n    timeInSec += HH * 3600;\n    if (MM !== undefined) {\n      timeInSec += MM * 60;\n    }\n    if (SS !== undefined) {\n      timeInSec += SS;\n    }\n    if (FFFFFF !== undefined) {\n      timeInSec += FFFFFF;\n    }\n\n    return timeInSec;\n  }\n\n  /**\n   * returns time since 1 january 1970\n   *\n   * @returns {number} time in microsec\n   * @memberof FullDateInterface\n   */\n  getTimeInMicroSec(): number {\n    const timeInMicroSec = this.getTimeInSec() * 1e6;\n    return timeInMicroSec;\n  }\n}\n\nexport interface FullDateInterface {\n  date: string;\n}\n\n/**\n * Combines two javascript objects containing the date and time information\n *\n * @export\n * @param {DateInterface} date\n * @param {TimeInterface} time\n * @returns {FullDateInterface}\n */\nexport default function combineDateTime(\n  date: DateInterface,\n  time: TimeInterface\n): FullDateInterface {\n  const hours = `${time.hours || '00'}`.padStart(2, '0');\n  const minutes = `${time.minutes || '00'}`.padStart(2, '0');\n  const seconds = `${time.seconds || '00'}`.padStart(2, '0');\n  const month = `${date.month}`.padStart(2, '0');\n  const day = `${date.day}`.padStart(2, '0');\n  const fractionalSeconds = `${time.fractionalSeconds || '000000'}`.padEnd(\n    6,\n    '0'\n  );\n  const dateString = `${date.year}-${month}-${day}`;\n  const timeString = `T${hours}:${minutes}:${seconds}.${fractionalSeconds}Z`;\n  const fullDateString = `${dateString}${timeString}`;\n\n  return new FullDateInterface(fullDateString);\n}\n\nexport { combineDateTime };\n","/**\n * Check the number of days for a picked month and year\n * algorithm based on http://stackoverflow.com/questions/1433030/validate-number-of-days-in-a-given-month\n *\n * @param {number} m\n * @param {number} y\n * @returns {number} number of days\n */\nfunction daysInMonth(m: number, y: number): number {\n  // m is 0 indexed: 0-11\n  switch (m) {\n    case 2:\n      return (y % 4 === 0 && y % 100) || y % 400 === 0 ? 29 : 28;\n    case 9:\n    case 4:\n    case 6:\n    case 11:\n      return 30;\n    default:\n      return 31;\n  }\n}\n\n/**\n * Check if the date is valid\n *\n * @param {number} d\n * @param {number} m\n * @param {number} y\n * @returns {boolean} boolean result\n */\nfunction isValidDate(d: number, m: number, y: number): boolean {\n  // make year is a number\n  if (isNaN(y)) {\n    return false;\n  }\n\n  return m > 0 && m <= 12 && d > 0 && d <= daysInMonth(m, y);\n}\n\n/**\n * Javascript object with properties year, month and day\n *\n * @export\n * @interface DateInterface\n */\nexport interface DateInterface {\n  year: number;\n  month: number;\n  day: number;\n}\n\n/**\n * Parses a DA formatted string into a Javascript object\n * @param {string} date a string in the DA VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {DateInterface} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n */\nexport default function parseDA(date: string): DateInterface {\n  if (\n    date === undefined ||\n    date === null ||\n    date.length !== 8 ||\n    typeof date !== 'string'\n  ) {\n    throw new Error(`invalid DA '${date}'`);\n  }\n\n  const yyyy = parseInt(date.substring(0, 4), 10);\n  const mm = parseInt(date.substring(4, 6), 10);\n  const dd = parseInt(date.substring(6, 8), 10);\n\n  if (isValidDate(dd, mm, yyyy) !== true) {\n    throw new Error(`invalid DA '${date}'`);\n  }\n\n  return {\n    year: yyyy,\n    month: mm,\n    day: dd,\n  };\n}\n\nexport { parseDA };\n","/**\n * Javascript object with properties for hours, minutes, seconds and fractionalSeconds\n *\n * @export\n * @interface TimeInterface\n */\nexport interface TimeInterface {\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  fractionalSeconds?: number;\n}\n\n/**\n * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n * @param {string} time - a string in the TM VR format\n * @returns {string} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n */\nexport default function parseTM(time: string): TimeInterface {\n  if (\n    time === null ||\n    time === undefined ||\n    time.length < 2 ||\n    typeof time !== 'string'\n  ) {\n    // must at least have HH\n    throw new Error(`invalid TM '${time}'`);\n  }\n\n  // 0123456789\n  // HHMMSS.FFFFFF\n  const hh = parseInt(time.substring(0, 2), 10);\n  const mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n  const ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n  const fractionalStr = time.length >= 8 ? time.substring(7, 13) : undefined;\n  const ffffff = fractionalStr\n    ? parseInt(fractionalStr, 10) * Math.pow(10, 6 - fractionalStr.length)\n    : undefined;\n\n  if (\n    isNaN(hh) ||\n    (mm !== undefined && isNaN(mm)) ||\n    (ss !== undefined && isNaN(ss)) ||\n    (ffffff !== undefined && isNaN(ffffff)) ||\n    hh < 0 ||\n    hh > 23 ||\n    (mm && (mm < 0 || mm > 59)) ||\n    (ss && (ss < 0 || ss > 59)) ||\n    (ffffff && (ffffff < 0 || ffffff > 999999))\n  ) {\n    throw new Error(`invalid TM '${time}'`);\n  }\n\n  return {\n    hours: hh,\n    minutes: mm,\n    seconds: ss,\n    fractionalSeconds: ffffff,\n  };\n}\n\nexport { parseTM };\n","import combineDateTime, { FullDateInterface } from './combineDateTime';\nimport parseDA from './parseDA';\nimport parseTM from './parseTM';\n\n/**\n * Utility to create a FullDateInterface object given a string formatted as yyyy-mm-ddTHH:MM:SS.FFFFFFZ\n *\n * @export\n * @param {string} dateTime\n * @returns {FullDateInterface}\n */\nexport default function dateTimeToFullDateInterface(\n  dateTime: string\n): FullDateInterface {\n  if (dateTime === undefined || dateTime === null) {\n    throw new Error('dateTimeToFullDateInterface : dateTime not defined.');\n  }\n\n  const date = parseDA(dateTime.substring(0, 8));\n  const time = parseTM(dateTime.substring(8));\n  return combineDateTime(date, time);\n}\n\nexport { dateTimeToFullDateInterface };\n","import { FullDateInterface } from './combineDateTime';\nimport { calculateScanTimes } from './calculateScanTimes';\nimport {\n  calculateSUVlbmJanmahasatianScalingFactor,\n  calculateSUVlbmScalingFactor,\n  SUVlbmScalingFactorInput,\n} from './calculateSUVlbmScalingFactor';\nimport {\n  calculateSUVbsaScalingFactor,\n  SUVbsaScalingFactorInput,\n} from './calculateSUVbsaScalingFactor';\nimport { calculateStartTime } from './calculateStartTime';\nimport { InstanceMetadata } from './types';\n\n/**\n * Javascript object containing the SUV and SUL factors.\n * TODO, the result property names may changes\n *\n * @interface ScalingFactorResult\n */\ninterface ScalingFactorResult {\n  suvbw: number;\n  suvlbm?: number;\n  suvlbmJanma?: number;\n  suvbsa?: number;\n}\n\n/**\n * The injected dose used to calculate SUV is corrected for the\n * decay that occurs between the time of injection and the start of the scan\n *\n * @param {InstanceMetadata[]} instances\n * @returns {number[]}\n */\nfunction calculateDecayCorrection(instances: InstanceMetadata[]): number[] {\n  const {\n    RadionuclideTotalDose,\n    RadionuclideHalfLife,\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate,\n  } = instances[0];\n\n  if (RadionuclideTotalDose === undefined || RadionuclideTotalDose === null) {\n    throw new Error(\n      'calculateDecayCorrection : RadionuclideTotalDose value not found.'\n    );\n  }\n\n  if (RadionuclideHalfLife === undefined || RadionuclideHalfLife === null) {\n    throw new Error(\n      'calculateDecayCorrection : RadionuclideHalfLife value not found.'\n    );\n  }\n\n  const scanTimes: FullDateInterface[] = calculateScanTimes(instances);\n  const startTime: FullDateInterface = calculateStartTime({\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate,\n  });\n\n  return instances.map((_, index) => {\n    const scanTime = scanTimes[index];\n    const decayTimeInSec: number =\n      scanTime.getTimeInSec() - startTime.getTimeInSec();\n    if (decayTimeInSec < 0) {\n      throw new Error('Decay time cannot be less than zero');\n    }\n\n    const decayedDose: number =\n      RadionuclideTotalDose *\n      Math.pow(2, -decayTimeInSec / RadionuclideHalfLife);\n\n    return 1 / decayedDose;\n  });\n}\n\n/**\n *\n * @param a Simple value or array of simple values\n * @param b Simple value or array of simple values\n * @returns boolean true if the values are equal.\n */\nconst deepEquals = (\n  a: string | number | any[],\n  b: string | number | any[]\n): boolean => {\n  return (\n    a === b ||\n    (Array.isArray(a) &&\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every((val, index) => val === b[index]))\n  );\n};\n\n/**\n * Calculate the SUV factor\n *\n * Note: Rescale Slope / Intercept must still be applied. These must be applied\n *       on a per-Frame basis, since some scanners may have different values per Frame.\n *\n * @export\n * @param {InstanceMetadata[]} instances\n * @returns {ScalingFactorResult[]}\n */\nexport default function calculateSUVScalingFactors(\n  instances: InstanceMetadata[]\n): ScalingFactorResult[] {\n  const {\n    CorrectedImage,\n    Units,\n    PhilipsPETPrivateGroup,\n    PatientWeight,\n    PatientSex,\n    PatientSize,\n  } = instances[0];\n\n  if (!CorrectedImage.includes('ATTN') || !CorrectedImage.includes('DECY')) {\n    throw new Error(\n      `CorrectedImage must contain \"ATTN\" and \"DECY\": ${CorrectedImage}`\n    );\n  }\n\n  // Sanity check that every instance provided has identical\n  // values for series-level metadata. If not, the provided\n  // data is invalid.\n  const isSingleSeries = instances.every(instance => {\n    return (\n      instance.Units === Units &&\n      deepEquals(instance.CorrectedImage, CorrectedImage) &&\n      instance.PatientWeight === PatientWeight &&\n      instance.PatientSex === PatientSex &&\n      instance.PatientSize === PatientSize &&\n      instance.RadionuclideHalfLife === instances[0].RadionuclideHalfLife &&\n      instance.RadionuclideTotalDose === instances[0].RadionuclideTotalDose &&\n      instance.DecayCorrection === instances[0].DecayCorrection &&\n      instance.SeriesDate === instances[0].SeriesDate &&\n      instance.SeriesTime === instances[0].SeriesTime\n    );\n  });\n\n  if (!isSingleSeries) {\n    throw new Error(\n      'The set of instances does not appear to come from one Series. Every instance must have identical values for series-level metadata properties'\n    );\n  }\n\n  // Treat null, undefined and zero as a missing PatientWeight.\n  if (!PatientWeight) {\n    throw new Error(\n      'PatientWeight value is missing. It is not possible to calculate the SUV factors'\n    );\n  }\n\n  let decayCorrectionArray: number[] = new Array(instances.length);\n  decayCorrectionArray = calculateDecayCorrection(instances);\n\n  let results: number[] = new Array(instances.length);\n  const weightInGrams: number = PatientWeight * 1000;\n\n  if (Units === 'BQML') {\n    results = decayCorrectionArray.map(function(value) {\n      return value * weightInGrams;\n    });\n  } else if (Units === 'CNTS') {\n    const hasValidSUVScaleFactor: boolean = instances.every(instance => {\n      return (\n        instance.PhilipsPETPrivateGroup &&\n        instance.PhilipsPETPrivateGroup?.SUVScaleFactor !== null &&\n        instance.PhilipsPETPrivateGroup?.SUVScaleFactor !== undefined &&\n        instance.PhilipsPETPrivateGroup?.SUVScaleFactor !== 0\n      );\n    });\n\n    const hasValidActivityConcentrationScaleFactor: boolean = instances.every(\n      instance => {\n        return (\n          instance.PhilipsPETPrivateGroup &&\n          !instance.PhilipsPETPrivateGroup?.SUVScaleFactor &&\n          instance.PhilipsPETPrivateGroup?.ActivityConcentrationScaleFactor !==\n            undefined &&\n          instance.PhilipsPETPrivateGroup?.ActivityConcentrationScaleFactor !==\n            0\n        );\n      }\n    );\n\n    //console.log(`hasValidSUVScaleFactor: ${hasValidSUVScaleFactor}`);\n    //console.log(`hasValidActivityConcentrationScaleFactor: ${hasValidActivityConcentrationScaleFactor}`);\n\n    if (hasValidSUVScaleFactor) {\n      results = instances.map(\n        // Added ! to tell Typescript that this can't be undefined, since we are testing it\n        // in the .every loop above.\n        instance => instance.PhilipsPETPrivateGroup!.SUVScaleFactor!\n      );\n    } else if (hasValidActivityConcentrationScaleFactor) {\n      // if (0x7053,0x1000) not present, but (0x7053,0x1009) is present, then (0x7053,0x1009) * Rescale Slope,\n      // scales pixels to Bq/ml, and proceed as if Units are BQML\n      results = instances.map((instance, index) => {\n        // Added ! to tell Typescript that this can't be undefined, since we are testing it\n        // in the .every loop above.\n        return (\n          instance.PhilipsPETPrivateGroup!.ActivityConcentrationScaleFactor! *\n          decayCorrectionArray[index] *\n          weightInGrams\n        );\n      });\n    } else {\n      throw new Error(\n        `Units are in CNTS, but PhilipsPETPrivateGroup has invalid values: ${JSON.stringify(\n          PhilipsPETPrivateGroup\n        )}`\n      );\n    }\n  } else if (Units === 'GML') {\n    // assumes that GML indicates SUVbw instead of SUVlbm\n    results.fill(1);\n  } else {\n    throw new Error(`Units has an invalid value: ${Units}`);\n  }\n\n  // get BSA\n  let suvbsaFactor: number | undefined;\n  if (PatientSize === null || PatientSize === undefined) {\n    console.warn(\n      'PatientSize value is missing. It is not possible to calculate the SUV bsa factors'\n    );\n  } else {\n    const sulInputs: SUVbsaScalingFactorInput = {\n      PatientWeight,\n      PatientSize,\n    };\n\n    suvbsaFactor = calculateSUVbsaScalingFactor(sulInputs);\n  }\n\n  // get LBM\n  let suvlbmFactor: number | undefined;\n  let suvlbmJenmaFactor: number | undefined;\n  if (PatientSize === null || PatientSize === undefined) {\n    console.warn(\n      'PatientSize value is missing. It is not possible to calculate the SUV lbm factors'\n    );\n  } else if (PatientSex === null || PatientSex === undefined) {\n    console.warn(\n      'PatientSex value is missing. It is not possible to calculate the SUV lbm factors'\n    );\n  } else {\n    const suvlbmInputs: SUVlbmScalingFactorInput = {\n      PatientWeight,\n      PatientSex,\n      PatientSize,\n    };\n\n    suvlbmFactor = calculateSUVlbmScalingFactor(suvlbmInputs);\n    suvlbmJenmaFactor = calculateSUVlbmJanmahasatianScalingFactor(suvlbmInputs);\n  }\n\n  return results.map(function(result, index) {\n    const factors: ScalingFactorResult = {\n      suvbw: result,\n    };\n\n    if (suvbsaFactor) {\n      // multiply for BSA\n      factors.suvbsa = decayCorrectionArray[index] * suvbsaFactor;\n    }\n\n    if (suvlbmFactor) {\n      // multiply for LBM\n      factors.suvlbm = decayCorrectionArray[index] * suvlbmFactor;\n    }\n\n    if (suvlbmJenmaFactor) {\n      factors.suvlbmJanma = decayCorrectionArray[index] * suvlbmJenmaFactor;\n    }\n\n    // factor formulaes taken from:\n    // https://www.medicalconnections.co.uk/kb/calculating-suv-from-pet-images/\n\n    return factors;\n  });\n}\n\nexport { calculateSUVScalingFactors };\n","import combineDateTime, { FullDateInterface } from './combineDateTime';\nimport parseDA, { DateInterface } from './parseDA';\nimport parseTM, { TimeInterface } from './parseTM';\nimport dateTimeToFullDateInterface from './dateTimeToFullDateInterface';\n\n/**\n * Javascript object with scan properties\n *\n * @interface InstanceMetadataForScanTimes\n */\ninterface InstanceMetadataForScanTimes {\n  SeriesDate: string;\n  SeriesTime: string;\n  AcquisitionDate: string;\n  AcquisitionTime: string;\n\n  GEPrivatePostInjectionDateTime?: string;\n\n  // Only used in Siemens case\n  RadionuclideHalfLife?: number; // \tRadionuclideHalfLife(0x0018,0x1075)\tin\tRadiopharmaceutical\tInformation\tSequence(0x0054,0x0016)\n  RadionuclideTotalDose?: number;\n  FrameReferenceTime?: number;\n  ActualFrameDuration?: number;\n}\n\n/**\n * Calculate the scan times\n *\n * @export\n * @param {InstanceMetadataForScanTimes[]} instances\n * @returns {FullDateInterface[]}\n */\nexport default function calculateScanTimes(\n  instances: InstanceMetadataForScanTimes[]\n): FullDateInterface[] {\n  const {\n    SeriesDate,\n    SeriesTime,\n    GEPrivatePostInjectionDateTime,\n  } = instances[0];\n  const results = new Array(instances.length);\n  const seriesDate: DateInterface = parseDA(SeriesDate);\n  const seriesTime: TimeInterface = parseTM(SeriesTime);\n  const seriesDateTime: FullDateInterface = combineDateTime(\n    seriesDate,\n    seriesTime\n  );\n\n  let earliestAcquisitionDateTime = new FullDateInterface(\n    `3000-01-01T00:00:00.000000Z`\n  );\n  let timeError = earliestAcquisitionDateTime.getTimeInSec();\n  instances.forEach(instance => {\n    const { AcquisitionDate, AcquisitionTime } = instance;\n\n    const acquisitionDate: DateInterface = parseDA(AcquisitionDate);\n    const acquisitionTime: TimeInterface = parseTM(AcquisitionTime);\n    const acquisitionDateTime: FullDateInterface = combineDateTime(\n      acquisitionDate,\n      acquisitionTime\n    );\n\n    if (earliestAcquisitionDateTime.getTimeInSec() >= timeError) {\n      earliestAcquisitionDateTime = acquisitionDateTime;\n    } else {\n      earliestAcquisitionDateTime =\n        acquisitionDateTime.getTimeInSec() <\n        earliestAcquisitionDateTime.getTimeInSec()\n          ? acquisitionDateTime\n          : earliestAcquisitionDateTime;\n    }\n  });\n\n  if (earliestAcquisitionDateTime.getTimeInSec() >= timeError) {\n    throw new Error('Earliest acquisition time or date could not be parsed.');\n  }\n\n  if (\n    seriesDateTime.getTimeInSec() <= earliestAcquisitionDateTime.getTimeInSec()\n  ) {\n    return results.fill(seriesDateTime);\n  } else {\n    if (GEPrivatePostInjectionDateTime) {\n      // GE Private scan\n      return results.fill(\n        dateTimeToFullDateInterface(GEPrivatePostInjectionDateTime)\n      );\n    } else {\n      /*const hasValidFrameTimes = instances.every(instance => {\n        return (\n          instance.FrameReferenceTime &&\n          instance.FrameReferenceTime > 0 &&\n          instance.ActualFrameDuration &&\n          instance.ActualFrameDuration > 0\n        );\n      });*/\n\n      // TODO: Temporarily commented out the checks and logic below to\n      // investigate the BQML_AC_DT_lessThan_S_DT_SIEMENS-instances case\n      //if (!hasValidFrameTimes) {\n      return results.fill(earliestAcquisitionDateTime);\n      //}\n\n      /* Siemens PETsyngo\t3.x\tmulti-injection logic\n      - backcompute\tfrom\tcenter\t(average\tcount\trate\t)\tof\ttime\twindow\tfor\tbed\tposition\t(frame)\tin\tseries (reliable\tin\tall\tcases)\n      - Acquisition\tDate\t(0x0008,0x0022)\tand\tTime\t(0x0008,0x0032) are\tthe\tstart\tof\tthe\tbed\tposition\t(frame)\n      - Frame\tReference\tTime\t(0x0054,0x1300) is\tthe\toffset\t(ms)\tfrom\tthe\tscan\tDate\tand\tTime we\twant\tto\tthe\taverage\tcount\trate\ttime\n      */\n      /*return instances.map(instance => {\n        const {\n          FrameReferenceTime,\n          ActualFrameDuration,\n          RadionuclideHalfLife,\n          AcquisitionDate,\n          AcquisitionTime,\n        } = instance;\n        // Some of these checks are only here because the compiler is complaining\n        // We could potentially use the ! operator instead\n        if (!FrameReferenceTime || FrameReferenceTime <= 0) {\n          throw new Error(\n            `FrameReferenceTime is invalid: ${FrameReferenceTime}`\n          );\n        }\n\n        if (!ActualFrameDuration || ActualFrameDuration <= 0) {\n          throw new Error(\n            `ActualFrameDuration is invalid: ${ActualFrameDuration}`\n          );\n        }\n\n        if (!RadionuclideHalfLife) {\n          throw new Error('RadionuclideHalfLife is required');\n        }\n\n        if (!AcquisitionDate) {\n          throw new Error('AcquisitionDate is required');\n        }\n\n        if (!AcquisitionTime) {\n          throw new Error('AcquisitionTime is required');\n        }\n\n        const acquisitionDate: DateInterface = parseDA(AcquisitionDate);\n        const acquisitionTime: TimeInterface = parseTM(AcquisitionTime);\n        const acquisitionDateTime: FullDateInterface = combineDateTime(\n          acquisitionDate,\n          acquisitionTime\n        );\n\n        const frameDurationInSec = ActualFrameDuration / 1000;\n        const decayConstant = Math.log(2) / RadionuclideHalfLife;\n        const decayDuringFrame = decayConstant * frameDurationInSec;\n        // TODO: double check this is correctly copied from QIBA pseudocode\n        const averageCountRateTimeWithinFrameInSec =\n          (1 / decayConstant) *\n          Math.log(decayDuringFrame / (1 - Math.exp(-decayConstant)));\n        const scanDateTimeAsNumber =\n          Number(acquisitionDateTime) -\n          FrameReferenceTime / 1000 +\n          averageCountRateTimeWithinFrameInSec;\n\n        const scanDate = new Date(scanDateTimeAsNumber);\n        console.log('SIEMENS PATH');\n        console.log(new Date(scanDateTimeAsNumber));\n        return scanDate;\n      });*/\n    }\n  }\n}\n\nexport { calculateScanTimes };\n","import combineDateTime, { FullDateInterface } from './combineDateTime';\nimport { parseDA, DateInterface } from './parseDA';\nimport { parseTM, TimeInterface } from './parseTM';\nimport dateTimeToFullDateInterface from './dateTimeToFullDateInterface';\n\n/**\n * Calculate start time\n *\n * @export\n * @param {{\n *   RadiopharmaceuticalStartDateTime?: string;\n *   RadiopharmaceuticalStartTime?: string;\n *   SeriesDate?: string;\n * }} input\n * @returns {FullDateInterface}\n */\nexport default function calculateStartTime(input: {\n  RadiopharmaceuticalStartDateTime?: string;\n  RadiopharmaceuticalStartTime?: string;\n  SeriesDate?: string;\n}): FullDateInterface {\n  const {\n    RadiopharmaceuticalStartDateTime,\n    RadiopharmaceuticalStartTime,\n    SeriesDate,\n  } = input;\n\n  let time: TimeInterface;\n  let date: DateInterface;\n  if (RadiopharmaceuticalStartDateTime) {\n    return dateTimeToFullDateInterface(RadiopharmaceuticalStartDateTime);\n  } else if (RadiopharmaceuticalStartTime && SeriesDate) {\n    // start Date\tis not explicit - assume\tsame as\tSeries Date;\n    // but consider\tspanning midnight\n    // TODO: do we need some logic to check if the scan went over midnight?\n    time = parseTM(RadiopharmaceuticalStartTime);\n    date = parseDA(SeriesDate);\n\n    return combineDateTime(date, time);\n  }\n\n  throw new Error(`Invalid input: ${input}`);\n}\n\nexport { calculateStartTime };\n","/**\n * Javascript object with patient properties size, sez, weight\n *\n * @export\n * @interface SUVbsaScalingFactorInput\n */\ninterface SUVbsaScalingFactorInput {\n  PatientSize: number;\n  PatientWeight: number;\n}\n\nfunction calculateSUVbsaScalingFactor(\n  inputs: SUVbsaScalingFactorInput\n): number {\n  const { PatientWeight, PatientSize } = inputs;\n\n  let BSA =\n    Math.pow(PatientWeight, 0.425) * Math.pow(PatientSize * 100, 0.725) * 71.84;\n\n  return BSA;\n}\n\nexport { calculateSUVbsaScalingFactor, SUVbsaScalingFactorInput };\n","/**\n * Javascript object with patient properties size, sez, weight\n *\n * @export\n * @interface SUVlbmScalingFactorInput\n */\ninterface SUVlbmScalingFactorInput {\n  PatientSize: number; // m\n  PatientSex: string; //'M' | 'F' | 'O';\n  PatientWeight: number; // Kg\n}\n\nfunction calculateSUVlbmScalingFactor(\n  inputs: SUVlbmScalingFactorInput\n): number {\n  const { PatientSex, PatientWeight, PatientSize } = inputs;\n\n  let LBM;\n  const weightSizeFactor = Math.pow(PatientWeight / (PatientSize * 100), 2);\n  // reference: https://www.medicalconnections.co.uk/kb/calculating-suv-from-pet-images/\n  if (PatientSex === 'F') {\n    LBM = 1.07 * PatientWeight - 148 * weightSizeFactor;\n  } else if (PatientSex === 'M') {\n    LBM = 1.1 * PatientWeight - 120 * weightSizeFactor;\n  } else {\n    throw new Error(`PatientSex is an invalid value: ${PatientSex}`);\n  }\n\n  return LBM * 1000; // convert in gr\n}\n\n/**\n * From https://link.springer.com/article/10.1007/s00259-014-2961-x\n * and https://link.springer.com/article/10.2165/00003088-200544100-00004\n * and\n * @param inputs\n * @returns\n */\nfunction calculateSUVlbmJanmahasatianScalingFactor(\n  inputs: SUVlbmScalingFactorInput\n): number {\n  const { PatientSex, PatientWeight, PatientSize } = inputs;\n\n  let LBM;\n  const bodyMassIndex = PatientWeight / Math.pow(PatientSize, 2);\n\n  if (PatientSex === 'F') {\n    LBM = (9270 * PatientWeight) / (8780 + 244 * bodyMassIndex);\n  } else if (PatientSex === 'M') {\n    LBM = (9270 * PatientWeight) / (6680 + 216 * bodyMassIndex);\n  } else {\n    throw new Error(`PatientSex is an invalid value: ${PatientSex}`);\n  }\n  return LBM * 1000; // convert in gr\n}\n\nexport {\n  calculateSUVlbmScalingFactor,\n  calculateSUVlbmJanmahasatianScalingFactor,\n  SUVlbmScalingFactorInput,\n};\n","// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount, layout } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n      let scrollbarSize = 0;\n      if (this._outerRef) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (layout === 'vertical') {\n          scrollbarSize =\n            outerRef.scrollWidth > outerRef.clientWidth\n              ? getScrollbarSize()\n              : 0;\n        } else {\n          scrollbarSize =\n            outerRef.scrollHeight > outerRef.clientHeight\n              ? getScrollbarSize()\n              : 0;\n        }\n      }\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps,\n          scrollbarSize\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size + scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n"],"names":["FullDateInterface","constructor","date","this","fullDate","getTimeInSec","dateString","substring","timeString","yyyy","parseInt","mm","length","undefined","dd","isNaN","Error","dateJS","Date","HH","MM","SS","fractionalStr","FFFFFF","Math","pow","timeInSec","getTime","getTimeInMicroSec","combineDateTime","time","hours","padStart","minutes","seconds","month","day","fractionalSeconds","padEnd","year","parseDA","d","m","y","daysInMonth","parseTM","hh","ss","ffffff","dateTimeToFullDateInterface","dateTime","calculateDecayCorrection","instances","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartDateTime","RadiopharmaceuticalStartTime","SeriesDate","scanTimes","SeriesTime","GEPrivatePostInjectionDateTime","results","Array","seriesDateTime","earliestAcquisitionDateTime","timeError","forEach","instance","AcquisitionDate","AcquisitionTime","acquisitionDateTime","fill","calculateScanTimes","startTime","input","calculateStartTime","map","_","index","decayTimeInSec","deepEquals","a","b","isArray","every","val","calculateSUVScalingFactors","CorrectedImage","Units","PhilipsPETPrivateGroup","PatientWeight","PatientSex","PatientSize","includes","DecayCorrection","decayCorrectionArray","weightInGrams","value","hasValidSUVScaleFactor","SUVScaleFactor","hasValidActivityConcentrationScaleFactor","ActivityConcentrationScaleFactor","JSON","stringify","suvbsaFactor","suvlbmFactor","suvlbmJenmaFactor","console","warn","inputs","calculateSUVbsaScalingFactor","suvlbmInputs","LBM","weightSizeFactor","calculateSUVlbmScalingFactor","bodyMassIndex","calculateSUVlbmJanmahasatianScalingFactor","result","factors","suvbw","suvbsa","suvlbm","suvlbmJanma","now","performance","cancelTimeout","timeoutID","cancelAnimationFrame","id","requestTimeout","callback","delay","start","requestAnimationFrame","tick","call","size","getScrollbarSize","recalculate","div","document","createElement","style","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","cachedRTLResult","getRTLOffsetType","outerDiv","outerStyle","direction","innerDiv","innerStyle","scrollLeft","defaultItemKey","data","createListComponent","getItemOffset","getEstimatedTotalSize","getItemSize","getOffsetForIndexAndAlignment","getStartIndexForOffset","getStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","props","_instanceProps","_outerRef","_resetIsScrollingTimeoutId","state","isScrolling","scrollDirection","scrollOffset","initialScrollOffset","scrollUpdateWasRequested","_callOnItemsRendered","memoizeOne","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","onItemsRendered","_callOnScroll","onScroll","_getItemStyle","itemSize","layout","itemStyleCache","_getItemStyleCache","hasOwnProperty","offset","isHorizontal","isRtl","offsetHorizontal","position","left","right","top","__","___","_onScrollHorizontal","event","currentTarget","scrollWidth","setState","prevState","max","min","_resetIsScrollingDebounced","_onScrollVertical","clientHeight","scrollHeight","scrollTop","_outerRefSetter","ref","outerRef","current","_resetIsScrolling","getDerivedStateFromProps","nextProps","validateSharedProps","scrollTo","scrollToItem","align","itemCount","scrollbarSize","componentDidMount","_callPropsCallbacks","componentDidUpdate","componentWillUnmount","render","children","className","innerRef","innerElementType","innerTagName","itemData","itemKey","outerElementType","outerTagName","useIsScrolling","_getRangeToRender","startIndex","stopIndex","items","push","key","estimatedTotalSize","WebkitOverflowScrolling","willChange","pointerEvents","overscanCount","overscanBackward","overscanForward","PureComponent","defaultProps","getItemMetadata","instanceProps","itemMetadataMap","lastMeasuredIndex","itemMetadata","i","findNearestItemBinarySearch","high","low","middle","floor","currentOffset","findNearestItemExponentialSearch","interval","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","maxOffset","minOffset","round","findNearestItem","resetAfterIndex","shouldForceUpdate","forceUpdate"],"sourceRoot":""}