{"version":3,"file":"7.bundle.5acc01c3f29cfa42e6b5.js","mappings":"mIAEMA,E,4CAAKC,GCFLC,EAAU,CACdC,gBAAiB,CACfC,WAAY,UACZC,aAAc,SACdC,YAAa,QACbC,YAAa,cACbC,oBAAqB,CAEnBC,OAAQ,SAEVC,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,YACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,MAKtBC,YAAa,CACX,CACEhB,GAAI,kBAKJiB,EAAa,CACjBd,gBAAiB,CACfC,WAAY,aACZC,aAAc,SACdC,YAAa,WACbC,YAAa,cACbG,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,eACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,MAKtBC,YAAa,CACX,CACEhB,GAAI,kBAIJkB,EAAY,CAChBf,gBAAiB,CACfC,WAAY,YACZC,aAAc,SACdC,YAAa,UACbC,YAAa,cACbG,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,cACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,MAKtBC,YAAa,CACX,CACEhB,GAAI,kBAKJmB,EAAU,CACdhB,gBAAiB,CACfC,WAAY,UACZC,aAAc,SACde,WAAY,CAAC,EAAG,EAAG,GACnBd,YAAa,QACbC,YAAa,cACbC,oBAAqB,CAEnBC,OAAQ,SAEVC,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,YACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,IAGlB,CACEJ,KAAM,MACNX,GAAI,iBACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPO,iBAAiB,MAKzBL,YAAa,CACX,CACEF,QAAS,CACPQ,IAAK,CACHC,OAAQ,iBAEVC,aAAa,GAEfxB,GAAI,kBAKJyB,EAAa,CACjBtB,gBAAiB,CACfC,WAAY,aACZC,aAAc,SACdC,YAAa,WACbc,WAAY,CAAC,EAAG,EAAG,GACnBb,YAAa,cACbG,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,eACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,IAGlB,CACEJ,KAAM,MACNX,GAAI,iBACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPO,iBAAiB,MAKzBL,YAAa,CACX,CACEF,QAAS,CACPQ,IAAK,CACHC,OAAQ,iBAEVC,aAAa,GAEfxB,GAAI,kBAKJ0B,EAAY,CAChBvB,gBAAiB,CACfC,WAAY,YACZC,aAAc,SACdC,YAAa,UACbc,WAAY,CAAC,EAAG,EAAG,GACnBb,YAAa,cACbG,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,cACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,IAGlB,CACEJ,KAAM,MACNX,GAAI,iBACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPO,iBAAiB,MAKzBL,YAAa,CACX,CACEF,QAAS,CACPQ,IAAK,CACHC,OAAQ,iBAEVC,aAAa,GAEfxB,GAAI,kBAKJ2B,EAAc,CAClBxB,gBAAiB,CACfC,WAAY,cACZC,aAAc,SACdC,YAAa,QACbC,YAAa,kBACbC,oBAAqB,CAEnBC,OAAQ,SAEVC,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,YACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,eACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,IAGlB,CACEJ,KAAM,MACNX,GAAI,iBACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPO,iBAAiB,MAKzBL,YAAa,CACX,CACEhB,GAAI,gBAEN,CACEA,GAAI,eACJc,QAAS,CACPc,SAAU,CACRC,KAAM,MACNC,QAAS,CACP,CAAEC,MAAO,EAAGD,QAAS,GACrB,CAAEC,MAAO,GAAKD,QAAS,IACvB,CAAEC,MAAO,EAAGD,QAAS,OAGzBR,IAAK,CACHC,OAAQ,qBAOZS,EAAiB,CACrB7B,gBAAiB,CACfC,WAAY,iBACZC,aAAc,SACdC,YAAa,WACbC,YAAa,kBAKbG,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,eACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,eACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,IAGlB,CACEJ,KAAM,MACNX,GAAI,iBACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPO,iBAAiB,MAKzBL,YAAa,CACX,CACEhB,GAAI,gBAEN,CACEA,GAAI,eACJc,QAAS,CACPc,SAAU,CACRC,KAAM,MACNC,QAAS,CACP,CAAEC,MAAO,EAAGD,QAAS,GACrB,CAAEC,MAAO,GAAKD,QAAS,IACvB,CAAEC,MAAO,EAAGD,QAAS,OAGzBR,IAAK,CACHC,OAAQ,qBAOZU,EAAgB,CACpB9B,gBAAiB,CACfC,WAAY,gBACZC,aAAc,SACdC,YAAa,UACbC,YAAa,kBAKbG,WAAY,CACV,CACEC,KAAM,iBACNX,GAAI,cACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,GAEV,CACEF,KAAM,MACNX,GAAI,eACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,IAGlB,CACEJ,KAAM,MACNX,GAAI,iBACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPO,iBAAiB,MAKzBL,YAAa,CACX,CACEhB,GAAI,gBAEN,CACEA,GAAI,eACJc,QAAS,CACPc,SAAU,CACRC,KAAM,MACNC,QAAS,CACP,CAAEC,MAAO,EAAGD,QAAS,GACrB,CAAEC,MAAO,GAAKD,QAAS,IACvB,CAAEC,MAAO,EAAGD,QAAS,OAGzBR,IAAK,CACHC,OAAQ,qBAOZW,EAAc,CAClB/B,gBAAiB,CACfC,WAAY,cACZC,aAAc,SACdC,YAAa,WACbc,WAAY,CAAC,EAAG,EAAG,GACnBb,YAAa,eACbG,WAAY,CACV,CACEC,KAAM,MACNX,GAAI,WACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPC,cAAc,IAGlB,CACEJ,KAAM,MACNX,GAAI,iBACJY,QAAQ,EACRC,QAAQ,EACRC,QAAS,CACPO,iBAAiB,KAOvBc,oBAAqB,CAInBC,cAAc,IAGlBpB,YAAa,CACX,CACEF,QAAS,CACPuB,UAAW,MACXC,cAAe,aACfhB,IAAK,CACHC,OAAQ,iBAEVC,aAAa,GAEfxB,GAAI,kBC9QJuC,EAAO,CACXvC,GAAI,kDACJwC,QAAQ,EACRX,KAAM,UACNY,YAAa,2BACbC,aAAc,2BACdC,YAAa,CAAC,EACdC,WAAY,CAAC,EACbC,kBAAmB,wBACnBC,sBAAuB,CACrB,CACEC,UAAW,oBACXC,WAAY,CACVC,SAAU,CAAC,KAAM,QAGrB,CACEF,UAAW,mBACXC,WAAY,CACVC,SAAU,UAGd,CACEF,UAAW,mBACXC,WAAY,CACVC,SAAU,YAIhBC,oBAAqB,CACnBC,aAAc,CACZC,oBAAqB,CACnB,CACEL,UAAW,WACXC,WAAY,CACVK,OAAQ,CACNtB,MAAO,OAGXuB,UAAU,GAEZ,CACEP,UAAW,oBACXC,WAAY,CACVK,OAAQ,CACNtB,OAAO,IAGXuB,UAAU,GAEZ,CACEP,UAAW,oBACXC,WAAY,CACVC,SAAU,OAGd,CACEF,UAAW,oBACXC,WAAY,CACVC,SAAU,YAKlBM,aAAc,CACZH,oBAAqB,CACnB,CACEL,UAAW,WACXC,WAAY,CACVK,OAAQ,MAEVC,UAAU,GAEZ,CACEP,UAAW,oBACXC,WAAY,CACVK,OAAQ,CACNtB,OAAO,IAGXuB,UAAU,GAEZ,CACEP,UAAW,oBACXC,WAAY,CACVC,SAAU,cAGd,CACEO,OAAQ,EACRT,UAAW,oBACXC,WAAY,CACVS,eAAgB,CACd1B,MAAO,oBAQnB2B,OAAQ,CAzSK,CACb7B,KAAM,UACN8B,kBAAmB,CACjBC,WAAY,OACZC,WAAY,CACVC,KAAM,EACNC,QAAS,EACTC,cAAe,CACb,CACEC,EAAG,EACHC,EAAG,EACHC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,EAAI,EACPC,EAAG,EACHC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,GACHC,EAAG,EACHC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,EACHC,EAAG,EAAI,EACPC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,EAAI,EACPC,EAAG,EAAI,EACPC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,GACHC,EAAG,EAAI,EACPC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,EACHC,EAAG,EAAI,EACPC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,EAAI,EACPC,EAAG,EAAI,EACPC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,GACHC,EAAG,EAAI,EACPC,MAAO,EAAI,EACXC,OAAQ,EAAI,GAEd,CACEH,EAAG,EAAI,EACPC,EAAG,EACHC,MAAO,EAAI,EACXC,OAAQ,MAKhBC,UAAW,CACTnE,EACAe,EACAC,EACAC,EACAM,EACAC,EACAC,EACAK,EACAC,EACAC,GAEFO,YAAa,4BASA,CACbZ,KAAM,aACN8B,kBAAmB,CACjBC,WAAY,OACZC,WAAY,CACVC,KAAM,EACNC,QAAS,IAGbM,UAAW,CAACnE,EAASyB,EAAaR,EAASe,IAU9B,CACbL,KAAM,aACN8B,kBAAmB,CACjBC,WAAY,OACZC,WAAY,CACVC,KAAM,EACNC,QAAS,IAGbM,UAAW,CAACnE,EAASe,EAAYC,EAAWC,EAASM,EAAYC,IAYpD,CACbG,KAAM,aACN8B,kBAAmB,CACjBC,WAAY,OACZC,WAAY,CACVC,KAAM,EACNC,QAAS,EACTC,cAAe,CACb,CACEC,EAAG,EACHC,EAAG,EACHC,MAAO,EAAI,EACXC,OAAQ,IAEV,CACEH,EAAG,EAAI,EACPC,EAAG,EACHC,MAAO,EAAI,EACXC,OAAQ,IAEV,CACEH,EAAG,GACHC,EAAG,EACHC,MAAO,EAAI,EACXC,OAAQ,IAEV,CACEH,EAAG,EAAI,EACPC,EAAG,EACHC,MAAO,EAAI,EACXC,OAAQ,GAEV,CACEH,EAAG,EACHC,EAAG,GACHC,MAAO,EAAI,EACXC,OAAQ,IAEV,CACEH,EAAG,EAAI,EACPC,EAAG,GACHC,MAAO,EAAI,EACXC,OAAQ,IAEV,CACEH,EAAG,GACHC,EAAG,GACHC,MAAO,EAAI,EACXC,OAAQ,OAKhBC,UAAW,CACT3C,EACAD,EACAN,EACAe,EACAD,EACAD,EACAL,KA0GF2C,0BAA2B,GAY7B,QATA,WACE,MAAO,CACL,CACEzC,KAAMU,EAAKvC,GACXuE,SAAUhC,GAGhB,E,mEClUA,MAAMiC,EAAoB,CACxBC,cAAe,KACfC,WAAY,KACZC,WAAY,KACZC,uCAAwC,CACtCC,sBAAuB,KACvBC,qBAAsB,KACtBC,6BAA8B,OAWnB,SAASC,GAAY,gBAAEC,EAAe,gBAAEC,IACrD,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,IAAe,aACvB,kBAAEC,EAAiB,iBAAEC,EAAgB,eAAEC,EAAc,uBAAEC,GAC3DP,EACAQ,UACKC,EAAUC,IAAeC,EAAAA,EAAAA,UAASpB,IAClCjB,EAAcsC,IAAmBD,EAAAA,EAAAA,UAAS,MAE3CE,EAAuBJ,IAC3BC,GAAYI,IACV,MAAMC,EAAW,IAAKD,GAWtB,OAVAE,OAAOC,KAAKR,GAAUS,SAAQC,IACC,iBAAlBV,EAASU,GAClBJ,EAASI,GAAO,IACXL,EAAUK,MACVV,EAASU,IAGdJ,EAASI,GAAOV,EAASU,EAC3B,IAEKJ,CAAQ,GACf,EAGEK,EAA0BC,IAC9B,MAAM/C,EAAe2B,EAAgBqB,WAAW,0BAA2B,CACzED,yBAGF,IAAK/C,EACH,OAOF,MAAO,CACLA,eACAmC,SANeR,EAAgBqB,WAAW,gBAAiB,CAC3DhD,iBAMD,EA8DH,OA3DAiD,EAAAA,EAAAA,YAAU,KACR,MAAMxF,EAAcqE,EAAkBoB,wBAChC,qBAAEH,GAAyBd,EAAuBkB,kBACxD,IAAK1F,EAAY2F,OACf,OAGF,MAAMC,EAAiBP,EAAwBC,GAE/C,IAAKM,EACH,OAGF,MAAM,aAAErD,EAAY,SAAEmC,GAAakB,EACnCf,EAAgBtC,GAChBoC,EAAYD,EAAS,GACpB,KAGHc,EAAAA,EAAAA,YAAU,KACR,MAAM,YAAEK,GAAgBrB,EAAuBsB,UAC7CtB,EAAuBuB,OAAOC,kBAC9B,EAAGV,2BACD,MAAMM,EAAiBP,EAAwBC,GAE/C,IAAKM,EACH,OAEF,MAAM,aAAErD,EAAY,SAAEmC,GAAakB,EACnCf,EAAgBtC,GAChBoC,EAAYD,EAAS,IAGzB,MAAO,KACLmB,GAAa,CACd,GACA,IAwBDI,EAAAA,cAAA,OAAKC,UAAU,4FACbD,EAAAA,cAAA,OAAKC,UAAU,gEACbD,EAAAA,cAACE,EAAAA,GAAY,CAACC,MAAOjC,EAAE,wBACrB8B,EAAAA,cAAA,OAAKC,UAAU,iBACbD,EAAAA,cAAA,OAAKC,UAAU,2CACbD,EAAAA,cAACI,EAAAA,GAAK,CACJC,mBAAoB,0CACpBC,MAAOpC,EAAE,eACTqC,eAAe,oCACfN,UAAU,4BACVnF,MAAO2D,EAAShB,YAAc,GAC9B+C,SAAUC,IACR5B,EAAqB,CACnBpB,WAAYgD,EAAE7G,OAAOkB,OACrB,IAGNkF,EAAAA,cAACI,EAAAA,GAAK,CACJC,mBAAoB,0CACpBC,MAAOpC,EAAE,UACTwC,cAAeV,EAAAA,cAAA,QAAMC,UAAU,kBAAiB,OAChDM,eAAe,oCACfN,UAAU,4BACVnF,MAAO2D,EAASjB,eAAiB,GACjCgD,SAAUC,IACR5B,EAAqB,CACnBrB,cAAeiD,EAAE7G,OAAOkB,OACxB,IAGNkF,EAAAA,cAACI,EAAAA,GAAK,CACJC,mBAAoB,0CACpBC,MAAOpC,EAAE,cACTwC,cAAeV,EAAAA,cAAA,QAAMC,UAAU,kBAAiB,OAChDM,eAAe,oCACfN,UAAU,4BACVnF,MAAO2D,EAASd,uCAAuCC,uBAAyB,GAChF4C,SAAUC,IACR5B,EAAqB,CACnBlB,uCAAwC,CACtCC,sBAAuB6C,EAAE7G,OAAOkB,QAElC,IAGNkF,EAAAA,cAACI,EAAAA,GAAK,CACJC,mBAAoB,0CACpBC,MAAOpC,EAAE,aACTwC,cAAeV,EAAAA,cAAA,QAAMC,UAAU,kBAAiB,MAChDM,eAAe,oCACfN,UAAU,4BACVnF,MAAO2D,EAASd,uCAAuCE,sBAAwB,GAC/E2C,SAAUC,IACR5B,EAAqB,CACnBlB,uCAAwC,CACtCE,qBAAsB4C,EAAE7G,OAAOkB,QAEjC,IAGNkF,EAAAA,cAACI,EAAAA,GAAK,CACJC,mBAAoB,0CACpBC,MAAOpC,EAAE,kBACTwC,cAAeV,EAAAA,cAAA,QAAMC,UAAU,kBAAiB,MAChDM,eAAe,oCACfN,UAAU,4BACVnF,MACE2D,EAASd,uCAAuCG,8BAAgC,GAElF0C,SAAUC,IACR5B,EAAqB,CACnBlB,uCAAwC,CACtCG,6BAA8B2C,EAAE7G,OAAOkB,QAEzC,IAGNkF,EAAAA,cAACI,EAAAA,GAAK,CACJC,mBAAoB,0CACpBC,MAAOpC,EAAE,oBACTwC,cAAeV,EAAAA,cAAA,QAAMC,UAAU,kBAAiB,MAChDM,eAAe,oCACfN,UAAU,4BACVnF,MAAO2D,EAASf,YAAc,GAC9B8C,SAAUA,SAEZR,EAAAA,cAACW,EAAAA,GAAM,CACLV,UAAU,qCACVW,QA9Gd,WACE,IAAKtE,EACH,MAAM,IAAIuE,MAAM,yBAIlBC,EAAAA,mBAAmBC,wBACjBzE,EAAa0E,iBACb1E,EAAa2E,kBACbxC,GAIFL,EAAkB8C,iCAAiC5E,EAAa6E,uBAIhEC,YAAW,KACTnD,EAAgBqB,WAAW,kBAAkB,GAC5C,EACL,GA2Fa,mBASf,CAEAvB,EAAYsD,UAAY,CACtBrD,gBAAiBsD,IAAAA,MAAgB,CAC/B9C,SAAU8C,IAAAA,MAAgB,CACxBC,mBAAoBD,IAAAA,MAAgB,CAClCE,gBAAiBF,IAAAA,KAAeG,WAChC5B,UAAWyB,IAAAA,KAAeG,WAC1B3B,OAAQwB,IAAAA,OAAiBG,WACzBC,YAAaJ,IAAAA,OAAiBG,aAC7BA,aACFA,aACFA,Y,0BCtOU,SAASE,GAA8B,gBAAE3D,EAAe,gBAAEC,IACvE,MAAM,oBAAE2D,EAAmB,sBAAEC,GAA0B7D,EAAgBQ,UACjE,EAAEN,IAAMC,EAAAA,EAAAA,IAAe,mBAEtB2D,EAAeC,IAAoBpD,EAAAA,EAAAA,WAAS,IAAMiD,EAAoBI,sBACtEC,EAAoBC,IAAyBvD,EAAAA,EAAAA,UAAS,MAwE7D,IAnEAY,EAAAA,EAAAA,YAAU,KAER,MAAM4C,EAAQP,EAAoB9B,OAAOsC,mBACnCC,EAAUT,EAAoB9B,OAAOwC,qBACrCC,EAAUX,EAAoB9B,OAAO0C,qBACrCC,EAAgB,GActB,MAZA,CAACN,EAAOE,EAASE,GAASrD,SAAQwD,IAChC,MAAM,YAAE9C,GAAgBgC,EAAoB/B,UAAU6C,GAAK,KACzD,MAAMZ,EAAgBF,EAAoBI,mBAC1CD,EAAiBD,GAEjB,MAAMG,EAAqBH,EAAca,QAAOC,GAAOA,EAAIC,WAC3DX,EAAsBD,EAAmB,GAAG,IAG9CQ,EAAcK,KAAKlD,EAAY,IAG1B,KACL6C,EAAcvD,SAAQ6D,IACpBA,GAAO,GACP,CACH,GACA,KAEHxD,EAAAA,EAAAA,YAAU,KACR,MAAMyD,EAAWC,UACf,MAAM,OAAEC,GAAWR,GACb,eAAES,GAAmBD,EAE3B,IAAKC,EACH,YChD6BF,QACnCE,iBACAlF,kBACA2D,sBACAwB,SAAS,CAAC,MAEV,MAAMC,EAAezB,EAAoB0B,gBAAgBH,GAGnDI,EAA+B,CAAC,EACtCF,EAAaG,eAAiBC,QAAQC,IACpCL,EAAaG,SAASG,KAAIV,UACxB,IAAKW,IAAYA,EAAQC,aACvB,OAAOD,EAGT,MAAME,EAAWC,EAAAA,MAAMC,UAAUb,GAE3BU,EAAeD,EAAQC,aAEvBI,EAAchG,EAAgBiG,IAAI,iBAAkB,CAAEJ,WAAUD,iBAChEM,QAAgBlG,EAAgBiG,IAAI,mBAAoB,CAAEJ,WAAUD,iBAIpEO,EAAc,CAClBH,cACAE,UACAE,sBAN4BJ,EAAYK,OAASL,EAAYM,WAgB/D,OAPAX,EAAQQ,YAAcA,EACtBR,EAAQY,YAAc,CACnB,aAAYL,EAAQA,QAAQM,QAAQ,KACpC,WAAUR,EAAYK,OAAOG,QAAQ,UAExClB,EAA6BM,GAAgBO,EAEtCR,CAAO,KAIlB,MAEM9B,EAAgBF,EAAoBI,mBACpC0C,EAAOzG,EAAgBiG,IAAI,gBAAiB,CAAEpC,kBAEpDuB,EAAae,YAAcpF,OAAO2F,OAAOtB,EAAae,YAAab,EAA8B,CAC/FmB,KAAM,CACJ5J,MAAO4J,EAAKD,QAAQ,GACpBrB,OAAQ,IAAKA,MAIjBxB,EAAoBgD,wBAClB,IACKvB,IAEL,GAhB4B,EAkB7B,EDTSwB,CAAsB,CAC1B1B,iBACAlF,kBACA2D,wBAGF,MAAMyB,EAAezB,EAAoB0B,gBAAgBH,IAEnD,YAAEiB,GAAgBf,EACxB,IAAKe,EACH,OAIF,MAAMD,EAAUC,IAAc,IAAMD,SAASA,QAEzCW,OAAOC,MAAMZ,IACftC,EAAsBmD,KAAK,CACzB7E,MAAO,WACP8E,QAAS,uDACTvL,KAAM,WAEV,EAKF,OAFAwL,EAAAA,YAAYC,0BAA0BC,EAAAA,MAAAA,OAAaC,2BAA4BrC,EAAU,KAElF,KACLkC,EAAAA,YAAYI,6BAA6BF,EAAAA,MAAAA,OAAaC,2BAA4BrC,EAAS,CAC5F,GACA,KAEEf,EACH,OAAO,KAGT,MAAMsD,EAAYtD,EAAmBmC,aAAaM,MAAM5J,OAAS,KAC3DsI,EAASnB,EAAmBmC,aAAaM,MAAMtB,QAAU,CAAC,EAE1DoC,EAAU,CACd,CACElF,MAAO,aACPM,QAASA,KACP3C,EAAgBqB,WAAW,sBAAuB,CAChDwC,gBACA4C,KAAMa,EACNnC,UACA,EAEJqC,SAAwB,OAAdF,GAEZ,CACEjF,MAAO,mBACPM,QAASA,KACP3C,EAAgBqB,WAAW,qBAAqB,EAElDmG,SAAwB,OAAdF,IAId,OACEvF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKC,UAAU,4BACbD,EAAAA,cAAA,OAAKC,UAAU,yDACE,OAAdsF,EACCvF,EAAAA,cAAA,OAAKC,UAAU,mEACbD,EAAAA,cAAA,QAAMC,UAAU,4DACb,SAEHD,EAAAA,cAAA,OAAKC,UAAU,cAAe,GAAEsF,SAEhC,KACJvF,EAAAA,cAAA,OAAKC,UAAU,4BACbD,EAAAA,cAAC0F,EAAAA,GAAa,CACZF,QAASA,EACTtH,EAAGA,OAKX8B,EAAAA,cAAA,OACEC,UAAU,0HACVW,QAASA,KAEP+E,OAAOC,KAAK,mEAAoE,SAAS,GAG3F5F,EAAAA,cAAC6F,EAAAA,GAAI,CACH3I,MAAM,OACNC,OAAO,OACPvC,KAAM,OACNqF,UAAW,kCAEbD,EAAAA,cAAA,YAAO,eAIf,CAEA2B,EAA8BN,UAAY,CACxCpD,gBAAiBqD,IAAAA,MAAgB,CAC/BhC,WAAYgC,IAAAA,KAAeG,aAE7BzD,gBAAiBsD,IAAAA,MAAgB,CAC/B9C,SAAU8C,IAAAA,MAAgB,CACxBM,oBAAqBN,IAAAA,MAAgB,CACnCgC,gBAAiBhC,IAAAA,KAAeG,WAChCO,iBAAkBV,IAAAA,KAAeG,WACjCqE,6BAA8BxE,IAAAA,KAAeG,WAC7C5B,UAAWyB,IAAAA,KAAeG,WAC1B3B,OAAQwB,IAAAA,OAAiBG,aACxBA,aACFA,aACFA,YEpKL,UCmEA,QA5DA,UAAwB,gBAAExD,EAAe,iBAAE8H,EAAgB,gBAAE/H,IAmC3D,MAAO,CACL,CACEpD,KAAM,SACNoL,SAAU,mBACVC,UAAW,eACX3F,MAAO,eACP4F,UAxCuBC,IAEvBnG,EAAAA,cAACjC,EAAW,CACVE,gBAAiBA,EACjBD,gBAAiBA,KAsCrB,CACEpD,KAAM,UACNoL,SAAU,mBACVC,UAAW,eACX3F,MAAO,uBACP4F,UAtC+BE,IAE/BpG,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACqG,EAAAA,GAAO,CACNpI,gBAAiBA,EACjBD,gBAAiBA,EACjB+H,iBAAkBA,EAClBO,gBAAgB,sBAChBnG,MAAM,sBAgCZ,CACEvF,KAAM,aACNoL,SAAU,mBACVC,UAAW,eACX3F,MAAO,sBACP4F,UA/B8BK,IAE9BvG,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACwG,EAAuB,CACtBvI,gBAAiBA,EACjBD,gBAAiBA,MA6B3B,ECnEA,GAAgB,iCCED,SAASyI,EAAyBC,GAC/C,GAAIA,EACF,OAIJ,SAA4BA,GAC1B,MAAMC,EAAWC,EAAAA,SAAAA,IAAa,WAAYF,GAE1C,MAAO,CACLG,eAAgBF,EAASE,eACzB5F,kBAAmB0F,EAAS1F,kBAC5BD,iBAAkB2F,EAAS3F,iBAC3B8F,YAAaH,EAASG,aAAe,EAEzC,CAbWC,CAAmBL,EAE9B,CCHA,MA2DA,EA3DsC,CACpCM,aAAcA,CAACC,EAAaC,KAAdF,EAQdG,cAAeA,CAACC,EAAoBhJ,EAAmBiJ,KACrD,MAAM,WAAEC,EAAU,WAAEnO,GAAeiO,GAC7B,SAAE3I,EAAQ,KAAE8I,EAAI,cAAEC,GAAkBF,EAE1C,IAAK7I,IAAa8I,EAEhB,OADAE,QAAQC,KAAK,yCACN,KAGT,MAAM,SAAEC,EAAQ,kBAAEC,EAAiB,oBAAEC,GAAwBpJ,EAG7D,IAFsBqJ,EAAgBC,SAASJ,GAG7C,MAAM,IAAI9G,MAAM,sBAGlB,MAAM,eAAEgG,EAAc,kBAAE5F,EAAiB,iBAAED,GAAqByF,EAC9DmB,GAKF,IAAII,EAWJ,OAREA,EADEnB,EACWzI,EAAkB6J,+BAC7BpB,EACA5F,GAGW7C,EAAkB8J,wBAAwBjH,GAGlD,CACLkH,IAAKX,EACLX,iBACAgB,sBAEApJ,WACA2J,mBAAoBnH,EACpBoH,kBAAmBrH,EACnB2G,SAAUlJ,EAASkJ,SACnBxG,sBAAuB6G,EAAW7G,sBAClCb,MAAO7B,EAAS6B,MAChBiH,KAAMA,EAAKnD,YACX1K,KAAM,gCACP,GCjCL,EAvB0C4O,CACxC/G,EACAnD,EACAiJ,KAEO,CACLkB,8BAA+B,CAC7BvB,aAAcuB,EAA8BvB,aAC5CG,cAAeqB,GACbD,EAA8BpB,cAC5BqB,EACApK,EACAiJ,GAEJoB,iBAAkB,CAChB,CACEC,UAAWnH,EAAmBG,YAAYiH,0B,eChBpD,SAASC,EAAYC,EAAkBC,GAErC,MAAM,UAAEC,GAAcF,EAChBG,EAASD,EAAUE,eAAeC,aAAaC,WAG/C,GAAEC,EAAE,UAAEC,GAkDd,SAAwBC,GAItB,MAAMD,GAAaE,IACbH,EAAKA,CAACI,EAAQC,KACdD,EAASC,IACXA,EAAWD,GAENC,GAET,MAAO,CAAEL,KAAIC,YACf,CA9D4BK,GAC1B,IAAI5O,EAAQuO,EAEZ,MAAMM,EAAYC,EAAAA,UAAAA,iBAAAA,qCAChBd,EACAD,KAGMgB,EAAMC,IAAQC,EAAMC,IAAQC,EAAMC,IAASP,EAEnD,IAAK,IAAIQ,EAAIN,EAAMM,GAAKL,EAAMK,IAC5B,IAAK,IAAIC,EAAIL,EAAMK,GAAKJ,EAAMI,IAC5B,IAAK,IAAIC,EAAIJ,EAAMI,GAAKH,EAAMG,IAAK,CAEjCvP,EAAQsO,EAAGJ,EADID,EAAUuB,mBAAmB,CAACH,EAAGC,EAAGC,KACxBvP,EAC7B,CAGJ,OAAOA,CACT,CA6CA,QA3CA,SACEyP,EACAC,EACApH,GAEA,GAAwB,UAApBA,EAAOqH,SACT,MAAO,CACLC,QAAS5F,OAAO1B,EAAOsH,SACvBC,QAAS7F,OAAO1B,EAAOuH,SACvBC,QAAS9F,OAAO1B,EAAOwH,SACvBC,QAAS/F,OAAO1B,EAAOyH,UAI3B,MAAM,OAAEtO,GAAW6G,EACb0F,EAAcyB,EAAe5G,KAAI6D,GACrCoC,EAAAA,WAAAA,MAAAA,cAAuCpC,KAKzC,MAAO,CACLoD,SAAUrB,IACVsB,QAAUtB,IACVmB,QAASnO,EALKqM,EAAY4B,EAAkB,GAAI1B,GAMhD6B,QAAUpB,IAEd,ECnBA,QAxBA,SAAuBuB,EAAsCjH,EAAe,GAC1E,MAEMkH,EAAiBC,EAAAA,UAAAA,aAAAA,6BACrBF,EACAjH,EAJe,mBAQX,UAAEkF,EAAS,QAAEkC,GAAYF,EAY/B,MAAO,KAXQhC,EAAUE,eAAeC,aAAaC,UAI5B+B,QAAO,CAACC,EAAKC,IAChCA,EAAO,EACFD,EAAM,EAERA,GACN,GAEuBF,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,EAC9D,E,0BC/BA,MAAM,cAAEI,GAAkBC,EAAAA,GAAAA,KACpBC,EAAmBC,EAAAA,QAAQC,iBCHjC,QDKe,SAAiC3C,GAC9C,MAAM4C,EAAUC,EAAAA,GAAWC,cAAcC,KAAKC,4BAC5ChD,EACAyC,EACAzK,EAAAA,oBAEIiL,EAAaV,EAAcK,GAGjC,IAAIM,EAAYC,IAAIC,gBAAgBH,GACpCpG,OAAOwG,SAASxH,OAAOqH,EACzB,EELMT,EAAmBC,EAAAA,QAAQC,iBAC3BW,EAA0C,CAC9C,gCACA,yBAEIC,EAAWzC,EAAAA,MAAAA,4BAA0C0C,SAErDC,GAAgBC,EAAAA,EAAAA,uBAEhB3S,EAAU,CACd4S,mBAAoB,EACpBC,oBAAqB,CACnBC,SAAS,EACTC,kBAAmB,MAKjBC,EAAWA,IACR,IAAIC,OAAO,IAAIb,IAAI,kBAAuD,CAC/ErR,KAAM,oBAuqBV,EAnqBuBmS,EAAG/O,kBAAiBC,kBAAiB8H,uBAC1D,MAAM,oBACJiH,EAAmB,sBACnBnL,EAAqB,kBACrBzD,EAAiB,uBACjBG,EAAsB,iBACtBF,EAAgB,2BAChBgJ,EAA0B,oBAC1BzF,GACE5D,EAAgBQ,SAEdyO,EAAgBlH,EAAiBmH,eACrC,qDAGI,kBAAEC,GAAsBF,EAAcG,QAE5C,SAASC,IACP,MAAM,iBAAEC,GAAqBN,EAAoBO,YAC3C,QAAEC,GAAYL,EAAkBG,IAAqB,CAAC,EAE5D,OADuBG,EAAAA,kBAAqBD,EAE9C,CAEA,SAASE,IACP,MAAM,qBAAErO,GAAyBd,EAAuBkB,kBAClDkO,EAAe,GASrB,OARAtO,EAAqBH,SAAQ0O,IAC3B,MAAM,gBAAE1U,GAAoB0U,GACtB,YAAEtU,GAAgBJ,GACmB,IAAvCyU,EAAaE,QAAQvU,IACvBqU,EAAa7K,KAAKxJ,EACpB,IAGKqU,CACT,CAEA,SAASG,EAAmCC,GAC1C,OAAOA,EAAU7C,QAAO,CAAC8C,EAAmBrG,KAC1C,MAAM4C,EACJX,EAAAA,WAAAA,UAAAA,iCAA8DjC,GAEhE,OAAOqG,EAAkBC,OAAO1D,EAAe,GAC9C,GACL,CAEA,MAAM/E,EAAU,CACdpG,wBAAyBA,EAAGC,2BAM1B,IAAI/C,EAAe,KACnB,IAAK,MAAOnD,EAAY+U,KAAoB7O,EAAsB,CAChE,MAAM,gBAAE8O,GAAoBD,EACtBnU,EAAcoU,EAAgBxK,KAAI,EAAGxC,2BACzC/C,EAAkBgQ,mBAAmBjN,KAGvC,GAAKpH,GAAsC,IAAvBA,EAAY2F,SAIhCpD,EAAevC,EAAYsU,MAAKrG,GAAsC,OAAxBA,EAAWsG,WAErDhS,GACF,KAEJ,CAEA,OAAOA,CAAY,EAErBiS,cAAeA,EAAGjS,mBAChB,MAGMkS,EAHazI,EAAiB0I,iBAAiB,GACzBC,yBAAyBpS,GAEvB,GACxBqK,EAAW4E,EAAiBoD,IAAI,WAAYH,GAClD,GAA0B,OAAtB7H,EAAS2H,SACX,OAoBF,MAjBiB,CACf5Q,WAAYiJ,EAASjJ,WACrB4Q,SAAU3H,EAAS2H,SACnB7Q,WAAYkJ,EAASlJ,WACrBD,cAAemJ,EAASnJ,cACxBG,uCAAwC,CACtCC,sBACE+I,EAAShJ,uCAAuC,GAAGC,sBACrDC,qBACE8I,EAAShJ,uCAAuC,GAAGE,qBACrDC,6BACE6I,EAAShJ,uCAAuC,GAAGG,6BACrD8Q,iCACEjI,EAAShJ,uCAAuC,GAAGiR,kCAI1C,EAEjBC,wBAAyB5L,OAAS3C,YAGhC,MAAM,qBAAEjB,GAAyBd,EAAuBkB,kBAElDnD,EAAekJ,EAAQpG,wBAAwB,CACnDC,yBAGF,IAAK/C,EAEH,YADAuF,EAAsBiN,MAAM,oCAI9B,MAAMC,EAAuBnN,EAAoBI,mBAE3CmB,QAAuBvB,EAAoBoN,gCAC/C1S,EAAa6E,sBACb,CAAEb,MAAQ,gBAAeyO,EAAqBrP,OAAS,MAInDiO,EAAeD,IACfuB,EAAqB5C,EAE3B,IAAK,MAAM/S,KAAeqU,EAAc,CACtC,MAAMuB,GAAsB,QACtBtN,EAAoBuN,yCACxB7V,EACA6J,EACA+L,EACAD,GAGFrN,EAAoBwN,kCAAkCjM,EAAgB7J,EACxE,CAQA,OANAsI,EAAoByN,WAAWlM,EAAgB,CAC7CU,aAAc,EACdjH,WAAY,CACV0D,MAAO,eAGJ6C,CAAc,EAEvBmM,mCAAoCA,EAAGnM,qBAChBuK,IAERxO,SAAQ5F,IACnBsI,EAAoBwN,kCAAkCjM,EAAgB7J,EAAY,GAClF,EAEJiW,wCAAyCA,EAAGpM,iBAAgBC,SAAQS,mBAClE,MAAMR,EAAeuG,EAAAA,aAAAA,MAAAA,gBAA2CzG,IAE1D,mBAAEqM,GAAuBnM,GACvBoM,uBAAwBC,GAAiBnR,EAAuBkB,kBAIlEkQ,EAAc,mCADCD,EAAaf,IAAI,gBACmBxN,yBAEjDyO,SAAUC,GAAgBL,EAAmBnD,IAC/C,mBAAEyD,GAAuBrC,EAAAA,MAASzJ,UAAU6L,GAE5CtF,EAAiBuD,EACrB1B,GAGF,GAA8B,IAA1B7B,EAAe7K,OAMjB,YALAmC,EAAsBmD,KAAK,CACzB7E,MAAO,kBACP8E,QAAS,mCACTvL,KAAM,UAKV,MAAMqW,EAAiBtC,EAAAA,MAASzJ,UAAUb,GAC1C,IAAI0F,EAAmB4E,EAAAA,MAASzJ,UAAU8L,GAC1C,MAAME,EAAqBvC,EAAAA,MAASzJ,UAAU2L,GAI9C,IAAK9G,EACH,MAAM,IAAIhI,MAAM,6BAGlB,IAAKkP,EACH,MAAM,IAAIlP,MAAM,+BAGlB,MAAMyG,EAAasC,EAAAA,WAAAA,MAAAA,cAAuCW,EAAe,KAGvE9L,UACEwR,gBAAgB,SAAErC,KAElBtG,EAIJ,IAF+BsG,EAASsC,YAAYJ,GAEvB,CASI9C,EAAoBmD,8BACjDvC,EAAS7U,IAGYmG,SAAQiC,IAC7B,MAAMmD,EAASmJ,EAAAA,MACZ2C,aACA/B,MAAK/J,GAAUA,EAAOsL,SAAS7H,SAAS5G,KAGzCsM,EAAAA,UAAAA,QAAqBnJ,EAAO+L,WAAYN,EAAeM,aACvD5C,EAAAA,UAAAA,QAAqBnJ,EAAO2G,QAAS8E,EAAe9E,WAEpDpC,EAAmBvE,EACrB,GAEJ,CAEA,MAAM,QAAEoG,EAAO,QAAEC,EAAO,QAAEC,EAAO,QAAEC,GAAYyF,EAC7C/F,EACA,CAAC1B,EAAkBmH,GACnB5M,GAGF,OAAOwG,EAAAA,UAAAA,aAAAA,mCACLW,EACAwF,EACA,CACE,CAAEzL,OAAQuE,EAAkB0H,MAAO7F,EAAS8F,MAAO7F,GACnD,CAAErG,OAAQ0L,EAAoBO,MAAO3F,EAAS4F,MAAO3F,IAEvD,CAAE4F,WAAW,EAAM5M,gBACpB,EAEH6M,iBAAkBzN,OAASa,WAAUD,mBAEnC0I,EAAcoE,eAAe,kBAAmB9D,EAAUhT,GAE1D,MAAM,mBAAEiW,GAAuBhM,EACzB+E,EAAmB4E,EAAAA,MAASzJ,UAAU8L,GAMtChH,EAJiBgF,EACrB1B,GAGiCzI,KAAI6D,GACrCoC,EAAAA,WAAAA,MAAAA,cAAuCpC,KAGnCoJ,EAAgB,CACpBP,WAAYvM,EAASuM,WACrBQ,OAAQ/M,EAAS+M,OACjBC,UAAWhN,EAASgN,UACpB7F,QAASnH,EAASmH,QAClB8F,WAAYjN,EAASiN,WACrBtS,SAAUqF,EAASrF,UAGfuS,EAAuB,CAC3BX,WAAYxH,EAAiBwH,WAC7BQ,OAAQhI,EAAiBgI,OACzBC,UAAWjI,EAAiBiI,UAC5B7F,QAASpC,EAAiBoC,QAC1B8F,WAAYlI,EAAiBkI,WAC7BtS,SAAUoK,EAAiBpK,UAMvBwS,EAAoBnI,EAAYnF,KAAI2D,IACjC,IACFA,EACH7I,SAAU,IACL6I,EAAW7I,SACdwR,eAAgB,IACX3I,EAAW7I,SAASwR,eACvBrC,SAAU,KACVsD,gBAAiB,KACjB1D,QAAS,WAMXrJ,QAAgBoI,EAAc4E,YAAY,kBAAmB,mBAAoB,CACrFP,gBACAI,uBACAlI,YAAamI,EACbpN,iBAGF,MAAO,CACLM,QAASA,EAAQiN,KACjBC,OAAQlN,EAAQmN,IAChBC,UAAWpN,EAAQqN,OACnBC,UAAWtN,EAAQuN,OACpB,EAEHC,eAAgBA,EAAG7N,WAAUD,eAAe,MAC1C,MAAM,WAAEkN,EAAU,QAAE9F,GAAYnH,EAC1B8N,EAAuBnE,EAAAA,MAASzJ,UAAUF,EAASgM,oBAAoB+B,gBAE7E,IAAIC,GAAmBvI,IACnBwI,EAAkBxI,IAClByI,EAAqB,GAErBC,EAAa,EACjB,IAAK,IAAI9H,EAAI,EAAGA,EAAI4G,EAAWrR,OAAQyK,IACrC,GAAI4G,EAAW5G,KAAOtG,EAAc,CAClC,MAAM/I,EAAQ8W,EAAqBzH,GACnC6H,EAAmBlP,KAAKhI,GACpBA,EAAQgX,IACVA,EAAkBhX,GAEhBA,EAAQiX,IACVA,EAAkBjX,GAEpBmX,GACF,CAcF,MAXc,CACZC,SAAUH,EACVtI,SAAUqI,EACVvN,UAAWyN,EAAmB9G,QAAO,CAACiH,EAAGC,IAAMD,EAAIC,GAAG,GAAKH,EAC3DI,SAAUC,KAAKC,KACbP,EAAmB9G,QAAO,CAACiH,EAAGC,IAAMD,EAAIC,EAAIA,GAAG,GAAKH,EAClDD,EAAmB9G,QAAO,CAACiH,EAAGC,IAAMD,EAAIC,GAAG,GAAKH,GAAc,GAElE3N,OAAQ2N,EAAahH,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAK,KAGlD,EAEduH,0BAA2BA,EAAGvO,kBAC5B,MAAM,UAAEM,EAAS,OAAED,GAAWL,EAE9B,MAAO,CACLI,sBAAuBC,EAASC,EACjC,EAEHkO,cAAeA,EAAG3Q,oBAChB,MAAMgJ,EAAYhJ,EAAc6B,KAAI+O,GAAK9Q,EAAoB+Q,kBAAkBD,EAAE3Z,MAEjF,GAAK+R,EAAUpL,OAIf,OAAO+S,EAAc3H,EAAU,EAEjC8H,oBAAqBA,EAAG9Q,gBAAe4C,OAAMtB,SAAQvJ,cACnD,MAAMgZ,EAAY5U,EAAgBqB,WAAW,2BAA4B,CACvEwC,kBAIIgR,EAAuB,CAC3B,CAAE3T,IAAK,0BAA2BrE,MAAO,CAAEiY,IAFjCvN,EAAQwN,yBAAyB,CAAElR,kBAEO2C,QAAQ,KAC5D,CAAEtF,IAAK,0BAA2BrE,MAAO,IAAKsI,UAGnC6P,IAATvO,GACFoO,EAAqBI,QAAQ,CAC3B/T,IAAK,+BACLrE,MAAO,CAAE4J,UChaJ,SAAqCmO,EAAWC,EAAsBjZ,EAAU,CAAC,GAC9F,MAAMsZ,EAAcN,EAAU7T,OAAOC,KAAK4T,GAAW,IAC/C/V,EAAUkC,OAAOC,KAAKkU,GACtBC,EAAM,CAACtW,EAAQuW,KAAK,MAE1BrU,OAAOgK,OAAO6J,GAAW3T,SAAQmE,IAC/B,MAAMiQ,EAAM,GACZxW,EAAQoC,SAAQqU,IAEdD,EAAIxQ,KACF0Q,MAAMC,QAAQpQ,EAAakQ,IAAWlQ,EAAakQ,GAAQF,KAAK,KAAOhQ,EAAakQ,GACrF,IAEHH,EAAItQ,KAAKwQ,EAAID,KAAK,KAAK,IAGzBD,EAAItQ,KAAK,IACTsQ,EAAItQ,KAAK,IACTsQ,EAAItQ,KAAK,IAETsQ,EAAItQ,KAAM,cAAaqQ,EAAYO,aACnCN,EAAItQ,KAAM,cAAaqQ,EAAYQ,aACnCP,EAAItQ,KAAK,IACTgQ,EAAqB5T,SAAQ,EAAGC,MAAKrE,MAAOkO,MAC1C,MAAM4K,EAAO,GACbA,EAAK9Q,KAAM,GAAE3D,KACbH,OAAOC,KAAK+J,GAAQ9J,SAAQmL,IAC1BuJ,EAAK9Q,KAAM,GAAEuH,KACbuJ,EAAK9Q,KAAM,GAAEkG,EAAOqB,KAAK,IAG3B+I,EAAItQ,KAAK8Q,EAAKP,KAAK,KAAK,IAG1B,MAAMQ,EAAO,IAAIC,KAAK,CAACV,EAAIC,KAAK,OAAQ,CACtC3Z,KAAM,2BAGFqa,EAAM9H,IAAIC,gBAAgB2H,GAE1B1B,EAAI6B,SAASC,cAAc,KACjC9B,EAAE+B,KAAOH,EACT5B,EAAEgC,SAAWta,EAAQua,UAAa,GAAEjB,EAAYO,qBAChDvB,EAAEkC,OACJ,CDwXMC,CAA4BzB,EAAWC,EAAsBjZ,EAAQ,EAEvEmZ,yBAA0BA,EAAGlR,oBAC3B,MAAMyS,EAAkBzS,EAAc6B,KAAI+O,GAAK9Q,EAAoB+Q,kBAAkBD,EAAE3Z,MAEvF,IAAIgS,EAGJ,IACEA,EACEnB,EAAAA,UAAAA,aAAAA,6BAA4D2K,EAChE,CAAE,MAAO9T,GAEP,YADAgH,QAAQqH,MAAM,2CAA4CrO,EAE5D,CAGA,MAAM,mBAAEqP,EAAkB,QAAE7E,GAAYsJ,EAAgB,GAEnDzE,GACHrI,QAAQqH,MAAM,wEAGhB,MAAM0F,EAAW/G,EAAAA,MAASzJ,UAAU8L,GAC9B2E,EAAkB1J,EAAe8G,gBAEnC4C,EAAgB/U,SAAW8U,EAAS3C,gBAAgBnS,QACtD+H,QAAQqH,MACN,wFAIJ,IAAI4F,EAAM,EACNC,EAAwB,EAC5B,IAAK,IAAIxK,EAAI,EAAGA,EAAIsK,EAAgB/U,OAAQyK,IAEf,IAAvBsK,EAAgBtK,KAClBuK,GAAOF,EAAS3C,gBAAgB1H,GAChCwK,GAAyB,GAQ7B,OAHmBD,EAAMC,EAGLA,EAAwB1J,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAK,IAAI,EAEzF2J,iCAAkCA,KAChC,MAAM,SAAEhH,GAAaP,KACf,WAAEwH,EAAU,gBAAEC,GAAoBlH,EAASmH,YAM3CvN,EAJyBsG,EAC7B1B,GAG2C,GAEvC9E,EAAasC,EAAAA,WAAAA,MAAAA,cAAuCpC,IAEpD,QAAEwN,GAAY1N,EAAWC,MACzB,OAAE0N,GAAWD,EAGbE,EAAatH,EAASuH,yBAC5B7N,EAAWC,KAAK6N,WAAaF,EAG7B,MAAMG,EAAYJ,EAAOtR,KAAI2R,IAC3B,MAAMC,EAAWC,EAAAA,GAAAA,SACjBA,EAAAA,GAAAA,SAAcD,EAAUV,EAAYS,GAEpC,MAAMG,EAAsBD,EAAAA,GAAAA,IAASD,EAAUT,GAEzCY,EAAWF,EAAAA,GAAAA,SAGjB,OAFAA,EAAAA,GAAAA,YAAiBE,EAAUJ,EAAOR,EAAiBW,GAE5CC,CAAQ,IAIjBV,EAAQC,OAASI,EAGjB/N,EAAWqO,aAAc,EACzB/H,EAASgI,QAAQ,EAEnBC,+BAAgCA,KAC9B,MAAM,SAAEjI,GAAaP,IAMf7F,EAJyBsG,EAC7B1B,GAG2C,GAEvC9E,EAAasC,EAAAA,WAAAA,MAAAA,cAAuCpC,GAGpD0N,EAAatH,EAASuH,yBAC5B7N,EAAWC,KAAKuO,SAAWZ,EAI3B5N,EAAWqO,aAAc,EAEzB/H,EAASgI,QAAQ,EAEnBG,mBAAoBA,KAElB,MAAMC,EAAepM,EAAAA,WAAAA,MAAAA,uBAEfd,EAAc,GAEpB9J,OAAOC,KAAK+W,EAAalN,aAAa5J,SAAQ+W,IAC5C,MAAMC,EAAiBF,EAAalN,YAAYmN,GAC1CE,EAAiB/J,EAAwClB,QAC7D,CAACpC,EAAanB,IAAa,IAAImB,KAAiBoN,EAAevO,IAAa,KAC5E,IAGFmB,EAAYhG,QAAQqT,EAAe,IAGrClY,EAAgBqB,WAAW,+BAAgC,CACzDwJ,eACA,EAEJsN,yBAA0BA,EAAGtU,oBACtBA,GAAkBA,EAAcpC,SACnCoC,EAAgBF,EAAoBI,oBAGtC,IAAIqU,EAAS,CAAC,EAEd,IAAK,MAAMhT,KAAgBvB,EAAe,CACxC,MAAM,GAAE/I,EAAE,MAAEuH,EAAO8D,YAAamD,GAASlE,EAEnCwP,EAAY,CAAE9Z,KAAIuH,SAExB,IAAKiH,EAAM,CACT8O,EAAOtd,GAAM8Z,EACb,QACF,CAEA7T,OAAOC,KAAKsI,GAAMrI,SAAQC,IACC,iBAAdoI,EAAKpI,GACd0T,EAAU1T,GAAOoI,EAAKpI,GAEtBH,OAAOC,KAAKsI,EAAKpI,IAAMD,SAAQoX,IAE7BzD,EADgB,GAAE1T,KAAOmX,KACL/O,EAAKpI,GAAKmX,EAAO,GAEzC,IAGF,MAAMvG,EAAiBnO,EAAoB+Q,kBAAkB5Z,GAE7D,IAAKgX,EAAgB,CACnBsG,EAAOtd,GAAM8Z,EACb,QACF,CAEA,MAAM/C,EAAqBC,EAAeD,mBAC1C+C,EAAU/C,mBAAqBA,EAE/B,MAAMjH,EAAmBjH,EAAoB+Q,kBAAkB7C,GAE/D,IAAKjH,EAAkB,CACrBwN,EAAOtd,GAAM8Z,EACb,QACF,CAEA,IAAKhK,EAAiB0N,WAAa1N,EAAiB0N,SAAS7W,OAAQ,CACnE2W,EAAOtd,GAAM8Z,EACb,QACF,CAEA,MAAMrE,EAAe3F,EAAiB0N,SAAS,GACzC5P,EAAW6P,EAAAA,GAAAA,QAAa/K,iBAAiBkD,IAAI,WAAYH,GAE1D7H,EAKL0P,EAAOtd,GAAM,IACR8Z,EACHa,UAAW/M,EAAS+M,WAAa,SACjC+C,YAAa9P,EAAS8P,YAAYC,WAClC1V,iBAAkB2F,EAAS3F,iBAC3BC,kBAAmB0F,EAAS1F,kBAC5B0S,UAAWhN,EAASgN,WAVpB0C,EAAOtd,GAAM8Z,CAYjB,CAEA,OAAOwD,CAAM,EAEfM,6BAA8BA,EAAG7N,kBAC/B8N,EAAwB9N,EAAY,EAEtC+N,oBAAqBA,EAAGvd,cAAaqB,eACnC,MAAMmc,EAAYzY,EAAiB0Y,aAAazd,IAC1C,qBAAE+F,GAAyBd,EAAuBkB,kBAElDnD,EAAekJ,EAAQpG,wBAAwB,CACnDC,yBAGF,IAAK/C,EACH,OAGF,MAAM0a,EAAoBF,EAAUG,iBAEpC,IAAI7Z,EAAY,GAChB4Z,EAAkB9X,SAAQ/F,IACxB8E,EAAgBqB,WAAW,sBAAuB,CAChDnG,aACAgI,sBAAuB7E,EAAa6E,sBACpCxG,SAAU,CACRC,KAAMD,KAIVyC,EAAU0F,KAAKuE,EAA2B6P,uBAAuB/d,GAAY,IAG/EiE,EAAU8B,SAAQ0O,IAChBA,EAASgI,QAAQ,GACjB,GAIAuB,EAAc,CAClBtB,+BAAgC,CAC9BuB,UAAW5R,EAAQqQ,gCAErBjB,iCAAkC,CAChCwC,UAAW5R,EAAQoP,kCAErBxV,wBAAyB,CACvBgY,UAAW5R,EAAQpG,yBAErBmP,cAAe,CACb6I,UAAW5R,EAAQ+I,eAErBM,wBAAyB,CACvBuI,UAAW5R,EAAQqJ,yBAErBS,mCAAoC,CAClC8H,UAAW5R,EAAQ8J,oCAErBC,wCAAyC,CACvC6H,UAAW5R,EAAQ+J,yCAErByD,yBAA0B,CACxBoE,UAAW5R,EAAQwN,0BAErBtC,iBAAkB,CAChB0G,UAAW5R,EAAQkL,kBAErBiB,eAAgB,CACdyF,UAAW5R,EAAQmM,gBAErBc,cAAe,CACb2E,UAAW5R,EAAQiN,eAErBG,oBAAqB,CACnBwE,UAAW5R,EAAQoN,qBAErBmD,mBAAoB,CAClBqB,UAAW5R,EAAQuQ,oBAErBK,yBAA0B,CACxBgB,UAAW5R,EAAQ4Q,0BAErBO,6BAA8B,CAC5BS,UAAW5R,EAAQmR,8BAErBE,oBAAqB,CACnBO,UAAW5R,EAAQqR,sBAIvB,MAAO,CACLrR,UACA2R,cACAE,eAAgB,mBACjB,EEjsBUC,EAAW,WAGlBzd,EAAU,CACd,CAAEiB,MAAOwc,EAAUhX,MAAO,MAAOiX,YAAa,OAC9C,CAAEzc,MAJU,QAIIwF,MAAO,QAASiX,YAAa,UAqL/C,QAlLA,UAAmC,OAAEnU,EAAM,SAAEoU,EAAQ,WAAElY,IACrD,MAAM,EAAEpB,IAAMC,EAAAA,EAAAA,IAAe,6BAE7B,OACE6B,EAAAA,cAAA,OAAKC,UAAU,2CACbD,EAAAA,cAAA,OAAKC,UAAU,4BACbD,EAAAA,cAAA,OAAKC,UAAU,uBACbD,EAAAA,cAACyX,EAAAA,GAAM,CACLnX,MAAOpC,EAAE,YACTwZ,mBAAmB,EACnBzX,UAAU,gDACVpG,QAASA,EACT8d,YAAa9d,EAAQwU,MAAKuJ,GAAUA,EAAO9c,QAAUsI,EAAOqH,WAAU8M,YACtEzc,MAAOsI,EAAOqH,SACdjK,SAAUA,EAAG1F,YACX0c,EAAS,CACP9d,KAAM,cACNme,QAAS,CACPpN,SAAU3P,IAEZ,KAIRkF,EAAAA,cAAA,OAAKC,UAAU,SAEbD,EAAAA,cAAC8X,EAAAA,GAAiB,KAChB9X,EAAAA,cAAC+X,EAAAA,GAAY,CACXC,KAAK,UACL/X,UAAU,iCACVgY,MAAM,eACNC,QAAQ,WACRtX,QAASA,IAAMtB,EAAW,qCAEzBpB,EAAE,UAEL8B,EAAAA,cAAC+X,EAAAA,GAAY,CACXC,KAAK,UACLC,MAAM,eACNC,QAAQ,WACRjY,UAAU,iCACVW,QAASA,IAAMtB,EAAW,mCAEzBpB,EAAE,WAMVkF,EAAOqH,WAAa6M,GACnBtX,EAAAA,cAACI,EAAAA,GAAK,CACJE,MAAOpC,EAAE,yBACTqC,eAAe,oCACfN,UAAU,+BACVvG,KAAK,OACL2G,mBAAmB,OACnBvF,MAAOsI,EAAO7G,OACdiE,SAAUC,IACR+W,EAAS,CACP9d,KAAM,YACNme,QAAS,CACPtb,OAAQkE,EAAE7G,OAAOkB,QAEnB,IAIPsI,EAAOqH,WAAa6M,GACnBtX,EAAAA,cAAA,OAAKC,UAAU,gBACbD,EAAAA,cAAA,aACEA,EAAAA,cAAA,aACEA,EAAAA,cAAA,MAAIC,UAAU,QACZD,EAAAA,cAAA,MACEC,UAAU,OACVkY,QAAQ,KAERnY,EAAAA,cAACoY,EAAAA,GAAK,CACJnY,UAAU,oCACVoY,KAAK,2BAIXrY,EAAAA,cAAA,MAAIC,UAAU,QACZD,EAAAA,cAAA,MAAIC,UAAU,yBACZD,EAAAA,cAACoY,EAAAA,GAAK,CACJnY,UAAU,aACVoY,KAAK,QAGTrY,EAAAA,cAAA,UACEA,EAAAA,cAAA,OAAKC,UAAU,wBACbD,EAAAA,cAACI,EAAAA,GAAK,CACJE,MAAOpC,EAAE,IACTqC,eAAe,aACfN,UAAU,oCACVvG,KAAK,OACL2G,mBAAmB,OACnBvF,MAAOsI,EAAOwH,QACdpK,SAAUC,IACR+W,EAAS,CACP9d,KAAM,eACNme,QAAS,CACPjN,QAASnK,EAAE7G,OAAOkB,QAEpB,IAGNkF,EAAAA,cAACI,EAAAA,GAAK,CACJE,MAAOpC,EAAE,IACTqC,eAAe,aACfN,UAAU,oCACVvG,KAAK,OACL2G,mBAAmB,OACnBvF,MAAOsI,EAAOyH,QACdrK,SAAUC,IACR+W,EAAS,CACP9d,KAAM,eACNme,QAAS,CACPhN,QAASpK,EAAE7G,OAAOkB,QAEpB,OAMZkF,EAAAA,cAAA,UACEA,EAAAA,cAAA,MAAIC,UAAU,yBACZD,EAAAA,cAACoY,EAAAA,GAAK,CACJnY,UAAU,aACVoY,KAAK,QAGTrY,EAAAA,cAAA,UACEA,EAAAA,cAAA,OAAKC,UAAU,wBACbD,EAAAA,cAACI,EAAAA,GAAK,CACJE,MAAOpC,EAAE,IACTqC,eAAe,aACfN,UAAU,oCACVvG,KAAK,OACL2G,mBAAmB,OACnBvF,MAAOsI,EAAOsH,QACdlK,SAAUC,IACR+W,EAAS,CACP9d,KAAM,eACNme,QAAS,CACPnN,QAASjK,EAAE7G,OAAOkB,QAEpB,IAGNkF,EAAAA,cAACI,EAAAA,GAAK,CACJE,MAAOpC,EAAE,IACTqC,eAAe,aACfN,UAAU,oCACVvG,KAAK,OACL2G,mBAAmB,OACnBvF,MAAOsI,EAAOuH,QACdnK,SAAUC,IACR+W,EAAS,CACP9d,KAAM,eACNme,QAAS,CACPlN,QAASlK,EAAE7G,OAAOkB,QAEpB,UAY1B,EChLMwd,EAAmBhB,EAEzB,SAASiB,EAAQC,EAAOC,GACtB,MAAM,QAAEZ,GAAYY,GACd,SAAEhO,EAAQ,QAAEG,EAAO,QAAEC,EAAO,QAAEH,EAAO,QAAEC,EAAO,OAAEpO,GAAWsb,EAEjE,OAAQY,EAAO/e,MACb,IAAK,cACH,MAAO,IACF8e,EACH/N,YAEJ,IAAK,eACH,MAAO,IACF+N,EACH5N,QAASA,GAAoB4N,EAAM5N,QACnCC,QAASA,GAAoB2N,EAAM3N,QACnCH,QAASA,GAAoB8N,EAAM9N,QACnCC,QAASA,GAAoB6N,EAAM7N,SAEvC,IAAK,YACH,MAAO,IACF6N,EACHjc,UAEJ,QACE,OAAOic,EAEb,CAgGA,SA9FA,UAA6B,gBAAExa,EAAe,gBAAEC,IAC9C,MAAM,oBAAE2D,GAAwB5D,EAAgBQ,UACzCka,EAAwBC,IAA6Bha,EAAAA,EAAAA,UAAS,MAE/DW,GAAasZ,EAAAA,EAAAA,cACjB,CAACC,EAAaC,EAAiB,CAAC,IACvB7a,EAAgBqB,WAAWuZ,EAAaC,IAEjD,CAAC7a,KAGImF,EAAQoU,IAAYuB,EAAAA,EAAAA,YAAWR,EAAS,CAC7C9N,SAAU6N,EACV1N,SAhD+B,KAiD/BC,QAhD+B,KAiD/BH,QAhD+B,IAiD/BC,QAhD+B,IAiD/BpO,OAhDmB,MAmDfsI,GAAwB+T,EAAAA,EAAAA,cAAY,KACxC,MAAMzV,EAAiBuV,EACjBM,EACJC,EAAAA,aAAAA,aAAAA,sBAA0D9V,GAI5D7D,EAAW,0CAA2C,CACpD6D,iBACAC,SACAS,aAAcmV,GACd,GACD,CAACN,EAAwBtV,IA2C5B,OAzCA7D,EAAAA,EAAAA,YAAU,KACR,MAAMuC,EAAgBF,EAAoBI,mBAE1C,IAAKF,EAAcpC,OACjB,OAGF,MAAMmD,EAAWf,EAAcuM,MAAKzL,GAAOA,EAAIC,WAC/C8V,EAA0B9V,EAAS9J,GAAG,GACrC,KAKHwG,EAAAA,EAAAA,YAAU,KAER,MAAM4C,EAAQP,EAAoB9B,OAAOsC,mBACnCC,EAAUT,EAAoB9B,OAAOwC,qBACrCG,EAAgB,GAgBtB,MAdA,CAACN,EAAOE,GAASnD,SAAQwD,IACvB,MAAM,YAAE9C,GAAgBgC,EAAoB/B,UAAU6C,GAAK,KACzD,MAAMZ,EAAgBF,EAAoBI,mBAE1C,IAAKF,EAAcpC,OACjB,OAGF,MAAMmD,EAAWf,EAAcuM,MAAKzL,GAAOA,EAAIC,WAC/C8V,EAA0B9V,EAAS9J,GAAG,IAExC0J,EAAcK,KAAKlD,EAAY,IAG1B,KACL6C,EAAcvD,SAAQ6D,IACpBA,GAAO,GACP,CACH,GACA,IAGD/C,EAAAA,cAAA,OAAKC,UAAU,4EACbD,EAAAA,cAACkZ,EAAyB,CACxB9V,OAAQA,EACRoU,SAAUA,EACVlY,WAAYA,IAEc,OAA3BoZ,GACC1Y,EAAAA,cAACW,EAAAA,GAAM,CACLV,UAAU,2BACVW,QAASiE,GACV,OAMT,EC5HA,MAAMsU,GAAgB,CAIpBpgB,GAAE,EACFqgB,eAAAA,EAAgB,gBAAEpb,EAAe,gBAAEC,EAAe,iBAAE8H,EAAgB,cAAEsT,EAAgB,CAAC,KCH1E,UAAc,gBAAErb,IAC7B,MAAM,mBAAEuD,EAAkB,kBAAEnD,EAAiB,2BAAEiJ,GAC7CrJ,EAAgBQ,UAElB8a,EAAAA,EAAAA,SAAQC,EAAAA,mCAER,MAAM,8BAAEhR,GAAkCD,EACxC/G,EACAnD,EACAiJ,GAGImS,EAAiCjY,EAAmBkY,UApBnB,qBACG,OAwB1ClY,EAAmBmY,WACjBF,EACA,gCACAjR,EAA8BE,iBAC9BF,EAA8BvB,aAC9BuB,EAA8BpB,cAElC,CDpBIwS,CAAK,CAAE3b,kBAAiBC,kBAAiB8H,mBAAkBsT,iBAC7D,EACAO,iBEhBa,UAA0B,gBAAE3b,EAAe,gBAAED,IAC1D,MAAO,CACL,CACEpD,KAAM,oCACNif,iBAAkBA,IAAMC,GAAoB,CAAE7b,kBAAiBD,qBAGrE,EFUE+b,eAAc,EACdC,yBAAwB,EACxBC,kBAAiBA,EAAC,gBAAEjc,EAAe,gBAAEC,EAAe,iBAAE8H,KAC7CgH,EAAe,CACpB/O,kBACAC,kBACA8H,sBAKN,K","sources":["webpack:///../../../extensions/tmtv/src/id.js","webpack:///../../../extensions/tmtv/src/utils/hpViewports.ts","webpack:///../../../extensions/tmtv/src/getHangingProtocolModule.js","webpack:///../../../extensions/tmtv/src/Panels/PanelPetSUV.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/PanelROIThresholdExport.tsx","webpack:///../../../extensions/tmtv/src/utils/handleROIThresholding.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/index.ts","webpack:///../../../extensions/tmtv/src/getPanelModule.tsx","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/utils/getSOPInstanceAttributes.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/RectangleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.js","webpack:///../../../extensions/tmtv/src/utils/getThresholdValue.ts","webpack:///../../../extensions/tmtv/src/utils/calculateTMTV.ts","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/dicomRTAnnotationExport.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/index.js","webpack:///../../../extensions/tmtv/src/commandsModule.js","webpack:///../../../extensions/tmtv/src/utils/createAndDownloadTMTVReport.js","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/ROIThresholdConfiguration.tsx","webpack:///../../../extensions/tmtv/src/Panels/RectangleROIOptions.tsx","webpack:///../../../extensions/tmtv/src/index.tsx","webpack:///../../../extensions/tmtv/src/init.js","webpack:///../../../extensions/tmtv/src/getToolbarModule.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","const ctAXIAL = {\n  viewportOptions: {\n    viewportId: 'ctAXIAL',\n    viewportType: 'volume',\n    orientation: 'axial',\n    toolGroupId: 'ctToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ctSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'ctSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    toolGroupId: 'ctToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\nconst ctCORONAL = {\n  viewportOptions: {\n    viewportId: 'ctCORONAL',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    toolGroupId: 'ctToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ptAXIAL = {\n  viewportOptions: {\n    viewportId: 'ptAXIAL',\n    viewportType: 'volume',\n    background: [1, 1, 1],\n    orientation: 'axial',\n    toolGroupId: 'ptToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst ptSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'ptSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    background: [1, 1, 1],\n    toolGroupId: 'ptToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst ptCORONAL = {\n  viewportOptions: {\n    viewportId: 'ptCORONAL',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    background: [1, 1, 1],\n    toolGroupId: 'ptToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst fusionAXIAL = {\n  viewportOptions: {\n    viewportId: 'fusionAXIAL',\n    viewportType: 'volume',\n    orientation: 'axial',\n    toolGroupId: 'fusionToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.9 },\n            { value: 1, opacity: 0.95 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst fusionSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'fusionSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    toolGroupId: 'fusionToolGroup',\n    // initialImageOptions: {\n    //   index: 180,\n    //   preset: 'middle', // 'first', 'last', 'middle'\n    // },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.9 },\n            { value: 1, opacity: 0.95 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst fusionCORONAL = {\n  viewportOptions: {\n    viewportId: 'fusionCoronal',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    toolGroupId: 'fusionToolGroup',\n    // initialImageOptions: {\n    //   index: 180,\n    //   preset: 'middle', // 'first', 'last', 'middle'\n    // },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      id: 'ptDisplaySet',\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacity: [\n            { value: 0, opacity: 0 },\n            { value: 0.1, opacity: 0.9 },\n            { value: 1, opacity: 0.95 },\n          ],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n    },\n  ],\n};\n\nconst mipSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'mipSagittal',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    background: [1, 1, 1],\n    toolGroupId: 'mipToolGroup',\n    syncGroups: [\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n        options: {\n          syncColormap: true,\n        },\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n        options: {\n          syncInvertState: false,\n        },\n      },\n    ],\n\n    // Custom props can be used to set custom properties which extensions\n    // can react on.\n    customViewportProps: {\n      // We use viewportDisplay to filter the viewports which are displayed\n      // in mip and we set the scrollbar according to their rotation index\n      // in the cornerstone extension.\n      hideOverlays: true,\n    },\n  },\n  displaySets: [\n    {\n      options: {\n        blendMode: 'MIP',\n        slabThickness: 'fullVolume',\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nexport {\n  ctAXIAL,\n  ctSAGITTAL,\n  ctCORONAL,\n  ptAXIAL,\n  ptSAGITTAL,\n  ptCORONAL,\n  fusionAXIAL,\n  fusionSAGITTAL,\n  fusionCORONAL,\n  mipSAGITTAL,\n};\n","import {\n  ctAXIAL,\n  ctCORONAL,\n  ctSAGITTAL,\n  fusionAXIAL,\n  fusionCORONAL,\n  fusionSAGITTAL,\n  mipSAGITTAL,\n  ptAXIAL,\n  ptCORONAL,\n  ptSAGITTAL,\n} from './utils/hpViewports';\n\n/**\n * represents a 3x4 viewport layout configuration. The layout displays CT axial, sagittal, and coronal\n * images in the first row, PT axial, sagittal, and coronal images in the second row, and fusion axial,\n * sagittal, and coronal images in the third row. The fourth column is fully spanned by a MIP sagittal\n * image, covering all three rows. It has synchronizers for windowLevel for all CT and PT images, and\n * also camera synchronizer for each orientation\n */\nconst stage1 = {\n  name: 'default',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 3,\n      columns: 4,\n      layoutOptions: [\n        {\n          x: 0,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 0,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 0,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 3 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1,\n        },\n      ],\n    },\n  },\n  viewports: [\n    ctAXIAL,\n    ctSAGITTAL,\n    ctCORONAL,\n    ptAXIAL,\n    ptSAGITTAL,\n    ptCORONAL,\n    fusionAXIAL,\n    fusionSAGITTAL,\n    fusionCORONAL,\n    mipSAGITTAL,\n  ],\n  createdDate: '2021-02-23T18:32:42.850Z',\n};\n\n/**\n * The layout displays CT axial image in the top-left viewport, fusion axial image\n * in the top-right viewport, PT axial image in the bottom-left viewport, and MIP\n * sagittal image in the bottom-right viewport. The layout follows a simple grid\n * pattern with 2 rows and 2 columns. It includes synchronizers as well.\n */\nconst stage2 = {\n  name: 'Fusion 2x2',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 2,\n    },\n  },\n  viewports: [ctAXIAL, fusionAXIAL, ptAXIAL, mipSAGITTAL],\n};\n\n/**\n * The top row displays CT images in axial, sagittal, and coronal orientations from\n * left to right, respectively. The bottom row displays PT images in axial, sagittal,\n * and coronal orientations from left to right, respectively.\n * The layout follows a simple grid pattern with 2 rows and 3 columns.\n * It includes synchronizers as well.\n */\nconst stage3 = {\n  name: '2x3-layout',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 3,\n    },\n  },\n  viewports: [ctAXIAL, ctSAGITTAL, ctCORONAL, ptAXIAL, ptSAGITTAL, ptCORONAL],\n};\n\n/**\n * In this layout, the top row displays PT images in coronal, sagittal, and axial\n * orientations from left to right, respectively, followed by a MIP sagittal image\n * that spans both rows on the rightmost side. The bottom row displays fusion images\n * in coronal, sagittal, and axial orientations from left to right, respectively.\n * There is no viewport in the bottom row's rightmost position, as the MIP sagittal viewport\n * from the top row spans the full height of both rows.\n * It includes synchronizers as well.\n */\nconst stage4 = {\n  name: '2x4-layout',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 4,\n      layoutOptions: [\n        {\n          x: 0,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 1 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 2 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 3 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1,\n        },\n        {\n          x: 0,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 1 / 4,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 2 / 4,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n      ],\n    },\n  },\n  viewports: [\n    ptCORONAL,\n    ptSAGITTAL,\n    ptAXIAL,\n    mipSAGITTAL,\n    fusionCORONAL,\n    fusionSAGITTAL,\n    fusionAXIAL,\n  ],\n};\n\nconst ptCT = {\n  id: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\n  locked: true,\n  name: 'Default',\n  createdDate: '2021-02-23T19:22:08.894Z',\n  modifiedDate: '2022-10-04T19:22:08.894Z',\n  availableTo: {},\n  editableBy: {},\n  imageLoadStrategy: 'interleaveTopToBottom', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\n  protocolMatchingRules: [\n    {\n      attribute: 'ModalitiesInStudy',\n      constraint: {\n        contains: ['CT', 'PT'],\n      },\n    },\n    {\n      attribute: 'StudyDescription',\n      constraint: {\n        contains: 'PETCT',\n      },\n    },\n    {\n      attribute: 'StudyDescription',\n      constraint: {\n        contains: 'PET/CT',\n      },\n    },\n  ],\n  displaySetSelectors: {\n    ctDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {\n              value: 'CT',\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'CT',\n          },\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'CT WB',\n          },\n        },\n      ],\n    },\n    ptDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'PT',\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'Corrected',\n          },\n        },\n        {\n          weight: 2,\n          attribute: 'SeriesDescription',\n          constraint: {\n            doesNotContain: {\n              value: 'Uncorrected',\n            },\n          },\n        },\n      ],\n    },\n  },\n\n  stages: [stage1, stage2, stage3, stage4],\n  numberOfPriorsReferenced: -1,\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: ptCT.id,\n      protocol: ptCT,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { PanelSection, Input, Button } from '@ohif/ui';\nimport { DicomMetadataStore, ServicesManager } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\n\nconst DEFAULT_MEATADATA = {\n  PatientWeight: null,\n  PatientSex: null,\n  SeriesTime: null,\n  RadiopharmaceuticalInformationSequence: {\n    RadionuclideTotalDose: null,\n    RadionuclideHalfLife: null,\n    RadiopharmaceuticalStartTime: null,\n  },\n};\n\n/*\n * PETSUV panel enables the user to modify the patient related information, such as\n * patient sex, patientWeight. This is allowed since\n * sometimes these metadata are missing or wrong. By changing them\n * @param param0\n * @returns\n */\nexport default function PanelPetSUV({ servicesManager, commandsManager }) {\n  const { t } = useTranslation('PanelSUV');\n  const { displaySetService, toolGroupService, toolbarService, hangingProtocolService } = (\n    servicesManager as ServicesManager\n  ).services;\n  const [metadata, setMetadata] = useState(DEFAULT_MEATADATA);\n  const [ptDisplaySet, setPtDisplaySet] = useState(null);\n\n  const handleMetadataChange = metadata => {\n    setMetadata(prevState => {\n      const newState = { ...prevState };\n      Object.keys(metadata).forEach(key => {\n        if (typeof metadata[key] === 'object') {\n          newState[key] = {\n            ...prevState[key],\n            ...metadata[key],\n          };\n        } else {\n          newState[key] = metadata[key];\n        }\n      });\n      return newState;\n    });\n  };\n\n  const getMatchingPTDisplaySet = viewportMatchDetails => {\n    const ptDisplaySet = commandsManager.runCommand('getMatchingPTDisplaySet', {\n      viewportMatchDetails,\n    });\n\n    if (!ptDisplaySet) {\n      return;\n    }\n\n    const metadata = commandsManager.runCommand('getPTMetadata', {\n      ptDisplaySet,\n    });\n\n    return {\n      ptDisplaySet,\n      metadata,\n    };\n  };\n\n  useEffect(() => {\n    const displaySets = displaySetService.getActiveDisplaySets();\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n    if (!displaySets.length) {\n      return;\n    }\n\n    const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\n\n    if (!displaySetInfo) {\n      return;\n    }\n\n    const { ptDisplaySet, metadata } = displaySetInfo;\n    setPtDisplaySet(ptDisplaySet);\n    setMetadata(metadata);\n  }, []);\n\n  // get the patientMetadata from the StudyInstanceUIDs and update the state\n  useEffect(() => {\n    const { unsubscribe } = hangingProtocolService.subscribe(\n      hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n      ({ viewportMatchDetails }) => {\n        const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\n\n        if (!displaySetInfo) {\n          return;\n        }\n        const { ptDisplaySet, metadata } = displaySetInfo;\n        setPtDisplaySet(ptDisplaySet);\n        setMetadata(metadata);\n      }\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  function updateMetadata() {\n    if (!ptDisplaySet) {\n      throw new Error('No ptDisplaySet found');\n    }\n\n    // metadata should be dcmjs naturalized\n    DicomMetadataStore.updateMetadataForSeries(\n      ptDisplaySet.StudyInstanceUID,\n      ptDisplaySet.SeriesInstanceUID,\n      metadata\n    );\n\n    // update the displaySets\n    displaySetService.setDisplaySetMetadataInvalidated(ptDisplaySet.displaySetInstanceUID);\n\n    // Crosshair position depends on the metadata values such as the positioning interaction\n    // between series, so when the metadata is updated, the crosshairs need to be reset.\n    setTimeout(() => {\n      commandsManager.runCommand('resetCrosshairs');\n    }, 0);\n  }\n  return (\n    <div className=\"ohif-scrollbar flex min-h-0 flex-auto select-none flex-col justify-between overflow-auto\">\n      <div className=\"flex min-h-0 flex-1 flex-col bg-black text-[13px] font-[300]\">\n        <PanelSection title={t('Patient Information')}>\n          <div className=\"flex flex-col\">\n            <div className=\"bg-primary-dark flex flex-col gap-4 p-2\">\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Patient Sex')}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.PatientSex || ''}\n                onChange={e => {\n                  handleMetadataChange({\n                    PatientSex: e.target.value,\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Weight')}\n                labelChildren={<span className=\"text-aqua-pale\"> kg</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.PatientWeight || ''}\n                onChange={e => {\n                  handleMetadataChange({\n                    PatientWeight: e.target.value,\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Total Dose')}\n                labelChildren={<span className=\"text-aqua-pale\"> bq</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.RadiopharmaceuticalInformationSequence.RadionuclideTotalDose || ''}\n                onChange={e => {\n                  handleMetadataChange({\n                    RadiopharmaceuticalInformationSequence: {\n                      RadionuclideTotalDose: e.target.value,\n                    },\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Half Life')}\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.RadiopharmaceuticalInformationSequence.RadionuclideHalfLife || ''}\n                onChange={e => {\n                  handleMetadataChange({\n                    RadiopharmaceuticalInformationSequence: {\n                      RadionuclideHalfLife: e.target.value,\n                    },\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Injection Time')}\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={\n                  metadata.RadiopharmaceuticalInformationSequence.RadiopharmaceuticalStartTime || ''\n                }\n                onChange={e => {\n                  handleMetadataChange({\n                    RadiopharmaceuticalInformationSequence: {\n                      RadiopharmaceuticalStartTime: e.target.value,\n                    },\n                  });\n                }}\n              />\n              <Input\n                containerClassName={'!flex-row !justify-between items-center'}\n                label={t('Acquisition Time')}\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\n                labelClassName=\"text-[13px] font-inter text-white\"\n                className=\"!m-0 !h-[26px] !w-[117px]\"\n                value={metadata.SeriesTime || ''}\n                onChange={() => {}}\n              />\n              <Button\n                className=\"!h-[26px] !w-[115px] self-end !p-0\"\n                onClick={updateMetadata}\n              >\n                Reload Data\n              </Button>\n            </div>\n          </div>\n        </PanelSection>\n      </div>\n    </div>\n  );\n}\n\nPanelPetSUV.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      measurementService: PropTypes.shape({\n        getMeasurements: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n        VALUE_TYPES: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, ActionButtons } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\nimport { eventTarget } from '@cornerstonejs/core';\nimport { Enums } from '@cornerstonejs/tools';\nimport { handleROIThresholding } from '../../utils/handleROIThresholding';\n\nexport default function PanelRoiThresholdSegmentation({ servicesManager, commandsManager }) {\n  const { segmentationService, uiNotificationService } = servicesManager.services;\n  const { t } = useTranslation('PanelSUVExport');\n\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\n  const [activeSegmentation, setActiveSegmentation] = useState(null);\n\n  /**\n   * Update UI based on segmentation changes (added, removed, updated)\n   */\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n\n        const activeSegmentation = segmentations.filter(seg => seg.isActive);\n        setActiveSegmentation(activeSegmentation[0]);\n      });\n\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  useEffect(() => {\n    const callback = async evt => {\n      const { detail } = evt;\n      const { segmentationId } = detail;\n\n      if (!segmentationId) {\n        return;\n      }\n\n      await handleROIThresholding({\n        segmentationId,\n        commandsManager,\n        segmentationService,\n      });\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      const { cachedStats } = segmentation;\n      if (!cachedStats) {\n        return;\n      }\n\n      // segment 1\n      const suvPeak = cachedStats?.['1']?.suvPeak?.suvPeak;\n\n      if (Number.isNaN(suvPeak)) {\n        uiNotificationService.show({\n          title: 'SUV Peak',\n          message: 'Segmented volume does not allow SUV Peak calculation',\n          type: 'warning',\n        });\n      }\n    };\n\n    eventTarget.addEventListenerDebounced(Enums.Events.SEGMENTATION_DATA_MODIFIED, callback, 250);\n\n    return () => {\n      eventTarget.removeEventListenerDebounced(Enums.Events.SEGMENTATION_DATA_MODIFIED, callback);\n    };\n  }, []);\n\n  if (!activeSegmentation) {\n    return null;\n  }\n\n  const tmtvValue = activeSegmentation.cachedStats?.tmtv?.value || null;\n  const config = activeSegmentation.cachedStats?.tmtv?.config || {};\n\n  const actions = [\n    {\n      label: 'Export CSV',\n      onClick: () => {\n        commandsManager.runCommand('exportTMTVReportCSV', {\n          segmentations,\n          tmtv: tmtvValue,\n          config,\n        });\n      },\n      disabled: tmtvValue === null,\n    },\n    {\n      label: 'Export RT Report',\n      onClick: () => {\n        commandsManager.runCommand('createTMTVRTReport');\n      },\n      disabled: tmtvValue === null,\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"mt-2 mb-10 flex flex-col\">\n        <div className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\">\n          {tmtvValue !== null ? (\n            <div className=\"bg-secondary-dark flex items-baseline justify-between px-2 py-1\">\n              <span className=\"text-base font-bold uppercase tracking-widest text-white\">\n                {'TMTV:'}\n              </span>\n              <div className=\"text-white\">{`${tmtvValue} mL`}</div>\n            </div>\n          ) : null}\n          <div className=\"mt-2 flex justify-center\">\n            <ActionButtons\n              actions={actions}\n              t={t}\n            />\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"absolute bottom-1 left-[50px] flex cursor-pointer items-center justify-center text-blue-400 opacity-50 hover:opacity-80\"\n        onClick={() => {\n          // navigate to a url in a new tab\n          window.open('https://github.com/OHIF/Viewers/blob/master/modes/tmtv/README.md', '_blank');\n        }}\n      >\n        <Icon\n          width=\"15px\"\n          height=\"15px\"\n          name={'info'}\n          className={'text-primary-active ml-4 mr-3'}\n        />\n        <span>{'User Guide'}</span>\n      </div>\n    </>\n  );\n}\n\nPanelRoiThresholdSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import { cache } from '@cornerstonejs/core';\n\nexport const handleROIThresholding = async ({\n  segmentationId,\n  commandsManager,\n  segmentationService,\n  config = {},\n}) => {\n  const segmentation = segmentationService.getSegmentation(segmentationId);\n\n  // re-calculating the cached stats for the active segmentation\n  const updatedPerSegmentCachedStats = {};\n  segmentation.segments = await Promise.all(\n    segmentation.segments.map(async segment => {\n      if (!segment || !segment.segmentIndex) {\n        return segment;\n      }\n\n      const labelmap = cache.getVolume(segmentationId);\n\n      const segmentIndex = segment.segmentIndex;\n\n      const lesionStats = commandsManager.run('getLesionStats', { labelmap, segmentIndex });\n      const suvPeak = await commandsManager.run('calculateSuvPeak', { labelmap, segmentIndex });\n      const lesionGlyoclysisStats = lesionStats.volume * lesionStats.meanValue;\n\n      // update segDetails with the suv peak for the active segmentation\n      const cachedStats = {\n        lesionStats,\n        suvPeak,\n        lesionGlyoclysisStats,\n      };\n\n      segment.cachedStats = cachedStats;\n      segment.displayText = [\n        `SUV Peak: ${suvPeak.suvPeak.toFixed(2)}`,\n        `Volume: ${lesionStats.volume.toFixed(2)} mm3`,\n      ];\n      updatedPerSegmentCachedStats[segmentIndex] = cachedStats;\n\n      return segment;\n    })\n  );\n\n  const notYetUpdatedAtSource = true;\n\n  const segmentations = segmentationService.getSegmentations();\n  const tmtv = commandsManager.run('calculateTMTV', { segmentations });\n\n  segmentation.cachedStats = Object.assign(segmentation.cachedStats, updatedPerSegmentCachedStats, {\n    tmtv: {\n      value: tmtv.toFixed(3),\n      config: { ...config },\n    },\n  });\n\n  segmentationService.addOrUpdateSegmentation(\n    {\n      ...segmentation,\n    },\n    false, // don't suppress events\n    notYetUpdatedAtSource\n  );\n};\n","import PanelROIThresholdExport from './PanelROIThresholdExport';\n\nexport default PanelROIThresholdExport;\n","import React from 'react';\nimport { PanelPetSUV, PanelROIThresholdExport } from './Panels';\nimport { Toolbox } from '@ohif/ui';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\n  const wrappedPanelPetSuv = () => {\n    return (\n      <PanelPetSUV\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n      />\n    );\n  };\n\n  const wrappedROIThresholdToolbox = () => {\n    return (\n      <>\n        <Toolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          buttonSectionId=\"ROIThresholdToolbox\"\n          title=\"Threshold Tools\"\n        />\n      </>\n    );\n  };\n\n  const wrappedROIThresholdExport = () => {\n    return (\n      <>\n        <PanelROIThresholdExport\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'petSUV',\n      iconName: 'tab-patient-info',\n      iconLabel: 'Patient Info',\n      label: 'Patient Info',\n      component: wrappedPanelPetSuv,\n    },\n    {\n      name: 'tmtvBox',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation Toolbox',\n      component: wrappedROIThresholdToolbox,\n    },\n    {\n      name: 'tmtvExport',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation Export',\n      component: wrappedROIThresholdExport,\n    },\n  ];\n}\n\nexport default getPanelModule;\n","export default ['RectangleROIStartEndThreshold'];\n","import { metaData } from '@cornerstonejs/core';\n\nexport default function getSOPInstanceAttributes(imageId) {\n  if (imageId) {\n    return _getUIDFromImageID(imageId);\n  }\n}\n\nfunction _getUIDFromImageID(imageId) {\n  const instance = metaData.get('instance', imageId);\n\n  return {\n    SOPInstanceUID: instance.SOPInstanceUID,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    frameNumber: instance.frameNumber || 1,\n  };\n}\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\n\nconst RectangleROIStartEndThreshold = {\n  toAnnotation: (measurement, definition) => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\n      referencedImageId,\n      cornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      // points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: metadata.label,\n      data: data.cachedStats,\n      type: 'RectangleROIStartEndThreshold',\n    };\n  },\n};\n\nexport default RectangleROIStartEndThreshold;\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\n\nconst measurementServiceMappingsFactory = (\n  measurementService,\n  displaySetService,\n  cornerstoneViewportService\n) => {\n  return {\n    RectangleROIStartEndThreshold: {\n      toAnnotation: RectangleROIStartEndThreshold.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        RectangleROIStartEndThreshold.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService\n        ),\n      matchingCriteria: [\n        {\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\n        },\n      ],\n    },\n  };\n};\n\nexport default measurementServiceMappingsFactory;\n","import * as csTools from '@cornerstonejs/tools';\n\nfunction getRoiStats(referencedVolume, annotations) {\n  // roiStats\n  const { imageData } = referencedVolume;\n  const values = imageData.getPointData().getScalars().getData();\n\n  // Todo: add support for other strategies\n  const { fn, baseValue } = _getStrategyFn('max');\n  let value = baseValue;\n\n  const boundsIJK = csTools.utilities.rectangleROITool.getBoundsIJKFromRectangleAnnotations(\n    annotations,\n    referencedVolume\n  );\n\n  const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\n\n  for (let i = iMin; i <= iMax; i++) {\n    for (let j = jMin; j <= jMax; j++) {\n      for (let k = kMin; k <= kMax; k++) {\n        const offset = imageData.computeOffsetIndex([i, j, k]);\n        value = fn(values[offset], value);\n      }\n    }\n  }\n  return value;\n}\n\nfunction getThresholdValues(\n  annotationUIDs,\n  referencedVolumes,\n  config\n): { ptLower: number; ptUpper: number; ctLower: number; ctUpper: number } {\n  if (config.strategy === 'range') {\n    return {\n      ptLower: Number(config.ptLower),\n      ptUpper: Number(config.ptUpper),\n      ctLower: Number(config.ctLower),\n      ctUpper: Number(config.ctUpper),\n    };\n  }\n\n  const { weight } = config;\n  const annotations = annotationUIDs.map(annotationUID =>\n    csTools.annotation.state.getAnnotation(annotationUID)\n  );\n\n  const ptValue = getRoiStats(referencedVolumes[0], annotations);\n\n  return {\n    ctLower: -Infinity,\n    ctUpper: +Infinity,\n    ptLower: weight * ptValue,\n    ptUpper: +Infinity,\n  };\n}\n\nfunction _getStrategyFn(statistic): {\n  fn: (a: number, b: number) => number;\n  baseValue: number;\n} {\n  const baseValue = -Infinity;\n  const fn = (number, maxValue) => {\n    if (number > maxValue) {\n      maxValue = number;\n    }\n    return maxValue;\n  };\n  return { fn, baseValue };\n}\n\nexport default getThresholdValues;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\n\n/**\n * Given a list of labelmaps (with the possibility of overlapping regions),\n * and a referenceVolume, it calculates the total metabolic tumor volume (TMTV)\n * by flattening and rasterizing each segment into a single labelmap and summing\n * the total number of volume voxels. It should be noted that for this calculation\n * we do not double count voxels that are part of multiple labelmaps.\n * @param {} labelmaps\n * @param {number} segmentIndex\n * @returns {number} TMTV in ml\n */\nfunction calculateTMTV(labelmaps: Array<Types.IImageVolume>, segmentIndex = 1): number {\n  const volumeId = 'mergedLabelmap';\n\n  const mergedLabelmap = utilities.segmentation.createMergedLabelmapForIndex(\n    labelmaps,\n    segmentIndex,\n    volumeId\n  );\n\n  const { imageData, spacing } = mergedLabelmap;\n  const values = imageData.getPointData().getScalars().getData();\n\n  // count non-zero values inside the outputData, this would\n  // consider the overlapping regions to be only counted once\n  const numVoxels = values.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n\n  return 1e-3 * numVoxels * spacing[0] * spacing[1] * spacing[2];\n}\n\nexport default calculateTMTV;\n","import dcmjs from 'dcmjs';\nimport { classes, DicomMetadataStore } from '@ohif/core';\nimport { adaptersRT } from '@cornerstonejs/adapters';\n\nconst { datasetToBlob } = dcmjs.data;\nconst metadataProvider = classes.MetadataProvider;\n\nexport default function dicomRTAnnotationExport(annotations) {\n  const dataset = adaptersRT.Cornerstone3D.RTSS.generateRTSSFromAnnotations(\n    annotations,\n    metadataProvider,\n    DicomMetadataStore\n  );\n  const reportBlob = datasetToBlob(dataset);\n\n  //Create a URL for the binary.\n  var objectUrl = URL.createObjectURL(reportBlob);\n  window.location.assign(objectUrl);\n}\n","import dicomRTAnnotationExport from './dicomRTAnnotationExport';\n\nexport default dicomRTAnnotationExport;\n","import { vec3 } from 'gl-matrix';\nimport OHIF from '@ohif/core';\nimport * as cs from '@cornerstonejs/core';\nimport * as csTools from '@cornerstonejs/tools';\nimport { classes } from '@ohif/core';\nimport getThresholdValues from './utils/getThresholdValue';\nimport calculateTMTV from './utils/calculateTMTV';\nimport createAndDownloadTMTVReport from './utils/createAndDownloadTMTVReport';\n\nimport dicomRTAnnotationExport from './utils/dicomRTAnnotationExport/RTStructureSet';\n\nimport { getWebWorkerManager } from '@cornerstonejs/core';\n\nconst metadataProvider = classes.MetadataProvider;\nconst RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS = [\n  'RectangleROIStartEndThreshold',\n  'RectangleROIThreshold',\n];\nconst LABELMAP = csTools.Enums.SegmentationRepresentations.Labelmap;\n\nconst workerManager = getWebWorkerManager();\n\nconst options = {\n  maxWorkerInstances: 1,\n  autoTerminateOnIdle: {\n    enabled: true,\n    idleTimeThreshold: 3000,\n  },\n};\n\n// Register the task\nconst workerFn = () => {\n  return new Worker(new URL('./utils/calculateSUVPeakWorker.js', import.meta.url), {\n    name: 'suv-peak-worker', // name used by the browser to name the worker\n  });\n};\n\nconst commandsModule = ({ servicesManager, commandsManager, extensionManager }) => {\n  const {\n    viewportGridService,\n    uiNotificationService,\n    displaySetService,\n    hangingProtocolService,\n    toolGroupService,\n    cornerstoneViewportService,\n    segmentationService,\n  } = servicesManager.services;\n\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { getEnabledElement } = utilityModule.exports;\n\n  function _getActiveViewportsEnabledElement() {\n    const { activeViewportId } = viewportGridService.getState();\n    const { element } = getEnabledElement(activeViewportId) || {};\n    const enabledElement = cs.getEnabledElement(element);\n    return enabledElement;\n  }\n\n  function _getMatchedViewportsToolGroupIds() {\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n    const toolGroupIds = [];\n    viewportMatchDetails.forEach(viewport => {\n      const { viewportOptions } = viewport;\n      const { toolGroupId } = viewportOptions;\n      if (toolGroupIds.indexOf(toolGroupId) === -1) {\n        toolGroupIds.push(toolGroupId);\n      }\n    });\n\n    return toolGroupIds;\n  }\n\n  function _getAnnotationsSelectedByToolNames(toolNames) {\n    return toolNames.reduce((allAnnotationUIDs, toolName) => {\n      const annotationUIDs =\n        csTools.annotation.selection.getAnnotationsSelectedByToolName(toolName);\n\n      return allAnnotationUIDs.concat(annotationUIDs);\n    }, []);\n  }\n\n  const actions = {\n    getMatchingPTDisplaySet: ({ viewportMatchDetails }) => {\n      // Todo: this is assuming that the hanging protocol has successfully matched\n      // the correct PT. For future, we should have a way to filter out the PTs\n      // that are in the viewer layout (but then we have the problem of the attenuation\n      // corrected PT vs the non-attenuation correct PT)\n\n      let ptDisplaySet = null;\n      for (const [viewportId, viewportDetails] of viewportMatchDetails) {\n        const { displaySetsInfo } = viewportDetails;\n        const displaySets = displaySetsInfo.map(({ displaySetInstanceUID }) =>\n          displaySetService.getDisplaySetByUID(displaySetInstanceUID)\n        );\n\n        if (!displaySets || displaySets.length === 0) {\n          continue;\n        }\n\n        ptDisplaySet = displaySets.find(displaySet => displaySet.Modality === 'PT');\n\n        if (ptDisplaySet) {\n          break;\n        }\n      }\n\n      return ptDisplaySet;\n    },\n    getPTMetadata: ({ ptDisplaySet }) => {\n      const dataSource = extensionManager.getDataSources()[0];\n      const imageIds = dataSource.getImageIdsForDisplaySet(ptDisplaySet);\n\n      const firstImageId = imageIds[0];\n      const instance = metadataProvider.get('instance', firstImageId);\n      if (instance.Modality !== 'PT') {\n        return;\n      }\n\n      const metadata = {\n        SeriesTime: instance.SeriesTime,\n        Modality: instance.Modality,\n        PatientSex: instance.PatientSex,\n        PatientWeight: instance.PatientWeight,\n        RadiopharmaceuticalInformationSequence: {\n          RadionuclideTotalDose:\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\n          RadionuclideHalfLife:\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\n          RadiopharmaceuticalStartTime:\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\n          RadiopharmaceuticalStartDateTime:\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\n        },\n      };\n\n      return metadata;\n    },\n    createNewLabelmapFromPT: async ({ label }) => {\n      // Create a segmentation of the same resolution as the source data\n      // using volumeLoader.createAndCacheDerivedVolume.\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\n        viewportMatchDetails,\n      });\n\n      if (!ptDisplaySet) {\n        uiNotificationService.error('No matching PT display set found');\n        return;\n      }\n\n      const currentSegmentations = segmentationService.getSegmentations();\n\n      const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n        ptDisplaySet.displaySetInstanceUID,\n        { label: `Segmentation ${currentSegmentations.length + 1}` }\n      );\n\n      // Add Segmentation to all toolGroupIds in the viewer\n      const toolGroupIds = _getMatchedViewportsToolGroupIds();\n      const representationType = LABELMAP;\n\n      for (const toolGroupId of toolGroupIds) {\n        const hydrateSegmentation = true;\n        await segmentationService.addSegmentationRepresentationToToolGroup(\n          toolGroupId,\n          segmentationId,\n          hydrateSegmentation,\n          representationType\n        );\n\n        segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      }\n\n      segmentationService.addSegment(segmentationId, {\n        segmentIndex: 1,\n        properties: {\n          label: 'Segment 1',\n        },\n      });\n      return segmentationId;\n    },\n    setSegmentationActiveForToolGroups: ({ segmentationId }) => {\n      const toolGroupIds = _getMatchedViewportsToolGroupIds();\n\n      toolGroupIds.forEach(toolGroupId => {\n        segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      });\n    },\n    thresholdSegmentationByRectangleROITool: ({ segmentationId, config, segmentIndex }) => {\n      const segmentation = csTools.segmentation.state.getSegmentation(segmentationId);\n\n      const { representationData } = segmentation;\n      const { displaySetMatchDetails: matchDetails } = hangingProtocolService.getMatchDetails();\n      const volumeLoaderScheme = 'cornerstoneStreamingImageVolume'; // Loader id which defines which volume loader to use\n\n      const ctDisplaySet = matchDetails.get('ctDisplaySet');\n      const ctVolumeId = `${volumeLoaderScheme}:${ctDisplaySet.displaySetInstanceUID}`; // VolumeId with loader id + volume id\n\n      const { volumeId: segVolumeId } = representationData[LABELMAP];\n      const { referencedVolumeId } = cs.cache.getVolume(segVolumeId);\n\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      if (annotationUIDs.length === 0) {\n        uiNotificationService.show({\n          title: 'Commands Module',\n          message: 'No ROIThreshold Tool is Selected',\n          type: 'error',\n        });\n        return;\n      }\n\n      const labelmapVolume = cs.cache.getVolume(segmentationId);\n      let referencedVolume = cs.cache.getVolume(referencedVolumeId);\n      const ctReferencedVolume = cs.cache.getVolume(ctVolumeId);\n\n      // check if viewport is\n\n      if (!referencedVolume) {\n        throw new Error('No Reference volume found');\n      }\n\n      if (!labelmapVolume) {\n        throw new Error('No Reference labelmap found');\n      }\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUIDs[0]);\n\n      const {\n        metadata: {\n          enabledElement: { viewport },\n        },\n      } = annotation;\n\n      const showingReferenceVolume = viewport.hasVolumeId(referencedVolumeId);\n\n      if (!showingReferenceVolume) {\n        // if the reference volume is not being displayed, we can't\n        // rely on it for thresholding, we have couple of options here\n        // 1. We choose whatever volume is being displayed\n        // 2. We check if it is a fusion viewport, we pick the volume\n        // that matches the size and dimensions of the labelmap. This might\n        // happen if the 4D PT is converted to a computed volume and displayed\n        // and wants to threshold the labelmap\n        // 3. We throw an error\n        const displaySetInstanceUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\n          viewport.id\n        );\n\n        displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\n          const volume = cs.cache\n            .getVolumes()\n            .find(volume => volume.volumeId.includes(displaySetInstanceUID));\n\n          if (\n            cs.utilities.isEqual(volume.dimensions, labelmapVolume.dimensions) &&\n            cs.utilities.isEqual(volume.spacing, labelmapVolume.spacing)\n          ) {\n            referencedVolume = volume;\n          }\n        });\n      }\n\n      const { ptLower, ptUpper, ctLower, ctUpper } = getThresholdValues(\n        annotationUIDs,\n        [referencedVolume, ctReferencedVolume],\n        config\n      );\n\n      return csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n        annotationUIDs,\n        labelmapVolume,\n        [\n          { volume: referencedVolume, lower: ptLower, upper: ptUpper },\n          { volume: ctReferencedVolume, lower: ctLower, upper: ctUpper },\n        ],\n        { overwrite: true, segmentIndex }\n      );\n    },\n    calculateSuvPeak: async ({ labelmap, segmentIndex }) => {\n      // if we put it in the top, it will appear in other modes\n      workerManager.registerWorker('suv-peak-worker', workerFn, options);\n\n      const { referencedVolumeId } = labelmap;\n      const referencedVolume = cs.cache.getVolume(referencedVolumeId);\n\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      const annotations = annotationUIDs.map(annotationUID =>\n        csTools.annotation.state.getAnnotation(annotationUID)\n      );\n\n      const labelmapProps = {\n        dimensions: labelmap.dimensions,\n        origin: labelmap.origin,\n        direction: labelmap.direction,\n        spacing: labelmap.spacing,\n        scalarData: labelmap.scalarData,\n        metadata: labelmap.metadata,\n      };\n\n      const referenceVolumeProps = {\n        dimensions: referencedVolume.dimensions,\n        origin: referencedVolume.origin,\n        direction: referencedVolume.direction,\n        spacing: referencedVolume.spacing,\n        scalarData: referencedVolume.scalarData,\n        metadata: referencedVolume.metadata,\n      };\n\n      // metadata in annotations has enabledElement which is not serializable\n      // we need to remove it\n      // Todo: we should probably have a sanitization function for this\n      const annotationsToSend = annotations.map(annotation => {\n        return {\n          ...annotation,\n          metadata: {\n            ...annotation.metadata,\n            enabledElement: {\n              ...annotation.metadata.enabledElement,\n              viewport: null,\n              renderingEngine: null,\n              element: null,\n            },\n          },\n        };\n      });\n\n      const suvPeak = await workerManager.executeTask('suv-peak-worker', 'calculateSuvPeak', {\n        labelmapProps,\n        referenceVolumeProps,\n        annotations: annotationsToSend,\n        segmentIndex,\n      });\n\n      return {\n        suvPeak: suvPeak.mean,\n        suvMax: suvPeak.max,\n        suvMaxIJK: suvPeak.maxIJK,\n        suvMaxLPS: suvPeak.maxLPS,\n      };\n    },\n    getLesionStats: ({ labelmap, segmentIndex = 1 }) => {\n      const { scalarData, spacing } = labelmap;\n      const referencedScalarData = cs.cache.getVolume(labelmap.referencedVolumeId).getScalarData();\n\n      let segmentationMax = -Infinity;\n      let segmentationMin = Infinity;\n      let segmentationValues = [];\n\n      let voxelCount = 0;\n      for (let i = 0; i < scalarData.length; i++) {\n        if (scalarData[i] === segmentIndex) {\n          const value = referencedScalarData[i];\n          segmentationValues.push(value);\n          if (value > segmentationMax) {\n            segmentationMax = value;\n          }\n          if (value < segmentationMin) {\n            segmentationMin = value;\n          }\n          voxelCount++;\n        }\n      }\n\n      const stats = {\n        minValue: segmentationMin,\n        maxValue: segmentationMax,\n        meanValue: segmentationValues.reduce((a, b) => a + b, 0) / voxelCount,\n        stdValue: Math.sqrt(\n          segmentationValues.reduce((a, b) => a + b * b, 0) / voxelCount -\n            segmentationValues.reduce((a, b) => a + b, 0) / voxelCount ** 2\n        ),\n        volume: voxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3,\n      };\n\n      return stats;\n    },\n    calculateLesionGlycolysis: ({ lesionStats }) => {\n      const { meanValue, volume } = lesionStats;\n\n      return {\n        lesionGlyoclysisStats: volume * meanValue,\n      };\n    },\n    calculateTMTV: ({ segmentations }) => {\n      const labelmaps = segmentations.map(s => segmentationService.getLabelmapVolume(s.id));\n\n      if (!labelmaps.length) {\n        return;\n      }\n\n      return calculateTMTV(labelmaps);\n    },\n    exportTMTVReportCSV: ({ segmentations, tmtv, config, options }) => {\n      const segReport = commandsManager.runCommand('getSegmentationCSVReport', {\n        segmentations,\n      });\n\n      const tlg = actions.getTotalLesionGlycolysis({ segmentations });\n      const additionalReportRows = [\n        { key: 'Total Lesion Glycolysis', value: { tlg: tlg.toFixed(4) } },\n        { key: 'Threshold Configuration', value: { ...config } },\n      ];\n\n      if (tmtv !== undefined) {\n        additionalReportRows.unshift({\n          key: 'Total Metabolic Tumor Volume',\n          value: { tmtv },\n        });\n      }\n\n      createAndDownloadTMTVReport(segReport, additionalReportRows, options);\n    },\n    getTotalLesionGlycolysis: ({ segmentations }) => {\n      const labelmapVolumes = segmentations.map(s => segmentationService.getLabelmapVolume(s.id));\n\n      let mergedLabelmap;\n      // merge labelmap will through an error if labels maps are not the same size\n      // or same direction or ....\n      try {\n        mergedLabelmap =\n          csTools.utilities.segmentation.createMergedLabelmapForIndex(labelmapVolumes);\n      } catch (e) {\n        console.error('commandsModule::getTotalLesionGlycolysis', e);\n        return;\n      }\n\n      // grabbing the first labelmap referenceVolume since it will be the same for all\n      const { referencedVolumeId, spacing } = labelmapVolumes[0];\n\n      if (!referencedVolumeId) {\n        console.error('commandsModule::getTotalLesionGlycolysis:No referencedVolumeId found');\n      }\n\n      const ptVolume = cs.cache.getVolume(referencedVolumeId);\n      const mergedLabelData = mergedLabelmap.getScalarData();\n\n      if (mergedLabelData.length !== ptVolume.getScalarData().length) {\n        console.error(\n          'commandsModule::getTotalLesionGlycolysis:Labelmap and ptVolume are not the same size'\n        );\n      }\n\n      let suv = 0;\n      let totalLesionVoxelCount = 0;\n      for (let i = 0; i < mergedLabelData.length; i++) {\n        // if not background\n        if (mergedLabelData[i] !== 0) {\n          suv += ptVolume.getScalarData()[i];\n          totalLesionVoxelCount += 1;\n        }\n      }\n\n      // Average SUV for the merged labelmap\n      const averageSuv = suv / totalLesionVoxelCount;\n\n      // total Lesion Glycolysis [suv * ml]\n      return averageSuv * totalLesionVoxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3;\n    },\n    setStartSliceForROIThresholdTool: () => {\n      const { viewport } = _getActiveViewportsEnabledElement();\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      const annotationUID = selectedAnnotationUIDs[0];\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\n\n      const { handles } = annotation.data;\n      const { points } = handles;\n\n      // get the current slice Index\n      const sliceIndex = viewport.getCurrentImageIdIndex();\n      annotation.data.startSlice = sliceIndex;\n\n      // distance between camera focal point and each point on the rectangle\n      const newPoints = points.map(point => {\n        const distance = vec3.create();\n        vec3.subtract(distance, focalPoint, point);\n        // distance in the direction of the viewPlaneNormal\n        const distanceInViewPlane = vec3.dot(distance, viewPlaneNormal);\n        // new point is current point minus distanceInViewPlane\n        const newPoint = vec3.create();\n        vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, distanceInViewPlane);\n\n        return newPoint;\n        //\n      });\n\n      handles.points = newPoints;\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\n      // and re-calculate the projection points\n      annotation.invalidated = true;\n      viewport.render();\n    },\n    setEndSliceForROIThresholdTool: () => {\n      const { viewport } = _getActiveViewportsEnabledElement();\n\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\n      );\n\n      const annotationUID = selectedAnnotationUIDs[0];\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\n\n      // get the current slice Index\n      const sliceIndex = viewport.getCurrentImageIdIndex();\n      annotation.data.endSlice = sliceIndex;\n\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\n      // and re-calculate the projection points\n      annotation.invalidated = true;\n\n      viewport.render();\n    },\n    createTMTVRTReport: () => {\n      // get all Rectangle ROI annotation\n      const stateManager = csTools.annotation.state.getAnnotationManager();\n\n      const annotations = [];\n\n      Object.keys(stateManager.annotations).forEach(frameOfReferenceUID => {\n        const forAnnotations = stateManager.annotations[frameOfReferenceUID];\n        const ROIAnnotations = RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS.reduce(\n          (annotations, toolName) => [...annotations, ...(forAnnotations[toolName] ?? [])],\n          []\n        );\n\n        annotations.push(...ROIAnnotations);\n      });\n\n      commandsManager.runCommand('exportRTReportForAnnotations', {\n        annotations,\n      });\n    },\n    getSegmentationCSVReport: ({ segmentations }) => {\n      if (!segmentations || !segmentations.length) {\n        segmentations = segmentationService.getSegmentations();\n      }\n\n      let report = {};\n\n      for (const segmentation of segmentations) {\n        const { id, label, cachedStats: data } = segmentation;\n\n        const segReport = { id, label };\n\n        if (!data) {\n          report[id] = segReport;\n          continue;\n        }\n\n        Object.keys(data).forEach(key => {\n          if (typeof data[key] !== 'object') {\n            segReport[key] = data[key];\n          } else {\n            Object.keys(data[key]).forEach(subKey => {\n              const newKey = `${key}_${subKey}`;\n              segReport[newKey] = data[key][subKey];\n            });\n          }\n        });\n\n        const labelmapVolume = segmentationService.getLabelmapVolume(id);\n\n        if (!labelmapVolume) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const referencedVolumeId = labelmapVolume.referencedVolumeId;\n        segReport.referencedVolumeId = referencedVolumeId;\n\n        const referencedVolume = segmentationService.getLabelmapVolume(referencedVolumeId);\n\n        if (!referencedVolume) {\n          report[id] = segReport;\n          continue;\n        }\n\n        if (!referencedVolume.imageIds || !referencedVolume.imageIds.length) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const firstImageId = referencedVolume.imageIds[0];\n        const instance = OHIF.classes.MetadataProvider.get('instance', firstImageId);\n\n        if (!instance) {\n          report[id] = segReport;\n          continue;\n        }\n\n        report[id] = {\n          ...segReport,\n          PatientID: instance.PatientID ?? '000000',\n          PatientName: instance.PatientName.Alphabetic,\n          StudyInstanceUID: instance.StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          StudyDate: instance.StudyDate,\n        };\n      }\n\n      return report;\n    },\n    exportRTReportForAnnotations: ({ annotations }) => {\n      dicomRTAnnotationExport(annotations);\n    },\n    setFusionPTColormap: ({ toolGroupId, colormap }) => {\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\n        viewportMatchDetails,\n      });\n\n      if (!ptDisplaySet) {\n        return;\n      }\n\n      const fusionViewportIds = toolGroup.getViewportIds();\n\n      let viewports = [];\n      fusionViewportIds.forEach(viewportId => {\n        commandsManager.runCommand('setViewportColormap', {\n          viewportId,\n          displaySetInstanceUID: ptDisplaySet.displaySetInstanceUID,\n          colormap: {\n            name: colormap,\n          },\n        });\n\n        viewports.push(cornerstoneViewportService.getCornerstoneViewport(viewportId));\n      });\n\n      viewports.forEach(viewport => {\n        viewport.render();\n      });\n    },\n  };\n\n  const definitions = {\n    setEndSliceForROIThresholdTool: {\n      commandFn: actions.setEndSliceForROIThresholdTool,\n    },\n    setStartSliceForROIThresholdTool: {\n      commandFn: actions.setStartSliceForROIThresholdTool,\n    },\n    getMatchingPTDisplaySet: {\n      commandFn: actions.getMatchingPTDisplaySet,\n    },\n    getPTMetadata: {\n      commandFn: actions.getPTMetadata,\n    },\n    createNewLabelmapFromPT: {\n      commandFn: actions.createNewLabelmapFromPT,\n    },\n    setSegmentationActiveForToolGroups: {\n      commandFn: actions.setSegmentationActiveForToolGroups,\n    },\n    thresholdSegmentationByRectangleROITool: {\n      commandFn: actions.thresholdSegmentationByRectangleROITool,\n    },\n    getTotalLesionGlycolysis: {\n      commandFn: actions.getTotalLesionGlycolysis,\n    },\n    calculateSuvPeak: {\n      commandFn: actions.calculateSuvPeak,\n    },\n    getLesionStats: {\n      commandFn: actions.getLesionStats,\n    },\n    calculateTMTV: {\n      commandFn: actions.calculateTMTV,\n    },\n    exportTMTVReportCSV: {\n      commandFn: actions.exportTMTVReportCSV,\n    },\n    createTMTVRTReport: {\n      commandFn: actions.createTMTVRTReport,\n    },\n    getSegmentationCSVReport: {\n      commandFn: actions.getSegmentationCSVReport,\n    },\n    exportRTReportForAnnotations: {\n      commandFn: actions.exportRTReportForAnnotations,\n    },\n    setFusionPTColormap: {\n      commandFn: actions.setFusionPTColormap,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'TMTV:CORNERSTONE',\n  };\n};\n\nexport default commandsModule;\n","export default function createAndDownloadTMTVReport(segReport, additionalReportRows, options = {}) {\n  const firstReport = segReport[Object.keys(segReport)[0]];\n  const columns = Object.keys(firstReport);\n  const csv = [columns.join(',')];\n\n  Object.values(segReport).forEach(segmentation => {\n    const row = [];\n    columns.forEach(column => {\n      // if it is array then we need to replace , with space to avoid csv parsing error\n      row.push(\n        Array.isArray(segmentation[column]) ? segmentation[column].join(' ') : segmentation[column]\n      );\n    });\n    csv.push(row.join(','));\n  });\n\n  csv.push('');\n  csv.push('');\n  csv.push('');\n\n  csv.push(`Patient ID,${firstReport.PatientID}`);\n  csv.push(`Study Date,${firstReport.StudyDate}`);\n  csv.push('');\n  additionalReportRows.forEach(({ key, value: values }) => {\n    const temp = [];\n    temp.push(`${key}`);\n    Object.keys(values).forEach(k => {\n      temp.push(`${k}`);\n      temp.push(`${values[k]}`);\n    });\n\n    csv.push(temp.join(','));\n  });\n\n  const blob = new Blob([csv.join('\\n')], {\n    type: 'text/csv;charset=utf-8',\n  });\n\n  const url = URL.createObjectURL(blob);\n\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = options.filename ?? `${firstReport.PatientID}_tmtv.csv`;\n  a.click();\n}\n","import React from 'react';\nimport { Input, Label, Select, LegacyButton, LegacyButtonGroup } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\n\nexport const ROI_STAT = 'roi_stat';\nconst RANGE = 'range';\n\nconst options = [\n  { value: ROI_STAT, label: 'Max', placeHolder: 'Max' },\n  { value: RANGE, label: 'Range', placeHolder: 'Range' },\n];\n\nfunction ROIThresholdConfiguration({ config, dispatch, runCommand }) {\n  const { t } = useTranslation('ROIThresholdConfiguration');\n\n  return (\n    <div className=\"bg-primary-dark flex flex-col space-y-4\">\n      <div className=\"flex items-end space-x-2\">\n        <div className=\"flex w-1/2 flex-col\">\n          <Select\n            label={t('Strategy')}\n            closeMenuOnSelect={true}\n            className=\"border-primary-main mr-2 bg-black text-white \"\n            options={options}\n            placeholder={options.find(option => option.value === config.strategy).placeHolder}\n            value={config.strategy}\n            onChange={({ value }) => {\n              dispatch({\n                type: 'setStrategy',\n                payload: {\n                  strategy: value,\n                },\n              });\n            }}\n          />\n        </div>\n        <div className=\"w-1/2\">\n          {/* TODO Revisit design of LegacyButtonGroup later - for now use LegacyButton for its children.*/}\n          <LegacyButtonGroup>\n            <LegacyButton\n              size=\"initial\"\n              className=\"px-2 py-2 text-base text-white\"\n              color=\"primaryLight\"\n              variant=\"outlined\"\n              onClick={() => runCommand('setStartSliceForROIThresholdTool')}\n            >\n              {t('Start')}\n            </LegacyButton>\n            <LegacyButton\n              size=\"initial\"\n              color=\"primaryLight\"\n              variant=\"outlined\"\n              className=\"px-2 py-2 text-base text-white\"\n              onClick={() => runCommand('setEndSliceForROIThresholdTool')}\n            >\n              {t('End')}\n            </LegacyButton>\n          </LegacyButtonGroup>\n        </div>\n      </div>\n\n      {config.strategy === ROI_STAT && (\n        <Input\n          label={t('Percentage of Max SUV')}\n          labelClassName=\"text-[13px] font-inter text-white\"\n          className=\"border-primary-main bg-black\"\n          type=\"text\"\n          containerClassName=\"mr-2\"\n          value={config.weight}\n          onChange={e => {\n            dispatch({\n              type: 'setWeight',\n              payload: {\n                weight: e.target.value,\n              },\n            });\n          }}\n        />\n      )}\n      {config.strategy !== ROI_STAT && (\n        <div className=\"mr-2 text-sm\">\n          <table>\n            <tbody>\n              <tr className=\"mt-2\">\n                <td\n                  className=\"pr-4\"\n                  colSpan=\"3\"\n                >\n                  <Label\n                    className=\"font-inter text-[13px] text-white\"\n                    text=\"Lower & Upper Ranges\"\n                  ></Label>\n                </td>\n              </tr>\n              <tr className=\"mt-2\">\n                <td className=\"pr-4 pt-2 text-center\">\n                  <Label\n                    className=\"text-white\"\n                    text=\"CT\"\n                  ></Label>\n                </td>\n                <td>\n                  <div className=\"flex justify-between\">\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"border-primary-main mt-2 bg-black\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ctLower}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ctLower: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"border-primary-main mt-2 bg-black\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ctUpper}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ctUpper: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                  </div>\n                </td>\n              </tr>\n              <tr>\n                <td className=\"pr-4 pt-2 text-center\">\n                  <Label\n                    className=\"text-white\"\n                    text=\"PT\"\n                  ></Label>\n                </td>\n                <td>\n                  <div className=\"flex justify-between\">\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"border-primary-main mt-2 bg-black\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ptLower}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ptLower: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"border-primary-main mt-2 bg-black\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ptUpper}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ptUpper: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ROIThresholdConfiguration;\n","import React, { useState, useCallback, useReducer, useEffect } from 'react';\nimport { Button } from '@ohif/ui';\nimport ROIThresholdConfiguration, {\n  ROI_STAT,\n} from './PanelROIThresholdSegmentation/ROIThresholdConfiguration';\nimport * as cs3dTools from '@cornerstonejs/tools';\n\nconst LOWER_CT_THRESHOLD_DEFAULT = -1024;\nconst UPPER_CT_THRESHOLD_DEFAULT = 1024;\nconst LOWER_PT_THRESHOLD_DEFAULT = 2.5;\nconst UPPER_PT_THRESHOLD_DEFAULT = 100;\nconst WEIGHT_DEFAULT = 0.41; // a default weight for suv max often used in the literature\nconst DEFAULT_STRATEGY = ROI_STAT;\n\nfunction reducer(state, action) {\n  const { payload } = action;\n  const { strategy, ctLower, ctUpper, ptLower, ptUpper, weight } = payload;\n\n  switch (action.type) {\n    case 'setStrategy':\n      return {\n        ...state,\n        strategy,\n      };\n    case 'setThreshold':\n      return {\n        ...state,\n        ctLower: ctLower ? ctLower : state.ctLower,\n        ctUpper: ctUpper ? ctUpper : state.ctUpper,\n        ptLower: ptLower ? ptLower : state.ptLower,\n        ptUpper: ptUpper ? ptUpper : state.ptUpper,\n      };\n    case 'setWeight':\n      return {\n        ...state,\n        weight,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction RectangleROIOptions({ servicesManager, commandsManager }) {\n  const { segmentationService } = servicesManager.services;\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n\n  const runCommand = useCallback(\n    (commandName, commandOptions = {}) => {\n      return commandsManager.runCommand(commandName, commandOptions);\n    },\n    [commandsManager]\n  );\n\n  const [config, dispatch] = useReducer(reducer, {\n    strategy: DEFAULT_STRATEGY,\n    ctLower: LOWER_CT_THRESHOLD_DEFAULT,\n    ctUpper: UPPER_CT_THRESHOLD_DEFAULT,\n    ptLower: LOWER_PT_THRESHOLD_DEFAULT,\n    ptUpper: UPPER_PT_THRESHOLD_DEFAULT,\n    weight: WEIGHT_DEFAULT,\n  });\n\n  const handleROIThresholding = useCallback(() => {\n    const segmentationId = selectedSegmentationId;\n    const activeSegmentIndex =\n      cs3dTools.segmentation.segmentIndex.getActiveSegmentIndex(segmentationId);\n\n    // run the threshold based on the active segment index\n    // Todo: later find a way to associate each rectangle with a segment (e.g., maybe with color?)\n    runCommand('thresholdSegmentationByRectangleROITool', {\n      segmentationId,\n      config,\n      segmentIndex: activeSegmentIndex,\n    });\n  }, [selectedSegmentationId, config]);\n\n  useEffect(() => {\n    const segmentations = segmentationService.getSegmentations();\n\n    if (!segmentations.length) {\n      return;\n    }\n\n    const isActive = segmentations.find(seg => seg.isActive);\n    setSelectedSegmentationId(isActive.id);\n  }, []);\n\n  /**\n   * Update UI based on segmentation changes (added, removed, updated)\n   */\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const subscriptions = [];\n\n    [added, updated].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n\n        if (!segmentations.length) {\n          return;\n        }\n\n        const isActive = segmentations.find(seg => seg.isActive);\n        setSelectedSegmentationId(isActive.id);\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  return (\n    <div className=\"invisible-scrollbar mb-2 flex flex-col overflow-y-auto overflow-x-hidden\">\n      <ROIThresholdConfiguration\n        config={config}\n        dispatch={dispatch}\n        runCommand={runCommand}\n      />\n      {selectedSegmentationId !== null && (\n        <Button\n          className=\"mt-2 !h-[26px] !w-[75px]\"\n          onClick={handleROIThresholding}\n        >\n          Run\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default RectangleROIOptions;\n","import { id } from './id';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport init from './init';\nimport commandsModule from './commandsModule';\nimport getToolbarModule from './getToolbarModule';\n\n/**\n *\n */\nconst tmtvExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  preRegistration({ servicesManager, commandsManager, extensionManager, configuration = {} }) {\n    init({ servicesManager, commandsManager, extensionManager, configuration });\n  },\n  getToolbarModule,\n  getPanelModule,\n  getHangingProtocolModule,\n  getCommandsModule({ servicesManager, commandsManager, extensionManager }) {\n    return commandsModule({\n      servicesManager,\n      commandsManager,\n      extensionManager,\n    });\n  },\n};\n\nexport default tmtvExtension;\n","import { addTool, RectangleROIStartEndThresholdTool } from '@cornerstonejs/tools';\n\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\n\nconst CORNERSTONE_3D_TOOLS_SOURCE_NAME = 'Cornerstone3DTools';\nconst CORNERSTONE_3D_TOOLS_SOURCE_VERSION = '0.1';\n/**\n *\n * @param {Object} servicesManager\n * @param {Object} configuration\n * @param {Object|Array} configuration.csToolsConfig\n */\nexport default function init({ servicesManager }) {\n  const { measurementService, displaySetService, cornerstoneViewportService } =\n    servicesManager.services;\n\n  addTool(RectangleROIStartEndThresholdTool);\n\n  const { RectangleROIStartEndThreshold } = measurementServiceMappingsFactory(\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService\n  );\n\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'RectangleROIStartEndThreshold',\n    RectangleROIStartEndThreshold.matchingCriteria,\n    RectangleROIStartEndThreshold.toAnnotation,\n    RectangleROIStartEndThreshold.toMeasurement\n  );\n}\n","import RectangleROIOptions from './Panels/RectangleROIOptions';\n\nexport default function getToolbarModule({ commandsManager, servicesManager }) {\n  return [\n    {\n      name: 'tmtv.RectangleROIThresholdOptions',\n      defaultComponent: () => RectangleROIOptions({ commandsManager, servicesManager }),\n    },\n  ];\n}\n"],"names":["id","packageJson","ctAXIAL","viewportOptions","viewportId","viewportType","orientation","toolGroupId","initialImageOptions","preset","syncGroups","type","source","target","options","syncColormap","displaySets","ctSAGITTAL","ctCORONAL","ptAXIAL","background","syncInvertState","voi","custom","voiInverted","ptSAGITTAL","ptCORONAL","fusionAXIAL","colormap","name","opacity","value","fusionSAGITTAL","fusionCORONAL","mipSAGITTAL","customViewportProps","hideOverlays","blendMode","slabThickness","ptCT","locked","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","displaySetSelectors","ctDisplaySet","seriesMatchingRules","equals","required","ptDisplaySet","weight","doesNotContain","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","x","y","width","height","viewports","numberOfPriorsReferenced","protocol","DEFAULT_MEATADATA","PatientWeight","PatientSex","SeriesTime","RadiopharmaceuticalInformationSequence","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartTime","PanelPetSUV","servicesManager","commandsManager","t","useTranslation","displaySetService","toolGroupService","toolbarService","hangingProtocolService","services","metadata","setMetadata","useState","setPtDisplaySet","handleMetadataChange","prevState","newState","Object","keys","forEach","key","getMatchingPTDisplaySet","viewportMatchDetails","runCommand","useEffect","getActiveDisplaySets","getMatchDetails","length","displaySetInfo","unsubscribe","subscribe","EVENTS","PROTOCOL_CHANGED","React","className","PanelSection","title","Input","containerClassName","label","labelClassName","onChange","e","labelChildren","Button","onClick","Error","DicomMetadataStore","updateMetadataForSeries","StudyInstanceUID","SeriesInstanceUID","setDisplaySetMetadataInvalidated","displaySetInstanceUID","setTimeout","propTypes","PropTypes","measurementService","getMeasurements","isRequired","VALUE_TYPES","PanelRoiThresholdSegmentation","segmentationService","uiNotificationService","segmentations","setSegmentations","getSegmentations","activeSegmentation","setActiveSegmentation","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","evt","filter","seg","isActive","push","unsub","callback","async","detail","segmentationId","config","segmentation","getSegmentation","updatedPerSegmentCachedStats","segments","Promise","all","map","segment","segmentIndex","labelmap","cache","getVolume","lesionStats","run","suvPeak","cachedStats","lesionGlyoclysisStats","volume","meanValue","displayText","toFixed","tmtv","assign","addOrUpdateSegmentation","handleROIThresholding","Number","isNaN","show","message","eventTarget","addEventListenerDebounced","Enums","SEGMENTATION_DATA_MODIFIED","removeEventListenerDebounced","tmtvValue","actions","disabled","ActionButtons","window","open","Icon","toggleSegmentationVisibility","extensionManager","iconName","iconLabel","component","wrappedPanelPetSuv","wrappedROIThresholdToolbox","Toolbox","buttonSectionId","wrappedROIThresholdExport","PanelROIThresholdExport","getSOPInstanceAttributes","imageId","instance","metaData","SOPInstanceUID","frameNumber","_getUIDFromImageID","toAnnotation","measurement","definition","toMeasurement","csToolsEventDetail","cornerstoneViewportService","annotation","data","annotationUID","console","warn","toolName","referencedImageId","FrameOfReferenceUID","SUPPORTED_TOOLS","includes","displaySet","getDisplaySetForSOPInstanceUID","getDisplaySetsForSeries","uid","referenceSeriesUID","referenceStudyUID","measurementServiceMappingsFactory","RectangleROIStartEndThreshold","csToolsAnnotation","matchingCriteria","valueType","ROI_THRESHOLD_MANUAL","getRoiStats","referencedVolume","annotations","imageData","values","getPointData","getScalars","getData","fn","baseValue","statistic","Infinity","number","maxValue","_getStrategyFn","boundsIJK","csTools","iMin","iMax","jMin","jMax","kMin","kMax","i","j","k","computeOffsetIndex","annotationUIDs","referencedVolumes","strategy","ptLower","ptUpper","ctLower","ctUpper","labelmaps","mergedLabelmap","utilities","spacing","reduce","acc","curr","datasetToBlob","dcmjs","metadataProvider","classes","MetadataProvider","dataset","adaptersRT","Cornerstone3D","RTSS","generateRTSSFromAnnotations","reportBlob","objectUrl","URL","createObjectURL","location","RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS","LABELMAP","Labelmap","workerManager","getWebWorkerManager","maxWorkerInstances","autoTerminateOnIdle","enabled","idleTimeThreshold","workerFn","Worker","commandsModule","viewportGridService","utilityModule","getModuleEntry","getEnabledElement","exports","_getActiveViewportsEnabledElement","activeViewportId","getState","element","cs","_getMatchedViewportsToolGroupIds","toolGroupIds","viewport","indexOf","_getAnnotationsSelectedByToolNames","toolNames","allAnnotationUIDs","concat","viewportDetails","displaySetsInfo","getDisplaySetByUID","find","Modality","getPTMetadata","firstImageId","getDataSources","getImageIdsForDisplaySet","get","RadiopharmaceuticalStartDateTime","createNewLabelmapFromPT","error","currentSegmentations","createSegmentationForDisplaySet","representationType","hydrateSegmentation","addSegmentationRepresentationToToolGroup","setActiveSegmentationForToolGroup","addSegment","setSegmentationActiveForToolGroups","thresholdSegmentationByRectangleROITool","representationData","displaySetMatchDetails","matchDetails","ctVolumeId","volumeId","segVolumeId","referencedVolumeId","labelmapVolume","ctReferencedVolume","enabledElement","hasVolumeId","getDisplaySetsUIDsForViewport","getVolumes","dimensions","getThresholdValues","lower","upper","overwrite","calculateSuvPeak","registerWorker","labelmapProps","origin","direction","scalarData","referenceVolumeProps","annotationsToSend","renderingEngine","executeTask","mean","suvMax","max","suvMaxIJK","maxIJK","suvMaxLPS","maxLPS","getLesionStats","referencedScalarData","getScalarData","segmentationMax","segmentationMin","segmentationValues","voxelCount","minValue","a","b","stdValue","Math","sqrt","calculateLesionGlycolysis","calculateTMTV","s","getLabelmapVolume","exportTMTVReportCSV","segReport","additionalReportRows","tlg","getTotalLesionGlycolysis","undefined","unshift","firstReport","csv","join","row","column","Array","isArray","PatientID","StudyDate","temp","blob","Blob","url","document","createElement","href","download","filename","click","createAndDownloadTMTVReport","labelmapVolumes","ptVolume","mergedLabelData","suv","totalLesionVoxelCount","setStartSliceForROIThresholdTool","focalPoint","viewPlaneNormal","getCamera","handles","points","sliceIndex","getCurrentImageIdIndex","startSlice","newPoints","point","distance","vec3","distanceInViewPlane","newPoint","invalidated","render","setEndSliceForROIThresholdTool","endSlice","createTMTVRTReport","stateManager","frameOfReferenceUID","forAnnotations","ROIAnnotations","getSegmentationCSVReport","report","subKey","imageIds","OHIF","PatientName","Alphabetic","exportRTReportForAnnotations","dicomRTAnnotationExport","setFusionPTColormap","toolGroup","getToolGroup","fusionViewportIds","getViewportIds","getCornerstoneViewport","definitions","commandFn","defaultContext","ROI_STAT","placeHolder","dispatch","Select","closeMenuOnSelect","placeholder","option","payload","LegacyButtonGroup","LegacyButton","size","color","variant","colSpan","Label","text","DEFAULT_STRATEGY","reducer","state","action","selectedSegmentationId","setSelectedSegmentationId","useCallback","commandName","commandOptions","useReducer","activeSegmentIndex","cs3dTools","ROIThresholdConfiguration","tmtvExtension","preRegistration","configuration","addTool","RectangleROIStartEndThresholdTool","csTools3DVer1MeasurementSource","getSource","addMapping","init","getToolbarModule","defaultComponent","RectangleROIOptions","getPanelModule","getHangingProtocolModule","getCommandsModule"],"sourceRoot":""}