{"version":3,"file":"2932.bundle.4b1a49548668859419d8.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptWrapperFunctions.ts","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/untrackSeriesModal.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHasDirtyAnnotations.ts","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.ts","webpack:///../../../extensions/measurement-tracking/src/customizations/measurementTrackingPrompts.tsx","webpack:///../../../extensions/measurement-tracking/src/customizations/studyBrowserCustomization.ts","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/getCustomizationModule.ts"],"sourcesContent":["import i18n from 'i18next';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n};\r\n\r\nexport const measurementTrackingMode = {\r\n  STANDARD: 'standard',\r\n  SIMPLIFIED: 'simplified',\r\n  NONE: 'none',\r\n};\r\n\r\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n  const appConfig = extensionManager._appConfig;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const standardMode = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    const noTrackingMode = appConfig?.measurementTrackingMode === measurementTrackingMode.NONE;\r\n    let promptResult;\r\n\r\n    promptResult = noTrackingMode\r\n      ? RESPONSE.NO_NEVER\r\n      : standardMode\r\n        ? await _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.beginTrackingMessage'\r\n    );\r\n    const actions = [\r\n      {\r\n        id: 'prompt-begin-tracking-cancel',\r\n        type: 'secondary',\r\n        text: i18n.t('Common:No'),\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\r\n        type: 'secondary',\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NEVER,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-yes',\r\n        type: 'primary',\r\n        text: i18n.t('Common:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-begin-tracking',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.id === 'prompt-begin-tracking-yes');\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptBeginTracking;\r\n","import { assign } from 'xstate';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nconst machineConfiguration = {\r\n  id: 'measurementTracking',\r\n  initial: 'idle',\r\n  context: {\r\n    activeViewportId: null,\r\n    trackedStudy: '',\r\n    trackedSeries: [],\r\n    ignoredSeries: [],\r\n    //\r\n    prevTrackedStudy: '',\r\n    prevTrackedSeries: [],\r\n    prevIgnoredSeries: [],\r\n    //\r\n    ignoredSRSeriesForHydration: [],\r\n    isDirty: false,\r\n  },\r\n  states: {\r\n    off: {\r\n      type: 'final',\r\n    },\r\n    labellingOnly: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    idle: {\r\n      entry: 'clearContext',\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            actions: ['setPreviousState'],\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\r\n          },\r\n        ],\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'hasNotIgnoredSRSeriesForHydration',\r\n        },\r\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\r\n        HYDRATE_SR: 'hydrateStructuredReport',\r\n        UPDATE_ACTIVE_VIEWPORT_ID: {\r\n          actions: assign({\r\n            activeViewportId: (_, event) => event.activeViewportId,\r\n          }),\r\n        },\r\n      },\r\n    },\r\n    promptBeginTracking: {\r\n      invoke: {\r\n        src: 'promptBeginTracking',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'isLabelOnMeasureAndShouldKillMachine',\r\n          },\r\n          {\r\n            target: 'off',\r\n            cond: 'shouldKillMachine',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    tracking: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'isNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'isNewSeries',\r\n          },\r\n        ],\r\n        UNTRACK_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['removeTrackedSeries', 'setIsDirty', 'clearDisplaySetHydratedState'],\r\n            cond: 'hasRemainingTrackedSeries',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        UNTRACK_ALL: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearContext',\r\n              'setIsDirtyToClean',\r\n              'clearDisplaySetHydratedState',\r\n              'clearAllMeasurements',\r\n            ],\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries'],\r\n          },\r\n        ],\r\n        SAVE_REPORT: 'promptSaveReport',\r\n        SET_DIRTY: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setIsDirty'],\r\n            cond: 'shouldSetDirty',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        CHECK_DIRTY: {\r\n          target: 'promptHasDirtyAnnotations',\r\n          cond: 'hasDirtyAndSimplified',\r\n        },\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'isSimplifiedConfig',\r\n          actions: ['clearAllMeasurements', 'clearDisplaySetHydratedState'],\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewSeries: {\r\n      invoke: {\r\n        src: 'promptTrackNewSeries',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['addTrackedSeries', 'setIsDirty'],\r\n            cond: 'shouldAddSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewStudy: {\r\n      invoke: {\r\n        src: 'promptTrackNewStudy',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: ['ignoreSeries'],\r\n            cond: 'shouldAddIgnoredSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptSaveReport: {\r\n      invoke: {\r\n        src: 'promptSaveReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearAllMeasurements',\r\n              'clearDisplaySetHydratedState',\r\n              'setIsDirty',\r\n              'updatedViewports',\r\n            ],\r\n            cond: 'simplifiedAndLoadSR',\r\n          },\r\n          // \"clicked the save button\"\r\n          // - should clear all measurements\r\n          // - show DICOM SR\r\n          {\r\n            target: 'idle',\r\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\r\n            cond: 'shouldSaveAndContinueWithSameReport',\r\n          },\r\n          // \"starting a new report\"\r\n          // - remove \"just saved\" measurements\r\n          // - start tracking a new study + report\r\n          {\r\n            target: 'tracking',\r\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\r\n            cond: 'shouldSaveAndStartNewReport',\r\n          },\r\n          // Cancel, back to tracking\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptHydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'promptHydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n            cond: 'shouldHydrateStructuredReport',\r\n          },\r\n          {\r\n            target: 'idle',\r\n            actions: ['ignoreHydrationForSRSeries'],\r\n            cond: 'shouldIgnoreHydrationForSR',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    hydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'hydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptLabelAnnotation: {\r\n      invoke: {\r\n        src: 'promptLabelAnnotation',\r\n        onDone: [\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'wasLabellingOnly',\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            cond: 'wasIdle',\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'wasTrackingAndIsNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'wasTrackingAndIsNewSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            cond: 'wasTracking',\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    promptHasDirtyAnnotations: {\r\n      invoke: {\r\n        src: 'promptHasDirtyAnnotations',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'clearAllMeasurements',\r\n              'clearDisplaySetHydratedState',\r\n              'setIsDirty',\r\n              'updatedViewports',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          { target: 'tracking' },\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  strict: true,\r\n};\r\n\r\nconst defaultOptions = {\r\n  services: {\r\n    promptBeginTracking: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewStudy: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewSeries: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n  },\r\n  actions: {\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      console.log('clearAllMeasurements: not implemented');\r\n    },\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\r\n    },\r\n    clearContext: assign({\r\n      trackedStudy: '',\r\n      trackedSeries: [],\r\n      ignoredSeries: [],\r\n      prevTrackedStudy: '',\r\n      prevTrackedSeries: [],\r\n      prevIgnoredSeries: [],\r\n    }),\r\n    // Promise resolves w/ `evt.data.*`\r\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\r\n      prevTrackedStudy: ctx.trackedStudy,\r\n      prevTrackedSeries: ctx.trackedSeries.slice(),\r\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n      //\r\n      trackedStudy: evt.data.StudyInstanceUID,\r\n      trackedSeries: [evt.data.SeriesInstanceUID],\r\n      ignoredSeries: [],\r\n    })),\r\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\r\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\r\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\r\n\r\n      return {\r\n        prevTrackedStudy: ctx.trackedStudy,\r\n        prevTrackedSeries: ctx.trackedSeries.slice(),\r\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n        //\r\n        trackedStudy: studyInstanceUID,\r\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\r\n        ignoredSeries: [],\r\n      };\r\n    }),\r\n    setIsDirtyToClean: assign((ctx, evt) => ({\r\n      isDirty: false,\r\n    })),\r\n    setIsDirty: assign((ctx, evt) => ({\r\n      isDirty: true,\r\n    })),\r\n    ignoreSeries: assign((ctx, evt) => ({\r\n      prevIgnoredSeries: [...ctx.ignoredSeries],\r\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\r\n      ignoredSRSeriesForHydration: [\r\n        ...ctx.ignoredSRSeriesForHydration,\r\n        evt.data.srSeriesInstanceUID,\r\n      ],\r\n    })),\r\n    addTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: [...ctx.trackedSeries],\r\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    removeTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n    })),\r\n    setPreviousState: assign((ctx, evt, meta) => {\r\n      return {\r\n        prevState: meta.state.value,\r\n      };\r\n    }),\r\n  },\r\n  guards: {\r\n    // We set dirty any time we performan an action that:\r\n    // - Tracks a new study\r\n    // - Tracks a new series\r\n    // - Adds a measurement to an already tracked study/series\r\n    //\r\n    // We set clean any time we restore from an SR\r\n    //\r\n    // This guard/condition is specific to \"new measurements\"\r\n    // to make sure we only track dirty when the new measurement is specific\r\n    // to a series we're already tracking\r\n    //\r\n    // tl;dr\r\n    // Any report change, that is not a hydration of an existing report, should\r\n    // result in a \"dirty\" report\r\n    //\r\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\r\n    // without creating a new SR.\r\n    shouldSetDirty: (ctx, evt) => {\r\n      return (\r\n        // When would this happen?\r\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\r\n      );\r\n    },\r\n    wasLabellingOnly: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'labellingOnly';\r\n    },\r\n    wasIdle: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'idle';\r\n    },\r\n    wasTracking: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'tracking';\r\n    },\r\n    wasTrackingAndIsNewStudy: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        ctx.trackedStudy !== evt.data.StudyInstanceUID\r\n      );\r\n    },\r\n    wasTrackingAndIsNewSeries: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        !ctx.trackedSeries.includes(evt.data.SeriesInstanceUID)\r\n      );\r\n    },\r\n\r\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\r\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\r\n    shouldSetStudyAndSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\r\n    shouldAddIgnoredSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\r\n    shouldPromptSaveReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\r\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\r\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === true,\r\n    shouldSaveAndStartNewReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === false,\r\n    shouldHydrateStructuredReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\r\n    // Has more than 1, or SeriesInstanceUID is not in list\r\n    // --> Post removal would have non-empty trackedSeries array\r\n    hasRemainingTrackedSeries: (ctx, evt) =>\r\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\r\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\r\n    },\r\n    isNewStudy: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      ctx.trackedStudy !== evt.StudyInstanceUID,\r\n    isNewSeries: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n  },\r\n};\r\n\r\nexport { defaultOptions, machineConfiguration, RESPONSE };\r\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nfunction hydrateStructuredReport(\r\n  { servicesManager, extensionManager, commandsManager, appConfig }: withAppTypes,\r\n  ctx,\r\n  evt\r\n) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const hydrationResult = baseHydrateStructuredReport(\r\n      { servicesManager, extensionManager, commandsManager, appConfig },\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n\r\n    resolve({\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nexport default hydrateStructuredReport;\r\n","const promptBeginTrackingWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptBeginTracking = customizationService.getCustomization(\r\n    'measurement.promptBeginTracking'\r\n  );\r\n  return promptBeginTracking({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptHydrateStructuredReportWrapper = (\r\n  { servicesManager, extensionManager, commandsManager, appConfig },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptHydrateStructuredReport = customizationService.getCustomization(\r\n    'measurement.promptHydrateStructuredReport'\r\n  );\r\n  return promptHydrateStructuredReport(\r\n    { servicesManager, extensionManager, commandsManager, appConfig },\r\n    ctx,\r\n    evt\r\n  );\r\n};\r\n\r\nconst promptTrackNewSeriesWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptTrackNewSeries = customizationService.getCustomization(\r\n    'measurement.promptTrackNewSeries'\r\n  );\r\n  return promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptTrackNewStudyWrapper = ({ servicesManager, extensionManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptTrackNewStudy = customizationService.getCustomization(\r\n    'measurement.promptTrackNewStudy'\r\n  );\r\n  return promptTrackNewStudy({ servicesManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptLabelAnnotationWrapper = ({ servicesManager }, ctx, evt) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptLabelAnnotation = customizationService.getCustomization(\r\n    'measurement.promptLabelAnnotation'\r\n  );\r\n  return promptLabelAnnotation({ servicesManager }, ctx, evt);\r\n};\r\n\r\nconst promptSaveReportWrapper = (\r\n  { servicesManager, commandsManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptSaveReport = customizationService.getCustomization('measurement.promptSaveReport');\r\n  return promptSaveReport({ servicesManager, commandsManager, extensionManager }, ctx, evt);\r\n};\r\n\r\nconst promptHasDirtyAnnotationsWrapper = (\r\n  { servicesManager, commandsManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) => {\r\n  const { customizationService } = servicesManager.services;\r\n  const promptHasDirtyAnnotations = customizationService.getCustomization(\r\n    'measurement.promptHasDirtyAnnotations'\r\n  );\r\n  return promptHasDirtyAnnotations(\r\n    { servicesManager, commandsManager, extensionManager },\r\n    ctx,\r\n    evt\r\n  );\r\n};\r\n\r\nexport {\r\n  promptBeginTrackingWrapper,\r\n  promptHydrateStructuredReportWrapper,\r\n  promptTrackNewSeriesWrapper,\r\n  promptTrackNewStudyWrapper,\r\n  promptLabelAnnotationWrapper,\r\n  promptSaveReportWrapper,\r\n  promptHasDirtyAnnotationsWrapper,\r\n};\r\n","import React, { useContext, useEffect, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Machine } from 'xstate';\r\nimport { useMachine } from '@xstate/react';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\nimport { machineConfiguration, defaultOptions, RESPONSE } from './measurementTrackingMachine';\r\nimport { measurementTrackingMode } from './promptBeginTracking';\r\nimport hydrateStructuredReport from './hydrateStructuredReport';\r\nimport { useAppConfig } from '@state';\r\nimport {\r\n  promptBeginTrackingWrapper,\r\n  promptHydrateStructuredReportWrapper,\r\n  promptTrackNewSeriesWrapper,\r\n  promptTrackNewStudyWrapper,\r\n  promptLabelAnnotationWrapper,\r\n  promptSaveReportWrapper,\r\n  promptHasDirtyAnnotationsWrapper,\r\n} from './promptWrapperFunctions';\r\n\r\nconst TrackedMeasurementsContext = React.createContext();\r\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\r\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\r\n\r\nconst SR_SOPCLASSHANDLERID = '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction TrackedMeasurementsContextProvider(\r\n  { servicesManager, commandsManager, extensionManager }: withAppTypes, // Bound by consumer\r\n  { children } // Component props\r\n) {\r\n  const [appConfig] = useAppConfig();\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportId, viewports } = viewportGrid;\r\n  const { measurementService, displaySetService, customizationService } = servicesManager.services;\r\n\r\n  const machineOptions = Object.assign({}, defaultOptions);\r\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries } = ctx;\r\n      const { viewportId: activeViewportId } = evt.data;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      console.log(\r\n        'jumping to measurement reset viewport',\r\n        activeViewportId,\r\n        trackedMeasurements[0]\r\n      );\r\n\r\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\r\n\r\n      const referencedImages = referencedDisplaySet.images;\r\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\r\n\r\n      const measurementData = trackedMeasurements[0].data;\r\n\r\n      let imageIndex = 0;\r\n      if (!isVolumeIdReferenced && measurementData) {\r\n        // if it is imageId referenced find the index of the imageId, we don't have\r\n        // support for volumeId referenced images yet\r\n        imageIndex = referencedImages.findIndex(image => {\r\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\r\n          return image.imageId === imageIdToUse;\r\n        });\r\n\r\n        if (imageIndex === -1) {\r\n          console.warn('Could not find image index for tracked measurement, using 0');\r\n          imageIndex = 0;\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n\r\n    jumpToSameImageInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries } = ctx;\r\n      const { viewportId: activeViewportId } = evt.data;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      // Jump to the last tracked measurement - most recent\r\n      if (!trackedMeasurements?.length) {\r\n        console.warn(\r\n          \"Didn't find any tracked measurements\",\r\n          measurements,\r\n          trackedStudy,\r\n          trackedSeries\r\n        );\r\n        return;\r\n      }\r\n      const trackedMeasurement = trackedMeasurements[trackedMeasurements.length - 1];\r\n      const referencedDisplaySetUID = trackedMeasurement.displaySetInstanceUID;\r\n\r\n      // update the previously stored positionPresentation with the new viewportId\r\n      // presentation so that when we put the referencedDisplaySet back in the viewport\r\n      // it will be in the correct position zoom and pan\r\n      commandsManager.runCommand('updateStoredPositionPresentation', {\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUID: referencedDisplaySetUID,\r\n        referencedImageId: trackedMeasurement.referencedImageId,\r\n      });\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n      });\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\r\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\r\n\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportId: evt.data.viewportId,\r\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\r\n        });\r\n      }\r\n    },\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const filteredMeasurements = measurements.filter(ms =>\r\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\r\n      );\r\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const measurementIds = measurements.map(fm => fm.uid);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n      measurementService.setIsMeasurementDeletedIndividually(false);\r\n    },\r\n    clearDisplaySetHydratedState: (ctx, evt) => {\r\n      const { displaySetInstanceUID } = evt.data ?? evt;\r\n\r\n      const displaysets = displaySetService.getActiveDisplaySets();\r\n      displaysets?.forEach(displayset => {\r\n        if (\r\n          displayset.Modality === 'SR' &&\r\n          displayset.displaySetInstanceUID !== displaySetInstanceUID &&\r\n          displayset.isHydrated\r\n        ) {\r\n          displayset.isHydrated = false;\r\n          displayset.isLoaded = false;\r\n        }\r\n      });\r\n    },\r\n    updatedViewports: (ctx, evt) => {\r\n      const { hangingProtocolService } = servicesManager.services;\r\n      const { displaySetInstanceUID, viewportId } = evt.data ?? evt;\r\n\r\n      const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportId,\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n    },\r\n  });\r\n  machineOptions.services = Object.assign({}, machineOptions.services, {\r\n    promptBeginTracking: promptBeginTrackingWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewSeries: promptTrackNewSeriesWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewStudy: promptTrackNewStudyWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptSaveReport: promptSaveReportWrapper.bind(null, {\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptHydrateStructuredReport: promptHydrateStructuredReportWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    promptHasDirtyAnnotations: promptHasDirtyAnnotationsWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n      appConfig,\r\n    }),\r\n    promptLabelAnnotation: promptLabelAnnotationWrapper.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      commandsManager,\r\n    }),\r\n  });\r\n  machineOptions.guards = Object.assign({}, machineOptions.guards, {\r\n    isLabelOnMeasure: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.getCustomization('measurementLabels');\r\n      return labelConfig?.labelOnMeasure;\r\n    },\r\n    isLabelOnMeasureAndShouldKillMachine: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.getCustomization('measurementLabels');\r\n      return evt.data && evt.data.userResponse === RESPONSE.NO_NEVER && labelConfig?.labelOnMeasure;\r\n    },\r\n    isSimplifiedConfig: (ctx, evt, condMeta) => {\r\n      return appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n    },\r\n    simplifiedAndLoadSR: (ctx, evt, condMeta) => {\r\n      return (\r\n        appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED &&\r\n        evt.data.isBackupSave === false\r\n      );\r\n    },\r\n    hasDirtyAndSimplified: (ctx, evt, condMeta) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const hasDirtyMeasurements =\r\n        measurements.some(measurement => measurement.isDirty) ||\r\n        (measurements.length && measurementService.getIsMeasurementDeletedIndividually());\r\n      return (\r\n        appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED &&\r\n        hasDirtyMeasurements\r\n      );\r\n    },\r\n  });\r\n\r\n  // TODO: IMPROVE\r\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\r\n  // - Friendlier transition/api in front of measurementTracking machine?\r\n  // - Blocked: viewport overlay shouldn't clip when resized\r\n  // TODO: PRIORITY\r\n  // - Fix \"ellipses\" series description dynamic truncate length\r\n  // - Fix viewport border resize\r\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\r\n\r\n  const measurementTrackingMachine = useMemo(() => {\r\n    return Machine(machineConfiguration, machineOptions);\r\n  }, []); // Empty dependency array ensures this is only created once\r\n\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\r\n    measurementTrackingMachine\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Update the state machine with the active viewport ID\r\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\r\n      activeViewportId,\r\n    });\r\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\r\n\r\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\r\n  useEffect(() => {\r\n    const triggerPromptHydrateFlow = async () => {\r\n      if (viewports.size > 0) {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n\r\n        if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\r\n          return;\r\n        }\r\n\r\n        // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\r\n        // tracking fusion viewports yet. This should change when we do.\r\n        const { displaySetService } = servicesManager.services;\r\n        const displaySet = displaySetService.getDisplaySetByUID(\r\n          activeViewport.displaySetInstanceUIDs[0]\r\n        );\r\n\r\n        if (!displaySet) {\r\n          return;\r\n        }\r\n\r\n        // If this is an SR produced by our SR SOPClassHandler,\r\n        // and it hasn't been loaded yet, do that now so we\r\n        // can check if it can be rehydrated or not.\r\n        //\r\n        // Note: This happens:\r\n        // - If the viewport is not currently an OHIFCornerstoneSRViewport\r\n        // - If the displaySet has never been hung\r\n        //\r\n        // Otherwise, the displaySet will be loaded by the useEffect handler\r\n        // listening to displaySet changes inside OHIFCornerstoneSRViewport.\r\n        // The issue here is that this handler in TrackedMeasurementsContext\r\n        // ends up occurring before the Viewport is created, so the displaySet\r\n        // is not loaded yet, and isRehydratable is undefined unless we call load().\r\n        if (\r\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n          !displaySet.isLoaded &&\r\n          displaySet.load\r\n        ) {\r\n          await displaySet.load();\r\n        }\r\n\r\n        // Magic string\r\n        // load function added by our sopClassHandler module\r\n        if (\r\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n          displaySet.isRehydratable === true &&\r\n          !displaySet.isHydrated\r\n        ) {\r\n          const params = {\r\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n            SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n            viewportId: activeViewportId,\r\n          };\r\n\r\n          // Check if we should bypass the confirmation prompt\r\n          const disableConfirmationPrompts = appConfig?.disableConfirmationPrompts;\r\n\r\n          if (disableConfirmationPrompts) {\r\n            sendTrackedMeasurementsEvent('HYDRATE_SR', params);\r\n          } else {\r\n            sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', params);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    triggerPromptHydrateFlow();\r\n  }, [\r\n    trackedMeasurements,\r\n    activeViewportId,\r\n    sendTrackedMeasurementsEvent,\r\n    servicesManager.services,\r\n    viewports,\r\n    appConfig,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // The command needs to be bound to the context's sendTrackedMeasurementsEvent\r\n    // so the command has to be registered in a React component.\r\n    commandsManager.registerCommand('DEFAULT', 'loadTrackedSRMeasurements', {\r\n      commandFn: props => sendTrackedMeasurementsEvent('HYDRATE_SR', props),\r\n    });\r\n  }, [commandsManager, sendTrackedMeasurementsEvent]);\r\n\r\n  return (\r\n    <TrackedMeasurementsContext.Provider\r\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\r\n    >\r\n      {children}\r\n    </TrackedMeasurementsContext.Provider>\r\n  );\r\n}\r\n\r\nTrackedMeasurementsContextProvider.propTypes = {\r\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\r\n  appConfig: PropTypes.object,\r\n};\r\n\r\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\r\n","import {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './contexts';\r\n\r\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\r\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  });\r\n\r\n  return [\r\n    {\r\n      name: 'TrackedMeasurementsContext',\r\n      context: TrackedMeasurementsContext,\r\n      provider: BoundTrackedMeasurementsContextProvider,\r\n    },\r\n  ];\r\n}\r\n\r\nexport { useTrackedMeasurements };\r\nexport default getContextModule;\r\n","import React from 'react';\r\nimport { FooterAction } from '@ohif/ui-next';\r\n\r\nexport function UntrackSeriesModal({ hide, onConfirm, message }) {\r\n  return (\r\n    <div className=\"text-foreground text-[13px]\">\r\n      <div>\r\n        <p>{message}</p>\r\n        <p className=\"mt-2\">\r\n          This action cannot be undone and will delete all your existing measurements.\r\n        </p>\r\n      </div>\r\n      <FooterAction className=\"mt-4\">\r\n        <FooterAction.Right>\r\n          <FooterAction.Secondary onClick={hide}>Cancel</FooterAction.Secondary>\r\n          <FooterAction.Primary\r\n            onClick={() => {\r\n              onConfirm();\r\n              hide();\r\n            }}\r\n          >\r\n            Untrack\r\n          </FooterAction.Primary>\r\n        </FooterAction.Right>\r\n      </FooterAction>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSystem } from '@ohif/core';\r\nimport PanelStudyBrowser from '@ohif/extension-default/src/Panels/StudyBrowser/PanelStudyBrowser';\r\nimport { UntrackSeriesModal } from './untrackSeriesModal';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\n\r\nconst thumbnailNoImageModalities = [\r\n  'SR',\r\n  'SEG',\r\n  'SM',\r\n  'RTSTRUCT',\r\n  'RTPLAN',\r\n  'RTDOSE',\r\n  'DOC',\r\n  'OT',\r\n  'PMAP',\r\n];\r\n\r\n/**\r\n * Panel component for the Study Browser with tracking capabilities\r\n */\r\nexport default function PanelStudyBrowserTracking({\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n}) {\r\n  const { servicesManager } = useSystem();\r\n  const { displaySetService, uiModalService, measurementService, viewportGridService } =\r\n    servicesManager.services;\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  const checkDirtyMeasurements = displaySetInstanceUID => {\r\n    const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n    if (displaySet.Modality === 'SR') {\r\n      const activeViewportId = viewportGridService.getActiveViewportId();\r\n      sendTrackedMeasurementsEvent('CHECK_DIRTY', {\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUID: displaySetInstanceUID,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const subscriptionOndropFired = viewportGridService.subscribe(\r\n      viewportGridService.EVENTS.VIEWPORT_ONDROP_HANDLED,\r\n      ({ eventData }) => {\r\n        checkDirtyMeasurements(eventData.displaySetInstanceUID);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      subscriptionOndropFired.unsubscribe();\r\n    };\r\n  }, []);\r\n  const onClickUntrack = displaySetInstanceUID => {\r\n    const onConfirm = () => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n      sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\r\n        SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n      });\r\n      const measurements = measurementService.getMeasurements();\r\n      measurements.forEach(m => {\r\n        if (m.referenceSeriesUID === displaySet.SeriesInstanceUID) {\r\n          measurementService.remove(m.uid);\r\n        }\r\n      });\r\n    };\r\n\r\n    uiModalService.show({\r\n      title: 'Untrack Series',\r\n      content: UntrackSeriesModal,\r\n      contentProps: {\r\n        onConfirm,\r\n        message: 'Are you sure you want to untrack this series?',\r\n      },\r\n    });\r\n  };\r\n\r\n  // Custom mapping function to add tracking data to display sets\r\n  const mapDisplaySetsWithTracking = (\r\n    displaySets,\r\n    displaySetLoadingState,\r\n    thumbnailImageSrcMap,\r\n    viewports\r\n  ) => {\r\n    const thumbnailDisplaySets = [];\r\n    const thumbnailNoImageDisplaySets = [];\r\n    displaySets\r\n      .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n      .forEach(ds => {\r\n        const { thumbnailSrc, displaySetInstanceUID } = ds;\r\n        const componentType = getComponentType(ds);\r\n\r\n        const array =\r\n          componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\r\n\r\n        const loadingProgress = displaySetLoadingState?.[displaySetInstanceUID];\r\n\r\n        array.push({\r\n          displaySetInstanceUID,\r\n          description: ds.SeriesDescription || '',\r\n          seriesNumber: ds.SeriesNumber,\r\n          modality: ds.Modality,\r\n          seriesDate: ds.SeriesDate ? new Date(ds.SeriesDate).toLocaleDateString() : '',\r\n          numInstances: ds.numImageFrames,\r\n          loadingProgress,\r\n          countIcon: ds.countIcon,\r\n          messages: ds.messages,\r\n          StudyInstanceUID: ds.StudyInstanceUID,\r\n          componentType,\r\n          imageSrc: thumbnailSrc || thumbnailImageSrcMap[displaySetInstanceUID],\r\n          dragData: {\r\n            type: 'displayset',\r\n            displaySetInstanceUID,\r\n          },\r\n          isTracked: trackedSeries.includes(ds.SeriesInstanceUID),\r\n          isHydratedForDerivedDisplaySet: ds.isHydrated,\r\n        });\r\n      });\r\n\r\n    return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n  };\r\n\r\n  // Override component type to use tracking specific components\r\n  const getComponentType = ds => {\r\n    if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\r\n      return 'thumbnailNoImage';\r\n    }\r\n    return 'thumbnailTracked';\r\n  };\r\n\r\n  return (\r\n    <PanelStudyBrowser\r\n      getImageSrc={getImageSrc}\r\n      getStudiesForPatientByMRN={getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={requestDisplaySetCreationForStudy}\r\n      dataSource={dataSource}\r\n      customMapDisplaySets={mapDisplaySetsWithTracking}\r\n      onClickUntrack={onClickUntrack}\r\n      onDoubleClickThumbnailHandlerCallBack={checkDirtyMeasurements}\r\n    />\r\n  );\r\n}\r\n\r\nPanelStudyBrowserTracking.propTypes = {\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId, thumbnail: true })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport default getImageSrcFromImageId;\r\n","import React, { useCallback } from 'react';\r\n//\r\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport { requestDisplaySetCreationForStudy } from '@ohif/extension-default';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nfunction _getStudyForPatientUtility(extensionManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-default.utilityModule.common'\r\n  );\r\n\r\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\r\n  return getStudiesForPatientByMRN;\r\n}\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowserTracking() {\r\n  const { extensionManager } = useSystem();\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n\r\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\r\n  const _getImageSrcFromImageId = useCallback(\r\n    _createGetImageSrcFromImageIdFn(extensionManager),\r\n    []\r\n  );\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowserTracking\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nexport default WrappedPanelStudyBrowserTracking;\r\n","import React from 'react';\r\nimport { utils } from '@ohif/core';\r\nimport { AccordionTrigger, MeasurementTable, ScrollArea, useViewportGrid } from '@ohif/ui-next';\r\nimport {\r\n  PanelMeasurement,\r\n  StudyMeasurements,\r\n  StudyMeasurementsActions,\r\n  StudySummaryFromMetadata,\r\n  AccordionGroup,\r\n  MeasurementsOrAdditionalFindings,\r\n} from '@ohif/extension-cornerstone';\r\n\r\nimport { useTrackedMeasurements } from '../getContextModule';\r\nimport { UntrackSeriesModal } from './PanelStudyBrowserTracking/untrackSeriesModal';\r\n\r\nconst { filterAnd, filterPlanarMeasurement, filterMeasurementsBySeriesUID } =\r\n  utils.MeasurementFilters;\r\n\r\nfunction PanelMeasurementTableTracking(props) {\r\n  const [viewportGrid] = useViewportGrid();\r\n  const { measurementService, uiModalService } = props.servicesManager.services;\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\r\n  const measurementFilter = trackedStudy\r\n    ? filterAnd(filterPlanarMeasurement, filterMeasurementsBySeriesUID(trackedSeries))\r\n    : filterPlanarMeasurement;\r\n\r\n  const onUntrackConfirm = () => {\r\n    sendTrackedMeasurementsEvent('UNTRACK_ALL', {});\r\n  };\r\n\r\n  const onDelete = () => {\r\n    const hasDirtyMeasurements = measurementService\r\n      .getMeasurements()\r\n      .some(measurement => measurement.isDirty);\r\n    hasDirtyMeasurements\r\n      ? uiModalService.show({\r\n          title: 'Untrack Study',\r\n          content: UntrackSeriesModal,\r\n          contentProps: {\r\n            onConfirm: onUntrackConfirm,\r\n            message: 'Are you sure you want to untrack study and delete all measurements?',\r\n          },\r\n        })\r\n      : onUntrackConfirm();\r\n  };\r\n\r\n  const EmptyComponent = () => (\r\n    <div data-cy=\"trackedMeasurements-panel\">\r\n      <MeasurementTable\r\n        title=\"Measurements\"\r\n        isExpanded={false}\r\n      >\r\n        <MeasurementTable.Body />\r\n      </MeasurementTable>\r\n    </div>\r\n  );\r\n\r\n  const actions = {\r\n    createSR: ({ StudyInstanceUID }) => {\r\n      sendTrackedMeasurementsEvent('SAVE_REPORT', {\r\n        viewportId: viewportGrid.activeViewportId,\r\n        isBackupSave: true,\r\n        StudyInstanceUID,\r\n        measurementFilter,\r\n      });\r\n    },\r\n    onDelete,\r\n  };\r\n\r\n  const Header = props => (\r\n    <AccordionTrigger\r\n      asChild={true}\r\n      className=\"px-0\"\r\n    >\r\n      <div data-cy=\"TrackingHeader\">\r\n        <StudySummaryFromMetadata\r\n          {...props}\r\n          actions={actions}\r\n        />\r\n      </div>\r\n    </AccordionTrigger>\r\n  );\r\n\r\n  return (\r\n    <ScrollArea>\r\n      <div data-cy=\"trackedMeasurements-panel\">\r\n        <PanelMeasurement\r\n          measurementFilter={measurementFilter}\r\n          emptyComponent={EmptyComponent}\r\n          sourceChildren={props.children}\r\n        >\r\n          <StudyMeasurements grouping={props.grouping}>\r\n            <AccordionGroup.Trigger\r\n              key=\"trackingMeasurementsHeader\"\r\n              asChild={true}\r\n            >\r\n              <Header key=\"trackingHeadChild\" />\r\n            </AccordionGroup.Trigger>\r\n            <MeasurementsOrAdditionalFindings\r\n              key=\"measurementsOrAdditionalFindings\"\r\n              activeStudyUID={trackedStudy}\r\n              customHeader={StudyMeasurementsActions}\r\n              measurementFilter={measurementFilter}\r\n              actions={actions}\r\n            />\r\n          </StudyMeasurements>\r\n        </PanelMeasurement>\r\n      </div>\r\n    </ScrollArea>\r\n  );\r\n}\r\n\r\nexport default PanelMeasurementTableTracking;\r\n","import { Types } from '@ohif/core';\r\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\r\nimport i18n from 'i18next';\r\nimport React from 'react';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'tab-studies',\r\n      iconLabel: 'Studies',\r\n      label: i18n.t('SidePanel:Studies'),\r\n      component: props => <PanelStudyBrowserTracking {...props} />,\r\n    },\r\n    {\r\n      name: 'trackedMeasurements',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: i18n.t('SidePanel:Measurements'),\r\n      component: props => (\r\n        <PanelMeasurementTableTracking\r\n          {...props}\r\n          key=\"trackedMeasurements-panel\"\r\n          commandsManager={commandsManager}\r\n          extensionManager={extensionManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import React from 'react';\r\nimport { utils } from '@ohif/extension-cornerstone';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\r\n});\r\n\r\nconst OHIFCornerstoneViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\r\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'cornerstone-tracked',\r\n      component: ExtendedOHIFCornerstoneTrackingViewport,\r\n      isReferenceViewable: props => utils.isReferenceViewable({ ...props, servicesManager }),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getViewportModule;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptHasDirtyAnnotations({ servicesManager }: withAppTypes, ctx, evt) {\r\n  const { viewportId, displaySetInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n\r\n    const promptResult = await _askSaveDiscardOrCancel(\r\n      uiViewportDialogService,\r\n      customizationService,\r\n      viewportId\r\n    );\r\n\r\n    resolve({\r\n      displaySetInstanceUID,\r\n      userResponse: promptResult,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardDirtyMessage'\r\n    );\r\n    const actions = [\r\n      { id: 'cancel', type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        id: 'discard-existing',\r\n        type: 'secondary',\r\n        text: 'No, discard existing',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        id: 'save-existing',\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-dirty-measurement',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.id === 'save-existing');\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHasDirtyAnnotations;\r\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { measurementTrackingMode } from './promptBeginTracking';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nfunction promptHydrateStructuredReport(\r\n  { servicesManager, extensionManager, commandsManager, appConfig },\r\n  ctx,\r\n  evt\r\n) {\r\n  const { uiViewportDialogService, displaySetService, customizationService } =\r\n    servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n  return new Promise(async function (resolve, reject) {\r\n    const standardMode = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n\r\n    const promptResult = standardMode\r\n      ? await _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId)\r\n      : RESPONSE.HYDRATE_REPORT;\r\n\r\n    // Need to do action here... So we can set state...\r\n    let StudyInstanceUID, SeriesInstanceUIDs;\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\r\n      console.warn('!! HYDRATING STRUCTURED REPORT');\r\n      const hydrationResult = hydrateStructuredReport(\r\n        { servicesManager, extensionManager, commandsManager, appConfig },\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization('viewportNotification.hydrateSRMessage');\r\n    const actions = [\r\n      {\r\n        id: 'no-hydrate',\r\n        type: 'secondary',\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'yes-hydrate',\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.value === RESPONSE.HYDRATE_REPORT);\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateStructuredReport;\r\n","import { measurementTrackingMode } from './promptBeginTracking';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService, customizationService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const appConfig = extensionManager._appConfig;\r\n\r\n    const showPrompt = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    let promptResult = showPrompt\r\n      ? await _askShouldAddMeasurements(UIViewportDialogService, customizationService, viewportId)\r\n      : RESPONSE.ADD_SERIES;\r\n\r\n    if (promptResult === RESPONSE.CREATE_REPORT) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, customizationService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askShouldAddMeasurements(uiViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.trackNewSeriesMessage'\r\n    );\r\n    const actions = [\r\n      {\r\n        type: 'secondary',\r\n        text: 'Cancel',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Create new report',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Add to existing report',\r\n        value: RESPONSE.ADD_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, customizationService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardSeriesMessage'\r\n    );\r\n\r\n    const actions = [\r\n      { type: 'secondary', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Save',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Discard',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewSeries;\r\n","import i18n from 'i18next';\r\nimport { measurementTrackingMode } from './promptBeginTracking';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewStudy({ servicesManager, extensionManager }: withAppTypes, ctx, evt) {\r\n  const { uiViewportDialogService, customizationService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const appConfig = extensionManager._appConfig;\r\n\r\n    const standardMode = appConfig?.measurementTrackingMode === measurementTrackingMode.STANDARD;\r\n    const simplifiedMode =\r\n      appConfig?.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n    let promptResult = standardMode\r\n      ? await _askTrackMeasurements(uiViewportDialogService, customizationService, viewportId)\r\n      : RESPONSE.SET_STUDY_AND_SERIES;\r\n\r\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\r\n      promptResult =\r\n        ctx.isDirty && (standardMode || simplifiedMode)\r\n          ? await _askSaveDiscardOrCancel(uiViewportDialogService, customizationService, viewportId)\r\n          : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.trackNewStudyMessage'\r\n    );\r\n    const actions = [\r\n      { type: 'cancel', text: i18n.t('MeasurementTable:No'), value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NOT_FOR_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: i18n.t('MeasurementTable:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.value === RESPONSE.SET_STUDY_AND_SERIES);\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  customizationService: AppTypes.CustomizationService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = customizationService.getCustomization(\r\n      'viewportNotification.discardStudyMessage'\r\n    );\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, discard previously tracked series & measurements',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewStudy;\r\n","import promptBeginTracking from '../contexts/TrackedMeasurementsContext/promptBeginTracking';\r\nimport promptHasDirtyAnnotations from '../contexts/TrackedMeasurementsContext/promptHasDirtyAnnotations';\r\nimport promptHydrateStructuredReport from '../contexts/TrackedMeasurementsContext/promptHydrateStructuredReport';\r\nimport promptTrackNewSeries from '../contexts/TrackedMeasurementsContext/promptTrackNewSeries';\r\nimport promptTrackNewStudy from '../contexts/TrackedMeasurementsContext/promptTrackNewStudy';\r\nimport { promptLabelAnnotation, promptSaveReport } from '@ohif/extension-default';\r\n\r\nexport default {\r\n  'measurement.promptBeginTracking': promptBeginTracking,\r\n  'measurement.promptHydrateStructuredReport': promptHydrateStructuredReport,\r\n  'measurement.promptTrackNewSeries': promptTrackNewSeries,\r\n  'measurement.promptTrackNewStudy': promptTrackNewStudy,\r\n  'measurement.promptLabelAnnotation': promptLabelAnnotation,\r\n  'measurement.promptSaveReport': promptSaveReport,\r\n  'measurement.promptHasDirtyAnnotations': promptHasDirtyAnnotations,\r\n};\r\n","import { measurementTrackingMode } from '../contexts/TrackedMeasurementsContext/promptBeginTracking';\r\n\r\ntype CheckHasDirtyAndSimplifiedModeProps = {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  appConfig: AppTypes.Config;\r\n  displaySetInstanceUID: string;\r\n};\r\n\r\nconst onDoubleClickHandler = {\r\n  callbacks: [\r\n    ({ activeViewportId, servicesManager, isHangingProtocolLayout, appConfig }) =>\r\n      async displaySetInstanceUID => {\r\n        const { hangingProtocolService, viewportGridService, uiNotificationService } =\r\n          servicesManager.services;\r\n        let updatedViewports = [];\r\n        const viewportId = activeViewportId;\r\n        const haveDirtyMeasurementsInSimplifiedMode = checkHasDirtyAndSimplifiedMode({\r\n          servicesManager,\r\n          appConfig,\r\n          displaySetInstanceUID,\r\n        });\r\n\r\n        try {\r\n          if (!haveDirtyMeasurementsInSimplifiedMode) {\r\n            updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n              viewportId,\r\n              displaySetInstanceUID,\r\n              isHangingProtocolLayout\r\n            );\r\n            viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n          }\r\n        } catch (error) {\r\n          console.warn(error);\r\n          uiNotificationService.show({\r\n            title: 'Thumbnail Double Click',\r\n            message: 'The selected display sets could not be added to the viewport.',\r\n            type: 'error',\r\n            duration: 3000,\r\n          });\r\n        }\r\n      },\r\n  ],\r\n};\r\n\r\nconst customOnDropHandlerCallback = async props => {\r\n  const handled = checkHasDirtyAndSimplifiedMode(props);\r\n  return Promise.resolve({ handled });\r\n};\r\n\r\nconst checkHasDirtyAndSimplifiedMode = (props: CheckHasDirtyAndSimplifiedModeProps) => {\r\n  const { servicesManager, appConfig, displaySetInstanceUID } = props;\r\n  const simplifiedMode = appConfig.measurementTrackingMode === measurementTrackingMode.SIMPLIFIED;\r\n  const { measurementService, displaySetService } = servicesManager.services;\r\n  const measurements = measurementService.getMeasurements();\r\n  const haveDirtyMeasurements =\r\n    measurements.some(m => m.isDirty) ||\r\n    (measurements.length && measurementService.getIsMeasurementDeletedIndividually());\r\n  const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n  const hasDirtyAndSimplifiedMode =\r\n    displaySet.Modality === 'SR' && simplifiedMode && haveDirtyMeasurements;\r\n  return hasDirtyAndSimplifiedMode;\r\n};\r\n\r\nexport { onDoubleClickHandler, customOnDropHandlerCallback };\r\n","import React from 'react';\r\n\r\nimport getContextModule from './getContextModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getViewportModule from './getViewportModule';\r\nimport { id } from './id.js';\r\nimport { ViewportActionButton } from '@ohif/ui-next';\r\nimport i18n from '@ohif/i18n';\r\nimport { measurementTrackingMode } from './contexts/TrackedMeasurementsContext/promptBeginTracking';\r\nimport getCustomizationModule from './getCustomizationModule';\r\nimport {\r\n  onDoubleClickHandler,\r\n  customOnDropHandlerCallback,\r\n} from './customizations/studyBrowserCustomization';\r\n\r\nconst measurementTrackingExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  getContextModule,\r\n  getPanelModule,\r\n  getViewportModule,\r\n\r\n  onModeEnter({ servicesManager }) {\r\n    const { toolbarService, customizationService } = servicesManager.services;\r\n    customizationService.setCustomizations({\r\n      'studyBrowser.thumbnailDoubleClickCallback': {\r\n        $set: onDoubleClickHandler,\r\n      },\r\n      customOnDropHandler: {\r\n        $set: customOnDropHandlerCallback,\r\n      },\r\n    });\r\n    toolbarService.addButtons(\r\n      [\r\n        {\r\n          // A button for loading tracked, SR measurements.\r\n          // Note that the command run is registered in TrackedMeasurementsContext\r\n          // because it must be bound to a React context's data.\r\n          id: 'loadSRMeasurements',\r\n          component: props => (\r\n            <ViewportActionButton {...props}>{i18n.t('Common:LOAD')}</ViewportActionButton>\r\n          ),\r\n          props: {\r\n            commands: ['loadTrackedSRMeasurements'],\r\n          },\r\n        },\r\n      ],\r\n      true // replace the button if it is already defined\r\n    );\r\n  },\r\n  getCustomizationModule,\r\n};\r\n\r\nexport default measurementTrackingExtension;\r\n\r\nexport { measurementTrackingMode };\r\n","import measurementTrackingPrompts from './customizations/measurementTrackingPrompts';\r\n\r\nexport default function getCustomizationModule() {\r\n  return [\r\n    {\r\n      name: 'default',\r\n      value: { ...measurementTrackingPrompts },\r\n    },\r\n  ];\r\n}\r\n"],"names":["RESPONSE","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","measurementTrackingMode","STANDARD","SIMPLIFIED","NONE","servicesManager","extensionManager","ctx","evt","uiViewportDialogService","customizationService","services","appConfig","_appConfig","viewportId","StudyInstanceUID","SeriesInstanceUID","data","Promise","async","resolve","reject","standardMode","promptResult","message","getCustomization","actions","id","type","text","i18n","t","value","onSubmit","result","hide","show","onOutsideClick","onKeyPress","event","key","action","find","_askTrackMeasurements","userResponse","NO_NOT_FOR_SERIES","HYDRATE_REPORT","machineConfiguration","initial","context","activeViewportId","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","labellingOnly","on","TRACK_SERIES","target","idle","entry","cond","SET_TRACKED_SERIES","PROMPT_HYDRATE_SR","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","UPDATE_ACTIVE_VIEWPORT_ID","assign","_","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","UNTRACK_ALL","SAVE_REPORT","SET_DIRTY","CHECK_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","promptLabelAnnotation","promptHasDirtyAnnotations","strict","defaultOptions","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","setTrackedStudyAndSeries","slice","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","setPreviousState","meta","prevState","state","guards","shouldSetDirty","undefined","includes","wasLabellingOnly","condMeta","wasIdle","wasTracking","wasTrackingAndIsNewStudy","wasTrackingAndIsNewSeries","shouldKillMachine","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","commandsManager","displaySetService","displaySetInstanceUID","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","promptBeginTrackingWrapper","promptHydrateStructuredReportWrapper","promptTrackNewSeriesWrapper","promptTrackNewStudyWrapper","promptLabelAnnotationWrapper","promptSaveReportWrapper","promptHasDirtyAnnotationsWrapper","TrackedMeasurementsContext","React","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","children","useAppConfig","viewportGrid","viewportGridService","useViewportGrid","viewports","measurementService","machineOptions","Object","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","measurementData","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","displaySetInstanceUIDs","viewportOptions","initialImageOptions","index","jumpToSameImageInActiveViewport","measurements","trackedMeasurement","runCommand","referencedImageId","createdDisplaySetInstanceUIDs","StructuredReportDisplaySetInstanceUID","measurementIds","ms","map","fm","i","remove","uid","setIsMeasurementDeletedIndividually","clearDisplaySetHydratedState","displaysets","getActiveDisplaySets","forEach","displayset","Modality","isHydrated","isLoaded","updatedViewports","hangingProtocolService","getViewportsRequireUpdate","setDisplaySetsForViewports","bind","isLabelOnMeasure","labelConfig","labelOnMeasure","isLabelOnMeasureAndShouldKillMachine","isSimplifiedConfig","simplifiedAndLoadSR","hasDirtyAndSimplified","hasDirtyMeasurements","some","measurement","getIsMeasurementDeletedIndividually","measurementTrackingMachine","useMemo","Machine","sendTrackedMeasurementsEvent","useMachine","useEffect","size","activeViewport","get","displaySet","SOPClassHandlerId","load","isRehydratable","params","disableConfirmationPrompts","triggerPromptHydrateFlow","registerCommand","commandFn","props","Provider","propTypes","PropTypes","BoundTrackedMeasurementsContextProvider","name","provider","UntrackSeriesModal","onConfirm","className","FooterAction","Right","Secondary","onClick","Primary","thumbnailNoImageModalities","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","dataSource","useSystem","uiModalService","checkDirtyMeasurements","getActiveViewportId","subscriptionOndropFired","subscribe","EVENTS","VIEWPORT_ONDROP_HANDLED","eventData","unsubscribe","getComponentType","ds","unsupported","PanelStudyBrowser","customMapDisplaySets","mapDisplaySetsWithTracking","displaySets","displaySetLoadingState","thumbnailImageSrcMap","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","thumbnailSrc","componentType","array","loadingProgress","push","description","SeriesDescription","seriesNumber","SeriesNumber","modality","seriesDate","SeriesDate","Date","toLocaleDateString","numInstances","numImageFrames","countIcon","messages","imageSrc","dragData","isTracked","isHydratedForDerivedDisplaySet","onClickUntrack","title","content","contentProps","onDoubleClickThumbnailHandlerCallBack","getImageIdsForDisplaySet","isRequired","cornerstone","canvas","document","createElement","utilities","loadImageToCanvas","thumbnail","then","toDataURL","catch","getActiveDataSource","_getStudiesForPatientByMRN","utilityModule","getModuleEntry","exports","_getStudyForPatientUtility","_getImageSrcFromImageId","useCallback","getCornerstoneLibraries","getImageSrcFromImageId","ex","Error","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","filterAnd","filterPlanarMeasurement","filterMeasurementsBySeriesUID","utils","MeasurementFilters","measurementFilter","onUntrackConfirm","createSR","onDelete","Header","AccordionTrigger","asChild","StudySummaryFromMetadata","_extends","ScrollArea","PanelMeasurement","emptyComponent","EmptyComponent","MeasurementTable","isExpanded","Body","sourceChildren","StudyMeasurements","grouping","AccordionGroup","Trigger","MeasurementsOrAdditionalFindings","activeStudyUID","customHeader","StudyMeasurementsActions","iconName","iconLabel","label","component","PanelMeasurementTableTracking","Component","OHIFCornerstoneViewport","fallback","isReferenceViewable","packageJson","UIViewportDialogService","_askSaveDiscardOrCancel","_askShouldAddMeasurements","simplifiedMode","onDoubleClickHandler","callbacks","isHangingProtocolLayout","uiNotificationService","haveDirtyMeasurementsInSimplifiedMode","checkHasDirtyAndSimplifiedMode","error","duration","customOnDropHandlerCallback","handled","haveDirtyMeasurements","getContextModule","getPanelModule","getViewportModule","onModeEnter","toolbarService","setCustomizations","$set","customOnDropHandler","addButtons","ViewportActionButton","commands","getCustomizationModule","measurementTrackingPrompts"],"sourceRoot":""}