{"version":3,"file":"530.bundle.566957f52c75587b3622.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/viewports/OHIFCornerstoneSRViewport.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ServicesManager, ExtensionManager } from '@ohif/core';\n\nimport { setTrackingUniqueIdentifiersForElement } from '../tools/modules/dicomSRModule';\n\nimport { Icon, Tooltip, useViewportGrid, ViewportActionArrows } from '@ohif/ui';\nimport hydrateStructuredReport from '../utils/hydrateStructuredReport';\nimport { useAppConfig } from '@state';\nimport createReferencedImageDisplaySet from '../utils/createReferencedImageDisplaySet';\n\nconst MEASUREMENT_TRACKING_EXTENSION_ID = '@ohif/extension-measurement-tracking';\n\nconst SR_TOOLGROUP_BASE_NAME = 'SRToolGroup';\n\nfunction OHIFCornerstoneSRViewport(props) {\n  const { children, dataSource, displaySets, viewportOptions, servicesManager, extensionManager } =\n    props;\n\n  const [appConfig] = useAppConfig();\n\n  const {\n    displaySetService,\n    cornerstoneViewportService,\n    measurementService,\n    viewportActionCornersService,\n  } = servicesManager.services;\n\n  const viewportId = viewportOptions.viewportId;\n\n  // SR viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SR viewport should only have a single display set');\n  }\n\n  const srDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const [measurementSelected, setMeasurementSelected] = useState(0);\n  const [measurementCount, setMeasurementCount] = useState(1);\n  const [activeImageDisplaySetData, setActiveImageDisplaySetData] = useState(null);\n  const [referencedDisplaySetMetadata, setReferencedDisplaySetMetadata] = useState(null);\n  const [element, setElement] = useState(null);\n  const { viewports, activeViewportId } = viewportGrid;\n\n  const { t } = useTranslation('Common');\n\n  // Optional hook into tracking extension, if present.\n  let trackedMeasurements;\n  let sendTrackedMeasurementsEvent;\n\n  const hasMeasurementTrackingExtension = extensionManager.registeredExtensionIds.includes(\n    MEASUREMENT_TRACKING_EXTENSION_ID\n  );\n\n  if (hasMeasurementTrackingExtension) {\n    const contextModule = extensionManager.getModuleEntry(\n      '@ohif/extension-measurement-tracking.contextModule.TrackedMeasurementsContext'\n    );\n\n    const tracked = useContext(contextModule.context);\n    trackedMeasurements = tracked?.[0];\n    sendTrackedMeasurementsEvent = tracked?.[1];\n  }\n  if (!sendTrackedMeasurementsEvent) {\n    // if no panels from measurement-tracking extension is used, this code will run\n    trackedMeasurements = null;\n    sendTrackedMeasurementsEvent = (eventName, { displaySetInstanceUID }) => {\n      measurementService.clearMeasurements();\n      const { SeriesInstanceUIDs } = hydrateStructuredReport(\n        { servicesManager, extensionManager, appConfig },\n        displaySetInstanceUID\n      );\n      const displaySets = displaySetService.getDisplaySetsForSeries(SeriesInstanceUIDs[0]);\n      if (displaySets.length) {\n        viewportGridService.setDisplaySetsForViewports([\n          {\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [displaySets[0].displaySetInstanceUID],\n          },\n        ]);\n      }\n    };\n  }\n\n  /**\n   * Store the tracking identifiers per viewport in order to be able to\n   * show the SR measurements on the referenced image on the correct viewport,\n   * when multiple viewports are used.\n   */\n  const setTrackingIdentifiers = useCallback(\n    measurementSelected => {\n      const { measurements } = srDisplaySet;\n\n      setTrackingUniqueIdentifiersForElement(\n        element,\n        measurements.map(measurement => measurement.TrackingUniqueIdentifier),\n        measurementSelected\n      );\n    },\n    [element, measurementSelected, srDisplaySet]\n  );\n\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const updateViewport = useCallback(\n    newMeasurementSelected => {\n      const { StudyInstanceUID, displaySetInstanceUID, sopClassUids } = srDisplaySet;\n\n      if (!StudyInstanceUID || !displaySetInstanceUID) {\n        return;\n      }\n\n      if (sopClassUids && sopClassUids.length > 1) {\n        // Todo: what happens if there are multiple SOP Classes? Why we are\n        // not throwing an error?\n        console.warn('More than one SOPClassUID in the same series is not yet supported.');\n      }\n\n      // if (!srDisplaySet.measurements || !srDisplaySet.measurements.length) {\n      //   return;\n      // }\n\n      _getViewportReferencedDisplaySetData(\n        srDisplaySet,\n        newMeasurementSelected,\n        displaySetService\n      ).then(({ referencedDisplaySet, referencedDisplaySetMetadata }) => {\n        setMeasurementSelected(newMeasurementSelected);\n        setActiveImageDisplaySetData(referencedDisplaySet);\n        setReferencedDisplaySetMetadata(referencedDisplaySetMetadata);\n\n        if (\n          referencedDisplaySet.displaySetInstanceUID ===\n          activeImageDisplaySetData?.displaySetInstanceUID\n        ) {\n          const { measurements } = srDisplaySet;\n\n          // it means that we have a new referenced display set, and the\n          // imageIdIndex will handle it by updating the viewport, but if they\n          // are the same we just need to use measurementService to jump to the\n          // new measurement\n          const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n          const imageIds = csViewport.getImageIds();\n\n          const imageIdIndex = imageIds.indexOf(measurements[newMeasurementSelected].imageId);\n\n          if (imageIdIndex !== -1) {\n            csViewport.setImageIdIndex(imageIdIndex);\n          }\n        }\n      });\n    },\n    [dataSource, srDisplaySet, activeImageDisplaySetData, viewportId]\n  );\n\n  const getCornerstoneViewport = useCallback(() => {\n    if (!activeImageDisplaySetData) {\n      return null;\n    }\n\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const { measurements } = srDisplaySet;\n    const measurement = measurements[measurementSelected];\n\n    if (!measurement) {\n      return null;\n    }\n\n    const initialImageIndex = activeImageDisplaySetData.images.findIndex(\n      image => image.imageId === measurement.imageId\n    );\n\n    return (\n      <Component\n        {...props}\n        // should be passed second since we don't want SR displaySet to\n        // override the activeImageDisplaySetData\n        displaySets={[activeImageDisplaySetData]}\n        // It is possible that there is a hanging protocol applying viewportOptions\n        // for the SR, so inherit the viewport options\n        // TODO: Ensure the viewport options are set correctly with respect to\n        // stack etc, in the incoming viewport options.\n        viewportOptions={{\n          ...viewportOptions,\n          toolGroupId: `${SR_TOOLGROUP_BASE_NAME}`,\n          // viewportType should not be required, as the stack type should be\n          // required already in order to view SR, but sometimes segmentation\n          // views set the viewport type without fixing the allowed display\n          viewportType: 'stack',\n          // The positionIds for the viewport aren't meaningful for the child display sets\n          positionIds: null,\n        }}\n        onElementEnabled={evt => {\n          props.onElementEnabled?.(evt);\n          onElementEnabled(evt);\n        }}\n        initialImageIndex={initialImageIndex}\n        isJumpToMeasurementDisabled={true}\n      ></Component>\n    );\n  }, [activeImageDisplaySetData, viewportId, measurementSelected]);\n\n  const onMeasurementChange = useCallback(\n    direction => {\n      let newMeasurementSelected = measurementSelected;\n\n      newMeasurementSelected += direction;\n      if (newMeasurementSelected >= measurementCount) {\n        newMeasurementSelected = 0;\n      } else if (newMeasurementSelected < 0) {\n        newMeasurementSelected = measurementCount - 1;\n      }\n\n      setTrackingIdentifiers(newMeasurementSelected);\n      updateViewport(newMeasurementSelected);\n    },\n    [measurementSelected, measurementCount, updateViewport, setTrackingIdentifiers]\n  );\n\n  /**\n   Cleanup the SR viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  /**\n   * Loading the measurements from the SR viewport, which goes through the\n   * isHydratable check, the outcome for the isHydrated state here is always FALSE\n   * since we don't do the hydration here. Todo: can't we just set it as false? why\n   * we are changing the state here? isHydrated is always false at this stage, and\n   * if it is hydrated we don't even use the SR viewport.\n   */\n  useEffect(() => {\n    const loadSR = async () => {\n      if (!srDisplaySet.isLoaded) {\n        await srDisplaySet.load();\n      }\n      const numMeasurements = srDisplaySet.measurements.length;\n      setMeasurementCount(numMeasurements);\n      updateViewport(measurementSelected);\n    };\n    loadSR();\n  }, [dataSource, srDisplaySet]);\n\n  /**\n   * Hook to update the tracking identifiers when the selected measurement changes or\n   * the element changes\n   */\n  useEffect(() => {\n    if (!element || !srDisplaySet.isLoaded) {\n      return;\n    }\n    setTrackingIdentifiers(measurementSelected);\n  }, [measurementSelected, element, setTrackingIdentifiers, srDisplaySet]);\n\n  /**\n   * Todo: what is this, not sure what it does regarding the react aspect,\n   * it is updating a local variable? which is not state.\n   */\n  const [isLocked, setIsLocked] = useState(trackedMeasurements?.context?.trackedSeries?.length > 0);\n  useEffect(() => {\n    setIsLocked(trackedMeasurements?.context?.trackedSeries?.length > 0);\n  }, [trackedMeasurements]);\n\n  useEffect(() => {\n    viewportActionCornersService.setComponents([\n      {\n        viewportId,\n        id: 'viewportStatusComponent',\n        component: _getStatusComponent({\n          srDisplaySet,\n          viewportId,\n          isRehydratable: srDisplaySet.isRehydratable,\n          isLocked,\n          sendTrackedMeasurementsEvent,\n          t,\n        }),\n        indexPriority: -100,\n        location: viewportActionCornersService.LOCATIONS.topLeft,\n      },\n      {\n        viewportId,\n        id: 'viewportActionArrowsComponent',\n        index: 0,\n        component: (\n          <ViewportActionArrows\n            key=\"actionArrows\"\n            onArrowsClick={onMeasurementChange}\n          ></ViewportActionArrows>\n        ),\n        indexPriority: 0,\n        location: viewportActionCornersService.LOCATIONS.topRight,\n      },\n    ]);\n  }, [\n    isLocked,\n    onMeasurementChange,\n    sendTrackedMeasurementsEvent,\n    srDisplaySet,\n    t,\n    viewportActionCornersService,\n    viewportId,\n  ]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (!activeImageDisplaySetData || !referencedDisplaySetMetadata) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  return (\n    <>\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSRViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  viewportLabel: PropTypes.string,\n  customProps: PropTypes.object,\n  viewportOptions: PropTypes.object,\n  servicesManager: PropTypes.instanceOf(ServicesManager).isRequired,\n  extensionManager: PropTypes.instanceOf(ExtensionManager).isRequired,\n};\n\nOHIFCornerstoneSRViewport.defaultProps = {\n  customProps: {},\n};\n\nasync function _getViewportReferencedDisplaySetData(\n  displaySet,\n  measurementSelected,\n  displaySetService\n) {\n  const { measurements } = displaySet;\n  const measurement = measurements[measurementSelected];\n\n  const { displaySetInstanceUID } = measurement;\n  if (!displaySet.keyImageDisplaySet) {\n    // Create a new display set, and preserve a reference to it here,\n    // so that it can be re-displayed and shown inside the SR viewport.\n    // This is only for ease of redisplay - the display set is stored in the\n    // usual manner in the display set service.\n    displaySet.keyImageDisplaySet = createReferencedImageDisplaySet(displaySetService, displaySet);\n  }\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return { referencedDisplaySetMetadata, referencedDisplaySet };\n}\n\nfunction _getStatusComponent({\n  srDisplaySet,\n  viewportId,\n  isRehydratable,\n  isLocked,\n  sendTrackedMeasurementsEvent,\n  t,\n}) {\n  const handleMouseUp = () => {\n    sendTrackedMeasurementsEvent('HYDRATE_SR', {\n      displaySetInstanceUID: srDisplaySet.displaySetInstanceUID,\n      viewportId,\n    });\n  };\n\n  const loadStr = t('LOAD');\n\n  // 1 - Incompatible\n  // 2 - Locked\n  // 3 - Rehydratable / Open\n  const state = isRehydratable && !isLocked ? 3 : isRehydratable && isLocked ? 2 : 1;\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  switch (state) {\n    case 1:\n      StatusIcon = () => <Icon name=\"status-alert\" />;\n\n      ToolTipMessage = () => (\n        <div>\n          This structured report is not compatible\n          <br />\n          with this application.\n        </div>\n      );\n      break;\n    case 2:\n      StatusIcon = () => <Icon name=\"status-locked\" />;\n\n      ToolTipMessage = () => (\n        <div>\n          This structured report is currently read-only\n          <br />\n          because you are tracking measurements in\n          <br />\n          another viewport.\n        </div>\n      );\n      break;\n    case 3:\n      StatusIcon = () => (\n        <Icon\n          className=\"text-aqua-pale\"\n          name=\"status-untracked\"\n        />\n      );\n\n      ToolTipMessage = () => <div>{`Click ${loadStr} to restore measurements.`}</div>;\n  }\n\n  const StatusArea = () => (\n    <div className=\"flex h-6 cursor-default text-sm leading-6 text-white\">\n      <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\n        <StatusIcon />\n        <span className=\"ml-1\">SR</span>\n      </div>\n      {state === 3 && (\n        <div\n          className=\"bg-primary-main hover:bg-primary-light ml-1 cursor-pointer rounded px-1.5 hover:text-black\"\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\n          onMouseUp={handleMouseUp}\n        >\n          {loadStr}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip\n          content={<ToolTipMessage />}\n          position=\"bottom-left\"\n        >\n          <StatusArea />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusArea />}\n    </>\n  );\n}\n\nexport default OHIFCornerstoneSRViewport;\n"],"names":["OHIFCornerstoneSRViewport","props","children","dataSource","displaySets","viewportOptions","servicesManager","extensionManager","appConfig","useAppConfig","displaySetService","cornerstoneViewportService","measurementService","viewportActionCornersService","services","viewportId","length","Error","srDisplaySet","viewportGrid","viewportGridService","useViewportGrid","measurementSelected","setMeasurementSelected","useState","measurementCount","setMeasurementCount","activeImageDisplaySetData","setActiveImageDisplaySetData","referencedDisplaySetMetadata","setReferencedDisplaySetMetadata","element","setElement","viewports","activeViewportId","t","useTranslation","trackedMeasurements","sendTrackedMeasurementsEvent","registeredExtensionIds","includes","contextModule","getModuleEntry","tracked","useContext","context","eventName","displaySetInstanceUID","clearMeasurements","SeriesInstanceUIDs","hydrateStructuredReport","getDisplaySetsForSeries","setDisplaySetsForViewports","displaySetInstanceUIDs","setTrackingIdentifiers","useCallback","measurements","setTrackingUniqueIdentifiersForElement","map","measurement","TrackingUniqueIdentifier","updateViewport","newMeasurementSelected","StudyInstanceUID","sopClassUids","console","warn","async","displaySet","keyImageDisplaySet","createReferencedImageDisplaySet","referencedDisplaySet","getDisplaySetByUID","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getViewportReferencedDisplaySetData","then","csViewport","getCornerstoneViewport","imageIdIndex","getImageIds","indexOf","imageId","setImageIdIndex","component","Component","initialImageIndex","findIndex","image","React","_extends","toolGroupId","viewportType","positionIds","onElementEnabled","evt","detail","isJumpToMeasurementDisabled","onMeasurementChange","direction","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","activeViewport","get","setDisplaySetsForViewport","unsubscribe","isLoaded","load","numMeasurements","loadSR","isLocked","setIsLocked","trackedSeries","setComponents","id","_getStatusComponent","isRehydratable","indexPriority","location","LOCATIONS","topLeft","index","ViewportActionArrows","key","onArrowsClick","topRight","childrenWithProps","child","className","handleMouseUp","loadStr","state","ToolTipMessage","StatusIcon","Icon","name","StatusArea","onMouseUp","Tooltip","content","position","propTypes","PropTypes","isRequired","viewportLabel","customProps","ServicesManager","ExtensionManager","defaultProps"],"sourceRoot":""}