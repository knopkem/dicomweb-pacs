{"version":3,"file":"783.bundle.57dababf5ff2c1dac4dd.js","mappings":"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","sources":["webpack:///../../../extensions/test-extension/src/id.js","webpack:///../../../extensions/test-extension/src/hpTestSwitch.ts","webpack:///../../../extensions/test-extension/src/custom-context-menu/codingValues.ts","webpack:///../../../extensions/test-extension/src/custom-context-menu/contextMenuCodeItem.ts","webpack:///../../../extensions/test-extension/src/custom-context-menu/findingsContextMenu.ts","webpack:///../../../extensions/test-extension/src/custom-attribute/sameAs.ts","webpack:///../../../extensions/test-extension/src/custom-attribute/numberOfDisplaySets.ts","webpack:///../../../extensions/test-extension/src/custom-attribute/maxNumImageFrames.ts","webpack:///../../../extensions/test-extension/src/index.tsx","webpack:///../../../extensions/test-extension/src/getCustomizationModule.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { Types } from '@ohif/core';\n\nconst viewport0a = {\n  viewportOptions: {\n    viewportId: 'viewportA',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewport1b = {\n  viewportOptions: {\n    viewportId: 'viewportB',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 1,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewport2c = {\n  viewportOptions: {\n    viewportId: 'viewportC',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 2,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewport3d = {\n  viewportOptions: {\n    viewportId: 'viewportD',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 3,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewport4e = {\n  viewportOptions: {\n    viewportId: 'viewportE',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 4,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewport5f = {\n  viewportOptions: {\n    viewportId: 'viewportF',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 5,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewport3a = {\n  viewportOptions: {\n    viewportId: 'viewportA',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 3,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewport2b = {\n  viewportOptions: {\n    viewportId: 'viewportB',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 2,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewport1c = {\n  viewportOptions: {\n    viewportId: 'viewportC',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 1,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\nconst viewport0d = {\n  viewportOptions: {\n    viewportId: 'viewportD',\n    toolGroupId: 'default',\n    allowUnmatchedView: true,\n  },\n  displaySets: [\n    {\n      matchedDisplaySetsIndex: 0,\n      id: 'defaultDisplaySetId',\n    },\n  ],\n};\n\nconst viewportStructure = {\n  layoutType: 'grid',\n  properties: {\n    rows: 2,\n    columns: 2,\n  },\n};\n\nconst viewportStructure32 = {\n  layoutType: 'grid',\n  properties: {\n    rows: 2,\n    columns: 3,\n  },\n};\n\n/**\n * This hanging protocol is a test hanging protocol used to apply various\n * layouts in different positions for display, re-using earlier names in\n * various orders.\n */\nconst hpTestSwitch: Types.HangingProtocol.Protocol = {\n  hasUpdatedPriorsInformation: false,\n  id: '@ohif/mnTestSwitch',\n  description: 'Has various hanging protocol grid layouts',\n  name: 'Test Switch',\n  protocolMatchingRules: [\n    {\n      id: 'OneOrMoreSeries',\n      weight: 25,\n      attribute: 'numberOfDisplaySetsWithImages',\n      constraint: {\n        greaterThan: 0,\n      },\n    },\n  ],\n  toolGroupIds: ['default'],\n  displaySetSelectors: {\n    defaultDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'numImageFrames',\n          constraint: {\n            greaterThan: { value: 0 },\n          },\n        },\n        // This display set will select the specified items by preference\n        // It has no affect if nothing is specified in the URL.\n        {\n          attribute: 'isDisplaySetFromUrl',\n          weight: 10,\n          constraint: {\n            equals: true,\n          },\n        },\n      ],\n    },\n  },\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'defaultDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  stages: [\n    {\n      name: '2x2 0a1b2c3d',\n      viewportStructure,\n      viewports: [viewport0a, viewport1b, viewport2c, viewport3d],\n    },\n    {\n      name: '3x2 0a1b4e2c3d5f',\n      viewportStructure: viewportStructure32,\n      // Note the following structure simply preserves the viewportId for\n      // a given screen position\n      viewports: [viewport0a, viewport1b, viewport4e, viewport2c, viewport3d, viewport5f],\n    },\n    {\n      name: '2x2 1c0d3a2b',\n      viewportStructure,\n      viewports: [viewport1c, viewport0d, viewport3a, viewport2b],\n    },\n    {\n      name: '2x2 3a2b1c0d',\n      viewportStructure,\n      viewports: [viewport3a, viewport2b, viewport1c, viewport0d],\n    },\n  ],\n  numberOfPriorsReferenced: -1,\n};\n\nexport default hpTestSwitch;\n","/**\n * Coding values is a map of simple string coding values to a set of\n * attributes associated with the coding value.\n *\n * The simple string is in the format `<codingSchemeDesignator>:<codingValue>`\n * That allows extracting the DICOM attributes from the designator/value, and\n * allows for passing around the simple string.\n * The additional attributes contained in the object include:\n *       * text - this is the coding scheme text display value, and may be language specific\n *       * type - this defines a named type, typically 'site'.  Different names can be used\n *                to allow setting different findingSites values in order to define a hierarchy.\n *       * color - used to apply annotation color\n * It is also possible to define additional attributes here, used by custom\n * extensions.\n *\n * See https://dicom.nema.org/medical/dicom/current/output/html/part16.html\n * for definitions of SCT and other code values.\n */\nconst codingValues = {\n  id: 'codingValues',\n\n  // Sites\n  'SCT:69536005': {\n    text: 'Head',\n    type: 'site',\n  },\n  'SCT:45048000': {\n    text: 'Neck',\n    type: 'site',\n  },\n  'SCT:818981001': {\n    text: 'Abdomen',\n    type: 'site',\n  },\n  'SCT:816092008': {\n    text: 'Pelvis',\n    type: 'site',\n  },\n\n  // Findings\n  'SCT:371861004': {\n    text: 'Mild intimal coronary irregularities',\n    color: 'green',\n  },\n  'SCT:194983005': {\n    text: 'Aortic insufficiency',\n    color: 'darkred',\n  },\n  'SCT:399232001': {\n    text: '2-chamber',\n  },\n  'SCT:103340004': {\n    text: 'SAX',\n  },\n  'SCT:91134007': {\n    text: 'MV',\n  },\n  'SCT:122972007': {\n    text: 'PV',\n  },\n\n  // Orientations\n  'SCT:24422004': {\n    text: 'Axial',\n    color: '#000000',\n    type: 'orientation',\n  },\n  'SCT:81654009': {\n    text: 'Coronal',\n    color: '#000000',\n    type: 'orientation',\n  },\n  'SCT:30730003': {\n    text: 'Sagittal',\n    color: '#000000',\n    type: 'orientation',\n  },\n};\n\nexport default codingValues;\n","const codeMenuItem = {\n  id: '@ohif/contextMenuAnnotationCode',\n\n  /** Applies the code value setup for this item */\n  transform: function (customizationService) {\n    const { code: codeRef } = this;\n    if (!codeRef) {\n      throw new Error(`item ${this} has no code ref`);\n    }\n    const codingValues = customizationService.get('codingValues');\n    const code = codingValues[codeRef];\n    return {\n      ...this,\n      codeRef,\n      code: { ref: codeRef, ...code },\n      label: code.text,\n      commands: [\n        {\n          commandName: 'updateMeasurement',\n        },\n      ],\n    };\n  },\n};\n\nexport default codeMenuItem;\n","const findingsContextMenu = {\n  id: 'measurementsContextMenu',\n  customizationType: 'ohif.contextMenu',\n  menus: [\n    {\n      id: 'forExistingMeasurement',\n      // selector restricts context menu to when there is nearbyToolData\n      selector: ({ nearbyToolData }) => !!nearbyToolData,\n      items: [\n        {\n          customizationType: 'ohif.contextSubMenu',\n          label: 'Site',\n          actionType: 'ShowSubMenu',\n          subMenu: 'siteSelectionSubMenu',\n        },\n        {\n          customizationType: 'ohif.contextSubMenu',\n          label: 'Finding',\n          actionType: 'ShowSubMenu',\n          subMenu: 'findingSelectionSubMenu',\n        },\n        {\n          // customizationType is implicit here in the configuration setup\n          label: 'Delete Measurement',\n          commands: [\n            {\n              commandName: 'deleteMeasurement',\n            },\n          ],\n        },\n        {\n          label: 'Add Label',\n          commands: [\n            {\n              commandName: 'setMeasurementLabel',\n            },\n          ],\n        },\n\n        // The example below shows how to include a delegating sub-menu,\n        // Only available on the @ohif/mnGrid hanging protocol\n        // To demonstrate, select the 3x1 layout from the protocol menu\n        // and right click on a measurement.\n        {\n          label: 'IncludeSubMenu',\n          selector: ({ protocol }) => protocol?.id === '@ohif/mnGrid',\n          delegating: true,\n          subMenu: 'orientationSelectionSubMenu',\n        },\n      ],\n    },\n\n    {\n      id: 'orientationSelectionSubMenu',\n      selector: ({ nearbyToolData }) => false,\n      items: [\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:24422004',\n        },\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:81654009',\n        },\n      ],\n    },\n\n    {\n      id: 'findingSelectionSubMenu',\n      selector: ({ nearbyToolData }) => false,\n      items: [\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:371861004',\n        },\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:194983005',\n        },\n      ],\n    },\n\n    {\n      id: 'siteSelectionSubMenu',\n      selector: ({ nearbyToolData }) => !!nearbyToolData,\n      items: [\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:69536005',\n        },\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:45048000',\n        },\n      ],\n    },\n  ],\n};\n\nexport default findingsContextMenu;\n","/**\n * This function extracts an attribute from the already matched display sets, and\n * compares it to the attribute in the current display set, and indicates if they match.\n * From 'this', it uses:\n *    `sameAttribute` as the attribute name to look for\n *    `sameDisplaySetId` as the display set id to look for\n * From `options`, it looks for\n */\nexport default function (displaySet, options) {\n  const { sameAttribute, sameDisplaySetId } = this;\n  if (!sameAttribute) {\n    console.log('sameAttribute not defined in', this);\n    return `sameAttribute not defined in ${this.id}`;\n  }\n  if (!sameDisplaySetId) {\n    console.log('sameDisplaySetId not defined in', this);\n    return `sameDisplaySetId not defined in ${this.id}`;\n  }\n  const { displaySetMatchDetails, displaySets } = options;\n  const match = displaySetMatchDetails.get(sameDisplaySetId);\n  if (!match) {\n    console.log('No match for display set', sameDisplaySetId);\n    return false;\n  }\n  const { displaySetInstanceUID } = match;\n  const altDisplaySet = displaySets.find(it => it.displaySetInstanceUID == displaySetInstanceUID);\n  if (!altDisplaySet) {\n    console.log('No display set found with', displaySetInstanceUID, 'in', displaySets);\n    return false;\n  }\n  const testValue = altDisplaySet[sameAttribute];\n  return testValue === displaySet[sameAttribute];\n}\n","export default (study, extraData) => extraData?.displaySets?.length;\n","export default (study, extraData) =>\n  Math.max(...(extraData?.displaySets?.map?.(ds => ds.numImageFrames ?? 0) || [0]));\n","import { Types } from '@ohif/core';\n\nimport { id } from './id';\n\nimport hpTestSwitch from './hpTestSwitch';\n\nimport getCustomizationModule from './getCustomizationModule';\n// import {setViewportZoomPan, storeViewportZoomPan } from './custom-viewport/setViewportZoomPan';\nimport sameAs from './custom-attribute/sameAs';\nimport numberOfDisplaySets from './custom-attribute/numberOfDisplaySets';\nimport maxNumImageFrames from './custom-attribute/maxNumImageFrames';\n\n/**\n * The test extension provides additional behaviour for testing various\n * customizations and settings for OHIF.\n */\nconst testExtension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  /** Register additional behaviour:\n   *   * HP custom attribute seriesDescriptions to retrieve an array of all series descriptions\n   *   * HP custom attribute numberOfDisplaySets to retrieve the number of display sets\n   *   * HP custom attribute numberOfDisplaySetsWithImages to retrieve the number of display sets containing images\n   *   * HP custom attribute to return a boolean true, when the attribute sameAttribute has the same\n   *     value as another series description in an already matched display set selector named with the value\n   *     in `sameDisplaySetId`\n   */\n  preRegistration: ({ servicesManager }: Types.Extensions.ExtensionParams) => {\n    const { hangingProtocolService } = servicesManager.services;\n    hangingProtocolService.addCustomAttribute(\n      'numberOfDisplaySets',\n      'Number of displays sets',\n      numberOfDisplaySets\n    );\n    hangingProtocolService.addCustomAttribute(\n      'maxNumImageFrames',\n      'Maximum of number of image frames',\n      maxNumImageFrames\n    );\n    hangingProtocolService.addCustomAttribute(\n      'sameAs',\n      'Match an attribute in an existing display set',\n      sameAs\n    );\n  },\n\n  /** Registers some customizations */\n  getCustomizationModule,\n\n  getHangingProtocolModule: () => {\n    return [\n      // Create a MxN hanging protocol available by default\n      {\n        name: hpTestSwitch.id,\n        protocol: hpTestSwitch,\n      },\n    ];\n  },\n};\n\nexport default testExtension;\n","import { codingValues, contextMenuCodeItem, findingsContextMenu } from './custom-context-menu';\n\nexport default function getCustomizationModule() {\n  return [\n    {\n      name: 'custom-context-menu',\n      value: [codingValues, contextMenuCodeItem, findingsContextMenu],\n    },\n  ];\n}\n"],"names":["id","packageJson","viewport0a","viewportOptions","viewportId","toolGroupId","allowUnmatchedView","displaySets","viewport1b","matchedDisplaySetsIndex","viewport2c","viewport3d","viewport3a","viewport2b","viewport1c","viewport0d","viewportStructure","layoutType","properties","rows","columns","hasUpdatedPriorsInformation","description","name","protocolMatchingRules","weight","attribute","constraint","greaterThan","toolGroupIds","displaySetSelectors","defaultDisplaySetId","seriesMatchingRules","value","equals","defaultViewport","viewportType","stages","viewports","numberOfPriorsReferenced","text","type","color","transform","customizationService","code","codeRef","this","Error","get","ref","label","commands","commandName","customizationType","menus","selector","nearbyToolData","items","actionType","subMenu","protocol","delegating","displaySet","options","sameAttribute","sameDisplaySetId","console","log","displaySetMatchDetails","match","displaySetInstanceUID","altDisplaySet","find","it","study","extraData","length","Math","max","map","ds","numImageFrames","preRegistration","servicesManager","hangingProtocolService","services","addCustomAttribute","numberOfDisplaySets","maxNumImageFrames","sameAs","getCustomizationModule","codingValues","contextMenuCodeItem","findingsContextMenu","getHangingProtocolModule","hpTestSwitch"],"sourceRoot":""}