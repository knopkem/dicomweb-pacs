{"version":3,"file":"295.bundle.2d89c137fd3a666aa5fe.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\n  const { tools } = customizationService.get('cornerstone.overlayViewportTools') ?? {};\n\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\n}\n\nexport default createSEGToolGroupAndAddTools;\n","import { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  HYDRATE_SEG: 5,\n};\n\nfunction promptHydrateSEG({\n  servicesManager,\n  segDisplaySet,\n  viewportId,\n  preHydrateCallbacks,\n  hydrateSEGDisplaySet,\n}) {\n  const { uiViewportDialogService } = servicesManager.services;\n\n  return new Promise(async function (resolve, reject) {\n    const promptResult = await _askHydrate(uiViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\n      preHydrateCallbacks?.forEach(callback => {\n        callback();\n      });\n\n      const isHydrated = await hydrateSEGDisplaySet({\n        segDisplaySet,\n        viewportId,\n      });\n\n      resolve(isHydrated);\n    }\n  });\n}\n\nfunction _askHydrate(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to open this Segmentation?';\n    const actions = [\n      {\n        type: ButtonEnums.type.secondary,\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_SEG,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n      onKeyPress: event => {\n        if (event.key === 'Enter') {\n          onSubmit(RESPONSE.HYDRATE_SEG);\n        }\n      },\n    });\n  });\n}\n\nexport default promptHydrateSEG;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon, Tooltip } from '@ohif/ui';\n\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  switch (isHydrated) {\n    case true:\n      StatusIcon = () => <Icon name=\"status-alert\" />;\n\n      ToolTipMessage = () => <div>This Segmentation is loaded in the segmentation panel</div>;\n      break;\n    case false:\n      StatusIcon = () => (\n        <Icon\n          className=\"text-aqua-pale\"\n          name=\"status-untracked\"\n        />\n      );\n\n      ToolTipMessage = () => <div>Click LOAD to load segmentation.</div>;\n  }\n\n  const StatusArea = () => {\n    const { t } = useTranslation('Common');\n    const loadStr = t('LOAD');\n\n    return (\n      <div className=\"flex h-6 cursor-default text-sm leading-6 text-white\">\n        <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\n          <StatusIcon />\n          <span className=\"ml-1\">SEG</span>\n        </div>\n        {!isHydrated && (\n          <div\n            className=\"bg-primary-main hover:bg-primary-light ml-1 cursor-pointer rounded px-1.5 hover:text-black\"\n            // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\n            onMouseUp={onStatusClick}\n          >\n            {loadStr}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip\n          content={<ToolTipMessage />}\n          position=\"bottom-left\"\n        >\n          <StatusArea />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusArea />}\n    </>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { LoadingIndicatorTotalPercent, useViewportGrid, ViewportActionArrows } from '@ohif/ui';\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\nimport _getStatusComponent from './_getStatusComponent';\n\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\n\nfunction OHIFCornerstoneSEGViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportOptions,\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  } = props;\n\n  const { t } = useTranslation('SEGViewport');\n  const viewportId = viewportOptions.viewportId;\n\n  const {\n    displaySetService,\n    toolGroupService,\n    segmentationService,\n    customizationService,\n    viewportActionCornersService,\n  } = servicesManager.services;\n\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportId}`;\n\n  // SEG viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SEG viewport should only have a single display set');\n  }\n\n  const segDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n\n  // States\n  const [selectedSegment, setSelectedSegment] = useState(1);\n\n  // Hydration means that the SEG is opened and segments are loaded into the\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\n  // loading basically means SEG loading over network and bit unpacking of the\n  // SEG data.\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\n  const [element, setElement] = useState(null);\n  const [processingProgress, setProcessingProgress] = useState({\n    percentComplete: null,\n    totalSegments: null,\n  });\n\n  // refs\n  const referencedDisplaySetRef = useRef(null);\n\n  const { viewports, activeViewportId } = viewportGrid;\n\n  const referencedDisplaySet = segDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet,\n    segDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const onElementDisabled = () => {\n    setElement(null);\n  };\n\n  const storePresentationState = useCallback(() => {\n    viewportGrid?.viewports.forEach(({ viewportId }) => {\n      commandsManager.runCommand('storePresentation', {\n        viewportId,\n      });\n    });\n  }, [viewportGrid]);\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\n\n    // Todo: jump to the center of the first segment\n    return (\n      <Component\n        {...props}\n        displaySets={[referencedDisplaySet, segDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n        }}\n        onElementEnabled={evt => {\n          props.onElementEnabled?.(evt);\n          onElementEnabled(evt);\n        }}\n        onElementDisabled={onElementDisabled}\n      ></Component>\n    );\n  }, [viewportId, segDisplaySet, toolGroupId]);\n\n  const onSegmentChange = useCallback(\n    direction => {\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      const { segments } = segmentation;\n\n      const numberOfSegments = Object.keys(segments).length;\n\n      let newSelectedSegmentIndex = selectedSegment + direction;\n\n      // Segment 0 is always background\n\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\n        newSelectedSegmentIndex = 1;\n      } else if (newSelectedSegmentIndex === 0) {\n        newSelectedSegmentIndex = numberOfSegments - 1;\n      }\n\n      segmentationService.jumpToSegmentCenter(segmentationId, newSelectedSegmentIndex, toolGroupId);\n      setSelectedSegment(newSelectedSegmentIndex);\n    },\n    [selectedSegment]\n  );\n\n  useEffect(() => {\n    if (segIsLoading) {\n      return;\n    }\n\n    promptHydrateSEG({\n      servicesManager,\n      viewportId,\n      segDisplaySet,\n      preHydrateCallbacks: [storePresentationState],\n      hydrateSEGDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  }, [servicesManager, viewportId, segDisplaySet, segIsLoading]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (evt.segDisplaySet.displaySetInstanceUID === segDisplaySet.displaySetInstanceUID) {\n          setSegIsLoading(false);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\n      ({ percentComplete, numSegments }) => {\n        setProcessingProgress({\n          percentComplete,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  /**\n   Cleanup the SEG viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    // This creates a custom tool group which has the lifetime of this view\n    // only, and does NOT interfere with currently displayed segmentations.\n    toolGroup = createSEGToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\n\n      // Only destroy the viewport specific implementation\n      toolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsHydrated(segDisplaySet.isHydrated);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\n      referencedDisplaySetRef.current = null;\n    };\n  }, [segDisplaySet]);\n\n  const hydrateSEGDisplaySet = useCallback(\n    ({ segDisplaySet, viewportId }) => {\n      commandsManager.runCommand('loadSegmentationDisplaySetsForViewport', {\n        displaySets: [segDisplaySet],\n        viewportId,\n      });\n    },\n    [commandsManager]\n  );\n\n  const onStatusClick = useCallback(async () => {\n    // Before hydrating a SEG and make it added to all viewports in the grid\n    // that share the same frameOfReferenceUID, we need to store the viewport grid\n    // presentation state, so that we can restore it after hydrating the SEG. This is\n    // required if the user has changed the viewport (other viewport than SEG viewport)\n    // presentation state (w/l and invert) and then opens the SEG. If we don't store\n    // the presentation state, the viewport will be reset to the default presentation\n    storePresentationState();\n    const isHydrated = await hydrateSEGDisplaySet({\n      segDisplaySet,\n      viewportId,\n    });\n\n    setIsHydrated(isHydrated);\n  }, [hydrateSEGDisplaySet, segDisplaySet, storePresentationState, viewportId]);\n\n  useEffect(() => {\n    viewportActionCornersService.setComponents([\n      {\n        viewportId,\n        id: 'viewportStatusComponent',\n        component: _getStatusComponent({\n          isHydrated,\n          onStatusClick,\n        }),\n        indexPriority: -100,\n        location: viewportActionCornersService.LOCATIONS.topLeft,\n      },\n      {\n        viewportId,\n        id: 'viewportActionArrowsComponent',\n        component: (\n          <ViewportActionArrows\n            key=\"actionArrows\"\n            onArrowsClick={onSegmentChange}\n            className={\n              viewportId === activeViewportId ? 'visible' : 'invisible group-hover:visible'\n            }\n          ></ViewportActionArrows>\n        ),\n        indexPriority: 0,\n        location: viewportActionCornersService.LOCATIONS.topRight,\n      },\n    ]);\n  }, [\n    activeViewportId,\n    isHydrated,\n    onSegmentChange,\n    onStatusClick,\n    viewportActionCornersService,\n    viewportId,\n  ]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n  } = referencedDisplaySetRef.current.metadata;\n\n  return (\n    <>\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {segIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"h-full w-full\"\n            totalNumbers={processingProgress.totalSegments}\n            percentComplete={processingProgress.percentComplete}\n            loadingText=\"Loading SEG...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSEGViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneSEGViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, segDisplaySet) {\n  const { SharedFunctionalGroupsSequence } = segDisplaySet.instance;\n\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\n    ? SharedFunctionalGroupsSequence[0]\n    : SharedFunctionalGroupsSequence;\n\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\n\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\n    ? PixelMeasuresSequence[0]\n    : PixelMeasuresSequence;\n\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness || SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneSEGViewport;\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","get","createToolGroupAndAddTools","RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","servicesManager","segDisplaySet","viewportId","preHydrateCallbacks","hydrateSEGDisplaySet","uiViewportDialogService","services","Promise","async","resolve","reject","promptResult","message","actions","type","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","onKeyPress","event","key","_askHydrate","forEach","callback","_getStatusComponent","isHydrated","onStatusClick","ToolTipMessage","StatusIcon","React","Icon","name","className","StatusArea","t","useTranslation","loadStr","onMouseUp","Tooltip","content","position","OHIFCornerstoneSEGViewport","props","children","displaySets","viewportOptions","extensionManager","commandsManager","displaySetService","toolGroupService","segmentationService","viewportActionCornersService","length","Error","viewportGrid","viewportGridService","useViewportGrid","selectedSegment","setSelectedSegment","useState","setIsHydrated","segIsLoading","setSegIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementDisabled","storePresentationState","useCallback","runCommand","getCornerstoneViewport","component","Component","getModuleEntry","_extends","viewportType","orientation","onElementEnabled","evt","detail","onSegmentChange","direction","segmentationId","displaySetInstanceUID","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateSEG","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","setComponents","id","indexPriority","location","LOCATIONS","topLeft","ViewportActionArrows","onArrowsClick","topRight","childrenWithProps","map","child","index","LoadingIndicatorTotalPercent","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}