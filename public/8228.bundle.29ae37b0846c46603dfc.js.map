{"version":3,"file":"8228.bundle.29ae37b0846c46603dfc.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/listComponentGenerator.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/utils.ts","webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopyViewport.tsx","webpack:///../../../extensions/dicom-microscopy/src/utils/dicomWebClient.ts"],"sourcesContent":["const listComponentGenerator = props => {\r\n  const { list, itemGenerator } = props;\r\n  if (!list) {\r\n    return;\r\n  }\r\n  return list.map(item => {\r\n    if (!item) {\r\n      return;\r\n    }\r\n    const generator = item.generator || itemGenerator;\r\n    if (!generator) {\r\n      throw new Error(`No generator for ${item}`);\r\n    }\r\n    return generator({ ...props, item });\r\n  });\r\n};\r\n\r\nexport default listComponentGenerator;\r\n","import moment from 'moment';\r\nimport * as cornerstone from '@cornerstonejs/core';\r\n\r\n/**\r\n * Checks if value is valid.\r\n *\r\n * @param {number} value\r\n * @returns {boolean} is valid.\r\n */\r\nexport function isValidNumber(value) {\r\n  return typeof value === 'number' && !isNaN(value);\r\n}\r\n\r\n/**\r\n * Formats number precision.\r\n *\r\n * @param {number} number\r\n * @param {number} precision\r\n * @returns {number} formatted number.\r\n */\r\nexport function formatNumberPrecision(number, precision) {\r\n  if (number !== null) {\r\n    return parseFloat(number).toFixed(precision);\r\n  }\r\n}\r\n\r\n/**\r\n * Formats DICOM date.\r\n *\r\n * @param {string} date\r\n * @param {string} strFormat\r\n * @returns {string} formatted date.\r\n */\r\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\r\n  return moment(date, 'YYYYMMDD').format(strFormat);\r\n}\r\n\r\n/**\r\n *    DICOM Time is stored as HHmmss.SSS, where:\r\n *      HH 24 hour time:\r\n *        m mm        0..59   Minutes\r\n *        s ss        0..59   Seconds\r\n *        S SS SSS    0..999  Fractional seconds\r\n *\r\n *        Goal: '24:12:12'\r\n *\r\n * @param {*} time\r\n * @param {string} strFormat\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\r\n  return moment(time, 'HH:mm:ss').format(strFormat);\r\n}\r\n\r\n/**\r\n * Gets compression type\r\n *\r\n * @param {number} imageId\r\n * @returns {string} compression type.\r\n */\r\nexport function getCompression(imageId) {\r\n  const generalImageModule = cornerstone.metaData.get('generalImageModule', imageId) || {};\r\n  const { lossyImageCompression, lossyImageCompressionRatio, lossyImageCompressionMethod } =\r\n    generalImageModule;\r\n\r\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\r\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\r\n    const compressionRatio = formatNumberPrecision(lossyImageCompressionRatio, 2);\r\n    return compressionMethod + compressionRatio + ' : 1';\r\n  }\r\n\r\n  return 'Lossless / Uncompressed';\r\n}\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport listComponentGenerator from './listComponentGenerator';\r\nimport './ViewportOverlay.css';\r\nimport { formatDICOMDate, formatDICOMTime, formatNumberPrecision } from './utils';\r\nimport { utils } from '@ohif/core';\r\n\r\nconst { formatPN } = utils;\r\n\r\ninterface OverlayItem {\r\n  id: string;\r\n  title: string;\r\n  value?: (props: any) => string;\r\n  condition?: (props: any) => boolean;\r\n  contents?: (props: any) => { className: string; value: any };\r\n  generator?: (props: any) => any;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} config is a configuration object that defines four lists of elements,\r\n * one topLeft, topRight, bottomLeft, bottomRight contents.\r\n * @param {*} extensionManager is used to load the image data.\r\n * @returns\r\n */\r\nexport const generateFromConfig = ({ config, overlayData, ...props }) => {\r\n  const {\r\n    topLeft = [],\r\n    topRight = [],\r\n    bottomLeft = [],\r\n    bottomRight = [],\r\n  }: {\r\n    topLeft?: OverlayItem[];\r\n    topRight?: OverlayItem[];\r\n    bottomLeft?: OverlayItem[];\r\n    bottomRight?: OverlayItem[];\r\n  } = overlayData ?? {};\r\n  const topLeftClass = 'top-viewport left-viewport text-primary-light';\r\n  const topRightClass = 'top-viewport right-viewport-scrollbar text-primary-light';\r\n  const bottomRightClass = 'bottom-viewport right-viewport-scrollbar text-primary-light';\r\n  const bottomLeftClass = 'bottom-viewport left-viewport text-primary-light';\r\n  const overlay = 'absolute pointer-events-none microscopy-viewport-overlay';\r\n\r\n  return (\r\n    <>\r\n      {topLeft && topLeft.length > 0 && (\r\n        <div data-cy={'viewport-overlay-top-left'} className={classnames(overlay, topLeftClass)}>\r\n          {listComponentGenerator({ ...props, list: topLeft, itemGenerator })}\r\n        </div>\r\n      )}\r\n      {topRight && topRight.length > 0 && (\r\n        <div data-cy={'viewport-overlay-top-right'} className={classnames(overlay, topRightClass)}>\r\n          {listComponentGenerator({\r\n            ...props,\r\n            list: topRight,\r\n            itemGenerator,\r\n          })}\r\n        </div>\r\n      )}\r\n      {bottomRight && bottomRight.length > 0 && (\r\n        <div\r\n          data-cy={'viewport-overlay-bottom-right'}\r\n          className={classnames(overlay, bottomRightClass)}\r\n        >\r\n          {listComponentGenerator({\r\n            ...props,\r\n            list: bottomRight,\r\n            itemGenerator,\r\n          })}\r\n        </div>\r\n      )}\r\n      {bottomLeft && bottomLeft.length > 0 && (\r\n        <div\r\n          data-cy={'viewport-overlay-bottom-left'}\r\n          className={classnames(overlay, bottomLeftClass)}\r\n        >\r\n          {listComponentGenerator({\r\n            ...props,\r\n            list: bottomLeft,\r\n            itemGenerator,\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst itemGenerator = (props: any) => {\r\n  const { item } = props;\r\n  const { title, value: valueFunc, condition, contents } = item;\r\n  props.image = { ...props.image, ...props.metadata };\r\n  props.formatDate = formatDICOMDate;\r\n  props.formatTime = formatDICOMTime;\r\n  props.formatPN = formatPN;\r\n  props.formatNumberPrecision = formatNumberPrecision;\r\n  if (condition && !condition(props)) {\r\n    return null;\r\n  }\r\n  if (!contents && !valueFunc) {\r\n    return null;\r\n  }\r\n  const value = valueFunc && valueFunc(props);\r\n  const contentsValue = (contents && contents(props)) || [\r\n    { className: 'mr-1', value: title },\r\n    { classname: 'mr-1 font-light', value },\r\n  ];\r\n\r\n  return (\r\n    <div key={item.id} className=\"flex flex-row\">\r\n      {contentsValue.map((content, idx) => (\r\n        <span key={idx} className={content.className}>\r\n          {content.value}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default generateFromConfig;\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { cleanDenaturalizedDataset } from '@ohif/extension-default';\r\n\r\nimport './DicomMicroscopyViewport.css';\r\nimport ViewportOverlay from './components/ViewportOverlay';\r\nimport getDicomWebClient from './utils/dicomWebClient';\r\nimport dcmjs from 'dcmjs';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nfunction DicomMicroscopyViewport({\r\n  activeViewportId,\r\n  setViewportActive,\r\n  displaySets,\r\n  viewportId,\r\n  dataSource,\r\n  resizeRef,\r\n}: {\r\n  activeViewportId: string;\r\n  setViewportActive: Function;\r\n  displaySets: any[];\r\n  viewportId: string;\r\n  dataSource: any;\r\n  resizeRef: any;\r\n}) {\r\n  const { servicesManager, extensionManager } = useSystem();\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [viewer, setViewer] = useState(null);\r\n  const [managedViewer, setManagedViewer] = useState(null);\r\n  const overlayElement = useRef();\r\n  const container = useRef();\r\n  const { microscopyService, customizationService } = servicesManager.services;\r\n\r\n  const overlayData = customizationService.getCustomization('microscopyViewport.overlay');\r\n\r\n  // install the microscopy renderer into the web page.\r\n  // you should only do this once.\r\n  const installOpenLayersRenderer = useCallback(\r\n    async (container, displaySet) => {\r\n      const loadViewer = async metadata => {\r\n        const dicomMicroscopyModule = await microscopyService.importDicomMicroscopyViewer();\r\n        const { viewer: DicomMicroscopyViewer, metadata: metadataUtils } = dicomMicroscopyModule;\r\n\r\n        const microscopyViewer = DicomMicroscopyViewer.VolumeImageViewer;\r\n\r\n        const client = getDicomWebClient({\r\n          extensionManager,\r\n          servicesManager,\r\n        });\r\n\r\n        // Parse, format, and filter metadata\r\n        const volumeImages: any[] = [];\r\n\r\n        /**\r\n         * This block of code is the original way of loading DICOM into dicom-microscopy-viewer\r\n         * as in their documentation.\r\n         * But we have the metadata already loaded by our loaders.\r\n         * As the metadata for microscopy DIOM files tends to be big and we don't\r\n         * want to double load it, below we have the mechanism to reconstruct the\r\n         * DICOM JSON structure (denaturalized) from naturalized metadata.\r\n         * (NOTE: Our loaders cache only naturalized metadata, not the denaturalized.)\r\n         */\r\n        // {\r\n        //   const retrieveOptions = {\r\n        //     studyInstanceUID: metadata[0].StudyInstanceUID,\r\n        //     seriesInstanceUID: metadata[0].SeriesInstanceUID,\r\n        //   };\r\n        //   metadata = await client.retrieveSeriesMetadata(retrieveOptions);\r\n        //   // Parse, format, and filter metadata\r\n        //   metadata.forEach(m => {\r\n        //     if (\r\n        //       volumeImages.length > 0 &&\r\n        //       m['00200052'].Value[0] != volumeImages[0].FrameOfReferenceUID\r\n        //     ) {\r\n        //       console.warn(\r\n        //         'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\r\n        //         m['00200052'].Value[0]\r\n        //       );\r\n        //       m['00200052'].Value[0] = volumeImages[0].FrameOfReferenceUID;\r\n        //     }\r\n        //     NOTE: depending on different data source, image.ImageType sometimes\r\n        //     is a string, not a string array.\r\n        //     m['00080008'] = transformImageTypeUnnaturalized(m['00080008']);\r\n\r\n        //     const image = new metadataUtils.VLWholeSlideMicroscopyImage({\r\n        //       metadata: m,\r\n        //     });\r\n        //     const imageFlavor = image.ImageType[2];\r\n        //     if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\r\n        //       volumeImages.push(image);\r\n        //     }\r\n        //   });\r\n        // }\r\n\r\n        metadata.forEach(m => {\r\n          // NOTE: depending on different data source, image.ImageType sometimes\r\n          //    is a string, not a string array.\r\n          m.ImageType = typeof m.ImageType === 'string' ? m.ImageType.split('\\\\') : m.ImageType;\r\n\r\n          const inst = cleanDenaturalizedDataset(\r\n            dcmjs.data.DicomMetaDictionary.denaturalizeDataset(m),\r\n            {\r\n              StudyInstanceUID: m.StudyInstanceUID,\r\n              SeriesInstanceUID: m.SeriesInstanceUID,\r\n              dataSourceConfig: dataSource.getConfig(),\r\n            }\r\n          );\r\n          if (!inst['00480105']) {\r\n            // Optical Path Sequence, no OpticalPathIdentifier?\r\n            // NOTE: this is actually a not-well formatted DICOM VL Whole Slide Microscopy Image.\r\n            inst['00480105'] = {\r\n              vr: 'SQ',\r\n              Value: [\r\n                {\r\n                  '00480106': {\r\n                    vr: 'SH',\r\n                    Value: ['1'],\r\n                  },\r\n                },\r\n              ],\r\n            };\r\n          }\r\n          const image = new metadataUtils.VLWholeSlideMicroscopyImage({\r\n            metadata: inst,\r\n          });\r\n\r\n          const imageFlavor = image.ImageType[2];\r\n          if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\r\n            volumeImages.push(image);\r\n          }\r\n        });\r\n\r\n        // format metadata for microscopy-viewer\r\n        const options = {\r\n          client,\r\n          metadata: volumeImages,\r\n          retrieveRendered: false,\r\n          controls: ['overview', 'position'],\r\n        };\r\n\r\n        const viewer = new microscopyViewer(options);\r\n\r\n        if (overlayElement && overlayElement.current && viewer.addViewportOverlay) {\r\n          viewer.addViewportOverlay({\r\n            element: overlayElement.current,\r\n            coordinates: [0, 0], // TODO: dicom-microscopy-viewer documentation says this can be false to be automatically, but it is not.\r\n            navigate: true,\r\n            className: 'OpenLayersOverlay',\r\n          });\r\n        }\r\n\r\n        viewer.render({ container });\r\n\r\n        const { StudyInstanceUID, SeriesInstanceUID } = displaySet;\r\n\r\n        const managedViewer = microscopyService.addViewer(\r\n          viewer,\r\n          viewportId,\r\n          container,\r\n          StudyInstanceUID,\r\n          SeriesInstanceUID\r\n        );\r\n\r\n        managedViewer.addContextMenuCallback((event: Event) => {\r\n          // TODO: refactor this after Bill's changes on ContextMenu feature get merged\r\n          // const roiAnnotationNearBy = this.getNearbyROI(event);\r\n        });\r\n\r\n        setViewer(viewer);\r\n        setManagedViewer(managedViewer);\r\n      };\r\n\r\n      microscopyService.clearAnnotations();\r\n\r\n      let smDisplaySet = displaySet;\r\n      if (displaySet.Modality === 'SR') {\r\n        // for SR displaySet, let's load the actual image displaySet\r\n        smDisplaySet = displaySet.getSourceDisplaySet();\r\n      }\r\n      console.log('Loading viewer metadata', smDisplaySet);\r\n\r\n      await loadViewer(smDisplaySet.others);\r\n\r\n      if (displaySet.Modality === 'SR') {\r\n        displaySet.load(smDisplaySet);\r\n      }\r\n    },\r\n    [dataSource, extensionManager, microscopyService, servicesManager, viewportId]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const displaySet = displaySets[0];\r\n    installOpenLayersRenderer(container.current, displaySet).then(() => {\r\n      setIsLoaded(true);\r\n    });\r\n\r\n    return () => {\r\n      if (viewer) {\r\n        microscopyService.removeViewer(viewer);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const displaySet = displaySets[0];\r\n\r\n    microscopyService.clearAnnotations();\r\n\r\n    // loading SR\r\n    if (displaySet.Modality === 'SR') {\r\n      const referencedDisplaySet = displaySet.getSourceDisplaySet();\r\n      displaySet.load(referencedDisplaySet);\r\n    }\r\n  }, [managedViewer, displaySets, microscopyService]);\r\n\r\n  const style = { width: '100%', height: '100%' };\r\n  const displaySet = displaySets[0];\r\n  const firstInstance = displaySet.firstInstance || displaySet.instance;\r\n  const LoadingIndicatorProgress = customizationService.getCustomization(\r\n    'ui.loadingIndicatorProgress'\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={'DicomMicroscopyViewer'}\r\n      style={style}\r\n      onClick={() => {\r\n        if (viewportId !== activeViewportId) {\r\n          setViewportActive(viewportId);\r\n        }\r\n      }}\r\n    >\r\n      <div style={{ ...style, display: 'none' }}>\r\n        <div style={{ ...style }} ref={overlayElement}>\r\n          <div style={{ position: 'relative', height: '100%', width: '100%' }}>\r\n            {displaySet && firstInstance.imageId && (\r\n              <ViewportOverlay\r\n                overlayData={overlayData}\r\n                displaySet={displaySet}\r\n                instance={displaySet.instance}\r\n                metadata={displaySet.metadata}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={style}\r\n        ref={(ref: any) => {\r\n          container.current = ref;\r\n          resizeRef.current = ref;\r\n        }}\r\n      />\r\n      {isLoaded ? null : <LoadingIndicatorProgress className={'h-full w-full bg-black'} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DicomMicroscopyViewport;\r\n","import { errorHandler, DicomMetadataStore } from '@ohif/core';\r\nimport { StaticWadoClient } from '@ohif/extension-default';\r\n\r\n/**\r\n * create a DICOMwebClient object to be used by Dicom Microscopy Viewer\r\n *\r\n * Referenced the code from `/extensions/default/src/DicomWebDataSource/index.js`\r\n *\r\n * @param param0\r\n * @returns\r\n */\r\nexport default function getDicomWebClient({ extensionManager, servicesManager }: withAppTypes) {\r\n  const dataSourceConfig = window.config.dataSources.find(\r\n    ds => ds.sourceName === extensionManager.activeDataSource\r\n  );\r\n  const { userAuthenticationService } = servicesManager.services;\r\n\r\n  const { wadoRoot, staticWado, singlepart } = dataSourceConfig.configuration;\r\n\r\n  const wadoConfig = {\r\n    url: wadoRoot || '/dicomlocal',\r\n    staticWado,\r\n    singlepart,\r\n    headers: userAuthenticationService.getAuthorizationHeader(),\r\n    errorInterceptor: errorHandler.getHTTPErrorHandler(),\r\n  };\r\n\r\n  const client = new StaticWadoClient(wadoConfig);\r\n  client.wadoURL = wadoConfig.url;\r\n\r\n  if (extensionManager.activeDataSource === 'dicomlocal') {\r\n    /**\r\n     * For local data source, override the retrieveInstanceFrames() method of the\r\n     * dicomweb-client to retrieve image data from memory cached metadata.\r\n     * Other methods of the client doesn't matter, as we are feeding the DMV\r\n     * with the series metadata already.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.studyInstanceUID - Study Instance UID\r\n     * @param {String} options.seriesInstanceUID - Series Instance UID\r\n     * @param {String} options.sopInstanceUID - SOP Instance UID\r\n     * @param {String} options.frameNumbers - One-based indices of Frame Items\r\n     * @param {Object} [options.queryParams] - HTTP query parameters\r\n     * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\r\n     */\r\n    //\r\n    client.retrieveInstanceFrames = async options => {\r\n      if (!('studyInstanceUID' in options)) {\r\n        throw new Error('Study Instance UID is required for retrieval of instance frames');\r\n      }\r\n      if (!('seriesInstanceUID' in options)) {\r\n        throw new Error('Series Instance UID is required for retrieval of instance frames');\r\n      }\r\n      if (!('sopInstanceUID' in options)) {\r\n        throw new Error('SOP Instance UID is required for retrieval of instance frames');\r\n      }\r\n      if (!('frameNumbers' in options)) {\r\n        throw new Error('frame numbers are required for retrieval of instance frames');\r\n      }\r\n      console.log(\r\n        `retrieve frames ${options.frameNumbers.toString()} of instance ${options.sopInstanceUID}`\r\n      );\r\n\r\n      const instance = DicomMetadataStore.getInstance(\r\n        options.studyInstanceUID,\r\n        options.seriesInstanceUID,\r\n        options.sopInstanceUID\r\n      );\r\n\r\n      const frameNumbers = Array.isArray(options.frameNumbers)\r\n        ? options.frameNumbers\r\n        : options.frameNumbers.split(',');\r\n\r\n      return frameNumbers.map(fr =>\r\n        Array.isArray(instance.PixelData) ? instance.PixelData[+fr - 1] : instance.PixelData\r\n      );\r\n    };\r\n  }\r\n\r\n  return client;\r\n}\r\n"],"names":["props","list","itemGenerator","map","item","generator","Error","formatNumberPrecision","number","precision","parseFloat","toFixed","formatDICOMDate","date","strFormat","moment","format","formatDICOMTime","time","formatPN","utils","title","value","valueFunc","condition","contents","image","metadata","formatDate","formatTime","contentsValue","className","classname","React","key","id","content","idx","generateFromConfig","config","overlayData","topLeft","topRight","bottomLeft","bottomRight","overlay","length","classnames","listComponentGenerator","activeViewportId","setViewportActive","displaySets","viewportId","dataSource","resizeRef","servicesManager","extensionManager","useSystem","isLoaded","setIsLoaded","useState","viewer","setViewer","managedViewer","setManagedViewer","overlayElement","useRef","container","microscopyService","customizationService","services","getCustomization","installOpenLayersRenderer","useCallback","async","displaySet","clearAnnotations","smDisplaySet","Modality","getSourceDisplaySet","console","log","dicomMicroscopyModule","importDicomMicroscopyViewer","DicomMicroscopyViewer","metadataUtils","microscopyViewer","VolumeImageViewer","client","dataSourceConfig","window","dataSources","find","ds","sourceName","activeDataSource","userAuthenticationService","wadoRoot","staticWado","singlepart","configuration","wadoConfig","url","headers","getAuthorizationHeader","errorInterceptor","errorHandler","getHTTPErrorHandler","StaticWadoClient","wadoURL","retrieveInstanceFrames","options","frameNumbers","toString","sopInstanceUID","instance","DicomMetadataStore","getInstance","studyInstanceUID","seriesInstanceUID","Array","isArray","split","fr","PixelData","getDicomWebClient","volumeImages","forEach","m","ImageType","inst","cleanDenaturalizedDataset","dcmjs","DicomMetaDictionary","denaturalizeDataset","StudyInstanceUID","SeriesInstanceUID","getConfig","vr","Value","VLWholeSlideMicroscopyImage","imageFlavor","push","retrieveRendered","controls","current","addViewportOverlay","element","coordinates","navigate","render","addViewer","addContextMenuCallback","event","loadViewer","others","load","useEffect","then","removeViewer","referencedDisplaySet","style","width","height","firstInstance","LoadingIndicatorProgress","onClick","display","ref","position","imageId","ViewportOverlay"],"sourceRoot":""}