{"version":3,"file":"188.bundle.7363e471943f8618ab11.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-rt/src/id.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/loadRTStruct.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone-dicom-rt/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-rt';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import dcmjs from 'dcmjs';\nconst { DicomMessage, DicomMetaDictionary } = dcmjs.data;\nconst dicomlab2RGB = dcmjs.data.Colors.dicomlab2RGB;\n\nasync function checkAndLoadContourData(instance, datasource) {\n  if (!instance || !instance.ROIContourSequence) {\n    return Promise.reject('Invalid instance object or ROIContourSequence');\n  }\n\n  const promisesMap = new Map();\n\n  for (const ROIContour of instance.ROIContourSequence) {\n    const referencedROINumber = ROIContour.ReferencedROINumber;\n    if (!ROIContour || !ROIContour.ContourSequence) {\n      promisesMap.set(referencedROINumber, [Promise.resolve([])]);\n      continue;\n    }\n\n    for (const Contour of ROIContour.ContourSequence) {\n      if (!Contour || !Contour.ContourData) {\n        return Promise.reject('Invalid Contour or ContourData');\n      }\n\n      const contourData = Contour.ContourData;\n\n      if (Array.isArray(contourData)) {\n        promisesMap.has(referencedROINumber)\n          ? promisesMap.get(referencedROINumber).push(Promise.resolve(contourData))\n          : promisesMap.set(referencedROINumber, [Promise.resolve(contourData)]);\n      } else if (contourData && contourData.BulkDataURI) {\n        const bulkDataURI = contourData.BulkDataURI;\n\n        if (!datasource || !datasource.retrieve || !datasource.retrieve.bulkDataURI) {\n          return Promise.reject('Invalid datasource object or retrieve function');\n        }\n\n        const bulkDataPromise = datasource.retrieve.bulkDataURI({\n          BulkDataURI: bulkDataURI,\n          StudyInstanceUID: instance.StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          SOPInstanceUID: instance.SOPInstanceUID,\n        });\n\n        promisesMap.has(referencedROINumber)\n          ? promisesMap.get(referencedROINumber).push(bulkDataPromise)\n          : promisesMap.set(referencedROINumber, [bulkDataPromise]);\n      } else {\n        return Promise.reject(`Invalid ContourData: ${contourData}`);\n      }\n    }\n  }\n\n  const resolvedPromisesMap = new Map();\n  for (const [key, promiseArray] of promisesMap.entries()) {\n    resolvedPromisesMap.set(key, await Promise.allSettled(promiseArray));\n  }\n\n  instance.ROIContourSequence.forEach(ROIContour => {\n    try {\n      const referencedROINumber = ROIContour.ReferencedROINumber;\n      const resolvedPromises = resolvedPromisesMap.get(referencedROINumber);\n\n      if (ROIContour.ContourSequence) {\n        ROIContour.ContourSequence.forEach((Contour, index) => {\n          const promise = resolvedPromises[index];\n          if (promise.status === 'fulfilled') {\n            if (Array.isArray(promise.value) && promise.value.every(Number.isFinite)) {\n              // If promise.value is already an array of numbers, use it directly\n              Contour.ContourData = promise.value;\n            } else {\n              // If the resolved promise value is a byte array (Blob), it needs to be decoded\n              const uint8Array = new Uint8Array(promise.value);\n              const textDecoder = new TextDecoder();\n              const dataUint8Array = textDecoder.decode(uint8Array);\n              if (typeof dataUint8Array === 'string' && dataUint8Array.includes('\\\\')) {\n                Contour.ContourData = dataUint8Array.split('\\\\').map(parseFloat);\n              } else {\n                Contour.ContourData = [];\n              }\n            }\n          } else {\n            console.error(promise.reason);\n          }\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  });\n}\n\nexport default async function loadRTStruct(\n  extensionManager,\n  rtStructDisplaySet,\n  referencedDisplaySet,\n  headers\n) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  const { bulkDataURI } = dataSource.getConfig?.() || {};\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const imageIdSopInstanceUidPairs =\n    _getImageIdSopInstanceUidPairsForDisplaySet(referencedDisplaySet);\n\n  // Set here is loading is asynchronous.\n  // If this function throws its set back to false.\n  rtStructDisplaySet.isLoaded = true;\n  let instance = rtStructDisplaySet.instance;\n\n  if (!bulkDataURI || !bulkDataURI.enabled) {\n    const segArrayBuffer = await dicomLoaderService.findDicomDataPromise(\n      rtStructDisplaySet,\n      null,\n      headers\n    );\n\n    const dicomData = DicomMessage.readFile(segArrayBuffer);\n    const rtStructDataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n    rtStructDataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n    instance = rtStructDataset;\n  } else {\n    await checkAndLoadContourData(instance, dataSource);\n  }\n\n  const { StructureSetROISequence, ROIContourSequence, RTROIObservationsSequence } = instance;\n\n  // Define our structure set entry and add it to the rtstruct module state.\n  const structureSet = {\n    StructureSetLabel: instance.StructureSetLabel,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    ROIContours: [],\n    visible: true,\n  };\n\n  for (let i = 0; i < ROIContourSequence.length; i++) {\n    const ROIContour = ROIContourSequence[i];\n    const { ContourSequence } = ROIContour;\n\n    if (!ContourSequence) {\n      continue;\n    }\n\n    const isSupported = false;\n\n    const ContourSequenceArray = _toArray(ContourSequence);\n\n    const contourPoints = [];\n    for (let c = 0; c < ContourSequenceArray.length; c++) {\n      const { ContourImageSequence, ContourData, NumberOfContourPoints, ContourGeometricType } =\n        ContourSequenceArray[c];\n\n      let isSupported = false;\n\n      const points = [];\n      for (let p = 0; p < NumberOfContourPoints * 3; p += 3) {\n        points.push({\n          x: ContourData[p],\n          y: ContourData[p + 1],\n          z: ContourData[p + 2],\n        });\n      }\n\n      switch (ContourGeometricType) {\n        case 'CLOSED_PLANAR':\n        case 'OPEN_PLANAR':\n        case 'POINT':\n          isSupported = true;\n\n          break;\n        default:\n          continue;\n      }\n\n      contourPoints.push({\n        numberOfPoints: NumberOfContourPoints,\n        points,\n        type: ContourGeometricType,\n        isSupported,\n      });\n    }\n\n    _setROIContourMetadata(\n      structureSet,\n      StructureSetROISequence,\n      RTROIObservationsSequence,\n      ROIContour,\n      contourPoints,\n      isSupported\n    );\n  }\n  return structureSet;\n}\n\nconst _getImageId = (imageIdSopInstanceUidPairs, sopInstanceUID) => {\n  const imageIdSopInstanceUidPairsEntry = imageIdSopInstanceUidPairs.find(\n    imageIdSopInstanceUidPairsEntry =>\n      imageIdSopInstanceUidPairsEntry.sopInstanceUID === sopInstanceUID\n  );\n\n  return imageIdSopInstanceUidPairsEntry ? imageIdSopInstanceUidPairsEntry.imageId : null;\n};\n\nfunction _getImageIdSopInstanceUidPairsForDisplaySet(referencedDisplaySet) {\n  return referencedDisplaySet.images.map(image => {\n    return {\n      imageId: image.imageId,\n      sopInstanceUID: image.SOPInstanceUID,\n    };\n  });\n}\n\nfunction _setROIContourMetadata(\n  structureSet,\n  StructureSetROISequence,\n  RTROIObservationsSequence,\n  ROIContour,\n  contourPoints,\n  isSupported\n) {\n  const StructureSetROI = StructureSetROISequence.find(\n    structureSetROI => structureSetROI.ROINumber === ROIContour.ReferencedROINumber\n  );\n\n  const ROIContourData = {\n    ROINumber: StructureSetROI.ROINumber,\n    ROIName: StructureSetROI.ROIName,\n    ROIGenerationAlgorithm: StructureSetROI.ROIGenerationAlgorithm,\n    ROIDescription: StructureSetROI.ROIDescription,\n    isSupported,\n    contourPoints,\n    visible: true,\n  };\n\n  _setROIContourDataColor(ROIContour, ROIContourData);\n\n  if (RTROIObservationsSequence) {\n    // If present, add additional RTROIObservations metadata.\n    _setROIContourRTROIObservations(\n      ROIContourData,\n      RTROIObservationsSequence,\n      ROIContour.ReferencedROINumber\n    );\n  }\n\n  structureSet.ROIContours.push(ROIContourData);\n}\n\nfunction _setROIContourDataColor(ROIContour, ROIContourData) {\n  let { ROIDisplayColor, RecommendedDisplayCIELabValue } = ROIContour;\n\n  if (!ROIDisplayColor && RecommendedDisplayCIELabValue) {\n    // If ROIDisplayColor is absent, try using the RecommendedDisplayCIELabValue color.\n    ROIDisplayColor = dicomlab2RGB(RecommendedDisplayCIELabValue);\n  }\n\n  if (ROIDisplayColor) {\n    ROIContourData.colorArray = [...ROIDisplayColor];\n  }\n}\n\nfunction _setROIContourRTROIObservations(ROIContourData, RTROIObservationsSequence, ROINumber) {\n  const RTROIObservations = RTROIObservationsSequence.find(\n    RTROIObservations => RTROIObservations.ReferencedROINumber === ROINumber\n  );\n\n  if (RTROIObservations) {\n    // Deep copy so we don't keep the reference to the dcmjs dataset entry.\n    const { ObservationNumber, ROIObservationDescription, RTROIInterpretedType, ROIInterpreter } =\n      RTROIObservations;\n\n    ROIContourData.RTROIObservations = {\n      ObservationNumber,\n      ROIObservationDescription,\n      RTROIInterpretedType,\n      ROIInterpreter,\n    };\n  }\n}\n\nfunction _toArray(objOrArray) {\n  return Array.isArray(objOrArray) ? objOrArray : [objOrArray];\n}\n","import { utils } from '@ohif/core';\n\nimport { SOPClassHandlerId } from './id';\nimport loadRTStruct from './loadRTStruct';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.481.3'];\n\nlet loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'RTSTRUCT',\n    loading: false,\n    isReconstructable: false, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    structureSet: null,\n    sopClassUids,\n    instance,\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  let referencedSeriesSequence = instance.ReferencedSeriesSequence;\n  if (instance.ReferencedFrameOfReferenceSequence && !instance.ReferencedSeriesSequence) {\n    instance.ReferencedSeriesSequence = _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\n      instance.ReferencedFrameOfReferenceSequence\n    );\n    referencedSeriesSequence = instance.ReferencedSeriesSequence;\n  }\n\n  if (!referencedSeriesSequence) {\n    throw new Error('ReferencedSeriesSequence is missing for the RTSTRUCT');\n  }\n\n  const referencedSeries = referencedSeriesSequence[0];\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { DisplaySetService } = servicesManager.services;\n    const referencedDisplaySets = DisplaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the RT');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = ({ headers }) => _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(rtDisplaySet, servicesManager, extensionManager, headers) {\n  const { SOPInstanceUID } = rtDisplaySet;\n  const { segmentationService } = servicesManager.services;\n  if (\n    (rtDisplaySet.loading || rtDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExistsInCache(rtDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  rtDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!rtDisplaySet.structureSet) {\n      const structureSet = await loadRTStruct(\n        extensionManager,\n        rtDisplaySet,\n        rtDisplaySet.getReferenceDisplaySet(),\n        headers\n      );\n\n      rtDisplaySet.structureSet = structureSet;\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForRTDisplaySet(rtDisplaySet, null, suppressEvents)\n      .then(() => {\n        rtDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        rtDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nfunction _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\n  ReferencedFrameOfReferenceSequence\n) {\n  const ReferencedSeriesSequence = [];\n\n  ReferencedFrameOfReferenceSequence.forEach(referencedFrameOfReference => {\n    const { RTReferencedStudySequence } = referencedFrameOfReference;\n\n    RTReferencedStudySequence.forEach(rtReferencedStudy => {\n      const { RTReferencedSeriesSequence } = rtReferencedStudy;\n\n      RTReferencedSeriesSequence.forEach(rtReferencedSeries => {\n        const ReferencedInstanceSequence = [];\n        const { ContourImageSequence, SeriesInstanceUID } = rtReferencedSeries;\n\n        ContourImageSequence.forEach(contourImage => {\n          ReferencedInstanceSequence.push({\n            ReferencedSOPInstanceUID: contourImage.ReferencedSOPInstanceUID,\n            ReferencedSOPClassUID: contourImage.ReferencedSOPClassUID,\n          });\n        });\n\n        const referencedSeries = {\n          SeriesInstanceUID,\n          ReferencedInstanceSequence,\n        };\n\n        ReferencedSeriesSequence.push(referencedSeries);\n      });\n    });\n  });\n\n  return ReferencedSeriesSequence;\n}\n\nfunction _segmentationExistsInCache(rtDisplaySet, segmentationService) {\n  // Todo: fix this\n  return false;\n  // This should be abstracted with the CornerstoneCacheService\n  const rtContourId = rtDisplaySet.displaySetInstanceUID;\n  const contour = segmentationService.getContour(rtContourId);\n\n  return contour !== undefined;\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  return [\n    {\n      name: 'dicom-rt',\n      sopClassUids,\n      getDisplaySetsFromSeries: instances => {\n        return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n      },\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import { id } from './id';\nimport React from 'react';\nimport { Types } from '@ohif/core';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneRTViewport');\n});\n\nconst OHIFCornerstoneRTViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getViewportModule({\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  }: Types.Extensions.ExtensionParams) {\n    const ExtendedOHIFCornerstoneRTViewport = props => {\n      return (\n        <OHIFCornerstoneRTViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-rt', component: ExtendedOHIFCornerstoneRTViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n};\n\nexport default extension;\n"],"names":["id","packageJson","SOPClassHandlerId","DicomMessage","DicomMetaDictionary","dcmjs","dicomlab2RGB","Colors","async","loadRTStruct","extensionManager","rtStructDisplaySet","referencedDisplaySet","headers","utilityModule","getModuleEntry","dataSource","getActiveDataSource","bulkDataURI","getConfig","dicomLoaderService","exports","images","map","image","imageId","sopInstanceUID","SOPInstanceUID","_getImageIdSopInstanceUidPairsForDisplaySet","isLoaded","instance","enabled","datasource","ROIContourSequence","Promise","reject","promisesMap","Map","ROIContour","referencedROINumber","ReferencedROINumber","ContourSequence","Contour","ContourData","contourData","Array","isArray","has","get","push","resolve","set","BulkDataURI","retrieve","bulkDataPromise","StudyInstanceUID","SeriesInstanceUID","resolvedPromisesMap","key","promiseArray","entries","allSettled","forEach","resolvedPromises","index","promise","status","value","every","Number","isFinite","uint8Array","Uint8Array","dataUint8Array","TextDecoder","decode","includes","split","parseFloat","console","error","reason","checkAndLoadContourData","segArrayBuffer","findDicomDataPromise","dicomData","readFile","rtStructDataset","naturalizeDataset","dict","_meta","namifyDataset","meta","StructureSetROISequence","RTROIObservationsSequence","structureSet","StructureSetLabel","ROIContours","visible","i","length","isSupported","ContourSequenceArray","objOrArray","contourPoints","c","ContourImageSequence","NumberOfContourPoints","ContourGeometricType","points","p","x","y","z","numberOfPoints","type","_setROIContourMetadata","StructureSetROI","find","structureSetROI","ROINumber","ROIContourData","ROIName","ROIGenerationAlgorithm","ROIDescription","ROIDisplayColor","RecommendedDisplayCIELabValue","colorArray","_setROIContourDataColor","RTROIObservations","ObservationNumber","ROIObservationDescription","RTROIInterpretedType","ROIInterpreter","_setROIContourRTROIObservations","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isHydrated","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","ReferencedFrameOfReferenceSequence","referencedFrameOfReference","RTReferencedStudySequence","rtReferencedStudy","RTReferencedSeriesSequence","rtReferencedSeries","ReferencedInstanceSequence","contourImage","ReferencedSOPInstanceUID","ReferencedSOPClassUID","referencedSeries","_deriveReferencedSeriesSequenceFromFrameOfReferenceSequence","Error","getReferenceDisplaySet","DisplaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","load","rtDisplaySet","segmentationService","suppressEvents","createSegmentationForRTDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","Component","React","OHIFCornerstoneRTViewport","props","fallback","getViewportModule","commandsManager","component","_extends","getSopClassHandlerModule"],"sourceRoot":""}