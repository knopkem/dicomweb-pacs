{"version":3,"file":"5830.bundle.bcb8ef64b7a02cbf9212.js","mappings":"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","sources":["webpack:///../../../node_modules/itk-wasm/dist/version.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/pixel-types.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/image-type.js","webpack:///../../../node_modules/itk-wasm/dist/set-matrix-element.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/image.js","webpack:///../../../node_modules/itk-wasm/dist/copy-image.js","webpack:///../../../node_modules/itk-wasm/dist/image-shared-buffer-or-copy.js","webpack:///../../../node_modules/itk-wasm/dist/stack-images.js","webpack:///../../../node_modules/itk-wasm/dist/get-file-extension.js","webpack:///../../../node_modules/itk-wasm/dist/get-matrix-element.js","webpack:///../../../node_modules/itk-wasm/dist/cast-image.js","webpack:///../../../node_modules/itk-wasm/dist/worker-pool/worker-pool.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/mesh-type.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/mesh.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/poly-data-type.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/poly-data.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/create-web-worker.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/create-worker-proxy.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/internal/load-emscripten-module-main-thread.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/pipelines-base-url.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/pipeline-worker-url.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/run-pipeline.js","webpack:///../../../node_modules/wasm-feature-detect/dist/esm/index.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/default-web-worker.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-dicom-tags.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-dicom-tags-array-buffer.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-dicom-file-series.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-dicom-array-buffer-series.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/mesh-to-poly-data.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/poly-data-to-mesh.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-array-buffer.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-blob.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-file.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-file-series.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-mesh-array-buffer.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-mesh-file.js"],"sourcesContent":["const version = \"1.0.0-b.165\";\nexport default version;\n//# sourceMappingURL=version.js.map","const PixelTypes = {\n    Unknown: 'Unknown',\n    Scalar: 'Scalar',\n    RGB: 'RGB',\n    RGBA: 'RGBA',\n    Offset: 'Offset',\n    Vector: 'Vector',\n    Point: 'Point',\n    CovariantVector: 'CovariantVector',\n    SymmetricSecondRankTensor: 'SymmetricSecondRankTensor',\n    DiffusionTensor3D: 'DiffusionTensor3D',\n    Complex: 'Complex',\n    FixedArray: 'FixedArray',\n    Array: 'Array',\n    Matrix: 'Matrix',\n    VariableLengthVector: 'VariableLengthVector',\n    VariableSizeMatrix: 'VariableSizeMatrix'\n};\nexport default PixelTypes;\n//# sourceMappingURL=pixel-types.js.map","import IntTypes from './int-types.js';\nimport PixelTypes from './pixel-types.js';\nclass ImageType {\n    dimension;\n    componentType;\n    pixelType;\n    components;\n    constructor(dimension = 2, componentType = IntTypes.UInt8, pixelType = PixelTypes.Scalar, components = 1) {\n        this.dimension = dimension;\n        this.componentType = componentType;\n        this.pixelType = pixelType;\n        this.components = components;\n    }\n}\nexport default ImageType;\n//# sourceMappingURL=image-type.js.map","function setMatrixElement(matrixData, columns, row, column, value) {\n    matrixData[column + row * columns] = value;\n}\nexport default setMatrixElement;\n//# sourceMappingURL=set-matrix-element.js.map","import ImageType from './image-type.js';\nimport setMatrixElement from '../set-matrix-element.js';\nclass Image {\n    imageType;\n    name = 'image';\n    origin;\n    spacing;\n    direction;\n    size;\n    metadata;\n    data;\n    constructor(imageType = new ImageType()) {\n        this.imageType = imageType;\n        const dimension = imageType.dimension;\n        this.origin = new Array(dimension);\n        this.origin.fill(0.0);\n        this.spacing = new Array(dimension);\n        this.spacing.fill(1.0);\n        this.direction = new Float64Array(dimension * dimension);\n        this.direction.fill(0.0);\n        for (let ii = 0; ii < dimension; ii++) {\n            setMatrixElement(this.direction, dimension, ii, ii, 1.0);\n        }\n        this.size = new Array(dimension);\n        this.size.fill(0);\n        this.metadata = new Map();\n        this.data = null;\n    }\n}\nexport default Image;\n//# sourceMappingURL=image.js.map","import Image from './interface-types/image.js';\nfunction copyImage(image) {\n    const copy = new Image(image.imageType);\n    copy.name = image.name;\n    copy.origin = Array.from(image.origin);\n    copy.spacing = Array.from(image.spacing);\n    copy.direction = image.direction.slice();\n    copy.size = Array.from(image.size);\n    if (image.data !== null) {\n        const CTor = image.data.constructor;\n        copy.data = new CTor(image.data.length);\n        if (copy.data != null) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'\n            copy.data.set(image.data, 0);\n        }\n    }\n    return copy;\n}\nexport default copyImage;\n//# sourceMappingURL=copy-image.js.map","import copyImage from './copy-image.js';\nconst haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === 'function';\n/** If SharedArrayBuffer's are available, ensure an itk.Image's buffer is a\n * SharedArrayBuffer. If SharedArrayBuffer's are not available, return a copy.\n * */\nfunction imageSharedBufferOrCopy(image) {\n    if (image.data === null) {\n        return image;\n    }\n    if (haveSharedArrayBuffer) {\n        if (image.data.buffer instanceof SharedArrayBuffer) { // eslint-disable-line\n            return image;\n        }\n        const sharedBuffer = new SharedArrayBuffer(image.data.buffer.byteLength); // eslint-disable-line\n        const CTor = image.data.constructor;\n        const sharedTypedArray = new CTor(sharedBuffer);\n        if (sharedTypedArray !== null) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'.\n            sharedTypedArray.set(image.data, 0);\n        }\n        image.data = sharedTypedArray;\n        return image;\n    }\n    else {\n        return copyImage(image);\n    }\n}\nexport default imageSharedBufferOrCopy;\n//# sourceMappingURL=image-shared-buffer-or-copy.js.map","import Image from './interface-types/image.js';\n/** Join an array of sequential image slabs into a single image */\nfunction stackImages(images) {\n    if (images.length < 1) {\n        throw Error('At least one images is required.');\n    }\n    const firstImage = images[0];\n    if (firstImage.data === null) {\n        throw Error('Image data is null.');\n    }\n    const result = new Image(firstImage.imageType);\n    result.origin = Array.from(firstImage.origin);\n    result.spacing = Array.from(firstImage.spacing);\n    const dimension = result.imageType.dimension;\n    result.direction = firstImage.direction.slice();\n    const stackOn = dimension - 1;\n    result.size = Array.from(firstImage.size);\n    const stackedSize = images.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue.size[stackOn];\n    }, 0);\n    result.size[stackOn] = stackedSize;\n    const dataSize = result.size.reduce((accumulator, currentValue) => { return accumulator * currentValue; }, 1) * result.imageType.components;\n    const CTor = firstImage.data.constructor;\n    result.data = new CTor(dataSize);\n    let offsetBase = result.imageType.components;\n    for (let subIndex = 0; subIndex < result.size.length - 1; subIndex++) {\n        offsetBase *= result.size[subIndex];\n    }\n    let stackIndex = 0;\n    if (result.data != null) {\n        for (let index = 0; index < images.length; index++) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'.\n            result.data.set(images[index].data, offsetBase * stackIndex);\n            stackIndex += images[index].size[stackOn];\n        }\n    }\n    else {\n        throw Error('Could not create result image data.');\n    }\n    return result;\n}\nexport default stackImages;\n//# sourceMappingURL=stack-images.js.map","function getFileExtension(filePath) {\n    let extension = filePath.slice((filePath.lastIndexOf('.') - 1 >>> 0) + 2);\n    if (extension.toLowerCase() === 'gz') {\n        const index = filePath.slice(0, -3).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'cbor') {\n        const index = filePath.slice(0, -5).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'zst') {\n        // .iwi.cbor.zstd\n        const index = filePath.slice(0, -10).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'zip') {\n        const index = filePath.slice(0, -4).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    return extension;\n}\nexport default getFileExtension;\n//# sourceMappingURL=get-file-extension.js.map","function getMatrixElement(matrixData, columns, row, column) {\n    return matrixData[column + row * columns];\n}\nexport default getMatrixElement;\n//# sourceMappingURL=get-matrix-element.js.map","import Image from './interface-types/image.js';\nimport PixelTypes from './interface-types/pixel-types.js';\nimport IntTypes from './interface-types/int-types.js';\nimport FloatTypes from './interface-types/float-types.js';\n/**\n * Cast an image to another PixelType and/or ComponentType\n *\n * @param {Image} image - The input image\n * @param {CastImageOptions} options - specify the componentType and/or pixelType of the output\n */\nfunction castImage(inputImage, options) {\n    const outputImageType = { ...inputImage.imageType };\n    if (typeof options !== 'undefined' && typeof options.pixelType !== 'undefined') {\n        outputImageType.pixelType = options.pixelType;\n        if (options.pixelType === PixelTypes.Scalar && outputImageType.components !== 1) {\n            throw new Error('Cannot cast multi-component image to a scalar image');\n        }\n    }\n    if (typeof options !== 'undefined' && typeof options.componentType !== 'undefined' && options.componentType !== inputImage.imageType.componentType) {\n        outputImageType.componentType = options.componentType;\n    }\n    const outputImage = new Image(outputImageType);\n    outputImage.name = inputImage.name;\n    outputImage.origin = Array.from(inputImage.origin);\n    outputImage.spacing = Array.from(inputImage.spacing);\n    outputImage.direction = inputImage.direction.slice();\n    outputImage.size = Array.from(inputImage.size);\n    // Deep copy the map\n    outputImage.metadata = new Map(JSON.parse(JSON.stringify(Array.from(inputImage.metadata))));\n    if (inputImage.data !== null) {\n        if (typeof options !== 'undefined' && typeof options.componentType !== 'undefined' && options.componentType !== inputImage.imageType.componentType) {\n            switch (inputImage.imageType.componentType) {\n                case IntTypes.UInt8:\n                case IntTypes.Int8:\n                case IntTypes.UInt16:\n                case IntTypes.Int16:\n                case IntTypes.UInt32:\n                case IntTypes.Int32:\n                case FloatTypes.Float32:\n                case FloatTypes.Float64:\n                    switch (outputImage.imageType.componentType) {\n                        case IntTypes.UInt8:\n                            outputImage.data = new Uint8Array(inputImage.data);\n                            break;\n                        case IntTypes.Int8:\n                            outputImage.data = new Int8Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt16:\n                            outputImage.data = new Uint16Array(inputImage.data);\n                            break;\n                        case IntTypes.Int16:\n                            outputImage.data = new Int16Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt32:\n                            outputImage.data = new Uint32Array(inputImage.data);\n                            break;\n                        case IntTypes.Int32:\n                            outputImage.data = new Int32Array(inputImage.data);\n                            break;\n                        case FloatTypes.Float32:\n                            outputImage.data = new Float32Array(inputImage.data);\n                            break;\n                        case FloatTypes.Float64:\n                            outputImage.data = new Float64Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt64:\n                            outputImage.data = new BigUint64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = BigInt.asIntN(64, BigInt(inputImage.data[idx]));\n                            }\n                            break;\n                        case IntTypes.Int64:\n                            outputImage.data = new BigInt64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = BigInt.asUintN(64, BigInt(inputImage.data[idx]));\n                            }\n                            break;\n                    }\n                    break;\n                case IntTypes.UInt64:\n                case IntTypes.Int64:\n                    switch (outputImage.imageType.componentType) {\n                        case IntTypes.UInt8:\n                            outputImage.data = new Uint8Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int8:\n                            outputImage.data = new Int8Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt16:\n                            outputImage.data = new Uint16Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int16:\n                            outputImage.data = new Int16Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt32:\n                            outputImage.data = new Uint32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int32:\n                            outputImage.data = new Int32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case FloatTypes.Float32:\n                            outputImage.data = new Float32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case FloatTypes.Float64:\n                            outputImage.data = new Float64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt64:\n                            outputImage.data = new BigUint64Array(inputImage.data);\n                            break;\n                        case IntTypes.Int64:\n                            outputImage.data = new BigInt64Array(inputImage.data);\n                            break;\n                    }\n                    break;\n            }\n        }\n        else {\n            // copy\n            const CTor = inputImage.data.constructor;\n            outputImage.data = new CTor(inputImage.data.length);\n            if (outputImage.data != null) {\n                // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'\n                outputImage.data.set(inputImage.data, 0);\n            }\n        }\n    }\n    return outputImage;\n}\nexport default castImage;\n//# sourceMappingURL=cast-image.js.map","/* eslint-disable  @typescript-eslint/no-non-null-assertion */\nclass WorkerPool {\n    fcn;\n    workerQueue;\n    runInfo;\n    /*\n     * poolSize is the maximum number of web workers to create in the pool.\n     *\n     * The function, `fcn,` must accept in its last argument an options object with a\n     * `webWorker` property that is a web worker to use for computation. The\n     * function must also return a promise that resolves to an object with the\n     * with the results of the computation and the used worker in the `webWorker`\n     * property.\n     *\n     **/\n    constructor(poolSize, fcn) {\n        this.fcn = fcn;\n        this.workerQueue = new Array(poolSize);\n        this.workerQueue.fill(null);\n        this.runInfo = [];\n    }\n    /*\n     * Run the tasks specified by the arguments in the taskArgsArray that will\n     * be passed to the pool fcn.\n     *\n     * An optional progressCallback will be called with the number of complete\n     * tasks and the total number of tasks as arguments every time a task has\n     * completed.\n     *\n     * Returns an object containing a promise ('promise') to communicate results\n     * as well as an id ('runId') which can be used to cancel any remaining pending\n     * tasks before they complete.\n     */\n    runTasks(taskArgsArray, progressCallback = null) {\n        const info = {\n            taskQueue: [],\n            results: [],\n            addingTasks: false,\n            postponed: false,\n            runningWorkers: 0,\n            index: 0,\n            completedTasks: 0,\n            progressCallback,\n            canceled: false\n        };\n        this.runInfo.push(info);\n        info.index = this.runInfo.length - 1;\n        return {\n            promise: new Promise((resolve, reject) => {\n                info.resolve = resolve;\n                info.reject = reject;\n                info.results = new Array(taskArgsArray.length);\n                info.completedTasks = 0;\n                info.addingTasks = true;\n                taskArgsArray.forEach((taskArg, index) => {\n                    this.addTask(info.index, index, taskArg);\n                });\n                info.addingTasks = false;\n            }),\n            runId: info.index\n        };\n    }\n    terminateWorkers() {\n        for (let index = 0; index < this.workerQueue.length; index++) {\n            const worker = this.workerQueue[index];\n            if (worker != null) {\n                worker.terminate();\n            }\n            this.workerQueue[index] = null;\n        }\n    }\n    cancel(runId) {\n        const info = this.runInfo[runId];\n        if (info !== null && info !== undefined) {\n            info.canceled = true;\n        }\n    }\n    addTask(infoIndex, resultIndex, taskArgs) {\n        const info = this.runInfo[infoIndex];\n        if (info?.canceled === true) {\n            info.reject('Remaining tasks canceled');\n            this.clearTask(info.index);\n            return;\n        }\n        if (this.workerQueue.length > 0) {\n            const worker = this.workerQueue.pop();\n            info.runningWorkers++;\n            taskArgs[taskArgs.length - 1].webWorker = worker;\n            // @ts-expect-error: TS7031: Binding element 'webWorker' implicitly has an 'any' type.\n            this.fcn(...taskArgs).then(({ webWorker, ...result }) => {\n                this.workerQueue.push(webWorker);\n                // Check if this task was canceled while it was getting done\n                if (this.runInfo[infoIndex] !== null) {\n                    info.runningWorkers--;\n                    info.results[resultIndex] = result;\n                    info.completedTasks++;\n                    if (info.progressCallback != null) {\n                        info.progressCallback(info.completedTasks, info.results.length);\n                    }\n                    if (info.taskQueue.length > 0) {\n                        const reTask = info.taskQueue.shift();\n                        this.addTask(infoIndex, reTask[0], reTask[1]);\n                    }\n                    else if (!info.addingTasks && info.runningWorkers === 0) {\n                        const results = info.results;\n                        info.resolve(results);\n                        this.clearTask(info.index);\n                    }\n                }\n                // @ts-expect-error: TS7006: Parameter 'error' implicitly has an 'any' type.\n            }).catch((error) => {\n                info.reject(error);\n                this.clearTask(info.index);\n            });\n        }\n        else {\n            if (info.runningWorkers !== 0 || info.postponed) {\n                // At least one worker is working on these tasks, and it will pick up\n                // the next item in the taskQueue when done.\n                info.taskQueue.push([resultIndex, taskArgs]);\n            }\n            else {\n                // Try again later.\n                info.postponed = true;\n                setTimeout(() => {\n                    info.postponed = false;\n                    this.addTask(info.index, resultIndex, taskArgs);\n                }, 50);\n            }\n        }\n    }\n    clearTask(clearIndex) {\n        this.runInfo[clearIndex].results = [];\n        this.runInfo[clearIndex].taskQueue = [];\n        this.runInfo[clearIndex].progressCallback = null;\n        this.runInfo[clearIndex].canceled = null;\n        this.runInfo[clearIndex].reject = () => { };\n        this.runInfo[clearIndex].resolve = () => { };\n    }\n}\nexport default WorkerPool;\n//# sourceMappingURL=worker-pool.js.map","import IntTypes from './int-types.js';\nimport FloatTypes from './float-types.js';\nimport PixelTypes from './pixel-types.js';\nclass MeshType {\n    dimension;\n    pointComponentType;\n    pointPixelComponentType;\n    pointPixelType;\n    pointPixelComponents;\n    cellComponentType;\n    cellPixelComponentType;\n    cellPixelType;\n    cellPixelComponents;\n    constructor(dimension = 2, pointComponentType = FloatTypes.Float32, pointPixelComponentType = FloatTypes.Float32, pointPixelType = PixelTypes.Scalar, pointPixelComponents = 1, cellComponentType = IntTypes.Int32, cellPixelComponentType = FloatTypes.Float32, cellPixelType = PixelTypes.Scalar, cellPixelComponents = 1) {\n        this.dimension = dimension;\n        this.pointComponentType = pointComponentType;\n        this.pointPixelComponentType = pointPixelComponentType;\n        this.pointPixelType = pointPixelType;\n        this.pointPixelComponents = pointPixelComponents;\n        this.cellComponentType = cellComponentType;\n        this.cellPixelComponentType = cellPixelComponentType;\n        this.cellPixelType = cellPixelType;\n        this.cellPixelComponents = cellPixelComponents;\n    }\n}\nexport default MeshType;\n//# sourceMappingURL=mesh-type.js.map","import MeshType from './mesh-type.js';\nclass Mesh {\n    mt;\n    meshType;\n    name = 'mesh';\n    numberOfPoints;\n    points;\n    numberOfPointPixels;\n    pointData;\n    numberOfCells;\n    cells;\n    cellBufferSize;\n    numberOfCellPixels;\n    cellData;\n    constructor(mt = new MeshType()) {\n        this.mt = mt;\n        this.meshType = mt;\n        this.name = 'mesh';\n        this.numberOfPoints = 0;\n        this.points = null;\n        this.numberOfPointPixels = 0;\n        this.pointData = null;\n        this.numberOfCells = 0;\n        this.cellBufferSize = 0;\n        this.cells = null;\n        this.numberOfCellPixels = 0;\n        this.cellData = null;\n    }\n}\nexport default Mesh;\n//# sourceMappingURL=mesh.js.map","import FloatTypes from './float-types.js';\nimport PixelTypes from './pixel-types.js';\nclass PolyDataType {\n    pointPixelComponentType;\n    pointPixelType;\n    pointPixelComponents;\n    cellPixelComponentType;\n    cellPixelType;\n    cellPixelComponents;\n    constructor(pointPixelComponentType = FloatTypes.Float32, pointPixelType = PixelTypes.Scalar, pointPixelComponents = 1, cellPixelComponentType = FloatTypes.Float32, cellPixelType = PixelTypes.Scalar, cellPixelComponents = 1) {\n        this.pointPixelComponentType = pointPixelComponentType;\n        this.pointPixelType = pointPixelType;\n        this.pointPixelComponents = pointPixelComponents;\n        this.cellPixelComponentType = cellPixelComponentType;\n        this.cellPixelType = cellPixelType;\n        this.cellPixelComponents = cellPixelComponents;\n    }\n}\nexport default PolyDataType;\n//# sourceMappingURL=poly-data-type.js.map","import PolyDataType from './poly-data-type.js';\nclass PolyData {\n    polyDataType;\n    name = 'PolyData';\n    numberOfPoints;\n    points;\n    verticesBufferSize;\n    vertices;\n    linesBufferSize;\n    lines;\n    polygonsBufferSize;\n    polygons;\n    triangleStripsBufferSize;\n    triangleStrips;\n    numberOfPointPixels;\n    pointData;\n    numberOfCellPixels;\n    cellData;\n    constructor(polyDataType = new PolyDataType()) {\n        this.polyDataType = polyDataType;\n        this.polyDataType = polyDataType;\n        this.name = 'PolyData';\n        this.numberOfPoints = 0;\n        this.points = new Float32Array();\n        this.verticesBufferSize = 0;\n        this.vertices = null;\n        this.linesBufferSize = 0;\n        this.lines = null;\n        this.polygonsBufferSize = 0;\n        this.polygons = null;\n        this.triangleStripsBufferSize = 0;\n        this.triangleStrips = null;\n        this.numberOfPointPixels = 0;\n        this.pointData = null;\n        this.numberOfCellPixels = 0;\n        this.cellData = null;\n    }\n}\nexport default PolyData;\n//# sourceMappingURL=poly-data.js.map","import axios from 'axios';\nasync function createWebWorker(pipelineWorkerUrl) {\n    const workerUrl = pipelineWorkerUrl;\n    let worker = null;\n    if (workerUrl === null) {\n        // Use the version built with the bundler\n        //\n        // Bundlers, e.g. WebPack, Vite, Rollup, see these paths at build time\n        worker = new Worker(new URL('./web-workers/itk-wasm-pipeline.worker.js', import.meta.url), { type: 'module' });\n    }\n    else {\n        if (workerUrl.startsWith('http')) {\n            const response = await axios.get(workerUrl, { responseType: 'blob' });\n            const workerObjectUrl = URL.createObjectURL(response.data);\n            worker = new Worker(workerObjectUrl, { type: 'module' });\n        }\n        else {\n            worker = new Worker(workerUrl, { type: 'module' });\n        }\n    }\n    return worker;\n}\nexport default createWebWorker;\n//# sourceMappingURL=create-web-worker.js.map","import * as Comlink from 'comlink';\nimport createWebWorker from './create-web-worker.js';\nfunction workerToWorkerProxy(worker) {\n    const workerProxy = Comlink.wrap(worker);\n    const itkWebWorker = worker;\n    itkWebWorker.terminated = false;\n    itkWebWorker.workerProxy = workerProxy;\n    itkWebWorker.originalTerminate = itkWebWorker.terminate;\n    itkWebWorker.terminate = () => {\n        itkWebWorker.terminated = true;\n        itkWebWorker.workerProxy[Comlink.releaseProxy]();\n        itkWebWorker.originalTerminate();\n    };\n    return { workerProxy, worker: itkWebWorker };\n}\n// Internal function to create a web worker proxy\nasync function createWorkerProxy(existingWorker, pipelineWorkerUrl) {\n    let workerProxy;\n    if (existingWorker != null) {\n        // See if we have a worker promise attached the worker, if so reuse it. This ensures\n        // that we can safely reuse the worker without issues.\n        const itkWebWorker = existingWorker;\n        if (itkWebWorker.workerProxy !== undefined) {\n            workerProxy = itkWebWorker.workerProxy;\n            return { workerProxy, worker: itkWebWorker };\n        }\n        else {\n            return workerToWorkerProxy(existingWorker);\n        }\n    }\n    const worker = await createWebWorker(pipelineWorkerUrl);\n    return workerToWorkerProxy(worker);\n}\nexport default createWorkerProxy;\n//# sourceMappingURL=create-worker-proxy.js.map","import axios from 'axios';\nasync function loadEmscriptenModuleMainThread(moduleRelativePathOrURL, baseUrl) {\n    let modulePrefix = 'unknown';\n    if (typeof moduleRelativePathOrURL !== 'string') {\n        modulePrefix = moduleRelativePathOrURL.href;\n    }\n    else if (moduleRelativePathOrURL.startsWith('http')) {\n        modulePrefix = moduleRelativePathOrURL;\n    }\n    else {\n        modulePrefix = typeof baseUrl !== 'undefined' ? `${baseUrl}/${moduleRelativePathOrURL}` : moduleRelativePathOrURL;\n    }\n    if (modulePrefix.endsWith('.js')) {\n        modulePrefix = modulePrefix.substring(0, modulePrefix.length - 3);\n    }\n    if (modulePrefix.endsWith('.wasm')) {\n        modulePrefix = modulePrefix.substring(0, modulePrefix.length - 5);\n    }\n    const wasmBinaryPath = `${modulePrefix}.wasm`;\n    const response = await axios.get(wasmBinaryPath, { responseType: 'arraybuffer' });\n    const wasmBinary = response.data;\n    const fullModulePath = `${modulePrefix}.js`;\n    const result = await import(/* webpackIgnore: true */ /* @vite-ignore */ fullModulePath);\n    const instantiated = result.default({ wasmBinary });\n    return instantiated;\n}\nexport default loadEmscriptenModuleMainThread;\n//# sourceMappingURL=load-emscripten-module-main-thread.js.map","let pipelinesBaseUrl;\nexport function setPipelinesBaseUrl(baseUrl) {\n    pipelinesBaseUrl = baseUrl;\n}\nexport function getPipelinesBaseUrl() {\n    return pipelinesBaseUrl;\n}\n//# sourceMappingURL=pipelines-base-url.js.map","let pipelineWorkerUrl;\nexport function setPipelineWorkerUrl(workerUrl) {\n    pipelineWorkerUrl = workerUrl;\n}\nexport function getPipelineWorkerUrl() {\n    return pipelineWorkerUrl;\n}\n//# sourceMappingURL=pipeline-worker-url.js.map","import * as Comlink from 'comlink';\nimport createWorkerProxy from './create-worker-proxy.js';\nimport loadEmscriptenModuleMainThread from './internal/load-emscripten-module-main-thread.js';\nimport { simd } from 'wasm-feature-detect';\nimport InterfaceTypes from '../interface-types/interface-types.js';\nimport runPipelineEmscripten from './internal/run-pipeline-emscripten.js';\nimport getTransferables from '../get-transferables.js';\nimport imageTransferables from './internal/image-transferables.js';\nimport meshTransferables from './internal/mesh-transferables.js';\nimport polyDataTransferables from './internal/poly-data-transferables.js';\nimport { getPipelinesBaseUrl } from './pipelines-base-url.js';\nimport { getPipelineWorkerUrl } from './pipeline-worker-url.js';\n// To cache loaded pipeline modules\nconst pipelineToModule = new Map();\nfunction defaultPipelineWorkerUrl() {\n    let result = getPipelineWorkerUrl();\n    if (typeof result === 'undefined') {\n        result = null;\n    }\n    return result;\n}\nfunction defaultPipelinesBaseUrl() {\n    let result = getPipelinesBaseUrl();\n    if (typeof result === 'undefined') {\n        result = new URL('/pipelines', document.location.origin).href;\n    }\n    return result;\n}\nasync function loadPipelineModule(pipelinePath, pipelineBaseUrl) {\n    let moduleRelativePathOrURL = pipelinePath;\n    let pipeline = pipelinePath;\n    if (typeof pipelinePath !== 'string') {\n        moduleRelativePathOrURL = new URL(pipelinePath.href);\n        pipeline = moduleRelativePathOrURL.href;\n    }\n    if (pipelineToModule.has(pipeline)) {\n        return pipelineToModule.get(pipeline);\n    }\n    else {\n        const pipelineModule = (await loadEmscriptenModuleMainThread(pipelinePath, pipelineBaseUrl?.toString() ?? defaultPipelinesBaseUrl()));\n        pipelineToModule.set(pipeline, pipelineModule);\n        return pipelineModule;\n    }\n}\nasync function runPipeline(pipelinePath, args, outputs, inputs, options) {\n    if (!await simd()) {\n        const simdErrorMessage = 'WebAssembly SIMD support is required -- please update your browser.';\n        alert(simdErrorMessage);\n        throw new Error(simdErrorMessage);\n    }\n    const webWorker = options?.webWorker ?? null;\n    if (webWorker === false) {\n        const pipelineModule = await loadPipelineModule(pipelinePath.toString(), options?.pipelineBaseUrl);\n        const result = runPipelineEmscripten(pipelineModule, args, outputs, inputs);\n        return result;\n    }\n    let worker = webWorker;\n    const pipelineWorkerUrl = options?.pipelineWorkerUrl ?? defaultPipelineWorkerUrl();\n    const pipelineWorkerUrlString = typeof pipelineWorkerUrl !== 'string' && typeof pipelineWorkerUrl?.href !== 'undefined' ? pipelineWorkerUrl.href : pipelineWorkerUrl;\n    const { workerProxy, worker: usedWorker } = await createWorkerProxy(worker, pipelineWorkerUrlString);\n    worker = usedWorker;\n    const transferables = [];\n    if (!(inputs == null) && inputs.length > 0) {\n        inputs.forEach(function (input) {\n            if (input.type === InterfaceTypes.BinaryStream) {\n                // Binary data\n                const dataArray = input.data.data;\n                transferables.push(dataArray);\n            }\n            else if (input.type === InterfaceTypes.BinaryFile) {\n                // Binary data\n                const dataArray = input.data.data;\n                transferables.push(dataArray);\n            }\n            else if (input.type === InterfaceTypes.Image) {\n                // Image data\n                const image = input.data;\n                if (image.data !== null) {\n                    transferables.push(...imageTransferables(image));\n                }\n            }\n            else if (input.type === InterfaceTypes.Mesh) {\n                // Mesh data\n                const mesh = input.data;\n                transferables.push(...meshTransferables(mesh));\n            }\n            else if (input.type === InterfaceTypes.PolyData) {\n                // PolyData data\n                const polyData = input.data;\n                transferables.push(...polyDataTransferables(polyData));\n            }\n        });\n    }\n    const pipelineBaseUrl = options?.pipelineBaseUrl ?? defaultPipelinesBaseUrl();\n    const pipelineBaseUrlString = typeof pipelineBaseUrl !== 'string' && typeof pipelineBaseUrl?.href !== 'undefined' ? pipelineBaseUrl.href : pipelineBaseUrl;\n    const transferedInputs = (inputs != null) ? Comlink.transfer(inputs, getTransferables(transferables, options?.noCopy)) : null;\n    const result = await workerProxy.runPipeline(pipelinePath.toString(), pipelineBaseUrlString, args, outputs, transferedInputs);\n    return {\n        returnValue: result.returnValue,\n        stdout: result.stdout,\n        stderr: result.stderr,\n        outputs: result.outputs,\n        webWorker: worker\n    };\n}\nexport default runPipeline;\n//# sourceMappingURL=run-pipeline.js.map","export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),exceptionsFinal=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob(\"AGFzbQEAAAABBAFgAAADAgEAChABDgACaR9AAQMAAAsACxoL\"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})(),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jsStringBuiltins=()=>(async()=>{try{return await WebAssembly.instantiate(Uint8Array.from(atob(\"AGFzbQEAAAABBgFgAW8BfwIXAQ53YXNtOmpzLXN0cmluZwR0ZXN0AAA=\"),(e=>e.codePointAt(0))),{},{builtins:[\"js-string\"]}),!0}catch(e){return!1}})(),jspi=()=>(async()=>\"Suspending\"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>\"Function\"in WebAssembly)(),typedFunctionReferences=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob(\"AGFzbQEAAAABEANgAX8Bf2ABZAABf2AAAX8DBAMBAAIJBQEDAAEBChwDCwBBCkEqIAAUAGoLBwAgAEEBagsGANIBEAAL\"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})();\n","let defaultWebWorker = null;\n/**\n * Set the default web worker for functions in a bundle defined with itk-wasm bindgen.\n *\n * Must be created with `createWebWorker`.\n **/\nexport function setDefaultWebWorker(webWorker) {\n    defaultWebWorker = webWorker;\n}\n/**\n * Get the default web worker for functions in a bundle defined with itk-wasm bindgen.\n *\n * A value of `null` indicates that the default web worker has not been set and the default web worker for the\n * bindgen package will be used.\n **/\nexport function getDefaultWebWorker() {\n    return defaultWebWorker;\n}\n//# sourceMappingURL=default-web-worker.js.map","// @ts-nocheck\n/**\n * @deprecated Use readDicomTags from @itk-wasm/dicom instead\n */\nasync function readDICOMTags(webWorker, file, tags = null) {\n    throw new Error('readDICOMTags is deprecated. Use readDicomTags from @itk-wasm/dicom instead.');\n}\nexport default readDICOMTags;\n//# sourceMappingURL=read-dicom-tags.js.map","// @ts-nocheck\n/**\n *\n * @deprecated Use readDicomTags from @itk-wasm/dicom instead\n */\nasync function readDICOMTagsArrayBuffer(webWorker, arrayBuffer, tags = null) {\n    throw new Error('readDICOMTagsArrayBuffer is deprecated. Use readDicomTags from @itk-wasm/dicom instead.');\n}\nexport default readDICOMTagsArrayBuffer;\n//# sourceMappingURL=read-dicom-tags-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageDicomFileSeries from @itk-wasm/dicom instead\n */\nconst readImageDICOMFileSeries = async (fileList, options) => {\n    throw new Error('readImageDICOMFileSeries is deprecated. Use readImageDicomFileSeries from @itk-wasm/dicom instead.');\n};\nexport default readImageDICOMFileSeries;\n//# sourceMappingURL=read-image-dicom-file-series.js.map","// @ts-nocheck\n/**\n *\n * @deprecated Use readImageDicomFileSeries from @itk-wasm/dicom instead\n */\nconst readImageDICOMArrayBufferSeries = async (arrayBuffers, options, fileNamesBackwardsCompatibility) => {\n    throw new Error('readImageDICOMArrayBufferSeries is deprecated. Use readImageDicomFileSeries from @itk-wasm/dicom instead.');\n};\nexport default readImageDICOMArrayBufferSeries;\n//# sourceMappingURL=read-image-dicom-array-buffer-series.js.map","// @ts-nocheck\n/**\n * @deprecated Use meshToPolyData from @itk-wasm/mesh-to-poly-data instead\n */\nasync function meshToPolyData(webWorker, mesh) {\n    throw new Error('This function has been migrated to the @itk-wasm/mesh-to-poly-data package.');\n}\nexport default meshToPolyData;\n//# sourceMappingURL=mesh-to-poly-data.js.map","// @ts-nocheck\n/**\n * @deprecated Use polyDataToMesh from @itk-wasm/mesh-to-poly-data instead\n */\nasync function polyDataToMesh(webWorker, polyData) {\n    throw new Error('This function has been migrated to the @itk-wasm/mesh-to-poly-data package.');\n}\nexport default polyDataToMesh;\n//# sourceMappingURL=poly-data-to-mesh.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageArrayBuffer from @itk-wasm/image-io instead\n */\nasync function readImageArrayBuffer(webWorker, arrayBuffer, fileName, options) {\n    throw new Error('readImageArrayBuffer is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageArrayBuffer;\n//# sourceMappingURL=read-image-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageBlob from @itk-wasm/image-io instead\n */\nasync function readImageBlob(webWorker, blob, fileName, options) {\n    throw new Error('readImageBlob is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageBlob;\n//# sourceMappingURL=read-image-blob.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageFile from @itk-wasm/image-io instead\n */\nasync function readImageFile(webWorker, file, options) {\n    throw new Error('readImageFile is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageFile;\n//# sourceMappingURL=read-image-file.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageFileSeries from @itk-wasm/image-io instead\n */\nasync function readImageFileSeries(fileList, options, zOriginBackwardsCompatibility, sortedSeriesBackwardsCompatibility) {\n    throw new Error('readImageFileSeries is deprecated. Use readImageFileSeries from @itk-wasm/image-io instead.');\n}\nexport default readImageFileSeries;\n//# sourceMappingURL=read-image-file-series.js.map","// @ts-nocheck\n/**\n * @deprecated Use readMeshArrayBuffer from @itk-wasm/image-io instead\n */\nasync function readMeshArrayBuffer(webWorker, arrayBuffer, fileName, mimeType) {\n    throw new Error('readMeshArrayBuffer is deprecated. Use readMeshFile from @itk-wasm/mesh-io instead.');\n}\nexport default readMeshArrayBuffer;\n//# sourceMappingURL=read-mesh-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readMeshFile from @itk-wasm/mesh-io instead\n */\nasync function readMeshFile(webWorker, file) {\n    throw new Error('readMeshFile is deprecated. Use readMeshFile from @itk-wasm/mesh-io instead.');\n}\nexport default readMeshFile;\n//# sourceMappingURL=read-mesh-file.js.map"],"names":["Unknown","Scalar","RGB","RGBA","Offset","Vector","Point","CovariantVector","SymmetricSecondRankTensor","DiffusionTensor3D","Complex","FixedArray","Array","Matrix","VariableLengthVector","VariableSizeMatrix","dimension","componentType","pixelType","components","constructor","UInt8","this","matrixData","columns","row","column","value","imageType","name","origin","spacing","direction","size","metadata","data","fill","Float64Array","ii","Map","image","copy","from","slice","CTor","length","set","haveSharedArrayBuffer","globalThis","SharedArrayBuffer","buffer","sharedBuffer","byteLength","sharedTypedArray","images","Error","firstImage","result","stackOn","stackedSize","reduce","accumulator","currentValue","dataSize","offsetBase","subIndex","stackIndex","index","filePath","extension","lastIndexOf","toLowerCase","inputImage","options","outputImageType","outputImage","JSON","parse","stringify","Int8","UInt16","Int16","UInt32","Int32","Float32","Float64","Uint8Array","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","UInt64","BigUint64Array","idx","BigInt","asIntN","Int64","BigInt64Array","asUintN","Number","fcn","workerQueue","runInfo","poolSize","runTasks","taskArgsArray","progressCallback","info","taskQueue","results","addingTasks","postponed","runningWorkers","completedTasks","canceled","push","promise","Promise","resolve","reject","forEach","taskArg","addTask","runId","terminateWorkers","worker","terminate","cancel","infoIndex","resultIndex","taskArgs","clearTask","pop","webWorker","then","reTask","shift","catch","error","setTimeout","clearIndex","pointComponentType","pointPixelComponentType","pointPixelType","pointPixelComponents","cellComponentType","cellPixelComponentType","cellPixelType","cellPixelComponents","mt","meshType","numberOfPoints","points","numberOfPointPixels","pointData","numberOfCells","cells","cellBufferSize","numberOfCellPixels","cellData","polyDataType","verticesBufferSize","vertices","linesBufferSize","lines","polygonsBufferSize","polygons","triangleStripsBufferSize","triangleStrips","async","pipelineWorkerUrl","workerUrl","Worker","URL","type","startsWith","response","axios","get","responseType","workerObjectUrl","createObjectURL","workerToWorkerProxy","workerProxy","itkWebWorker","terminated","originalTerminate","existingWorker","undefined","moduleRelativePathOrURL","baseUrl","modulePrefix","href","endsWith","substring","wasmBinaryPath","wasmBinary","fullModulePath","import","default","pipelinesBaseUrl","setPipelinesBaseUrl","getPipelinesBaseUrl","setPipelineWorkerUrl","getPipelineWorkerUrl","pipelineToModule","defaultPipelinesBaseUrl","document","location","pipelinePath","args","outputs","inputs","WebAssembly","validate","simd","simdErrorMessage","alert","pipelineModule","pipelineBaseUrl","pipeline","has","toString","loadPipelineModule","defaultPipelineWorkerUrl","pipelineWorkerUrlString","usedWorker","transferables","input","BinaryStream","dataArray","BinaryFile","Image","Mesh","mesh","PolyData","polyData","pipelineBaseUrlString","transferedInputs","noCopy","runPipeline","returnValue","stdout","stderr","defaultWebWorker","setDefaultWebWorker","getDefaultWebWorker","file","tags","arrayBuffer","fileList","arrayBuffers","fileNamesBackwardsCompatibility","fileName","blob","zOriginBackwardsCompatibility","sortedSeriesBackwardsCompatibility","mimeType"],"sourceRoot":""}