{"version":3,"file":"722.bundle.59b5192800f884eab933.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/getVolumeInfo.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/splitImageIdsBy4DTags.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/getDynamicVolumeInfo.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/autoLoad.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/scaleArray.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/BaseStreamingImageVolume.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/StreamingImageVolume.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/cornerstoneStreamingImageVolumeLoader.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/enums/Events.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/StreamingDynamicImageVolume.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/cornerstoneStreamingDynamicImageVolumeLoader.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/index.ts"],"sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { cache, utilities, Enums } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nconst { createUint8SharedArray, createFloat32SharedArray } = utilities;\n\nfunction getVolumeInfo(imageIds: string[]) {\n  const volumeMetadata = utilities.makeVolumeMetadata(imageIds);\n\n  const {\n    BitsAllocated,\n    PixelRepresentation,\n    PhotometricInterpretation,\n    ImageOrientationPatient,\n    PixelSpacing,\n    Columns,\n    Rows,\n  } = volumeMetadata;\n\n  const rowCosineVec = vec3.fromValues(\n    ImageOrientationPatient[0],\n    ImageOrientationPatient[1],\n    ImageOrientationPatient[2]\n  );\n\n  const colCosineVec = vec3.fromValues(\n    ImageOrientationPatient[3],\n    ImageOrientationPatient[4],\n    ImageOrientationPatient[5]\n  );\n\n  const scanAxisNormal = vec3.create();\n\n  vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n\n  const { zSpacing, origin, sortedImageIds } =\n    utilities.sortImageIdsAndGetSpacing(imageIds, scanAxisNormal);\n\n  const numFrames = imageIds.length;\n\n  // Spacing goes [1] then [0], as [1] is column spacing (x) and [0] is row spacing (y)\n  const spacing = <Types.Point3>[PixelSpacing[1], PixelSpacing[0], zSpacing];\n  const dimensions = <Types.Point3>[Columns, Rows, numFrames];\n  const direction = [\n    ...rowCosineVec,\n    ...colCosineVec,\n    ...scanAxisNormal,\n  ] as Types.Mat3;\n  const signed = PixelRepresentation === 1;\n\n  // Check if it fits in the cache before we allocate data\n  // TODO Improve this when we have support for more types\n  // NOTE: We use 4 bytes per voxel as we are using Float32.\n  const bytesPerVoxel = BitsAllocated === 16 ? 4 : 1;\n  const sizeInBytesPerComponent =\n    bytesPerVoxel * dimensions[0] * dimensions[1] * dimensions[2];\n\n  let numComponents = 1;\n  if (PhotometricInterpretation === 'RGB') {\n    numComponents = 3;\n  }\n\n  const sizeInBytes = sizeInBytesPerComponent * numComponents;\n\n  // check if there is enough space in unallocated + image Cache\n  const isCacheable = cache.isCacheable(sizeInBytes);\n  if (!isCacheable) {\n    throw new Error(Enums.Events.CACHE_SIZE_EXCEEDED);\n  }\n\n  cache.decacheIfNecessaryUntilBytesAvailable(sizeInBytes);\n\n  let scalarData;\n\n  switch (BitsAllocated) {\n    case 8:\n      if (signed) {\n        throw new Error(\n          '8 Bit signed images are not yet supported by this plugin.'\n        );\n      } else {\n        scalarData = createUint8SharedArray(\n          dimensions[0] * dimensions[1] * dimensions[2]\n        );\n      }\n\n      break;\n\n    case 16:\n      scalarData = createFloat32SharedArray(\n        dimensions[0] * dimensions[1] * dimensions[2]\n      );\n\n      break;\n\n    case 24:\n      // hacky because we don't support alpha channel in dicom\n      scalarData = createUint8SharedArray(\n        dimensions[0] * dimensions[1] * dimensions[2] * numComponents\n      );\n\n      break;\n  }\n\n  return {\n    metadata: volumeMetadata,\n    sortedImageIds,\n    dimensions,\n    spacing,\n    origin,\n    direction,\n    scalarData,\n    sizeInBytes,\n  };\n}\n\nexport { getVolumeInfo, getVolumeInfo as default };\n","import { metaData } from '@cornerstonejs/core';\n\n// TODO: Test remaining implemented tags\n// Supported 4D Tags\n//   (0018,1060) Trigger Time                   [Implemented, not tested]\n//   (0018,0081) Echo Time                      [Implemented, not tested]\n//   (0018,0086) Echo Number                    [Implemented, not tested]\n//   (0020,0100) Temporal Position Identifier   [OK]\n//   (0054,1300) FrameReferenceTime             [OK]\n//   (0018,9087) Diffusion B Value              [OK]\n//   (2001,1003) Philips Diffusion B-factor     [OK]\n//   (0019,100c) Siemens Diffusion B Value      [Implemented, not tested]\n//   (0043,1039) GE Diffusion B Value           [OK]\n\ninterface MappedIPP {\n  imageId: string;\n  imagePositionPatient;\n}\n\nconst groupBy = (array, key) => {\n  return array.reduce((rv, x) => {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nfunction getIPPGroups(imageIds: string[]): { [id: string]: Array<MappedIPP> } {\n  const ippMetadata: Array<MappedIPP> = imageIds.map((imageId) => {\n    const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n    return { imageId, imagePositionPatient };\n  });\n\n  if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n    // Fail if any instances don't provide a position\n    return null;\n  }\n\n  const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n  const positions = Object.keys(positionGroups);\n  const frame_count = positionGroups[positions[0]].length;\n  if (frame_count === 1) {\n    // Single frame indicates 3D volume\n    return null;\n  }\n  const frame_count_equal = positions.every(\n    (k) => positionGroups[k].length === frame_count\n  );\n  if (!frame_count_equal) {\n    // Differences in number of frames per position group --> not a valid MV\n    return null;\n  }\n  return positionGroups;\n}\n\nfunction test4DTag(\n  IPPGroups: { [id: string]: Array<MappedIPP> },\n  value_getter: (imageId: string) => number\n) {\n  const frame_groups = {};\n  let first_frame_value_set: number[] = [];\n\n  const positions = Object.keys(IPPGroups);\n  for (let i = 0; i < positions.length; i++) {\n    const frame_value_set: Set<number> = new Set<number>();\n    const frames = IPPGroups[positions[i]];\n\n    for (let j = 0; j < frames.length; j++) {\n      const frame_value = value_getter(frames[j].imageId) || 0;\n\n      frame_groups[frame_value] = frame_groups[frame_value] || [];\n      frame_groups[frame_value].push({ imageId: frames[j].imageId });\n\n      frame_value_set.add(frame_value);\n      if (frame_value_set.size - 1 < j) {\n        return undefined;\n      }\n    }\n\n    if (i == 0) {\n      first_frame_value_set = Array.from(frame_value_set);\n    } else if (!setEquals(first_frame_value_set, frame_value_set)) {\n      return undefined;\n    }\n  }\n  return frame_groups;\n}\n\nfunction getTagValue(imageId: string, tag: string): number {\n  const value = metaData.get(tag, imageId);\n  try {\n    return parseFloat(value);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction getPhilipsPrivateBValue(imageId: string) {\n  // Philips Private Diffusion B-factor tag (2001, 1003)\n  // Private creator: Philips Imaging DD 001, VR=FL, VM=1\n  const value = metaData.get('20011003', imageId);\n  try {\n    const { InlineBinary } = value;\n    if (InlineBinary) {\n      const value_bytes = atob(InlineBinary);\n      const ary_buf = new ArrayBuffer(value_bytes.length);\n      const dv = new DataView(ary_buf);\n      for (let i = 0; i < value_bytes.length; i++) {\n        dv.setUint8(i, value_bytes.charCodeAt(i));\n      }\n      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      // For WebGL Buffers, can skip Float32Array,\n      // just return ArrayBuffer is all that's needed.\n      return new Float32Array(ary_buf)[0];\n    }\n\n    return parseFloat(value);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction getSiemensPrivateBValue(imageId: string) {\n  // Siemens Private Diffusion B-factor tag (0019, 100c)\n  // Private creator: SIEMENS MR HEADER, VR=IS, VM=1\n  let value = metaData.get('0019100c', imageId);\n\n  try {\n    const { InlineBinary } = value;\n    if (InlineBinary) {\n      value = atob(InlineBinary);\n    }\n    return parseFloat(value);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction getGEPrivateBValue(imageId: string) {\n  // GE Private Diffusion B-factor tag (0043, 1039)\n  // Private creator: GEMS_PARM_01, VR=IS, VM=4\n  let value = metaData.get('00431039', imageId);\n\n  try {\n    const { InlineBinary } = value;\n    if (InlineBinary) {\n      value = atob(InlineBinary).split('//');\n    }\n    return parseFloat(value[0]) % 100000;\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setEquals(set_a: number[], set_b: Set<number>): boolean {\n  if (set_a.length != set_b.size) {\n    return false;\n  }\n  for (let i = 0; i < set_a.length; i++) {\n    if (!set_b.has(set_a[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getPetFrameReferenceTime(imageId) {\n  const moduleInfo = metaData.get('petImageModule', imageId);\n  return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\n\n/**\n * Split the imageIds array by 4D tags into groups. Each group must have the\n * same number of imageIds or the same imageIds array passed in is returned.\n * @param imageIds - array of imageIds\n * @returns imageIds grouped by 4D tags\n */\nfunction splitImageIdsBy4DTags(imageIds: string[]): {\n  imageIdsGroups: string[][];\n  splittingTag: string | null;\n} {\n  const positionGroups = getIPPGroups(imageIds);\n  if (!positionGroups) {\n    // When no position groups are found, return the original array wrapped and indicate no tag was used\n    return { imageIdsGroups: [imageIds], splittingTag: null };\n  }\n\n  const tags = [\n    'TemporalPositionIdentifier',\n    'DiffusionBValue',\n    'TriggerTime',\n    'EchoTime',\n    'EchoNumber',\n    'PhilipsPrivateBValue',\n    'SiemensPrivateBValue',\n    'GEPrivateBValue',\n    'PetFrameReferenceTime',\n  ];\n\n  const fncList2 = [\n    (imageId) => getTagValue(imageId, tags[0]),\n    (imageId) => getTagValue(imageId, tags[1]),\n    (imageId) => getTagValue(imageId, tags[2]),\n    (imageId) => getTagValue(imageId, tags[3]),\n    (imageId) => getTagValue(imageId, tags[4]),\n    getPhilipsPrivateBValue,\n    getSiemensPrivateBValue,\n    getGEPrivateBValue,\n    getPetFrameReferenceTime,\n  ];\n\n  for (let i = 0; i < fncList2.length; i++) {\n    const frame_groups = test4DTag(positionGroups, fncList2[i]);\n    if (frame_groups) {\n      const sortedKeys = Object.keys(frame_groups)\n        .map(Number.parseFloat)\n        .sort((a, b) => a - b);\n\n      const imageIdsGroups = sortedKeys.map((key) =>\n        frame_groups[key].map((item) => item.imageId)\n      );\n      return { imageIdsGroups, splittingTag: tags[i] };\n    }\n  }\n\n  // Return the same imagesIds for non-4D volumes and indicate no tag was used\n  return { imageIdsGroups: [imageIds], splittingTag: null };\n}\n\nexport default splitImageIdsBy4DTags;\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\n\n/**\n * Get some info about 4D image sets. Time points (groups of imageIds) are\n * returned when the imageIds represents a 4D volume.\n * @param imageIds - Array of Cornerstone Image Object's imageIds\n * @returns 4D series infos\n */\nfunction getDynamicVolumeInfo(imageIds) {\n  const { imageIdsGroups: timePoints, splittingTag } =\n    splitImageIdsBy4DTags(imageIds);\n  const isDynamicVolume = timePoints.length > 1;\n\n  return { isDynamicVolume, timePoints, splittingTag };\n}\n\nexport default getDynamicVolumeInfo;\n","import { getRenderingEngines, utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n//import type { Types } from '@cornerstonejs/core'\n\ntype RenderingEngineAndViewportIds = {\n  renderingEngine: Types.IRenderingEngine | undefined; //Types.IRenderingEngine | undefined\n  viewportIds: Array<string>;\n};\n\n/**\n * Given a volumeId, it finds the viewports and renderingEngines that\n * include that volume, and triggers a render if renderingEngine is available.\n *\n * @param volumeId - The Id of the volume\n */\nconst autoLoad = (volumeId: string): void => {\n  const renderingEngineAndViewportIds =\n    getRenderingEngineAndViewportsContainingVolume(volumeId);\n\n  if (!renderingEngineAndViewportIds || !renderingEngineAndViewportIds.length) {\n    return;\n  }\n\n  renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n    if (!renderingEngine.hasBeenDestroyed) {\n      renderingEngine.renderViewports(viewportIds);\n    }\n  });\n};\n\nfunction getRenderingEngineAndViewportsContainingVolume(\n  volumeId: string\n): Array<RenderingEngineAndViewportIds> {\n  const renderingEnginesArray = getRenderingEngines();\n\n  const renderingEngineAndViewportIds = [];\n\n  for (let i = 0; i < renderingEnginesArray.length; i++) {\n    const renderingEngine = renderingEnginesArray[i];\n    const viewports = utilities.getViewportsWithVolumeId(\n      volumeId,\n      renderingEngine.id\n    );\n\n    if (viewports.length) {\n      renderingEngineAndViewportIds.push({\n        renderingEngine,\n        viewportIds: viewports.map((viewport) => viewport.id),\n      });\n    }\n  }\n\n  return renderingEngineAndViewportIds;\n}\n\nexport default autoLoad;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Given a pixel array, rescale the pixel values using the rescale slope and\n * intercept and if modality is PT it uses the suv values to scale the array\n * @param array - The array to be scaled.\n * @param scalingParameters - The scaling parameters\n * @returns The array is being scaled\n */\nexport default function scaleArray(\n  array: Float32Array | Uint8Array | Uint16Array | Int16Array,\n  scalingParameters: Types.ScalingParameters\n): Float32Array | Uint8Array | Uint16Array | Int16Array {\n  const arrayLength = array.length;\n  const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n\n  if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n    for (let i = 0; i < arrayLength; i++) {\n      array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n    }\n  } else {\n    for (let i = 0; i < arrayLength; i++) {\n      array[i] = array[i] * rescaleSlope + rescaleIntercept;\n    }\n  }\n\n  return array;\n}\n","import {\n  Enums,\n  eventTarget,\n  metaData,\n  imageLoadPoolManager,\n  triggerEvent,\n  ImageVolume,\n  cache,\n  imageLoader,\n  utilities as csUtils,\n  ProgressiveRetrieveImages,\n  canRenderFloatTextures,\n} from '@cornerstonejs/core';\nimport type {\n  Types,\n  IImagesLoader,\n  ImageLoadListener,\n} from '@cornerstonejs/core';\n\nimport { scaleArray, autoLoad } from './helpers';\n\nconst requestTypeDefault = Enums.RequestType.Prefetch;\nconst {\n  ProgressiveIterator,\n  imageRetrieveMetadataProvider,\n  hasFloatScalingParameters,\n} = csUtils;\nconst { ImageQualityStatus } = Enums;\n\n/**\n * Streaming Image Volume Class that extends ImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n *\n */\nexport default class BaseStreamingImageVolume\n  extends ImageVolume\n  implements IImagesLoader\n{\n  private framesLoaded = 0;\n  private framesProcessed = 0;\n  private framesUpdated = 0;\n  protected autoRenderOnLoad = true;\n  protected cachedFrames = [];\n  protected reRenderTarget = 0;\n  protected reRenderFraction = 2;\n\n  loadStatus: {\n    loaded: boolean;\n    loading: boolean;\n    cancelled: boolean;\n    callbacks: Array<(...args: unknown[]) => void>;\n  };\n  imagesLoader: IImagesLoader = this;\n\n  constructor(\n    imageVolumeProperties: Types.ImageVolumeProps,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    super(imageVolumeProperties);\n    this.loadStatus = streamingProperties.loadStatus;\n  }\n\n  protected invalidateVolume(immediate: boolean): void {\n    const { imageData, vtkOpenGLTexture } = this;\n    const { numFrames } = this;\n\n    for (let i = 0; i < numFrames; i++) {\n      vtkOpenGLTexture.setUpdatedFrame(i);\n    }\n\n    imageData.modified();\n\n    if (immediate) {\n      autoLoad(this.volumeId);\n    }\n  }\n\n  /**\n   * It cancels loading the images of the volume. It sets the loading status to false\n   * and filters any imageLoad request in the requestPoolManager that has the same\n   * volumeId\n   */\n  public cancelLoading = (): void => {\n    const { loadStatus } = this;\n\n    if (!loadStatus || !loadStatus.loading) {\n      return;\n    }\n\n    // Set to not loading.\n    loadStatus.loading = false;\n    loadStatus.cancelled = true;\n\n    // Remove all the callback listeners\n    this.clearLoadCallbacks();\n\n    // Create a filter function which only keeps requests\n    // which do not match this volume's Id\n    const filterFunction = ({ additionalDetails }) => {\n      return additionalDetails.volumeId !== this.volumeId;\n    };\n\n    // Instruct the request pool manager to filter queued\n    // requests to ensure requests we no longer need are\n    // no longer sent.\n    imageLoadPoolManager.filterRequests(filterFunction);\n  };\n\n  /**\n   * Clear the load callbacks\n   */\n  public clearLoadCallbacks(): void {\n    this.loadStatus.callbacks = [];\n  }\n\n  protected callLoadStatusCallback(evt) {\n    const { framesUpdated, framesProcessed, totalNumFrames } = evt;\n    const { volumeId, reRenderFraction, loadStatus, metadata } = this;\n    const { FrameOfReferenceUID } = metadata;\n\n    // TODO: probably don't want this here\n    if (this.autoRenderOnLoad) {\n      if (\n        framesUpdated > this.reRenderTarget ||\n        framesProcessed === totalNumFrames\n      ) {\n        this.reRenderTarget += reRenderFraction;\n        autoLoad(volumeId);\n      }\n    }\n    if (framesProcessed === totalNumFrames) {\n      loadStatus.callbacks.forEach((callback) => callback(evt));\n\n      const eventDetail = {\n        FrameOfReferenceUID,\n        volumeId: volumeId,\n      };\n\n      triggerEvent(\n        eventTarget,\n        Enums.Events.IMAGE_VOLUME_LOADING_COMPLETED,\n        eventDetail\n      );\n    }\n  }\n\n  protected updateTextureAndTriggerEvents(\n    imageIdIndex,\n    imageId,\n    imageQualityStatus = ImageQualityStatus.FULL_RESOLUTION\n  ) {\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\n    const { cachedFrames, numFrames, totalNumFrames } = this;\n    const { FrameOfReferenceUID } = this.metadata;\n    const currentStatus = cachedFrames[frameIndex];\n    if (currentStatus > imageQualityStatus) {\n      // This is common for initial versus decimated images.\n      return;\n    }\n\n    if (cachedFrames[frameIndex] === ImageQualityStatus.FULL_RESOLUTION) {\n      // Sometimes the frame can be delivered multiple times, so just return\n      // here if that happens\n      return;\n    }\n    const complete = imageQualityStatus === ImageQualityStatus.FULL_RESOLUTION;\n    cachedFrames[imageIdIndex] = imageQualityStatus;\n    this.framesUpdated++;\n    if (complete) {\n      this.framesLoaded++;\n      this.framesProcessed++;\n    }\n\n    this.vtkOpenGLTexture.setUpdatedFrame(frameIndex);\n    this.imageData.modified();\n\n    const eventDetail: Types.EventTypes.ImageVolumeModifiedEventDetail = {\n      FrameOfReferenceUID,\n      imageVolume: this,\n      numberOfFrames: numFrames,\n      framesProcessed: this.framesProcessed,\n    };\n\n    triggerEvent(eventTarget, Enums.Events.IMAGE_VOLUME_MODIFIED, eventDetail);\n\n    if (complete && this.framesProcessed === this.totalNumFrames) {\n      this.loadStatus.loaded = true;\n      this.loadStatus.loading = false;\n    }\n\n    this.callLoadStatusCallback({\n      success: true,\n      imageIdIndex,\n      imageId,\n      framesLoaded: this.framesLoaded,\n      framesProcessed: this.framesProcessed,\n      framesUpdated: this.framesUpdated,\n      numFrames,\n      totalNumFrames,\n      complete,\n      imageQualityStatus,\n    });\n    if (this.loadStatus.loaded) {\n      this.loadStatus.callbacks = [];\n    }\n  }\n\n  public successCallback(imageId: string, image) {\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    const options = this.getLoaderImageOptions(imageId);\n    const scalarData = this.getScalarDataByImageIdIndex(imageIdIndex);\n\n    handleArrayBufferLoad(scalarData, image, options);\n\n    const { scalingParameters } = image.preScale || {};\n    const { imageQualityStatus } = image;\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\n\n    // Check if there is a cached image for the same imageURI (different\n    // data loader scheme)\n    const cachedImage = cache.getCachedImageBasedOnImageURI(imageId);\n\n    // Check if the image was already loaded by another volume and we are here\n    // since we got the imageLoadObject from the cache from the other already loaded\n    // volume\n    const cachedVolume = cache.getVolumeContainingImageId(imageId);\n\n    // check if the load was cancelled while we were waiting for the image\n    // if so we don't want to do anything\n    if (this.loadStatus.cancelled) {\n      console.warn(\n        'volume load cancelled, returning for imageIdIndex: ',\n        imageIdIndex\n      );\n      return;\n    }\n\n    // if it is not a cached image or volume\n    if (!cachedImage && !(cachedVolume && cachedVolume.volume !== this)) {\n      return this.updateTextureAndTriggerEvents(\n        imageIdIndex,\n        imageId,\n        imageQualityStatus\n      );\n    }\n\n    // it is either cachedImage or cachedVolume\n    const isFromImageCache = !!cachedImage;\n\n    if (isFromImageCache && options.targetBuffer) {\n      // put it in the imageCacheOffsetMap, since we are going to use it\n      // for cache optimization later\n      this.imageCacheOffsetMap.set(imageId, {\n        imageIdIndex,\n        frameIndex,\n        offset: options.targetBuffer?.offset || 0,\n        length: options.targetBuffer?.length,\n      });\n    }\n\n    const cachedImageOrVolume = cachedImage || cachedVolume.volume;\n\n    this.handleImageComingFromCache(\n      cachedImageOrVolume,\n      isFromImageCache,\n      scalingParameters,\n      scalarData,\n      frameIndex,\n      scalarData.buffer,\n      imageIdIndex,\n      imageId\n    );\n  }\n\n  public errorCallback(imageId, permanent, error) {\n    if (!permanent) {\n      return;\n    }\n    const { totalNumFrames, numFrames } = this;\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    this.framesProcessed++;\n\n    if (this.framesProcessed === totalNumFrames) {\n      this.loadStatus.loaded = true;\n      this.loadStatus.loading = false;\n    }\n\n    this.callLoadStatusCallback({\n      success: false,\n      imageId,\n      imageIdIndex,\n      error,\n      framesLoaded: this.framesLoaded,\n      framesProcessed: this.framesProcessed,\n      framesUpdated: this.framesUpdated,\n      numFrames,\n      totalNumFrames,\n    });\n\n    if (this.loadStatus.loaded) {\n      this.loadStatus.callbacks = [];\n    }\n\n    const eventDetail = {\n      error,\n      imageIdIndex,\n      imageId,\n    };\n\n    triggerEvent(eventTarget, Enums.Events.IMAGE_LOAD_ERROR, eventDetail);\n  }\n\n  /**\n   * It triggers a prefetch for images in the volume.\n   * @param callback - A callback function to be called when the volume is fully loaded\n   * @param priority - The priority for loading the volume images, lower number is higher priority\n   * @returns\n   */\n  public load = (callback: (...args: unknown[]) => void): void => {\n    const { imageIds, loadStatus, numFrames } = this;\n    const { transferSyntaxUID } =\n      metaData.get('transferSyntax', imageIds[0]) || {};\n    const imageRetrieveConfiguration = metaData.get(\n      imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION,\n      this.volumeId,\n      transferSyntaxUID,\n      'volume'\n    );\n\n    this.imagesLoader = imageRetrieveConfiguration\n      ? (\n          imageRetrieveConfiguration.create ||\n          ProgressiveRetrieveImages.createProgressive\n        )(imageRetrieveConfiguration)\n      : this;\n    if (loadStatus.loading === true) {\n      return; // Already loading, will get callbacks from main load.\n    }\n\n    const { loaded } = this.loadStatus;\n    const totalNumFrames = imageIds.length;\n\n    if (loaded) {\n      if (callback) {\n        callback({\n          success: true,\n          framesLoaded: totalNumFrames,\n          framesProcessed: totalNumFrames,\n          numFrames,\n          totalNumFrames,\n        });\n      }\n      return;\n    }\n\n    if (callback) {\n      this.loadStatus.callbacks.push(callback);\n    }\n\n    this._prefetchImageIds();\n  };\n\n  public getLoaderImageOptions(imageId: string) {\n    const { transferSyntaxUID: transferSyntaxUID } =\n      metaData.get('transferSyntax', imageId) || {};\n\n    const imagePlaneModule = metaData.get('imagePlaneModule', imageId) || {};\n    const { rows, columns } = imagePlaneModule;\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    const scalarData = this.getScalarDataByImageIdIndex(imageIdIndex);\n    if (!scalarData) {\n      return null;\n    }\n    const arrayBuffer = scalarData.buffer;\n    // Length of one frame in voxels: length\n    // Length of one frame in bytes: lengthInBytes\n    const { type, length, lengthInBytes } = getScalarDataType(\n      scalarData,\n      this.numFrames\n    );\n\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n\n    const generalSeriesModule =\n      metaData.get('generalSeriesModule', imageId) || {};\n\n    const scalingParameters: Types.ScalingParameters = {\n      rescaleSlope: modalityLutModule.rescaleSlope,\n      rescaleIntercept: modalityLutModule.rescaleIntercept,\n      modality: generalSeriesModule.modality,\n    };\n\n    if (scalingParameters.modality === 'PT') {\n      const suvFactor = metaData.get('scalingModule', imageId);\n\n      if (suvFactor) {\n        this._addScalingToVolume(suvFactor);\n        scalingParameters.suvbw = suvFactor.suvbw;\n      }\n    }\n\n    const isSlopeAndInterceptNumbers =\n      typeof scalingParameters.rescaleSlope === 'number' &&\n      typeof scalingParameters.rescaleIntercept === 'number';\n\n    const floatAfterScale = hasFloatScalingParameters(scalingParameters);\n    const allowFloatRendering = canRenderFloatTextures();\n\n    /**\n     * So this is has limitation right now, but we need to somehow indicate\n     * whether the volume has been scaled with the scaling parameters or not.\n     * However, each slice can have different scaling parameters but it is rare\n     * that rescale slope and intercept be unknown for one slice and known for\n     * another. So we can just check the first slice and assume that the rest\n     * of the slices have the same scaling parameters. Basically it is important\n     * that these two are numbers and that means the volume has been scaled (\n     * we do that automatically in the loader). For the suvbw, we need to\n     * somehow indicate whether the PT image has been corrected with suvbw or\n     * not, which we store it in the this.scaling.PT.suvbw.\n     */\n    this.isPreScaled = isSlopeAndInterceptNumbers;\n\n    // in case where the hardware/os does not support float rendering but the\n    // requested scaling params are not integers, we need to disable pre-scaling\n    if (!allowFloatRendering && floatAfterScale) {\n      this.isPreScaled = false;\n    }\n\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\n\n    return {\n      // WADO Image Loader\n      targetBuffer: {\n        // keeping this in the options means a large empty volume array buffer\n        // will be transferred to the worker. This is undesirable for streaming\n        // volume without shared array buffer because the target is now an empty\n        // 300-500MB volume array buffer. Instead the volume should be progressively\n        // set in the main thread.\n        arrayBuffer:\n          arrayBuffer instanceof ArrayBuffer ? undefined : arrayBuffer,\n        offset: frameIndex * lengthInBytes,\n        length,\n        type,\n        rows,\n        columns,\n      },\n      skipCreateImage: true,\n      allowFloatRendering,\n      preScale: {\n        enabled: this.isPreScaled,\n        // we need to pass in the scalingParameters here, since the streaming\n        // volume loader doesn't go through the createImage phase in the loader,\n        // and therefore doesn't have the scalingParameters\n        scalingParameters,\n      },\n      transferPixelData: true,\n      transferSyntaxUID,\n      // The loader is used to load the image into the cache\n      loader: imageLoader.loadImage,\n      additionalDetails: {\n        imageId,\n        imageIdIndex,\n        volumeId: this.volumeId,\n      },\n    };\n  }\n\n  // Use loadImage because we are skipping the Cornerstone Image cache\n  // when we load directly into the Volume cache\n  callLoadImage(imageId, imageIdIndex, options) {\n    const { cachedFrames } = this;\n\n    if (cachedFrames[imageIdIndex] === ImageQualityStatus.FULL_RESOLUTION) {\n      // The request framework handles non-promise returns, so just return here\n      return;\n    }\n\n    const uncompressedIterator = ProgressiveIterator.as(\n      imageLoader.loadImage(imageId, options)\n    );\n    return uncompressedIterator.forEach((image) => {\n      // scalarData is the volume container we are progressively loading into\n      // image is the pixelData decoded from workers in cornerstoneDICOMImageLoader\n      this.successCallback(imageId, image);\n    }, this.errorCallback.bind(this, imageIdIndex, imageId));\n  }\n\n  protected getImageIdsRequests(imageIds: string[], priorityDefault: number) {\n    // SharedArrayBuffer\n    this.totalNumFrames = this.imageIds.length;\n    const autoRenderPercentage = 2;\n\n    if (this.autoRenderOnLoad) {\n      this.reRenderFraction =\n        this.totalNumFrames * (autoRenderPercentage / 100);\n      this.reRenderTarget = this.reRenderFraction;\n    }\n\n    // 4D datasets load one time point at a time and the frameIndex is\n    // the position of the imageId in the current time point while the\n    // imageIdIndex is its absolute position in the array that contains\n    // all other imageIds. In a 4D dataset the frameIndex can also be\n    // calculated as `imageIdIndex % numFrames` where numFrames is the\n    // number of frames per time point. The frameIndex and imageIdIndex\n    // will be the same when working with 3D datasets.\n    const requests = imageIds.map((imageId) => {\n      const imageIdIndex = this.getImageIdIndex(imageId);\n\n      const requestType = requestTypeDefault;\n      const priority = priorityDefault;\n      const options = this.getLoaderImageOptions(imageId);\n\n      return {\n        callLoadImage: this.callLoadImage.bind(this),\n        imageId,\n        imageIdIndex,\n        options,\n        priority,\n        requestType,\n        additionalDetails: {\n          volumeId: this.volumeId,\n        },\n      };\n    });\n\n    return requests;\n  }\n\n  private handleImageComingFromCache(\n    cachedImageOrVolume,\n    isFromImageCache: boolean,\n    scalingParameters,\n    scalarData: Types.PixelDataTypedArray,\n    frameIndex: number,\n    arrayBuffer: ArrayBufferLike,\n    imageIdIndex: number,\n    imageId: string\n  ) {\n    const imageLoadObject = isFromImageCache\n      ? cachedImageOrVolume.imageLoadObject\n      : cachedImageOrVolume.convertToCornerstoneImage(imageId, imageIdIndex);\n\n    imageLoadObject.promise\n      .then((cachedImage) => {\n        const imageScalarData = this._scaleIfNecessary(\n          cachedImage,\n          scalingParameters\n        );\n        // todo add scaling and slope\n        const { pixelsPerImage, bytesPerImage } = this.cornerstoneImageMetaData;\n        const TypedArray = scalarData.constructor;\n        let byteOffset = bytesPerImage * frameIndex;\n\n        // create a view on the volume arraybuffer\n        const bytePerPixel = bytesPerImage / pixelsPerImage;\n\n        if (scalarData.BYTES_PER_ELEMENT !== bytePerPixel) {\n          byteOffset *= scalarData.BYTES_PER_ELEMENT / bytePerPixel;\n        }\n\n        // @ts-ignore\n        const volumeBufferView = new TypedArray(\n          arrayBuffer,\n          byteOffset,\n          pixelsPerImage\n        );\n        volumeBufferView.set(imageScalarData);\n        this.updateTextureAndTriggerEvents(\n          imageIdIndex,\n          imageId,\n          cachedImage.imageQualityStatus\n        );\n      })\n      .catch((err) => {\n        this.errorCallback(imageId, true, err);\n      });\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not executes the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests(_priority: number): any[] {\n    throw new Error('Abstract method');\n  }\n\n  public getImageIdsToLoad(): string[] {\n    throw new Error('Abstract method');\n  }\n\n  /**\n   * Retrieves images using the older getImageLoadRequests method\n   * to setup all the requests.  Ensures compatibility with the custom image\n   * loaders.\n   */\n  public loadImages(imageIds: string[], listener: ImageLoadListener) {\n    this.loadStatus.loading = true;\n\n    const requests = this.getImageLoadRequests(5);\n\n    requests.reverse().forEach((request) => {\n      if (!request) {\n        // there is a cached image for the imageId and no requests will fire\n        return;\n      }\n\n      const {\n        callLoadImage,\n        imageId,\n        imageIdIndex,\n        options,\n        priority,\n        requestType,\n        additionalDetails,\n      } = request;\n\n      imageLoadPoolManager.addRequest(\n        callLoadImage.bind(this, imageId, imageIdIndex, options),\n        requestType,\n        additionalDetails,\n        priority\n      );\n    });\n    return Promise.resolve(true);\n  }\n\n  private _prefetchImageIds() {\n    // Note: here is the correct location to set the loading flag\n    // since getImageIdsRequest is just grabbing and building requests\n    // and not actually executing them\n    this.loadStatus.loading = true;\n\n    const imageIds = [...this.getImageIdsToLoad()];\n    imageIds.reverse();\n\n    this.totalNumFrames = this.imageIds.length;\n    const autoRenderPercentage = 2;\n\n    if (this.autoRenderOnLoad) {\n      this.reRenderFraction =\n        this.totalNumFrames * (autoRenderPercentage / 100);\n      this.reRenderTarget = this.reRenderFraction;\n    }\n\n    return this.imagesLoader.loadImages(imageIds, this).catch((e) => {\n      console.debug('progressive loading failed to complete', e);\n    });\n  }\n\n  /**\n   * This function decides whether or not to scale the image based on the\n   * scalingParameters. If the image is already scaled, we should take that\n   * into account when scaling the image again, so if the rescaleSlope and/or\n   * rescaleIntercept are different from the ones that were used to scale the\n   * image, we should scale the image again according to the new parameters.\n   */\n  private _scaleIfNecessary(\n    image,\n    scalingParametersToUse: Types.ScalingParameters\n  ) {\n    if (!image.preScale?.enabled) {\n      return image.getPixelData().slice(0);\n    }\n\n    const imageIsAlreadyScaled = image.preScale?.scaled;\n    const noScalingParametersToUse =\n      !scalingParametersToUse ||\n      !scalingParametersToUse.rescaleIntercept ||\n      !scalingParametersToUse.rescaleSlope;\n\n    if (!imageIsAlreadyScaled && noScalingParametersToUse) {\n      // no need to scale the image\n      return image.getPixelData().slice(0);\n    }\n\n    if (\n      !imageIsAlreadyScaled &&\n      scalingParametersToUse &&\n      scalingParametersToUse.rescaleIntercept !== undefined &&\n      scalingParametersToUse.rescaleSlope !== undefined\n    ) {\n      // if not already scaled, just scale the image.\n      // copy so that it doesn't get modified\n      const pixelDataCopy = image.getPixelData().slice(0);\n      const scaledArray = scaleArray(pixelDataCopy, scalingParametersToUse);\n      return scaledArray;\n    }\n\n    // if the image is already scaled,\n    const {\n      rescaleSlope: rescaleSlopeToUse,\n      rescaleIntercept: rescaleInterceptToUse,\n      suvbw: suvbwToUse,\n    } = scalingParametersToUse;\n\n    const {\n      rescaleSlope: rescaleSlopeUsed,\n      rescaleIntercept: rescaleInterceptUsed,\n      suvbw: suvbwUsed,\n    } = image.preScale.scalingParameters;\n\n    const rescaleSlopeIsSame = rescaleSlopeToUse === rescaleSlopeUsed;\n    const rescaleInterceptIsSame =\n      rescaleInterceptToUse === rescaleInterceptUsed;\n    const suvbwIsSame = suvbwToUse === suvbwUsed;\n\n    if (rescaleSlopeIsSame && rescaleInterceptIsSame && suvbwIsSame) {\n      // if the scaling parameters are the same, we don't need to scale the image again\n      return image.getPixelData();\n    }\n\n    const pixelDataCopy = image.getPixelData().slice(0);\n    // the general formula for scaling is  scaledPixelValue = suvbw * (pixelValue * rescaleSlope) + rescaleIntercept\n    const newSuvbw = suvbwToUse / suvbwUsed;\n    const newRescaleSlope = rescaleSlopeToUse / rescaleSlopeUsed;\n    const newRescaleIntercept =\n      rescaleInterceptToUse - rescaleInterceptUsed * newRescaleSlope;\n\n    const newScalingParameters = {\n      ...scalingParametersToUse,\n      rescaleSlope: newRescaleSlope,\n      rescaleIntercept: newRescaleIntercept,\n      suvbw: newSuvbw,\n    };\n\n    const scaledArray = scaleArray(pixelDataCopy, newScalingParameters);\n    return scaledArray;\n  }\n\n  private _addScalingToVolume(suvFactor) {\n    // Todo: handle case where suvFactors are not the same for all frames\n    if (this.scaling) {\n      return;\n    }\n\n    const { suvbw, suvlbm, suvbsa } = suvFactor;\n\n    const petScaling = <Types.PTScaling>{};\n\n    if (suvlbm) {\n      petScaling.suvbwToSuvlbm = suvlbm / suvbw;\n    }\n\n    if (suvbsa) {\n      petScaling.suvbwToSuvbsa = suvbsa / suvbw;\n    }\n\n    if (suvbw) {\n      petScaling.suvbw = suvbw;\n    }\n\n    this.scaling = { PT: petScaling };\n  }\n}\n\nfunction getScalarDataType(scalarData, numFrames) {\n  let type, byteSize;\n  if (scalarData instanceof Uint8Array) {\n    type = 'Uint8Array';\n    byteSize = 1;\n  } else if (scalarData instanceof Float32Array) {\n    type = 'Float32Array';\n    byteSize = 4;\n  } else if (scalarData instanceof Uint16Array) {\n    type = 'Uint16Array';\n    byteSize = 2;\n  } else if (scalarData instanceof Int16Array) {\n    type = 'Int16Array';\n    byteSize = 2;\n  } else {\n    throw new Error('Unsupported array type');\n  }\n  const length = scalarData.length / numFrames;\n  const lengthInBytes = length * byteSize;\n  return { type, byteSize, length, lengthInBytes };\n}\n\n/**\n * Sets the scalar data at the appropriate offset to the\n * byte data from the image.\n */\nfunction handleArrayBufferLoad(scalarData, image, options) {\n  if (!(scalarData.buffer instanceof ArrayBuffer)) {\n    return;\n  }\n  const offset = options.targetBuffer.offset; // in bytes\n  const length = options.targetBuffer.length; // in frames\n  const pixelData = image.pixelData ? image.pixelData : image.getPixelData();\n\n  try {\n    if (scalarData instanceof Float32Array) {\n      const bytesInFloat = 4;\n      const floatView = new Float32Array(pixelData);\n      if (floatView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      // since set is based on the underlying type,\n      // we need to divide the offset bytes by the byte type\n      scalarData.set(floatView, offset / bytesInFloat);\n    }\n    if (scalarData instanceof Int16Array) {\n      const bytesInInt16 = 2;\n      const intView = new Int16Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInInt16);\n    }\n    if (scalarData instanceof Uint16Array) {\n      const bytesInUint16 = 2;\n      const intView = new Uint16Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInUint16);\n    }\n    if (scalarData instanceof Uint8Array) {\n      const bytesInUint8 = 1;\n      const intView = new Uint8Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInUint8);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n","import { Types } from '@cornerstonejs/core';\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\nimport ImageLoadRequests from './types/ImageLoadRequests';\n\n/**\n * Streaming Image Volume Class that extends ImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n */\nexport default class StreamingImageVolume extends BaseStreamingImageVolume {\n  constructor(\n    imageVolumeProperties: Types.ImageVolumeProps,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    // Just for fallback to the old API\n    if (!imageVolumeProperties.imageIds) {\n      imageVolumeProperties.imageIds = streamingProperties.imageIds;\n    }\n    super(imageVolumeProperties, streamingProperties);\n  }\n\n  /**\n   * Return the scalar data (buffer)\n   * @returns volume scalar data\n   */\n  public getScalarData(): Types.PixelDataTypedArray {\n    return <Types.PixelDataTypedArray>this.scalarData;\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not executes the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests(priority: number): ImageLoadRequests[] {\n    const { imageIds } = this;\n\n    return this.getImageIdsRequests(imageIds, priority);\n  }\n\n  public getImageIdsToLoad = () => {\n    const { imageIds } = this;\n    this.numFrames = imageIds.length;\n    return imageIds;\n  };\n}\n","import {\n  Enums,\n  imageLoader,\n  imageLoadPoolManager,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport StreamingImageVolume from './StreamingImageVolume';\n\ninterface IVolumeLoader {\n  promise: Promise<StreamingImageVolume>;\n  cancel: () => void;\n  decache: () => void;\n}\n\n/**\n * It handles loading of a image by streaming in its imageIds. It will be the\n * volume loader if the schema for the volumeID is `cornerstoneStreamingImageVolume`.\n * This function returns a promise that resolves to the StreamingImageVolume instance.\n *\n * In order to use the cornerstoneStreamingImageVolumeLoader you should use\n * createAndCacheVolume helper from the cornerstone-core volumeLoader module.\n *\n * @param volumeId - The ID of the volume\n * @param options - options for loading, imageIds\n * @returns a promise that resolves to a StreamingImageVolume\n */\nfunction cornerstoneStreamingImageVolumeLoader(\n  volumeId: string,\n  options: {\n    imageIds: string[];\n    progressiveRendering?: boolean | Types.IRetrieveConfiguration;\n  }\n): IVolumeLoader {\n  if (!options || !options.imageIds || !options.imageIds.length) {\n    throw new Error(\n      'ImageIds must be provided to create a streaming image volume'\n    );\n  }\n\n  async function getStreamingImageVolume() {\n    /**\n     * Check if we are using the `wadouri:` scheme, and if so, preload first,\n     * middle, and last image metadata as these are the images the current\n     * streaming image loader may explicitly request metadata from. The last image\n     * metadata would only be specifically requested if the imageId array order is\n     * reversed in the `sortImageIdsAndGetSpacing.ts` file.\n     */\n    if (options.imageIds[0].split(':')[0] === 'wadouri') {\n      const [middleImageIndex, lastImageIndex] = [\n        Math.floor(options.imageIds.length / 2),\n        options.imageIds.length - 1,\n      ];\n      const indexesToPrefetch = [0, middleImageIndex, lastImageIndex];\n      await Promise.all(\n        indexesToPrefetch.map((index) => {\n          return new Promise((resolve, reject) => {\n            const imageId = options.imageIds[index];\n            imageLoadPoolManager.addRequest(\n              async () => {\n                imageLoader\n                  .loadImage(imageId)\n                  .then(() => {\n                    console.log(`Prefetched imageId: ${imageId}`);\n                    resolve(true);\n                  })\n                  .catch((err) => {\n                    reject(err);\n                  });\n              },\n              Enums.RequestType.Prefetch,\n              { volumeId },\n              1 // priority\n            );\n          });\n        })\n      ).catch(console.error);\n    }\n\n    const {\n      dimensions,\n      spacing,\n      origin,\n      scalarData,\n      direction,\n      sizeInBytes,\n      metadata,\n      imageIds,\n    } = csUtils.generateVolumePropsFromImageIds(options.imageIds, volumeId);\n\n    const streamingImageVolume = new StreamingImageVolume(\n      // ImageVolume properties\n      {\n        volumeId,\n        metadata,\n        dimensions,\n        spacing,\n        origin,\n        direction,\n        scalarData,\n        sizeInBytes,\n        imageIds,\n      },\n      // Streaming properties\n      {\n        imageIds,\n        loadStatus: {\n          // todo: loading and loaded should be on ImageVolume\n          loaded: false,\n          loading: false,\n          cancelled: false,\n          cachedFrames: [],\n          callbacks: [],\n        },\n      }\n    );\n\n    return streamingImageVolume;\n  }\n\n  const streamingImageVolumePromise = getStreamingImageVolume();\n\n  return {\n    promise: streamingImageVolumePromise,\n    decache: () => {\n      streamingImageVolumePromise.then((streamingImageVolume) => {\n        streamingImageVolume.destroy();\n        streamingImageVolume = null;\n      });\n    },\n    cancel: () => {\n      streamingImageVolumePromise.then((streamingImageVolume) => {\n        streamingImageVolume.cancelLoading();\n      });\n    },\n  };\n}\n\nexport default cornerstoneStreamingImageVolumeLoader;\n","/**\n *  The events for cornerstone streaming image volume\n *\n */\nenum Events {\n  ///////////////////////////////////////\n  //            Loading Events\n  ///////////////////////////////////////\n\n  /**\n   * Dynamic image volume time point index changed\n   */\n  DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED = 'DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED',\n}\n\nexport default Events;\n","import { eventTarget, triggerEvent, type Types } from '@cornerstonejs/core';\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\nimport { Events as StreamingEvents } from './enums';\n\ntype TimePoint = {\n  /** imageIds of each timepoint  */\n  imageIds: Array<string>;\n  /** volume scalar data  */\n  scalarData: Types.PixelDataTypedArray;\n};\n\n/**\n * Streaming Image Volume Class that extends StreamingImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n */\nexport default class StreamingDynamicImageVolume\n  extends BaseStreamingImageVolume\n  implements Types.IDynamicImageVolume\n{\n  private _numTimePoints: number;\n  private _timePoints: TimePoint[];\n  private _timePointIndex = 0;\n  private _splittingTag: string;\n\n  constructor(\n    imageVolumeProperties: Types.ImageVolumeProps & { splittingTag: string },\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    StreamingDynamicImageVolume._ensureValidData(\n      imageVolumeProperties,\n      streamingProperties\n    );\n\n    super(imageVolumeProperties, streamingProperties);\n    this._numTimePoints = (<Types.PixelDataTypedArray[]>this.scalarData).length;\n    this._timePoints = this._getTimePointsData();\n    this._splittingTag = imageVolumeProperties.splittingTag;\n  }\n\n  private static _ensureValidData(\n    imageVolumeProperties: Types.ImageVolumeProps,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ): void {\n    const imageIds = streamingProperties.imageIds;\n    const scalarDataArrays = <Types.PixelDataTypedArray[]>(\n      imageVolumeProperties.scalarData\n    );\n\n    if (imageIds.length % scalarDataArrays.length !== 0) {\n      throw new Error(\n        `Number of imageIds is not a multiple of ${scalarDataArrays.length}`\n      );\n    }\n  }\n\n  /**\n   * Use the image ids and scalar data array to create TimePoint objects\n   * and make it a bit easier to work with when loading requests\n   */\n  private _getTimePointsData(): TimePoint[] {\n    const { imageIds } = this;\n    const scalarData = <Types.PixelDataTypedArray[]>this.scalarData;\n\n    const { numFrames } = this;\n    const numTimePoints = scalarData.length;\n    const timePoints: TimePoint[] = [];\n\n    for (let i = 0; i < numTimePoints; i++) {\n      const start = i * numFrames;\n      const end = start + numFrames;\n\n      timePoints.push({\n        imageIds: imageIds.slice(start, end),\n        scalarData: scalarData[i],\n      });\n    }\n\n    return timePoints;\n  }\n\n  private _getTimePointsToLoad() {\n    const timePoints = this._timePoints;\n    const initialTimePointIndex = this._timePointIndex;\n    const timePointsToLoad = [timePoints[initialTimePointIndex]];\n\n    let leftIndex = initialTimePointIndex - 1;\n    let rightIndex = initialTimePointIndex + 1;\n\n    while (leftIndex >= 0 || rightIndex < timePoints.length) {\n      if (leftIndex >= 0) {\n        timePointsToLoad.push(timePoints[leftIndex--]);\n      }\n\n      if (rightIndex < timePoints.length) {\n        timePointsToLoad.push(timePoints[rightIndex++]);\n      }\n    }\n\n    return timePointsToLoad;\n  }\n\n  private _getTimePointRequests = (timePoint, priority: number) => {\n    const { imageIds } = timePoint;\n\n    return this.getImageIdsRequests(imageIds, priority);\n  };\n\n  private _getTimePointsRequests = (priority: number) => {\n    const timePoints = this._getTimePointsToLoad();\n    let timePointsRequests = [];\n\n    timePoints.forEach((timePoint) => {\n      const timePointRequests = this._getTimePointRequests(timePoint, priority);\n      timePointsRequests = timePointsRequests.concat(timePointRequests);\n    });\n\n    return timePointsRequests;\n  };\n\n  public getImageIdsToLoad(): string[] {\n    const timePoints = this._getTimePointsToLoad();\n    let imageIds = [];\n\n    timePoints.forEach((timePoint) => {\n      const { imageIds: timePointIds } = timePoint;\n      imageIds = imageIds.concat(timePointIds);\n    });\n\n    return imageIds;\n  }\n\n  /** return true if it is a 4D volume or false if it is 3D volume */\n  public isDynamicVolume(): boolean {\n    return true;\n  }\n\n  /**\n   * Returns the active time point index\n   * @returns active time point index\n   */\n  public get timePointIndex(): number {\n    return this._timePointIndex;\n  }\n\n  /**\n   * Set the active time point index which also updates the active scalar data\n   * @returns current time point index\n   */\n  public set timePointIndex(newTimePointIndex: number) {\n    if (newTimePointIndex < 0 || newTimePointIndex >= this.numTimePoints) {\n      throw new Error(`Invalid timePointIndex (${newTimePointIndex})`);\n    }\n\n    // Nothing to do when time point index does not change\n    if (this._timePointIndex === newTimePointIndex) {\n      return;\n    }\n\n    const { imageData } = this;\n\n    this._timePointIndex = newTimePointIndex;\n    imageData.getPointData().setActiveScalars(`timePoint-${newTimePointIndex}`);\n    this.invalidateVolume(true);\n\n    triggerEvent(\n      eventTarget,\n      StreamingEvents.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n      {\n        volumeId: this.volumeId,\n        timePointIndex: newTimePointIndex,\n        numTimePoints: this.numTimePoints,\n        splittingTag: this.splittingTag,\n      }\n    );\n  }\n\n  /**\n   * Returns the splitting tag used to split the imageIds in 4D volume\n   */\n  public get splittingTag(): string {\n    return this._splittingTag;\n  }\n\n  /**\n   * Returns the number of time points\n   * @returns number of time points\n   */\n  public get numTimePoints(): number {\n    return this._numTimePoints;\n  }\n\n  /**\n   * Return the active scalar data (buffer)\n   * @returns volume scalar data\n   */\n  public getScalarData(): Types.PixelDataTypedArray {\n    return (<Types.PixelDataTypedArray[]>this.scalarData)[this._timePointIndex];\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not execute the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests = (priority: number) => {\n    return this._getTimePointsRequests(priority);\n  };\n}\n","import { getVolumeInfo, splitImageIdsBy4DTags } from './helpers';\nimport StreamingDynamicImageVolume from './StreamingDynamicImageVolume';\n\ninterface IVolumeLoader {\n  promise: Promise<StreamingDynamicImageVolume>;\n  cancel: () => void;\n  decache: () => void;\n}\n\nfunction get4DVolumeInfo(imageIds: string[]) {\n  const { imageIdsGroups, splittingTag } = splitImageIdsBy4DTags(imageIds);\n  return {\n    volumesInfo: imageIdsGroups.map((imageIds) => getVolumeInfo(imageIds)),\n    splittingTag,\n  };\n}\n\n/**\n * It handles loading of a image by streaming in its imageIds. It will be the\n * volume loader if the schema for the volumeID is `cornerstoneStreamingImageVolume`.\n * This function returns a promise that resolves to the StreamingDynamicImageVolume instance.\n *\n * In order to use the cornerstoneStreamingDynamicImageVolumeLoader you should use\n * createAndCacheVolume helper from the cornerstone-core volumeLoader module.\n *\n * @param volumeId - The ID of the volume\n * @param options - options for loading, imageIds\n * @returns a promise that resolves to a StreamingDynamicImageVolume\n */\nfunction cornerstoneStreamingDynamicImageVolumeLoader(\n  volumeId: string,\n  options: {\n    imageIds: string[];\n  }\n): IVolumeLoader {\n  if (!options || !options.imageIds || !options.imageIds.length) {\n    throw new Error(\n      'ImageIds must be provided to create a 4D streaming image volume'\n    );\n  }\n\n  const { imageIds } = options;\n  const { volumesInfo, splittingTag } = get4DVolumeInfo(imageIds);\n\n  const {\n    metadata: volumeMetadata,\n    dimensions,\n    spacing,\n    origin,\n    direction,\n    sizeInBytes,\n  } = volumesInfo[0];\n\n  const sortedImageIdsArrays = [];\n  const scalarDataArrays = [];\n\n  volumesInfo.forEach((volumeInfo) => {\n    sortedImageIdsArrays.push(volumeInfo.sortedImageIds);\n    scalarDataArrays.push(volumeInfo.scalarData);\n  });\n\n  const sortedImageIds = sortedImageIdsArrays.flat();\n  let streamingImageVolume = new StreamingDynamicImageVolume(\n    // ImageVolume properties\n    {\n      volumeId,\n      metadata: volumeMetadata,\n      dimensions,\n      spacing,\n      origin,\n      direction,\n      scalarData: scalarDataArrays,\n      sizeInBytes,\n      imageIds: sortedImageIds,\n      splittingTag,\n    },\n    // Streaming properties\n    {\n      imageIds: sortedImageIds,\n      loadStatus: {\n        // todo: loading and loaded should be on ImageVolume\n        loaded: false,\n        loading: false,\n        cancelled: false,\n        cachedFrames: [],\n        callbacks: [],\n      },\n    }\n  );\n\n  return {\n    promise: Promise.resolve(streamingImageVolume),\n    decache: () => {\n      streamingImageVolume.destroy();\n      streamingImageVolume = null;\n    },\n    cancel: () => {\n      streamingImageVolume.cancelLoading();\n    },\n  };\n}\n\nexport default cornerstoneStreamingDynamicImageVolumeLoader;\n","import cornerstoneStreamingImageVolumeLoader from './cornerstoneStreamingImageVolumeLoader';\nimport cornerstoneStreamingDynamicImageVolumeLoader from './cornerstoneStreamingDynamicImageVolumeLoader';\nimport StreamingImageVolume from './StreamingImageVolume';\nimport StreamingDynamicImageVolume from './StreamingDynamicImageVolume';\nimport getDynamicVolumeInfo from './helpers/getDynamicVolumeInfo';\nimport * as Enums from './enums';\n\nconst helpers = {\n  getDynamicVolumeInfo,\n};\n\nexport {\n  cornerstoneStreamingImageVolumeLoader,\n  cornerstoneStreamingDynamicImageVolumeLoader,\n  StreamingImageVolume,\n  StreamingDynamicImageVolume,\n  helpers,\n  Enums,\n};\n"],"names":["createUint8SharedArray","createFloat32SharedArray","utilities","groupBy","array","key","reduce","rv","x","push","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","Object","keys","i","length","frame_value_set","Set","frames","j","frame_value","imageId","add","size","Array","from","setEquals","getTagValue","tag","value","metaData","parseFloat","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","ArrayBuffer","dv","DataView","setUint8","charCodeAt","Float32Array","getSiemensPrivateBValue","getGEPrivateBValue","split","set_a","set_b","has","getPetFrameReferenceTime","moduleInfo","imageIds","positionGroups","ippMetadata","map","imagePositionPatient","every","item","frame_count","k","getIPPGroups","imageIdsGroups","splittingTag","tags","fncList2","Number","sort","a","b","timePoints","isDynamicVolume","volumeId","renderingEngineAndViewportIds","renderingEnginesArray","getRenderingEngines","renderingEngine","viewports","id","viewportIds","viewport","getRenderingEngineAndViewportsContainingVolume","forEach","hasBeenDestroyed","renderViewports","scaleArray","scalingParameters","arrayLength","rescaleSlope","rescaleIntercept","suvbw","modality","requestTypeDefault","Enums","Prefetch","ProgressiveIterator","imageRetrieveMetadataProvider","hasFloatScalingParameters","ImageQualityStatus","BaseStreamingImageVolume","ImageVolume","constructor","imageVolumeProperties","streamingProperties","super","framesLoaded","framesProcessed","framesUpdated","autoRenderOnLoad","cachedFrames","reRenderTarget","reRenderFraction","imagesLoader","this","cancelLoading","loadStatus","loading","cancelled","clearLoadCallbacks","imageLoadPoolManager","filterRequests","additionalDetails","load","callback","numFrames","transferSyntaxUID","imageRetrieveConfiguration","IMAGE_RETRIEVE_CONFIGURATION","create","ProgressiveRetrieveImages","createProgressive","loaded","totalNumFrames","success","callbacks","_prefetchImageIds","invalidateVolume","immediate","imageData","vtkOpenGLTexture","setUpdatedFrame","modified","callLoadStatusCallback","evt","metadata","FrameOfReferenceUID","eventDetail","triggerEvent","eventTarget","IMAGE_VOLUME_LOADING_COMPLETED","updateTextureAndTriggerEvents","imageIdIndex","imageQualityStatus","FULL_RESOLUTION","frameIndex","imageIdIndexToFrameIndex","complete","imageVolume","numberOfFrames","IMAGE_VOLUME_MODIFIED","successCallback","image","getImageIdIndex","options","getLoaderImageOptions","scalarData","getScalarDataByImageIdIndex","buffer","offset","targetBuffer","pixelData","getPixelData","bytesInFloat","floatView","set","Int16Array","bytesInInt16","intView","Uint16Array","bytesInUint16","Uint8Array","bytesInUint8","e","console","error","handleArrayBufferLoad","preScale","cachedImage","cache","getCachedImageBasedOnImageURI","cachedVolume","getVolumeContainingImageId","warn","volume","isFromImageCache","imageCacheOffsetMap","cachedImageOrVolume","handleImageComingFromCache","errorCallback","permanent","IMAGE_LOAD_ERROR","imagePlaneModule","rows","columns","arrayBuffer","type","lengthInBytes","byteSize","Error","getScalarDataType","modalityLutModule","generalSeriesModule","suvFactor","_addScalingToVolume","isSlopeAndInterceptNumbers","floatAfterScale","allowFloatRendering","canRenderFloatTextures","isPreScaled","undefined","skipCreateImage","enabled","transferPixelData","loader","imageLoader","callLoadImage","as","bind","getImageIdsRequests","priorityDefault","requestType","priority","imageLoadObject","convertToCornerstoneImage","promise","then","imageScalarData","_scaleIfNecessary","pixelsPerImage","bytesPerImage","cornerstoneImageMetaData","TypedArray","byteOffset","bytePerPixel","BYTES_PER_ELEMENT","catch","err","getImageLoadRequests","_priority","getImageIdsToLoad","loadImages","listener","reverse","request","addRequest","Promise","resolve","debug","scalingParametersToUse","slice","imageIsAlreadyScaled","scaled","noScalingParametersToUse","rescaleSlopeToUse","rescaleInterceptToUse","suvbwToUse","rescaleSlopeUsed","rescaleInterceptUsed","suvbwUsed","newSuvbw","newRescaleSlope","newRescaleIntercept","scaling","suvlbm","suvbsa","petScaling","suvbwToSuvlbm","suvbwToSuvbsa","PT","StreamingImageVolume","getScalarData","streamingImageVolumePromise","async","middleImageIndex","lastImageIndex","Math","floor","indexesToPrefetch","all","index","reject","log","dimensions","spacing","origin","direction","sizeInBytes","getStreamingImageVolume","decache","streamingImageVolume","destroy","cancel","Events","StreamingDynamicImageVolume","_ensureValidData","_timePointIndex","_getTimePointRequests","timePoint","_getTimePointsRequests","_getTimePointsToLoad","timePointsRequests","timePointRequests","concat","_numTimePoints","_timePoints","_getTimePointsData","_splittingTag","scalarDataArrays","numTimePoints","start","end","initialTimePointIndex","timePointsToLoad","leftIndex","rightIndex","timePointIds","timePointIndex","newTimePointIndex","getPointData","setActiveScalars","DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED","get4DVolumeInfo","volumesInfo","volumeMetadata","BitsAllocated","PixelRepresentation","PhotometricInterpretation","ImageOrientationPatient","PixelSpacing","Columns","Rows","rowCosineVec","colCosineVec","scanAxisNormal","zSpacing","sortedImageIds","signed","numComponents","isCacheable","CACHE_SIZE_EXCEEDED","decacheIfNecessaryUntilBytesAvailable","getVolumeInfo","sortedImageIdsArrays","volumeInfo","flat","helpers","getDynamicVolumeInfo"],"sourceRoot":""}