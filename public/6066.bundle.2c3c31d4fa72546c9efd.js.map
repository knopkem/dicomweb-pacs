{"version":3,"file":"6066.bundle.2c3c31d4fa72546c9efd.js","mappings":"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AAG,EAAG,GACV,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,K,0EC7PnB,MAAM2F,EAAmB,mBAwBzB,SAASC,EAAWC,EAAYC,GAC5B,GAAK7kF,EAAA,GAAM8kF,aAAaF,GAGxB,OAAI5kF,EAAA,GAAM8kF,aAAaF,GAAYC,GACxB7kF,EAAA,GAAM8kF,aAAaF,GAAYC,GAAUE,YADpD,CAGJ,CACA,SAASC,EAAWC,EAAiBL,EAAYM,EAASL,GACtD,IAAK7kF,EAAA,GAAM8kF,aAAaF,GACpB,OAAO,KAEX5kF,EAAA,GAAM8kF,aAAaF,GAAYC,GAAY,CACvCM,SAAS,EACTJ,OAAQG,GAEZD,EAAgBh/E,YAAYi/E,EAChC,CACA,SAASE,EAAeR,EAAYC,GAC3B7kF,EAAA,GAAM8kF,aAAaF,IAGpB5kF,EAAA,GAAM8kF,aAAaF,GAAYC,KAC/B7kF,EAAA,GAAM8kF,aAAaF,GAAYC,GAAUM,SAAU,EAE3D,CACA,SAASE,EAAeJ,EAAiBL,GAChC5kF,EAAA,GAAM8kF,aAAaF,IAGxB/sG,OAAO4B,KAAKumB,EAAA,GAAM8kF,aAAaF,IAAa1rG,SAAS2rG,IACjD,MAAMS,EAAatlF,EAAA,GAAM8kF,aAAaF,GAAYC,IAC7CS,EAAWH,SAAWG,EAAWP,SAClCE,EAAgB10C,YAAY+0C,EAAWP,eAChC/kF,EAAA,GAAM8kF,aAAaF,GAAYC,GAC1C,GAER,CACA,QA7DA,SAA6Bv/E,GACzB,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,IACnC,WAAED,EAAU,kBAAEhB,GAAsB9wB,EACpCqxG,EAAa,GAAGv/E,KAAchB,IAC9B4gF,EAaV,SAAsB3/E,GAClB,MAAMgrC,EAAkB,IAAIo0C,IACtBa,EAAqBjgF,EAAQyqC,cAAcO,GAC3Cyb,EAAWw5B,GAAoBx1C,cAAc,uBACnD,OAAOgc,CACX,CAlB4By5B,CAAalgF,GAIrC,OAHAztB,OAAO4B,KAAKumB,EAAA,GAAM8kF,aAAaF,IAAa1rG,SAAS2rG,IACjD7kF,EAAA,GAAM8kF,aAAaF,GAAYC,GAAUM,SAAU,CAAK,IAErD,CACHF,gBAAiBA,EACjBQ,sBAAuBzlF,EAAA,GAAM8kF,aAC7BH,WAAYA,EAAWl8F,KAAKxQ,KAAM2sG,GAClCI,WAAYA,EAAWv8F,KAAKxQ,KAAMgtG,EAAiBL,GACnDQ,eAAgBA,EAAe38F,KAAKxQ,KAAM2sG,GAC1CS,eAAgBA,EAAe58F,KAAKxQ,KAAMgtG,EAAiBL,GAEnE,ECbA,QALA,SAAct/E,EAASogF,GACnB,MAAM3rD,EAAmB,EAAoBz0B,GAC7CogF,EAAG3rD,GACHA,EAAiBsrD,gBACrB,C,qFCoCA,QAtCA,SAAoBtrD,EAAkBd,EAAeiR,EAAWr7C,EAAQosB,EAAQ5+B,EAAU,CAAC,EAAGm+C,EAAS,IACnG,MAAM,MAAEnmD,EAAK,KAAE0V,EAAI,MAAElV,EAAK,UAAEwlD,EAAS,SAAEC,EAAQ,YAAEqmB,EAAW,cAAEglC,GAAmB9tG,OAAO48D,OAAO,CAC3FpgE,MAAO,iBACP0V,KAAM,cACNlV,MAAO,IACPylD,cAAUrkD,EACVokD,eAAWpkD,EACX0vG,cAAe,EACfhlC,YAAa,GACdtkE,GACGupG,EAAcvrD,GAAaxlD,EAE3BgxG,GAAc,OAAS5sD,EAAe,SAAUiR,GAChD47C,EAAwB/rD,EAAiB4qD,WAAWkB,GACpDE,EAAa,CACf1qE,GAAI,GAAGxsB,EAAO,KACdysB,GAAI,GAAGzsB,EAAO,KACdI,EAAG,GAAGgsB,IACN+qE,OAAQ3xG,EACR0V,OACA,eAAgB67F,EAChB,mBAAoBtrD,EACpB,eAAgBqmB,EAChB,iBAAkBglC,GAEtB,GAAIG,GACA,OAAyBC,EAAYD,GACrC/rD,EAAiBqrD,eAAeS,OAE/B,CACD,MAAMI,EAAmB1gF,SAAS2gF,gBAnBxB,6BAmB+C,UAC1C,KAAX1rD,GACAyrD,EAAiB9/E,aAAa,UAAWq0B,IAE7C,OAAwBurD,EAAYE,GACpClsD,EAAiBirD,WAAWiB,EAAkBJ,EAClD,CACJ,C,qFCKA,QA1CA,SAAkC9rD,EAAkBd,EAAey5B,EAAYt4B,EAAmB/9C,EAAU,CAAC,EAAGm+C,EAAS,IACrH,MAAM,MAAEnmD,EAAK,MAAEQ,EAAK,UAAEwlD,EAAS,SAAEC,GAAaziD,OAAO48D,OAAO,CACxDpgE,MAAO,iBACPQ,MAAO,IACPwlD,eAAWpkD,EACXqkD,cAAUrkD,GACXoG,GACGupG,EAAcvrD,GAAaxlD,EAE3BgxG,GAAc,OAAS5sD,EAAe,UAAWy5B,GACjDyzB,EAAkBpsD,EAAiB4qD,WAAWkB,IAC7CrhC,EAAQ53D,EAAKiuC,EAAMmoB,GAAS5oB,EAC7BgsD,EAAIlxG,KAAKmxG,MAAMxrD,EAAK,GAAKmoB,EAAM,GAAInoB,EAAK,GAAKmoB,EAAM,IACnDsjC,EAAIpxG,KAAKmxG,MAAMz5F,EAAI,GAAK43D,EAAO,GAAI53D,EAAI,GAAK43D,EAAO,IACnDzvE,EAA8D,IAArDG,KAAKqxG,MAAM1rD,EAAK,GAAKmoB,EAAM,GAAInoB,EAAK,GAAKmoB,EAAM,IAAa9tE,KAAKC,GAC1E0Z,EAAS,EAAEgsC,EAAK,GAAKmoB,EAAM,IAAM,GAAIp2D,EAAI,GAAK43D,EAAO,IAAM,GAG3DuhC,EAAa,CACf1qE,GAAI,GAAGxsB,EAAO,KACdysB,GAAI,GAAGzsB,EAAO,KACd23F,GAAI,GALQJ,EAAI,IAMhBK,GAAI,GALQH,EAAI,IAMhBN,OAAQ3xG,EACR0V,KAAM,cACNrV,UAAW,UAAUK,KAAS8Z,EAAO,MAAMA,EAAO,MAClD,eAAgB+2F,EAChB,mBAAoBtrD,GAExB,GAAI6rD,GACA,OAAyBJ,EAAYI,GACrCpsD,EAAiBqrD,eAAeS,OAE/B,CACD,MAAMa,EAAoBnhF,SAAS2gF,gBA1BzB,6BA0BgD,WAC3C,KAAX1rD,GACAksD,EAAkBvgF,aAAa,UAAWq0B,IAE9C,OAAwBurD,EAAYW,GACpC3sD,EAAiBirD,WAAW0B,EAAmBb,EACnD,CACJ,C,+DCtCA,QALA,SAAqB9rD,EAAkBd,EAAe6a,EAAgBuqB,EAAchiF,EAAU,CAAC,GAC3FgiF,EAAanlF,SAAQ,CAAC85D,EAAQrxD,MAC1B,OAAWo4C,EAAkBd,EAAe6a,EAAgBd,EAAQ32D,EAASsF,EAAE,GAEvF,C,oFCoBA,QAvBA,SAAkBo4C,EAAkBd,EAAe0tD,EAASC,EAAwBC,EAAUx4B,EAAahyE,EAAU,CAAC,GAClH,MAAM1I,EAAQizG,EAAuB/tG,OAAS,GACxC,EAAAiuG,EAAA,GAAiBF,EAAwBC,GACzCA,EACAE,EASV,SAA4B14B,GACxB,MAAQ94E,EAAGslD,EAAMplD,EAAGmX,EAAG,OAAE9X,EAAM,MAAED,GAAUw5E,EACrC24B,EAAYnyG,EAAQ,EACpBoyG,EAAanyG,EAAS,EAK5B,MAAO,CAJW,CAAC+lD,EAAOmsD,EAAWp6F,GAClB,CAACiuC,EAAMjuC,EAAMq6F,GACX,CAACpsD,EAAOmsD,EAAWp6F,EAAM9X,GAC1B,CAAC+lD,EAAOhmD,EAAO+X,EAAMq6F,GAE7C,CAlB8BC,CAAmB74B,GACvCpkE,GAAM,EAAA68F,EAAA,GAAiBC,EAAmBpzG,GAC1Cq1F,EAAgBnxF,OAAO48D,OAAO,CAChCpgE,MAAO,mBACPgmD,UAAW,IACXC,SAAU,OACXj+C,IACH,EAAA4sD,EAAA,GAASlP,EAAkBd,EAAe,QAAQ0tD,IAAWhzG,EAAOsW,EAAK++E,EAC7E,ECAA,QAZA,SAA2BjvC,EAAkBd,EAAe4zB,EAAYoB,EAAWG,EAAiBw4B,EAAwBtkC,EAASjmE,EAAU,CAAC,GAC5I,MAAM2sF,EAAgBnxF,OAAO48D,OAAO,CAChC/T,aAAc,IACdymD,UAAW,CACP5xG,GAAG,EACHE,GAAG,IAER4G,GACG+qG,GAAoB,EAAArgC,EAAA,GAAYhtB,EAAkBd,EAAe4zB,EAAYoB,EAAWG,EAAiB4a,GAE/G,OADA,EAASjvC,EAAkBd,EAAe4zB,EAAY+5B,EAAwBx4B,EAAiBg5B,EAAmBpe,GAC3Goe,CACX,C,wECXe,SAAS1sD,EAASX,EAAkBd,EAAewB,EAAc9mD,EAAOsW,EAAK5N,EAAU,CAAC,EAAGm+C,EAAS,IAC/G,MAAMgiB,EAAU,CAAC7oE,EAAM,GAAIA,EAAM,IAC3B6zB,EAAW,CAACvd,EAAI,GAAItW,EAAM,IAC1B8zB,EAAa,CAAC9zB,EAAM,GAAIsW,EAAI,IAC5BwyD,EAAc,CAACxyD,EAAI,GAAIA,EAAI,KACjC,OAAsB8vC,EAAkBd,EAAewB,EAAc,CAAC+hB,EAASh1C,EAAUC,EAAYg1C,GAAcpgE,EAASm+C,EAChI,C,8aCPe,SAAS40B,EAAWr1B,EAAkBd,EAAek2B,EAAWx7E,EAAOsW,EAAK5N,EAAU,CAAC,GAClG,GAAIoY,MAAM9gB,EAAM,KAAO8gB,MAAM9gB,EAAM,KAAO8gB,MAAMxK,EAAI,KAAOwK,MAAMxK,EAAI,IACjE,OAEJ,MAAM,MAAE5V,EAAK,MAAEQ,EAAK,UAAEwlD,EAAS,SAAEC,GAAaziD,OAAO48D,OAAO,CACxDpgE,MAAO,iBACPQ,MAAO,IACPwlD,eAAWpkD,EACXqkD,cAAUrkD,GACXoG,GACGgrG,EAAOp9F,EAAI,IAAMtW,EAAM,GAAKsW,EAAI,IAAM,EACtCq9F,EAAe,CAACD,EAAM1zG,EAAM,IAC5B4zG,EAAgB,CAACF,EAAMp9F,EAAI,IAC3Bi4E,EAAY,CACdvuF,MAAOA,EACPsW,IAAKq9F,GAEHnlB,EAAa,CACfxuF,MAAO2zG,EACPr9F,IAAKs9F,GAEHC,EAAY,CACd7zG,MAAO4zG,EACPt9F,IAAKA,IAET,EAAAg/C,EAAA,GAASlP,EAAkBd,EAAe,IAAKipC,EAAUvuF,MAAOuuF,EAAUj4E,IAAK,CAC3E5V,QACAQ,QACAwlD,YACAC,cAEJ,EAAA2O,EAAA,GAASlP,EAAkBd,EAAe,IAAKkpC,EAAWxuF,MAAOwuF,EAAWl4E,IAAK,CAC7E5V,QACAQ,QACAwlD,YACAC,cAEJ,EAAA2O,EAAA,GAASlP,EAAkBd,EAAe,IAAKuuD,EAAU7zG,MAAO6zG,EAAUv9F,IAAK,CAC3E5V,QACAQ,QACAwlD,YACAC,YAER,C,qEC3CA,MAAMmtD,EAAQ,6BACC,SAAS5mB,EAAU9mC,EAAkBd,EAAe2nC,EAAUjtF,EAAOsW,EAAK5N,EAAU,CAAC,GAChG,GAAIoY,MAAM9gB,EAAM,KAAO8gB,MAAM9gB,EAAM,KAAO8gB,MAAMxK,EAAI,KAAOwK,MAAMxK,EAAI,IACjE,OAEJ,MAAM,UAAE62E,GAAY,EAAK,MAAEzsF,EAAQ,iBAAgB,WAAEssF,EAAa,IAAQtkF,EAC1E,IAAKykF,EAED,YAiCR,SAAyB/mC,EAAkBd,EAAe2nC,EAAUjtF,EAAOsW,EAAK5N,EAAU,CAAC,GACvF,MAAM,MAAEhI,EAAQ,iBAAgB,MAAEQ,EAAQ,EAAC,UAAEwlD,EAAS,SAAEC,GAAaj+C,EAC/DqrG,EAAa,GACb3yG,EAAQG,KAAKqxG,MAAMt8F,EAAI,GAAKtW,EAAM,GAAIsW,EAAI,GAAKtW,EAAM,IACrDuuF,EAAY,CACdvuF,MAAO,CACHsW,EAAI,GAAKy9F,EAAaxyG,KAAKggF,IAAIngF,EAAQG,KAAKC,GAAK,GACjD8U,EAAI,GAAKy9F,EAAaxyG,KAAKigF,IAAIpgF,EAAQG,KAAKC,GAAK,IAErD8U,IAAKA,GAEHk4E,EAAa,CACfxuF,MAAO,CACHsW,EAAI,GAAKy9F,EAAaxyG,KAAKggF,IAAIngF,EAAQG,KAAKC,GAAK,GACjD8U,EAAI,GAAKy9F,EAAaxyG,KAAKigF,IAAIpgF,EAAQG,KAAKC,GAAK,IAErD8U,IAAKA,IAET,EAAAg/C,EAAA,GAASlP,EAAkBd,EAAe2nC,EAAUjtF,EAAOsW,EAAK,CAC5D5V,QACAQ,QACAwlD,YACAC,cAEJ,EAAA2O,EAAA,GAASlP,EAAkBd,EAAe,IAAKipC,EAAUvuF,MAAOuuF,EAAUj4E,IAAK,CAC3E5V,QACAQ,QACAwlD,YACAC,cAEJ,EAAA2O,EAAA,GAASlP,EAAkBd,EAAe,IAAKkpC,EAAWxuF,MAAOwuF,EAAWl4E,IAAK,CAC7E5V,QACAQ,QACAwlD,YACAC,YAER,CAtEQqtD,CAAgB5tD,EAAkBd,EAAe2nC,EAAUjtF,EAAOsW,EAAK5N,GAG3E,MAEMurG,EAAe,GADA,SAAS3uD,OADdc,EAAiBkrD,gBAAgB3jG,KAG3CumG,EAAO9tD,EAAiBkrD,gBAAgBl1C,cAAc,QAC5D,IAAI+3C,EAAcD,EAAK93C,cAAc,IAAI63C,KACzC,GAAKE,EAeA,CACDA,EAAY3hF,aAAa,cAAe,GAAGw6D,KAC3CmnB,EAAY3hF,aAAa,eAAgB,GAAGw6D,KAC5C,MAAMonB,EAAYD,EAAY/3C,cAAc,QACxCg4C,GACAA,EAAU5hF,aAAa,OAAQ9xB,EAEvC,KAtBkB,CACdyzG,EAAcviF,SAAS2gF,gBAAgBuB,EAAO,UAC9CK,EAAY3hF,aAAa,KAAMyhF,GAC/BE,EAAY3hF,aAAa,UAAW,aACpC2hF,EAAY3hF,aAAa,OAAQ,KACjC2hF,EAAY3hF,aAAa,OAAQ,KACjC2hF,EAAY3hF,aAAa,cAAe,GAAGw6D,KAC3CmnB,EAAY3hF,aAAa,eAAgB,GAAGw6D,KAC5CmnB,EAAY3hF,aAAa,SAAU,QACnC,MAAM4hF,EAAYxiF,SAAS2gF,gBAAgBuB,EAAO,QAClDM,EAAU5hF,aAAa,IAAK,yBAC5B4hF,EAAU5hF,aAAa,OAAQ9xB,GAC/ByzG,EAAY7hF,YAAY8hF,GACxBF,EAAK5hF,YAAY6hF,EACrB,CASAzrG,EAAQ2rG,YAAcJ,GACtB,EAAA3+C,EAAA,GAASlP,EAAkBd,EAAe2nC,EAAUjtF,EAAOsW,EAAK5N,EACpE,C,qCCtCe,SAAS6+F,EAAkBnhD,EAAkBd,EAAewB,EAAc9mD,EAAOsW,EAAK5N,EAAU,CAAC,GAC5G,MAAM,MAAEhI,EAAOQ,MAAOozG,EAAM,UAAE5tD,EAAS,SAAEC,GAAcziD,OAAO48D,OAAO,CACjEpgE,MAAO,iBACPQ,MAAO,IACPwlD,eAAWpkD,EACXqkD,cAAUrkD,GACXoG,GACGupG,EAAcvrD,GAAa4tD,EAE3BpC,GAAc,EAAAqC,EAAA,GAASjvD,EAAe,OAAQwB,GAC9C0tD,EAAepuD,EAAiB4qD,WAAWkB,GAC3CrwG,EAAO,CAACN,KAAKa,IAAIpC,EAAM,GAAIsW,EAAI,IAAK/U,KAAKa,IAAIpC,EAAM,GAAIsW,EAAI,KAC3DpV,EAAQK,KAAK6e,IAAIpgB,EAAM,GAAKsW,EAAI,IAChCnV,EAASI,KAAK6e,IAAIpgB,EAAM,GAAKsW,EAAI,IACjC87F,EAAa,CACfxwG,EAAG,GAAGC,EAAK,KACXC,EAAG,GAAGD,EAAK,KACXX,MAAO,GAAGA,IACVC,OAAQ,GAAGA,IACXkxG,OAAQ3xG,EACR0V,KAAM,QACN,eAAgB67F,EAChB,mBAAoBtrD,GAExB,GAAI6tD,GACA,OAA0BpC,EAAYoC,GACtCpuD,EAAiBqrD,eAAeS,OAE/B,CACD,MAAMuC,EAAiB7iF,SAAS2gF,gBArBtB,6BAqB6C,SACvD,OAAyBH,EAAYqC,GACrCruD,EAAiBirD,WAAWoD,EAAgBvC,EAChD,CACJ,C,+BCpCA,IAAIr9D,E,iBACJ,SAAWA,GACPA,EAAyB,YAAI,cAC7BA,EAA4B,eAAI,iBAChCA,EAA0B,aAAI,eAC9BA,EAA0B,aAAI,eAC9BA,EAAuB,UAAI,YAC3BA,EAAkC,qBAAI,uBACtCA,EAAqB,QAAI,UACzBA,EAAuC,0BAAI,4BAC3CA,EAAyB,YAAI,aAChC,CAVD,CAUGA,IAAgBA,EAAc,CAAC,IAClC,S,+BCZA,IAAI6/D,E,iBACJ,SAAWA,GACPA,EAAU,GAAI,KACdA,EAAY,KAAI,OAChBA,EAAY,KAAI,OAChBA,EAAa,MAAI,OACpB,CALD,CAKGA,IAAUA,EAAQ,CAAC,G,4KCMtB,MAAMC,EAAgC,wCAiDtC,SAASC,EAAoC7/B,EAAUv0E,GACnD,MAAMq0G,EAAY9/B,EAAS7vE,OACrBsoG,EAAoB,IAAIxqG,MAAM6xG,GACpC,IAAK,IAAI7mG,EAAI,EAAGA,EAAI6mG,EAAW7mG,IAC3Bw/F,EAAkBx/F,GAAKxN,EAASilD,cAAcsvB,EAAS/mE,IAE3D,OAAOw/F,CACX,CA2BO,SAASsH,EAAmBt0G,EAAUu0G,EAAkBC,GAC3D,MAAQC,iBAAkBluB,GAA2BguB,EAAiBvjG,KAAKmiC,SACnEshE,iBAAkBC,GAAyBF,EAAexjG,KAAKmiC,SACvE,IAAAwhE,oBAAmBJ,EAAkBC,IACrC,IAAAI,qCAAoCJ,GACpC,MAAQrhE,QAAS0hE,GAAgBL,EAAexjG,KAC1C8jG,EAAeV,EAAoCS,EAAYtgC,SAAUv0E,IAC/E,OAAsBw0G,EAAgB,CAClCjiG,OAAQuiG,EACR//D,OAAQ8/D,EAAY9/D,QACrB/0C,GACH,MAAM,QAAEmxB,GAAYnxB,EACd+0G,EAAmB,IAAIl4E,IAAI,CAC7Bs3E,EACAI,EAAiBvpG,SAAS+yC,SAC1By2D,EAAexpG,SAAS+yC,WAE5B,IAAK,MAAMA,KAAYg3D,EAAiBt2F,SAAU,CAC9C,MAAM2lC,GAAsB,IAAAC,gCAA+BlzB,EAAS4sB,IACpE,OAAsCqG,EAC1C,CACJ,C,2NCxFkC,IAAI9uC,I,sMCjBtC,MAAM0/F,EAAY,CACd,CAAC,IAAgBjvC,UAAW,KAC5B,CAAC,IAAgB++B,SAAU,IAC3B,CAAC,IAAgBE,SAAU,MAEzBiQ,EAAwB,IAAsCl3D,SAiIpE,SAASm3D,EAA0BhkF,GAC/BikF,EAA4BC,+BAA+BlkF,EAC/D,CAIA,MAAMikF,EAA8B,IAtIpC,MACI,WAAA5xG,GACIO,KAAKuxG,aAAe,IAAIx4E,IACxB/4B,KAAKwxG,oBAAqB,EAC1BxxG,KAAKyxG,sBAAwB,KAC7BzxG,KAAK0xG,iBAAmB,KACI,IAAAvtC,uBACD3lD,SAAS7E,GAAoBA,EAAgB8Z,iBAExEzzB,KAAK2xG,4BAA8B,KAC/B3xG,KAAK4xG,oBACelzG,MAAM6D,KAAKvC,KAAKuxG,cACxBtwG,SAASmsB,IACjBptB,KAAK6xG,eAAezkF,EAAW,IAEnCptB,KAAKuxG,aAAaz9F,QAClB9T,KAAKwxG,oBAAqB,EAC1BxxG,KAAKyxG,sBAAwB,IAAI,CAEzC,CACA,8BAAAH,CAA+BlkF,GAC3B,MAAMvT,EAAcuT,EACd,CAACA,GACDptB,KAAK8xG,iCACX9xG,KAAK+xG,mCAAmCl4F,EAC5C,CACA,kBAAAm4F,CAAmBjwC,GACf,MAAMloD,EAAc7Z,KAAK8xG,+BAA+B/vC,GACxD/hE,KAAK+xG,mCAAmCl4F,EAC5C,CACA,8BAAAi4F,CAA+B/vC,GAC3B,MAAMnoD,EAAY5Z,KAAK0xG,mBACjB73F,EAAc,GACpB,IAAK,MAAM3d,KAAY0d,EAAW,CAC9B,MAAMwT,EAAalxB,EAASmN,GAC5B,GAAI04D,EAAgB,CAChB,MAAMkwC,GAA8B,QAA+B7kF,EAAY,CAAE20C,mBAC7EkwC,GAA6BrxG,OAAS,GACtCiZ,EAAYlR,KAAKykB,EAEzB,KACK,CACD,MAAM6kF,GAA8B,QAA+B7kF,GAC/D6kF,GAA6BrxG,OAAS,GACtCiZ,EAAYlR,KAAKykB,EAEzB,CACJ,CACA,OAAOvT,CACX,CACA,iBAAA+3F,GACI,GAAI5xG,KAAK+Z,iBACL,MAAM,IAAI3b,MAAM,uHAExB,CACA,kCAAA2zG,CAAmCl4F,GAC/BA,EAAY5Y,SAASmsB,IACjBptB,KAAKuxG,aAAajuG,IAAI8pB,EAAW,IAErCptB,KAAKkyG,SACT,CACA,OAAAA,GACQlyG,KAAKuxG,aAAa7oF,KAAO,IAAiC,IAA5B1oB,KAAKwxG,qBACnCxxG,KAAKyxG,sBAAwBhkF,OAAOmjE,sBAAsB5wF,KAAK2xG,6BAC/D3xG,KAAKwxG,oBAAqB,EAElC,CACA,cAAAK,CAAezkF,GACX,MAAM6kF,GAA8B,QAA+B7kF,GACnE,IAAK6kF,GAA6BrxG,OAC9B,OAEJ,MAAM,SAAE1E,IAAa,IAAA4hE,+BAA8B1wC,IAAe,CAAC,EACnE,IAAKlxB,EACD,OAEJ,MAAMi2G,EAAqB,GACrBC,EAAyBH,EAA4B5rG,KAAKgsG,IACxDA,EAAevrG,OAAS,EAAAk7D,4BAA4Bg/B,SACpDhhG,KAAKsyG,+BAA+Bp2G,GAExC,MAAM+7D,EAAUi5C,EAAUmB,EAAevrG,MACzC,IACI,MAAMsmB,EAAa6qC,EAAQh8D,OAAOC,EAAUm2G,GAC5CF,EAAmBxpG,KAAKykB,EAC5B,CACA,MAAOznB,GACHyK,QAAQzK,MAAMA,EAClB,CACA,OAAOd,QAAQC,QAAQ,CACnBi9D,eAAgBswC,EAAetwC,eAC/Bj7D,KAAMurG,EAAevrG,MACvB,IAENjC,QAAQ0tG,WAAWH,GAAwBrtG,MAAMkjG,IAC7C,MAAMuK,EAAsBvK,EACvBnzF,QAAQkC,GAAmB,cAAbA,EAAEy7F,SAChBpsG,KAAK2Q,GAAMA,EAAE/W,QAeF/D,EAASmxB,QACjB1E,iBAAiB,EAAA+kB,MAAA,OAAa9d,gBAftC,SAAS8iF,EAAqBj5D,GAC1B,MAAM,QAAEpsB,EAAO,WAAED,GAAeqsB,EAAIjnB,OACpCnF,EAAQrE,oBAAoB,EAAA0kB,MAAA,OAAa9d,eAAgB8iF,GACzDF,EAAoBvxG,SAASuxB,IACzB,MAAMvD,EAAc,CAChB7B,aACA20C,eAAgBvvC,EAAOuvC,eACvBj7D,KAAM0rB,EAAO1rB,OAEjB,IAAA44B,cAAa,EAAArN,YAAa,SAAcsgF,sBAAuB,IACxD1jF,GACL,GAEV,IAGA/yB,EAASD,QAAQ,GAEzB,CACA,8BAAAq2G,CAA+Bp2G,GACrBi1G,KAAyB,KAAMhjB,QACjC,QAAQ,KAEZ,MAAMD,GAAY,IAAAzmC,yBAAwBvrD,EAASmN,IAC9C6kF,EAAU0kB,QAAQzB,KACnBjjB,EAAU2kB,QAAQ1B,GAClBjjB,EAAUvtB,eAAewwC,GAEjC,E,oJCxIJ,MAAM2B,EAAsB,CACxBC,SAAU,GACVC,cAAe,GACfC,2BAA4B,CAAC,GAsdjC/5E,eAAeg6E,GAAuC,SAAE9sG,EAAQ,QAAEhC,IAC9D,MAAM+uG,EAAuB/sG,EACvB0E,EAAW1G,GAAS0G,UAAY,qBAEtC,aADM,EAAAsoG,aAAA,+BAA4CtoG,EAAUqoG,GACrD,CAAEroG,WACb,CACAouB,eAAem6E,GAAqC,eAAEtxC,EAAc,QAAE39D,IAClE,MAAMkrF,EAAegkB,EAAgC/e,gBAAgBxyB,GAC/D70D,EAAOoiF,EAAagF,mBACrBryB,UACC,SAAEn3D,SAAmBooG,EAAuC,CAC9D9sG,SAAU8G,EAAK9G,SACfhC,YAEJkrF,EAAagF,mBAAmBryB,SAASn3D,SAAWA,CACxD,CACA,SAASyoG,EAA0BzsG,GAC/B,MAAMgQ,EAAO,mBACPa,EAAO,mBAEb,OADAA,EAAKI,SAAS,EAAG,GACbjR,IAAS,EAAAk7D,4BAA4BC,SAC9B,CACHnrD,OACAa,QAIG,CAAC,CAEhB,CACA,MAAM27F,EAAkC,IAlfzB,MACX,WAAA7zG,CAAYuhB,GACRhhB,KAAKwzG,kCAAoC,IAAIhiG,IAC7CxR,KAAKyzG,6BAA+B,IAAIjiG,IACxCwP,IAAQ,qBACRhhB,KAAK+nB,MAAQnoB,OAAO8zG,OAAO,sBAAkBZ,IAC7C9yG,KAAKghB,IAAMA,CACf,CACA,QAAA2yF,GACI,OAAO3zG,KAAK+nB,KAChB,CACA,WAAA6rF,CAAYC,GACR,MAAMC,EAAW,sBAAkB9zG,KAAK+nB,OACxC8rF,EAAQC,GACR9zG,KAAK+nB,MAAQnoB,OAAO8zG,OAAOI,EAC/B,CACA,WAAAC,CAAYC,GACR,OAAOh0G,KAAK+nB,MAAMgrF,SAASiB,EAC/B,CACA,oBAAAC,GACI,OAAOj0G,KAAK+nB,MAAMgrF,SAASnyG,MAC/B,CACA,UAAAszG,GACIl0G,KAAKwzG,kCAAkC1/F,QACvC9T,KAAKyzG,6BAA6B3/F,QAClC9T,KAAK+nB,MAAQnoB,OAAO8zG,OAAO,sBAAkBZ,GACjD,CACA,eAAAve,CAAgBxyB,GACZ,OAAO/hE,KAAK+nB,MAAMirF,cAAct1F,MAAM4xE,GAAiBA,EAAavtB,iBAAmBA,GAC3F,CACA,kBAAAoyC,CAAmBpyC,EAAgBn6C,GAC/B5nB,KAAK4zG,aAAaQ,IACd,MAAM9kB,EAAe8kB,EAAWpB,cAAct1F,MAAM4xE,GAAiBA,EAAavtB,iBAAmBA,IAChGutB,EAIL1vF,OAAO48D,OAAO8yB,EAAc1nE,GAHxBxX,QAAQC,KAAK,wBAAwB0xD,+BAGL,KAExC,IAAAq/B,6BAA4Br/B,EAChC,CACA,eAAAsyC,CAAgB/kB,GACZ,GAAItvF,KAAKu0F,gBAAgBjF,EAAavtB,gBAClC,MAAM,IAAI3jE,MAAM,wBAAwBkxF,EAAavtB,iCAEzD/hE,KAAK4zG,aAAa7rF,IACd,MAAMusF,EAAkB,sBAAkBhlB,GAC1C,GAAIglB,EAAgBhgB,mBAAmBryB,UACnC,aAAcqyC,EAAgBhgB,mBAAmBryB,YAC/C,aAAcqyC,EAAgBhgB,mBAAmBryB,UAAW,CAC9D,MAAM77D,EAAWpG,KAAKu0G,oBAAoBD,EAAgBhgB,oBAC1DggB,EAAgBhgB,mBACXryB,SAAS77D,SAAWA,CAC7B,CACA2hB,EAAMirF,cAAcrqG,KAAK2rG,EAAgB,KAE7C,OAAyBhlB,EAAavtB,eAC1C,CACA,kBAAAyyC,CAAmBzyC,GACf/hE,KAAK4zG,aAAa7rF,IACd,MAAM0sF,EAAwB1sF,EAAMirF,cAAcl+F,QAAQw6E,GAAiBA,EAAavtB,iBAAmBA,IAC3Gh6C,EAAMirF,cAAc//F,OAAO,EAAG8U,EAAMirF,cAAcpyG,UAAW6zG,EAAsB,KAEvF,IAAAC,4BAA2B3yC,EAC/B,CACA,6BAAA4yC,CAA8BvnF,EAAY20C,EAAgBj7D,EAAM8tG,GAE5D,KADuB,IAAA92C,+BAA8B1wC,GAEjD,OAE4BptB,KAAK60G,+BAA+BznF,EAAY,CAC5EtmB,KAAMA,EACNi7D,mBAEwBnhE,OAAS,EACjCwP,QAAQqM,MAAM,wCAAyC3V,EAAM,6BAA8BsmB,EAAY,mBAAoB20C,IAG/H/hE,KAAK4zG,aAAa7rF,IACTA,EAAMkrF,2BAA2B7lF,KAClCrF,EAAMkrF,2BAA2B7lF,GAAc,GAC/C,IAAkB0nF,+BAA+B1nF,GAAY,IAE7DtmB,IAAS,EAAAk7D,4BAA4BC,SACrCjiE,KAAK+0G,qCAAqChtF,EAAOqF,EAAY20C,EAAgBj7D,EAAM8tG,GAGnF50G,KAAKg1G,0BAA0BjtF,EAAOqF,EAAY20C,EAAgB6yC,EACtE,KAEJ,IAAAK,2CAA0C7nF,EAAY20C,EAAgBj7D,GAC1E,CACA,oCAAAiuG,CAAqChtF,EAAOqF,EAAY20C,EAAgBj7D,EAAM8tG,GAC1E,MAAMtlB,EAAevnE,EAAMirF,cAAct1F,MAAM4xE,GAAiBA,EAAavtB,iBAAmBA,IAChG,IAAKutB,EACD,OAEJ,MAAM4lB,EAAc,CAAC,EACrBt1G,OAAO4B,KAAK8tF,EAAagT,UAAUrhG,SAAS6uF,IACxColB,EAAYlpG,OAAO8jF,IAAiB,CAChCjwB,SAAS,EACZ,IAEL93C,EAAMkrF,2BAA2B7lF,GAAYzkB,KAAK,CAC9Co5D,iBACAj7D,OACAk8F,QAAQ,EACRnjC,SAAS,EACTs1C,cAAeP,GAAiBO,eAAiB,EACjD7S,SAAU4S,EACVt7C,OAAQ,IACD25C,EAA0BzsG,MAC1B8tG,KAGX50G,KAAKo1G,uBAAuBrtF,EAAOqF,EAAY20C,EACnD,CACA,yBAAAizC,CAA0BjtF,EAAOqF,EAAY20C,EAAgB6yC,EAAkBrB,EAA0B,EAAAvxC,4BAA4BC,WAEjI,KADuB,IAAAnE,+BAA8B1wC,GAEjD,OAEJ,MAAMkiE,EAAetvF,KAAKu0F,gBAAgBxyB,GAC1C,IAAKutB,EACD,OAEJ,MAAM,mBAAEgF,GAAuBhF,EAC/B,IAAKgF,EAAmBryB,SACpB,OAAOjiE,KAAK+0G,qCAAqChtF,EAAOqF,EAAY20C,EAAgB,EAAAC,4BAA4BC,SAAU2yC,GAE9H50G,KAAKq1G,sCAAsCjoF,EAAY20C,GACvD/hE,KAAK+0G,qCAAqChtF,EAAOqF,EAAY20C,EAAgB,EAAAC,4BAA4BC,SAAU2yC,EACvH,CACA,2CAAMS,CAAsCjoF,EAAY20C,GACpD,MAAMzmE,GAAiB,IAAAwiE,+BAA8B1wC,GACrD,IAAK9xB,EACD,OAEJ,MAAMg0F,EAAetvF,KAAKu0F,gBAAgBxyB,GAC1C,IAAKutB,EACD,OAEJ,MAAMx1D,EAAiBx+B,EAAeY,oBAAoB,EAAAuoD,oBACpD,mBAAE6vC,GAAuBhF,EACzBgmB,EAA2B,aAAchhB,EAAmBryB,SACjD3mE,EAAeY,SAC3B49B,GAAmBw7E,GACnBt1G,KAAKu1G,0CAA0CnoF,EAAYkiE,EAAavtB,eAEjF,CACA,qCAAAyzC,CAAsCzzC,EAAgB7lE,EAAUu5G,EAAkBC,GAC9E,MAAMC,EAAmBz5G,EAASujC,oBAClC,IAAIm2E,GAA+B,EACnC,IAAK,MAAMC,KAAmBJ,EAAkB,CACpBv5G,EAAS45G,oBAAoB,CAAEvvG,kBAAmBsvG,GAAmB,CAAEE,WAAW,MAEtGH,GAA+B,EAC/B51G,KAAKwzG,kCACApzG,IAAI2hE,GACJ7hE,IAAIy1G,EAAkBE,GAC3B71G,KAAKg2G,mCAAmC,CACpCj0C,iBACA4zC,mBACAE,oBAGZ,CAIA,OAHIH,GACAA,EAAex5G,EAAU6lE,EAAgB0zC,GAEtCG,EACD51G,KAAKwzG,kCACFpzG,IAAI2hE,GACJ3hE,IAAIu1G,QACP33G,CACV,CACA,yCAAAu3G,CAA0CnoF,EAAY20C,GAClD,MAAMutB,EAAetvF,KAAKu0F,gBAAgBxyB,GAC1C,IAAKutB,EACD,OAECtvF,KAAKwzG,kCAAkCnwG,IAAI0+D,IAC5C/hE,KAAKwzG,kCAAkCtzG,IAAI6hE,EAAgB,IAAIvwD,KAEnE,MAAM,mBAAE8iF,GAAuBhF,EAC/B,IAAKgF,EAAmBryB,SACpB,OAEJ,MAAMwzC,EAAmBz1G,KAAKu0G,oBAAoBjgB,GAE5Cj6D,GADiB,IAAAyjC,+BAA8B1wC,GAChBlxB,SACrC,OAAO8D,KAAKw1G,sCAAsCzzC,EAAgB1nC,EAAeo7E,EAAkB,KACvG,CACA,6CAAAQ,CAA8C7oF,EAAY20C,GACtD,MAAMutB,EAAetvF,KAAKu0F,gBAAgBxyB,GAC1C,IAAKutB,EACD,OAECtvF,KAAKwzG,kCAAkCnwG,IAAI0+D,IAC5C/hE,KAAKwzG,kCAAkCtzG,IAAI6hE,EAAgB,IAAIvwD,KAEnE,MAAM,mBAAE8iF,GAAuBhF,EAC/B,IAAKgF,EAAmBryB,SACpB,OAEJ,MAAMwzC,EAAmBz1G,KAAKu0G,oBAAoBjgB,GAE5Cj6D,GADiB,IAAAyjC,+BAA8B1wC,GAChBlxB,SACrC8D,KAAKw1G,sCAAsCzzC,EAAgB1nC,EAAeo7E,GAAkB,CAACp7E,EAAe0nC,EAAgB0zC,KACvGp7E,EAAcxG,cACtB5yB,SAAQ,CAAC00G,EAAkBntG,KAChC,IAAK,MAAMqtG,KAAmBJ,EAAkB,CACpBp7E,EAAcy7E,oBAAoB,CAAEvvG,kBAAmBsvG,EAAiBlK,WAAYnjG,GAAS,CAAEutG,WAAW,EAAMG,gBAAgB,MAEpJl2G,KAAKwzG,kCACApzG,IAAI2hE,GACJ7hE,IAAIy1G,EAAkBE,GAC3B71G,KAAKg2G,mCAAmC,CACpCj0C,iBACA4zC,mBACAE,oBAGZ,IACF,GAEV,CACA,mBAAAtB,CAAoBjgB,GAChB,MAAM9B,EAAe8B,EAAmBryB,SACxC,IAAIwzC,EACJ,GAAIjjB,EAAapsF,SACbqvG,EAAmBjjB,EACdpsF,cAEJ,IAAKqvG,GACNjjB,EAAa1nF,SAAU,CACvB,MAAMA,EAAW0nF,EACZ1nF,SAEL2qG,EADe,EAAAjkF,MAAM7M,UAAU7Z,GACL1E,QAC9B,CACA,OAAOqvG,CACX,CACA,6BAAAU,CAA8BhyG,EAAS49D,GACnC,MAAM5hE,EAAMH,KAAKo2G,gBAAgB,CAC7Br0C,iBACA4zC,iBAAkBxxG,IAEtB,OAAOnE,KAAKyzG,6BAA6BrzG,IAAID,EACjD,CACA,qCAAAk2G,CAAsCjpF,EAAY20C,GAC9C,MAAMzmE,GAAiB,IAAAwiE,+BAA8B1wC,GACrD,IAAK9xB,EACD,OAEJ,MACMq6G,EADgBr6G,EAAeY,SACEujC,oBACvC,OAAOz/B,KAAKm2G,8BAA8BR,EAAkB5zC,EAChE,CACA,oCAAA0yB,CAAqCrnE,EAAY20C,GAC7C,MAAMzmE,GAAiB,IAAAwiE,+BAA8B1wC,GACrD,IAAK9xB,EACD,OAEJ,IAAK0E,KAAKwzG,kCAAkCnwG,IAAI0+D,GAC5C,OAEJ,MACMviC,EADgBlkC,EAAeY,SACAujC,oBAErC,OAD4Bz/B,KAAKwzG,kCAAkCpzG,IAAI2hE,GAC5C3hE,IAAIo/B,EACnC,CACA,uCAAA82E,CAAwClpF,EAAY20C,GAEhD,IADqB/hE,KAAKu0F,gBAAgBxyB,GAEtC,MAAO,GAEX/hE,KAAKi2G,8CAA8C7oF,EAAY20C,GAC/D,MAAM,SAAE7lE,IAAa,IAAA4hE,+BAA8B1wC,GAC7ChnB,EAAWlK,EAAS23B,cACpB0iF,EAA8Cv2G,KAAKwzG,kCAAkCpzG,IAAI2hE,GAC/F,OAAO37D,EAASC,KAAKlC,GACVoyG,EAA4Cn2G,IAAI+D,IAE/D,CACA,yCAAAqyG,CAA0CppF,EAAYqpF,GAClD,MAAMC,EAAyB,GAwC/B,OAvCA12G,KAAK4zG,aAAa7rF,IACd,IAAKA,EAAMkrF,2BAA2B7lF,GAClC,OAEJ,MAAMupF,EAAyB5uF,EAAMkrF,2BAA2B7lF,GAChE,IAAIwpF,GAA8B,EAClC,IAAKH,GACD72G,OAAO+a,OAAO87F,GAAWhqF,OAAOxsB,QAAoBjC,IAAViC,IAC1Cy2G,EAAuB/tG,QAAQguG,UACxB5uF,EAAMkrF,2BAA2B7lF,OAEvC,CACD,MAAM,eAAE20C,EAAc,KAAEj7D,GAAS2vG,EACjC1uF,EAAMkrF,2BAA2B7lF,GAC7BupF,EAAuB7hG,QAAQu9F,IAC3B,MAAMwE,EAAgB90C,GAClBj7D,GACAurG,EAAetwC,iBAAmBA,GAClCswC,EAAevrG,OAASA,GACvBi7D,IACIj7D,GACDurG,EAAetwC,iBAAmBA,IACpCA,GAAkBj7D,GAAQurG,EAAevrG,OAASA,EAOxD,OANI+vG,IACAH,EAAuB/tG,KAAK0pG,GACxBA,EAAerP,SACf4T,GAA8B,KAG9BC,CAAY,IAEgC,IAAxD9uF,EAAMkrF,2BAA2B7lF,GAAYxsB,cACtCmnB,EAAMkrF,2BAA2B7lF,GAEnCwpF,IACL7uF,EAAMkrF,2BAA2B7lF,GAAY,GAAG41E,QAAS,EAEjE,KAEG0T,CACX,CACA,iCAAAI,CAAkC1pF,EAAYqpF,GAC1C,MAAMC,EAAyB12G,KAAKw2G,0CAA0CppF,EAAYqpF,GAC1FC,EAAuBz1G,SAASoxG,KAC5B,IAAA0E,0CAAyC3pF,EAAYilF,EAAetwC,eAAgBswC,EAAevrG,KAAK,IAE5G,MAAMkwG,EAA2Bh3G,KAAK60G,+BAA+BznF,GAKrE,OAJI4pF,EAAyBp2G,OAAS,GAClCo2G,EAAyB,GAAGhU,SAC5B,IAAAiS,2CAA0C7nF,EAAY4pF,EAAyB,GAAGj1C,eAAgBi1C,EAAyB,GAAGlwG,MAE3H4vG,CACX,CACA,gCAAAO,CAAiC7pF,EAAYqpF,EAAWS,GACpD,MAAMR,EAAyB12G,KAAKw2G,0CAA0CppF,EAAYqpF,GAM1F,OALKS,GACDR,EAAuBz1G,SAAQ,EAAG8gE,iBAAgBj7D,YAC9C,IAAAiwG,0CAAyC3pF,EAAY20C,EAAgBj7D,EAAK,IAG3E4vG,CACX,CACA,kCAAAV,EAAmC,eAAEj0C,EAAc,iBAAE4zC,EAAgB,gBAAEE,IACnE,MAAM11G,EAAMH,KAAKo2G,gBAAgB,CAAEr0C,iBAAgB4zC,qBACnD,IAAK31G,KAAKyzG,6BAA6BpwG,IAAIlD,GAEvC,YADAH,KAAKyzG,6BAA6BvzG,IAAIC,EAAK,CAAC01G,IAGhD,MAAMsB,EAAgBn3G,KAAKyzG,6BAA6BrzG,IAAID,GACtDi3G,EAAY14G,MAAM6D,KAAK,IAAIw2B,IAAI,IAAIo+E,EAAetB,KACxD71G,KAAKyzG,6BAA6BvzG,IAAIC,EAAKi3G,EAC/C,CACA,sBAAAhC,CAAuBrtF,EAAOqF,EAAY20C,GACtC,MAAM7lE,EAAW6rB,EAAMkrF,2BAA2B7lF,GAC7ClxB,GAGLA,EAAS+E,SAAShB,IACdA,EAAM+iG,OAAS/iG,EAAM8hE,iBAAmBA,CAAc,GAE9D,CACA,qBAAAs1C,CAAsBjqF,EAAY20C,GAC9B/hE,KAAK4zG,aAAa7rF,IACd,MAAM7rB,EAAW6rB,EAAMkrF,2BAA2B7lF,GAC7ClxB,GAGLA,EAAS+E,SAAShB,IACdA,EAAM+iG,OAAS/iG,EAAM8hE,iBAAmBA,CAAc,GACxD,KAEN,IAAAkzC,2CAA0C7nF,EAAY20C,EAC1D,CACA,qBAAA4+B,CAAsBvzE,GAClB,IAAKptB,KAAK+nB,MAAMkrF,2BAA2B7lF,GACvC,OAEJ,MAAMkqF,EAAet3G,KAAK+nB,MAAMkrF,2BAA2B7lF,GAAY1P,MAAM65F,GAAWA,EAAOvU,SAC/F,OAAKsU,EAGEt3G,KAAKu0F,gBAAgB+iB,EAAav1C,qBAHzC,CAIJ,CACA,8BAAA8yC,CAA+BznF,EAAYqpF,EAAY,CAAC,GACpD,MAAMe,EAA0Bx3G,KAAK+nB,MAAMkrF,2BAA2B7lF,GACtE,OAAKoqF,EAGAf,EAAU3vG,MAAS2vG,EAAU10C,eAG3By1C,EAAwB1iG,QAAQu9F,IACnC,MAAMoF,GAAYhB,EAAU3vG,MACtBurG,EAAevrG,OAAS2vG,EAAU3vG,KAElC4wG,GAAUjB,EAAU10C,gBACpBswC,EAAetwC,iBAAmB00C,EAAU10C,eAElD,OAAO01C,GAAaC,CAAO,IATpBF,EAHA,EAcf,CACA,6BAAAG,CAA8BvqF,EAAYqpF,GACtC,OAAOz2G,KAAK60G,+BAA+BznF,EAAYqpF,GAAW,EACtE,CACA,uCAAAmB,CAAwCxqF,EAAYqpF,GAChD,MAAMoB,EAAyB73G,KAAK23G,8BAA8BvqF,EAAYqpF,GAC9E,OAAOoB,GAAwBh4C,OACnC,CACA,uCAAAi4C,CAAwC1qF,EAAYqpF,EAAW52C,GAC3D7/D,KAAK4zG,aAAa7rF,IACd,MAAMyvF,EAA0Bx3G,KAAK60G,+BAA+BznF,EAAYqpF,GAC3Ee,GAGLA,EAAwBv2G,SAASoxG,IAC7BA,EAAexyC,QAAUA,EACzBjgE,OAAOupB,QAAQkpF,EAAe/P,UAAUrhG,SAAQ,EAAE6uF,EAAc7gD,MAC5DA,EAAQ4wB,QAAUA,CAAO,GAC3B,GACJ,KAEN,IAAAo1C,2CAA0C7nF,EAAYqpF,EAAU10C,eAAgB00C,EAAU3vG,KAC9F,CACA,WAAAixG,CAAYhF,EAAUiB,GAClBh0G,KAAK4zG,aAAa7rF,IACVA,EAAMgrF,SAASiB,IACf5jG,QAAQC,KAAK,+CAEjB0X,EAAMgrF,SAASiB,GAAY,sBAAkBjB,EAAS,GAE9D,CACA,cAAAiF,CAAe7C,GACXn1G,KAAK4zG,aAAa7rF,WACPA,EAAMgrF,SAASoC,EAAc,GAE5C,CACA,sBAAA8C,CAAuB7xG,GACnB,OAAOA,EACFC,KAAKlC,GAAYA,EAAQzD,OAAOzD,KAAKmkB,MAAuB,IAAjBjd,EAAQvD,WACnDgrB,KAAK,IACd,CACA,yCAAAssF,GACI,OAAOt4G,OAAOupB,QAAQnpB,KAAK+nB,MAAMkrF,4BAA4B5sG,KAAI,EAAE+mB,EAAY+qF,MAAqB,CAChG/qF,aACA+qF,qBAER,CACA,8CAAAC,CAA+Cr2C,GAC3C,MAAMnmC,EAAS,GAOf,OANAh8B,OAAOupB,QAAQnpB,KAAK+nB,MAAMkrF,4BAA4BhyG,SAAQ,EAAEmsB,EAAYirF,MACxE,MAAMC,EAAeD,EAAavjG,QAAQu9F,GAAmBA,EAAetwC,iBAAmBA,IAC3Fu2C,EAAa13G,OAAS,GACtBg7B,EAAOjzB,KAAK,CAAEykB,aAAY+qF,gBAAiBG,GAC/C,IAEG18E,CACX,CACA,eAAAw6E,EAAgB,eAAEr0C,EAAc,iBAAE4zC,IAC9B,MAAO,GAAG5zC,KAAkB4zC,GAChC,GAgCiE,U,gGCjSrE,MAAM4C,EAAoB,IAzN1B,MACI,WAAA94G,GACIO,KAAK45D,OAAS,CACV4+C,OAAQ,CAAC,EACTxF,cAAe,CAAC,EAChByF,eAAgB,CAAC,EAEzB,CACA,QAAAC,CAASjC,EAAWkC,GAChB,MAAM,WAAEvrF,EAAU,eAAE20C,EAAc,KAAEj7D,EAAI,aAAEgpF,GAAiB2mB,EACrDmC,EAAgB54G,KAAK07D,SAAS+6C,GACpC,IAAIoC,EAaJ,GALIA,EAPCzrF,GAAe20C,EAOA/hE,KAAK84G,kCAAkC,IAChDF,KACAD,GACJ7xG,GATa,IACT8xG,KACAD,IASN7xG,EACD,MAAM,IAAI1I,MAAM,mCAEpB,GAAIgvB,EAAY,CACPptB,KAAK45D,OAAO6+C,eAAerrF,KAC5BptB,KAAK45D,OAAO6+C,eAAerrF,GAAc,CACrC2rF,6BAA6B,EAC7BZ,gBAAiB,CAAC,IAG1B,MAAMA,EAAkBn4G,KAAK45D,OAAO6+C,eAAerrF,GAAY+qF,gBAC/D,GAAIp2C,EAAgB,CACXo2C,EAAgBp2C,KACjBo2C,EAAgBp2C,GAAkB,CAAC,GAElCo2C,EAAgBp2C,GAAgBj7D,KACjCqxG,EAAgBp2C,GAAgBj7D,GAAQ,CAAC,GAE7C,MAAMkyG,EAAYb,EAAgBp2C,GAAgBj7D,QAC7B9I,IAAjB8xF,GACKkpB,EAAUC,aACXD,EAAUC,WAAa,CAAC,GAE5BD,EAAUC,WAAWnpB,GAAgB+oB,GAGrCG,EAAUE,YAAcL,CAEhC,KACK,CACD,MAAMM,EAAwB,uBACzBhB,EAAgBgB,KACjBhB,EAAgBgB,GAAyB,CAAC,GAEzChB,EAAgBgB,GAAuBryG,KACxCqxG,EAAgBgB,GAAuBryG,GAAQ,CAAC,GAEpDqxG,EAAgBgB,GAAuBryG,GAAMoyG,YACzCL,CACR,CACJ,MACK,GAAI92C,EAAgB,CAChB/hE,KAAK45D,OAAOo5C,cAAcjxC,KAC3B/hE,KAAK45D,OAAOo5C,cAAcjxC,GAAkB,CAAC,GAE5C/hE,KAAK45D,OAAOo5C,cAAcjxC,GAAgBj7D,KAC3C9G,KAAK45D,OAAOo5C,cAAcjxC,GAAgBj7D,GAAQ,CAAC,GAEvD,MAAMsyG,EAAYp5G,KAAK45D,OAAOo5C,cAAcjxC,GAAgBj7D,QACvC9I,IAAjB8xF,GACKspB,EAAUH,aACXG,EAAUH,WAAa,CAAC,GAE5BG,EAAUH,WAAWnpB,GAAgB+oB,GAGrCO,EAAUF,YAAcL,CAEhC,MAEI74G,KAAK45D,OAAO4+C,OAAO1xG,GAAQ+xG,CAEnC,CACA,iCAAAC,CAAkCH,EAAQ7xG,GACtC,MAAMuyG,EAAkB,IAAKV,GAC7B,GAAI7xG,IAAS,8BAAkCm7D,SAAU,CACrD,MAAMq3C,EAAiBD,EACvBC,EAAeC,wBAA0BD,EAAeE,cACxDF,EAAeG,uBAAyBH,EAAeI,aACvDJ,EAAeK,qBAAuBL,EAAeM,WACrDN,EAAeO,oBAAsBP,EAAeQ,UACpDR,EAAeS,yBAA2BT,EAAeU,cAC7D,MACK,GAAIlzG,IAAS,8BAAkCk6F,QAAS,CACzD,MAAMiZ,EAAgBZ,EACtBY,EAAcR,uBAAyBQ,EAAcP,aACrDO,EAAcF,yBAA2BE,EAAcD,eACvDC,EAAcC,sBAAwBD,EAAcE,YACpDF,EAAcV,wBAA0BU,EAAcT,cACtDS,EAAcN,qBAAuBM,EAAcL,WACnDK,EAAcJ,oBAAsBI,EAAcH,SACtD,CACA,OAAOT,CACX,CACA,QAAA39C,CAAS+6C,GACL,MAAM,WAAErpF,EAAU,eAAE20C,EAAc,KAAEj7D,EAAI,aAAEgpF,GAAiB2mB,EAC3D,IAAI2D,EAAgBp6G,KAAKq6G,gBAAgBvzG,GACrCiyG,GAA8B,EAoBlC,GAnBI/4G,KAAK45D,OAAO4+C,OAAO1xG,KACnBszG,EAAgB,IACTA,KACAp6G,KAAK45D,OAAO4+C,OAAO1xG,KAG1B9G,KAAK45D,OAAOo5C,cAAcjxC,KAAkBj7D,KAC5CszG,EAAgB,IACTA,KACAp6G,KAAK45D,OAAOo5C,cAAcjxC,GAAgBj7D,GAAMoyG,kBAElCl7G,IAAjB8xF,GACA9vF,KAAK45D,OAAOo5C,cAAcjxC,GAAgBj7D,GAAMmyG,aAAanpB,KAC7DsqB,EAAgB,IACTA,KACAp6G,KAAK45D,OAAOo5C,cAAcjxC,GAAgBj7D,GAAMmyG,WAAWnpB,MAItE1iE,GAAcptB,KAAK45D,OAAO6+C,eAAerrF,GAAa,CACtD2rF,EACI/4G,KAAK45D,OAAO6+C,eAAerrF,GAAY2rF,4BAC3C,MAAMuB,EAAsB,uBACxBt6G,KAAK45D,OAAO6+C,eAAerrF,GAAY+qF,gBAAgBmC,KAAuBxzG,KAC9EszG,EAAgB,IACTA,KACAp6G,KAAK45D,OAAO6+C,eAAerrF,GAAY+qF,gBAAgBmC,GAAqBxzG,GAAMoyG,cAGzFn3C,GACA/hE,KAAK45D,OAAO6+C,eAAerrF,GAAY+qF,gBAAgBp2C,KAAkBj7D,KACzEszG,EAAgB,IACTA,KACAp6G,KAAK45D,OAAO6+C,eAAerrF,GAAY+qF,gBAAgBp2C,GAAgBj7D,GAAMoyG,kBAE/Dl7G,IAAjB8xF,GACA9vF,KAAK45D,OAAO6+C,eAAerrF,GAAY+qF,gBAAgBp2C,GAAgBj7D,GAAMmyG,aAAanpB,KAC1FsqB,EAAgB,IACTA,KACAp6G,KAAK45D,OAAO6+C,eAAerrF,GAAY+qF,gBAAgBp2C,GAAgBj7D,GAAMmyG,WAAWnpB,KAI3G,CACA,OAAOsqB,CACX,CACA,8BAAAG,CAA+BntF,GAC3B,OAAOptB,KAAK45D,OAAO6+C,eAAerrF,IAAa2rF,2BACnD,CACA,8BAAAjE,CAA+B1nF,EAAY2rF,GAClC/4G,KAAK45D,OAAO6+C,eAAerrF,KAC5BptB,KAAK45D,OAAO6+C,eAAerrF,GAAc,CACrC2rF,6BAA6B,EAC7BZ,gBAAiB,CAAC,IAG1Bn4G,KAAK45D,OAAO6+C,eAAerrF,GAAY2rF,4BACnCA,CACR,CACA,eAAAsB,CAAgBvzG,GACZ,OAAQA,GACJ,KAAK,8BAAkCm7D,SACnC,OAAO,SACX,KAAK,8BAAkC++B,QACnC,OAAO,SACX,KAAK,8BAAkCE,QACnC,MAAO,CAAC,EACZ,QACI,MAAM,IAAI9iG,MAAM,gCAAgC0I,KAE5D,CACA,sBAAA0zG,CAAuBz4C,GACf/hE,KAAK45D,OAAOo5C,cAAcjxC,WACnB/hE,KAAK45D,OAAOo5C,cAAcjxC,EAEzC,CACA,0BAAA04C,GACIz6G,KAAK45D,OAAOo5C,cAAgB,CAAC,CACjC,CACA,kBAAA0H,CAAmBttF,GACXptB,KAAK45D,OAAO6+C,eAAerrF,WACpBptB,KAAK45D,OAAO6+C,eAAerrF,EAE1C,CACA,sBAAAutF,GACI,IAAK,MAAMvtF,KAAcptB,KAAK45D,OAAO6+C,eAAgB,CACjD,MACMM,EADgB/4G,KAAK45D,OAAO6+C,eAAerrF,GACC2rF,4BAClD/4G,KAAK45D,OAAO6+C,eAAerrF,GAAc,CACrC2rF,8BACAZ,gBAAiB,CAAC,EAE1B,CACJ,CACA,kBAAAyC,GACI56G,KAAKy6G,6BACLz6G,KAAK26G,wBACT,CACA,cAAAE,CAAepE,GACX,MAAM,KAAE3vG,GAAS2vG,EACX7oF,EAAQ5tB,KAAK07D,SAAS+6C,GACtBva,EAAel8F,KAAKq6G,gBAAgBvzG,GAC1C,OAAQ,EAAAgnC,UAAA,UAAoBlgB,EAAOsuE,EACvC,E,iICzNJ,SAAS,EAAsB9uE,GAC3B,OAAO,OAAuBA,EAClC,CACA,SAAS,EAAsBA,EAAY20C,ICJpC,SAA+B30C,EAAY20C,GACb,KACRs1C,sBAAsBjqF,EAAY20C,EAC/D,CDEI,CAAuB30C,EAAY20C,EACvC,C,+FEHO,SAASg2C,EAAYhF,EAAUvqG,GAClC,MAAMsyG,EAA2B,KAC3BC,EAAavyG,IAAS,SAC5B,IAAIwyG,EAAgB,IAAIjI,GAWxB,GAVK,EAAAjlE,UAAA,QAAkBktE,EAAc,GAAI,CAAC,EAAG,EAAG,EAAG,MAC/C5qG,QAAQC,KAAK,uHACb2qG,EAAgB,CAAC,CAAC,EAAG,EAAG,EAAG,MAAOA,IAEtCA,EAAgBA,EAAc30G,KAAKjK,GACV,IAAjBA,EAAMwE,OACC,CAACxE,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAI,KAEnCA,IAEP4+G,EAAcp6G,OAAS,IAAK,CAC5B,MAAMq6G,EAAmB,IAAsBv6G,MAAMs6G,EAAcp6G,QACnEo6G,EAAgB,IAAIA,KAAkBC,EAC1C,CAEA,OADAH,EAAyB/C,YAAYiD,EAAeD,GAC7CA,CACX,C,yECtBO,SAASj5C,EAA+B10C,EAAY8tF,GACvDA,EAAuB70G,KAAK80G,IACjB,OAAsC/tF,EAAY+tF,IAEjE,C,gGCgEA,QApEA,SAAoCA,GAChC,MAAM,eAAEp5C,EAAc,eAAEswC,EAAc,OAAEz4C,GAAWuhD,GAC7C,KAAEr0G,EAAMoG,KAAMkuG,GAAc/I,EAC5BnlG,EAAOkuG,EAAY,IAAKA,GAAc,CAAC,EAC7C,IAAKluG,EACD,MAAM,IAAI9O,MAAM,yDAmBxB,IAA8Bi9G,EAjBtBv0G,IAAS,EAAAk7D,4BAA4Bg/B,WAiBfqa,EAhBDnuG,GAiBbouG,YAAcD,EAAYC,aAAe,GACrDD,EAAYE,kBAAoBF,EAAYE,mBAAqB,IAAI/pG,KAhBrE,MAAMgqG,EAkBV,SAA2BC,EAAgB30G,EAAMoG,GAC7C,MAAMsuG,EAAqB,CAAC,EACxBC,EACA77G,OAAOupB,QAAQsyF,GAAgBx6G,SAAQ,EAAE6uF,EAAc7gD,MACnDusE,EAAmB1rB,GAAgB,CAC/BA,aAAc9jF,OAAO8jF,GACrBj+D,MAAOod,EAAQpd,OAAS,WAAWi+D,IACnC9N,OAAQ/yC,EAAQ+yC,SAAU,EAC1B3hC,YAAapR,EAAQoR,aAAe,CAAC,EACrC2iD,OAAQ/zD,EAAQ+zD,SAAU,EAC7B,IAGAl8F,IAAS,EAAAk7D,4BAA4Bk/B,QAQlD,SAAkCsa,EAAoBE,GAClD,MAAM,YAAEJ,GAAgBI,EACxBJ,GAAar6G,SAAS06G,IAClB,MAAMC,EAAW,EAAApqF,MAAMqqF,YAAYF,GACnC,GAAIC,GAAU1uG,KAAM,CAChB,MAAM,aAAE4iF,GAAiB8rB,EAAS1uG,KAClCsuG,EAAmB1rB,GAAgB,CAAEA,eACzC,IAER,CAhBQgsB,CAAyBN,EAAoBtuG,GAG7CsuG,EAAmB,GAehB,CACH1rB,aAAc,EACdj+D,MAAO,YACPmwD,QAAQ,EACR3hC,YAAa,CAAC,EACd2iD,QAAQ,GAlBZ,OAAOwY,CACX,CAtC+BO,CAAkBniD,GAAQ0oC,SAAUx7F,EAAMoG,GAErE,cADO0sD,GAAQ0oC,SACR,CACHvgC,iBACAlwC,MAAO+nC,GAAQ/nC,OAAS,KACxBwuB,YAAauZ,GAAQvZ,aAAe,CAAC,EACrCiiD,SAAUkZ,EACVlnB,mBAAoB,CAChB,CAACxtF,GAAO,IACDoG,IAInB,ECtBO,SAAS8uG,EAAiBd,EAAwBtsF,GACrD,MAAMksF,EAA2B,KACjCI,EAAuBj6G,SAASk6G,IAC5B,MAAM7rB,EAAe,EAA2B6rB,GAChDL,EAAyBzG,gBAAgB/kB,GACpC1gE,IACD,IAAAwyE,6BAA4B9R,EAAavtB,eAC7C,GAER,C,wLCRA,SAASg2C,EAAYhF,EAAUoC,GAC3B,IAAKpC,EACD,MAAM,IAAI30G,MAAM,qCAEpB,OAAO,OAAa20G,EAAUoC,EAClC,CACA,SAAS8G,EAAY7uF,EAAY20C,EAAgBm6C,GAC7C,KAAK,OAAaA,GACd,MAAM,IAAI99G,MAAM,mDAAmD89G,KAEvE,MAAMjK,GAA8B,QAA+B7kF,EAAY,CAAE20C,mBACjF,IAAKkwC,EACD,MAAM,IAAI7zG,MAAM,wCAAwCgvB,oBAE5D6kF,EAA4BhxG,SAASk7G,IACjCA,EAA2BhH,cAAgB+G,CAAc,KAE7D,IAAAjH,2CAA0C7nF,EAAY20C,EAC1D,CACA,SAASw/B,EAAqBn0E,EAAY20C,EAAgB+tB,GACtD,MAAMqoB,GAAkB,QAA+B/qF,EAAY,CAC/D20C,mBAEJ,IAAKo2C,GAA8C,IAA3BA,EAAgBv3G,OACpC,OAAO,KAEX,MAAMyxG,EAAiB8F,EAAgB,IACjC,cAAEhD,GAAkB9C,EACpBU,GAAW,OAAaoC,GAC9B,IAAIiH,EAAarJ,EAASjjB,GAC1B,IAAKssB,EAAY,CACb,GAA4B,iBAAjBtsB,EAEP,OADA1/E,QAAQC,KAAK,qCAAqCy/E,KAC3C,KAEXssB,EAAarJ,EAASjjB,GAAgB,CAAC,EAAG,EAAG,EAAG,EACpD,CACA,OAAOssB,CACX,CACA,SAASC,EAAqBjvF,EAAY20C,EAAgB+tB,EAAc1zF,GACpE,MAAMkgH,EAAiB/a,EAAqBn0E,EAAY20C,EAAgB+tB,GACxE,IAAK,IAAIpmF,EAAI,EAAGA,EAAItN,EAAMwE,OAAQ8I,IAC9B4yG,EAAe5yG,GAAKtN,EAAMsN,IAE9B,IAAAurG,2CAA0C7nF,EAAY20C,EAC1D,C,qFC9CO,SAASy3B,EAAgCz3B,EAAgBw6C,EAAqBzsB,GACjF,MAAM7gE,EAAc,CAChB8yC,iBACAw6C,sBACAzsB,iBAEJ,QAAqB/tB,IACrB,IAAAriC,cAAa,EAAArN,YAAa,EAAA1C,OAAO6sF,2BAA4BvtF,EACjE,C,+DCVO,SAAS0xE,EAAsBvzE,GAElC,OADiC,KACDuzE,sBAAsBvzE,EAC1D,C,+DCHO,SAAS6mF,IAEZ,OADiC,KACDA,sBACpC,C,kFCHO,SAASY,EAA+BznF,EAAYqpF,EAAY,CAAC,GAEpE,OADiC,KACD5B,+BAA+BznF,EAAYqpF,EAC/E,CACO,SAASkB,EAA8BvqF,EAAYqpF,GACtD,MAAMqE,EAA2B,KACjC,IAAKrE,EAAU10C,iBAAmB00C,EAAU3vG,KACxC,MAAM,IAAI1I,MAAM,+GAEpB,MAAM+5G,EAAkB2C,EAAyBjG,+BAA+BznF,EAAYqpF,GAC5F,OAAO0B,IAAkB,EAC7B,CACO,SAASC,EAA+Cr2C,GAE3D,OADiC,KACDq2C,+CAA+Cr2C,EACnF,C,+DCfO,SAAS61C,EAAwCxqF,EAAYqpF,GAEhE,OADiC,KACDmB,wCAAwCxqF,EAAYqpF,EACxF,C,+DCHO,SAASgG,IAGZ,OAFiC,KACM9I,WAC1BX,aACjB,C,kFCHO,SAAS0J,EAAyBtvF,EAAYtmB,GASjD,OARgC61G,EAAuCvvF,GACzB/mB,KAAKgsG,IAC3CvrG,GAAQurG,EAAevrG,MAChB,OAAgBurG,EAAetwC,mBAIFjtD,QAAQw6E,QAAkCtxF,IAAjBsxF,GAEzE,CACO,SAASqtB,EAAuCvvF,GAInD,OAHiC,KACMumF,WACDV,2BAA2B7lF,EAErE,C,qFCXO,SAASwvF,GAA6B,eAAE76C,EAAc,QAAE39D,IAC3D,MAAMkrF,GAAe,OAAgBvtB,GACrC,IAAKutB,EACD,OAEJ,MAAM,SAAExkF,GAAawkF,EAAagF,mBAC7BryB,SACC46C,EAAqB,EAAArrF,MAAM7M,UAAU7Z,GAC3C,OAAO,OAA6B,CAChCi3D,iBACA30C,WAAYhpB,EAAQgpB,WACpBhnB,SAAUy2G,EAAmBz2G,SAC7BhC,WAER,C,8DCpBO80B,eAAe4jF,EAA+BnV,GACjD,OAAO,QAAuCA,EAClD,C,2eCsBgC,IACE,IACF,G,0ECIhC,QA7BA,UAAuC,eAAE5lC,EAAc,KAAEj7D,EAAI,KAAEoG,IAC3D,MAAMoiF,GAAe,OAAgBvtB,GACrC,IAAKutB,EACD,MAAM,IAAIlxF,MAAM,gBAAgB2jE,eAKpC,OAHIutB,EAAagF,mBAAmBxtF,IAChCsJ,QAAQC,KAAK,+BAA+BvJ,qCAAwCi7D,sBAEhFj7D,GACJ,KAAK,IAA4Bm7D,SAMjC,KAAK,IAA4B++B,QAKjC,KAAK,IAA4BE,QACzBh0F,IACAoiF,EAAagF,mBAAmBxtF,GAAQoG,GAE5C,MACJ,QACI,MAAM,IAAI9O,MAAM,+BAA+B0I,KAE3D,C,qHCxBA,SAASi2G,EAAsC3vF,EAAY4vF,GACvD,MAAM,eAAEj7C,EAAc,OAAEnI,GAAWojD,EAC7BpI,EAAkB,CACpBO,cAAe8H,EAAiBrjD,MAC7BA,GAEP,KAAgC+6C,8BAA8BvnF,EAAY20C,EAAgBi7C,EAAoBl2G,KAAM8tG,GAChHoI,EAAoBl2G,OAAS,EAAAk7D,4BAA4Bg/B,UACzD,IAAAz4D,GAAsC,CAACnb,KAE3C,IAAAg0E,6BAA4Br/B,EAChC,CACA,SAASk7C,EAAiBrjD,GACtB,MAAM,gBAAEsjD,GAAoBtjD,GAAU,CAAC,EACvC,QAAwB57D,IAApBk/G,EAA+B,CAE/B,OADc,OAAYhhF,KAAKihF,MAAMjhF,KAAKC,UAAU,MAExD,CACA,GAA+B,iBAApB+gF,EACP,OAAOA,EAEX,GAAIx+G,MAAMC,QAAQu+G,IACdA,EAAgBzwF,OAAOtX,GAASzW,MAAMC,QAAQwW,IAAyB,IAAhBA,EAAKvU,SAAe,CAE3E,OADc,OAAYs8G,EAE9B,CAEA,OADc,OAAYhhF,KAAKihF,MAAMjhF,KAAKC,UAAU,MAExD,C,6FC/BO,SAASq4E,EAAmBzyC,GAC/B,MAAM+4C,EAA2B,KACCA,EAC7B5C,4CACApjG,QAAO,EAAGqjG,qBAAsBA,EAAgBhxF,MAAMi2F,GAAQA,EAAIr7C,iBAAmBA,MACrF17D,KAAI,EAAG+mB,gBAAiBA,IACHnsB,SAASmsB,KAC/B,QAAkCA,EAAY,CAAE20C,kBAAiB,IAErE+4C,EAAyBtG,mBAAmBzyC,IAC5C,IAAA2yC,4BAA2B3yC,EAC/B,CACO,SAASs7C,IACZ,MAAMvC,EAA2B,KACXA,EAAyBnH,WAAWX,cACpB3sG,KAAKipF,GAAiBA,EAAavtB,iBACzD9gE,SAAS8gE,IACrByyC,EAAmBzyC,EAAe,IAEtC+4C,EAAyB5G,YAC7B,C,6KChBA,SAAS+C,EAAiC7pF,EAAYqpF,EAAW6G,GAC7D,OAAOC,EAAmCnwF,EAAYqpF,EAAW6G,EACrE,CACA,SAASxG,EAAkC1pF,EAAYqpF,EAAW6G,GAC9D,OAAOC,EAAmCnwF,EAAYqpF,EAAW6G,EACrE,CACA,SAASC,EAAmCnwF,EAAYqpF,EAAW6G,GAC/D,MAAM,eAAEv7C,EAAc,KAAEj7D,GAAS2vG,EAEjC,OAmCJ,SAAqCrpF,EAAY20C,EAAgBj7D,EAAMw2G,GACnE,MAAMnF,GAAkB,EAAAR,EAAA,IAA+BvqF,EAAY,CAC/D20C,iBACAj7D,SAEJqxG,EAAgBl3G,SAASoxG,IACjBA,EAAevrG,OAASk7D,EAAA,EAA4BC,SACpDu7C,EAAA,wBAAqCpwF,EAAYilF,EAAetwC,eAAgBu7C,GAE3EjL,EAAevrG,OAASk7D,EAAA,EAA4Bg/B,QACzDyc,EAAA,EAAeC,qBAAqBtwF,EAAYilF,EAAetwC,eAAgBu7C,GAE1EjL,EAAevrG,OAASk7D,EAAA,EAA4Bk/B,SACzDyc,EAAA,GAAeD,qBAAqBtwF,EAAYilF,EAAetwC,eAAgBu7C,EACnF,IAEJ,MAAM,SAAEphH,IAAa,IAAA4hE,+BAA8B1wC,IAAe,CAAC,EAC/DlxB,GACAA,EAASD,QAEjB,CAxDI2hH,CAA4BxwF,EAAY20C,EAAgBj7D,EAAMw2G,GACvD,KAAgCxG,kCAAkC1pF,EAAY,CACjF20C,iBACAj7D,QAER,CACA,SAAS+2G,IACS,KAAgC3F,4CACxCj3G,SAAQ,EAAGmsB,aAAY+qF,sBACzBA,EAAgBl3G,SAAQ,EAAG8gE,iBAAgBj7D,WACvCmwG,EAAiC7pF,EAAY,CACzC20C,iBACAj7D,QACF,GACJ,IAEN,KAAgCotG,YACpC,CACA,SAAS4J,EAA6B1wF,EAAY20C,EAAgBu7C,GAC9DrG,EAAiC7pF,EAAY,CACzC20C,iBACAj7D,KAAMk7D,EAAA,EAA4BC,UACnCq7C,EACP,CACA,SAASS,EAA4B3wF,EAAY20C,EAAgBu7C,GAC7DrG,EAAiC7pF,EAAY,CACzC20C,iBACAj7D,KAAMk7D,EAAA,EAA4Bg/B,SACnCsc,EACP,CACA,SAASU,EAA4B5wF,EAAY20C,EAAgBu7C,GAC7DrG,EAAiC7pF,EAAY,CACzC20C,iBACAj7D,KAAMk7D,EAAA,EAA4Bk/B,SACnCoc,EACP,C,0LC3CA,SAASnc,EAAsBp/B,EAAgB+tB,GAC3C,MAAMR,GAAe,OAAgBvtB,GACT,iBAAjB+tB,IACP1/E,QAAQC,KAAK,kDACby/E,EAAe9jF,OAAO8jF,IAE1BlwF,OAAO+a,OAAO20E,EAAagT,UAAUrhG,SAASguC,IAC1CA,EAAQ+zD,QAAS,CAAK,IAErB1T,EAAagT,SAASxS,KACvBR,EAAagT,SAASxS,GAAgB,CAClCA,eACAj+D,MAAO,GACPmwD,QAAQ,EACR3hC,YAAa,CAAC,EACd2iD,QAAQ,KAGmC,IAA/C1T,EAAagT,SAASxS,GAAckT,SACpC1T,EAAagT,SAASxS,GAAckT,QAAS,GAC7C,IAAA5B,6BAA4Br/B,IAEhC,MAAMloD,GAAc,OAA+BkoD,GACnDloD,EAAY5Y,SAASmsB,KACO,QAA+BA,EAAY,CAC/D20C,mBAEY9gE,SAASoxG,IAChBA,EAAe/P,SAASxS,KACzBuiB,EAAe/P,SAASxS,GAAgB,CACpCjwB,SAAS,GAEjB,GACF,IAENhmD,EAAY5Y,SAASmsB,IACjB,MAAM8gE,GAAY,IAAAzmC,yBAAwBr6B,IAC1C,OAAsB8gE,EAAU7kF,GAAG,GAE3C,C,8JC5CA,SAAS40G,EAAqBl8C,EAAgB+tB,GAC1C,MAAMR,GAAe,OAAgBvtB,GACrC,IAAKutB,EACD,MAAM,IAAIlxF,MAAM,mCAAmC2jE,KAEvD,MAAM,SAAEugC,GAAahT,EACrB,OAAOgT,EAASxS,GAAc9N,MAClC,CACA,SAASk8B,EAAsBn8C,EAAgB+tB,EAAc9N,GAAS,GAClE,MAAMsN,GAAe,OAAgBvtB,GACrC,IAAKutB,EACD,MAAM,IAAIlxF,MAAM,mCAAmC2jE,KAEvD,MAAM,SAAEugC,GAAahT,EACrBgT,EAASxS,GAAc9N,OAASA,GAChC,IAAAof,6BAA4Br/B,EAChC,CACA,SAASo8C,EAAwBp8C,GAC7B,MAAMutB,GAAe,OAAgBvtB,GACrC,IAAKutB,EACD,MAAM,IAAIlxF,MAAM,mCAAmC2jE,KAEvD,MAAM,SAAEugC,GAAahT,EAErB,OAD6B1vF,OAAO4B,KAAK8gG,GAAUxtF,QAAQg7E,GAAiBwS,EAASxS,GAAc9N,SACvE37E,KAAKypF,GAAiBh0D,SAASg0D,IAC/D,C,ogCC1BO,SAASkoB,EAAe7C,GACM,KACR6C,eAAe7C,EAC5C,C,gDCHO,SAASmB,EAAwClpF,EAAY20C,GAEhE,OADiC,KACDu0C,wCAAwClpF,EAAY20C,EACxF,C,eCYA,SAASq8C,IACL,KAAgClK,YACpC,C,+DCjBO,SAASqB,EAA0CnoF,EAAY20C,GAElE,OADiC,KACDwzC,0CAA0CnoF,EAAY20C,EAC1F,C,0ECaA,QAfA,SAAiC30C,EAAYhB,GACpCA,IACDA,GAAoB,IAAA+3C,uBAAsBzmD,MAAM2gG,GAAOA,EAAG5qF,eAAe/V,MAAM8H,GAAOA,EAAGnc,KAAO+jB,OAAc/jB,IAElH,MAAMi1G,EAAyB,KAAM/7C,WAAWztD,QAAQypG,GAAOA,EAAGtjE,cAAc9zB,MAAM3B,GAAOA,EAAG4G,oBAAsBA,KAChH5G,EAAG4H,YAAc5H,EAAG4H,aAAeA,OACzC,GAAKkxF,EAAuB19G,OAA5B,CAGA,GAAI09G,EAAuB19G,OAAS,EAChC,MAAM,IAAIxC,MAAM,qDAAqDguB,qBAAqCgB,oFAG9G,OAAOkxF,EAAuB,EAL9B,CAMJ,C,gDChBA,IAAIzR,EAAe,CAAC,EAIpB,S,yOCaA,MAAM,sBAAE7qE,GAA0B,YAClC,MAAMs/D,UAA0B,YACnBthG,KAAKi6C,SAAW,eAAiB,CAC1C,WAAAx6C,CAAY45C,EAAY,CAAC,EAAGC,EAAmB,CAC3CC,0BAA2B,CAAC,QAAS,SACrC9sC,cAAe,CACXg9D,2BAA2B,EAC3B8L,aAAcC,KAGlB58B,MAAMS,EAAWC,GACjBt5C,KAAKyjD,gBAAkB,CAACp2B,EAAS+iB,EAAYmb,EAAcC,KACvD,MAAMlwD,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,GACf,KAAE4R,GAASkjC,GACX,OAAE3hC,GAAWvB,EAAKkzC,QACxB,IAAIs1B,EAAex5E,EAASilD,cAAc1yC,EAAO,IAC7CknE,EAAez5E,EAASilD,cAAc1yC,EAAO,IAC7CiiD,EAAO,CACPh1D,MAAO,CACH4B,EAAGo4E,EAAa,GAChBl4E,EAAGk4E,EAAa,IAEpB1jE,IAAK,CACD1U,EAAGq4E,EAAa,GAChBn4E,EAAGm4E,EAAa,KAGpBthC,EAAkB,kBAA4B,CAACqc,EAAKh1D,MAAM4B,EAAGozD,EAAKh1D,MAAM8B,GAAI,CAACkzD,EAAK1+C,IAAI1U,EAAGozD,EAAK1+C,IAAIxU,GAAI,CAAC+tD,EAAa,GAAIA,EAAa,KACzI,OAAIlX,GAAmBmX,IAGvBkqB,EAAex5E,EAASilD,cAAc1yC,EAAO,IAC7CknE,EAAez5E,EAASilD,cAAc1yC,EAAO,IAC7CiiD,EAAO,CACHh1D,MAAO,CACH4B,EAAGo4E,EAAa,GAChBl4E,EAAGk4E,EAAa,IAEpB1jE,IAAK,CACD1U,EAAGq4E,EAAa,GAChBn4E,EAAGm4E,EAAa,KAGxBthC,EAAkB,kBAA4B,CAACqc,EAAKh1D,MAAM4B,EAAGozD,EAAKh1D,MAAM8B,GAAI,CAACkzD,EAAK1+C,IAAI1U,EAAGozD,EAAK1+C,IAAIxU,GAAI,CAAC+tD,EAAa,GAAIA,EAAa,KACjIlX,GAAmBmX,EAGX,EAEhBxrD,KAAK0jD,qBAAuB,CAACjK,EAAKrJ,KAC9B,MAAMnhB,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,EACpBmhB,EAAW8P,aAAc,EACzB,MAAMI,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,eACzEngD,KAAKwgD,SAAW,CACZpQ,aACAkQ,sBACAm1B,eAAe,GAEnBz1E,KAAK4jD,gBAAgBv2B,GACrB,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,IACnC,gBAAE1T,GAAoBre,GAC5B,OAAsCglD,IACtC,IAAAI,mBAAkBrzB,GAClBosB,EAAIkH,gBAAgB,EAExB3gD,KAAK2jD,uBAAyB,CAAClK,EAAKrJ,EAAY2qB,KAC5C,MAAM9rC,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,EACd/hB,EAAOkjC,EAAWljC,KACxBkjC,EAAW8P,aAAc,EACzB,IACI8a,EADAya,GAAgB,EAEhB1a,EAAOuP,cACPmL,GAAgB,EAGhBza,EAAc9tD,EAAKkzC,QAAQ3xC,OAAO+D,WAAW9D,GAAMA,IAAMqsD,IAE7D,MAAMza,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,gBACzE,IAAAO,mBAAkBrzB,GAClBrtB,KAAKwgD,SAAW,CACZpQ,aACAkQ,sBACA0a,cACAya,iBAEJz1E,KAAK4jD,gBAAgBv2B,GACrB,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,IACnC,gBAAE1T,GAAoBre,GAC5B,OAAsCglD,GACtC7G,EAAIkH,gBAAgB,EAExB3gD,KAAK6gD,aAAgBpH,IACjB,MAAMxqB,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,GACd,WAAEmhB,EAAU,oBAAEkQ,EAAmB,cAAE2a,EAAa,SAAEE,GAAan7D,KAAKwgD,UACpE,KAAEtzC,GAASkjC,EACjB,GAAI6qB,IAAkBE,EAClB,OAEJn7D,KAAK00E,eACLxnE,EAAKkzC,QAAQ8Z,kBAAoB,KACjCl6D,KAAK6jD,kBAAkBx2B,GACvBrtB,KAAK8gD,gBAAgBzzB,IACrB,IAAA0zB,oBAAmB1zB,GACnB,MAAM,gBAAE1T,IAAoB,IAAAye,mBAAkB/K,GAC9C,QAAkCrvB,IAA9BgC,KAAKwgD,SAASwa,YAA2B,CACzC,MAAM,OAAEvsD,GAAWvB,EAAKkzC,QAClBo+D,EAAyB,cAAc/vG,EAAO,GAAIA,EAAO,IAE/D,GADgC,cAAcA,EAAO,GAAIA,EAAO,IAClC+vG,EAAwB,CAClD,MAAMC,EAAW,CAAC,IAAIhwG,EAAO,IAAK,IAAIA,EAAO,KACvCiwG,EAAkB,IAAIjwG,EAAO,IAC7BkwG,EAAkB,IAAIlwG,EAAO,IAC7BmwG,EAAiB,cACvB,SAASA,EAAgBH,EAAS,GAAG,GAAKA,EAAS,GAAG,GAAIA,EAAS,GAAG,GAAKA,EAAS,GAAG,IACvF,MAAMI,EAA0C,cAChD,SAASA,GAA0CD,EAAe,GAAIA,EAAe,IACrF,MAAME,EAAyB,cAE/B,IAAIC,EADJ,SAASD,EAAwBH,EAAgB,GAAKD,EAAgB,GAAIC,EAAgB,GAAKD,EAAgB,IAG3GK,EADA,SAASD,EAAwBD,GAA2C,EAChE,CAACH,EAAiBC,GAGlB,CAACA,EAAiBD,GAElCxxG,EAAKkzC,QAAQ3xC,OAAS,CAClBgwG,EAAS,GACTA,EAAS,GACTM,EAAU,GACVA,EAAU,GAElB,CACJ,CACI/+G,KAAK6pE,sBACL7pE,KAAKyM,cAAcg9D,4BACnB,IAAAtgB,kBAAiB/Y,EAAW4Q,gBAEhC,OAAsCV,GAClC2a,IACA,IAAAha,4BAA2B7Q,GAE/BpwC,KAAKwgD,SAAW,KAChBxgD,KAAK+/C,WAAY,CAAK,EAE1B//C,KAAKk7D,kBAAqBzhB,IACtBz5C,KAAK+/C,WAAY,EACjB,MAAM9wB,EAAcwqB,EAAIjnB,QAClB,cAAE8pB,EAAa,QAAEjvB,GAAY4B,EAC7B3zB,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,GACf,cAAE6lD,GAAkBjlD,GACpB,WAAEk0C,EAAU,oBAAEkQ,EAAmB,YAAE0a,EAAW,cAAEC,GAAkBj7D,KAAKwgD,SAC7ExgD,KAAKgzB,WAAW3F,EAAS+iB,EAAY,CAAE6qB,kBACvC,MAAM,KAAE/tD,GAASkjC,EACX5wB,EAAW88B,EAAcxC,MAC/B5sC,EAAKkzC,QAAQ3xC,OAAOusD,GAAe,IAAIx7C,GACvC,MAAMw/F,EAAoB9xG,EAAKkzC,QAAQ3xC,OAAOpI,IAAI86C,GAC5CoK,EACe,CACb7vD,MAAO,CACH4B,EAAG0hH,EAAkB,GAAG,GACxBxhH,EAAGwhH,EAAkB,GAAG,IAE5BhtG,IAAK,CACD1U,EAAG0hH,EAAkB,GAAG,GACxBxhH,EAAGwhH,EAAkB,GAAG,KAe9BC,GAVSD,EAAkB,GAAG,GACrBA,EAAkB,GAAG,GAGrBA,EAAkB,GAAG,GACrBA,EAAkB,GAAG,GAIvB,cAAcA,EAAkB,GAAIA,EAAkB,IAC5B,GACjCr8F,EAAK4oC,EAA6B7vD,MAAM4B,EAAIiuD,EAA6Bv5C,IAAI1U,EAC7EslB,EAAK2oC,EAA6B7vD,MAAM8B,EAAI+tD,EAA6Bv5C,IAAIxU,EAC7EoD,EAAS3D,KAAK0mC,KAAKhhB,EAAKA,EAAKC,EAAKA,GAClCs8F,EAAUv8F,EAAK/hB,EACfu+G,EAAUv8F,EAAKhiB,EACfw+G,GAAQ7zD,EAA6B7vD,MAAM4B,EAC7CiuD,EAA6Bv5C,IAAI1U,GACjC,EACE+hH,GAAQ9zD,EAA6B7vD,MAAM8B,EAC7C+tD,EAA6Bv5C,IAAIxU,GACjC,EACE8hH,EAASF,EAAOH,EAA0BE,EAC1CI,EAASF,EAAOJ,EAA0BC,EAC1CM,EAAOJ,EAAOH,EAA0BE,EACxCM,EAAOJ,EAAOJ,EAA0BC,EAC9ChyG,EAAKkzC,QAAQ3xC,OAAO,GAAKvS,EAASozB,cAAc,CAACgwF,EAAQC,IACzDryG,EAAKkzC,QAAQ3xC,OAAO,GAAKvS,EAASozB,cAAc,CAACkwF,EAAMC,IACvDrvE,EAAW70C,aAAc,GACzB,OAAsC+kD,IACtC,IAAAhQ,2BAA0BF,EAAY/iB,EAAS,EAAAkjB,YAAYggC,gBAC3DvwE,KAAKwgD,SAAS2a,UAAW,CAAI,EAEjCn7D,KAAKo7D,oBAAuB3hB,IACxBz5C,KAAK+/C,WAAY,EACjB,MAAM9wB,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,GACd,WAAEmhB,EAAU,oBAAEkQ,EAAmB,YAAE0a,EAAW,cAAEya,EAAa,cAAExa,GAAmBj7D,KAAKwgD,SAC7FxgD,KAAKgzB,WAAW3F,EAAS+iB,EAAY,CAAE6qB,kBACvC,MAAM,KAAE/tD,GAASkjC,EACjB,GAAIqlC,EAAe,CACf,MAAM,YAAE77B,GAAgB3qB,EAClB2mD,EAAgBh8B,EAAYE,OAC5B,QAAEuwB,GAAYn9D,EAAKkzC,SACnB,cAAEkqB,GAAkBD,EAC1BC,EAAc,IAAMsL,EAAc,GAClCtL,EAAc,IAAMsL,EAAc,GAClCtL,EAAc,IAAMsL,EAAc,GAClCvL,EAAQlP,UAAW,CACvB,MACK,QAAoBn9D,IAAhBg9D,EAA2B,CAChC,MAAM,YAAEphB,GAAgB3qB,EAClB2mD,EAAgBh8B,EAAYE,MACnB5sC,EAAKkzC,QAAQ3xC,OACrBxN,SAASqN,IACZA,EAAM,IAAMsnE,EAAc,GAC1BtnE,EAAM,IAAMsnE,EAAc,GAC1BtnE,EAAM,IAAMsnE,EAAc,EAAE,IAEhCxlC,EAAW70C,aAAc,CAC7B,MAEIyE,KAAK0/G,kBAAkBjmE,GACvBrJ,EAAW70C,aAAc,GAE7B,OAAsC+kD,GAClClQ,EAAW70C,cACX,IAAA+0C,2BAA0BF,EAAY/iB,EAAS,EAAAkjB,YAAYggC,eAC/D,EAEJvwE,KAAK0/G,kBAAqBjmE,IACtB,MAAMxqB,EAAcwqB,EAAIjnB,QAClB,cAAE8pB,EAAa,QAAEjvB,GAAY4B,EAC7B3zB,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,GACf,WAAE80C,EAAY4qB,YAAa2kD,GAAsB3/G,KAAKwgD,UACtD,KAAEtzC,GAASkjC,EACX5wB,EAAW88B,EAAcxC,MACzB8lE,EAA4B,CAC9B1jH,EAASilD,cAAcj0C,EAAKkzC,QAAQ3xC,OAAO,IAC3CvS,EAASilD,cAAcj0C,EAAKkzC,QAAQ3xC,OAAO,IAC3CvS,EAASilD,cAAcj0C,EAAKkzC,QAAQ3xC,OAAO,IAC3CvS,EAASilD,cAAcj0C,EAAKkzC,QAAQ3xC,OAAO,KAEzCoxG,EAAmB,CACrBnkH,MAAO,CACH4B,EAAGsiH,EAA0B,GAAG,GAChCpiH,EAAGoiH,EAA0B,GAAG,IAEpC5tG,IAAK,CACD1U,EAAGsiH,EAA0B,GAAG,GAChCpiH,EAAGoiH,EAA0B,GAAG,KAGlCE,EAAoB,CACtBpkH,MAAO,CACH4B,EAAGsiH,EAA0B,GAAG,GAChCpiH,EAAGoiH,EAA0B,GAAG,IAEpC5tG,IAAK,CACD1U,EAAGsiH,EAA0B,GAAG,GAChCpiH,EAAGoiH,EAA0B,GAAG,KAGlCG,EAAgB,IAAIvgG,GACpBwgG,EAAsB9jH,EAASilD,cAAc4+D,GACnD,GAA0B,IAAtBJ,GAAiD,IAAtBA,EAAyB,CACpD,MACMM,EAAyBL,EADgB,IAAtBD,EAA0B,EAAI,GAEjDO,EAAgC,SAAS,cAAeF,EAAoB,GAAKC,EAAuB,GAAID,EAAoB,GAAKC,EAAuB,IAC5JE,EAA2B,SAAS,cAAeP,EAA0BD,GAAmB,GAClGM,EAAuB,GAAIL,EAA0BD,GAAmB,GACxEM,EAAuB,IAC3B,eAAeC,EAA+BA,GAC9C,eAAeC,EAA0BA,GACzC,MAAMC,EAA2B,CAC7B1kH,MAAO,CACH4B,EAAG2iH,EAAuB,GAC1BziH,EAAGyiH,EAAuB,IAE9BjuG,IAAK,CACD1U,EAAG0iH,EAAoB,GACvBxiH,EAAGwiH,EAAoB,KAG/B,GAAIhgH,KAAKqgH,0CAA0CD,EAA0BN,GACzE,OAEJ,MAAMQ,EAAmBL,EACnBnjH,EAAQkD,KAAKugH,gBAAgBJ,EAA0BD,GAC7D,IAAIM,EAAcZ,EAA0B,GAAG,GAC3Ca,EAAcb,EAA0B,GAAG,GAC3Cc,EAAed,EAA0B,GAAG,GAC5Ce,EAAef,EAA0B,GAAG,GAChDY,GAAeF,EAAiB,GAChCG,GAAeH,EAAiB,GAChCI,GAAgBJ,EAAiB,GACjCK,GAAgBL,EAAiB,GACjC,MAAMM,EAAoBJ,EAAcvjH,KAAKggF,IAAIngF,GAAS2jH,EAAcxjH,KAAKigF,IAAIpgF,GAC3E+jH,EAAqBL,EAAcvjH,KAAKigF,IAAIpgF,GAAS2jH,EAAcxjH,KAAKggF,IAAIngF,GAC5EgkH,EAAqBJ,EAAezjH,KAAKggF,IAAIngF,GAAS6jH,EAAe1jH,KAAKigF,IAAIpgF,GAC9EikH,EAAsBL,EAAezjH,KAAKigF,IAAIpgF,GAAS6jH,EAAe1jH,KAAKggF,IAAIngF,GACrF0jH,EAAcI,EAAoBN,EAAiB,GACnDG,EAAcI,EAAqBP,EAAiB,GACpDI,EAAeI,EAAqBR,EAAiB,GACrDK,EAAeI,EAAsBT,EAAiB,GACtD,MAAMU,EAAgB9kH,EAASozB,cAAc,CAACkxF,EAAaC,IACrDQ,EAAiB/kH,EAASozB,cAAc,CAC1CoxF,EACAC,IAEJzzG,EAAKkzC,QAAQ3xC,OAAOkxG,GAAqBI,EACzC7yG,EAAKkzC,QAAQ3xC,OAAO,GAAKuyG,EACzB9zG,EAAKkzC,QAAQ3xC,OAAO,GAAKwyG,CAC7B,KACK,CACD,MAAMC,EAA6C,IAAtBvB,EAA0B,EAAI,EACrDwB,EAAsB,CACxBC,gBAAiB,CACb1lH,MAAOmkH,EAAiBnkH,MACxBsW,IAAK6tG,EAAiB7tG,KAE1BqvG,iBAAkB,CACd3lH,MAAOokH,EAAkBpkH,MACzBsW,IAAK8tG,EAAkB9tG,MAGzBsvG,EAAqB,cAAc,cAAe,CACpDH,EAAoBC,gBAAgBpvG,IAAI1U,EACxC6jH,EAAoBC,gBAAgBpvG,IAAIxU,GACzC,CACC2jH,EAAoBC,gBAAgB1lH,MAAM4B,EAC1C6jH,EAAoBC,gBAAgB1lH,MAAM8B,IAExC+jH,EAA+B,eAAe,cAAeD,GAC7DE,EAAuB,cAAc,cAAe,CAACxB,EAAoB,GAAIA,EAAoB,IAAK,CACxGJ,EAA0BD,GAAmB,GAC7CC,EAA0BD,GAAmB,KAE3C8B,EAAiB,YAAYD,GAC7B1kH,EAAQkD,KAAKugH,gBAAgBgB,EAA8BC,GAC3DE,EAAiCzkH,KAAKggF,IAAIngF,GAAS2kH,EACnDE,EAAqB,iBAAiB,cAAe,CACvD/B,EAA0BsB,GAAsB,GAChDtB,EAA0BsB,GAAsB,IACjDK,EAA8BG,GACjC,GAAI1hH,KAAKqgH,0CAA0C,CAC/C3kH,MAAO,CACH4B,EAAG0iH,EAAoB,GACvBxiH,EAAGwiH,EAAoB,IAE3BhuG,IAAK,CACD1U,EAAGqkH,EAAmB,GACtBnkH,EAAGmkH,EAAmB,KAE3B,CACCjmH,MAAO,CACH4B,EAAG6jH,EAAoBC,gBAAgB1lH,MAAM4B,EAC7CE,EAAG2jH,EAAoBC,gBAAgB1lH,MAAM8B,GAEjDwU,IAAK,CACD1U,EAAG6jH,EAAoBC,gBAAgBpvG,IAAI1U,EAC3CE,EAAG2jH,EAAoBC,gBAAgBpvG,IAAIxU,KAG/C,OAGJ,IAD0B,gBAA0B,CAACwiH,EAAoB,GAAIA,EAAoB,IAAK,CAAC2B,EAAmB,GAAIA,EAAmB,IAAK,CAAC9B,EAAiBnkH,MAAM4B,EAAGuiH,EAAiBnkH,MAAM8B,GAAI,CAACqiH,EAAiB7tG,IAAI1U,EAAGuiH,EAAiB7tG,IAAIxU,IAEtP,OAEJ0P,EAAKkzC,QAAQ3xC,OAAOyyG,GAAwBhlH,EAASozB,cAAcqyF,GACnEz0G,EAAKkzC,QAAQ3xC,OAAOkxG,GAAqBI,CAC7C,GAEJ//G,KAAKiL,OAAUoiB,IACX,GAAIrtB,KAAK+/C,UAAW,CAChB//C,KAAK+/C,WAAY,EACjB//C,KAAK8gD,gBAAgBzzB,GACrBrtB,KAAK6jD,kBAAkBx2B,IACvB,IAAA0zB,oBAAmB1zB,GACnB,MAAM,WAAE+iB,EAAU,oBAAEkQ,EAAmB,cAAE2a,GAAkBj7D,KAAKwgD,UAC1D,KAAEtzC,GAASkjC,EAQjB,OAPAA,EAAW8P,aAAc,EACzBhzC,EAAKkzC,QAAQ8Z,kBAAoB,MACjC,OAAsC5Z,GAClC2a,IACA,IAAAha,4BAA2B7Q,GAE/BpwC,KAAKwgD,SAAW,KACTpQ,EAAW4Q,aACtB,GAEJhhD,KAAKygD,cAAiBpzB,IAClB,KAAMg0B,uBAAwB,EAC9Bh0B,EAAQ1E,iBAAiB,EAAAgH,OAAO2xB,SAAUthD,KAAK6gD,cAC/CxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO4xB,WAAYvhD,KAAKk7D,mBACjD7tC,EAAQ1E,iBAAiB,EAAAgH,OAAO6xB,WAAYxhD,KAAKk7D,mBACjD7tC,EAAQ1E,iBAAiB,EAAAgH,OAAO8xB,YAAazhD,KAAK6gD,cAClDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAOiyB,UAAW5hD,KAAK6gD,cAChDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO+xB,UAAW1hD,KAAK6gD,cAChDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAOgyB,WAAY3hD,KAAKk7D,kBAAkB,EAEvEl7D,KAAK8gD,gBAAmBzzB,IACpB,KAAMg0B,uBAAwB,EAC9Bh0B,EAAQrE,oBAAoB,EAAA2G,OAAO2xB,SAAUthD,KAAK6gD,cAClDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO4xB,WAAYvhD,KAAKk7D,mBACpD7tC,EAAQrE,oBAAoB,EAAA2G,OAAO6xB,WAAYxhD,KAAKk7D,mBACpD7tC,EAAQrE,oBAAoB,EAAA2G,OAAO8xB,YAAazhD,KAAK6gD,cACrDxzB,EAAQrE,oBAAoB,EAAA2G,OAAOiyB,UAAW5hD,KAAK6gD,cACnDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO+xB,UAAW1hD,KAAK6gD,cACnDxzB,EAAQrE,oBAAoB,EAAA2G,OAAOgyB,WAAY3hD,KAAKk7D,kBAAkB,EAE1El7D,KAAK4jD,gBAAmBv2B,IACpB,KAAMg0B,uBAAwB,EAC9Bh0B,EAAQ1E,iBAAiB,EAAAgH,OAAO2xB,SAAUthD,KAAK6gD,cAC/CxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO4xB,WAAYvhD,KAAKo7D,qBACjD/tC,EAAQ1E,iBAAiB,EAAAgH,OAAO8xB,YAAazhD,KAAK6gD,cAClDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO+xB,UAAW1hD,KAAK6gD,cAChDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAOgyB,WAAY3hD,KAAKo7D,qBACjD/tC,EAAQ1E,iBAAiB,EAAAgH,OAAOiyB,UAAW5hD,KAAK6gD,aAAa,EAEjE7gD,KAAK6jD,kBAAqBx2B,IACtB,KAAMg0B,uBAAwB,EAC9Bh0B,EAAQrE,oBAAoB,EAAA2G,OAAO2xB,SAAUthD,KAAK6gD,cAClDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO4xB,WAAYvhD,KAAKo7D,qBACpD/tC,EAAQrE,oBAAoB,EAAA2G,OAAO8xB,YAAazhD,KAAK6gD,cACrDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO+xB,UAAW1hD,KAAK6gD,cACnDxzB,EAAQrE,oBAAoB,EAAA2G,OAAOgyB,WAAY3hD,KAAKo7D,qBACpD/tC,EAAQrE,oBAAoB,EAAA2G,OAAOiyB,UAAW5hD,KAAK6gD,aAAa,EAEpE7gD,KAAK6hD,iBAAmB,CAACvmD,EAAgBwmD,KACrC,IAAIC,GAAe,EACnB,MAAM,SAAE7lD,GAAaZ,GACf,QAAE+xB,GAAYnxB,EACpB,IAAI8lD,GAAc,IAAAmQ,gBAAenyD,KAAKmgD,cAAe9yB,GACrD,IAAK20B,GAAaphD,OACd,OAAOmhD,EAGX,GADAC,EAAchiD,KAAKiiD,wCAAwC50B,EAAS20B,IAC/DA,GAAaphD,OACd,OAAOmhD,EAEX,MAAM19B,EAAWrkB,KAAKu4D,YAAYr8D,GAC5Byd,EAAkBzd,EAASmwB,qBAC3B61B,EAAiB,CACnBlH,YAAah7C,KAAKg7C,YAClBf,SAAUj6C,KAAKmgD,cACf/yB,WAAY9xB,EAAeY,SAASmN,IAExC,IAAK,IAAIK,EAAI,EAAGA,EAAIs4C,EAAYphD,OAAQ8I,IAAK,CACzC,MAAM0mC,EAAa4R,EAAYt4C,IACzB,cAAEs3C,EAAa,KAAE9zC,GAASkjC,GAC1B,OAAE3hC,EAAM,kBAAEyrD,GAAsBhtD,EAAKkzC,QACrC+B,EAAoB1zC,EAAOpI,KAAKqI,GAAMxS,EAASilD,cAAczyC,KACnEwzC,EAAelB,cAAgBA,EAC/B,MAAM,MAAE5kD,EAAK,UAAEgmD,EAAS,SAAEC,EAAQ,OAAE8F,GAAWnoD,KAAKsiD,mBAAmB,CACnElS,aACA8R,mBAcJ,GAZKh1C,EAAKmzC,YAAYh8B,IACiB,MAAnCnX,EAAKmzC,YAAYh8B,GAAUwxD,KAQtBzlC,EAAW70C,aAChByE,KAAK81E,+BAA+B1lC,EAAYz2B,EAAiBre,IARjE4R,EAAKmzC,YAAYh8B,GAAY,CACzBzjB,OAAQ,KACRhE,MAAO,KACPi5E,KAAM,MAEV71E,KAAK+1E,sBAAsB3lC,EAAYz2B,EAAiBre,KAKvDY,EAASmwB,qBAEV,OADAjc,QAAQC,KAAK,uCACN0xC,EAEX,IAAI4Z,EACJ,KAAK,IAAAC,qBAAoB5a,GACrB,SAOJ,IALK,IAAA2L,oBAAmB3L,IACnBhhD,KAAKwgD,UACgB,OAAtB0Z,IACAyB,EAA2B,CAACxZ,EAAkB+X,KAE9CyB,EAA0B,CAC1B,MAAME,EAAiB,KACvB,IAAAjK,aAAe9P,EAAkBd,EAAe6a,EAAgBF,EAA0B,CACtFv/D,SAER,CACA,MAAMolG,EAAU,GAAGxgD,WACbygD,EAAU,GAAGzgD,WACb+P,EAAU,KAChB,IAAAC,UAAYlP,EAAkBd,EAAe+P,EAAS5O,EAAkB,GAAIA,EAAkB,GAAI,CAC9F/lD,QACAimD,WACAD,YACA+F,UACDq5C,GACH,MAAME,EAAgB,KACtB,IAAA1wC,UAAYlP,EAAkBd,EAAe0gD,EAAev/C,EAAkB,GAAIA,EAAkB,GAAI,CACpG/lD,QACAimD,WACAD,YACA+F,UACDs5C,GACH1/C,GAAe,EACf,MAAM39C,EAAUpE,KAAK20E,sBAAsBzyB,EAAgB9R,GAC3D,IAAKhsC,EAAQypB,WAAY,CACrB3gB,EAAKkzC,QAAQiqB,QAAU,CACnBlP,UAAU,EACVmP,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBh1C,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBg1C,YAAa,CAAC,EAAG,EAAG,KAG5B,QACJ,CACA,MAAMwR,EAAYh2E,KAAKyM,cAAc8oE,aAAaroE,EAAMmX,GACxD,IAAK2xD,GAAkC,IAArBA,EAAUp1E,OACxB,SAEJ,IAAIq1E,EACC/oE,EAAKkzC,QAAQiqB,QAAQlP,WACtB8a,GAAsB,IAAAC,wBAAuB/zB,GAC7Cj1C,EAAKkzC,QAAQiqB,QAAQC,cACjBpuE,EAASozB,cAAc2mD,IAE/B,MAAME,EAAkBj6E,EAASilD,cAAcj0C,EAAKkzC,QAAQiqB,QAAQC,eAC9DsK,EAAa,IACbwB,GAAc,IAAAC,mBAAqBv0B,EAAkBd,EAAe4zB,EAAYoB,EAAWG,EAAiBh0B,EAAmB,CAAC,EAAG/9C,IACjI9G,EAAGslD,EAAMplD,EAAGmX,EAAG,MAAE/X,EAAK,OAAEC,GAAWu5E,EAC3ClpE,EAAKkzC,QAAQiqB,QAAQE,iBAAmB,CACpChG,QAASroE,EAASozB,cAAc,CAACszB,EAAMjuC,IACvC4a,SAAUrzB,EAASozB,cAAc,CAACszB,EAAOhmD,EAAO+X,IAChD6a,WAAYtzB,EAASozB,cAAc,CAACszB,EAAMjuC,EAAM9X,IAChD2nE,YAAatoE,EAASozB,cAAc,CAACszB,EAAOhmD,EAAO+X,EAAM9X,IAEjE,CACA,OAAOklD,CAAY,EAEvB/hD,KAAKqgH,0CAA4C,CAACR,EAAkBC,KAChE,MAAM8B,EAA8B,cACpC,SAASA,EAA6B9B,EAAkB9tG,IAAI1U,EAAIwiH,EAAkBpkH,MAAM4B,EAAGwiH,EAAkB9tG,IAAIxU,EAAIsiH,EAAkBpkH,MAAM8B,GAC7I,eAAeokH,EAA6BA,GAC5C,MAAMC,EAA4B,CAC9BnmH,MAAO,CACH4B,EAAGwiH,EAAkBpkH,MAAM4B,EAAqC,GAAjCskH,EAA4B,GAC3DpkH,EAAGsiH,EAAkBpkH,MAAM8B,EAAqC,GAAjCokH,EAA4B,IAE/D5vG,IAAK,CACD1U,EAAGwiH,EAAkB9tG,IAAI1U,EAAqC,GAAjCskH,EAA4B,GACzDpkH,EAAGsiH,EAAkB9tG,IAAIxU,EAAqC,GAAjCokH,EAA4B,KAKjE,OAFkC,gBAA0B,CAACC,EAA0BnmH,MAAM4B,EAAGukH,EAA0BnmH,MAAM8B,GAAI,CAACqkH,EAA0B7vG,IAAI1U,EAAGukH,EAA0B7vG,IAAIxU,GAAI,CAACqiH,EAAiBnkH,MAAM4B,EAAGuiH,EAAiBnkH,MAAM8B,GAAI,CAACqiH,EAAiB7tG,IAAI1U,EAAGuiH,EAAiB7tG,IAAIxU,GAE7Q,EAEnCwC,KAAK+1E,sBAAwB,CAAC3lC,EAAYz2B,EAAiBre,KACvD,MAAM,KAAE4R,GAASkjC,GACX,QAAE/iB,GAAY/xB,EAAeY,SAC7B06E,EAAY1pE,EAAKkzC,QAAQ3xC,OAAO,GAChCooE,EAAY3pE,EAAKkzC,QAAQ3xC,OAAO,GAChC06E,EAAYj8E,EAAKkzC,QAAQ3xC,OAAO,GAChCqzG,EAAY50G,EAAKkzC,QAAQ3xC,OAAO,IAChC,YAAE4xC,GAAgBnzC,EAClB4pE,EAAYl3E,OAAO4B,KAAK6+C,GAC9B,IAAK,IAAI32C,EAAI,EAAGA,EAAIotE,EAAUl2E,OAAQ8I,IAAK,CACvC,MAAM2a,EAAWyyD,EAAUptE,GACrBlO,EAAQwE,KAAKylE,mBAAmBphD,GACtC,IAAK7oB,EACD,SAEJ,MAAM,UAAE8mB,EAAS,WAAEza,GAAerM,EAC5B05E,EAASlzC,EAAsB1f,EAAWs0D,GAC1CzB,EAASnzC,EAAsB1f,EAAWu0D,GAC1CkrC,EAAS//E,EAAsB1f,EAAW6mE,GAC1C64B,EAAShgF,EAAsB1f,EAAWw/F,GAC1CG,EAAW,CAAC/sC,EAAQC,GACpB+sC,EAAW,CAACH,EAAQC,IAClBxlH,MAAO2lH,EAAQtsC,KAAMuX,IAAW,QAAiC5xF,EAAOymH,IACxEzlH,MAAO4lH,EAAQvsC,KAAMyX,IAAW,QAAiC9xF,EAAO0mH,GAC1E30B,EAAQvtF,KAAKy2E,iBAAiBG,EAAWC,GAAasrC,EACtD30B,EAAQxtF,KAAKy2E,iBAAiB0S,EAAW24B,GAAaM,EACtDxhH,EAAS2sF,EAAQC,EAAQD,EAAQC,EACjC5wF,EAAQ2wF,EAAQC,EAAQA,EAAQD,EAChC1X,EAAO0X,EAAQC,EAAQJ,EAASE,EAChC+0B,EAAY90B,EAAQC,EAAQF,EAASF,EAC3CptF,KAAKi1E,gBAAgBC,EAAQC,EAAQ4sC,EAAQC,EAAQn6G,GAC9C7H,KAAK6pE,sBAAuB,EAC5B7pE,KAAK6pE,sBAAuB,EACnCxpB,EAAYh8B,GAAY,CACpBzjB,SACAhE,QACAi5E,OACAwsC,YAER,CACA,MAAM9mH,EAAc60C,EAAW70C,YAK/B,OAJA60C,EAAW70C,aAAc,EACrBA,IACA,IAAA+0C,2BAA0BF,EAAY/iB,EAAS,EAAAkjB,YAAYwmC,cAExD12B,CAAW,EAEtBrgD,KAAKi1E,gBAAkB,CAACC,EAAQC,EAAQ4sC,EAAQC,EAAQn6G,IAC5C,kCAA8BqtE,EAAQrtE,IAC1C,kCAA8BstE,EAAQttE,IACtC,kCAA8Bk6G,EAAQl6G,IACtC,kCAA8Bm6G,EAAQn6G,GAE9C7H,KAAKugH,gBAAkB,CAAC+B,EAASC,IACtBtlH,KAAKqxG,MAAMgU,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,GAAID,EAAQ,GAAKC,EAAQ,GAAKD,EAAQ,GAAKC,EAAQ,IAExHviH,KAAK81E,gCAAiC,OAAS91E,KAAK+1E,sBAAuB,IAAK,CAAEQ,UAAU,GAChG,CACA,gBAAAz2B,CAAiBrG,GACb,MAAMxqB,EAAcwqB,EAAIjnB,QAClB,cAAE8pB,EAAa,QAAEjvB,GAAY4B,EAC7BzP,EAAW88B,EAAcxC,MACzBx+C,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,EAAQ,gBAAEyd,GAAoBre,EACtC0E,KAAK+/C,WAAY,EACjB,MAAMr/B,EAASxkB,EAASykB,aAClB,gBAAElB,EAAe,OAAE6iB,GAAW5hB,EAC9Bna,EAAoBvG,KAAKggD,qBAAqB9jD,EAAUsjB,EAAUC,EAAiB6iB,GACnFt4B,EAAsB9N,EAAS+jD,yBAC/B7P,EAAa,CACf8P,aAAa,EACb3kD,aAAa,EACb2L,SAAU,CACN+yC,SAAUj6C,KAAKmgD,cACf1gC,gBAAiB,IAAIA,GACrB6iB,OAAQ,IAAIA,GACZt4B,sBACAzD,uBACGrK,EAASu9B,iBAAiB,CAAEhrB,OAAQ,CAAC+Q,MAE5CtS,KAAM,CACFkzC,QAAS,CACL3xC,OAAQ,CACJ,IAAI+Q,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAER6qD,QAAS,CACLlP,UAAU,EACVmP,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBh1C,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBg1C,YAAa,CAAC,EAAG,EAAG,KAG5BtK,kBAAmB,MAEvBroC,MAAO,GACPwuB,YAAa,CAAC,KAGtB,IAAAqJ,eAActZ,EAAY/iB,GAC1B,MAAMizB,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,eAazE,OAZAngD,KAAKwgD,SAAW,CACZpQ,aACAkQ,sBACA0a,YAAa,EACbya,eAAe,EACfxa,eAAe,EACfE,UAAU,GAEdn7D,KAAKygD,cAAcpzB,IACnB,IAAAqzB,mBAAkBrzB,GAClBosB,EAAIkH,kBACJ,OAAsCL,GAC/BlQ,CACX,QACSpwC,KAAK60E,QAAU,CAACznD,EAAY2uB,EAAM33C,KACvC,MAAM9I,GAAiB,IAAAwiE,+BAA8B1wC,GACrD,IAAK9xB,EACD,OAEJ,MAAM,oBAAE0O,EAAmB,kBAAEzD,EAAiB,gBAAEkZ,EAAe,SAAEqkB,EAAQ,SAAE5nC,GAAc8D,KAAKw2E,YAAY8qB,EAAmBhmG,EAAgB,GAAI8I,IAC1Iy9F,EAAWC,GAAa/lD,GACxBgmD,EAAQC,GAAUH,GAClBI,EAAQC,GAAUJ,EACnBrzF,EAAS,CAACszF,EAAQC,EAAQC,EAAQC,GAClC9xD,EAAa,CACf4Q,cAAe58C,GAAS48C,eAAiB,EAAAlT,UAAA,SACzC5gC,KAAM,CACFkzC,QAAS,CACL3xC,SACAyrD,kBAAmB,KACnBmQ,QAAS,CACLlP,UAAU,EACVmP,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBh1C,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBg1C,YAAa,CAAC,EAAG,EAAG,MAIhCnkB,YAAa,CAAC,GAElBH,aAAa,EACb40B,eAAe,EACfv5E,aAAa,EACbu3E,UAAU,EACVC,WAAW,EACX7rE,SAAU,CACN+yC,SAAUnW,EAASqc,cACnB1gC,kBACAzV,sBACAzD,uBACGnC,IAKX,OAFA,IAAAslD,eAActZ,EAAYl0C,EAASmxB,UACnC,OAAsC,CAACnxB,EAASmN,KACzC+mC,CAAU,CAClB,CACH,gBAAAqmC,CAAiBC,EAAMC,GACnB,MAAMh0D,EAAK+zD,EAAK,GAAKC,EAAK,GACpB/zD,EAAK8zD,EAAK,GAAKC,EAAK,GACpB9zD,EAAK6zD,EAAK,GAAKC,EAAK,GAC1B,OAAO15E,KAAK0mC,KAAKhhB,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAC9C,EAEJ,SAAS2yD,EAAoBtoE,EAAMmX,GAC/B,MAAM,YAAEg8B,EAAW,MAAExuB,GAAU3kB,GACzB,OAAEtM,EAAM,MAAEhE,EAAK,KAAEi5E,GAASx1B,EAAYh8B,GACtC2xD,EAAY,GAIlB,OAHInkD,GACAmkD,EAAUrtE,KAAKkpB,QAEJ7zB,IAAX4C,GAGJo1E,EAAUrtE,KAAK,MAAM,wBAAoB/H,MAAWi1E,GAAQA,IAAQ,MAAM,wBAAoBj5E,MAAUi5E,KAF7FG,CAIf,CACA,S,qFCzwBA,MAAMwsC,UAA8C,WACvCxiH,KAAKi6C,SAAW,uCAAyC,CAClE,WAAAx6C,CAAY45C,GAORT,MANqB,EAAA9K,UAAA,UAAoB,CACrCrhC,cAAe,CACX6jE,gBAAgB,EAChBmyC,mBAAmB,IAExBppE,GAEP,CACA,yBAAAuoC,GACI,OAAO,CACX,CACA,wBAAAC,CAAyBC,GACrB,MAAM1xC,EAAa0xC,EAAc1xC,YAC3B,YAAE70C,GAAgB60C,EAClBsyE,EAAe9pE,MAAMipC,yBAAyBC,GACpD,GAAIvmF,EAAa,CACb,MAAM,eAAEwmE,GAAmB3xB,EAAWljC,KAAKoiF,cAC3C,IAAAkK,iCAAgCz3B,EACpC,CACA,OAAO2gD,CACX,EAEJ,S,wTCHA,MAAM,sBAAEC,GAA0B,EAAAlyC,UAC5B,QAAE5wD,GAAY,EAAA+nC,UACd+Q,EAAqB,EAAI94C,EAC/B,MAAM+iG,UAA8B,WACvB5iH,KAAKi6C,SAAW,mBAAqB,CAC9C,WAAAx6C,CAAY45C,EAAY,CAAC,EAAGC,EAAmB,CAC3CC,0BAA2B,CAAC,QAAS,SACrC9sC,cAAe,CACXqsE,gBAAgB,EAChB3wB,QAAQ,EACRshB,2BAA2B,EAC3BwU,+BAAgC,EAAAvkB,iBAAiBC,MACjDkpD,+BAAgC,CAC5Bt6D,SAAS,EACTvlB,OAAQ,GAEZy/E,mBAAmB,EACnBK,sBAAuB,GACvBC,iCAAkC,EAClCC,eAAe,EACfC,mBAAoB,EACpBC,UAAW,CACPC,aAAa,EACbC,cAAc,EACdC,0BAA2B,GAC3BC,2BAA4B,IAEhCzqG,cAAe,CACX0vC,SAAS,EACT46B,wBAAyB,MAE7BzkE,SAAU,CACN6pC,SAAS,EACT21B,QAAS,IAEbqlC,6BAA6B,EAC7BjzC,gBAAgB,EAChBiF,aAAcC,EACdwD,gBAAiB,EAAAC,wBAGrBrgC,MAAMS,EAAWC,GACjBt5C,KAAK+/C,WAAY,EACjB//C,KAAKwjH,iBAAkB,EACvBxjH,KAAKyjH,eAAgB,EACrBzjH,KAAK8/C,iBAAoBrG,IACrB,MAAMxqB,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,EACdmhB,EAAapwC,KAAK0hF,iBAAiBjoC,GACzCz5C,KAAK0pD,cAActZ,EAAY/iB,GAC/B,MAAMizB,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,eAIzE,OAHAngD,KAAK0jH,aAAajqE,EAAKrJ,EAAYkQ,GACnC7G,EAAIkH,kBACJ,OAAsCL,GAC/BlQ,CAAU,EAErBpwC,KAAK2jD,uBAAyB,CAAClK,EAAKrJ,EAAY2qB,KAC5C,MAAM9rC,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,EACdqxB,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,eACzEngD,KAAK2jH,2BAA2BlqE,EAAKrJ,EAAYkQ,EAAqBya,EAAO,EAEjF/6D,KAAK0jD,qBAAuB,CAACjK,EAAKrJ,KAC9B,MAAMnhB,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,EACdqxB,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,eACrE/P,EAAWljC,KAAKmiC,QAAQ4B,OACxBjxC,KAAK4jH,0BAA0BnqE,EAAKrJ,EAAYkQ,GAGhDtgD,KAAK6jH,wBAAwBpqE,EAAKrJ,EAAYkQ,GAElD7G,EAAIkH,gBAAgB,EAExB3gD,KAAKyjD,gBAAkB,CAACp2B,EAAS+iB,EAAYmb,EAAcC,KACvD,MAAMlwD,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,GACbm1E,SAAUhiE,GAAW2hC,EAAWljC,KAAKmiC,QAC7C,IAAIy0E,EAAgB5nH,EAASilD,cAAc1yC,EAAO,IAClD,IAAK,IAAI/E,EAAI,EAAGA,EAAI+E,EAAO7N,OAAQ8I,IAAK,CACpC,MAAMo+B,EAAKg8E,EACLnuE,EAAKz5C,EAASilD,cAAc1yC,EAAO/E,IAEzC,GADmBi5G,EAAsBp3D,EAAczjB,EAAI6N,EAAI6V,GAE3D,OAAO,EAEXs4D,EAAgBnuE,CACpB,CACA,IAAKvF,EAAWljC,KAAKmiC,QAAQ4B,OACzB,OAAO,EAEX,MAAM8yE,EAAS7nH,EAASilD,cAAc1yC,EAAO,IACvCu1G,EAAO9nH,EAASilD,cAAc1yC,EAAOA,EAAO7N,OAAS,IAC3D,OAAO+hH,EAAsBp3D,EAAcw4D,EAAQC,EAAMx4D,EAAU,EAEvExrD,KAAKiL,OAAUoiB,IACX,MAAM0yB,EAAY//C,KAAK+/C,UACjB0jE,EAAgBzjH,KAAKyjH,cACrBD,EAAkBxjH,KAAKwjH,gBACzBzjE,EACA//C,KAAKikH,cAAc52F,GAEdo2F,EACLzjH,KAAKkkH,sBAAsB72F,GAEtBm2F,GACLxjH,KAAKmkH,wBAAwB92F,EACjC,EAEJrtB,KAAK+1E,sBAAwB,CAAC3lC,EAAYl0C,EAAUyd,EAAiBre,KACjE,MAAM,KAAE4R,GAASkjC,GACX,YAAEiQ,GAAgBnzC,GAChBujE,SAAUhiE,EAAM,OAAEwiC,GAAW/jC,EAAKmiC,QACpCynC,EAAYl3E,OAAO4B,KAAK6+C,GAC9B,IAAK,IAAI32C,EAAI,EAAGA,EAAIotE,EAAUl2E,OAAQ8I,IAAK,CACvC,MAAM2a,EAAWyyD,EAAUptE,GACrBlO,EAAQwE,KAAKylE,mBAAmBphD,GACtC,IAAK7oB,EACD,SAEJ,MAAM,UAAE8mB,EAAS,SAAEpb,GAAa1L,EAC1B2mD,EAAoB1zC,EAAOpI,KAAKqI,GAAMxS,EAASilD,cAAczyC,KAC7DipF,EAAsB,CACxBp5F,aAAa,OAAoBrC,EAAUmoB,GAC3C6zD,YAAal4E,KAAKk4E,YAAYh8E,EAAUmoB,EAAU+rB,EAAWlpC,SAASX,oBAEpE6xE,GAAe,OAAmBlxE,EAASi+B,SAAUiL,EAAWlpC,SAASX,kBAAmBoxF,GAC5FysB,GAAkB,QAAiC5oH,GAAO,KAC5D,MAAMi1E,EAAWvjE,EAAKmiC,QAAQohC,SACxB8/B,EAAY9/B,EAAS7vE,OACrBsoG,EAAoB,IAAIxqG,MAAM6xG,GACpC,IAAK,IAAI7mG,EAAI,EAAGA,EAAI6mG,EAAW7mG,IAC3Bw/F,EAAkBx/F,GAAKxN,EAASilD,cAAcsvB,EAAS/mE,IAE3D,MAAQ8Z,KAAMu9D,EAAY//C,KAAMggD,EAAYz9D,KAAM09D,EAAYlgD,KAAMmgD,GAAgB,mBAAsBgoB,GACpG9nB,EAAiBllF,EAASozB,cAAc,CAAC2xD,EAAYC,IACrDG,EAAiB,kCAA8B/+D,EAAW8+D,GAC1DE,EAAqBplF,EAASozB,cAAc,CAC9CyxD,EACAC,IAGJ,MAAO,CAACK,EADmB,kCAA8B/+D,EAAWg/D,GACzB,IAE3CrwC,EACAjxC,KAAKqkH,wBAAwB,CACzBhgG,WACAnoB,WACAimD,oBACA1zC,SACA6T,YACApb,WACAm5C,cACA+3B,eACAgsC,oBAIJpkH,KAAKskH,sBAAsB,CACvBp9G,WACAi7C,oBACA99B,WACAg8B,cACA+3B,eACAgsC,mBAGZ,CACA,MAAM7oH,EAAc60C,EAAW70C,YAK/B,OAJA60C,EAAW70C,aAAc,EACrBA,IACA,IAAA+0C,2BAA0BF,EAAY90C,EAAeY,SAASmxB,QAAS,EAAAkjB,YAAYwmC,cAEhF12B,CAAW,EAEtBrgD,KAAKkgF,aAAe,CAAC9vC,EAAYl0C,EAAUZ,EAAgBwmD,KACvD,MAAM,KAAE50C,GAASkjC,EACX/rB,EAAWrkB,KAAKu4D,YAAYr8D,GAC5BgmD,EAAiB,CACnBlH,YAAah7C,KAAKg7C,YAClBf,SAAUj6C,KAAKmgD,cACf/yB,WAAY9xB,EAAeY,SAASmN,IAElCjF,EAAUpE,KAAK20E,sBAAsBzyB,EAAgB9R,GAC3D,IAAKhsC,EAAQypB,WACT,OAEJ,MAAMmoD,EAAYh2E,KAAKyM,cAAc8oE,aAAaroE,EAAMmX,GACxD,IAAK2xD,GAAkC,IAArBA,EAAUp1E,OACxB,OAEJ,MAAMuhD,EAAoBj1C,EAAKmiC,QAAQohC,SAASpqE,KAAKqI,GAAMxS,EAASilD,cAAczyC,KAClF,IAAKxB,EAAKkzC,QAAQiqB,QAAQlP,SAAU,CAChC,MAAM8a,GAAsB,IAAAC,wBAAuB/zB,GACnDj1C,EAAKkzC,QAAQiqB,QAAQC,cACjBpuE,EAASozB,cAAc2mD,EAC/B,CACA,MAAME,EAAkBj6E,EAASilD,cAAcj0C,EAAKkzC,QAAQiqB,QAAQC,eAE9D8L,GAAc,IAAAC,mBAAkBv0B,EAAkB1R,EAAW4Q,eAAiB,GADjE,IACiFg1B,EAAWG,EAAiBh0B,EAAmB,CAAC,EAAG/9C,IAC/I9G,EAAGslD,EAAMplD,EAAGmX,EAAG,MAAE/X,EAAK,OAAEC,GAAWu5E,EAC3ClpE,EAAKkzC,QAAQiqB,QAAQE,iBAAmB,CACpChG,QAASroE,EAASozB,cAAc,CAACszB,EAAMjuC,IACvC4a,SAAUrzB,EAASozB,cAAc,CAACszB,EAAOhmD,EAAO+X,IAChD6a,WAAYtzB,EAASozB,cAAc,CAACszB,EAAMjuC,EAAM9X,IAChD2nE,YAAatoE,EAASozB,cAAc,CAACszB,EAAOhmD,EAAO+X,EAAM9X,IAC5D,GAEL,OAAiBmD,OACjB,OAAuBA,OACvB,OAA8BA,OAC9B,OAA4BA,OAC5B,OAA+BA,OAC/B,OAAsBA,MACtBA,KAAK81E,gCAAiC,OAAS91E,KAAK+1E,sBAAuB,IAAK,CAAEQ,UAAU,GAChG,CACA,uCAAAt0B,CAAwC50B,EAAS20B,GAC7C,IAAKA,IAAgBA,EAAYphD,OAC7B,OAEJ,MAAMtF,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,EACrB,IAAIipH,EACJ,GAAIroH,aAAoB,EAAA8zC,eAAgB,CACpC,MAAMtvB,EAASxkB,EAASykB,aAClB,yBAAEC,GAA6B,iDAA6C1kB,EAAUwkB,GAC5F6jG,EAAuBvkH,KAAKwkH,6BAA6BxiE,EAAathC,EAAQE,EAClF,MAEI2jG,GAAuB,IAAAE,6BAA4BvoH,EAAU8lD,GAEjE,OAAOuiE,CACX,CACA,4BAAAC,CAA6BxiE,EAAathC,EAAQE,GAC9C,MAAM,gBAAEnB,GAAoBiB,EACtBgkG,EAAiC1iE,EAAYltC,QAAQ6vG,IACvD,MAAMC,EAA4BD,EAAGz9G,SAASuY,gBACxCilD,EAAaznE,KAAK6e,IAAI,SAAS2D,EAAiBmlG,IAClDjsD,EACJ,OAAOisD,GAA6BlgD,CAAU,IAElD,IAAKggD,EAA+B9jH,OAChC,MAAO,GAEX,MAAMkf,EAA+Bc,EAA2B,GAC1D,WAAEC,GAAeH,EACjBmkG,EAAyB,GAC/B,IAAK,MAAMz0E,KAAcs0E,EAAgC,CACrD,MACMp2G,EADO8hC,EAAWljC,KACLmiC,QAAQohC,SAAS,GACpC,IAAKrgC,EAAW2iC,UACZ,SAEJ,MAAM9yD,EAAM,cACZ,SAASA,EAAKY,EAAYvS,GAC1B,MAAMivC,EAAM,SAASt9B,EAAKR,GACtBxiB,KAAK6e,IAAIyhC,GAAOz9B,GAChB+kG,EAAuBl8G,KAAKynC,EAEpC,CACA,OAAOy0E,CACX,CACA,yBAAAjjC,GACI,OAAO,CACX,CACA,gBAAAF,CAAiBjoC,GACb,MAAMj6B,EAAWi6B,EAAIjnB,OAAO8pB,cAAcxC,MACpCmpC,EAAoBrqC,MAAM8oC,iBAAiBjoC,GAcjD,OAVmB,sBAAkBwpC,EAAmB,CACpD/1E,KAAM,CACFmiC,QAAS,CACLohC,SAAU,CAAC,IAAIjxD,KAEnBqS,MAAO,GACPwuB,YAAa,CAAC,GAElB8iC,wBAX6B/yC,IAC7BA,EAAWljC,KAAKkzC,QAAQ3xC,OAAO7N,OAAS,CAAC,GAajD,CACA,kBAAA0hD,CAAmB5gD,GACf,OAAOk3C,MAAM0J,mBAAmB5gD,EACpC,CACA,wBAAAmgF,CAAyBC,GACrB,MAAM,eAAExmF,EAAc,SAAE+oB,EAAQ,iBAAEy9B,GAAqBggC,EACjD1xC,EAAa0xC,EAAc1xC,WACjC,IAAI2R,GAAe,EACnB,MAAM,SAAE7lD,EAAQ,gBAAEyd,GAAoBre,EAChCykD,EAAY//C,KAAK+/C,UACjB0jE,EAAgBzjH,KAAKyjH,cACrBD,EAAkBxjH,KAAKwjH,gBAC7B,GAAMzjE,GAAa0jE,GAAiBD,EAS/B,CACD,MAAM7zC,EAAsB3vE,KAAK0vE,WAAWt/B,WAAW4Q,cACvD,GAAI5Q,EAAW4Q,gBAAkB2uB,EAC7B,GAAI5vB,EACA//C,KAAK8kH,wBAAwBxpH,EAAgBwmD,EAAkB1R,QAE9D,GAAIozE,EACLxjH,KAAK+kH,+BAA+BzpH,EAAgBwmD,EAAkB1R,OAErE,KAAIqzE,EAIL,MAAM,IAAIrlH,MAAM,WAAW4B,KAAKmgD,4CAHhCngD,KAAKglH,6BAA6B1pH,EAAgBwmD,EAAkB1R,EAIxE,MAGIpwC,KAAKyM,cAAc82G,6BACyB,IAA5CnzE,EAAWljC,KAAKmiC,QAAQohC,SAAS7vE,OACjCZ,KAAKilH,6BAA6B3pH,EAAgBwmD,EAAkB1R,GAGpEpwC,KAAKklH,cAAc5pH,EAAgBwmD,EAAkB1R,GAG7D2R,GAAe,CACnB,MAlCQ/hD,KAAKyM,cAAc82G,6BACyB,IAA5CnzE,EAAWljC,KAAKmiC,QAAQohC,SAAS7vE,OACjCZ,KAAKilH,6BAA6B3pH,EAAgBwmD,EAAkB1R,GAGpEpwC,KAAKklH,cAAc5pH,EAAgBwmD,EAAkB1R,GA8B7D,GAAKpwC,KAAKyM,cAAc6jE,eAKxB,OAFAtwE,KAAKmlH,wBAAwB/0E,EAAY/rB,EAAUnoB,EAAUyd,EAAiBre,GAC9E0E,KAAKkgF,aAAa9vC,EAAYl0C,EAAUZ,EAAgBwmD,GACjDC,CACX,CACA,uBAAAojE,CAAwB/0E,EAAY/rB,EAAUnoB,EAAUyd,EAAiBre,GACrE,MAAMq0E,EAAsB3vE,KAAK0vE,YAAYt/B,WAAW4Q,cACxD,IAAI5Q,EAAW4Q,gBAAkB2uB,GAC5B3vE,KAAK0vE,YAAY+F,iBAGjBz1E,KAAK0vE,YAAY+F,cAAe,CACjC,MAAM,KAAEvoE,GAASkjC,EACZljC,EAAKmzC,YAAYh8B,IAAWwxD,KAYxBzlC,EAAW70C,aAChByE,KAAK81E,+BAA+B1lC,EAAYl0C,EAAUyd,EAAiBre,IAZ3E4R,EAAKmzC,YAAYh8B,GAAY,CACzB8gB,SAAU,KACVq1C,KAAM,KACNrrE,IAAK,KACLq0B,KAAM,KACNC,OAAQ,KACR82C,SAAU,KACV1E,KAAM,MAEV71E,KAAK+1E,sBAAsB3lC,EAAYl0C,EAAUyd,EAAiBre,GAK1E,CACJ,CACA,uBAAA+oH,EAAwB,SAAEnoH,EAAQ,OAAEuS,EAAM,UAAE6T,EAAS,SAAEpb,EAAQ,YAAEm5C,EAAW,SAAEh8B,EAAQ,aAAE+zD,EAAY,kBAAEj2B,EAAiB,gBAAEiiE,IACrH,MAAM,MAAE5nH,EAAK,SAAE+9E,EAAQ,KAAE1E,GAASuuC,GAC5B,aAAEp/G,GAAiB9I,EAAS05B,eAC5B4W,EAAc2V,EAAkB,GAChCu+B,EAAqBxkF,EAASozB,cAAckd,GAC5Cm0C,EAAczkF,EAASozB,cAAc,CACvCkd,EAAY,GAAK,EACjBA,EAAY,KAEVo0C,EAAc1kF,EAASozB,cAAc,CACvCkd,EAAY,GACZA,EAAY,GAAK,IAEfq0C,EAAW,cAAcH,EAAoBC,GAC7CG,EAAW,cAAcJ,EAAoBE,GAC7CwkC,EAAgB,kCAA8B9iG,EAAW7T,EAAO,IACtE22G,EAAc,GAAKnoH,KAAK+Q,MAAMo3G,EAAc,IAC5CA,EAAc,GAAKnoH,KAAK+Q,MAAMo3G,EAAc,IAC5CA,EAAc,GAAKnoH,KAAK+Q,MAAMo3G,EAAc,IAC5C,IAAIz6E,EAAOy6E,EAAc,GACrBx6E,EAAOw6E,EAAc,GACrBv6E,EAAOu6E,EAAc,GACrBt6E,EAAOs6E,EAAc,GACrBr6E,EAAOq6E,EAAc,GACrBp6E,EAAOo6E,EAAc,GACzB,IAAK,IAAInzG,EAAI,EAAGA,EAAIxD,EAAO7N,OAAQqR,IAAK,CACpC,MAAMmzG,EAAgB,kCAA8B9iG,EAAW7T,EAAOwD,IACtEmzG,EAAc,GAAKnoH,KAAK+Q,MAAMo3G,EAAc,IAC5CA,EAAc,GAAKnoH,KAAK+Q,MAAMo3G,EAAc,IAC5CA,EAAc,GAAKnoH,KAAK+Q,MAAMo3G,EAAc,IAC5Cz6E,EAAO1tC,KAAKa,IAAI6sC,EAAMy6E,EAAc,IACpCx6E,EAAO3tC,KAAKkS,IAAIy7B,EAAMw6E,EAAc,IACpCv6E,EAAO5tC,KAAKa,IAAI+sC,EAAMu6E,EAAc,IACpCt6E,EAAO7tC,KAAKkS,IAAI27B,EAAMs6E,EAAc,IACpCr6E,EAAO9tC,KAAKa,IAAIitC,EAAMq6E,EAAc,IACpCp6E,EAAO/tC,KAAKkS,IAAI67B,EAAMo6E,EAAc,GACxC,CACA,MAAMC,EAAiB,kCAA8B/iG,EAAW7T,EAAO,IACvE42G,EAAe,GAAKpoH,KAAK+Q,MAAMq3G,EAAe,IAC9CA,EAAe,GAAKpoH,KAAK+Q,MAAMq3G,EAAe,IAC9CA,EAAe,GAAKpoH,KAAK+Q,MAAMq3G,EAAe,IAC9C,IAAI7qC,EAAO,EAAA/J,SAAA,QAAiBtuB,GAAqB3lD,EAAQA,EACzDg+E,GAAQqG,EAAWC,EACnB,MAAMwkC,EAAS,KAAQ16E,EAAOD,GACxB46E,EAAS,KAAQz6E,EAAOD,GACxB26E,EAAS,KAAQx6E,EAAOD,GAC9BJ,EAAO1tC,KAAK+Q,MAAM28B,EAAO26E,GACzB16E,EAAO3tC,KAAKwoH,KAAK76E,EAAO06E,GACxBz6E,EAAO5tC,KAAK+Q,MAAM68B,EAAO06E,GACzBz6E,EAAO7tC,KAAKwoH,KAAK36E,EAAOy6E,GACxBx6E,EAAO9tC,KAAK+Q,MAAM+8B,EAAOy6E,GACzBx6E,EAAO/tC,KAAKwoH,KAAKz6E,EAAOw6E,GACxB,MAAMtwG,EAAY,CACd,CAACy1B,EAAMC,GACP,CAACC,EAAMC,GACP,CAACC,EAAMC,IAEL06E,EAAcpjG,EAAUS,aAAa,CAAC6nB,EAAME,EAAME,IAClD26E,EAAezpH,EAASilD,cAAcukE,GAC5C,IAAIE,EAAS,EACTC,EAAgB,GAChBC,EAAsB,EAC1B,MAAMp7E,EAAgB1lC,EAAa/D,QAAQjB,KAAKyM,cAAcusE,gBAAgBsC,cAAe,CACzFh5D,YACAi5D,WAAY,CAAChwC,EAAUw6E,KACnB,IAAInqF,GAAS,EACb,MAAMttB,EAAQpS,EAASilD,cAAc5V,GAsBrC,OArBIj9B,EAAM,IAAMs3G,IACZE,EAAsB,EACtBF,EAASt3G,EAAM,GACfu3G,GAAgB,IAAAG,wCAAuC7jE,EAAmB7zC,EAAO,CAACq3G,EAAa,GAAIr3G,EAAM,KACzGu3G,EAAc5pG,MACH,SAAUC,EAAGhF,GAChB,OAAOgF,EAMZ,KANyBhF,EAMzB,GALW,EACAgF,EAIX,GAJsBhF,EAItB,IAHgB,EACD,CACd,KAGJ2uG,EAAcjlH,QAAU0N,EAAM,GAAKu3G,EAAc,GAAG,KACpDA,EAAcI,QACdH,KAEAA,EAAsB,GAAM,IAC5BlqF,GAAS,GAENA,CAAM,EAEjB1mB,YACAk1B,aAAcpqC,KAAKyM,cAAcqsE,iBAE/Bn9E,EAAQqE,KAAKyM,cAAcusE,gBAAgB0C,gBACjDr7B,EAAYh8B,GAAY,CACpB8gB,SAAUj+B,EAASi+B,SACnBq1C,OACA2B,WAAW,OAAmBh6B,EAAmBlR,QAAUz0C,EAC3DgnC,KAAM7nC,EAAM6nC,MAAMvjC,MAClBkP,IAAKxT,EAAMwT,KAAKlP,MAChBwjC,OAAQ9nC,EAAM8nC,QAAQxjC,MACtB07E,WAAYhgF,EAAMqR,MAClB09B,cAAeA,EACf6vC,WACAnC,eACAvC,OAER,CACA,qBAAAyuC,EAAsB,SAAEjgG,EAAQ,SAAEnd,EAAQ,kBAAEi7C,EAAiB,YAAE9B,EAAW,aAAE+3B,EAAY,gBAAEgsC,IACtF,MAAM,MAAE5nH,EAAK,KAAEq5E,GAASuuC,EACxB/jE,EAAYh8B,GAAY,CACpB8gB,SAAUj+B,EAASi+B,SACnBvkC,QAAQ,OAAmBuhD,GAAmB,GAAS3lD,EACvD47E,eACAvC,OAER,EAEJ,SAASL,EAAoBtoE,EAAMmX,GAC/B,MAAM2yD,EAAoB9pE,EAAKmzC,YAAYh8B,IACrC,KAAEm2D,EAAI,KAAEh3C,EAAI,OAAEC,EAAM,OAAE7iC,EAAM,UAAEu7E,EAAS,IAAEhtE,EAAG,YAAEksE,EAAW,KAAExF,EAAI,SAAE0E,EAAQ,aAAEnC,GAAkBpB,GAAqB,CAAC,EACnHhB,EAAY,GAClB,GAAIwE,EAAM,CACN,MAAMsB,EAAWT,EACX,8BACA,SAAS,wBAAoBb,MAASD,IAC5CvE,EAAUrtE,KAAKmzE,EACnB,CAgBA,OAfIt4C,GACAwyC,EAAUrtE,KAAK,SAAS,wBAAoB66B,MAAS40C,KAErDpsE,OAAOk6G,SAAS/2G,IAChB6mE,EAAUrtE,KAAK,QAAQ,wBAAoBwG,MAAQipE,KAEnD30C,GACAuyC,EAAUrtE,KAAK,YAAY,wBAAoB86B,MAAW20C,KAE1D+D,GACAnG,EAAUrtE,KAAK,cAAc,wBAAoBwzE,MAActG,KAE/Dj1E,GACAo1E,EAAUrtE,KAAK,GAAG,wBAAoB/H,MAAWi1E,KAE9CG,CACX,CACA,S,yQChgBA,MAAM,sBAAEh0C,GAA0B,YAClC,MAAMmkF,UAAyB,YAClBnmH,KAAKi6C,SAAW,cAAgB,CACzC,WAAAx6C,CAAY45C,EAAY,CAAC,EAAGC,EAAmB,CAC3CC,0BAA2B,CAAC,QAAS,SACrC9sC,cAAe,CACXqsE,gBAAgB,EAChB3wB,QAAQ,EACRshB,2BAA2B,EAC3B6G,gBAAgB,EAChBiF,aAAcC,EACdwD,gBAAiB,EAAAC,wBAGrBrgC,MAAMS,EAAWC,GACjBt5C,KAAK8/C,iBAAoBrG,IACrB,MAAMxqB,EAAcwqB,EAAIjnB,QAClB,cAAE8pB,EAAa,QAAEjvB,GAAY4B,EAC7BzP,EAAW88B,EAAcxC,MACzBx+C,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,EACrB0E,KAAK+/C,WAAY,EACjB,MAAM3P,EAAcpwC,KAAgB,YAAEy3E,4BAA4Bv7E,EAAU,CACxEgR,KAAM,CACFkzC,QAAS,CACL3xC,OAAQ,CACJ,IAAI+Q,GACJ,IAAIA,GACJ,IAAIA,GACJ,IAAIA,IAER6qD,QAAS,CACLlP,UAAU,EACVmP,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBh1C,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBg1C,YAAa,CAAC,EAAG,EAAG,MAIhCnkB,YAAa,CAAC,MAGtB,QAAcjQ,EAAY/iB,GAC1B,MAAMizB,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,eAazE,OAZAngD,KAAKwgD,SAAW,CACZpQ,aACAkQ,sBACA0a,YAAa,EACbya,eAAe,EACfxa,eAAe,EACfE,UAAU,GAEdn7D,KAAKygD,cAAcpzB,IACnB,IAAAqzB,mBAAkBrzB,GAClBosB,EAAIkH,kBACJ,OAAsCL,GAC/BlQ,CAAU,EAErBpwC,KAAKyjD,gBAAkB,CAACp2B,EAAS+iB,EAAYmb,EAAcC,KACvD,MAAMlwD,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,GACf,KAAE4R,GAASkjC,GACX,OAAE3hC,GAAWvB,EAAKkzC,QAClBs1B,EAAex5E,EAASilD,cAAc1yC,EAAO,IAC7CknE,EAAez5E,EAASilD,cAAc1yC,EAAO,IAC7Co0F,EAAO7iG,KAAK8iG,8BAA8B,CAC5CptB,EACAC,IAEErnE,EAAQ,CAACi9C,EAAa,GAAIA,EAAa,KACvC,KAAE3I,EAAI,IAAEjuC,EAAG,MAAE/X,EAAK,OAAEC,GAAWgmG,EAErC,OADwB,kBAA0B,CAACjgD,EAAMjuC,EAAK/X,EAAOC,GAASyR,IACvDk9C,CAGX,EAEhBxrD,KAAK0jD,qBAAuB,CAACjK,EAAKrJ,KAC9B,MAAMnhB,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,EACpBmhB,EAAW8P,aAAc,EACzB,MAAMI,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,eACzEngD,KAAKwgD,SAAW,CACZpQ,aACAkQ,sBACAm1B,eAAe,GAEnBz1E,KAAK4jD,gBAAgBv2B,IACrB,IAAAqzB,mBAAkBrzB,GAClB,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,IACnC,gBAAE1T,GAAoBre,GAC5B,OAAsCglD,GACtC7G,EAAIkH,gBAAgB,EAExB3gD,KAAK2jD,uBAAyB,CAAClK,EAAKrJ,EAAY2qB,KAC5C,MAAM9rC,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,GACd,KAAE/hB,GAASkjC,EACjBA,EAAW8P,aAAc,EACzB,IACI8a,EADAya,GAAgB,EAEhB1a,EAAOuP,cACPmL,GAAgB,EAGhBza,EAAc9tD,EAAKkzC,QAAQ3xC,OAAO+D,WAAW9D,GAAMA,IAAMqsD,IAE7D,MAAMza,GAAsB,IAAAC,gCAA+BlzB,EAASrtB,KAAKmgD,eACzEngD,KAAKwgD,SAAW,CACZpQ,aACAkQ,sBACA0a,cACAya,iBAEJz1E,KAAK4jD,gBAAgBv2B,IACrB,IAAAqzB,mBAAkBrzB,GAClB,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,IACnC,gBAAE1T,GAAoBre,GAC5B,OAAsCglD,GACtC7G,EAAIkH,gBAAgB,EAExB3gD,KAAK6gD,aAAgBpH,IACjB,MAAMxqB,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,GACd,WAAEmhB,EAAU,oBAAEkQ,EAAmB,cAAE2a,EAAa,SAAEE,GAAan7D,KAAKwgD,UACpE,KAAEtzC,GAASkjC,EACb6qB,IAAkBE,IAGtBjuD,EAAKkzC,QAAQ8Z,kBAAoB,KACjCl6D,KAAK6jD,kBAAkBx2B,GACvBrtB,KAAK8gD,gBAAgBzzB,IACrB,IAAA0zB,oBAAmB1zB,GACnBrtB,KAAK00E,eACL10E,KAAKwgD,SAAW,KAChBxgD,KAAK+/C,WAAY,EACb//C,KAAK6pE,sBACL7pE,KAAKyM,cAAcg9D,4BACnB,QAAiBr5B,EAAW4Q,gBAEhC,OAAsCV,GAClC2a,IACA,IAAAha,4BAA2B7Q,GAC/B,EAEJpwC,KAAK05C,cAAiBD,IAClBz5C,KAAK+/C,WAAY,EACjB,MAAM9wB,EAAcwqB,EAAIjnB,QAClB,QAAEnF,GAAY4B,GACd,WAAEmhB,EAAU,oBAAEkQ,EAAmB,YAAE0a,EAAW,cAAEya,EAAa,cAAExa,GAAmBj7D,KAAKwgD,SAC7FxgD,KAAKgzB,WAAW3F,EAAS+iB,EAAY,CAAE6qB,kBACvC,MAAM,KAAE/tD,GAASkjC,EACjB,GAAIqlC,EAAe,CACf,MAAM,YAAE77B,GAAgB3qB,EAClB2mD,EAAgBh8B,EAAYE,OAC5B,QAAEuwB,GAAYn9D,EAAKkzC,SACnB,cAAEkqB,GAAkBD,EAC1BC,EAAc,IAAMsL,EAAc,GAClCtL,EAAc,IAAMsL,EAAc,GAClCtL,EAAc,IAAMsL,EAAc,GAClCvL,EAAQlP,UAAW,CACvB,MACK,QAAoBn9D,IAAhBg9D,EAA2B,CAChC,MAAM,YAAEphB,GAAgB3qB,EAClB2mD,EAAgBh8B,EAAYE,OAC5B,OAAErrC,GAAWvB,EAAKkzC,QACxB3xC,EAAOxN,SAASqN,IACZA,EAAM,IAAMsnE,EAAc,GAC1BtnE,EAAM,IAAMsnE,EAAc,GAC1BtnE,EAAM,IAAMsnE,EAAc,EAAE,IAEhCxlC,EAAW70C,aAAc,CAC7B,KACK,CACD,MAAM,cAAE+gD,GAAkBrtB,EACpB3zB,GAAiB,IAAA88B,mBAAkB/K,IACnC,cAAE8zB,EAAa,cAAE7xB,GAAkBh0B,EAAeY,SAClDsjB,EAAW88B,EAAcxC,OACzB,OAAErrC,GAAWvB,EAAKkzC,QAExB,IAAIjpB,EACAD,EACAkqB,EACAnqB,EACAM,EACAD,EACAF,EACAC,EACJ,OATA5oB,EAAOusD,GAAe,IAAIx7C,GASlBw7C,GACJ,KAAK,EACL,KAAK,EACD7jC,EAAmBgqB,EAAc1yC,EAAO,IACxCwoB,EAAiBkqB,EAAc1yC,EAAO,IACtCyoB,EAAoB,CAACD,EAAe,GAAIE,EAAiB,IACzDiqB,EAAgB,CAACjqB,EAAiB,GAAIF,EAAe,IACrDK,EAAmBhI,EAAc4H,GACjCE,EAAe9H,EAAc8xB,GAC7B3yC,EAAO,GAAK6oB,EACZ7oB,EAAO,GAAK2oB,EACZ,MACJ,KAAK,EACL,KAAK,EACDF,EAAoBiqB,EAAc1yC,EAAO,IACzC2yC,EAAgBD,EAAc1yC,EAAO,IACrC0oB,EAAmB,CACfiqB,EAAc,GACdlqB,EAAkB,IAEtBD,EAAiB,CACbC,EAAkB,GAClBkqB,EAAc,IAElB7pB,EAAkBjI,EAAc6H,GAChCE,EAAgB/H,EAAc2H,GAC9BxoB,EAAO,GAAK8oB,EACZ9oB,EAAO,GAAK4oB,EAGpB+Y,EAAW70C,aAAc,CAC7B,CACAyE,KAAKwgD,SAAS2a,UAAW,GACF,IAAA/iC,mBAAkB/K,IACzC,OAAsCizB,GAClClQ,EAAW70C,cACX,IAAA+0C,2BAA0BF,EAAY/iB,EAAS,EAAAkjB,YAAYggC,eAC/D,EAEJvwE,KAAKiL,OAAUoiB,IACX,GAAIrtB,KAAK+/C,UAAW,CAChB//C,KAAK+/C,WAAY,EACjB//C,KAAK8gD,gBAAgBzzB,GACrBrtB,KAAK6jD,kBAAkBx2B,IACvB,IAAA0zB,oBAAmB1zB,GACnB,MAAM,WAAE+iB,EAAU,oBAAEkQ,EAAmB,cAAE2a,GAAkBj7D,KAAKwgD,UAC1D,KAAEtzC,GAASkjC,EAQjB,OAPAA,EAAW8P,aAAc,EACzBhzC,EAAKkzC,QAAQ8Z,kBAAoB,MACjC,OAAsC5Z,GAClC2a,IACA,IAAAha,4BAA2B7Q,GAE/BpwC,KAAKwgD,SAAW,KACTpQ,EAAW4Q,aACtB,GAEJhhD,KAAKygD,cAAiBpzB,IAClB,KAAMg0B,uBAAwB,EAC9Bh0B,EAAQ1E,iBAAiB,EAAAgH,OAAO2xB,SAAUthD,KAAK6gD,cAC/CxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO4xB,WAAYvhD,KAAK05C,eACjDrsB,EAAQ1E,iBAAiB,EAAAgH,OAAO6xB,WAAYxhD,KAAK05C,eACjDrsB,EAAQ1E,iBAAiB,EAAAgH,OAAO8xB,YAAazhD,KAAK6gD,cAClDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO+xB,UAAW1hD,KAAK6gD,cAChDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAOgyB,WAAY3hD,KAAK05C,eACjDrsB,EAAQ1E,iBAAiB,EAAAgH,OAAOiyB,UAAW5hD,KAAK6gD,aAAa,EAEjE7gD,KAAK8gD,gBAAmBzzB,IACpB,KAAMg0B,uBAAwB,EAC9Bh0B,EAAQrE,oBAAoB,EAAA2G,OAAO2xB,SAAUthD,KAAK6gD,cAClDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO4xB,WAAYvhD,KAAK05C,eACpDrsB,EAAQrE,oBAAoB,EAAA2G,OAAO6xB,WAAYxhD,KAAK05C,eACpDrsB,EAAQrE,oBAAoB,EAAA2G,OAAO8xB,YAAazhD,KAAK6gD,cACrDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO+xB,UAAW1hD,KAAK6gD,cACnDxzB,EAAQrE,oBAAoB,EAAA2G,OAAOgyB,WAAY3hD,KAAK05C,eACpDrsB,EAAQrE,oBAAoB,EAAA2G,OAAOiyB,UAAW5hD,KAAK6gD,aAAa,EAEpE7gD,KAAK4jD,gBAAmBv2B,IACpB,KAAMg0B,uBAAwB,EAC9Bh0B,EAAQ1E,iBAAiB,EAAAgH,OAAO2xB,SAAUthD,KAAK6gD,cAC/CxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO4xB,WAAYvhD,KAAK05C,eACjDrsB,EAAQ1E,iBAAiB,EAAAgH,OAAO8xB,YAAazhD,KAAK6gD,cAClDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO+xB,UAAW1hD,KAAK6gD,cAChDxzB,EAAQ1E,iBAAiB,EAAAgH,OAAOgyB,WAAY3hD,KAAK05C,eACjDrsB,EAAQ1E,iBAAiB,EAAAgH,OAAOiyB,UAAW5hD,KAAK6gD,aAAa,EAEjE7gD,KAAK6jD,kBAAqBx2B,IACtB,KAAMg0B,uBAAwB,EAC9Bh0B,EAAQrE,oBAAoB,EAAA2G,OAAO2xB,SAAUthD,KAAK6gD,cAClDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO4xB,WAAYvhD,KAAK05C,eACpDrsB,EAAQrE,oBAAoB,EAAA2G,OAAO8xB,YAAazhD,KAAK6gD,cACrDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO+xB,UAAW1hD,KAAK6gD,cACnDxzB,EAAQrE,oBAAoB,EAAA2G,OAAOgyB,WAAY3hD,KAAK05C,eACpDrsB,EAAQrE,oBAAoB,EAAA2G,OAAOiyB,UAAW5hD,KAAK6gD,aAAa,EAEpE7gD,KAAK6hD,iBAAmB,CAACvmD,EAAgBwmD,KACrC,IAAIC,GAAe,EACnB,MAAM,SAAE7lD,GAAaZ,GACf,QAAE+xB,GAAYnxB,EACpB,IAAI8lD,GAAc,QAAehiD,KAAKmgD,cAAe9yB,GACrD,IAAK20B,GAAaphD,OACd,OAAOmhD,EAGX,GADAC,EAAchiD,KAAKiiD,wCAAwC50B,EAAS20B,IAC/DA,GAAaphD,OACd,OAAOmhD,EAEX,MAAM19B,EAAWrkB,KAAKu4D,YAAYr8D,GAC5Byd,EAAkBzd,EAASmwB,qBAC3B61B,EAAiB,CACnBlH,YAAah7C,KAAKg7C,YAClBf,SAAUj6C,KAAKmgD,cACf/yB,WAAY9xB,EAAeY,SAASmN,IAExC,IAAK,IAAIK,EAAI,EAAGA,EAAIs4C,EAAYphD,OAAQ8I,IAAK,CACzC,MAAM0mC,EAAa4R,EAAYt4C,IACzB,cAAEs3C,EAAa,KAAE9zC,GAASkjC,GAC1B,OAAE3hC,EAAM,kBAAEyrD,GAAsBhtD,EAAKkzC,QACrC+B,EAAoB1zC,EAAOpI,KAAKqI,GAAMxS,EAASilD,cAAczyC,KACnEwzC,EAAelB,cAAgBA,EAC/B,MAAM,MAAE5kD,EAAK,UAAEgmD,EAAS,SAAEC,GAAariD,KAAKsiD,mBAAmB,CAC3DlS,aACA8R,oBAEE,gBAAEziC,EAAe,OAAE6iB,GAAWpmC,EAASykB,YAC7C,GAAKzT,EAAKmzC,YAAYh8B,IACqB,MAAvCnX,EAAKmzC,YAAYh8B,GAAUk2D,UAW1B,GAAInqC,EAAW70C,cAChByE,KAAK81E,+BAA+B1lC,EAAY3wB,EAAiB6iB,EAAQ3oB,EAAiBre,GACtFY,aAAoB,EAAA8zC,gBAAgB,CACpC,MAAM,kBAAEzpC,GAAsB6pC,EAAWlpC,SACzC,IAAK,MAAMmd,KAAYnX,EAAKmzC,YACxB,GAAIh8B,EAASrjB,WAAW,WAAY,CACd2Y,EAAgBg+D,oBACCj6D,MAAM8H,IACrC,MAAMoyD,EAAqB,yBAAqBrxE,GAC1CmtB,EAAclO,EAAGkO,YAAYkkD,GAC7BC,EAAkB,yBAAqBryD,EAAGia,qBAChD,OAAO/L,GAAemkD,IAAoBD,CAAkB,YAGrD1qE,EAAKmzC,YAAYh8B,EAEhC,CAER,OA5BAnX,EAAKmzC,YAAYh8B,GAAY,CACzB8gB,SAAU,KACVq1C,KAAM,KACNrrE,IAAK,KACLq0B,KAAM,KACNC,OAAQ,KACR82C,SAAU,MAEdv6E,KAAK+1E,sBAAsB3lC,EAAY3wB,EAAiB6iB,EAAQ3oB,EAAiBre,GAsBrF,IAAKY,EAASmwB,qBAEV,OADAjc,QAAQC,KAAK,uCACN0xC,EAEX,IAAI4Z,EACJ,KAAK,IAAAC,qBAAoB5a,GACrB,SAOJ,IALK,IAAA2L,oBAAmB3L,IACnBhhD,KAAKwgD,UACgB,OAAtB0Z,IACAyB,EAA2B,CAACxZ,EAAkB+X,KAE9CyB,EAA0B,CAC1B,MAAME,EAAiB,KACvB,IAAAjK,aAAe9P,EAAkBd,EAAe6a,EAAgBF,EAA0B,CACtFv/D,SAER,CACA,MAAMmmD,EAAS,GAAGvB,SACZwB,EAAe,KACrB,2BAAYV,EAAkBd,EAAewB,EAAcL,EAAmB,CAC1E/lD,QACAimD,WACAD,aACDG,GACHR,GAAe,EACf,MAAM39C,EAAUpE,KAAK20E,sBAAsBzyB,EAAgB9R,GAC3D,IAAKhsC,EAAQypB,WAAY,CACrB3gB,EAAKkzC,QAAQiqB,QAAU,CACnBlP,UAAU,EACVmP,cAAe,CAAC,EAAG,EAAG,GACtBC,iBAAkB,CACdhG,QAAS,CAAC,EAAG,EAAG,GAChBh1C,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAAC,EAAG,EAAG,GACnBg1C,YAAa,CAAC,EAAG,EAAG,KAG5B,QACJ,CACA,MAAMwR,EAAYh2E,KAAKyM,cAAc8oE,aAAaroE,EAAMmX,GACxD,IAAK2xD,GAAkC,IAArBA,EAAUp1E,OACxB,SAEJ,IAAKsM,EAAKkzC,QAAQiqB,QAAQlP,SAAU,CAChC,MAAM8a,GAAsB,IAAAC,wBAAuB/zB,GACnDj1C,EAAKkzC,QAAQiqB,QAAQC,cACjBpuE,EAASozB,cAAc2mD,EAC/B,CACA,MAAME,EAAkBj6E,EAASilD,cAAcj0C,EAAKkzC,QAAQiqB,QAAQC,eAC9DsK,EAAa,IACbwB,GAAc,IAAAC,mBAAqBv0B,EAAkBd,EAAe4zB,EAAYoB,EAAWG,EAAiBh0B,EAAmB,CAAC,EAAG/9C,IACjI9G,EAAGslD,EAAMplD,EAAGmX,EAAG,MAAE/X,EAAK,OAAEC,GAAWu5E,EAC3ClpE,EAAKkzC,QAAQiqB,QAAQE,iBAAmB,CACpChG,QAASroE,EAASozB,cAAc,CAACszB,EAAMjuC,IACvC4a,SAAUrzB,EAASozB,cAAc,CAACszB,EAAOhmD,EAAO+X,IAChD6a,WAAYtzB,EAASozB,cAAc,CAACszB,EAAMjuC,EAAM9X,IAChD2nE,YAAatoE,EAASozB,cAAc,CAACszB,EAAOhmD,EAAO+X,EAAM9X,IAEjE,CACA,OAAOklD,CAAY,EAEvB/hD,KAAK8iG,8BAAiCr0F,IAClC,MAAOy0F,EAAQ14C,GAAU/7C,EACzB,MAAO,CACHm0C,KAAM3lD,KAAKa,IAAIolG,EAAO,GAAI14C,EAAO,IACjC71C,IAAK1X,KAAKa,IAAIolG,EAAO,GAAI14C,EAAO,IAChC5tD,MAAOK,KAAK6e,IAAIonF,EAAO,GAAK14C,EAAO,IACnC3tD,OAAQI,KAAK6e,IAAIonF,EAAO,GAAK14C,EAAO,IACvC,EAELxqD,KAAK+1E,sBAAwB,CAAC3lC,EAAY3wB,EAAiB6iB,EAAQ3oB,EAAiBre,KAChF,IAAK0E,KAAKyM,cAAc6jE,eACpB,OAEJ,MAAM,KAAEpjE,GAASkjC,GACX,SAAEl0C,GAAaZ,GACf,QAAE+xB,GAAYnxB,EACd06E,EAAY1pE,EAAKkzC,QAAQ3xC,OAAO,GAChCooE,EAAY3pE,EAAKkzC,QAAQ3xC,OAAO,IAChC,YAAE4xC,GAAgBnzC,EAClB4pE,EAAYl3E,OAAO4B,KAAK6+C,GAC9B,IAAK,IAAI32C,EAAI,EAAGA,EAAIotE,EAAUl2E,OAAQ8I,IAAK,CACvC,MAAM2a,EAAWyyD,EAAUptE,GACrBlO,EAAQwE,KAAKylE,mBAAmBphD,GACtC,IAAK7oB,EACD,SAEJ,MAAM,WAAEqM,EAAU,UAAEya,EAAS,SAAEpb,EAAQ,aAAElC,GAAiBxJ,EACpDo/E,EAAY54C,EAAsB1f,EAAWs0D,GACnDgE,EAAU,GAAK39E,KAAK+Q,MAAM4sE,EAAU,IACpCA,EAAU,GAAK39E,KAAK+Q,MAAM4sE,EAAU,IACpCA,EAAU,GAAK39E,KAAK+Q,MAAM4sE,EAAU,IACpC,MAAMyB,EAAYr6C,EAAsB1f,EAAWu0D,GAInD,GAHAwF,EAAU,GAAKp/E,KAAK+Q,MAAMquE,EAAU,IACpCA,EAAU,GAAKp/E,KAAK+Q,MAAMquE,EAAU,IACpCA,EAAU,GAAKp/E,KAAK+Q,MAAMquE,EAAU,IAChCr8E,KAAKi1E,gBAAgB2F,EAAWyB,EAAWx0E,GAAa,CACxD7H,KAAK6pE,sBAAuB,EAC5B,MAMM30D,EAAY,CACd,CAPSjY,KAAKa,IAAI88E,EAAU,GAAIyB,EAAU,IACjCp/E,KAAKkS,IAAIyrE,EAAU,GAAIyB,EAAU,KAO1C,CANSp/E,KAAKa,IAAI88E,EAAU,GAAIyB,EAAU,IACjCp/E,KAAKkS,IAAIyrE,EAAU,GAAIyB,EAAU,KAM1C,CALSp/E,KAAKa,IAAI88E,EAAU,GAAIyB,EAAU,IACjCp/E,KAAKkS,IAAIyrE,EAAU,GAAIyB,EAAU,OAMxC,WAAEnB,EAAU,YAAEC,IAAgB,OAAkC17D,EAAiB6iB,EAAQs0C,EAAWC,GACpGz2B,EAAU,CAACw6B,EAAWyB,IACtB,MAAE7/E,EAAK,SAAE+9E,IAAa,QAAiC/+E,EAAO4kD,GAC9Do6B,EAAOv9E,KAAK6e,IAAIo/D,EAAaC,IAAgB3+E,EAAQA,GACrDw7E,EAAoB,CACtBz5E,aAAa,OAAoBrC,EAAUmoB,GAC3C6zD,YAAal4E,KAAKk4E,YAAYh8E,EAAUmoB,EAAU+rB,EAAWlpC,SAASX,oBAEpE6xE,GAAe,OAAmBlxE,EAASi+B,SAAUiL,EAAWlpC,SAASX,kBAAmByxE,GAC5FttC,EAAgB1lC,EAAa/D,QAAQjB,KAAKyM,cAAcusE,gBAAgBsC,cAAe,CACzFpmE,YACAoN,YACA8nB,aAAcpqC,KAAKyM,cAAcqsE,iBAE/Bn9E,EAAQqE,KAAKyM,cAAcusE,gBAAgB0C,gBACjDr7B,EAAYh8B,GAAY,CACpB8gB,SAAUj+B,EAASi+B,SACnBq1C,OACAh3C,KAAM7nC,EAAM6nC,MAAMvjC,MAClBwjC,OAAQ9nC,EAAM8nC,QAAQxjC,MACtBkP,IAAKxT,EAAMwT,KAAKlP,MAChB07E,WAAYhgF,EAAMqR,MAClB09B,cAAeA,EACf6vC,WACAnC,eAER,MAEIp4E,KAAK6pE,sBAAuB,EAC5BxpB,EAAYh8B,GAAY,CACpB8gB,SAAUj+B,EAASi+B,SAG/B,CACA,MAAM5pC,EAAc60C,EAAW70C,YAK/B,OAJA60C,EAAW70C,aAAc,EACrBA,IACA,IAAA+0C,2BAA0BF,EAAY/iB,EAAS,EAAAkjB,YAAYwmC,cAExD12B,CAAW,EAEtBrgD,KAAKi1E,gBAAkB,CAACC,EAAQC,EAAQttE,IAC5B,kCAA8BqtE,EAAQrtE,IAC1C,kCAA8BstE,EAAQttE,GAE9C7H,KAAK81E,gCAAiC,OAAS91E,KAAK+1E,sBAAuB,IAAK,CAAEQ,UAAU,GAChG,QACSv2E,KAAK60E,QAAU,CAACznD,EAAY3e,EAAQrK,KACzC,MAAM9I,GAAiB,IAAAwiE,+BAA8B1wC,GACrD,IAAK9xB,EACD,OAEJ,MAAM,oBAAE0O,EAAmB,kBAAEzD,EAAiB,gBAAEkZ,EAAe,SAAEqkB,EAAQ,SAAE5nC,GAAc8D,KAAKw2E,YAAY2vC,EAAkB7qH,EAAgBmT,EAAQrK,GAC9IgsC,EAAa,CACf4Q,cAAe58C,GAAS48C,eAAiB,qBACzC9zC,KAAM,CACFkzC,QAAS,CACL3xC,SACAyrD,kBAAmB,MAEvBroC,MAAO,GACPwuB,YAAa,CAAC,GAElBH,aAAa,EACb40B,eAAe,EACfv5E,aAAa,EACbu3E,UAAU,EACVC,WAAW,EACX7rE,SAAU,CACN+yC,SAAUnW,EAASqc,cACnB1gC,kBACAzV,sBACAzD,uBACGnC,KAGX,QAAcgsC,EAAYl0C,EAASmxB,UACnC,OAAsC,CAACnxB,EAASmN,IAAI,CACrD,EAEP,SAASmsE,EAAoBtoE,EAAMmX,GAC/B,MAAM2yD,EAAoB9pE,EAAKmzC,YAAYh8B,IACrC,KAAEm2D,EAAI,KAAEh3C,EAAI,IAAEr0B,EAAG,OAAEs0B,EAAM,SAAE82C,EAAQ,aAAEnC,GAAiBpB,EAC5D,GAAIxzC,QACA,OAEJ,MAAMwyC,EAAY,GAKlB,OAJAA,EAAUrtE,KAAK,SAAS,wBAAoB6xE,MAASD,KACrDvE,EAAUrtE,KAAK,SAAS,wBAAoB66B,MAAS40C,KACrDpC,EAAUrtE,KAAK,QAAQ,wBAAoBwG,MAAQipE,KACnDpC,EAAUrtE,KAAK,YAAY,wBAAoB86B,MAAW20C,KACnDpC,CACX,CACA,S,oRChjBA,MAAMowC,UAAkB,IACpB,WAAA3mH,CAAY45C,EAAY,CAAC,EAAGC,EAAmB,CAC3CC,0BAA2B,CAAC,QAAS,SACrC9sC,cAAe,CACXmnF,WAAY,CACRyyB,mBAAoB,KACpBC,oBAAqB,IACrBC,mBAAoB,KACpBC,oBAAqB,IACrBC,wBAAyB,IACzBC,wBAAyB,KACzBC,4CAA6C,MAEjD5yB,gBAAiB,qBACjBC,eAAgB,qBAChB4yB,UAAW,GACXC,uBAAuB,EACvBC,QAAS,CACLv+D,SAAS,EACTw+D,cAAe,CACX,EAAG,CAAC,IAAK,IAAK,IAAK,MAEvBC,cAAe,IACfC,oBAAqB,EACrBC,iBAAkB,EAClBC,WAAY,KAEhBjuD,QAAS,CACL,CAAC,EAAAkuD,kBAAkBC,eAAgB,CAC/BjuD,OAAQ,EAAAguD,kBAAkBC,cAC1BhuD,SAAU,CACN,CACIl5D,IAAK,WAIjB,CAAC,EAAAinH,kBAAkBE,eAAgB,CAC/BluD,OAAQ,EAAAguD,kBAAkBE,cAC1BjuD,SAAU,CACN,CACIl5D,IAAK,YAIjB,CAAC,EAAAinH,kBAAkBG,aAAc,CAC7BnuD,OAAQ,EAAAguD,kBAAkBG,YAC1BluD,SAAU,CACN,CACIl5D,IAAK,MAGbsM,cAAe,CACX+6G,2BAA2B,EAC3BC,wBAAwB,EACxBC,oBAAoB,IAG5BC,yBAA0B,CACtBvuD,OAAQ,EAAAguD,kBAAkBG,YAC1BluD,SAAU,CACN,CACIl5D,IAAK,MAGbsM,cAAe,CAAC,OAK5BmsC,MAAMS,EAAWC,GACjBt5C,KAAKi2D,iBAAoBxc,IACrBz5C,KAAK4pE,eAAe,EAExB5pE,KAAKk2D,iBAAmB,KACpBl2D,KAAK4pE,eAAe,EAExB5pE,KAAK27C,kBAAqBlC,IACtBz5C,KAAK4pE,eAAe,EAExB5pE,KAAKs6C,qBAAwBb,IACzB,MAAM3Z,EAAY2Z,EAAIjnB,QAChB,QAAEnF,GAAYyS,EACdxkC,GAAiB,IAAA88B,mBAAkB/K,GACzCrtB,KAAKuiG,UAAYviG,KAAK4nH,eAAev6F,GACrCrtB,KAAKygD,cAAcpzB,IACnB,IAAAqzB,mBAAkBrzB,GAClBosB,EAAIkH,iBACJ3gD,KAAK6nH,aAAaC,QAAS,EAC3B9nH,KAAK6nH,aAAaE,WAAaC,KAAKC,MACpC,MAAMC,EAAYloH,KAAKmoH,YAAcnoH,KAAKooH,gBAAgB/6F,IAC1D,OAAuC66F,EAAU5nE,qBACjD,MAAMo0C,EAAgB10F,KAAKqoH,iBAAiBh7F,GAE5C,OADArtB,KAAKsoH,4BAA4BhtH,EAAgBo5F,EAAe,EAAA0yB,kBAAkBmB,qBAC3E,CAAI,EAEfvoH,KAAKwsD,kBAAqB/S,IACtB,GAAIz5C,KAAKwgE,OAAS,EAAAhzB,UAAUH,OAAQ,CAEhC,GADArtC,KAAKiwE,aAAax2B,IACbz5C,KAAKyM,cAAcq6G,QAAQv+D,QAC5B,OAEJ,MAAM,cAAEy+D,EAAa,oBAAEC,EAAmB,iBAAEC,GAAqBlnH,KAAKyM,cAAcq6G,SAC9E,cAAExqE,EAAa,QAAEjvB,GAAYosB,EAAIjnB,QACjC,OAAE/2B,GAAW6gD,GACb,WAAElN,EAAU,MAAEo5E,EAAK,WAAET,EAAU,OAAED,GAAW9nH,KAAK6nH,aACvD,GAAIC,EACA,OAEJ,MAAMvyG,EAAQ,cAAc9Z,EAAQ2zC,GAC9Bq5E,EAAOT,KAAKC,MAAQF,EAW1B,IAVIxyG,EAAQ0xG,GACPwB,EAAOzB,GAAiBzxG,EAAQ2xG,KAC7BsB,IACA/6F,OAAO4iE,aAAam4B,GACpBxoH,KAAK6nH,aAAaW,MAAQ,MAEzBV,GACD9nH,KAAK0oH,cAAcr7F,KAGtBrtB,KAAK6nH,aAAaW,MAAO,CAC1B,MAAMA,EAAQ/6F,OAAOoC,WAAW7vB,KAAK2oH,gBAAiB,KACtD/oH,OAAO48D,OAAOx8D,KAAK6nH,aAAc,CAC7BE,WAAYC,KAAKC,MACjBO,QACAp5E,WAAY3zC,EACZ4xB,WAER,CACJ,GAEJrtB,KAAK2oH,gBAAkB,KACnB,GAAI3oH,KAAK6nH,aAAaC,OAElB,YADA9nH,KAAK6nH,aAAaW,MAAQ,MAG9BxoH,KAAK6nH,aAAaW,MAAQ,KAC1B,MAAM9zB,EAAgB10F,KAAKqoH,iBAAiBroH,KAAK6nH,aAAax6F,SACxD/xB,GAAiB,IAAA88B,mBAAkBp4B,KAAK6nH,aAAax6F,SAC3D,IAAK/xB,EACD,OAEJ,MAAM,SAAEY,GAAaZ,EACf04F,EAAiBh0F,KAAKyM,cAAcunF,eACpC40B,GAAe,OAAgB,CACjCl0B,gBACAx4F,WACA2sH,SAAU70B,IAEd,IAAKU,EACD,OAEJ,MAAM/hE,EAAO3yB,KAAKgzB,WAAW0hE,EAAc3yB,eAAgB6mD,EAAangB,0BACxEzoG,KAAK6nH,aAAaf,QAAU9mH,KAAKsoH,6BAA4B,IAAAlwF,mBAAkBp4B,KAAK6nH,aAAax6F,SAAU,IACpGqnE,KACAk0B,EACHj2F,QACD,EAAAy0F,kBAAkB0B,QAAQ,EAEjC9oH,KAAK05C,cAAiBD,IAClB,MAAM3Z,EAAY2Z,EAAIjnB,QAChB,QAAEnF,EAAO,cAAEivB,GAAkBxc,EAC7BxkC,GAAiB,IAAA88B,mBAAkB/K,GACzCrtB,KAAKiwE,aAAax2B,GAClB,MAAM,oBAAE6G,GAAwBtgD,KAAKmoH,YACrC,OAAuC7nE,GACvC,MAAM/qC,EAAQ,cAAc+mC,EAAc7gD,OAAQuE,KAAK6nH,aAAaz4E,aAC9D,WAAE+3E,EAAU,iBAAED,GAAqBlnH,KAAKyM,cAAcq6G,SACvD9mH,KAAK6nH,aAAaC,QACnBE,KAAKC,MAAQjoH,KAAK6nH,aAAaE,WAAaZ,GAC5C5xG,EAAQ2xG,IAGRlnH,KAAK6nH,aAAaW,QAClB/6F,OAAO4iE,aAAarwF,KAAK6nH,aAAaW,OACtCxoH,KAAK6nH,aAAaW,MAAQ,MAE9BxoH,KAAK6nH,aAAaf,QAAU9mH,KAAK20F,oBAAoBr5F,EAAgB0E,KAAKqoH,iBAAiBh7F,IAC3FrtB,KAAK6nH,aAAax6F,QAAUA,EAC5BrtB,KAAK6nH,aAAaE,WAAaC,KAAKC,MAAQd,EAC5CnnH,KAAK6nH,aAAaC,QAAS,EAC3B9nH,KAAK6nH,aAAaz4E,WAAakN,EAAc7gD,OAAM,EAEvDuE,KAAK6gD,aAAgBpH,IACjB,MAAM3Z,EAAY2Z,EAAIjnB,QAChB,QAAEnF,GAAYyS,EACdxkC,GAAiB,IAAA88B,mBAAkB/K,GACnCqnE,EAAgB10F,KAAKqoH,iBAAiBh7F,GACvCrtB,KAAK6nH,aAAaf,SAAY9mH,KAAK6nH,aAAaC,QACjD9nH,KAAK20F,oBAAoBr5F,EAAgBo5F,GAE7C10F,KAAK00E,eACL10E,KAAK8gD,gBAAgBzzB,IACrB,IAAA0zB,oBAAmB1zB,GACnBrtB,KAAKiwE,aAAax2B,GAClBz5C,KAAKuiG,UAAY,KACjBviG,KAAKsoH,4BAA4BhtH,EAAgBo5F,EAAe,EAAA0yB,kBAAkB2B,kBAC7E/oH,KAAK6nH,aAAaC,QACnB9nH,KAAKgpH,cAAc37F,EACvB,EAEJrtB,KAAKygD,cAAiBpzB,IAClBA,EAAQ1E,iBAAiB,EAAAgH,OAAO2xB,SAAUthD,KAAK6gD,cAC/CxzB,EAAQ1E,iBAAiB,EAAAgH,OAAO4xB,WAAYvhD,KAAK05C,eACjDrsB,EAAQ1E,iBAAiB,EAAAgH,OAAO8xB,YAAazhD,KAAK6gD,aAAa,EAEnE7gD,KAAK8gD,gBAAmBzzB,IACpBA,EAAQrE,oBAAoB,EAAA2G,OAAO2xB,SAAUthD,KAAK6gD,cAClDxzB,EAAQrE,oBAAoB,EAAA2G,OAAO4xB,WAAYvhD,KAAK05C,eACpDrsB,EAAQrE,oBAAoB,EAAA2G,OAAO8xB,YAAazhD,KAAK6gD,aAAa,CAE1E,CACA,aAAA+oB,GACI5pE,KAAKmoH,gBAAanqH,EAClBgC,KAAK0oH,eACT,CACA,YAAAz4C,CAAax2B,GACT,MAAM3Z,EAAY2Z,EAAIjnB,QAChB,QAAEnF,GAAYyS,GACd,cAAEwc,GAAkBxc,EACpBklB,EAAe1I,EAAc7gD,OACnCuE,KAAKmoH,WAAanoH,KAAKooH,gBAAgB/6F,EAAS23B,GAChDhlD,KAAKipH,iBAAiB57F,EAAS23B,GAC1BhlD,KAAKmoH,aAGV,OAAuCnoH,KAAKmoH,WAAW7nE,oBAC3D,CACA,gBAAA2oE,CAAiB57F,EAAS23B,GACtB,MAAM1pD,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,GACf,cAAEg0B,GAAkBpzB,EACpBwkB,EAASxkB,EAASykB,aAClB,UAAEimG,GAAc5mH,KAAKyM,cACrB61B,EAAS,gBAAgB5hB,EAAO4hB,OAAO,GAAI5hB,EAAO4hB,OAAO,GAAI5hB,EAAO4hB,OAAO,IAC3E7iB,EAAkB,gBAAgBiB,EAAOjB,gBAAgB,GAAIiB,EAAOjB,gBAAgB,GAAIiB,EAAOjB,gBAAgB,IAC/GypG,EAAY,cAClB,WAAWA,EAAW5mF,EAAQ7iB,GAC9B,MAAM0pG,EAAsB75F,EAAc,CACtC01B,EAAa,GACbA,EAAa,KAEXokE,EAAsB,cACtBC,EAAmB,cACnBC,EAAoB,cACpBC,EAAqB,cAC3B,IAAK,IAAI7/G,EAAI,EAAGA,GAAK,EAAGA,IACpB0/G,EAAoB1/G,GAAKy/G,EAAoBz/G,GAAK44B,EAAO54B,GAAKk9G,EAC9DyC,EAAiB3/G,GAAKy/G,EAAoBz/G,GAAK44B,EAAO54B,GAAKk9G,EAC3D0C,EAAkB5/G,GAAKy/G,EAAoBz/G,GAAKw/G,EAAUx/G,GAAKk9G,EAC/D2C,EAAmB7/G,GAAKy/G,EAAoBz/G,GAAKw/G,EAAUx/G,GAAKk9G,EAEpE,IAAK5mH,KAAKmoH,WACN,OAEJ,MAAM,YAAEqB,GAAgBxpH,KAAKmoH,YACvB,KAAEj7G,GAASs8G,OACIxrH,IAAjBkP,EAAKkzC,UACLlzC,EAAKkzC,QAAU,CAAC,GAEpBlzC,EAAKkzC,QAAQ3xC,OAAS,CAClB26G,EACAC,EACAC,EACAC,GAEJ,MAAMv1B,EAAiBh0F,KAAKyM,cAAcunF,eACpC60B,EAAW7oH,KAAKyM,cAAcmnF,WAAWI,GACG,mBAAvC60B,GAAUY,0BACjBZ,EAASY,yBAAyB,CAC9Bh9G,cAAezM,KAAKyM,cACpBvQ,aAGRgR,EAAK3R,aAAc,CACvB,CACA,aAAAmgF,CAAcruD,EAASk7E,GACnB,IAAKl7E,EACD,OAEJ,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,GAEzC,OADcrtB,KAAKsoH,4BAA4BhtH,EAAgB0E,KAAKqoH,iBAAiBh7F,GAAU,EAAA+5F,kBAAkBsC,cAAenhB,EAEpI,CACA,aAAAmgB,CAAcr7F,EAAUrtB,KAAK6nH,aAAax6F,SACtC,IAAKA,EACD,OAEJrtB,KAAK00E,eACL,MAAMp5E,GAAiB,IAAA88B,mBAAkB/K,GACzCrtB,KAAKsoH,4BAA4BhtH,EAAgB0E,KAAKqoH,iBAAiBh7F,GAAU,EAAA+5F,kBAAkBE,eACnGtnH,KAAK6nH,aAAaf,QAAU,KAC5B9mH,KAAK6nH,aAAaC,QAAS,CAC/B,CACA,aAAAkB,CAAc37F,EAAUrtB,KAAK6nH,aAAax6F,SACjCA,GAGLurB,MAAMowE,cAAc37F,EACxB,CACA,WAAAs8F,CAAYt8F,EAASusC,GACjB,IAAKvsC,EACD,OAEJ,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,GACzCrtB,KAAK6nH,aAAaf,QAAU9mH,KAAKsoH,4BAA4BhtH,EAAgB0E,KAAKqoH,iBAAiBh7F,GAAU,EAAA+5F,kBAAkBG,YAAa3tD,EAAOntD,eACnJzM,KAAK6nH,aAAaC,QAAS,CAC/B,CACA,qBAAA8B,GACI,QAAwB5rH,IAApBgC,KAAKmoH,WACL,OAEJ,MAAM,KAAEj7G,GAASlN,KAAKmoH,WAAWqB,aAC3B,SAAEttH,GAAa8D,KAAKmoH,WAC1Bj7G,EAAK3R,aAAc,EACnB,MAAM,aAAE84F,GAAiBr0F,KAAK6pH,0BAA0B3tH,IAAa,CAAC,EACtE8D,KAAKmoH,WAAWqB,YAAYtiH,SAASmtF,aAAeA,CACxD,CACA,gBAAAxyC,CAAiBvmD,EAAgBwmD,GAC7B,IAAK9hD,KAAKmoH,WACN,OAEJ,MAAM,SAAEjsH,GAAaZ,EAErB,IAD4B0E,KAAKmoH,WAAW7nE,oBACnBzlC,SAAS3e,EAASmN,IACvC,OAEJ,MAAMmgH,EAAcxpH,KAAKmoH,WAAWqB,YACpC,IAAqC,IAAjCA,EAAYt8G,KAAK3R,YAAsB,CACvC,MAAM,aAAEypD,GAAiBhlD,KAAKmoH,YACxB,QAAE96F,GAAYnxB,EACpB8D,KAAKipH,iBAAiB57F,EAAS23B,EACnC,CACA,MAAM4vC,EAAe40B,EAAYtiH,SACjC,IAAK0tF,EACD,OAEJ,MAAM5zC,EAAgB4zC,EAAak1B,eAC7B58G,EAAOs8G,EAAYt8G,MACnB,OAAEuB,GAAWvB,EAAKkzC,QAClB+B,EAAoB1zC,EAAOpI,KAAKqI,GAAMxS,EAASilD,cAAczyC,KAC7D69D,EAASpqB,EAAkB,GAC3BxtC,EAAMwtC,EAAkB,GACxBvrC,EAAS,CACX3Z,KAAK+Q,OAAOu+D,EAAO,GAAK53D,EAAI,IAAM,GAClC1X,KAAK+Q,OAAOu+D,EAAO,GAAK53D,EAAI,IAAM,IAEhCquB,EAAS/lC,KAAK6e,IAAIywD,EAAO,GAAKtvE,KAAK+Q,OAAOu+D,EAAO,GAAK53D,EAAI,IAAM,IAChEvY,EAAQ,OAAOw4F,EAAaP,cAAc3zF,MAAM,EAAG,IAAM,CAAC,EAAG,EAAG,MACtE,IAAKxE,EAASmwB,qBAEV,YADAjc,QAAQC,KAAK,wCAIjB,IAAA6hD,YAAcpQ,EAAkBd,EADd,IACwCpqC,EAAQosB,EAAQ,CACtE5mC,QACAimD,SAAuD,IAA7CriD,KAAK+pH,uBAAuBj6B,aAAqB,CAAC,EAAG,GAAK,OAExE,MAAM,sBAAEk6B,GAA0BhqH,KAAKyM,eAAew9G,WAAa,CAC/DD,sBAAuB,GAE3B,GAAIA,EAAuB,CACvB,MAAME,EAAa,KACnB,IAAAh4D,YAAcpQ,EAAkBd,EAAekpE,EAAYtzG,EAAQozG,EAAuB,CACtF5tH,SAER,CACJ,EAEJgqH,EAAUnsE,SAAW,QACrB,S,8OC7We,MAAM05C,UAAyB,YACjC3zF,KAAKmqH,YAAc,CACxBrD,QAAS,KACTz5F,QAAS,KACT06F,WAAY,EACZS,MAAO,KACPp5E,WAAY,CAACg7E,IAAKA,KAClBtC,QAAQ,EACT,CACH,WAAAroH,CAAY45C,EAAWC,GACnBV,MAAMS,EAAWC,GACjBt5C,KAAKqqH,QAAU,IAAI74G,IACnBxR,KAAKsqH,gBAAkB,IAAI94G,IAC3BxR,KAAK+pH,uBAAyB,CAC1Bj6B,aAAc,KACdy6B,iBAAiB,EACjBC,iBAAiB,EACjBC,eAAgB,GAExB,CACA,mBAAAC,CAAoBjxE,GAChB,MAAM,GAAEpwC,EAAE,cAAEqpB,GAAkB+mB,EAAIjnB,OAClC,GAAsB,aAAlBE,EAAJ,CAGA,GAAI1yB,KAAKsqH,gBAAgBjnH,IAAIgG,GAAK,CAC9BrJ,KAAKmoH,WAAa,KAClB,MAAMwC,EAAW3qH,KAAKsqH,gBAAgBlqH,IAAIiJ,GACpCgkB,EAAUs9F,GAAUt9F,QACpBqnE,EAAgB10F,KAAKqoH,iBAAiBh7F,GAC5CqnE,EAAc5E,aAAe66B,GAAU76B,aACnCziE,GACArtB,KAAKsoH,6BAA4B,IAAAlwF,mBAAkB/K,GAAUqnE,EAAe,EAAA0yB,kBAAkBC,cAEtG,CACArnH,KAAK6nH,aAAaC,QAAS,CAX3B,CAYJ,CACA,gBAAID,GACA,OAAOl0B,EAAiBw2B,WAC5B,CACA,UAAAn3F,CAAW+uC,EAAgB0mC,GACvB,MAAMmiB,EAAiBniB,EAAyBp/F,GAChD,GAAIrJ,KAAK2yB,MACL3yB,KAAK2yB,KAAK81E,2BAA6BA,EACvC,OAAOzoG,KAAK2yB,KAEhB,IAAIA,EAAO3yB,KAAKqqH,QAAQjqH,IAAIwqH,GAY5B,OAXKj4F,EAKGA,EAAKk4F,mBACLl4F,EAAO,qBAAgCovC,EAAgB0mC,GACvDzoG,KAAKqqH,QAAQnqH,IAAI0qH,EAAgBj4F,KANrCA,EAAO,qBAAgCovC,EAAgB0mC,GACvDzoG,KAAKqqH,QAAQnqH,IAAI0qH,EAAgBj4F,IAQrC3yB,KAAK2yB,KAAOA,EACLA,CACX,CACA,cAAAi1F,CAAev6F,GACX,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,EACf44F,GAAqB,OAAsBh4F,EAASmN,IAC1D,IAAK6qF,EAAoB,CACrB,MAAMzS,EAAQ,IAAIlvD,YAAY,EAAAmb,MAAA,OAAao9E,YAAa,CACpDt4F,OAAQ,CACJ1rB,KAAM,eACNikH,QAAS,qGAEbC,YAAY,IAGhB,OADA,EAAA34F,YAAYC,cAAcmvD,GACnB,IACX,CACA,MAAM,eAAE1f,GAAmBmyB,EACrBC,GAAiB,IAAAgqB,yBAAwBp8C,IACzC,mBAAEuyB,IAAuB,OAAgBvyB,GAO/C,OANiB/hE,KAAKg1F,YAAY,CAC9B94F,WACAo4F,qBACAH,iBACApyB,kBAGR,CACA,WAAAizB,EAAY,SAAE94F,EAAQ,mBAAEo4F,EAAkB,eAAEH,EAAc,eAAEpyB,IACxD,GAAI7lE,aAAoB,EAAAuoD,mBAAoB,CACxC,MAAM,SAAE35C,GAAawpF,EAAmB,IAA4BryB,UAC9DgpD,EAAS/uH,EAAS4kB,YAExB,GADwB5kB,aAAoB,IACvB,CACjB,MAAMulF,EAAQ,IAAIlvD,YAAY,EAAAmb,MAAA,OAAao9E,YAAa,CACpDt4F,OAAQ,CACJ1rB,KAAM,eACNikH,QAAS,2DAEbC,YAAY,IAGhB,OADA,EAAA34F,YAAYC,cAAcmvD,GACnB,IACX,CACA,MAAMypC,EAAUD,EAAO5kH,KAAK0P,GAAe,EAAAyb,MAAM7M,UAAU5O,EAAWgL,gBAChE87F,EAAqB,EAAArrF,MAAM7M,UAAU7Z,GACrCqgH,EAAgCD,EAAQxtG,MAAMsG,GAAW,oBAAgBA,EAAOnc,WAAYg1G,EAAmBh1G,eAAciD,UAAYogH,EAAQ,IAAIpgH,SAC3J,MAAO,CACHA,WACA81B,mBAAoB5gC,KAAKyM,cAAcw9G,WAAWn/G,UAC9CqgH,EACJh3B,iBAER,CACK,CACD,MAAMK,GAAsB,QAAqCt4F,EAASmN,GAAI04D,GAC9E,IAAKyyB,EACD,OAEJ,MAAO,CACHrwF,QAASqwF,EACTL,iBAER,CACJ,CACA,eAAAi0B,CAAgB/6F,EAAS23B,GACrB,MAAM1pD,GAAiB,IAAA88B,mBAAkB/K,IACnC,SAAEnxB,GAAaZ,EACfolB,EAASxkB,EAASykB,aAClB,gBAAElB,EAAe,OAAE6iB,GAAW5hB,EAC9B4/B,EAAsB,CAACpkD,EAASmN,KAChC,aAAEymF,EAAY,eAAE/tB,EAAc,aAAEsyB,GAAiBr0F,KAAK6pH,0BAA0B3tH,IAAa,CAAC,EAYpG,MAAO,CACHstH,YAZgB,CAChBtiH,SAAU,CACNuY,gBAAiB,IAAIA,GACrB6iB,OAAQ,IAAIA,GACZt4B,oBAAqB9N,EAAS+jD,yBAC9B15C,kBAAmB,GACnB0zC,SAAUj6C,KAAKmgD,cACfk0C,gBAEJnnF,KAAM,CAAC,GAIP83C,eACA8qC,eACA5zF,WACA6lE,iBACAsyB,eACA/zC,sBAER,CACA,yBAAAupE,CAA0B3tH,GACtB,MAAMkxB,EAAalxB,EAASmN,GACtB+hH,GAAuB,OAAsBh+F,GACnD,IAAKg+F,EACD,OAEJ,MAAM,eAAErpD,GAAmBqpD,EACrBt7B,GAAe,OAAsB/tB,GAC3C,IAAK+tB,EACD,OAGJ,MAAO,CACHA,eACA/tB,iBACAsyB,cAJiB,IAAAkN,sBAAqBn0E,EAAY20C,EAAgB+tB,GAM1E,CACA,gBAAAu4B,CAAiBh7F,GACb,MAAMmzB,EAAWxgD,KAAKuiG,WAAaviG,KAAK4nH,eAAev6F,IACjD,aAAEyiE,EAAY,eAAE/tB,EAAc,YAAEynD,GAAgBxpH,KAAKmoH,YAAcnoH,KAAKooH,gBAAgB/6F,IACxF,KAAEngB,EAAI,SAAEhG,EAAW,CAAC,GAAMsiH,GAAe,CAAC,GAC1C,gBAAE/pG,EAAe,OAAE6iB,GAAWp7B,EAC9BmkH,EAAcrrH,KAAKyM,cAAcq6G,SAASC,gBAAgBj3B,IAC1D,SAAE5zF,IAAa,IAAAk8B,mBAAkB/K,GACjCgnE,GAAe,IAAAkN,sBAAqBrlG,EAASmN,GAAI04D,EAAgB+tB,GACvE,IAAKu7B,IAAgBh3B,EACjB,OAEJ,IAAIi3B,EAAe,KAAMC,EAAsB,KAC3CvrH,KAAKyM,cAAcq6G,QAAQv+D,UAC3B+iE,EAAeD,GAqJ3B,SAAsBr0G,EAAGC,EAAGC,EAAGgF,EAAGsvG,EAAS,IACvC,MAAO,CACHvuH,KAAKmkB,MAAMpK,GAAK,IAAMA,GAAKw0G,GAC3BvuH,KAAKmkB,MAAMnK,GAAK,IAAMA,GAAKu0G,GAC3BvuH,KAAKmkB,MAAMlK,GAAK,IAAMA,GAAKs0G,GAC3BtvG,EAER,CA5J0CuvG,IAAgBp3B,GAC9Ck3B,EAAsB,KAkB1B,MAhBsB,IACf/qE,EACH/xC,OAAQvB,GAAMkzC,SAAS3xC,OACvBqhF,eACArwE,kBACAisG,gBAAiB1rH,KAAK6nH,aAAaC,OACnC9sE,YAAah7C,KAAKg7C,YAClB+mB,iBACAz/B,SACAynF,uBAAwB/pH,KAAK+pH,uBAC7B/1B,eAAgBh0F,KAAKyM,cAAcunF,eACnCvnF,cAAezM,KAAKyM,cACpB6+G,eACAC,sBACAv4F,WAAYhzB,KAAKgzB,WAAWxiB,KAAKxQ,MAGzC,CACA,UAAA2rH,CAAWt+F,EAAUrtB,KAAK6nH,aAAax6F,QAASjpB,GAC5C,MAAM,aAAEyjH,GAAiB7nH,KACnB4rH,EAAexnH,GAASwnH,cACT,IAAjBA,EACA5rH,KAAKgpH,cAAc37F,IAEG,IAAjBu+F,GACL5rH,KAAK0oH,cAAcr7F,GAEvB,MAAM/xB,GAAiB,IAAA88B,mBAAkB/K,GACnC46E,EAAUjoG,KAAKsoH,4BAA4BhtH,EAAgB0E,KAAKqoH,iBAAiBh7F,GAAU,EAAA+5F,kBAAkByE,YAEnH,OADAhE,EAAaC,QAAS,EACf7f,CACX,CACA,aAAAygB,CAAcr7F,EAAUrtB,KAAK6nH,aAAax6F,SACtC,IAAKA,EACD,OAEJrtB,KAAK00E,eACL,MAAMp5E,GAAiB,IAAA88B,mBAAkB/K,GACzCrtB,KAAKsoH,4BAA4BhtH,EAAgB0E,KAAKqoH,iBAAiBh7F,GAAU,EAAA+5F,kBAAkBE,eACnGtnH,KAAK6nH,aAAaf,QAAU,KAC5B9mH,KAAK6nH,aAAaC,QAAS,CAC/B,CACA,aAAAkB,CAAc37F,EAAUrtB,KAAK6nH,aAAax6F,SACtC,IAAKA,EACD,OAEJ,MAAMqnE,EAAgB10F,KAAKqoH,iBAAiBh7F,GACxCrtB,KAAK2yB,MAAQ3yB,KAAK2yB,KAAKtpB,IACvBrJ,KAAKsqH,gBAAgBpqH,IAAIF,KAAK2yB,KAAKtpB,GAAI,CACnCgkB,UACAyiE,aAAc4E,EAAc5E,eAGpC,MAAMx0F,GAAiB,IAAA88B,mBAAkB/K,GACzCrtB,KAAKsoH,4BAA4BhtH,EAAgBo5F,EAAe,EAAA0yB,kBAAkBC,eAClFrnH,KAAK00E,eACL10E,KAAK6nH,aAAaf,QAAU,KAC5B9mH,KAAK6nH,aAAaC,QAAS,CAC/B,CACA,iCAAOgE,CAA2B5vH,EAAUkI,GACxC,MAAM2nH,EAAiB3nH,GAAS2nH,iBAAkB,EAC5C/pE,GAAc,IAAAyY,qBACduxD,GAAkB,IAAAvH,6BAA4BvoH,EAAU8lD,GAC9D,IAAKgqE,GAAiBprH,OAClB,OAEJ,MAAMqrH,EAAqBD,EAAgBl3G,QAAQs7B,GAAeA,EAAWljC,KAAKmiC,SAASohC,UAAU7vE,SACrG,IAAKqrH,EAAmBrrH,OACpB,OAEJ,MAQMkmH,EARgB,IAAInzB,EAAiB,CAAC,EAAG,CAC3ClnF,cAAe,CACXmnF,WAAY,CACRyyB,mBAAoB,EAAA6F,kBAExBl4B,eAAgB,wBAGM23B,WAAWzvH,EAASmxB,UAC5C,KAAEsF,EAAI,eAAEovC,GAAmB+kD,EAC3BqF,EAAgBx5F,GAAM3tB,aACtBonH,EAAqBD,EAAcE,oBAAsBF,GACzD,WAAEtkH,GAAeskH,EACjB7pG,EAAYpmB,EACbs+C,kBACArkC,MAAMoM,YACNC,eACL,IAAK,MAAM4tB,KAAc67E,EAAoB,CACzC,MAAM/2G,EAAY,CACd,CAACyB,KAAWA,KACZ,CAACA,KAAWA,KACZ,CAACA,KAAWA,OAEV,SAAE85D,GAAargC,EAAWljC,KAAKmiC,QACrC,IAAK,MAAM/gC,KAASmiE,EAAU,CACPnuD,EAAUmV,aAAanpB,GAC/BrN,SAAQ,CAACwO,EAAGg/B,KACnBv5B,EAAUu5B,GAAK,GAAKxxC,KAAKa,IAAIoX,EAAUu5B,GAAK,GAAIh/B,GAChDyF,EAAUu5B,GAAK,GAAKxxC,KAAKkS,IAAI+F,EAAUu5B,GAAK,GAAIh/B,EAAE,GAE1D,CACAyF,EAAUjU,SAAQ,CAACqrH,EAAO79E,KACtB69E,EAAM,GAAKrvH,KAAKmkB,MAAMnkB,KAAKkS,IAAI,EAAGm9G,EAAM,KACxCA,EAAM,GAAKrvH,KAAKmkB,MAAMnkB,KAAKa,IAAI+J,EAAW4mC,GAAO,EAAG69E,EAAM,IAAI,IAElE,MAAMC,GAAc,OAAsBxqD,GACpC3yB,EAAagB,EAAWljC,KAAKkzC,UAAU,IAAMqwB,EAAS,GACtD+7C,EAAalqG,EAAUmV,aAAa2X,GAAY/oC,IAAIpJ,KAAKmkB,OACzDqrG,EAAaL,EAAmB/zC,cAAcm0C,IAAe,EACnE,IAAIE,GAAe,EACfC,GAAmB,EACvB,IAAK,MAAMC,KAAan8C,EAAU,CAC9B,MAAMo8C,EAAYvqG,EAAUmV,aAAam1F,GAAWvmH,IAAIpJ,KAAKmkB,OACvD0rG,EAAYV,EAAmB/zC,cAAcw0C,GAC/CC,IAAcL,EACdC,GAAe,EAEVI,GAAa,IAClBH,GAAmB,EAE3B,CACA,MACM78B,EADU48B,GAAgBC,EAE1BF,EACe,IAAfA,EACIF,EACA,EACV,IAAK,IAAI7iH,EAAIwL,EAAU,GAAG,GAAIxL,GAAKwL,EAAU,GAAG,GAAIxL,IAChD,IAAK,IAAIuI,EAAIiD,EAAU,GAAG,GAAIjD,GAAKiD,EAAU,GAAG,GAAIjD,IAChD,IAAK,IAAII,EAAI6C,EAAU,GAAG,GAAI7C,GAAK6C,EAAU,GAAG,GAAI7C,IAAK,CACrD,MAAMq6B,EAAapqB,EAAUS,aAAa,CAACrZ,EAAGuI,EAAGI,KAC7B,IAAA06G,yBAAwBrgF,EAAY+jC,IAEpD07C,EAAca,SAAStjH,EAAGuI,EAAGI,EAAGy9E,EAExC,CAGJi8B,IACA,IAAA5iE,kBAAiB/Y,EAAW4Q,cAEpC,CACA,MAAMisE,EAASd,EAAce,4BAC7B,IAAA1zB,iCAAgCz3B,EAAgBkrD,EACpD,E,sKClVJ,MAAM,sBAAEjrF,EAAqB,QAAEnJ,GAAY,YACrCs0F,EAAmB,CACrB,CAAC,EAAA/F,kBAAkBgG,YAAc14B,IAC7B,MAAM,OAAEjmF,EAAM,SAAEvS,EAAQ,sBAAEmxH,GAA2B34B,EACrD,IAAKjmF,EACD,OAEJ,MAAMmI,EAAS,gBAAgB,EAAG,EAAG,GACrCnI,EAAOxN,SAASqN,IACZ,SAASsI,EAAQA,EAAQtI,EAAM,IAEnC,WAAWsI,EAAQA,EAAQ,EAAInI,EAAO7N,QACtC8zF,EAAc54C,YAAcllC,EAC5B89E,EAAc44B,UAAYtrF,EAAsBqrF,EAAuBz2G,GACvE,MAAMurC,EAAoB1zC,EAAOpI,KAAKqI,GAAMxS,EAASilD,cAAczyC,MAC5D0yC,EAAelqB,IAAqB,IAAAmiD,yBAAwBl3B,GAC7D/qB,EAAel7B,EAASozB,cAAc8xB,GACtC9pB,EAAmBp7B,EAASozB,cAAc4H,GAC1Cq2F,EAAmB9+G,EAAOpI,KAAKyzC,GAC1B9X,EAAsBqrF,EAAuBvzE,KAElD5kC,GAAY,IAAAs4G,8BAA6BD,EAAkBF,EAAsBvqG,iBACvF4xE,EAAcnZ,WAAakyC,EAAqB,CAC5Cr2F,eACAE,mBACA1gB,WAEJ89E,EAAcg5B,oBAAsBx4G,CAAS,GAGrD,SAASu4G,EAAqBE,GAC1B,MAAM,aAAEv2F,EAAY,iBAAEE,EAAgB,OAAE1gB,GAAW+2G,EAC7C5yC,EAAU99E,KAAK6e,IAAIsb,EAAa,GAAKE,EAAiB,IAAM,EAC5D0jD,EAAU/9E,KAAK6e,IAAIsb,EAAa,GAAKE,EAAiB,IAAM,EAC5D2jD,EAAUh+E,KAAK6e,IAAIsb,EAAa,GAAKE,EAAiB,IAAM,EAC5D0L,EAAS/lC,KAAKkS,IAAI4rE,EAASC,EAASC,GAC1C,GAAIpiD,EAAQkiD,EAAS/3C,IACjBnK,EAAQmiD,EAASh4C,IACjBnK,EAAQoiD,EAASj4C,GAAS,CAC1B,MAAM4qF,EAAY,CACdh3G,SACAosB,SACA6qF,QAAS7qF,EAASA,GAEtB,OAAQuI,IAAa,OAAcqiF,EAAWriF,EAClD,CACA,MAAMuvC,EAAa,CACflkE,OAAQA,EACRmkE,UACAC,UACAC,YAEE,cAAE6yC,IAAkB,IAAAC,4BAA2BjzC,EAAY,CAAC,GAClE,OAAOgzC,CACX,CACA,MAAME,EAAkB,IAAI,IAAc,SAAU,IAAaC,WAAY,IAAaC,SAAUf,EAAkB,IAAagB,sBAAuB,IAAarH,QAAS,IAAasH,oBACvLC,EAA4B,IAAI,IAAc,kBAAmB,IAAaJ,WAAY,IAAaC,SAAUf,EAAkB,IAAagB,sBAAuB,IAAaG,iBAAkB,IAAarE,UAAW,IAAanD,QAAS,IAAa72B,cAAe,IAAam+B,oBAC7RlC,EAAmB8B,EAAgBO,iBACnCC,EAAwBH,EAA0BE,gB,qJCzDxD,MAAM,sBAAEvsF,GAA0B,YAC5BysF,EAAsB,CACxB,CAAC,EAAArH,kBAAkBgG,YAAc14B,IAC7B,MAAM,OAAEjmF,EAAM,kBAAEigH,EAAiB,SAAExyH,EAAQ,sBAAEmxH,EAAqB,yBAAE5kB,GAA8B/T,EAClG,IAAKjmF,EACD,OAEJ,MAAMmI,EAAS,gBAAgB,EAAG,EAAG,GACrCnI,EAAOxN,SAASqN,IACZ,SAASsI,EAAQA,EAAQtI,EAAM,IAEnC,WAAWsI,EAAQA,EAAQ,EAAInI,EAAO7N,QACtC8zF,EAAc54C,YAAcllC,EAC5B89E,EAAc44B,UAAYtrF,EAAsBqrF,EAAuBz2G,GACvE,MAAM,UAAE1B,EAAS,eAAEi1B,GAK3B,SAAgCjuC,EAAUuS,EAAQ4+G,GAC9C,IAAIsB,EAAsBlgH,EAAOpI,KAAKyzC,GAC3B9X,EAAsBqrF,EAAuBvzE,KAExD60E,EAAsBA,EAAoBtoH,KAAKiI,GACpCA,EAAMjI,KAAKuoH,GACP3xH,KAAKmkB,MAAMwtG,OAG1B,MAAM15G,GAAY,IAAAs4G,8BAA6BmB,EAAqBtB,EAAsBvqG,iBACpF+rG,EAAkB3yH,aAAoB,EAAAm8B,cACtCy2F,EAAYD,IAAmB,OAAuBF,GACtD1mH,EAAYolH,EAAsB3qG,eAClC5a,EAAUulH,EAAsB0B,cAChC,gBAAEtvG,GAAoBvjB,EAASykB,YAC/BquG,EAAM,wCAAoC,CAC5C/mH,YACAH,WACD2X,GACGwvG,GAAkB,IAAAroB,gCAA+Bn4F,GACvD,KAAMygH,EAAMC,IAAQC,EAAMC,IAAQC,EAAMC,IAASN,EACjDC,GAAQF,EACRG,GAAQH,EACRI,GAAQJ,EACRK,GAAQL,EACRM,GAAQN,EACRO,GAAQP,EACR,MAAM7kF,EAAiB2kF,EACjB,KAAM,EACLvjF,IACC,MAAOjuC,EAAGE,EAAGqR,GAAK08B,EAIlB,OAHgBjuC,GAAK4xH,GAAQ5xH,GAAK6xH,IAClB3xH,GAAK4xH,GAAQ5xH,GAAK6xH,KAClBxgH,GAAKygH,GAAQzgH,GAAK0gH,EACE,EAE5C,MAAO,CAAEr6G,YAAWi1B,iBACxB,CA1C8CqlF,CAAuBtzH,EAAUuS,EAAQ4+G,GAC/E34B,EAAcnZ,WAAapxC,EAC3BuqD,EAAcg5B,oBAAsBx4G,CAAS,GAyCrD,MAAMu6G,EAAqB,IAAI,IAAc,YAAa,IAAaxB,WAAY,IAAaC,SAAUO,EAAqB,IAAaN,sBAAuB,IAAarH,QAAS,IAAasH,oBAChMsB,EAA+B,IAAI,IAAc,qBAAsB,IAAazB,WAAY,IAAaC,SAAUO,EAAqB,IAAaN,sBAAuB,IAAaG,iBAAkB,IAAarE,UAAW,IAAanD,QAAS,IAAa72B,cAAe,IAAam+B,oBACtSuB,EAAsBF,EAAmBlB,iBACdmB,EAA6BnB,gB,0LCP9D,SAASqB,EAAkC1zH,EAAUsjB,EAAUC,GAC3D,MAAMrZ,EAAWlK,EAAS23B,cAC1B,IAAKztB,IAAaA,EAASxF,OACvB,OAEJ,MAAMmb,EAAqB3V,EAASC,KAAKlC,IACrC,MAAM,qBAAE6D,GAAyB,EAAAspB,SAAA,IAAa,mBAAoBntB,GAC5D6X,EAMd,SAAkCwD,EAAUqwG,EAAsBpwG,GAC9D,MAAMQ,EAAM,cACZ,SAASA,EAAKT,EAAUqwG,GACxB,MAAMtyE,EAAM,SAASt9B,EAAKR,GAC1B,OAAOxiB,KAAK6e,IAAIyhC,EACpB,CAXyBuyE,CAAyBtwG,EAAUxX,EAAsByX,GAC1E,MAAO,CAAEtb,UAAS6X,WAAU,IAGhC,OADAD,EAAmBE,MAAK,CAACC,EAAGhF,IAAMgF,EAAEF,SAAW9E,EAAE8E,WAC1CD,EAAmB,GAAG5X,OACjC,C,gDCjEA,QATA,SAAuC+Q,EAAW66G,GAC9C,MAAMC,EAAmB96G,EAAU1C,WAAU,EAAE1U,EAAKqR,KAASrR,IAAQqR,IACrE,IAA0B,IAAtB6gH,EACA,MAAM,IAAI5xH,MAAM,uDAIpB,OAFA8W,EAAU86G,GAAkB,IAAMD,EAClC76G,EAAU86G,GAAkB,IAAMD,EAC3B76G,CACX,C,2RCPO,SAAS+6G,EAAiC7/E,GAC7C,GAAIA,EAAW8/E,oBACX,OAEJ,IAAK9/E,EAAWljC,KAAKoiF,aACjB,MAAM,IAAIlxF,MAAM,kFAEpB,MAAM,eAAE2jE,EAAc,aAAE+tB,GAAiB1/C,EAAWljC,KAAKoiF,aACnDA,GAAe,OAAgBvtB,GAChCutB,EAAagF,mBAAmB0M,UACjC1R,EAAagF,mBAAmB0M,QAAU,CAAEua,kBAAmB,IAAI/pG,MAEvE,IAAI,kBAAE+pG,GAAsBjsB,EAAagF,mBAAmB0M,QACvDua,IACDA,EAAoB,IAAI/pG,KAE5B,IAAI2+G,EAAqB5U,GAAmBn7G,IAAI0vF,GAC3CqgC,IACDA,EAAqB,IAAIp3F,IACzBwiF,EAAkBr7G,IAAI4vF,EAAcqgC,IAExC5U,EAAkBr7G,IAAI4vF,EAAcqgC,EAAmB7sH,IAAI8sC,EAAW4Q,eAC1E,C,+QCrBA,MAAM,QAAEnoB,GAAY,YACL,SAAS2tD,EAAwBp2C,EAAY4qB,GACxD,MAAM,SAAEyV,GAAargC,EAAWljC,KAAKmiC,SAC/B,OAAE5gC,GAAW2hC,EAAWljC,KAAKkzC,SAC7B,OAAEx/C,GAAW6N,EACnB,GAAIusD,IAAgBp6D,EAChB,OAAO6vE,EAAS7vE,OAKpB,GAHIo6D,EAAc,IACdA,GAAeA,EAAcp6D,GAAUA,GAEvB,IAAhBo6D,EACA,OAAO,EAEX,MAAMD,EAAStsD,EAAOusD,GAChBxyD,EAAQioE,EAASj+D,WAAWlE,GAAUuqB,EAAQkiC,EAAQzsD,KAC5D,IAAe,IAAX9F,EACA,OAAOA,EAEX,IAAI4nH,EAAkBz5G,IACtB,OAAO85D,EAASp0C,QAAO,CAAC8uC,EAAc78D,EAAO+hH,KACzC,MAAMr0G,EAAW,qBAAqB1N,EAAOysD,GAC7C,OAAI/+C,EAAWo0G,GACXA,EAAkBp0G,EACXq0G,GAEJllD,CAAY,IACnB,EACR,C,6FCkFA,QA/GA,SAAkBh+D,EAAMmjH,EAAMlsH,GAC1B,IAAImsH,EAAUC,EAAUC,EAAS70F,EAAQ80F,EAASC,EAC9CC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTv6C,GAAW,EACf,MAAMw6C,GAAUT,GAAiB,IAATA,GAAsD,mBAAjC7iG,OAAOmjE,sBACpD,GAAoB,mBAATzjF,EACP,MAAM,IAAI6jH,UAAU,uBASxB,SAASC,EAAWxI,GAChB,MAAM9gB,EAAO4oB,EACPW,EAAUV,EAIhB,OAHAD,EAAWC,OAAWxyH,EACtB4yH,EAAiBnI,EACjB7sF,EAASzuB,EAAKiW,MAAM8tG,EAASvpB,GACtB/rE,CACX,CACA,SAASu1F,EAAWC,EAAad,GAC7B,OAAIS,EACOtjG,OAAOmjE,sBAAsBwgC,GAEjCvhG,WAAWuhG,EAAad,EACnC,CAoBA,SAASe,EAAa5I,GAClB,MAAM6I,EAAoB7I,EAAOkI,EAEjC,YAAyB3yH,IAAjB2yH,GACJW,GAAqBhB,GACrBgB,EAAoB,GACnBR,GAJuBrI,EAAOmI,GAIGH,CAC1C,CACA,SAASc,IACL,MAAM9I,EAAOT,KAAKC,MAClB,GAAIoJ,EAAa5I,GACb,OAAO+I,EAAa/I,GAExBiI,EAAUS,EAAWI,EArBzB,SAAuB9I,GACnB,MACMgJ,EAAsBhJ,EAAOmI,EAC7Bc,EAAcpB,GAFM7H,EAAOkI,GAGjC,OAAOG,EACD7zH,KAAKa,IAAI4zH,EAAajB,EAAUgB,GAChCC,CACV,CAcuCC,CAAclJ,GACrD,CACA,SAAS+I,EAAa/I,GAElB,OADAiI,OAAU1yH,EACNu4E,GAAYg6C,EACLU,EAAWxI,IAEtB8H,EAAWC,OAAWxyH,EACf49B,EACX,CAcA,SAASg2F,KAAajqB,GAClB,MAAM8gB,EAAOT,KAAKC,MACZ4J,EAAaR,EAAa5I,GAIhC,GAHA8H,EAAW5oB,EACX6oB,EAAWxwH,KACX2wH,EAAelI,EACXoJ,EAAY,CACZ,QAAgB7zH,IAAZ0yH,EACA,OAzDZ,SAAqBjI,GAGjB,OAFAmI,EAAiBnI,EACjBiI,EAAUS,EAAWI,EAAcjB,GAC5BO,EAAUI,EAAWxI,GAAQ7sF,CACxC,CAqDmBk2F,CAAYnB,GAEvB,GAAIG,EAEA,OADAJ,EAAUS,EAAWI,EAAcjB,GAC5BW,EAAWN,EAE1B,CAIA,YAHgB3yH,IAAZ0yH,IACAA,EAAUS,EAAWI,EAAcjB,IAEhC10F,CACX,CAIA,OAnGA00F,EAAOtkH,OAAOskH,IAAS,GACnB,OAASlsH,KACTysH,EAAUkB,QAAQ3tH,EAAQysH,SAC1BC,EAAS,YAAa1sH,EACtBqsH,EAAUK,EAAS7zH,KAAKkS,IAAInD,OAAO5H,EAAQqsH,UAAY,EAAGH,GAAQG,EAClEl6C,EAAW,aAAcnyE,EAAU2tH,QAAQ3tH,EAAQmyE,UAAYA,GA2FnEq7C,EAAU3mH,OAjCV,gBACoBjN,IAAZ0yH,GA3CR,SAAqBrnH,GACjB,GAAI0nH,EACA,OAAOtjG,OAAOukG,qBAAqB3oH,GAEvCgnF,aAAahnF,EACjB,CAuCQ4oH,CAAYvB,GAEhBE,EAAiB,EACjBL,EAAWI,EAAeH,EAAWE,OAAU1yH,CACnD,EA4BA4zH,EAAUM,MA3BV,WACI,YAAmBl0H,IAAZ0yH,EAAwB90F,EAAS41F,EAAaxJ,KAAKC,MAC9D,EA0BA2J,EAAUO,QAzBV,WACI,YAAmBn0H,IAAZ0yH,CACX,EAwBOkB,CACX,C,8BC/Ge,SAAS17C,EAAuBk8C,GAC3C,MAAM3vG,EAKV,SAA2B+lD,GACvB,MAAM6pD,EAAqB,CAAC7pD,EAAa,GAAIA,EAAa,IAAIvsD,KAAKq2G,GAC7DC,EAAqB,CAAC/pD,EAAa,GAAIA,EAAa,IAAIvsD,KAAKu2G,GAC7DznD,EAAQsnD,EAAmBA,EAAmBzxH,OAAS,GACvD+T,EAAM49G,EAAmB,GACzBhmD,EAASgmD,EAAmBA,EAAmB3xH,OAAS,GAC9D,MAAO,CACH+T,MACA43D,SACAxB,SAEJ,SAASunD,EAAUp2G,EAAGhF,GAClB,OAAOgF,EAAE,GAAKhF,EAAE,IAAM,EAAI,CAC9B,CACA,SAASs7G,EAAUt2G,EAAGhF,GAClB,OAAOgF,EAAE,GAAKhF,EAAE,IAAM,EAAI,CAC9B,CACJ,CAtBoBu7G,CAAkBL,GAC5BM,GAAWjwG,EAAQ9N,IAAI,GAAK8N,EAAQ8pD,OAAO,IAAM,EAEvD,MADsB,CAAC9pD,EAAQsoD,MAAM,GAAI2nD,EAE7C,C,mLCJA,MAAM,iBAAE/tF,GAAqB,EAAA+I,MACvBilF,EAAc,KACdC,EAAc,SACdC,EAA8B,CAChC,EACA,EACA,EACA,GAEEC,EAA2B,CAC7B,MACA,OAEEC,EAA0B,CAC5B,MACA,OAEEC,EAAe,CACjB,EAAG,KACH,EAAG,UACH,EAAG,KACH,EAAG,KACH,EAAG,UACH,EAAG,QACH,EAAG,aACH,EAAG,SACH,EAAG,MACH,EAAG,QACH,GAAK,WAGHC,EAAS,IACTC,EAAmC,CAAC13H,EAAO4kD,KAC7C,MAAM,YAAE5lC,EAAW,gBAAE24G,GAAoB33H,EACzC,IAAIq6E,EAAOs9C,EAAkB,KAAOR,EACpC,MAAMS,EAAaD,EAAkB,MAAWP,EAChD,IAAIr4C,EAAW1E,EAAOo9C,EAClBz2H,EAAQ,EACR62H,EAAkB,GACtB,IAAK74G,IACCA,EAAY1T,OAAS0T,EAAY84G,4BACnC,MAAO,CAAEz9C,OAAM0E,WAAU/9E,QAAO42H,cAEpC,GAAI54G,EAAY1T,OAAS69B,EAAiB4uF,aACtC,MAAO,CACH19C,KAAM88C,EACNp4C,SAAUo4C,EAAcM,EACxBz2H,QACA42H,WAAYR,GAGpB,GAAIp4G,EAAY84G,4BAA6B,CACzC,IAAIrmC,EAAaC,EACjB,GAAIxuF,MAAMC,QAAQyhD,IAA+B,IAAnBA,EAAQx/C,QACjCqsF,EAAaC,GAAe9sC,OAE5B,GAAuB,mBAAZA,EAAwB,CACpC,MAAM3xC,EAAS2xC,IACf6sC,EAAcx+E,EAAO,GACrBy+E,EAAcz+E,EAAO,EACzB,CACA,IAAI+kH,EAAUh5G,EAAY84G,4BAA4Bx+G,QAAQ2+G,GAAWxmC,EAAY,IAAMwmC,EAAOC,qBAC9FzmC,EAAY,IAAMwmC,EAAOE,qBACzB1mC,EAAY,IAAMwmC,EAAOG,qBACzB3mC,EAAY,IAAMwmC,EAAOI,qBACzB3mC,EAAY,IAAMumC,EAAOC,qBACzBxmC,EAAY,IAAMumC,EAAOE,qBACzBzmC,EAAY,IAAMumC,EAAOG,qBACzB1mC,EAAY,IAAMumC,EAAOI,sBAC7B,IAAKL,GAAS5yH,OACV,MAAO,CAAEi1E,OAAM0E,WAAU/9E,QAAO42H,cAIpC,GAFAI,EAAUA,EAAQ1+G,QAAQ2+G,GAAWZ,EAA4Bh4G,SAAS44G,EAAOK,iBAC7EhB,EAAyBj4G,SAAS,GAAG44G,EAAOM,2BAA2BN,EAAOO,8BAC7ER,EAAQ5yH,OACT,MAAO,CACHi1E,KAAM88C,EACNp4C,SAAUo4C,EAAcM,EACxBz2H,QACA42H,WAAYR,GAGpB,MAAMa,EAASD,EAAQ,GACjBS,EAAiBh3H,KAAK6e,IAAI23G,EAAOQ,gBACjCC,EAAiBj3H,KAAK6e,IAAI23G,EAAOS,gBAEvC,IAD4B,EAAApmF,UAAA,QAAkBmmF,EAAgBC,EAvD1D,MA+DA,MAAO,CACHr+C,KAAM88C,EACNp4C,SAAUo4C,EAAcM,EACxBz2H,QACA42H,WAAYR,GAVhBp2H,EAAQ,EAAIy3H,EACZZ,EAAkB,YAClBx9C,EAAOm9C,EAAaS,EAAOM,0BAA4B,UACvDx5C,EAAW1E,EAAOo9C,CAU1B,MACSz4G,EAAYhe,QACjBA,EAAQge,EAAYhe,OAaxB,MAXc,CACVmoC,EAAiBE,KACjBF,EAAiBwvF,KACjBxvF,EAAiByvF,MACjBzvF,EAAiBG,WACjBH,EAAiBI,WACjBJ,EAAiBC,SAEX/pB,SAASL,GAAa1T,QAC5BusH,EAAkB74G,EAAY1T,MAE3B,CACH+uE,KAAMA,GAAQw9C,EAAkB,IAAIA,IAAoB,IACxD94C,SAAUA,GAAY84C,EAAkB,IAAIA,IAAoB,IAChE72H,QACA42H,WAAYA,GAAcC,EAAkB,IAAIA,IAAoB,IACvE,EAECgB,EAAkC,CAAC74H,EAAO4kD,KAC5C,MAAO/+B,GAAc++B,GACf,YAAE5lC,GAAgBhf,EACxB,IAAIg9E,EAAQ,CAAC,OACT79D,EAAS,CAAC,MACV04G,EAAkB,GACtB,IAAK74G,IACCA,EAAY1T,OAAS0T,EAAY84G,4BACnC,MAAO,CAAE96C,QAAO79D,UAEpB,GAAIH,EAAY84G,4BAA6B,CACzC,MAAMgB,EAA2B95G,EAAY84G,4BAA4Bx+G,QAAQ2+G,GAAWZ,EAA4Bh4G,SAAS44G,EAAOK,iBACpIf,EAAwBl4G,SAAS,GAAG44G,EAAOM,2BAA2BN,EAAOO,6BACjF,IAAKM,GAA0B1zH,OAC3B,MAAO,CAAE43E,QAAO79D,UAEpB,MAAM84G,EAASa,EAAyB52G,MAAM+1G,GAAWpyG,EAAW,IAAMoyG,EAAOC,qBAC7EryG,EAAW,IAAMoyG,EAAOE,qBACxBtyG,EAAW,IAAMoyG,EAAOG,qBACxBvyG,EAAW,IAAMoyG,EAAOI,sBAC5B,IAAKJ,EACD,MAAO,CAAEj7C,QAAO79D,UAEpB,MAAM,iBAAE45G,EAAmB,EAAC,iBAAEC,EAAmB,GAAMf,GACjD,eAAEQ,EAAc,eAAEC,GAAmBT,EACrCgB,GAAUpzG,EAAW,GAAKoyG,EAAOG,oBAAsBY,GACzDN,EAGJb,EAAkB,YAClB14G,EAAS,EAHO0G,EAAW,GAAKoyG,EAAOC,oBAAsBa,GACzDN,EAEcQ,GAClBj8C,EAAQ,CACJw6C,EAAaS,EAAOM,yBACpBf,EAAaS,EAAOO,yBAE5B,CACA,MAAO,CACHx7C,QACA79D,SACA04G,kBACH,EAECqB,EAAuBl5H,GAAUA,EAAMgf,aAAa8hE,QAAU,C,2FClKpE,MAAM,sBAAEt6C,GAA0B,YAClC,SAAS2yF,EAAqBC,EAActyG,EAAWuyG,GACnD,MAAOtoD,EAAQ53D,GAAOigH,EAChB94E,EAAc,iBAAiBywB,EAAO,GAAK53D,EAAI,IAAM,GAAI43D,EAAO,GAAK53D,EAAI,IAAM,GAAI43D,EAAO,GAAK53D,EAAI,IAAM,GACzGmgH,EAAc,cAAcvoD,EAAQ53D,GAAO,GAC3C,UAAEO,EAAS,aAAEkiB,EAAY,iBAAEE,GAsCrC,SAA2BhV,EAAWuyG,EAAkBD,EAAc94E,EAAag5E,GAC/E,MAAMjtH,EAAaya,EAAUQ,iBACrBzR,IAAK0jH,EAAW/xE,OAAQgyE,EAAcxsF,OAAQysF,GAAeJ,EAC/Dz9F,EAAe,cACfE,EAAmB,cACzB,iBAAiBF,EAAc0kB,EAAam5E,EAAWH,GACvD,iBAAiBx9F,EAAkBwkB,EAAam5E,GAAYH,GAC5D,iBAAiB19F,EAAcA,EAAc49F,GAAeF,GAC5D,iBAAiBx9F,EAAkBA,EAAkB09F,EAAcF,GACnE,iBAAiB19F,EAAcA,EAAc29F,GAAYD,GACzD,iBAAiBx9F,EAAkBA,EAAkBy9F,EAAWD,GAChE,MAAMI,EAAalzF,EAAsB1f,EAAW8U,GAC9C+9F,EAAiBnzF,EAAsB1f,EAAWgV,GAClD89F,EAAYR,EAAavuH,KAAKqI,GAAMszB,EAAsB1f,EAAW5T,KACrEwG,GAAY,IAAAs4G,8BAA6B,CAAC0H,EAAYC,KAAmBC,GAAYvtH,GAC3F,MAAO,CAAEqN,YAAWkiB,eAAcE,mBACtC,CAtD0D+9F,CAAkB/yG,EAAWuyG,EAAkBD,EAAc94E,EAAag5E,GAChI,MAAO,CACH5/G,YACA4mC,YAAaA,EACbg5E,cACA19F,aAAcA,EACdE,iBAAkBA,EAE1B,CACA,SAASg+F,EAAoBV,EAActyG,GACvC,MAAMra,EAAYqa,EAAUI,eACtBqyG,EAAY,gBAAgB9sH,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAClE+sH,EAAe,gBAAgB/sH,EAAU,GAAIA,EAAU,GAAIA,EAAU,IACrEstH,EAAW,gBAAgBttH,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAOvE,OAAO0sH,EAAqBC,EAActyG,EALjB,CACrBjR,IAAK0jH,EACL/xE,OAAQgyE,EACRxsF,OAJoB,YAAY,cAAe+sF,IAOvD,CACA,SAASC,EAAgCZ,EAActyG,EAAWpmB,GAC9D,IAAKA,EACD,MAAM,IAAIkC,MAAM,gEAEpB,MAAMsiB,EAASxkB,EAASykB,YAClB2hB,EAAS,gBAAgB5hB,EAAO4hB,OAAO,GAAI5hB,EAAO4hB,OAAO,GAAI5hB,EAAO4hB,OAAO,IAC3E7iB,EAAkB,gBAAgBiB,EAAOjB,gBAAgB,GAAIiB,EAAOjB,gBAAgB,GAAIiB,EAAOjB,gBAAgB,IAC/GypG,EAAY,cAClB,WAAWA,EAAW5mF,EAAQ7iB,GAM9B,OAAOk1G,EAAqBC,EAActyG,EALjB,CACrBjR,IAAK63G,EACL1gF,OAAQ/oB,EACRujC,OAAQ,YAAY,cAAe1gB,IAG3C,C,+DC5Ce,SAASmzF,EAAyBrlF,GAC7C,MAAMx2B,GAAY,OAA0Bw2B,GAC5C,OAAOx2B,EAAUhZ,OAASgZ,EAAU,QAAK5b,CAC7C,C,gDCAA,QAJA,SAAkBiC,GACd,MAAM6G,SAAc7G,EACpB,OAAiB,OAAVA,IAA4B,WAAT6G,GAA8B,aAATA,EACnD,C,oVCHe,SAAS4uH,EAAcC,EAAQpqF,GAC1C,MAAM,OAAE30B,EAAM,OAAEosB,GAAW2yF,EACrB9H,EAAU8H,EAAO9H,SAAW7qF,EAASA,EAC3C,OAASuI,EAAS,GAAK30B,EAAO,KAAO20B,EAAS,GAAK30B,EAAO,KACrD20B,EAAS,GAAK30B,EAAO,KAAO20B,EAAS,GAAK30B,EAAO,KACjD20B,EAAS,GAAK30B,EAAO,KAAO20B,EAAS,GAAK30B,EAAO,KAClDi3G,CACR,C,yFCLA,MAAM,QAAEh1F,GAAY,YAId+8F,EAAW,CAHH,gBAAgB,EAAG,EAAG,GACtB,gBAAgB,EAAG,EAAG,GACtB,gBAAgB,EAAG,EAAG,IAEpC,SAASC,EAAuBlH,GAC5B,MAAMmH,EAAgB,cAAc,cAAenH,EAAoB,GAAIA,EAAoB,IACzFoH,EAAgB,cAAc,cAAepH,EAAoB,GAAIA,EAAoB,IAO/F,MAJkB,IAFCqH,EAAwBF,EAAeF,MACvCI,EAAwBD,EAAeH,IACTnpG,OAAO3vB,GAAU+7B,EAAQ/7B,EAAO,IAC7E+7B,EAAQ/7B,EAAO,KACf+7B,EAAQ/7B,EAAO,MACf+7B,EAAQ/7B,EAAO,MAEvB,CACA,SAASk5H,EAAwBC,EAAKn2B,GAClC,OAAOA,EAAKz5F,KAAK01C,GAAkC,IAAxB,WAAWk6E,EAAKl6E,GAAe9+C,KAAKC,IACnE,C,8CCnBe,MAAMg5H,SACRl2H,KAAKm2H,YAAc,IAAI3kH,GAAO,QAC9BxR,KAAKo2H,QAAU,EAAI,QACnBp2H,KAAKwgE,KAAO,YAAc,CACnC,gBAAO61D,CAAUjyH,GACb,MAAM,eAAE00E,EAAc,QAAEs9C,EAAO,KAAE51D,GAASp8D,EAC1CpE,KAAKwgE,KAAOA,EACZxgE,KAAKo2H,QAAUA,EACfp2H,KAAKm2H,YAAYriH,QACC,eAAd9T,KAAKwgE,KACL41D,EAAQn1H,SAASuH,IACbxI,KAAKm2H,YAAYj2H,IAAIsI,EAAO,IAAI,KAA6B,CAAEswE,mBAAkB,IAIrF94E,KAAKm2H,YAAYj2H,IAAIk2H,EAAS,IAAI,KAA6B,CAAEt9C,mBAEzE,CACA,oBAAOwC,CAAcpuE,GACjB,MAAM,aAAE4iF,KAAiBwmC,GAAcppH,EACvC,IAAK4iF,EACD,MAAM,IAAI1xF,MAAM,mDAEpB,MAAMm4H,EAA2B,eAAdv2H,KAAKwgE,KAClBxgE,KAAKm2H,YAAY/1H,IAAI0vF,GACrB9vF,KAAKm2H,YAAY/1H,IAAIJ,KAAKo2H,SAChC,IAAKG,EACD,MAAM,IAAIn4H,MAAM,mCAAmC0xF,KAEvDymC,EAAWj7C,cAAcg7C,EAC7B,CACA,oBAAO56C,CAAct3E,GACjB,GAAkB,eAAdpE,KAAKwgE,KAAuB,CAC5B,MAAM5kC,EAAS,CAAC,EAIhB,OAHA57B,KAAKm2H,YAAYl1H,SAAQ,CAACs1H,EAAYzmC,KAClCl0D,EAAOk0D,GAAgBymC,EAAW76C,cAAct3E,EAAQ,IAErDw3B,CACX,CAEA,OADmB57B,KAAKm2H,YAAY/1H,IAAIJ,KAAKo2H,SAC3B16C,cAAct3E,EACpC,E,8ECwEJ,SAASoyH,EAAKC,EAAQC,EAAW91H,GAG7B,OAFc,IAAIlC,MAAMkC,EAAS,GACfgrB,KAAK8qG,GACTD,GAAQ/1H,OAAOE,EACjC,C,iBACA,QAvHA,SAAmBqU,EAAQ0hH,EAAMvyH,EAAU,CAAC,GACxC,MAAMwyH,EAAUxyH,EAAQwyH,QAClBC,EAAazyH,EAAQyyH,WACrBC,EAAS1yH,EAAQ0yH,OACjBhiH,EAAS1Q,EAAQ0Q,OACjBN,EAAYpQ,EAAQoQ,YAAa,EACjCuiH,EAAY32H,EAAIu2H,GAChBK,EA6EN,WACI,MAAMA,EAMV,SAAiBp2H,GACb,MAAMq2H,EAAQ,GACRC,EAAc,SAAUT,GAC1B,OAAOA,EAAOr0H,MAAM,IAAIiE,KAAI,SAAUm1B,GAClC,OAAOM,SAASN,EAAG,IAAM,CAC7B,GACJ,EACA,IAAK,IAAI9xB,EAAI,EAAGA,EAAIzM,KAAKk7D,IAAI,EAAGv3D,GAAS8I,GAAK,EAAG,CAC7C,MAAM+sH,EAASD,EAAK9sH,EAAE2V,SAAS,GAAI,IAAKze,GACxCq2H,EAAMtuH,KAAKuuH,EAAYT,GAC3B,CACA,OAAOQ,CACX,CAlByBE,CAAQR,EAAK/1H,QAClC,OAAOo2H,EAAaliH,QAAO,SAAUsiH,GACjC,MAAMnoH,EAkBlB,SAAwBjC,GACpB,IAAIiC,EAAQ,EACZ,IAAK,IAAIvF,EAAI,EAAGA,EAAIsD,EAAMpM,OAAQ8I,GAAK,EAClB,IAAbsD,EAAMtD,KACNuF,GAAS,GAGjB,OAAOA,CACX,CA1B0BooH,CAAeD,GAC7B,OAAiB,IAAVnoH,IAA0B,IAAVA,GAAeuF,EAC1C,GACJ,CAnFqB8iH,GACfpjH,EAAQ,GACRilF,EAAU,GACVo+B,EAAS,IAAIx+F,IACbtS,EAASriB,EAAQqiB,OAEvB,IADAvS,EAAMvL,KAAK,CAAE6uH,YAAab,IACnBziH,EAAMtT,OAAS,GAClBwT,EAAMF,EAAMrJ,OAEhB,MAAO,CACHsuF,WAEJ,SAAS/kF,EAAMqjH,GACX,MAAMC,EAAUD,EAAID,YACdG,EAAWF,EAAIG,aACjBxzB,EAAQszB,KAiBhB,SAAuBv3H,GACnB,MAAO7C,EAAGE,EAAGqR,EAAI,GAAK1O,EAChB03H,EAAOv6H,EAAI,MAAQ,OAASE,EAAI,MAAQ,OAASqR,EAAI,QAC3D0oH,EAAOj0H,IAAIu0H,EACf,CAlBIC,CAAcJ,GAmBlB,SAAgBA,GACZ,MAAMnrF,EAAOnsC,EAAIs3H,GACjB,OAAOZ,EAASA,EAAOvqF,EAAMwqF,GAAaxqF,IAASwqF,CACvD,CArBQgB,CAAOL,IAsBf,SAAuBA,GACnBv+B,EAAQxwF,KAAK+uH,GACTd,GACAA,KAAWc,EAEnB,CA1BQM,CAAcN,GAmCtB,SAAsBA,GAClB,IAAK,IAAIhuH,EAAI,EAAGA,EAAIstH,EAAap2H,OAAQ8I,GAAK,EAAG,CAC7C,MAAM0tH,EAAOJ,EAAattH,GACpBuuH,EAAWP,EAAQh3H,MAAM,GAC/B,IAAK,IAAIuR,EAAI,EAAGA,EAAIylH,EAAQ92H,OAAQqR,GAAK,EACrCgmH,EAAShmH,IAAMmlH,EAAKnlH,IAEG,IAAvB6C,IAASmjH,KAGT7zB,EAAQ6zB,IAGZ/jH,EAAMvL,KAAK,CACP6uH,YAAaS,EACbL,aAAcF,IAEtB,CACJ,CApDQQ,CAAaR,IA0BrB,SAAwBC,GACpB,MAAOr6H,EAAGE,EAAGqR,EAAI,GAAK8oH,EAChBE,EAAOv6H,EAAI,MAAQ,OAASE,EAAI,MAAQ,OAASqR,EAAI,QAC3D4X,GAAQvmB,IAAI23H,EAAMF,GACdd,GACAA,KAAcc,EAEtB,CA9BQQ,CAAeR,GAEvB,CACA,SAASvzB,EAAQjkG,GACb,MAAO7C,EAAGE,EAAGqR,EAAI,GAAK1O,EAChB03H,EAAOv6H,EAAI,MAAQ,OAASE,EAAI,MAAQ,OAASqR,EAAI,QAC3D,OAAO0oH,EAAOl0H,IAAIw0H,EACtB,CA2CA,SAASz3H,EAAIs3H,GACT,OAAOziH,KAAUyiH,EACrB,CAqBJ,C,0ECtGO,SAASU,EAAsBp9E,EAAaf,GAC/C,MAAMi0C,GAAY,IAAAnzC,cAAaC,GAC/B,QAAkBh9C,IAAdkwF,EACA,OAEJ,MAAMmqC,EAAgBnqC,EAAUE,eAChC,IAAKxuF,OAAO4B,KAAK62H,GAAez3H,OAC5B,OAEJ,GAAIq5C,GAAYo+E,EAAcp+E,GAC1B,MAAO,CAACo+E,EAAcp+E,IAG1B,OADgCr6C,OAAO+a,OAAO09G,GAAevjH,QAAQ8sD,GAAiBA,aAAwB,KAElH,C,yECdO,SAASq/B,EAAwCl/B,GACpD,MAAMutB,GAAe,IAAAiF,iBAAgBxyB,IAC/B,kBAAEw5C,GAAsBjsB,EAAagF,mBAAmB0M,QAC9D,IAAK,MAAOlR,EAAcwoC,KAAmB/c,EAAkBpyF,UAAW,CAEtE,GADiCzqB,MAAM6D,KAAK+1H,GAAgB56G,MAAMsjC,IAAkB,QAAcA,GAAed,cAE7G,OAAO4vC,CAEf,CAEJ,C,qFCTO,SAASiR,EAAgCh/B,EAAgBr1B,GAAY,SAAExwC,EAAQ,aAAEskG,IACpF,MACMhO,GADe,IAAA+B,iBAAgBxyB,GACHuyB,mBAAmBryB,SACrD,GAAI/lE,aAAoB,EAAAuoD,mBAAoB,CACxC,MAAM,SAAE35C,GAAa0nF,EACfqqB,EAAqB,EAAArrF,MAAM7M,UAAU7Z,GAC3C,IAAK+xG,EACD,OAEJ,MAAM73G,EAAe63G,EAAmB73G,aAClCsd,EAAYu6F,EAAmBv6F,UAC/Bi2G,EAAW,EAAAzqF,UAAA,sBAAgCxrB,EAAWoqB,GACtDojD,EAAe9qF,EAAa60F,SAAS0+B,EAAS,GAAIA,EAAS,GAAIA,EAAS,IAExEC,EAiDd,SAA+BhsF,EAAasjD,EAAc5zF,EAAUomB,EAAWk+E,GAC3E,MAAMi4B,EAAmB,CAACC,EAAQC,KAC9B,MAAMC,EAAiB,CAACpsF,EAAY,GAAKksF,EAAQlsF,EAAY,GAAKmsF,GAC5DjsF,EAAaxwC,EAASozB,cAAcspG,GACpC5zH,EAAesd,EAAUliB,IAAI,gBAAgB4E,aAC7CuzH,EAAW,EAAAzqF,UAAA,sBAAgCxrB,EAAWoqB,GAC5D,OAAO1nC,EAAa60F,SAAS0+B,EAAS,GAAIA,EAAS,GAAIA,EAAS,GAAG,EAEvE,OAAOM,EAAgBJ,EAAkB3oC,EAAc0Q,EAC3D,CA1DuBs4B,CADK58H,EAASilD,cAAczU,GACOojD,EAAc5zF,EAAUomB,EAAWk+E,GACrF,OAAOg4B,EAAS1oC,OAAe9xF,CACnC,CACA,MAAMw2F,GAAsB,IAAAC,sCAAqCv4F,EAASmN,GAAI04D,GAE9E,IADc,EAAAvwC,MAAMgnE,SAAShE,GAEzB,OAEJ,MAAMukC,GAAyB,QAAsB78H,EAASmN,GAAI04D,GAC5Dz/C,EAAYy2G,GAAwB5iH,MAAMoM,YAAYC,eACtD+1G,EAAW,EAAAzqF,UAAA,sBAAgCxrB,EAAWoqB,GACtD7kC,EAAaya,EAAUQ,gBACvB9d,EAAgBsd,EAAUtd,cAC5B,EAAA8oC,UAAA,aAAuB46D,+BAA+B,CAClD7gG,aACA1C,WAAYmd,EAAUgoB,eAAeC,aAAaC,YAEpDslD,EAAe9qF,EAAaqzE,cAAckgD,GAC1CC,EAoBV,SAA4BD,EAAU1wH,EAAY7C,EAAc8qF,EAAc0Q,GAC1E,MAAMi4B,EAAmB,CAACC,EAAQC,EAAQK,KACtC,MAAMC,EAAc,CAChBV,EAAS,GAAKG,EACdH,EAAS,GAAKI,EACdJ,EAAS,GAAKS,GAElB,OAAOh0H,EAAa60F,SAASo/B,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAAG,EAEhF,OAAOJ,EAAgBJ,EAAkB3oC,EAAc0Q,EAC3D,CA9BmB04B,CAAmBX,EAAU1wH,EAAY7C,EAAc8qF,GACtE,OAAO0oC,EAAS1oC,OAAe9xF,CACnC,CACA,SAAS66H,EAAgBJ,EAAkB3oC,EAAc0Q,EAAe,GACpE,MAAM24B,EAAgBz6H,MAAM6D,KAAK,CAAE3B,OAAQ,EAAI4/F,EAAe,IAAK,CAACjiF,EAAG7U,IAAMA,EAAI82F,IACjF,IAAK,MAAMk4B,KAAUS,EACjB,IAAK,MAAMR,KAAUQ,EACjB,IAAK,MAAMH,KAAUG,EAAe,CAChC,GAAe,IAAXT,GAA2B,IAAXC,GAA2B,IAAXK,EAChC,SAEJ,MAAMI,EAAgBX,EAAiBC,EAAQC,EAAQK,GACvD,QAAsBh7H,IAAlBo7H,GAA+BtpC,IAAiBspC,EAChD,OAAO,CAEf,CAGR,OAAO,CACX,C,sHChDO,SAASt4B,EAA4B/+B,EAAgBr1B,EAAYtoC,EAAU,CAAC,GAC/E,MAAMkrF,GAAe,IAAAiF,iBAAgBxyB,GAC/BuyB,EAAqBhF,EAAagF,mBAClC+kC,EAAwBj1H,GAASk1H,oBAAsB15H,OAAO4B,KAAK8yF,GAAoB,GAC7F,IAAK+kC,EACD,MAAM,IAAIj7H,MAAM,gBAAgB2jE,uCAEpC,OAAQs3D,GACJ,KAAK,EAAAr3D,4BAA4BC,SAC7B,OAOL,SAA2CqtB,EAAc5iD,GAAY,SAAExwC,IAC1E,MAAMs2F,EAAelD,EAAagF,mBAAmBryB,SACrD,GAAI/lE,aAAoB,EAAAuoD,mBAAoB,CACxC,MAAM,SAAE35C,GAAa0nF,EACfqqB,EAAqB,EAAArrF,MAAM7M,UAAU7Z,GAC3C,IAAK+xG,EACD,OAGJ,OADqBA,EAAmBv6F,UAAUi3G,wBAAwB7sF,EAE9E,CACA,MAAMymE,GAAuB,IAAAkD,uCAAsCn6G,EAASmN,GAAIimF,EAAavtB,gBAC7F,GAAIoxC,EAAqBvyG,OAAS,EAE9B,YADAwP,QAAQC,KAAK,mGAGjB,MAAMmkF,EAAsB2e,EAAqB,GAEjD,IADc,EAAA3hF,MAAMgnE,SAAShE,GAEzB,OAEJ,MAAMukC,GAAyB,QAAsB78H,EAASmN,GAAIimF,EAAavtB,gBACzEz/C,EAAYy2G,GAAwB5iH,MAAMoM,YAAYC,eACtD+1G,EAAW,EAAAzqF,UAAA,sBAAgCxrB,EAAWoqB,GACtD7kC,EAAaya,EAAUQ,gBACvB9d,EAAgBsd,EAAUtd,cAC5B,EAAA8oC,UAAA,aAAuB46D,+BAA+B,CAClD7gG,aACA1C,WAAYmd,EAAUgoB,eAAeC,aAAaC,YAG1D,OADqBxlC,EAAaqzE,cAAckgD,EAEpD,CAvCmBiB,CAAkClqC,EAAc5iD,EAAYtoC,GACvE,KAAK,EAAA49D,4BAA4Bg/B,QAC7B,OAsCL,SAA0C1R,EAAc5iD,GAAY,SAAExwC,IACzE,MAAMm/G,EAAc/rB,EAAagF,mBAAmB0M,QAC9CuH,EAAiB7pG,MAAM6D,KAAK84G,EAAYE,kBAAkB/5G,SAC1D,gBAAEie,GAAoBvjB,EAASykB,YACrC,IAAK,MAAMmvE,KAAgByY,EAAgB,CACvC,MAAMkxB,EAAiBpe,EAAYE,kBAAkBn7G,IAAI0vF,GACzD,GAAK2pC,EAGL,IAAK,MAAMz4E,KAAiBy4E,EAAgB,CACxC,MAAMrpF,GAAa,QAAc4Q,GACjC,IAAK5Q,EACD,SAEJ,MAAM,SAAEqgC,GAAargC,EAAWljC,KAAKmiC,QACrC,GAAK,EAAAvB,UAAA,QAAkBruB,EAAiB2wB,EAAWlpC,SAASuY,mBAGxD,IAAAstG,yBAAwBrgF,EAAY+jC,GACpC,OAAOzkE,OAAO8jF,EAEtB,CACJ,CACJ,CA7DmB4pC,CAAiCpqC,EAAc5iD,EAAYtoC,GACtE,QACI,OAEZ,C,+CCrBA,MAkJA,EAlJe,4+J,4QCEf,MACMu1H,EAAsB,cACtBC,EAA0B,CAC5BC,WAAY,EACZC,kBAAmB,IACnBC,WAAY,CACRC,kBAAmB,EACnBC,wBAAyB,EACzBhQ,UAAW,OAGnB/wF,eAAei2D,EAAW+qC,EAAmB7nC,EAAkBjuF,EAAUw1H,GACrE,MAAMO,EAAgB,CAAC,EAAG,EAAG,IACvB,WAAEN,EAAU,kBAAEC,GAAsBl6H,OAAO48D,OAAO,CAAC,EAAGo9D,EAAyBx1H,GAC/E21H,EAAan6H,OAAO48D,OAAO,CAAC,EAAGo9D,EAAwBG,WAAY31H,EAAQ21H,YAC3E/1G,EAAS,EAAAwN,MAAM7M,UAAUu1G,GACzBE,EAAW,EAAA5oG,MAAM7M,UAAU0tE,IAC1BrzF,EAASC,EAAMgkC,GAAajf,EAAOnc,WAC1C,GAAIuyH,EAASvyH,WAAW,KAAO7I,GAC3Bo7H,EAASvyH,WAAW,KAAO5I,GAC3Bm7H,EAASvyH,WAAW,KAAOo7B,EAC3B,MAAM,IAAI7kC,MAAM,+CAEpB,IAAIi8H,EAAgBp9H,KAAK+Q,MAAM/Q,KAAK0mC,KAAK1kC,GAAQ,EAAID,GAAW,EAAIikC,GAAa,GAAK,GACtFo3F,EAAgBp9H,KAAKa,IAAIu8H,EAAe,KACxC,MAAM7nC,EAAe4nC,EAASp1H,aAAa08B,6BAC3C,IAAI44F,EAAkBt2G,EAAOhf,aAAa08B,6BACpC44F,aAA2BrxH,eAC7BqxH,EAAkB,IAAIrxH,aAAaqxH,IAEvC,MAAMC,EAAiB,CACnBC,4BAA6Bb,EAC7Bc,cAAed,GAEbe,QAAgBC,UAAUC,KAAKC,kBAC/BC,QAAeJ,EAAQK,cAAc,CAAER,mBACvCS,EAAcV,EAAgBpwH,WAC9B+wH,EAAqCZ,EAAgBa,YAAYC,kBACjEC,EAAqB,EAAIC,WAAWF,kBACpCG,EAAeR,EAAOS,mBAAmB,CAC3CC,KAAM,MAGJC,EAAoB,IAAIP,YAAY,CACtCl8H,EACAC,EACAgkC,EACA,IAEEy4F,EAAkBZ,EAAOa,aAAa,CACxCjzG,KAAM+yG,EAAkBvxH,WACxB0xH,MAAOC,eAAeC,QAAUD,eAAeE,WAE7CC,EAA2BlB,EAAOa,aAAa,CACjDjzG,KAAMsyG,EACNY,MAAOC,eAAeI,QAAUJ,eAAeE,WAEnDjB,EAAOoB,MAAMC,YAAYH,EAA0B,EAAG1B,GACtD,MAAM8B,EAAqB,CAAC,EAAG,GAAG/1H,KAAI,IAAMy0H,EAAOa,aAAa,CAC5DjzG,KAAMsyG,EACNY,MAAOC,eAAeI,QAClBJ,eAAeQ,SACfR,eAAeE,aAEvBjB,EAAOoB,MAAMC,YAAYC,EAAmB,GAAI,EAAG,IAAIlB,YAAY1oC,IACnE,MAAM8pC,EAAqB,CAAC,EAAG,GAAGj2H,KAAI,IACXy0H,EAAOa,aAAa,CACvCjzG,KAAMsyG,EACNY,MAAOC,eAAeI,QAClBJ,eAAeQ,SACfR,eAAeE,aAIrBQ,EAAmBzB,EAAOa,aAAa,CACzCjzG,KAAMuyG,EACNW,MAAOC,eAAeI,QAClBJ,eAAeQ,SACfR,eAAeE,WAEjBS,EAAkB1B,EAAOa,aAAa,CACxCjzG,KAAM0yG,EACNQ,MAAOC,eAAeI,QAClBJ,eAAeQ,SACfR,eAAeE,WAEjBU,EAAgB,IAAIpB,WAAW,CACjCr8H,EACAC,EACAgkC,GACC,GACA,GACA,IAEL63F,EAAOoB,MAAMC,YAAYK,EAAiB,EAAGC,GAC7C,MAAMC,EAAkB5B,EAAO6B,sBAAsB,CACjDxzG,QAAS,CACL,CACIyzG,QAAS,EACT/uG,WAAYgvG,eAAeC,QAC3Bz+E,OAAQ,CACJv3C,KAAM,YAGd,CACI81H,QAAS,EACT/uG,WAAYgvG,eAAeC,QAC3Bz+E,OAAQ,CACJv3C,KAAM,sBAGd,CACI81H,QAAS,EACT/uG,WAAYgvG,eAAeC,QAC3Bz+E,OAAQ,CACJv3C,KAAM,YAGd,CACI81H,QAAS,EACT/uG,WAAYgvG,eAAeC,QAC3Bz+E,OAAQ,CACJv3C,KAAM,YAGd,CACI81H,QAAS,EACT/uG,WAAYgvG,eAAeC,QAC3Bz+E,OAAQ,CACJv3C,KAAM,sBAGd,CACI81H,QAAS,EACT/uG,WAAYgvG,eAAeC,QAC3Bz+E,OAAQ,CACJv3C,KAAM,sBAGd,CACI81H,QAAS,EACT/uG,WAAYgvG,eAAeC,QAC3Bz+E,OAAQ,CACJv3C,KAAM,YAGd,CACI81H,QAAS,EACT/uG,WAAYgvG,eAAeC,QAC3Bz+E,OAAQ,CACJv3C,KAAM,eAKhBi2H,EAAa,CAAC,EAAG,GAAG12H,KAAKqD,IAC3B,MAAMszH,EAAuBZ,EAAmB1yH,GAC1CuzH,EAAuBX,EAAmB5yH,GAC1CwzH,EAAwBd,GAAoB1yH,EAAI,GAAK,GACrDyzH,EAAyBb,GAAoB5yH,EAAI,GAAK,GAC5D,OAAOoxH,EAAOsC,gBAAgB,CAC1BC,OAAQX,EACRvzG,QAAS,CACL,CACIyzG,QAAS,EACTU,SAAU,CACNj/E,OAAQq9E,IAGhB,CACIkB,QAAS,EACTU,SAAU,CACNj/E,OAAQ29E,IAGhB,CACIY,QAAS,EACTU,SAAU,CACNj/E,OAAQ2+E,IAGhB,CACIJ,QAAS,EACTU,SAAU,CACNj/E,OAAQ4+E,IAGhB,CACIL,QAAS,EACTU,SAAU,CACNj/E,OAAQ6+E,IAGhB,CACIN,QAAS,EACTU,SAAU,CACNj/E,OAAQ8+E,IAGhB,CACIP,QAAS,EACTU,SAAU,CACNj/E,OAAQk+E,IAGhB,CACIK,QAAS,EACTU,SAAU,CACNj/E,OAAQm+E,MAItB,IAEAe,EAAWzC,EAAO0C,sBAAsB,CAC1CH,OAAQvC,EAAO2C,qBAAqB,CAChCC,iBAAkB,CAAChB,KAEvBiB,QAAS,CACLC,OAAQtC,EACRuC,WAAY,OACZC,UAAW,CACPC,eAAgB5D,EAAc,GAC9B6D,eAAgB7D,EAAc,GAC9B8D,eAAgB9D,EAAc,GAC9BN,iBAINqE,EAAgB,CAClBjhI,KAAKwoH,KAAKzmH,EAAUm7H,EAAc,IAClCl9H,KAAKwoH,KAAKxmH,EAAOk7H,EAAc,IAC/Bl9H,KAAKwoH,KAAKxiF,EAAYk3F,EAAc,KAElCgE,EAAuCrD,EAAOa,aAAa,CAC7DjzG,KAAMuyG,EACNW,MAAOC,eAAeuC,SAAWvC,eAAeE,WAE9CsC,EAAsBvE,EACtBwE,YAAYrW,MAAQ6R,EACpB,EACN,IAAIyE,EAAqCxE,EAAWC,kBAChDwE,EAAwB,EAC5B,IAAK,IAAI90H,EAAI,EAAGA,EAAI2wH,EAAe3wH,IAAK,CACpC+xH,EA1MsB,GA0MiB/xH,EACvCoxH,EAAOoB,MAAMC,YAAYT,EAAiB,EAAGD,GAC7C,MAAMgD,EAAiB3D,EAAO4D,uBACxBC,EAAcF,EAAeG,mBACnCD,EAAYE,YAAYtB,GACxBoB,EAAYG,aAAa,EAAG/B,EAAWrzH,EAAI,IAC3Ci1H,EAAYI,mBAAmBb,EAAc,GAAIA,EAAc,GAAIA,EAAc,IACjFS,EAAY3sH,MACZysH,EAAeO,mBAAmBzC,EAAkB7yH,EAAIwxH,YAAYC,kBAAmBgD,EAAsCz0H,EAAIwxH,YAAYC,kBAAmBD,YAAYC,mBAC5KL,EAAOoB,MAAM+C,OAAO,CAACR,EAAeS,WAEpC,GADgBx1H,EAAI,KAAOA,EAAI60H,GAClB,OACHJ,EAAqCgB,SAASC,WAAWC,KAAM,EAAGpE,GACxE,MAAMqE,EAAmCnB,EAAqCoB,eAAe,EAAGtE,GAE1FuE,EADiC,IAAItE,YAAYoE,EAAiC5+H,MAAM,IACpCgJ,GAAK4wH,EAAgB15H,OAE/E,GADAu9H,EAAqCsB,QACjC/1H,GAAK,GAAK81H,EAAqBzF,EAAW9P,WAG1C,GAFAsU,EAAqC,EACrCC,IACIA,IAA0BzE,EAAWE,wBACrC,WAIJsE,EAAqCxE,EAAWC,iBAExD,CACA,GAAIqE,GAAuBC,YAAYrW,MAAQoW,EAAqB,CAChEjuH,QAAQC,KAAK,mCAAmCypH,QAChD,KACJ,CACJ,CACA,MAAM2E,EAAiB3D,EAAO4D,uBACxBgB,GAA6BrF,EAAgB,GAAK,EAClDsF,EAAwB7E,EAAOa,aAAa,CAC9CjzG,KAAMsyG,EACNY,MAAOC,eAAeuC,SAAWvC,eAAeE,WAE9C6D,EAAsB9E,EAAOa,aAAa,CAC5CjzG,KAAM0yG,EACNQ,MAAOC,eAAeuC,SAAWvC,eAAeE,WAEpD0C,EAAeO,mBAAmB5C,EAAmBsD,GAA4B,EAAGC,EAAuB,EAAG3E,GAC9GyD,EAAeO,mBAAmBxC,EAAiB,EAAGoD,EAAqB,EAAGxE,GAC9EN,EAAOoB,MAAM+C,OAAO,CAACR,EAAeS,iBAC9BS,EAAsBR,SAASC,WAAWC,KAAM,EAAGrE,GACzD,MAAM6E,EAAuBF,EAAsBJ,eAAe,EAAGvE,GAC/D8E,EAAiB,IAAI5E,YAAY2E,GACvCrtC,EAAatyF,IAAI4/H,GACjBH,EAAsBF,cAChBG,EAAoBT,SAASC,WAAWC,KAAM,EAAGjE,GACvD,MAAM2E,EAAqBH,EAAoBL,eAAe,EAAGnE,GAC3D4E,EAAe,IAAI3E,WAAW0E,EAAmBr/H,MAAM,IAC7Dk/H,EAAoBH,QACpB,MAAMl8G,EAAOy8G,EAAa,GACpBj/F,EAAOi/F,EAAa,GACpB/+F,EAAO++F,EAAa,GACpBx8G,EAAOw8G,EAAa,GACpBh/F,GAAOg/F,EAAa,GACpB9+F,GAAO8+F,EAAa,GAC1B5F,EAASp1H,aAAao9B,2BAA2BowD,GACjD4nC,EAASp1H,aAAai7H,cACtB7F,EAASp1H,aAAak7H,UAAU,CAC5B,CAAC38G,EAAMC,GACP,CAACud,EAAMC,IACP,CAACC,EAAMC,KAEf,C,0ECxTA,MAAMi/F,EAAsB,IACtBC,EAAsB,IACtBpvC,EAAuB,EAAEr6E,KAAW,KACpCs6E,EAAuB,CAAC,EAAG,MA8EjC/3D,eAAemnG,EAAmD9+F,EAAWn9B,GACzE,MAAMg2H,EAAW,EAAAhnB,aAAA,oCAAiD7xE,EAAUz2B,UAG5E,OA7BJ,SAAgCy2B,EAAW64F,EAAUh2H,GACjD,MAAM,kBAAE+tF,EAAoBguC,EAAmB,mBAAE/uC,EAAqBH,GAA0B7sF,EAC1Fk8H,EAAkB/+F,EAAUv8B,aAAa08B,8BAExC9kC,EAAOC,EAAQomC,IADDm3F,EAASp1H,aAAa08B,6BACR04F,EAASvyH,YACtCo2C,EAAmBhhD,KAAK+Q,MAAMi1B,EAAY,GAC1Cs9F,EAAkBtjI,KAAKkS,IAAI8uC,EAAmB,EAAG,GACjDuiF,EAAiBvjI,KAAKkS,IAAIoxH,EAAkB,EAAGt9F,GAC/Cw9F,EAAiB7jI,EAAQC,EAC/B,IAAK,IAAIgS,EAAI0xH,EAAiB1xH,EAAI2xH,EAAgB3xH,IAAK,CACnD,MAAM6xH,EAAU7xH,EAAI4xH,EACpB,IAAK,IAAIjjI,EAAI,EAAGA,EAAIX,EAAQW,IAAK,CAC7B,MAAMu0D,EAAUv0D,EAAIZ,EACpB,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAAOU,IAAK,CAC5B,MAAMkL,EAAQk4H,EAAU3uE,EAAUz0D,EAC5Bo1F,EAAa4tC,EAAgB93H,GACXkqF,GAActB,EAAmB,IACrDsB,GAActB,EAAmB,IAEjCgpC,EAASp1H,aAAaq0F,WAAW7wF,EAAO2pF,EAEhD,CACJ,CACJ,CACJ,CAGIwuC,CAAuBp/F,EAAW64F,EAAUh2H,GA/EhD,SAAgCm9B,EAAW64F,EAAUh2H,GACjD,MAAM,kBAAEguF,EAAoBguC,EAAmB,mBAAE/uC,EAAqBL,GAA0B5sF,EAC1Fk8H,EAAkB/+F,EAAUv8B,aAAa08B,8BACxC9kC,EAAOC,EAAQomC,GAAam3F,EAASvyH,WACtCo2C,EAAmBhhD,KAAK+Q,MAAMi1B,EAAY,GAC1CmhE,EAAU,IAAI1lG,MAAM9B,EAAQC,GAAQiV,MAAK,GACzC8uH,EAAc3iF,EAAmBrhD,EAAQC,EACzCgkI,EAAM,CAACvhB,EAAQC,KACjB,MAAM2c,EAAQ,CAAC,CAAC5c,EAAQC,IACxB,KAAO2c,EAAMt7H,QAAQ,CACjB,MAAOtD,EAAGE,GAAK0+H,EAAMjW,QACf6a,EAAkBtjI,EAAIZ,EAAQU,EACpC,GAAIA,EAAI,GACJA,GAAKV,GACLY,EAAI,GACJA,GAAKX,GACLunG,EAAQ08B,GACR,SAEJ18B,EAAQ08B,IAAmB,EAC3B,MAAMC,EAAmBH,EAAcE,EACjCE,EAAmBV,EAAgBS,GACrCC,EAAmB3vC,EAAmB,IACtC2vC,EAAmB3vC,EAAmB,KAG1C+oC,EAASp1H,aAAaq0F,WAAW0nC,EAAkB3uC,GACnD8pC,EAAMvzH,KAAK,CAACrL,EAAI,EAAGE,IACnB0+H,EAAMvzH,KAAK,CAACrL,EAAI,EAAGE,IACnB0+H,EAAMvzH,KAAK,CAACrL,EAAGE,EAAI,IACnB0+H,EAAMvzH,KAAK,CAACrL,EAAGE,EAAI,IACvB,GAEEyjI,EAAW,CAAC3hB,EAAQ4hB,EAAQC,EAAM3jI,KACpC,IAAK,IAAIF,EAAIgiH,EAAQhiH,IAAM4jI,EAAQ5jI,GAAK6jI,EAAM,CAC1C,MAAML,EAAkBtjI,EAAIZ,EAAQU,EAE9B0jI,EAAmBV,EADAM,EAAcE,GAEvC,GAAIE,EAAmB3vC,EAAmB,IACtC2vC,EAAmB3vC,EAAmB,GACtC,MAEC+S,EAAQ08B,IACTD,EAAIvjI,EAAGE,EAEf,GAEJ,IAAK,IAAIA,EAAI,EAAGA,EAAIX,EAAQW,IACxByjI,EAAS,EAAGrkI,EAAQ,EAAG,EAAGY,GAC1ByjI,EAASrkI,EAAQ,EAAG,GAAI,EAAGY,EAEnC,CA6BI4jI,CAAuB7/F,EAAW64F,EAAUh2H,GACrCg2H,CACX,CACAlhG,eAAemoG,EAAyBzgG,EAAoBqxD,EAAiB7tF,GACzE,MAAM,YAAEgyE,GAAgB6b,GAClB,WAAE9wD,EAAU,eAAE+wD,GAAmB9b,EACjCkrD,EAAqB,CACvB/9G,KAAM4d,EAAW,GACjB3d,KAAM0uE,EAAe,GACrBnxD,KAAMI,EAAW,GACjBH,KAAMkxD,EAAe,GACrBjxD,KAAME,EAAW,GACjBD,KAAMgxD,EAAe,IAEnB3wD,EAAY,4BAAwBX,EAAoB0gG,EAAoB,CAC9Ez6H,aAAc,CACVC,KAAM,kBAGRszH,QAAiBiG,EAAmD9+F,EAAWn9B,GAErF,aADM,OAAIm9B,EAAUz2B,SAAUsvH,EAAStvH,UAChCsvH,CACX,C,8FCxGA,MAAM,sBAAEp4F,GAA0B,YAC5Bm+F,EAAsB,IACtBC,EAAsB,IACtBmB,EAAyB,GACzBC,EAAyB,GAW/B,SAAS7M,EAAqB9zF,EAAkB0uD,GAC5C,MAAMtnF,EAAY44B,EAAiBve,UAAUI,eACvC++G,EAAY,gBAAgBx5H,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAChE2O,OAAQ8qH,EAAmB1+F,OAAQ2+F,GAAiBpyC,EACtDqyC,EAAkB/gG,EAAiBve,UACnCu/G,EAAiB,iBAAiB,cAAeH,EAAmBD,GAAYE,GAChFG,EAAoB,iBAAiB,cAAeJ,EAAmBD,EAAWE,GAExF,OAlBJ,SAAqC9gG,EAAkBkhG,GACnD,MAAM,aAAE3qG,EAAY,iBAAEE,GAAqByqG,EACrC7M,EAAalzF,EAAsBnB,EAAiBve,UAAW8U,GAC/D+9F,EAAiBnzF,EAAsBnB,EAAiBve,UAAWgV,GACzE,MAAO,IACAyqG,EACH7M,aACAC,iBAER,CASW6M,CAA4BnhG,GADV,OAAoB,CAACihG,EAAmBD,GAAiBD,GAEtF,CA0HA1oG,eAAe+oG,EAA8C1gG,EAAWguD,EAAYrzF,EAAUkI,GAC1F,MAAMg2H,QAAiB,EAAAhnB,aAAA,oCAAiD7xE,EAAUz2B,UAGlF,OAnGJ,SAAgC+1B,EAAkBu5F,EAAU7qC,EAAYnrF,GACpE,MAAM89H,EAAqBrhG,EAAiB77B,aAAa08B,6BACnDygG,EAAgB5yC,EAAW34E,QAC1Bha,EAAOC,EAAQomC,GAAapC,EAAiBh5B,WAC9Cq7B,EAAoBtmC,EAAQC,EAC5BulI,EAAmBpgG,EAAsBnB,EAAiBve,UAAW6/G,GACrEE,EAAsBH,EAAmBE,EAAiB,GAAKl/F,EACjEk/F,EAAiB,GAAKxlI,EACtBwlI,EAAiB,IACfjwC,EAAoB/tF,EAAQ+tF,mBAAqBguC,EACjDrxC,EAAuB1qF,EAAQ0qF,sBAAwByyC,EACvDe,EAA4BrlI,KAAK6e,IAAIumH,EAAsBvzC,GAC3DyzC,EAAwBF,EAAsBC,EAC9CE,EAAwBH,EAAsBC,EAC9CG,EAAsB,CACxB,EAAE,EAAG,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,IAELC,EAAkBN,EAAiB,GAAKl/F,EAC1Ck/F,EAAiB,GAAKxlI,EACtBwlI,EAAiB,GACrBhI,EAASp1H,aAAaq0F,WAAWqpC,EAAiBvwC,GAClD,MAAM+pC,EAAQ,CAACkG,GACf,KAAOlG,EAAMt7H,QAAQ,CACjB,MAAM+hI,EAAWzG,EAAMjW,SAChB3oH,EAAGE,EAAGqR,GAAK8zH,EAClB,IAAK,IAAIj5H,EAAI,EAAGopC,EAAM2vF,EAAoB7hI,OAAQ8I,EAAIopC,EAAKppC,IAAK,CAC5D,MAAMk5H,EAAqBH,EAAoB/4H,GACzCm5H,EAAKvlI,EAAIslI,EAAmB,GAC5BE,EAAKtlI,EAAIolI,EAAmB,GAC5BG,EAAKl0H,EAAI+zH,EAAmB,GAClC,GAAIC,EAAK,GACLA,GAAMjmI,GACNkmI,EAAK,GACLA,GAAMjmI,GACNkmI,EAAK,GACLA,GAAM9/F,EACN,SAEJ,MAAM+/F,EAAqBD,EAAK7/F,EAAoB4/F,EAAKlmI,EAAQimI,EAC3DI,EAAqBf,EAAmBc,GAChB5I,EAASp1H,aAAa0mC,WAAWs3F,KACjC7wC,GAC1B8wC,EAAqBV,GACrBU,EAAqBT,IAGzBpI,EAASp1H,aAAaq0F,WAAW2pC,EAAoB7wC,GACrD+pC,EAAMvzH,KAAK,CAACk6H,EAAIC,EAAIC,IACxB,CACJ,CACJ,CA0CIpC,CAAuBp/F,EAAW64F,EAAU7qC,EAAYnrF,GAzC5D,SAAgCm9B,EAAW64F,EAAU7qC,EAAYrzF,EAAUkI,GACvE,MAAMk8H,EAAkB/+F,EAAUv8B,aAAa08B,8BACxC1iC,EAASC,EAAMgkC,GAAam3F,EAASvyH,WACtCq7B,EAAoBlkC,EAAUC,GAC9B,eAAEyjC,EAAc,iBAAED,GAAqB,sCAAkC23F,EAAS93G,UAAWpmB,EAASykB,aACtGuiH,EAAkBlhG,EAAsBT,EAAUjf,UAAWitE,EAAW34E,QACxEyrH,EAAsB/B,EAAgB4C,EAAgB,GAAKlkI,EAAUC,EACvEikI,EAAgB,GAAKlkI,EACrBkkI,EAAgB,IACdn0C,EAAuB3qF,EAAQ2qF,sBAAwByyC,EACvDpvC,EAAoBhuF,GAASguF,mBAAqBguC,EAClD+C,EAA4BlmI,KAAK6e,IAAIumH,EAAsBtzC,GAC3Dq0C,EAAwBf,EAAsBc,EAC9CE,EAAwBhB,EAAsBc,EAE9CG,EAAiB,EAAIrmI,KAAKC,GADR,IAElBqmI,EAAY,kBAAkB,cAAe9gG,EAAkB6gG,GAC/DE,EAAc,WAAW9gG,GAC/B,IAAK,IAAIh5B,EAAI,EAAGA,EAJQ,IAIaA,IAAK,CACtC,MAAM+5H,EAAyB,iBAAiB,cAAel0C,EAAW34E,OAAQ4sH,EAAaj0C,EAAWvsD,QACpG0gG,EAAuB1hG,EAAsBo4F,EAAS93G,UAAWmhH,IAChEnmI,EAAGE,EAAGqR,GAAK60H,EAElB,GADA,mBAAmBF,EAAaA,EAAaD,GACzCjmI,EAAI,GACJA,GAAK0B,GACLxB,EAAI,GACJA,GAAKyB,GACL4P,EAAI,GACJA,GAAKo0B,EACL,SAEJ,MAAM31B,EAAShQ,EAAIE,EAAIwB,EAAU6P,EAAIq0B,EAC/BwvD,EAAa4tC,EAAgBhzH,IAC/BolF,EAAa0wC,GACb1wC,EAAa2wC,IACbjJ,EAASp1H,aAAaq0F,WAAW/rF,EAAQ8kF,EAEjD,CACJ,CAIIgvC,CAAuB7/F,EAAW64F,EAAU7qC,EAAYrzF,EAAUkI,GAC3Dg2H,CACX,CACAlhG,eAAeyqG,EAAoB/iG,EAAoB2uD,EAAYrzF,EAAUkI,GACzE,MACMm9B,EAjIV,SAAoCV,EAAkB0uD,EAAYrzF,GAC9D,MAAM0lI,EAAkB/gG,EAAiBve,UACnC5B,EAASxkB,EAASykB,aAClB,aAAEkiB,EAAY,aAAEF,GAAiB,sCAAkCi/F,EAAiBlhH,GAI1F,GAHoB,CAACmiB,EAAcF,GAAcxb,MAAM8uG,IAAS,oBAAgBh5H,KAAK6e,IAAIm6G,EAAI,IAAK,KAC7F,oBAAgBh5H,KAAK6e,IAAIm6G,EAAI,IAAK,KAClC,oBAAgBh5H,KAAK6e,IAAIm6G,EAAI,IAAK,KAGnC,YADA7lH,QAAQC,KAAK,kCAGjB,MAAQ6E,UAAW0uH,GAAoBjP,EAAqB9zF,EAAkB0uD,GACxE+xC,EAAqB,CACvB/9G,KAAMqgH,EAAgB,GAAG,GACzBpgH,KAAMogH,EAAgB,GAAG,GAAK,EAC9B7iG,KAAM6iG,EAAgB,GAAG,GACzB5iG,KAAM4iG,EAAgB,GAAG,GAAK,EAC9B3iG,KAAM2iG,EAAgB,GAAG,GACzB1iG,KAAM0iG,EAAgB,GAAG,GAAK,GAElC,OAAO,4BAAwB/iG,EAAiB/1B,SAAUw2H,EAAoB,CAC1Ez6H,aAAc,CACVC,KAAM,iBAGlB,CAwGsB+8H,CADO,EAAAryG,MAAM7M,UAAUic,GACsB2uD,EAAYrzF,GACrEk+H,QAAiB6H,EAA8C1gG,EAAWguD,EAAYrzF,EAAUkI,GAEtG,aADM,OAAIm9B,EAAUz2B,SAAUsvH,EAAStvH,UAChCsvH,CACX,C,+FC/JA,MAAM,sBAAEp4F,GAA0B,YAC5B8hG,EAAqB,IAC3B,SAASC,EAAsBljG,EAAkBypC,EAAelmE,GAC5D,MAAM,WAAEyD,EAAYya,UAAW0hH,GAAiBnjG,GACzCjkC,EAAOC,EAAQomC,GAAap7B,EAC7Bo8H,EAA8BpjG,EAAiB77B,aAC/CG,EAAa8+H,EAA4BviG,6BACzCwB,EAAoBtmC,EAAQC,EAC5BqnI,EAAqB9/H,GAAS+/H,2BAA6B,KAC3DC,EAAYhgI,GAASigI,0BAA4B,KACjDC,EAAYlgI,GAASmgI,0BAA4B,KACjDC,EAAqBpgI,GAASogI,oBAAsB,KACpDC,EAA6BrgI,GAASqgI,4BAA8B,KACpEC,EAAW1iG,EAAsBgiG,EAAc15D,GAAejkE,IAAIpJ,KAAKmkB,OACvEorG,EAAayX,EAA4B1wH,QAAQmxH,GACvD,GAAIA,EAAS,GAAK,GACdA,EAAS,IAAM9nI,GACf8nI,EAAS,GAAK,GACdA,EAAS,IAAM7nI,GACf6nI,EAAS,GAAK,GACdA,EAAS,IAAMzhG,EAEf,OADA7yB,QAAQC,KAAK,4CACN,KAEX,MAAMs0H,EAAe,uCAAmCx/H,EAAY0C,EAAY68H,EAAUR,GAC/D,IAAvBS,EAAa11H,QACb01H,EAAanhG,KAAOr+B,EAAWqnH,GAC/BmY,EAAalhG,OAAS,GAE1B,MAAMmhG,EAAuBD,EAAanhG,KAAO4gG,EAAYO,EAAalhG,OACpEohG,EAAuBF,EAAanhG,KAAO4gG,EAAYO,EAAalhG,OACpEg/F,EAAsB,CACxB,EAAE,EAAG,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,GAAI,EAAG,GACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,GAAI,GACR,CAAC,EAAG,EAAG,IAEX,IAAIl/G,EAAO5M,IAAUoqB,EAAOpqB,IAAUsqB,EAAOtqB,IACzC6M,GAAQ7M,IAAUqqB,GAAQrqB,IAAUuqB,GAAQvqB,IAChD,MAAM+5E,EAAsB,IAAI33D,IAC1BmjG,EAAQ,GACRzP,EAAatnH,EAAWqnH,GAC9B,KAAIC,GAAcmY,GACdnY,GAAcoY,GASd,OADAz0H,QAAQC,KAAK,kGACN,CAAEqgF,oBAAqB,IAAI33D,IAAO43D,oBAAqB,IAAI53D,KARlE23D,EAAoBptF,IAAIkpH,GACxB0P,EAAMvzH,KAAK+7H,GACXnhH,EAAOC,EAAOkhH,EAAS,GACvB3jG,EAAOC,EAAO0jG,EAAS,GACvBzjG,EAAOC,EAAOwjG,EAAS,GAM3B,IAAII,EAAoB,EACxB,KAAOA,EAAoB5I,EAAMt7H,QAC7B8vF,EAAoBhoE,KAAOo7G,GAAoB,CAC/C,MAAOxmI,EAAGE,EAAGqR,GAAKqtH,EAAM4I,KACxBvhH,EAAOtmB,KAAKa,IAAIR,EAAGimB,GACnBwd,EAAO9jC,KAAKa,IAAIN,EAAGujC,GACnBE,EAAOhkC,KAAKa,IAAI+Q,EAAGoyB,GACnBzd,EAAOvmB,KAAKkS,IAAI7R,EAAGkmB,GACnBwd,EAAO/jC,KAAKkS,IAAI3R,EAAGwjC,GACnBE,EAAOjkC,KAAKkS,IAAIN,EAAGqyB,GACnB,IAAK,IAAIx3B,EAAI,EAAGA,EAAI+4H,EAAoB7hI,OAAQ8I,IAAK,CACjD,MAAOiZ,EAAIC,EAAIC,GAAM4/G,EAAoB/4H,GACnCm5H,EAAKvlI,EAAIqlB,EACTmgH,EAAKtlI,EAAIolB,EACTmgH,EAAKl0H,EAAIgU,EACf,GAAIggH,EAAK,GACLA,GAAMjmI,GACNkmI,EAAK,GACLA,GAAMjmI,GACNkmI,EAAK,GACLA,GAAM9/F,EACN,SAEJ,MAAMm2F,EAAgB2J,EAAK7/F,EAAoB4/F,EAAKlmI,EAAQimI,EAC5D,GAAInyC,EAAoBrtF,IAAI+1H,GACxB,SAEJ,MAAM2L,EAAgB5/H,EAAWi0H,GAC7B2L,GAAiBH,GACjBG,GAAiBF,IACjBn0C,EAAoBptF,IAAI81H,GACpB1oC,EAAoBhoE,KAAOo7G,GAC3B5H,EAAMvzH,KAAK,CAACk6H,EAAIC,EAAIC,IAGhC,CACJ,CAIA,GAHIryC,EAAoBhoE,MAAQo7G,GAC5B1zH,QAAQqM,MAAM,6CAA6CqnH,qBAE9B,IAA7BpzC,EAAoBhoE,KAEpB,OADAtY,QAAQC,KAAK,sCACN,CAAEqgF,oBAAqB,IAAI33D,IAAO43D,oBAAqB,IAAI53D,KAEtE,IAAIisG,EAAc,EACdC,EAAgB,EACpBv0C,EAAoBzvF,SAASuH,IACzB,MAAMvI,EAAQkF,EAAWqD,GACzBw8H,GAAe/kI,EACfglI,GAAiBhlI,EAAQA,CAAK,IAElC,MAAMilI,EAAgBx0C,EAAoBhoE,KACpCy8G,EAAeH,EAAcE,EAC7BE,EAAmBH,EAAgBC,EAAgBC,EAAeA,EAElEE,EAAwBf,EADPrnI,KAAK0mC,KAAK1mC,KAAKkS,IAAI,EAAGi2H,IAEvCE,EAAQroI,KAAKkS,IAAI,EAAGoU,EAAOihH,GAC3Be,EAAQtoI,KAAKkS,IAAI,EAAG4xB,EAAOyjG,GAC3BgB,EAAQvoI,KAAKkS,IAAI,EAAG8xB,EAAOujG,GAC3BiB,EAAQxoI,KAAKa,IAAIlB,EAAQ,EAAG4mB,EAAOghH,GACnCkB,EAAQzoI,KAAKa,IAAIjB,EAAS,EAAGmkC,EAAOwjG,GACpCmB,EAAQ1oI,KAAKa,IAAImlC,EAAY,EAAG/B,EAAOsjG,GACvC7zC,EAAsB,IAAI53D,IAChC,IAAI6sG,EAAW,EACXC,EAAe,EACnB,MAAMC,EAAcrB,EAA6B,KACjD,KAAOoB,EAAepB,GAA8BmB,EAAWE,GAAa,CACxEF,IACA,MAAMr3B,EAAKtxG,KAAK+Q,MAAM/Q,KAAKq+B,UAAYmqG,EAAQH,EAAQ,GAAKA,GACtD92B,EAAKvxG,KAAK+Q,MAAM/Q,KAAKq+B,UAAYoqG,EAAQH,EAAQ,GAAKA,GACtDQ,EAAK9oI,KAAK+Q,MAAM/Q,KAAKq+B,UAAYqqG,EAAQH,EAAQ,GAAKA,GACtDjiG,EAAcwiG,EAAK7iG,EAAoBsrE,EAAK5xG,EAAQ2xG,EAC1D,GAAI7d,EAAoBrtF,IAAIkgC,IACxBotD,EAAoBttF,IAAIkgC,GACxB,SAEJ,MAAMyiG,EAAc7gI,EAAWo+B,GAC/B,GAAItmC,KAAK6e,IAAIkqH,EAAcb,GAAgBE,EAAuB,CAC9D,IAAIY,GAAmB,EACvB,IAAK,IAAIrjH,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC7B,MAAMkgH,EAAKt0B,EAAK5rF,EAChB,KAAIkgH,EAAK,GAAKA,GAAMjmI,GAGpB,IAAK,IAAI8lB,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC7B,MAAMkgH,EAAKt0B,EAAK5rF,EAChB,GAAIkgH,EAAK,GAAKA,GAAMjmI,EAChB,SAEJ,MAAMw8H,EAAgB2M,EAAK7iG,EAAoB4/F,EAAKlmI,EAAQimI,EACxDnyC,EAAoBrtF,IAAI+1H,IACxBzoC,EAAoBttF,IAAI+1H,KAG5BzoC,EAAoBrtF,IAAI81H,GACxB6M,GAAmB,EACvB,CACJ,CACIA,GACAJ,GAER,CACJ,CAMA,OALiC,IAA7Bl1C,EAAoBjoE,MACpBtY,QAAQC,KAAK,kFAEjBD,QAAQqM,MAAM,sBAAuBi0E,EAAoBhoE,MACzDtY,QAAQqM,MAAM,sBAAuBk0E,EAAoBjoE,MAClD,CAAEgoE,sBAAqBC,sBAClC,CACAz3D,eAAegtG,GAAmB,mBAAEtlG,EAAkB,cAAE0pC,EAAa,QAAElmE,IACnE,MAAMy8B,EAAmB,EAAArP,MAAM7M,UAAUic,GACnCw5F,EAAW,EAAAhnB,aAAA,oCAAiDxyE,GAClEw5F,EAASp1H,aAAa/D,SAAQ,EAAGuH,QAAOvI,YACtB,IAAVA,GACAm6H,EAASp1H,aAAaq0F,WAAW7wF,EAAO,EAC5C,IAEJ,MAAMioF,EAAQrsF,EAAQqsF,OAClBszC,EAAsBljG,EAAkBypC,EAAelmE,GACrD+hI,EAAoB/hI,GAAS+tF,mBAAqB,KAClDi0C,EAAoBhiI,GAASguF,mBAAqB,KACxD,IAAK3B,EACD,OAAO,KAEX,MAAM,oBAAEC,EAAmB,oBAAEC,GAAwBF,EACrD,OAAIC,EAAoBhoE,KAAO,IAC3BgoE,EAAoBhoE,KAAOo7G,GAC3BnzC,EAAoBjoE,KAAO,IAC3BtY,QAAQC,KAAK,uEACN+pH,IAEX1pC,EAAoBzvF,SAASuH,IACzB4xH,EAASp1H,aAAaq0F,WAAW7wF,EAAO29H,EAAkB,IAE9Dx1C,EAAoB1vF,SAASuH,IACzB4xH,EAASp1H,aAAaq0F,WAAW7wF,EAAO49H,EAAkB,UAExD,OAAIxlG,EAAoBw5F,EAAStvH,SAAU1G,GAC1Cg2H,EACX,C,2lBCpMO,SAASxQ,EAAsB5uE,GAClC,MAAMkzC,GAAY,IAAAnzC,cAAaC,GAC/B,QAAkBh9C,IAAdkwF,EACA,QAE4B,OAAsBlzC,GAC9B/5C,SAASolI,IAC7BA,EAAKzc,uBAAuB,IAEhC,MAAM3uE,EAAgBizC,EAAUo4C,mBAEhC,IAD2B1mI,OAAO4B,KAAKy5C,GAAe50C,KAAKlG,GAAQ86C,EAAc96C,KACzDS,OACpB,OAEJ,MAAMiZ,EAAcq0E,EAAU7hC,kBAC9B,OAAsCxyC,EAC1C,C,yHCDA,QAhBA,SAAkB1M,EAAMmjH,EAAMlsH,GAC1B,IAAIysH,GAAU,EACVt6C,GAAW,EACf,GAAoB,mBAATppE,EACP,MAAM,IAAI6jH,UAAU,uBAMxB,OAJI,OAAS5sH,KACTysH,EAAU,YAAazsH,EAAU2tH,QAAQ3tH,EAAQysH,SAAWA,EAC5Dt6C,EAAW,aAAcnyE,EAAU2tH,QAAQ3tH,EAAQmyE,UAAYA,IAE5D,OAASppE,EAAMmjH,EAAM,CACxBO,UACAt6C,WACAk6C,QAASH,GAEjB,C,+BCjBA,SAASiW,EAAejqF,EAAeC,GACnC,MAAMiqF,EAAOC,EAAcnqF,GACrBz5C,EAAO4jI,EAAclqF,GAC3B,MAAO,CACHmqF,KAAMC,EAAkBH,EAAKE,KAAM7jI,EAAK6jI,MACxCE,OAAQD,EAAkBH,EAAKI,OAAQ/jI,EAAK+jI,QAC5CnrI,OAAQkrI,EAAkBH,EAAK/qI,OAAQoH,EAAKpH,QAC5Cq+C,OAyGmBopD,EAzGMsjC,EAAK1sF,MAyGH0Q,EAzGU3nD,EAAKi3C,MA0GvC,CAACopD,EAAO,GAAK14C,EAAO,GAAI04C,EAAO,GAAK14C,EAAO,GAAI04C,EAAO,GAAK14C,EAAO,MAD7E,IAA2B04C,EAAQ14C,CAvGnC,CACA,SAASq8E,EAAiBvqF,EAAeC,GACrC,MAAMiqF,EAAOC,EAAcnqF,GACrBz5C,EAAO4jI,EAAclqF,GAC3B,MAAO,CACHmqF,KAAMI,EAAeN,EAAKE,KAAM7jI,EAAK6jI,MACrCE,OAAQE,EAAeN,EAAKI,OAAQ/jI,EAAK+jI,QACzCnrI,OAAQqrI,EAAeN,EAAK/qI,OAAQoH,EAAKpH,QACzCq+C,MAAOitF,EAAeP,EAAK1sF,MAAOj3C,EAAKi3C,OAE/C,CAGA,SAASktF,EAA+B1qF,EAAeC,GACnD,MAAM6uB,EAAkB67D,EAAkC3qF,GACpD4qF,EAAeD,EAAkC1qF,GAOvD,MANsB,CAClBmqF,KAAMt7D,EAAgBs7D,KAAOQ,EAAaR,KAC1CE,OAAQx7D,EAAgBw7D,OAASM,EAAaN,OAC9CnrI,OAAQ2vE,EAAgB3vE,OAASyrI,EAAazrI,OAC9Cq+C,MAAOsxB,EAAgBtxB,MAAQotF,EAAaptF,MAGpD,CACA,SAASqtF,EAAe14H,GACpB,OAAOytB,KAAKihF,MAAMjhF,KAAKC,UAAU1tB,GACrC,CACA,SAAS24H,EAAW34H,GAChB,OAAOytB,KAAKihF,MAAMjhF,KAAKC,UAAU1tB,GACrC,CACA,SAASg4H,EAAch4H,GACnB,OAAOA,EAAO4tB,QAAO,CAACgrG,EAAMb,KACjB,CACHE,KAAM,CACFW,EAAKX,KAAK,GAAKF,EAAKE,KAAK,GAAKj4H,EAAO7N,OACrCymI,EAAKX,KAAK,GAAKF,EAAKE,KAAK,GAAKj4H,EAAO7N,QAEzCgmI,OAAQ,CACJS,EAAKT,OAAO,GAAKJ,EAAKI,OAAO,GAAKn4H,EAAO7N,OACzCymI,EAAKT,OAAO,GAAKJ,EAAKI,OAAO,GAAKn4H,EAAO7N,QAE7CnF,OAAQ,CACJ4rI,EAAK5rI,OAAO,GAAK+qI,EAAK/qI,OAAO,GAAKgT,EAAO7N,OACzCymI,EAAK5rI,OAAO,GAAK+qI,EAAK/qI,OAAO,GAAKgT,EAAO7N,QAE7Ck5C,MAAO,CACHutF,EAAKvtF,MAAM,GAAK0sF,EAAK1sF,MAAM,GAAKrrC,EAAO7N,OACvCymI,EAAKvtF,MAAM,GAAK0sF,EAAK1sF,MAAM,GAAKrrC,EAAO7N,OACvCymI,EAAKvtF,MAAM,GAAK0sF,EAAK1sF,MAAM,GAAKrrC,EAAO7N,WAGhD,CACC8lI,KAAM,CAAC,EAAG,GACVE,OAAQ,CAAC,EAAG,GACZnrI,OAAQ,CAAC,EAAG,GACZq+C,MAAO,CAAC,EAAG,EAAG,IAEtB,CACA,SAASwtF,EAAmB74H,GACxB,OAAOA,EAAO4tB,QAAO,CAACgrG,EAAMb,KACjB,CACHE,KAAM,CACFW,EAAKX,KAAK,GAAKF,EAAKE,KAAK,GAAKj4H,EAAO7N,OACrCymI,EAAKX,KAAK,GAAKF,EAAKE,KAAK,GAAKj4H,EAAO7N,QAEzCgmI,OAAQ,CACJS,EAAKT,OAAO,GAAKJ,EAAKI,OAAO,GAAKn4H,EAAO7N,OACzCymI,EAAKT,OAAO,GAAKJ,EAAKI,OAAO,GAAKn4H,EAAO7N,QAE7CnF,OAAQ,CACJ4rI,EAAK5rI,OAAO,GAAK+qI,EAAK/qI,OAAO,GAAKgT,EAAO7N,OACzCymI,EAAK5rI,OAAO,GAAK+qI,EAAK/qI,OAAO,GAAKgT,EAAO7N,QAE7Ck5C,MAAO,CACHutF,EAAKvtF,MAAM,GAAK0sF,EAAK1sF,MAAM,GAAKrrC,EAAO7N,OACvCymI,EAAKvtF,MAAM,GAAK0sF,EAAK1sF,MAAM,GAAKrrC,EAAO7N,OACvCymI,EAAKvtF,MAAM,GAAK0sF,EAAK1sF,MAAM,GAAKrrC,EAAO7N,QAE3C2mI,MAAO,CACHC,WAAY,KACZC,QAASJ,EAAKE,MAAME,QAAUjB,EAAKe,MAAME,QAAUh5H,EAAO7N,OAC1D8mI,QAASL,EAAKE,MAAMG,QAAUlB,EAAKe,MAAMG,QAAUj5H,EAAO7N,OAC1D+mI,MAAON,EAAKE,MAAMI,MAAQnB,EAAKe,MAAMI,MAAQl5H,EAAO7N,OACpD0iI,cAAe+D,EAAKE,MAAMjE,cAAgBkD,EAAKe,MAAMjE,cAAgB70H,EAAO7N,WAGrF,CACC8lI,KAAM,CAAC,EAAG,GACVE,OAAQ,CAAC,EAAG,GACZnrI,OAAQ,CAAC,EAAG,GACZq+C,MAAO,CAAC,EAAG,EAAG,GACdytF,MAAO,CACHC,WAAY,KACZC,QAAS,EACTC,QAAS,EACTC,MAAO,EACPrE,cAAe,IAG3B,CACA,SAASqD,EAAkBzjC,EAAQ14C,GAC/B,MAAO,CAAC04C,EAAO,GAAK14C,EAAO,GAAI04C,EAAO,GAAK14C,EAAO,GACtD,CAIA,SAASy8E,EAAkCx4H,GACvC,MAAMm5H,EAAiB,GACvB,IAAK,IAAIl+H,EAAI,EAAGA,EAAI+E,EAAO7N,OAAQ8I,IAC/B,IAAK,IAAIuI,EAAI,EAAGA,EAAIxD,EAAO7N,OAAQqR,IAC3BvI,EAAIuI,GACJ21H,EAAej/H,KAAK,CAChB+9H,KAAMI,EAAer4H,EAAO/E,GAAGg9H,KAAMj4H,EAAOwD,GAAGy0H,MAC/CE,OAAQE,EAAer4H,EAAO/E,GAAGk9H,OAAQn4H,EAAOwD,GAAG20H,QACnDnrI,OAAQqrI,EAAer4H,EAAO/E,GAAGjO,OAAQgT,EAAOwD,GAAGxW,QACnDq+C,MAAOitF,EAAet4H,EAAO/E,GAAGowC,MAAOrrC,EAAOwD,GAAG6nC,SAKjE,OAAO8tF,EAAevrG,QAAO,CAACgrG,EAAMb,KACzB,CACHE,KAAMW,EAAKX,KAAOF,EAAKE,KAAOkB,EAAehnI,OAC7CgmI,OAAQS,EAAKT,OAASJ,EAAKI,OAASgB,EAAehnI,OACnDnF,OAAQ4rI,EAAK5rI,OAAS+qI,EAAK/qI,OAASmsI,EAAehnI,OACnDk5C,MAAOutF,EAAKvtF,MAAQ0sF,EAAK1sF,MAAQ8tF,EAAehnI,UAErD,CACC8lI,KAAM,EACNE,OAAQ,EACRnrI,OAAQ,EACRq+C,MAAO,GAEf,CACA,SAASgtF,EAAe5jC,EAAQ14C,GAC5B,OAAOvtD,KAAK0mC,KAAK1mC,KAAKk7D,IAAI+qC,EAAO,GAAK14C,EAAO,GAAI,GAAKvtD,KAAKk7D,IAAI+qC,EAAO,GAAK14C,EAAO,GAAI,GAC1F,CACA,SAASu8E,EAAe7jC,EAAQ14C,GAC5B,OAAOvtD,KAAK0mC,KAAK1mC,KAAKk7D,IAAI+qC,EAAO,GAAK14C,EAAO,GAAI,GAC7CvtD,KAAKk7D,IAAI+qC,EAAO,GAAK14C,EAAO,GAAI,GAChCvtD,KAAKk7D,IAAI+qC,EAAO,GAAK14C,EAAO,GAAI,GACxC,C,6OCnJO,SAASq9E,EAAuCC,GACnDA,EAAa7mI,SAAS+5C,IAClB,MAAMkzC,GAAY,IAAAnzC,cAAaC,GAC/B,IAAKkzC,EAED,YADA99E,QAAQC,KAAK,+BAA+B2qC,KAG1BkzC,EAAUo4C,mBAClBrlI,SAAS2oD,IACnB,MAAM,kBAAEx9B,EAAiB,WAAEgB,GAAew8B,EACpCjwC,GAAkB,IAAA0S,oBAAmBD,GAC3C,IAAKzS,EAED,YADAvJ,QAAQC,KAAK,qCAAqC+b,KAGtD,MAAMlwB,EAAWyd,EAAgB2U,YAAYlB,IAC7C,OAAwBlxB,EAASmxB,QAAQ,GAC3C,GAEV,C,kFCpBO,SAASuzB,EAAsCN,GAC7CA,EAAoB1/C,QAGzB0/C,EAAoBr/C,SAASmsB,IACzB,MAAM9xB,GAAiB,IAAAwiE,+BAA8B1wC,GACrD,IAAK9xB,EAED,YADA8U,QAAQC,KAAK,8BAA8B+c,KAG/C,MAAM,SAAElxB,GAAaZ,EACrB,IAAKY,EAED,YADAkU,QAAQC,KAAK,8BAA8B+c,KAG/C,MAAMC,EAAUnxB,EAASmxB,SACzB,OAAwBA,EAAQ,GAExC,CACA,S,gTCpBA,SAAS4qD,EAAoB/7E,EAAUmoB,GACnC,GAAInoB,aAAoB,EAAAuoD,mBAAoB,CACxC,MAAM35C,EAAW,EAAAgjC,UAAA,YAAsBzpB,GACjCL,EAAS,EAAAwN,MAAM7M,UAAU7Z,GAC/B,QAASkZ,GAAQ06B,SAAW9+C,OAAO4B,KAAKwiB,EAAO06B,SAAS99C,OAAS,CACrE,CACK,GAAI1E,aAAoB,EAAAm8B,cAAe,CACxC,MAAM,SAAE1L,GAAazwB,EAAS05B,gBAAkB,CAAC,EACjD,QAASjJ,GAAUC,MACvB,CAEI,OAAO,CAEf,C,+BCdO,IAAIgjB,E,iBACX,SAAWA,GACPA,EAA+B,IAAI,MACnCA,EAAgC,KAAI,OACpCA,EAAkC,OAAI,SACtCA,EAAiC,MAAI,OACxC,CALD,CAKGA,IAA8BA,EAA4B,CAAC,G,kJCN9D,MA4CMm4F,EAAyB,CAC7BC,QAAS,EAETC,OAAQ,EAERC,OAAQ,GAGV,IAAIC,EAAY,CACdC,wBAjB8B,CAC9BC,UAAW,EACXC,YAAa,EACbC,SAAU,EACVC,QAAS,GAcTC,oBA3C0B,CAC1BC,IAAK,EACLC,MAAO,EACPC,QAAS,GAyCTC,eAvDqB,CACrBC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,UAAW,EACXC,YAAa,EACbC,SAAU,EACVC,eAAgB,GA+ChBC,eAxCqB,CACrBC,cAAe,EAEfC,qBAAsB,EAEtBC,oBAAqB,EAErBC,YAAa,EAEbC,aAAc,GAEdC,WAAY,IA8BZ9B,yBACA+B,gBA5BsB,CACtBC,eAAgB,EAEhBC,YAAa,GA0BbC,eAhBqB,e,iICnCvB,MAAM,cACJC,GACE,EAAAxlC,EAwTJ,MAAML,EAAiB,CACrBp8F,UAAW,KAEX8a,aAAc,KAEd0U,aAAc,KAEd3vB,QAAS,CAAC,EAAK,EAAK,GACpBC,OAAQ,CAAC,EAAK,EAAK,GACnB2iG,OAAQ,CAAC,GAAI,EAAG,GAAI,EAAG,GAAI,GAC3By/B,gBAAiB,IAAeC,OAKlC,SAAShpI,EAAOkjG,EAAWC,GACzB,IAAIC,EAAgBC,UAAU7jG,OAAS,QAAsB5C,IAAjBymG,UAAU,GAAmBA,UAAU,GAAK,CAAC,EACzF7kG,OAAO48D,OAAO+nC,EAAOF,EAAgBG,GAGrC,YAAkBF,EAAWC,EAAOC,GAC/BD,EAAMt8F,UAEAvJ,MAAMC,QAAQ4lG,EAAMt8F,aAC7Bs8F,EAAMt8F,UAAY,IAAIoiI,aAAa9lC,EAAMt8F,UAAUvH,MAAM,EAAG,KAF5D6jG,EAAMt8F,UAAY,cAAc,IAAIoiI,aAAa,IAInD9lC,EAAMxhF,aAAe,IAAIsnH,aAAa,IACtC9lC,EAAM9sE,aAAe,IAAI4yG,aAAa,IAGtC,EAAA3lC,EAAMtkG,IAAIkkG,EAAWC,EAAO,CAAC,eAAgB,iBAC7C,EAAAG,EAAM4lC,YAAYhmC,EAAWC,EAAO,CAAC,SAAU,WAAY,GAC3D,EAAAG,EAAM4lC,YAAYhmC,EAAWC,EAAO,CAAC,aAAc,GACnD,EAAAG,EAAM6lC,SAASjmC,EAAWC,EAAO,CAAC,UAAW,GAnV/C,SAAsBD,EAAWC,GAE/BA,EAAMimC,eAAe7hI,KAAK,gBAC1B27F,EAAUmmC,UAAY,WACpB,GAAIlmC,EAAMmmC,QAER,OADAR,EAAc,8CACP,EAET,IAAK,IAAIS,EAAOlmC,UAAU7jG,OAAQgqI,EAAW,IAAIlsI,MAAMisI,GAAOE,EAAO,EAAGA,EAAOF,EAAME,IACnFD,EAASC,GAAQpmC,UAAUomC,GAE7B,MAAMC,EAAkC,IAApBF,EAAShqI,OAAegqI,EAAS,GAAKA,EAC1D,GAA2B,IAAvBE,EAAYlqI,OACd,OAAO,EAET,MAAMmqI,EAAiBxmC,EAAMmG,OAAOvjF,MAAK,CAAChS,EAAM3M,IAAU2M,IAAS21H,EAAYtiI,KAM/E,OALIuiI,IACFxmC,EAAMmG,OAASogC,EAAYpqI,QAC3B6jG,EAAM4lC,gBAAkB,iCAA+C5lC,EAAMmG,QAC7EpG,EAAUt3D,YAEL+9F,CACT,EACAzmC,EAAUqE,cAAgB,WACxB,IAAIj/F,EACAuI,EACAI,EACJ,GAAIkyF,EAAMmmC,QACRR,EAAc,iDADhB,CAIA,GAAyB,IAArBzlC,UAAU7jG,OAAc,CAC1B,MAAMoM,EAAQy3F,UAAU7jG,QAAU,OAAI5C,EAAYymG,UAAU,GAC5D/6F,EAAIsD,EAAM,GACViF,EAAIjF,EAAM,GACVqF,EAAIrF,EAAM,EACZ,KAAO,IAAyB,IAArBy3F,UAAU7jG,OAMnB,YADAspI,EAAc,+BAJdxgI,EAAI+6F,UAAU7jG,QAAU,OAAI5C,EAAYymG,UAAU,GAClDxyF,EAAIwyF,UAAU7jG,QAAU,OAAI5C,EAAYymG,UAAU,GAClDpyF,EAAIoyF,UAAU7jG,QAAU,OAAI5C,EAAYymG,UAAU,EAIpD,CACAH,EAAUmmC,UAAU,EAAG/gI,EAAI,EAAG,EAAGuI,EAAI,EAAG,EAAGI,EAAI,EAd/C,CAeF,EACAiyF,EAAUxhF,cAAgB,IAAM,CAACyhF,EAAMmG,OAAO,GAAKnG,EAAMmG,OAAO,GAAK,EAAGnG,EAAMmG,OAAO,GAAKnG,EAAMmG,OAAO,GAAK,EAAGnG,EAAMmG,OAAO,GAAKnG,EAAMmG,OAAO,GAAK,GACnJpG,EAAU6B,iBAAmB,KAC3B,MAAM6kC,EAAO1mC,EAAUxhF,gBACvB,IAAImoH,EAAS,EACb,IAAK,IAAIvhI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,GAAgB,IAAZshI,EAAKthI,GACP,OAAO,EAELshI,EAAKthI,GAAK,IACZuhI,GAAUD,EAAKthI,GAAK,EAExB,CACA,OAAOuhI,CAAM,EAEf3mC,EAAU4mC,kBAAoB,KAC5B,MAAMF,EAAO1mC,EAAUxhF,gBACvB,OAAOkoH,EAAK,GAAKA,EAAK,GAAKA,EAAK,EAAE,EAEpC1mC,EAAUl3F,SAAW5E,IACnB,MAAMwiI,EAAO1mC,EAAUxhF,gBACvB,GAAgB,IAAZkoH,EAAK,IAAwB,IAAZA,EAAK,IAAwB,IAAZA,EAAK,GAEzC,OADAd,EAAc,2CACP,KAET,MAAM/xD,EAAM,IAAIkyD,aAAa,GAC7B,OAAQ9lC,EAAM4lC,iBACZ,KAAK,IAAeC,MAClB,OAAO,KACT,KAAK,IAAee,aAClB,MACF,KAAK,IAAeC,OAClBjzD,EAAI,GAAK3vE,EACT,MACF,KAAK,IAAe6iI,OAClBlzD,EAAI,GAAK3vE,EACT,MACF,KAAK,IAAe8iI,OAClBnzD,EAAI,GAAK3vE,EACT,MACF,KAAK,IAAe+iI,SAClBpzD,EAAI,GAAK3vE,EAAQwiI,EAAK,GACtB7yD,EAAI,GAAK3vE,EAAQwiI,EAAK,GACtB,MACF,KAAK,IAAeQ,SAClBrzD,EAAI,GAAK3vE,EAAQwiI,EAAK,GACtB7yD,EAAI,GAAK3vE,EAAQwiI,EAAK,GACtB,MACF,KAAK,IAAeS,SAClBtzD,EAAI,GAAK3vE,EAAQwiI,EAAK,GACtB7yD,EAAI,GAAK3vE,EAAQwiI,EAAK,GACtB,MACF,KAAK,IAAeU,SAClBvzD,EAAI,GAAK3vE,EAAQwiI,EAAK,GACtB7yD,EAAI,GAAK3vE,EAAQwiI,EAAK,GAAKA,EAAK,GAChC7yD,EAAI,GAAK3vE,GAASwiI,EAAK,GAAKA,EAAK,IACjC,MACF,QACEd,EAAc,2BAGlB,MAAMyB,EAAS,CAAC,EAAG,EAAG,GAEtB,OADArnC,EAAUvhF,aAAao1D,EAAKwzD,GACrBA,CAAM,EA8BfrnC,EAAUsnC,UAAY,IAAMtnC,EAAU59E,eAAe49E,EAAUunC,oBAC/DvnC,EAAU59E,eAAiBolH,GAAM,qBAA+BA,EAAIvnC,EAAMxhF,cAC1EuhF,EAAUunC,iBAAmB,IAAM,aAAuB,IAAItnC,EAAMmG,QAAS,IAG7EpG,EAAUynC,kBAAoB,KAC5B,qBAAqBxnC,EAAMxhF,aAAcwhF,EAAMx8F,QAC/Cw8F,EAAMxhF,aAAa,GAAKwhF,EAAMt8F,UAAU,GACxCs8F,EAAMxhF,aAAa,GAAKwhF,EAAMt8F,UAAU,GACxCs8F,EAAMxhF,aAAa,GAAKwhF,EAAMt8F,UAAU,GACxCs8F,EAAMxhF,aAAa,GAAKwhF,EAAMt8F,UAAU,GACxCs8F,EAAMxhF,aAAa,GAAKwhF,EAAMt8F,UAAU,GACxCs8F,EAAMxhF,aAAa,GAAKwhF,EAAMt8F,UAAU,GACxCs8F,EAAMxhF,aAAa,GAAKwhF,EAAMt8F,UAAU,GACxCs8F,EAAMxhF,aAAa,GAAKwhF,EAAMt8F,UAAU,GACxCs8F,EAAMxhF,aAAa,IAAMwhF,EAAMt8F,UAAU,GACzC,WAAWs8F,EAAMxhF,aAAcwhF,EAAMxhF,aAAcwhF,EAAMz8F,SACzD,YAAYy8F,EAAM9sE,aAAc8sE,EAAMxhF,aAAa,EAErDuhF,EAAUvhF,aAAe,SAAUipH,GACjC,IAAIC,EAAOxnC,UAAU7jG,OAAS,QAAsB5C,IAAjBymG,UAAU,GAAmBA,UAAU,GAAK,GAE/E,OADA,mBAAmBwnC,EAAMD,EAAKznC,EAAMxhF,cAC7BkpH,CACT,EACA3nC,EAAUjN,iBAAmBiN,EAAUvhF,aACvCuhF,EAAU7sE,aAAe,SAAUu0G,GACjC,IAAIC,EAAOxnC,UAAU7jG,OAAS,QAAsB5C,IAAjBymG,UAAU,GAAmBA,UAAU,GAAK,GAE/E,OADA,mBAAmBwnC,EAAMD,EAAKznC,EAAM9sE,cAC7Bw0G,CACT,EACA3nC,EAAUb,iBAAmBa,EAAU7sE,aACvC6sE,EAAU4nC,mBAAqB,SAAUC,GACvC,IAAIC,EAAO3nC,UAAU7jG,OAAS,QAAsB5C,IAAjBymG,UAAU,GAAmBA,UAAU,GAAK,GAC/E,OAAO,qBAA+B0nC,EAAK5nC,EAAMxhF,aAAcqpH,EACjE,EACA9nC,EAAU+nC,mBAAqB,SAAUF,GACvC,IAAIC,EAAO3nC,UAAU7jG,OAAS,QAAsB5C,IAAjBymG,UAAU,GAAmBA,UAAU,GAAK,GAC/E,OAAO,qBAA+B0nC,EAAK5nC,EAAM9sE,aAAc20G,EACjE,EAGA9nC,EAAUgoC,WAAWhoC,EAAUynC,mBAC/BznC,EAAUynC,oBACVznC,EAAUioC,UAAY,IAAM,eAAyBjoC,EAAUsnC,aAC/DtnC,EAAUkoC,iBAAmB,SAAUC,GACrC,IAAIC,EAAgBjoC,UAAU7jG,OAAS,QAAsB5C,IAAjBymG,UAAU,GAAmBA,UAAU,GAAK,KACxF,MAAMh+E,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/B69E,EAAU+nC,mBAAmBI,EAAahmH,GAC1C,MAAM+jC,EAAS,CAAC,EAAG,EAAG,GAChBE,EAAS,CAAC,EAAG,EAAG,GACtB,yBAAmCjkC,EAAQ+jC,EAAQE,IACnD,OAAYF,EAAQA,IACpB,OAAYE,EAAQA,GACpB,MAAM7iD,EAAay8F,EAAUxhF,iBAC7B,IAAA0Y,GAAYgvB,EAAQ,CAAC,EAAG,EAAG,GAAI,CAAC3iD,EAAW,GAAK,EAAGA,EAAW,GAAK,EAAGA,EAAW,GAAK,GAAI2iD,IAC1F,IAAAhvB,GAAYkvB,EAAQ,CAAC,EAAG,EAAG,GAAI,CAAC7iD,EAAW,GAAK,EAAGA,EAAW,GAAK,EAAGA,EAAW,GAAK,GAAI6iD,GAC1F,MAAMiiF,EAAU9kI,EAAW,GACrB+kI,EAAU/kI,EAAW,GAAKA,EAAW,GACrCglI,EAASvoC,EAAUh6D,eAAeC,aAAaC,UACrD,IAAIsiG,GAAU,IACVC,EAAUp2H,IACVq2H,EAAe,EACfC,EAAO,EACPC,EAAO,EACX,IAAK,IAAIr+H,EAAI27C,EAAO,GAAI37C,GAAK67C,EAAO,GAAI77C,IACtC,IAAK,IAAIrR,EAAIgtD,EAAO,GAAIhtD,GAAKktD,EAAO,GAAIltD,IAAK,CAC3C,IAAIgL,EAAQgiD,EAAO,GAAKhtD,EAAImvI,EAAU99H,EAAI+9H,EAC1C,IAAK,IAAItvI,EAAIktD,EAAO,GAAIltD,GAAKotD,EAAO,GAAIptD,IAAK,CAC3C,IAAKovI,GAAiBA,EAAc,CAACpvI,EAAGE,EAAGqR,GAAI4X,GAAS,CACtD,MAAM84B,EAAQstF,EAAOrkI,GACjB+2C,EAAQutF,IAASA,EAAUvtF,GAC3BA,EAAQwtF,IAASA,EAAUxtF,GAC/BytF,GAAgBztF,EAAQA,EACxB0tF,GAAQ1tF,EACR2tF,GAAQ,CACV,GACE1kI,CACJ,CACF,CAEF,MAAM2kI,EAAUD,EAAO,EAAID,EAAOC,EAAO,EACnCxpG,EAAWwpG,EAAOjwI,KAAK6e,IAAIkxH,EAAeE,EAAOC,EAAUA,GAAW,EAE5E,MAAO,CACLJ,UACAD,UACAK,UACAzpG,WACA0pG,MANYnwI,KAAK0mC,KAAKD,GAOtBz0B,MAAOi+H,EAEX,EAIA5oC,EAAU+oC,kBAAoB,SAAU3iC,GAEtC,MAAM4iC,EAAa,GACnB,IAAIC,EAFqB9oC,UAAU7jG,OAAS,QAAsB5C,IAAjBymG,UAAU,GAAmBA,UAAU,GAAK,EAM7F,IAAK,IAAIh2D,EAAM,EAAGA,EAAM,IAAKA,EAC3B6+F,EAAW7+F,GAAO8+F,EAClBA,GAAQ7iC,EAAa,EAANj8D,EAAU,GAAKi8D,EAAa,EAANj8D,GAAW,EAElD,OAAO6+F,CACT,EAMAhpC,EAAUkpC,mBAAqBC,IAC7B,IAAK/jI,EAAGuI,EAAGI,GAAKo7H,EAChB,MAAM/iC,EAASpG,EAAU39E,YACnB1hB,EAAqBq/F,EAAUh6D,eAAeC,aAAamjG,wBAC3DJ,EAAahpC,EAAU+oC,kBAAkB3iC,EAAQzlG,GAIvD,OAAOhI,KAAK+Q,OAAO/Q,KAAKmkB,MAAM1X,GAAKghG,EAAO,IAAM4iC,EAAW,IAAMrwI,KAAKmkB,MAAMnP,GAAKy4F,EAAO,IAAM4iC,EAAW,IAAMrwI,KAAKmkB,MAAM/O,GAAKq4F,EAAO,IAAM4iC,EAAW,GAAG,EAO5JhpC,EAAUqpC,wBAA0B/+H,IAClC,MAAM87F,EAASpG,EAAU39E,YACnBne,EAAQ87F,EAAU7sE,aAAa7oB,GAGrC,IAAK,IAAI6/B,EAAM,EAAGA,EAAM,IAAKA,EAC3B,GAAIjmC,EAAMimC,GAAOi8D,EAAa,EAANj8D,IAAYjmC,EAAMimC,GAAOi8D,EAAa,EAANj8D,EAAU,GAEhE,OADAy7F,EAAc,2BAA2B1hI,wCAA4CkiG,KAC9E0f,IAKX,OAAO9lB,EAAUkpC,mBAAmBhlI,EAAM,EAO5C87F,EAAUi1B,wBAA0B,SAAU3qH,GAC5C,IAAIoF,EAAOywF,UAAU7jG,OAAS,QAAsB5C,IAAjBymG,UAAU,GAAmBA,UAAU,GAAK,EAC/E,MAAMx/F,EAAqBq/F,EAAUh6D,eAAeC,aAAamjG,wBACjE,GAAI15H,EAAO,GAAKA,GAAQ/O,EAEtB,OADAilI,EAAc,sCAAsCl2H,8DAAiE/O,KAC9GmlH,IAET,MAAMwjB,EAActpC,EAAUqpC,wBAAwB/+H,GACtD,OAAI5C,OAAOwQ,MAAMoxH,GAERA,EAEFtpC,EAAUh6D,eAAeC,aAAasjG,aAAaD,EAAa55H,EACzE,CACF,CA0CEy4B,CAAa63D,EAAWC,EAC1B,CAQA,IAAIupC,EAAiB,CACnBvnC,YALkB,EAAA7B,EAAM6B,YAAYnlG,EAAQ,gBAM5CA,S,ksBCrWK,SAASvB,IACd,IAAIkuI,EAAM,IAAI,aAAoB,GAQlC,OANI,cAAuB9kI,eACzB8kI,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,CACT,CAQO,SAASlmH,EAAM3L,GACpB,IAAI6xH,EAAM,IAAI,aAAoB,GAIlC,OAHAA,EAAI,GAAK7xH,EAAE,GACX6xH,EAAI,GAAK7xH,EAAE,GACX6xH,EAAI,GAAK7xH,EAAE,GACJ6xH,CACT,CAQO,SAASntI,EAAOsb,GACrB,IAAI5e,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GACV,OAAOjf,KAAKmxG,MAAM9wG,EAAGE,EAAGqR,EAC1B,CAUO,SAASm/H,EAAW1wI,EAAGE,EAAGqR,GAC/B,IAAIk/H,EAAM,IAAI,aAAoB,GAIlC,OAHAA,EAAI,GAAKzwI,EACTywI,EAAI,GAAKvwI,EACTuwI,EAAI,GAAKl/H,EACFk/H,CACT,CASO,SAASE,EAAKF,EAAK7xH,GAIxB,OAHA6xH,EAAI,GAAK7xH,EAAE,GACX6xH,EAAI,GAAK7xH,EAAE,GACX6xH,EAAI,GAAK7xH,EAAE,GACJ6xH,CACT,CAWO,SAAS7tI,EAAI6tI,EAAKzwI,EAAGE,EAAGqR,GAI7B,OAHAk/H,EAAI,GAAKzwI,EACTywI,EAAI,GAAKvwI,EACTuwI,EAAI,GAAKl/H,EACFk/H,CACT,CAUO,SAASzqI,EAAIyqI,EAAK7xH,EAAGhF,GAI1B,OAHA62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAClB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAClB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GACX62H,CACT,CAUO,SAASG,EAASH,EAAK7xH,EAAGhF,GAI/B,OAHA62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAClB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAClB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GACX62H,CACT,CAUO,SAASI,EAASJ,EAAK7xH,EAAGhF,GAI/B,OAHA62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAClB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAClB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GACX62H,CACT,CAUO,SAASK,EAAOL,EAAK7xH,EAAGhF,GAI7B,OAHA62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAClB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAClB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GACX62H,CACT,CASO,SAAStoB,EAAKsoB,EAAK7xH,GAIxB,OAHA6xH,EAAI,GAAK9wI,KAAKwoH,KAAKvpG,EAAE,IACrB6xH,EAAI,GAAK9wI,KAAKwoH,KAAKvpG,EAAE,IACrB6xH,EAAI,GAAK9wI,KAAKwoH,KAAKvpG,EAAE,IACd6xH,CACT,CASO,SAAS//H,EAAM+/H,EAAK7xH,GAIzB,OAHA6xH,EAAI,GAAK9wI,KAAK+Q,MAAMkO,EAAE,IACtB6xH,EAAI,GAAK9wI,KAAK+Q,MAAMkO,EAAE,IACtB6xH,EAAI,GAAK9wI,KAAK+Q,MAAMkO,EAAE,IACf6xH,CACT,CAUO,SAASjwI,EAAIiwI,EAAK7xH,EAAGhF,GAI1B,OAHA62H,EAAI,GAAK9wI,KAAKa,IAAIoe,EAAE,GAAIhF,EAAE,IAC1B62H,EAAI,GAAK9wI,KAAKa,IAAIoe,EAAE,GAAIhF,EAAE,IAC1B62H,EAAI,GAAK9wI,KAAKa,IAAIoe,EAAE,GAAIhF,EAAE,IACnB62H,CACT,CAUO,SAAS5+H,EAAI4+H,EAAK7xH,EAAGhF,GAI1B,OAHA62H,EAAI,GAAK9wI,KAAKkS,IAAI+M,EAAE,GAAIhF,EAAE,IAC1B62H,EAAI,GAAK9wI,KAAKkS,IAAI+M,EAAE,GAAIhF,EAAE,IAC1B62H,EAAI,GAAK9wI,KAAKkS,IAAI+M,EAAE,GAAIhF,EAAE,IACnB62H,CACT,CASO,SAAS3sH,EAAM2sH,EAAK7xH,GAIzB,OAHA6xH,EAAI,GAAK9wI,KAAKmkB,MAAMlF,EAAE,IACtB6xH,EAAI,GAAK9wI,KAAKmkB,MAAMlF,EAAE,IACtB6xH,EAAI,GAAK9wI,KAAKmkB,MAAMlF,EAAE,IACf6xH,CACT,CAUO,SAASvxI,EAAMuxI,EAAK7xH,EAAGhF,GAI5B,OAHA62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAChB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EAChB62H,EAAI,GAAK7xH,EAAE,GAAKhF,EACT62H,CACT,CAWO,SAASM,EAAYN,EAAK7xH,EAAGhF,EAAG1a,GAIrC,OAHAuxI,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAAK1a,EACvBuxI,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAAK1a,EACvBuxI,EAAI,GAAK7xH,EAAE,GAAKhF,EAAE,GAAK1a,EAChBuxI,CACT,CASO,SAAS/xH,EAASE,EAAGhF,GAC1B,IAAI5Z,EAAI4Z,EAAE,GAAKgF,EAAE,GACb1e,EAAI0Z,EAAE,GAAKgF,EAAE,GACbrN,EAAIqI,EAAE,GAAKgF,EAAE,GACjB,OAAOjf,KAAKmxG,MAAM9wG,EAAGE,EAAGqR,EAC1B,CASO,SAASy/H,EAAgBpyH,EAAGhF,GACjC,IAAI5Z,EAAI4Z,EAAE,GAAKgF,EAAE,GACb1e,EAAI0Z,EAAE,GAAKgF,EAAE,GACbrN,EAAIqI,EAAE,GAAKgF,EAAE,GACjB,OAAO5e,EAAIA,EAAIE,EAAIA,EAAIqR,EAAIA,CAC7B,CAQO,SAAS0/H,EAAcryH,GAC5B,IAAI5e,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GACV,OAAO5e,EAAIA,EAAIE,EAAIA,EAAIqR,EAAIA,CAC7B,CASO,SAAS2/H,EAAOT,EAAK7xH,GAI1B,OAHA6xH,EAAI,IAAM7xH,EAAE,GACZ6xH,EAAI,IAAM7xH,EAAE,GACZ6xH,EAAI,IAAM7xH,EAAE,GACL6xH,CACT,CASO,SAASU,EAAQV,EAAK7xH,GAI3B,OAHA6xH,EAAI,GAAK,EAAM7xH,EAAE,GACjB6xH,EAAI,GAAK,EAAM7xH,EAAE,GACjB6xH,EAAI,GAAK,EAAM7xH,EAAE,GACV6xH,CACT,CASO,SAASW,EAAUX,EAAK7xH,GAC7B,IAAI5e,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GACN42B,EAAMx1C,EAAIA,EAAIE,EAAIA,EAAIqR,EAAIA,EAU9B,OARIikC,EAAM,IAERA,EAAM,EAAI71C,KAAK0mC,KAAKmP,IAGtBi7F,EAAI,GAAK7xH,EAAE,GAAK42B,EAChBi7F,EAAI,GAAK7xH,EAAE,GAAK42B,EAChBi7F,EAAI,GAAK7xH,EAAE,GAAK42B,EACTi7F,CACT,CASO,SAASxwF,EAAIrhC,EAAGhF,GACrB,OAAOgF,EAAE,GAAKhF,EAAE,GAAKgF,EAAE,GAAKhF,EAAE,GAAKgF,EAAE,GAAKhF,EAAE,EAC9C,CAUO,SAASguC,EAAM6oF,EAAK7xH,EAAGhF,GAC5B,IAAIs8D,EAAKt3D,EAAE,GACPu3D,EAAKv3D,EAAE,GACPw3D,EAAKx3D,EAAE,GACPyyH,EAAKz3H,EAAE,GACP03H,EAAK13H,EAAE,GACP23H,EAAK33H,EAAE,GAIX,OAHA62H,EAAI,GAAKt6D,EAAKo7D,EAAKn7D,EAAKk7D,EACxBb,EAAI,GAAKr6D,EAAKi7D,EAAKn7D,EAAKq7D,EACxBd,EAAI,GAAKv6D,EAAKo7D,EAAKn7D,EAAKk7D,EACjBZ,CACT,CAWO,SAASe,EAAKf,EAAK7xH,EAAGhF,EAAGqxB,GAC9B,IAAIirC,EAAKt3D,EAAE,GACPu3D,EAAKv3D,EAAE,GACPw3D,EAAKx3D,EAAE,GAIX,OAHA6xH,EAAI,GAAKv6D,EAAKjrC,GAAKrxB,EAAE,GAAKs8D,GAC1Bu6D,EAAI,GAAKt6D,EAAKlrC,GAAKrxB,EAAE,GAAKu8D,GAC1Bs6D,EAAI,GAAKr6D,EAAKnrC,GAAKrxB,EAAE,GAAKw8D,GACnBq6D,CACT,CAaO,SAASgB,EAAQhB,EAAK7xH,EAAGhF,EAAGskB,EAAGwzG,EAAGzmG,GACvC,IAAI0mG,EAAe1mG,EAAIA,EACnB2mG,EAAUD,GAAgB,EAAI1mG,EAAI,GAAK,EACvC4mG,EAAUF,GAAgB1mG,EAAI,GAAKA,EACnC6mG,EAAUH,GAAgB1mG,EAAI,GAC9B8mG,EAAUJ,GAAgB,EAAI,EAAI1mG,GAItC,OAHAwlG,EAAI,GAAK7xH,EAAE,GAAKgzH,EAAUh4H,EAAE,GAAKi4H,EAAU3zG,EAAE,GAAK4zG,EAAUJ,EAAE,GAAKK,EACnEtB,EAAI,GAAK7xH,EAAE,GAAKgzH,EAAUh4H,EAAE,GAAKi4H,EAAU3zG,EAAE,GAAK4zG,EAAUJ,EAAE,GAAKK,EACnEtB,EAAI,GAAK7xH,EAAE,GAAKgzH,EAAUh4H,EAAE,GAAKi4H,EAAU3zG,EAAE,GAAK4zG,EAAUJ,EAAE,GAAKK,EAC5DtB,CACT,CAaO,SAASuB,EAAOvB,EAAK7xH,EAAGhF,EAAGskB,EAAGwzG,EAAGzmG,GACtC,IAAIgnG,EAAgB,EAAIhnG,EACpBinG,EAAwBD,EAAgBA,EACxCN,EAAe1mG,EAAIA,EACnB2mG,EAAUM,EAAwBD,EAClCJ,EAAU,EAAI5mG,EAAIinG,EAClBJ,EAAU,EAAIH,EAAeM,EAC7BF,EAAUJ,EAAe1mG,EAI7B,OAHAwlG,EAAI,GAAK7xH,EAAE,GAAKgzH,EAAUh4H,EAAE,GAAKi4H,EAAU3zG,EAAE,GAAK4zG,EAAUJ,EAAE,GAAKK,EACnEtB,EAAI,GAAK7xH,EAAE,GAAKgzH,EAAUh4H,EAAE,GAAKi4H,EAAU3zG,EAAE,GAAK4zG,EAAUJ,EAAE,GAAKK,EACnEtB,EAAI,GAAK7xH,EAAE,GAAKgzH,EAAUh4H,EAAE,GAAKi4H,EAAU3zG,EAAE,GAAK4zG,EAAUJ,EAAE,GAAKK,EAC5DtB,CACT,CASO,SAASzyG,EAAOyyG,EAAKvxI,GAC1BA,EAAQA,GAAS,EACjB,IAAIwa,EAAwB,EAApB,WAA0B/Z,KAAKC,GACnC2R,EAAwB,EAApB,WAA0B,EAC9B4gI,EAASxyI,KAAK0mC,KAAK,EAAM90B,EAAIA,GAAKrS,EAItC,OAHAuxI,EAAI,GAAK9wI,KAAKggF,IAAIjmE,GAAKy4H,EACvB1B,EAAI,GAAK9wI,KAAKigF,IAAIlmE,GAAKy4H,EACvB1B,EAAI,GAAKl/H,EAAIrS,EACNuxI,CACT,CAWO,SAAS2B,EAAc3B,EAAK7xH,EAAGwoF,GACpC,IAAIpnG,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GACNiyF,EAAIzJ,EAAE,GAAKpnG,EAAIonG,EAAE,GAAKlnG,EAAIknG,EAAE,IAAM71F,EAAI61F,EAAE,IAK5C,OAJAyJ,EAAIA,GAAK,EACT4/B,EAAI,IAAMrpC,EAAE,GAAKpnG,EAAIonG,EAAE,GAAKlnG,EAAIknG,EAAE,GAAK71F,EAAI61F,EAAE,KAAOyJ,EACpD4/B,EAAI,IAAMrpC,EAAE,GAAKpnG,EAAIonG,EAAE,GAAKlnG,EAAIknG,EAAE,GAAK71F,EAAI61F,EAAE,KAAOyJ,EACpD4/B,EAAI,IAAMrpC,EAAE,GAAKpnG,EAAIonG,EAAE,GAAKlnG,EAAIknG,EAAE,IAAM71F,EAAI61F,EAAE,KAAOyJ,EAC9C4/B,CACT,CAUO,SAAS4B,EAAc5B,EAAK7xH,EAAGwoF,GACpC,IAAIpnG,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GAIV,OAHA6xH,EAAI,GAAKzwI,EAAIonG,EAAE,GAAKlnG,EAAIknG,EAAE,GAAK71F,EAAI61F,EAAE,GACrCqpC,EAAI,GAAKzwI,EAAIonG,EAAE,GAAKlnG,EAAIknG,EAAE,GAAK71F,EAAI61F,EAAE,GACrCqpC,EAAI,GAAKzwI,EAAIonG,EAAE,GAAKlnG,EAAIknG,EAAE,GAAK71F,EAAI61F,EAAE,GAC9BqpC,CACT,CAWO,SAAS6B,EAAc7B,EAAK7xH,EAAG2zH,GAEpC,IAAIC,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,EAAKJ,EAAE,GACPvyI,EAAI4e,EAAE,GACN1e,EAAI0e,EAAE,GACNrN,EAAIqN,EAAE,GAGNg0H,EAAMH,EAAKlhI,EAAImhI,EAAKxyI,EACpB2yI,EAAMH,EAAK1yI,EAAIwyI,EAAKjhI,EACpBuhI,EAAMN,EAAKtyI,EAAIuyI,EAAKzyI,EAEpB+yI,EAAON,EAAKK,EAAMJ,EAAKG,EACvBG,EAAON,EAAKE,EAAMJ,EAAKM,EACvBG,EAAOT,EAAKK,EAAMJ,EAAKG,EAEvBM,EAAU,EAALP,EAYT,OAXAC,GAAOM,EACPL,GAAOK,EACPJ,GAAOI,EAEPH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAERxC,EAAI,GAAKzwI,EAAI4yI,EAAMG,EACnBtC,EAAI,GAAKvwI,EAAI2yI,EAAMG,EACnBvC,EAAI,GAAKl/H,EAAIuhI,EAAMG,EACZxC,CACT,CAUO,SAAS0C,EAAQ1C,EAAK7xH,EAAGhF,EAAGw5H,GACjC,IAAIhiI,EAAI,GACJsI,EAAI,GAaR,OAXAtI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAEhBF,EAAE,GAAKtI,EAAE,GACTsI,EAAE,GAAKtI,EAAE,GAAKzR,KAAKggF,IAAIyzD,GAAOhiI,EAAE,GAAKzR,KAAKigF,IAAIwzD,GAC9C15H,EAAE,GAAKtI,EAAE,GAAKzR,KAAKigF,IAAIwzD,GAAOhiI,EAAE,GAAKzR,KAAKggF,IAAIyzD,GAE9C3C,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GAClB62H,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GAClB62H,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GACX62H,CACT,CAUO,SAAS4C,EAAQ5C,EAAK7xH,EAAGhF,EAAGw5H,GACjC,IAAIhiI,EAAI,GACJsI,EAAI,GAaR,OAXAtI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAEhBF,EAAE,GAAKtI,EAAE,GAAKzR,KAAKigF,IAAIwzD,GAAOhiI,EAAE,GAAKzR,KAAKggF,IAAIyzD,GAC9C15H,EAAE,GAAKtI,EAAE,GACTsI,EAAE,GAAKtI,EAAE,GAAKzR,KAAKggF,IAAIyzD,GAAOhiI,EAAE,GAAKzR,KAAKigF,IAAIwzD,GAE9C3C,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GAClB62H,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GAClB62H,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GACX62H,CACT,CAUO,SAAS1uC,EAAQ0uC,EAAK7xH,EAAGhF,EAAGw5H,GACjC,IAAIhiI,EAAI,GACJsI,EAAI,GAaR,OAXAtI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAChBxI,EAAE,GAAKwN,EAAE,GAAKhF,EAAE,GAEhBF,EAAE,GAAKtI,EAAE,GAAKzR,KAAKggF,IAAIyzD,GAAOhiI,EAAE,GAAKzR,KAAKigF,IAAIwzD,GAC9C15H,EAAE,GAAKtI,EAAE,GAAKzR,KAAKigF,IAAIwzD,GAAOhiI,EAAE,GAAKzR,KAAKggF,IAAIyzD,GAC9C15H,EAAE,GAAKtI,EAAE,GAETq/H,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GAClB62H,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GAClB62H,EAAI,GAAK/2H,EAAE,GAAKE,EAAE,GACX62H,CACT,CAQO,SAASjxI,EAAMof,EAAGhF,GACvB,IAAIs8D,EAAKt3D,EAAE,GACPu3D,EAAKv3D,EAAE,GACPw3D,EAAKx3D,EAAE,GACPyyH,EAAKz3H,EAAE,GACP03H,EAAK13H,EAAE,GACP23H,EAAK33H,EAAE,GAGP05H,EAFO3zI,KAAK0mC,KAAK6vC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACnCz2E,KAAK0mC,KAAKgrG,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAE1CgC,EAASD,GAAOrzF,EAAIrhC,EAAGhF,GAAK05H,EAChC,OAAO3zI,KAAKwgD,KAAKxgD,KAAKa,IAAIb,KAAKkS,IAAI0hI,GAAS,GAAI,GAClD,CAQO,SAASC,EAAK/C,GAInB,OAHAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,CACT,CAQO,SAAS7uH,EAAIhD,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,GACtD,CASO,SAAS60H,EAAY70H,EAAGhF,GAC7B,OAAOgF,EAAE,KAAOhF,EAAE,IAAMgF,EAAE,KAAOhF,EAAE,IAAMgF,EAAE,KAAOhF,EAAE,EACtD,CASO,SAAS4/G,EAAO56G,EAAGhF,GACxB,IAAI85H,EAAK90H,EAAE,GACPyqD,EAAKzqD,EAAE,GACP4qD,EAAK5qD,EAAE,GACP+0H,EAAK/5H,EAAE,GACP0vD,EAAK1vD,EAAE,GACP6vD,EAAK7vD,EAAE,GACX,OAAOja,KAAK6e,IAAIk1H,EAAKC,IAAO,UAAmBh0I,KAAKkS,IAAI,EAAKlS,KAAK6e,IAAIk1H,GAAK/zI,KAAK6e,IAAIm1H,KAAQh0I,KAAK6e,IAAI6qD,EAAKC,IAAO,UAAmB3pE,KAAKkS,IAAI,EAAKlS,KAAK6e,IAAI6qD,GAAK1pE,KAAK6e,IAAI8qD,KAAQ3pE,KAAK6e,IAAIgrD,EAAKC,IAAO,UAAmB9pE,KAAKkS,IAAI,EAAKlS,KAAK6e,IAAIgrD,GAAK7pE,KAAK6e,IAAIirD,GAChQ,CAMO,IAmDDkvD,EAnDK7iG,EAAM86G,EAMNgD,EAAM/C,EAMNgD,EAAM/C,EAMNxrE,EAAO5mD,EAMPo1H,EAAU9C,EAMVx7F,EAAMlyC,EAMNywI,EAAS9C,EAcTttI,GACLg1H,EAAMp2H,IACH,SAAUqc,EAAGo1H,EAAQhkI,EAAQ2B,EAAOw+F,EAAI8jC,GAC7C,IAAI7nI,EAAG8nI,EAgBP,IAdKF,IACHA,EAAS,GAGNhkI,IACHA,EAAS,GAITkkI,EADEviI,EACEhS,KAAKa,IAAImR,EAAQqiI,EAAShkI,EAAQ4O,EAAEtb,QAEpCsb,EAAEtb,OAGH8I,EAAI4D,EAAQ5D,EAAI8nI,EAAG9nI,GAAK4nI,EAC3Brb,EAAI,GAAK/5G,EAAExS,GACXusH,EAAI,GAAK/5G,EAAExS,EAAI,GACfusH,EAAI,GAAK/5G,EAAExS,EAAI,GACf+jG,EAAGwoB,EAAKA,EAAKsb,GACbr1H,EAAExS,GAAKusH,EAAI,GACX/5G,EAAExS,EAAI,GAAKusH,EAAI,GACf/5G,EAAExS,EAAI,GAAKusH,EAAI,GAGjB,OAAO/5G,CACT,E,+DC/wBa,SAASu1H,IACtB,OAAO,OAAUhtC,UACnB,C,+BCJe,WAASitC,EAAchmH,GAEpC,IADA,IAAIimH,EAAU,IAAIjzI,MAAMgtB,GACfhiB,EAAI,EAAGA,EAAIgiB,IAAKhiB,EAAGioI,EAAQjoI,GAAKgoI,EAAahoI,GAAKgiB,EAAI,IAC/D,OAAOimH,CACT,C","sources":["webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/drawImageSync.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/calculateTransform.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/GenerateImageType.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/Settings.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/imageLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/FrameRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/PointsManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/ProgressiveIterator.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/RLEVoxelMap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/actorCheck.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/applyPreset.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/autoLoad.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/buildMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateSpacingBetweenImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clamp.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/colormap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createLinearRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/decimate.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepClone.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/fnv1aHash.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestImageId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageDataMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageSliceDataForVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSliceRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSpacingInNormalDirection.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getTargetVolumeAndSpacingInNormalDir.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVoiFromSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeActorCorners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeSliceRangeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportScrollInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasFloatScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasNaNValues.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageIdToURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageRetrieveMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/TargetEventListeners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/MultiTargetEventListenerManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getMinMax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRuntimeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calibratedPixelSpacingMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isOpposite.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/indexWithinDimensions.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportsContainingSameVolumes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isPTPrescaledWithSUV.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasGPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasCPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/loadImageToCanvas.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/historyMemo/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/worldToImageCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageToWorldCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithImageURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestStackImageIndexForPoint.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getCurrentVolumeViewportSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/spatialRegistrationMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateViewportsSpatialRegistration.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageCornersInWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageLegacy.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isValidVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isVideoTransferSyntax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertStackToVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertVolumeToStackViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/roundNumber.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertToGrayscale.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRandomSampleFromArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/color.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/splitImageIdsBy4DTags.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getDynamicVolumeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clip.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scroll.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/jumpToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSubVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeDirectionVectors.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateNeighborhoodStats.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getPixelSpacingInformation.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportModality.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/invertRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/logger.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/makeVolumeMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/planar.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/pointInShapeCallback.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/snapFocalPointToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/sortImageIdsAndGetSpacing.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transferFunctionUtils.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformCanvasToIJK.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformIndexToWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformWorldToIndex.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updateVTKImageDataWithCornerstoneImage.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/windowLevel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@kitware/vtk.js/Filters/General/ContourLoopExtraction.js","webpack:///../../../node_modules/@cornerstonejs/polymorphic-segmentation/dist/esm/workers/polySegConverters.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/contourSegmentation/contourSegmentationCompleted.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddRepresentationData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapBaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/addContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/isAxisAlignedRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js","webpack:///../../../node_modules/gl-matrix/esm/vec3.js","webpack:///../../../node_modules/d3-array/src/zip.js","webpack:///../../../node_modules/d3-interpolate/src/quantize.js"],"sourcesContent":["import now from './rendering/now';\nimport { renderColorImage } from './rendering/renderColorImage';\nimport { renderGrayscaleImage } from './rendering/renderGrayscaleImage';\nimport { renderPseudoColorImage } from './rendering/renderPseudoColorImage';\nexport default function (enabledElement, invalidated) {\n    const image = enabledElement.image;\n    if (!enabledElement.canvas || !enabledElement.image) {\n        return;\n    }\n    const start = now();\n    image.stats = {\n        lastGetPixelDataTime: -1.0,\n        lastStoredPixelDataToCanvasImageDataTime: -1.0,\n        lastPutImageDataTime: -1.0,\n        lastRenderTime: -1.0,\n        lastLutGenerateTime: -1.0,\n    };\n    if (image) {\n        let render = image.render;\n        if (!render) {\n            if (enabledElement.viewport.colormap) {\n                render = renderPseudoColorImage;\n            }\n            else if (image.color) {\n                render = renderColorImage;\n            }\n            else {\n                render = renderGrayscaleImage;\n            }\n        }\n        render(enabledElement, invalidated);\n    }\n    const renderTimeInMs = now() - start;\n    image.stats.lastRenderTime = renderTimeInMs;\n    enabledElement.invalid = false;\n    enabledElement.needsRedraw = false;\n}\n","import { Transform } from './transform';\nexport default function (enabledElement, scale) {\n    const transform = new Transform();\n    if (!enabledElement.viewport.displayedArea) {\n        return transform;\n    }\n    transform.translate(enabledElement.canvas.width / 2, enabledElement.canvas.height / 2);\n    const angle = enabledElement.viewport.rotation;\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    let widthScale = enabledElement.viewport.scale;\n    let heightScale = enabledElement.viewport.scale;\n    const width = enabledElement.viewport.displayedArea.brhc.x -\n        (enabledElement.viewport.displayedArea.tlhc.x - 1);\n    const height = enabledElement.viewport.displayedArea.brhc.y -\n        (enabledElement.viewport.displayedArea.tlhc.y - 1);\n    if (enabledElement.viewport.displayedArea.presentationSizeMode === 'NONE') {\n        if (enabledElement.image.rowPixelSpacing <\n            enabledElement.image.columnPixelSpacing) {\n            widthScale *=\n                enabledElement.image.columnPixelSpacing /\n                    enabledElement.image.rowPixelSpacing;\n        }\n        else if (enabledElement.image.columnPixelSpacing <\n            enabledElement.image.rowPixelSpacing) {\n            heightScale *=\n                enabledElement.image.rowPixelSpacing /\n                    enabledElement.image.columnPixelSpacing;\n        }\n    }\n    else {\n        widthScale = enabledElement.viewport.displayedArea.columnPixelSpacing;\n        heightScale = enabledElement.viewport.displayedArea.rowPixelSpacing;\n        if (enabledElement.viewport.displayedArea.presentationSizeMode ===\n            'SCALE TO FIT') {\n            const verticalScale = enabledElement.canvas.height / (height * heightScale);\n            const horizontalScale = enabledElement.canvas.width / (width * widthScale);\n            widthScale = heightScale = Math.min(horizontalScale, verticalScale);\n            if (enabledElement.viewport.displayedArea.rowPixelSpacing <\n                enabledElement.viewport.displayedArea.columnPixelSpacing) {\n                widthScale *=\n                    enabledElement.viewport.displayedArea.columnPixelSpacing /\n                        enabledElement.viewport.displayedArea.rowPixelSpacing;\n            }\n            else if (enabledElement.viewport.displayedArea.columnPixelSpacing <\n                enabledElement.viewport.displayedArea.rowPixelSpacing) {\n                heightScale *=\n                    enabledElement.viewport.displayedArea.rowPixelSpacing /\n                        enabledElement.viewport.displayedArea.columnPixelSpacing;\n            }\n        }\n    }\n    transform.scale(widthScale, heightScale);\n    if (angle !== 0) {\n        transform.rotate((-angle * Math.PI) / 180);\n    }\n    transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    if (scale !== undefined) {\n        transform.scale(scale, scale);\n    }\n    if (enabledElement.viewport.hflip) {\n        transform.scale(-1, 1);\n    }\n    if (enabledElement.viewport.vflip) {\n        transform.scale(1, -1);\n    }\n    transform.translate(-width / 2, -height / 2);\n    return transform;\n}\n","import createViewport from './createViewport';\nimport getImageFitScale from './getImageFitScale';\nexport default function (canvas, image, modality, colormap) {\n    if (canvas === undefined) {\n        throw new Error('getDefaultViewport: parameter canvas must not be undefined');\n    }\n    if (image === undefined) {\n        return createViewport();\n    }\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    let voi;\n    if (modality === 'PT' && image.isPreScaled) {\n        voi = {\n            windowWidth: 5,\n            windowCenter: 2.5,\n        };\n    }\n    else if (image.windowWidth !== undefined &&\n        image.windowCenter !== undefined) {\n        voi = {\n            windowWidth: Array.isArray(image.windowWidth)\n                ? image.windowWidth[0]\n                : image.windowWidth,\n            windowCenter: Array.isArray(image.windowCenter)\n                ? image.windowCenter[0]\n                : image.windowCenter,\n        };\n    }\n    return {\n        scale,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi,\n        invert: image.invert,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: image.modalityLUT,\n        modality,\n        voiLUT: image.voiLUT,\n        colormap: colormap !== undefined ? colormap : image.colormap,\n        displayedArea: {\n            tlhc: {\n                x: 1,\n                y: 1,\n            },\n            brhc: {\n                x: image.columns,\n                y: image.rows,\n            },\n            rowPixelSpacing: image.rowPixelSpacing === undefined ? 1 : image.rowPixelSpacing,\n            columnPixelSpacing: image.columnPixelSpacing === undefined ? 1 : image.columnPixelSpacing,\n            presentationSizeMode: 'NONE',\n        },\n    };\n}\n","export var GenerateImageType;\n(function (GenerateImageType) {\n    GenerateImageType[\"SUM\"] = \"SUM\";\n    GenerateImageType[\"SUBTRACT\"] = \"SUBTRACT\";\n    GenerateImageType[\"AVERAGE\"] = \"AVERAGE\";\n})(GenerateImageType || (GenerateImageType = {}));\n","const DEFAULT_SETTINGS = Symbol('DefaultSettings');\nconst RUNTIME_SETTINGS = Symbol('RuntimeSettings');\nconst OBJECT_SETTINGS_MAP = Symbol('ObjectSettingsMap');\nconst DICTIONARY = Symbol('Dictionary');\nexport default class Settings {\n    constructor(base) {\n        const dictionary = Object.create((base instanceof Settings && DICTIONARY in base\n            ? base[DICTIONARY]\n            : null));\n        Object.seal(Object.defineProperty(this, DICTIONARY, {\n            value: dictionary,\n        }));\n    }\n    set(key, value) {\n        return set(this[DICTIONARY], key, value, null);\n    }\n    get(key) {\n        return get(this[DICTIONARY], key);\n    }\n    unset(key) {\n        return unset(this[DICTIONARY], key + '');\n    }\n    forEach(callback) {\n        iterate(this[DICTIONARY], callback);\n    }\n    extend() {\n        return new Settings(this);\n    }\n    import(root) {\n        if (isPlainObject(root)) {\n            Object.keys(root).forEach((key) => {\n                set(this[DICTIONARY], key, root[key], null);\n            });\n        }\n    }\n    dump() {\n        const context = {};\n        iterate(this[DICTIONARY], (key, value) => {\n            if (typeof value !== 'undefined') {\n                deepSet(context, key, value);\n            }\n        });\n        return context;\n    }\n    static assert(subject) {\n        return subject instanceof Settings\n            ? subject\n            : Settings.getRuntimeSettings();\n    }\n    static getDefaultSettings(subfield = null) {\n        let defaultSettings = Settings[DEFAULT_SETTINGS];\n        if (!(defaultSettings instanceof Settings)) {\n            defaultSettings = new Settings();\n            Settings[DEFAULT_SETTINGS] = defaultSettings;\n        }\n        if (subfield) {\n            const settingObj = {};\n            defaultSettings.forEach((name) => {\n                if (name.startsWith(subfield)) {\n                    const setting = name.split(`${subfield}.`)[1];\n                    settingObj[setting] = defaultSettings.get(name);\n                }\n            });\n            return settingObj;\n        }\n        return defaultSettings;\n    }\n    static getRuntimeSettings() {\n        let runtimeSettings = Settings[RUNTIME_SETTINGS];\n        if (!(runtimeSettings instanceof Settings)) {\n            runtimeSettings = new Settings(Settings.getDefaultSettings());\n            Settings[RUNTIME_SETTINGS] = runtimeSettings;\n        }\n        return runtimeSettings;\n    }\n    static getObjectSettings(subject, from) {\n        let settings = null;\n        if (subject instanceof Settings) {\n            settings = subject;\n        }\n        else if (typeof subject === 'object' && subject !== null) {\n            let objectSettingsMap = Settings[OBJECT_SETTINGS_MAP];\n            if (!(objectSettingsMap instanceof WeakMap)) {\n                objectSettingsMap = new WeakMap();\n                Settings[OBJECT_SETTINGS_MAP] = objectSettingsMap;\n            }\n            settings = objectSettingsMap.get(subject);\n            if (!(settings instanceof Settings)) {\n                settings = new Settings(Settings.assert(Settings.getObjectSettings(from)));\n                objectSettingsMap.set(subject, settings);\n            }\n        }\n        return settings;\n    }\n    static extendRuntimeSettings() {\n        return Settings.getRuntimeSettings().extend();\n    }\n}\nfunction unset(dictionary, name) {\n    if (name.endsWith('.')) {\n        let deleteCount = 0;\n        const namespace = name;\n        const base = namespace.slice(0, -1);\n        const deleteAll = base.length === 0;\n        for (const key in dictionary) {\n            if (Object.prototype.hasOwnProperty.call(dictionary, key) &&\n                (deleteAll || key.startsWith(namespace) || key === base)) {\n                delete dictionary[key];\n                ++deleteCount;\n            }\n        }\n        return deleteCount > 0;\n    }\n    return delete dictionary[name];\n}\nfunction iterate(dictionary, callback) {\n    for (const key in dictionary) {\n        callback(key, dictionary[key]);\n    }\n}\nfunction setAll(dictionary, prefix, record, references) {\n    let failCount;\n    if (references.has(record)) {\n        return set(dictionary, prefix, null, references);\n    }\n    references.add(record);\n    failCount = 0;\n    for (const field in record) {\n        if (Object.prototype.hasOwnProperty.call(record, field)) {\n            const key = field.length === 0 ? prefix : `${prefix}.${field}`;\n            if (!set(dictionary, key, record[field], references)) {\n                ++failCount;\n            }\n        }\n    }\n    references.delete(record);\n    return failCount === 0;\n}\nfunction set(dictionary, key, value, references) {\n    if (isValidKey(key)) {\n        if (isPlainObject(value)) {\n            return setAll(dictionary, key, value, references instanceof WeakSet ? references : new WeakSet());\n        }\n        dictionary[key] = value;\n        return true;\n    }\n    return false;\n}\nfunction get(dictionary, key) {\n    return dictionary[key];\n}\nfunction isValidKey(key) {\n    let last, current, previous;\n    if (typeof key !== 'string' || (last = key.length - 1) < 0) {\n        return false;\n    }\n    previous = -1;\n    while ((current = key.indexOf('.', previous + 1)) >= 0) {\n        if (current - previous < 2 || current === last) {\n            return false;\n        }\n        previous = current;\n    }\n    return true;\n}\nfunction isPlainObject(subject) {\n    if (typeof subject === 'object' && subject !== null) {\n        const prototype = Object.getPrototypeOf(subject);\n        if (prototype === Object.prototype || prototype === null) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction deepSet(context, key, value) {\n    const separator = key.indexOf('.');\n    if (separator >= 0) {\n        const subKey = key.slice(0, separator);\n        let subContext = context[subKey];\n        if (typeof subContext !== 'object' || subContext === null) {\n            const subContextValue = subContext;\n            subContext = {};\n            if (typeof subContextValue !== 'undefined') {\n                subContext[''] = subContextValue;\n            }\n            context[subKey] = subContext;\n        }\n        deepSet(subContext, key.slice(separator + 1, key.length), value);\n    }\n    else {\n        context[key] = value;\n    }\n}\nSettings.getDefaultSettings().set('useCursors', true);\n","import cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport genericMetadataProvider from '../utilities/genericMetadataProvider';\nimport { getBufferConfiguration } from '../utilities/getBufferConfiguration';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport * as metaData from '../metaData';\nimport VoxelManagerEnum from '../enums/VoxelManagerEnum';\nconst imageLoaders = {};\nlet unknownImageLoader;\nfunction loadImageFromImageLoader(imageId, options) {\n    const cachedImageLoadObject = cache.getImageLoadObject(imageId);\n    if (cachedImageLoadObject) {\n        handleImageLoadPromise(cachedImageLoadObject.promise, imageId);\n        return cachedImageLoadObject;\n    }\n    const scheme = imageId.split(':')[0];\n    const loader = imageLoaders[scheme] || unknownImageLoader;\n    if (!loader) {\n        throw new Error(`loadImageFromImageLoader: No image loader found for scheme '${scheme}'`);\n    }\n    const imageLoadObject = loader(imageId, options);\n    handleImageLoadPromise(imageLoadObject.promise, imageId);\n    return imageLoadObject;\n}\nfunction handleImageLoadPromise(imagePromise, imageId) {\n    Promise.resolve(imagePromise)\n        .then((image) => {\n        ensureVoxelManager(image);\n        triggerEvent(eventTarget, Events.IMAGE_LOADED, { image });\n    })\n        .catch((error) => {\n        const errorDetails = {\n            imageId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_FAILED, errorDetails);\n    });\n}\nfunction ensureVoxelManager(image) {\n    if (!image.voxelManager) {\n        const { width, height, numberOfComponents } = image;\n        const voxelManager = VoxelManager.createImageVoxelManager({\n            scalarData: image.getPixelData(),\n            width,\n            height,\n            numberOfComponents,\n        });\n        image.voxelManager = voxelManager;\n        image.getPixelData = () => voxelManager.getScalarData();\n        delete image.imageFrame.pixelData;\n    }\n}\nexport function loadImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadImage: parameter imageId must not be undefined');\n    }\n    return loadImageFromImageLoader(imageId, options).promise;\n}\nexport function loadAndCacheImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadAndCacheImage: parameter imageId must not be undefined');\n    }\n    const imageLoadObject = loadImageFromImageLoader(imageId, options);\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject);\n    }\n    return imageLoadObject.promise;\n}\nexport function loadAndCacheImages(imageIds, options = { priority: 0, requestType: 'prefetch' }) {\n    if (!imageIds || imageIds.length === 0) {\n        throw new Error('loadAndCacheImages: parameter imageIds must be list of image Ids');\n    }\n    const allPromises = imageIds.map((imageId) => {\n        return loadAndCacheImage(imageId, options);\n    });\n    return allPromises;\n}\nexport function createAndCacheDerivedImage(referencedImageId, options = {}) {\n    if (referencedImageId === undefined) {\n        throw new Error('createAndCacheDerivedImage: parameter imageId must not be undefined');\n    }\n    if (options.imageId === undefined) {\n        options.imageId = `derived:${uuidv4()}`;\n    }\n    const { imageId, skipCreateBuffer, onCacheAdd, voxelRepresentation } = options;\n    const imagePlaneModule = metaData.get('imagePlaneModule', referencedImageId);\n    const length = imagePlaneModule.rows * imagePlaneModule.columns;\n    const { TypedArrayConstructor } = getBufferConfiguration(options.targetBuffer?.type, length);\n    const imageScalarData = new TypedArrayConstructor(skipCreateBuffer ? 1 : length);\n    const derivedImageId = imageId;\n    const referencedImagePlaneMetadata = metaData.get('imagePlaneModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePlaneModule',\n        metadata: referencedImagePlaneMetadata,\n    });\n    const referencedImageGeneralSeriesMetadata = metaData.get('generalSeriesModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalSeriesModule',\n        metadata: referencedImageGeneralSeriesMetadata,\n    });\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalImageModule',\n        metadata: {\n            instanceNumber: options.instanceNumber,\n        },\n    });\n    const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePixelModule',\n        metadata: {\n            ...imagePixelModule,\n            bitsAllocated: 8,\n            bitsStored: 8,\n            highBit: 7,\n            samplesPerPixel: 1,\n            pixelRepresentation: 0,\n        },\n    });\n    const localImage = createAndCacheLocalImage(imageId, {\n        scalarData: imageScalarData,\n        onCacheAdd,\n        skipCreateBuffer,\n        targetBuffer: {\n            type: imageScalarData.constructor.name,\n        },\n        voxelRepresentation,\n        dimensions: [imagePlaneModule.columns, imagePlaneModule.rows],\n        spacing: [\n            imagePlaneModule.columnPixelSpacing,\n            imagePlaneModule.rowPixelSpacing,\n        ],\n        origin: imagePlaneModule.imagePositionPatient,\n        direction: imagePlaneModule.imageOrientationPatient,\n        frameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        referencedImageId: referencedImageId,\n    });\n    localImage.referencedImageId = referencedImageId;\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageSync(imageId, localImage);\n    }\n    return localImage;\n}\nexport function createAndCacheDerivedImages(referencedImageIds, options = {}) {\n    if (referencedImageIds.length === 0) {\n        throw new Error('createAndCacheDerivedImages: parameter imageIds must be list of image Ids');\n    }\n    const derivedImageIds = [];\n    const images = referencedImageIds.map((referencedImageId, index) => {\n        const newOptions = {\n            imageId: options?.getDerivedImageId?.(referencedImageId) ||\n                `derived:${uuidv4()}`,\n            ...options,\n        };\n        derivedImageIds.push(newOptions.imageId);\n        return createAndCacheDerivedImage(referencedImageId, {\n            ...newOptions,\n            instanceNumber: index + 1,\n        });\n    });\n    return images;\n}\nexport function createAndCacheLocalImage(imageId, options) {\n    const { scalarData, origin, direction, targetBuffer, skipCreateBuffer, onCacheAdd, frameOfReferenceUID, voxelRepresentation, referencedImageId, } = options;\n    const dimensions = options.dimensions;\n    const spacing = options.spacing;\n    if (!dimensions || !spacing) {\n        throw new Error('createAndCacheLocalImage: dimensions and spacing are required');\n    }\n    const width = dimensions[0];\n    const height = dimensions[1];\n    const columnPixelSpacing = spacing[0];\n    const rowPixelSpacing = spacing[1];\n    const imagePlaneModule = {\n        frameOfReferenceUID,\n        rows: height,\n        columns: width,\n        imageOrientationPatient: direction ?? [1, 0, 0, 0, 1, 0],\n        rowCosines: direction ? direction.slice(0, 3) : [1, 0, 0],\n        columnCosines: direction ? direction.slice(3, 6) : [0, 1, 0],\n        imagePositionPatient: origin ?? [0, 0, 0],\n        pixelSpacing: [rowPixelSpacing, columnPixelSpacing],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing,\n    };\n    const length = width * height;\n    const numberOfComponents = scalarData.length / length;\n    let scalarDataToUse;\n    if (scalarData) {\n        if (!(scalarData instanceof Uint8Array ||\n            scalarData instanceof Float32Array ||\n            scalarData instanceof Uint16Array ||\n            scalarData instanceof Int16Array)) {\n            throw new Error('createAndCacheLocalImage: scalarData must be of type Uint8Array, Uint16Array, Int16Array or Float32Array');\n        }\n        scalarDataToUse = scalarData;\n    }\n    else if (!skipCreateBuffer) {\n        const { TypedArrayConstructor } = getBufferConfiguration(targetBuffer?.type, length);\n        const imageScalarData = new TypedArrayConstructor(length);\n        scalarDataToUse = imageScalarData;\n    }\n    let bitsAllocated, bitsStored, highBit;\n    if (scalarDataToUse instanceof Uint8Array) {\n        bitsAllocated = 8;\n        bitsStored = 8;\n        highBit = 7;\n    }\n    else if (scalarDataToUse instanceof Uint16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Int16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Float32Array) {\n        bitsAllocated = 32;\n        bitsStored = 32;\n        highBit = 31;\n    }\n    else {\n        throw new Error('Unsupported scalarData type');\n    }\n    const imagePixelModule = {\n        samplesPerPixel: 1,\n        photometricInterpretation: scalarDataToUse.length > dimensions[0] * dimensions[1]\n            ? 'RGB'\n            : 'MONOCHROME2',\n        rows: height,\n        columns: width,\n        bitsAllocated,\n        bitsStored,\n        highBit,\n    };\n    const metadata = {\n        imagePlaneModule,\n        imagePixelModule,\n    };\n    ['imagePlaneModule', 'imagePixelModule'].forEach((type) => {\n        genericMetadataProvider.add(imageId, {\n            type,\n            metadata: metadata[type] || {},\n        });\n    });\n    const id = imageId;\n    const voxelManager = (voxelRepresentation === VoxelManagerEnum.RLE &&\n        VoxelManager.createRLEImageVoxelManager({ dimensions, id })) ||\n        VoxelManager.createImageVoxelManager({\n            height,\n            width,\n            numberOfComponents,\n            scalarData: scalarDataToUse,\n            id,\n        });\n    let minPixelValue = scalarDataToUse[0];\n    let maxPixelValue = scalarDataToUse[0];\n    for (let i = 1; i < scalarDataToUse.length; i++) {\n        if (scalarDataToUse[i] < minPixelValue) {\n            minPixelValue = scalarDataToUse[i];\n        }\n        if (scalarDataToUse[i] > maxPixelValue) {\n            maxPixelValue = scalarDataToUse[i];\n        }\n    }\n    const image = {\n        imageId: imageId,\n        intercept: 0,\n        windowCenter: 0,\n        windowWidth: 0,\n        color: imagePixelModule.photometricInterpretation === 'RGB',\n        numberOfComponents: imagePixelModule.samplesPerPixel,\n        dataType: targetBuffer?.type,\n        slope: 1,\n        minPixelValue,\n        maxPixelValue,\n        rows: imagePixelModule.rows,\n        columns: imagePixelModule.columns,\n        getCanvas: undefined,\n        height: imagePixelModule.rows,\n        width: imagePixelModule.columns,\n        rgba: undefined,\n        columnPixelSpacing: imagePlaneModule.columnPixelSpacing,\n        rowPixelSpacing: imagePlaneModule.rowPixelSpacing,\n        FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        invert: false,\n        getPixelData: () => voxelManager.getScalarData(),\n        voxelManager,\n        sizeInBytes: scalarData.byteLength,\n        referencedImageId,\n    };\n    onCacheAdd?.(image);\n    cache.putImageSync(image.imageId, image);\n    return image;\n}\nexport function cancelLoadImage(imageId) {\n    const filterFunction = ({ additionalDetails }) => {\n        if (additionalDetails.imageId) {\n            return additionalDetails.imageId !== imageId;\n        }\n        return true;\n    };\n    imageLoadPoolManager.filterRequests(filterFunction);\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n    if (imageLoadObject) {\n        imageLoadObject.cancelFn();\n    }\n}\nexport function cancelLoadImages(imageIds) {\n    imageIds.forEach((imageId) => {\n        cancelLoadImage(imageId);\n    });\n}\nexport function cancelLoadAll() {\n    const requestPool = imageLoadPoolManager.getRequestPool();\n    Object.keys(requestPool).forEach((type) => {\n        const requests = requestPool[type];\n        Object.keys(requests).forEach((priority) => {\n            const requestDetails = requests[priority].pop();\n            if (!requestDetails) {\n                return;\n            }\n            const additionalDetails = requestDetails.additionalDetails;\n            const { imageId, volumeId } = additionalDetails;\n            let loadObject;\n            if (imageId) {\n                loadObject = cache.getImageLoadObject(imageId);\n            }\n            else if (volumeId) {\n                loadObject = cache.getVolumeLoadObject(volumeId);\n            }\n            if (loadObject) {\n                loadObject.cancel();\n            }\n        });\n        imageLoadPoolManager.clearRequestStack(type);\n    });\n}\nexport function registerImageLoader(scheme, imageLoader) {\n    imageLoaders[scheme] = imageLoader;\n}\nexport function registerUnknownImageLoader(imageLoader) {\n    const oldImageLoader = unknownImageLoader;\n    unknownImageLoader = imageLoader;\n    return oldImageLoader;\n}\nexport function unregisterAllImageLoaders() {\n    Object.keys(imageLoaders).forEach((imageLoader) => delete imageLoaders[imageLoader]);\n    unknownImageLoader = undefined;\n}\nexport function createAndCacheDerivedLabelmapImages(referencedImageIds, options = {}) {\n    return createAndCacheDerivedImages(referencedImageIds, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createAndCacheDerivedLabelmapImage(referencedImageId, options = {}) {\n    return createAndCacheDerivedImage(referencedImageId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\n","export default class FrameRange {\n    static { this.frameRangeExtractor = /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i; }\n    static imageIdToFrames(imageId) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const range = match[2].split('-').map((it) => Number(it));\n        if (range.length === 1) {\n            return range[0];\n        }\n        return range;\n    }\n    static imageIdToFrameEnd(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[1] : range;\n    }\n    static imageIdToFrameStart(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[0] : range;\n    }\n    static framesToString(range) {\n        if (Array.isArray(range)) {\n            return `${range[0]}-${range[1]}`;\n        }\n        return String(range);\n    }\n    static framesToImageId(imageId, range) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const newRangeString = this.framesToString(range);\n        return imageId.replace(this.frameRangeExtractor, `${match[1]}${newRangeString}`);\n    }\n}\n","export default class PointsManager {\n    constructor(configuration = {}) {\n        this._dimensions = 3;\n        this._length = 0;\n        this._byteSize = 4;\n        this.growSize = 128;\n        const { initialSize = 1024, dimensions = 3, growSize = 128, } = configuration;\n        const itemLength = initialSize * dimensions;\n        this.growSize = growSize;\n        this.array = new ArrayBuffer(itemLength * this._byteSize);\n        this.data = new Float32Array(this.array);\n        this._dimensions = dimensions;\n    }\n    forEach(func) {\n        for (let i = 0; i < this._length; i++) {\n            func(this.getPoint(i), i);\n        }\n    }\n    get length() {\n        return this._length;\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    get dimensionLength() {\n        return this._length * this._dimensions;\n    }\n    getPoint(index) {\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        return this.data.subarray(offset, offset + this._dimensions);\n    }\n    getPointArray(index) {\n        const array = [];\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        for (let i = 0; i < this._dimensions; i++) {\n            array.push(this.data[i + offset]);\n        }\n        return array;\n    }\n    grow(additionalSize = 1, growSize = this.growSize) {\n        if (this.dimensionLength + additionalSize * this._dimensions <=\n            this.data.length) {\n            return;\n        }\n        const newSize = this.data.length + growSize;\n        const newArray = new ArrayBuffer(newSize * this._dimensions * this._byteSize);\n        const newData = new Float32Array(newArray);\n        newData.set(this.data);\n        this.data = newData;\n        this.array = newArray;\n    }\n    reverse() {\n        const midLength = Math.floor(this._length / 2);\n        for (let i = 0; i < midLength; i++) {\n            const indexStart = i * this._dimensions;\n            const indexEnd = (this._length - 1 - i) * this._dimensions;\n            for (let dimension = 0; dimension < this._dimensions; dimension++) {\n                const valueStart = this.data[indexStart + dimension];\n                this.data[indexStart + dimension] = this.data[indexEnd + dimension];\n                this.data[indexEnd + dimension] = valueStart;\n            }\n        }\n    }\n    getTypedArray() {\n        return this.data;\n    }\n    push(point) {\n        this.grow(1);\n        const offset = this.length * this._dimensions;\n        for (let i = 0; i < this._dimensions; i++) {\n            this.data[i + offset] = point[i];\n        }\n        this._length++;\n    }\n    map(f) {\n        const mapData = [];\n        for (let i = 0; i < this._length; i++) {\n            mapData.push(f(this.getPoint(i), i));\n        }\n        return mapData;\n    }\n    get points() {\n        return this.map((p) => p);\n    }\n    toXYZ() {\n        const xyz = { x: [], y: [] };\n        if (this._dimensions >= 3) {\n            xyz.z = [];\n        }\n        const { x, y, z } = xyz;\n        this.forEach((p) => {\n            x.push(p[0]);\n            y.push(p[1]);\n            if (z) {\n                z.push(p[2]);\n            }\n        });\n        return xyz;\n    }\n    static fromXYZ({ x, y, z }) {\n        const array = PointsManager.create3(x.length);\n        let offset = 0;\n        for (let i = 0; i < x.length; i++) {\n            array.data[offset++] = x[i];\n            array.data[offset++] = y[i];\n            array.data[offset++] = z ? z[i] : 0;\n        }\n        array._length = x.length;\n        return array;\n    }\n    subselect(count = 10, offset = 0) {\n        const selected = new PointsManager({\n            initialSize: count,\n            dimensions: this._dimensions,\n        });\n        for (let i = 0; i < count; i++) {\n            const index = (offset + Math.floor((this.length * i) / count)) % this.length;\n            selected.push(this.getPoint(index));\n        }\n        return selected;\n    }\n    static create3(initialSize = 128, points) {\n        initialSize = Math.max(initialSize, points?.length || 0);\n        const newPoints = new PointsManager({ initialSize, dimensions: 3 });\n        if (points) {\n            points.forEach((point) => newPoints.push(point));\n        }\n        return newPoints;\n    }\n    static create2(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 2 });\n    }\n}\n","export class PromiseIterator extends Promise {\n}\nexport default class ProgressiveIterator {\n    constructor(name) {\n        this.name = name || 'unknown';\n    }\n    static as(promise) {\n        if (promise.iterator) {\n            return promise.iterator;\n        }\n        const iterator = new ProgressiveIterator('as iterator');\n        promise.then((v) => {\n            try {\n                iterator.add(v, true);\n            }\n            catch (e) {\n                iterator.reject(e);\n            }\n        }, (reason) => {\n            iterator.reject(reason);\n        });\n        return iterator;\n    }\n    add(x, done = false) {\n        this.nextValue = x;\n        this.done ||= done;\n        if (this.waiting) {\n            this.waiting.resolve(x);\n            this.waiting = undefined;\n        }\n    }\n    resolve() {\n        this.done = true;\n        if (this.waiting) {\n            this.waiting.resolve(this.nextValue);\n            this.waiting = undefined;\n        }\n    }\n    reject(reason) {\n        this.rejectReason = reason;\n        this.waiting?.reject(reason);\n    }\n    getRecent() {\n        if (this.rejectReason) {\n            throw this.rejectReason;\n        }\n        return this.nextValue;\n    }\n    async *[Symbol.asyncIterator]() {\n        while (!this.done) {\n            if (this.rejectReason) {\n                throw this.rejectReason;\n            }\n            if (this.nextValue !== undefined) {\n                yield this.nextValue;\n                if (this.done) {\n                    break;\n                }\n            }\n            if (!this.waiting) {\n                this.waiting = {};\n                this.waiting.promise = new Promise((resolve, reject) => {\n                    this.waiting.resolve = resolve;\n                    this.waiting.reject = reject;\n                });\n            }\n            await this.waiting.promise;\n        }\n        yield this.nextValue;\n    }\n    async forEach(callback, errorCallback) {\n        let index = 0;\n        try {\n            for await (const value of this) {\n                const { done } = this;\n                try {\n                    await callback(value, done, index);\n                    index++;\n                }\n                catch (e) {\n                    if (!done) {\n                        console.warn('Caught exception in intermediate value', e);\n                        continue;\n                    }\n                    if (errorCallback) {\n                        errorCallback(e, done);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            if (errorCallback) {\n                errorCallback(e, true);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    generate(processFunction, errorCallback) {\n        return processFunction(this, this.reject.bind(this)).then(() => {\n            if (!this.done) {\n                this.resolve();\n            }\n        }, (reason) => {\n            this.reject(reason);\n            if (errorCallback) {\n                errorCallback(reason);\n            }\n            else {\n                console.warn(\"Couldn't process because\", reason);\n            }\n        });\n    }\n    async nextPromise() {\n        for await (const i of this) {\n            if (i) {\n                return i;\n            }\n        }\n        return this.nextValue;\n    }\n    async donePromise() {\n        for await (const i of this) {\n        }\n        return this.nextValue;\n    }\n    getNextPromise() {\n        const promise = this.nextPromise();\n        promise.iterator = this;\n        return promise;\n    }\n    getDonePromise() {\n        const promise = this.donePromise();\n        promise.iterator = this;\n        return promise;\n    }\n}\n","const ADJACENT_ALL = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n    [0, 0, 1],\n];\nconst ADJACENT_SINGLE_PLANE = [\n    [0, -1, 0],\n    [0, 1, 0],\n];\nconst ADJACENT_IN = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n];\nconst ADJACENT_OUT = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\nexport default class RLEVoxelMap {\n    static copyMap(destination, source) {\n        for (const [index, row] of source.rows) {\n            destination.rows.set(index, structuredClone(row));\n        }\n    }\n    constructor(width, height, depth = 1) {\n        this.rows = new Map();\n        this.height = 1;\n        this.width = 1;\n        this.depth = 1;\n        this.jMultiple = 1;\n        this.kMultiple = 1;\n        this.numComps = 1;\n        this.pixelDataConstructor = Uint8Array;\n        this.updateScalarData = function (scalarData) {\n            scalarData.fill(0);\n            const callback = (index, rle, row) => {\n                const { start, end, value } = rle;\n                for (let i = start; i < end; i++) {\n                    scalarData[index + i] = value;\n                }\n            };\n            this.forEach(callback);\n        };\n        this.get = (index) => {\n            const i = index % this.jMultiple;\n            const j = (index - i) / this.jMultiple;\n            const rle = this.getRLE(i, j);\n            return rle?.value ?? this.defaultValue;\n        };\n        this.getRun = (j, k) => {\n            const runIndex = j + k * this.height;\n            return this.rows.get(runIndex);\n        };\n        this.set = (index, value) => {\n            if (value === undefined) {\n                return;\n            }\n            const i = index % this.width;\n            const j = (index - i) / this.width;\n            const row = this.rows.get(j);\n            if (!row) {\n                this.rows.set(j, [{ start: i, end: i + 1, value }]);\n                return;\n            }\n            const rleIndex = this.findIndex(row, i);\n            const rle1 = row[rleIndex];\n            const rle0 = row[rleIndex - 1];\n            if (!rle1) {\n                if (!rle0 || rle0.value !== value || rle0.end !== i) {\n                    row[rleIndex] = { start: i, end: i + 1, value };\n                    return;\n                }\n                rle0.end++;\n                return;\n            }\n            const { start, end, value: oldValue } = rle1;\n            if (value === oldValue && i >= start) {\n                return;\n            }\n            const rleInsert = { start: i, end: i + 1, value };\n            const isAfter = i > start;\n            const insertIndex = isAfter ? rleIndex + 1 : rleIndex;\n            const rlePrev = isAfter ? rle1 : rle0;\n            let rleNext = isAfter ? row[rleIndex + 1] : rle1;\n            if (rlePrev?.value === value && rlePrev?.end === i) {\n                rlePrev.end++;\n                if (rleNext?.value === value && rleNext.start === i + 1) {\n                    rlePrev.end = rleNext.end;\n                    row.splice(rleIndex, 1);\n                }\n                else if (rleNext?.start === i) {\n                    rleNext.start++;\n                    if (rleNext.start === rleNext.end) {\n                        row.splice(rleIndex, 1);\n                        rleNext = row[rleIndex];\n                        if (rleNext?.start === i + 1 && rleNext.value === value) {\n                            rlePrev.end = rleNext.end;\n                            row.splice(rleIndex, 1);\n                        }\n                    }\n                }\n                return;\n            }\n            if (rleNext?.value === value && rleNext.start === i + 1) {\n                rleNext.start--;\n                if (rlePrev?.end > i) {\n                    rlePrev.end = i;\n                    if (rlePrev.end === rlePrev.start) {\n                        row.splice(rleIndex, 1);\n                    }\n                }\n                return;\n            }\n            if (rleNext?.start === i && rleNext.end === i + 1) {\n                rleNext.value = value;\n                const nextnext = row[rleIndex + 1];\n                if (nextnext?.start == i + 1 && nextnext.value === value) {\n                    row.splice(rleIndex + 1, 1);\n                    rleNext.end = nextnext.end;\n                }\n                return;\n            }\n            if (i === rleNext?.start) {\n                rleNext.start++;\n            }\n            if (isAfter && end > i + 1) {\n                row.splice(insertIndex, 0, rleInsert, {\n                    start: i + 1,\n                    end: rlePrev.end,\n                    value: rlePrev.value,\n                });\n            }\n            else {\n                row.splice(insertIndex, 0, rleInsert);\n            }\n            if (rlePrev?.end > i) {\n                rlePrev.end = i;\n            }\n        };\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.jMultiple = width;\n        this.kMultiple = this.jMultiple * height;\n    }\n    static { this.getScalarData = function (ArrayType = Uint8ClampedArray) {\n        const scalarData = new ArrayType(this.frameSize);\n        this.map.updateScalarData(scalarData);\n        return scalarData;\n    }; }\n    toIJK(index) {\n        const i = index % this.jMultiple;\n        const j = ((index - i) / this.jMultiple) % this.height;\n        const k = Math.floor(index / this.kMultiple);\n        return [i, j, k];\n    }\n    toIndex([i, j, k]) {\n        return i + k * this.kMultiple + j * this.jMultiple;\n    }\n    getRLE(i, j, k = 0) {\n        const row = this.rows.get(j + k * this.height);\n        if (!row) {\n            return;\n        }\n        const index = this.findIndex(row, i);\n        const rle = row[index];\n        return i >= rle?.start ? rle : undefined;\n    }\n    has(index) {\n        const i = index % this.jMultiple;\n        const j = (index - i) / this.jMultiple;\n        const rle = this.getRLE(i, j);\n        return rle?.value !== undefined;\n    }\n    delete(index) {\n        const i = index % this.width;\n        const j = (index - i) / this.width;\n        const row = this.rows.get(j);\n        if (!row) {\n            return;\n        }\n        const rleIndex = this.findIndex(row, i);\n        const rle = row[rleIndex];\n        if (!rle || rle.start > i) {\n            return;\n        }\n        if (rle.end === i + 1) {\n            rle.end--;\n            if (rle.start >= rle.end) {\n                row.splice(rleIndex, 1);\n                if (!row.length) {\n                    this.rows.delete(j);\n                }\n            }\n            return;\n        }\n        if (rle.start === i) {\n            rle.start++;\n            return;\n        }\n        const newRle = {\n            value: rle.value,\n            start: i + 1,\n            end: rle.end,\n        };\n        rle.end = i;\n        row.splice(rleIndex + 1, 0, newRle);\n    }\n    findIndex(row, i) {\n        for (let index = 0; index < row.length; index++) {\n            const { end: iEnd } = row[index];\n            if (i < iEnd) {\n                return index;\n            }\n        }\n        return row.length;\n    }\n    forEach(callback, options) {\n        const rowModified = options?.rowModified;\n        for (const [baseIndex, row] of this.rows) {\n            const rowToUse = rowModified ? [...row] : row;\n            for (const rle of rowToUse) {\n                callback(baseIndex * this.width, rle, row);\n            }\n        }\n    }\n    forEachRow(callback) {\n        for (const [baseIndex, row] of this.rows) {\n            callback(baseIndex * this.width, row);\n        }\n    }\n    clear() {\n        this.rows.clear();\n    }\n    keys() {\n        return [...this.rows.keys()];\n    }\n    getPixelData(k = 0, pixelData) {\n        if (!pixelData) {\n            pixelData = new this.pixelDataConstructor(this.width * this.height * this.numComps);\n        }\n        else {\n            pixelData.fill(0);\n        }\n        const { width, height, numComps } = this;\n        for (let j = 0; j < height; j++) {\n            const row = this.getRun(j, k);\n            if (!row) {\n                continue;\n            }\n            if (numComps === 1) {\n                for (const rle of row) {\n                    const rowOffset = j * width;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i++) {\n                        pixelData[rowOffset + i] = value;\n                    }\n                }\n            }\n            else {\n                for (const rle of row) {\n                    const rowOffset = j * width * numComps;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i += numComps) {\n                        for (let comp = 0; comp < numComps; comp++) {\n                            pixelData[rowOffset + i + comp] = value[comp];\n                        }\n                    }\n                }\n            }\n        }\n        return pixelData;\n    }\n    floodFill(i, j, k, value, options) {\n        const rle = this.getRLE(i, j, k);\n        if (!rle) {\n            throw new Error(`Initial point ${i},${j},${k} isn't in the RLE`);\n        }\n        const stack = [[rle, j, k]];\n        const replaceValue = rle.value;\n        if (replaceValue === value) {\n            throw new Error(`source (${replaceValue}) and destination (${value}) are identical`);\n        }\n        return this.flood(stack, replaceValue, value, options);\n    }\n    flood(stack, sourceValue, value, options) {\n        let sum = 0;\n        const { planar = true, diagonals = true, singlePlane = false, } = options || {};\n        const childOptions = { planar, diagonals, singlePlane };\n        while (stack.length) {\n            const top = stack.pop();\n            const [current] = top;\n            if (current.value !== sourceValue) {\n                continue;\n            }\n            current.value = value;\n            sum += current.end - current.start;\n            const adjacents = this.findAdjacents(top, childOptions).filter((adjacent) => adjacent && adjacent[0].value === sourceValue);\n            stack.push(...adjacents);\n        }\n        return sum;\n    }\n    fillFrom(getter, boundsIJK) {\n        for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n            for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                let rle;\n                let row;\n                for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                    const value = getter(i, j, k);\n                    if (value === undefined) {\n                        rle = undefined;\n                        continue;\n                    }\n                    if (!row) {\n                        row = [];\n                        this.rows.set(j + k * this.height, row);\n                    }\n                    if (rle && rle.value !== value) {\n                        rle = undefined;\n                    }\n                    if (!rle) {\n                        rle = { start: i, end: i, value };\n                        row.push(rle);\n                    }\n                    rle.end++;\n                }\n            }\n        }\n    }\n    findAdjacents(item, { diagonals = true, planar = true, singlePlane = false }) {\n        const [rle, j, k, adjacentsDelta] = item;\n        const { start, end } = rle;\n        const leftRle = start > 0 && this.getRLE(start - 1, j, k);\n        const rightRle = end < this.width && this.getRLE(end, j, k);\n        const range = diagonals\n            ? [start > 0 ? start - 1 : start, end < this.width ? end + 1 : end]\n            : [start, end];\n        const adjacents = [];\n        if (leftRle) {\n            adjacents.push([leftRle, j, k]);\n        }\n        if (rightRle) {\n            adjacents.push([rightRle, j, k]);\n        }\n        for (const delta of adjacentsDelta ||\n            (singlePlane ? ADJACENT_SINGLE_PLANE : ADJACENT_ALL)) {\n            const [, delta1, delta2] = delta;\n            const testJ = delta1 + j;\n            const testK = delta2 + k;\n            if (testJ < 0 || testJ >= this.height) {\n                continue;\n            }\n            if (testK < 0 || testK >= this.depth) {\n                continue;\n            }\n            const row = this.getRun(testJ, testK);\n            if (!row) {\n                continue;\n            }\n            for (const testRle of row) {\n                const newAdjacentDelta = adjacentsDelta ||\n                    (singlePlane && ADJACENT_SINGLE_PLANE) ||\n                    (planar && delta2 > 0 && ADJACENT_OUT) ||\n                    (planar && delta2 < 0 && ADJACENT_IN) ||\n                    ADJACENT_ALL;\n                if (!(testRle.end <= range[0] || testRle.start >= range[1])) {\n                    adjacents.push([testRle, testJ, testK, newAdjacentDelta]);\n                }\n            }\n        }\n        return adjacents;\n    }\n}\n","export function isImageActor(actorEntry) {\n    return (actorIsA(actorEntry, 'vtkVolume') || actorIsA(actorEntry, 'vtkImageSlice'));\n}\nexport function actorIsA(actorEntry, actorType) {\n    const actorToCheck = 'isA' in actorEntry ? actorEntry : actorEntry.actor;\n    if (!actorToCheck) {\n        return false;\n    }\n    return !!actorToCheck.isA(actorType);\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nexport default function applyPreset(actor, preset) {\n    const colorTransferArray = preset.colorTransfer\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const { shiftRange } = getShiftRange(colorTransferArray);\n    const min = shiftRange[0];\n    const width = shiftRange[1] - shiftRange[0];\n    const cfun = vtkColorTransferFunction.newInstance();\n    const normColorTransferValuePoints = [];\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        let value = colorTransferArray[i];\n        const r = colorTransferArray[i + 1];\n        const g = colorTransferArray[i + 2];\n        const b = colorTransferArray[i + 3];\n        value = (value - min) / width;\n        normColorTransferValuePoints.push([value, r, g, b]);\n    }\n    applyPointsToRGBFunction(normColorTransferValuePoints, shiftRange, cfun);\n    actor.getProperty().setRGBTransferFunction(0, cfun);\n    const scalarOpacityArray = preset.scalarOpacity\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const ofun = vtkPiecewiseFunction.newInstance();\n    const normPoints = [];\n    for (let i = 0; i < scalarOpacityArray.length; i += 2) {\n        let value = scalarOpacityArray[i];\n        const opacity = scalarOpacityArray[i + 1];\n        value = (value - min) / width;\n        normPoints.push([value, opacity]);\n    }\n    applyPointsToPiecewiseFunction(normPoints, shiftRange, ofun);\n    const property = actor.getProperty();\n    property.setScalarOpacity(0, ofun);\n    const [gradientMinValue, gradientMinOpacity, gradientMaxValue, gradientMaxOpacity,] = preset.gradientOpacity.split(' ').splice(1).map(parseFloat);\n    property.setUseGradientOpacity(0, true);\n    property.setGradientOpacityMinimumValue(0, gradientMinValue);\n    property.setGradientOpacityMinimumOpacity(0, gradientMinOpacity);\n    property.setGradientOpacityMaximumValue(0, gradientMaxValue);\n    property.setGradientOpacityMaximumOpacity(0, gradientMaxOpacity);\n    if (preset.interpolation === '1') {\n        property.setInterpolationTypeToFastLinear();\n    }\n    property.setShade(preset.shade === '1');\n    const ambient = parseFloat(preset.ambient);\n    const diffuse = parseFloat(preset.diffuse);\n    const specular = parseFloat(preset.specular);\n    const specularPower = parseFloat(preset.specularPower);\n    property.setAmbient(ambient);\n    property.setDiffuse(diffuse);\n    property.setSpecular(specular);\n    property.setSpecularPower(specularPower);\n}\nfunction getShiftRange(colorTransferArray) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        min = Math.min(min, colorTransferArray[i]);\n        max = Math.max(max, colorTransferArray[i]);\n    }\n    const center = (max - min) / 2;\n    return {\n        shiftRange: [-center, center],\n        min,\n        max,\n    };\n}\nfunction applyPointsToRGBFunction(points, range, cfun) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, r, g, b]) => [\n        x * width + range[0],\n        r,\n        g,\n        b,\n    ]);\n    cfun.removeAllPoints();\n    rescaled.forEach(([x, r, g, b]) => cfun.addRGBPoint(x, r, g, b));\n    return rescaled;\n}\nfunction applyPointsToPiecewiseFunction(points, range, pwf) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, y]) => [x * width + range[0], y]);\n    pwf.removeAllPoints();\n    rescaled.forEach(([x, y]) => pwf.addPoint(x, y));\n    return rescaled;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nconst autoLoad = (volumeId) => {\n    const renderingEngineAndViewportIds = getRenderingEngineAndViewportsContainingVolume(volumeId);\n    if (!renderingEngineAndViewportIds?.length) {\n        return;\n    }\n    renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n        if (!renderingEngine.hasBeenDestroyed) {\n            renderingEngine.renderViewports(viewportIds);\n        }\n    });\n};\nfunction getRenderingEngineAndViewportsContainingVolume(volumeId) {\n    const renderingEnginesArray = getRenderingEngines();\n    const renderingEngineAndViewportIds = [];\n    renderingEnginesArray.forEach((renderingEngine) => {\n        const viewports = getViewportsWithVolumeId(volumeId);\n        if (viewports.length) {\n            renderingEngineAndViewportIds.push({\n                renderingEngine,\n                viewportIds: viewports.map((viewport) => viewport.id),\n            });\n        }\n    });\n    return renderingEngineAndViewportIds;\n}\nexport default autoLoad;\n","import * as metaData from '../metaData';\nimport { MetadataModules, VOILUTFunctionType } from '../enums';\nexport function getValidVOILUTFunction(voiLUTFunction) {\n    if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n        return VOILUTFunctionType.LINEAR;\n    }\n    return voiLUTFunction;\n}\nexport function getImagePlaneModule(imageId) {\n    const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n    const newImagePlaneModule = {\n        ...imagePlaneModule,\n    };\n    if (!newImagePlaneModule.columnPixelSpacing) {\n        newImagePlaneModule.columnPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.rowPixelSpacing) {\n        newImagePlaneModule.rowPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.columnCosines) {\n        newImagePlaneModule.columnCosines = [0, 1, 0];\n    }\n    if (!newImagePlaneModule.rowCosines) {\n        newImagePlaneModule.rowCosines = [1, 0, 0];\n    }\n    if (!newImagePlaneModule.imagePositionPatient) {\n        newImagePlaneModule.imagePositionPatient = [0, 0, 0];\n    }\n    if (!newImagePlaneModule.imageOrientationPatient) {\n        newImagePlaneModule.imageOrientationPatient = new Float32Array([\n            1, 0, 0, 0, 1, 0,\n        ]);\n    }\n    return newImagePlaneModule;\n}\nexport function calibrateImagePlaneModule(imageId, imagePlaneModule, currentCalibration) {\n    const calibration = metaData.get('calibratedPixelSpacing', imageId);\n    const isUpdated = currentCalibration !== calibration;\n    const { scale } = calibration || {};\n    const hasPixelSpacing = scale > 0 || imagePlaneModule.rowPixelSpacing > 0;\n    imagePlaneModule.calibration = calibration;\n    if (!isUpdated) {\n        return { imagePlaneModule, hasPixelSpacing };\n    }\n    return {\n        imagePlaneModule,\n        hasPixelSpacing,\n        calibrationEvent: {\n            scale,\n            calibration,\n        },\n    };\n}\nexport function buildMetadata(image) {\n    const imageId = image.imageId;\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = metaData.get('imagePixelModule', imageId);\n    const { windowWidth, windowCenter, voiLUTFunction } = image;\n    const { modality } = metaData.get('generalSeriesModule', imageId);\n    const imageIdScalingFactor = metaData.get('scalingModule', imageId);\n    const calibration = metaData.get(MetadataModules.CALIBRATION, imageId);\n    const voiLUTFunctionEnum = getValidVOILUTFunction(voiLUTFunction);\n    const imagePlaneModule = getImagePlaneModule(imageId);\n    return {\n        calibration,\n        scalingFactor: imageIdScalingFactor,\n        voiLUTFunction: voiLUTFunctionEnum,\n        modality,\n        imagePlaneModule,\n        imagePixelModule: {\n            bitsAllocated,\n            bitsStored,\n            samplesPerPixel,\n            highBit,\n            photometricInterpretation,\n            pixelRepresentation,\n            windowWidth: windowWidth,\n            windowCenter: windowCenter,\n            modality,\n            voiLUTFunction: voiLUTFunctionEnum,\n        },\n    };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { getConfiguration } from '../init';\nexport default function calculateSpacingBetweenImageIds(imageIds) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    const refIppVec = vec3.fromValues(referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    let spacing;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        const ippVec = vec3.fromValues(imagePositionPatient[0], imagePositionPatient[1], imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, ippVec);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        const numImages = distanceImagePairs.length;\n        spacing =\n            Math.abs(distanceImagePairs[numImages - 1].distance -\n                distanceImagePairs[0].distance) /\n                (numImages - 1);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n        if (!metadataForMiddleImage) {\n            throw new Error('Incomplete metadata required for volume construction.');\n        }\n        const positionVector = vec3.create();\n        const middleIppVec = vec3.fromValues(metadataForMiddleImage.imagePositionPatient[0], metadataForMiddleImage.imagePositionPatient[1], metadataForMiddleImage.imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, middleIppVec);\n        const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n        spacing =\n            Math.abs(distanceBetweenFirstAndMiddleImages) /\n                Math.floor(imageIds.length / 2);\n    }\n    const { sliceThickness, spacingBetweenSlices } = metaData.get('imagePlaneModule', imageIds[0]);\n    const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n    if ((spacing === 0 || isNaN(spacing)) && !strictZSpacingForVolumeViewport) {\n        if (spacingBetweenSlices) {\n            console.debug('Could not calculate spacing. Using spacingBetweenSlices');\n            spacing = spacingBetweenSlices;\n        }\n        else if (sliceThickness) {\n            console.debug('Could not calculate spacing and no spacingBetweenSlices. Using sliceThickness');\n            spacing = sliceThickness;\n        }\n        else {\n            console.debug('Could not calculate spacing. The VolumeViewport visualization is compromised. Setting spacing to 1 to render');\n            spacing = 1;\n        }\n    }\n    return spacing;\n}\n","function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport { clamp as default, clamp };\n","import vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport isEqual from './isEqual';\nimport { actorIsA } from './actorCheck';\nconst _colormaps = new Map();\nfunction registerColormap(colormap) {\n    colormap.name = colormap.name || colormap.Name;\n    _colormaps.set(colormap.name, colormap);\n}\nfunction getColormap(name) {\n    return _colormaps.get(name);\n}\nfunction getColormapNames() {\n    return Array.from(_colormaps.keys());\n}\nfunction findMatchingColormap(rgbPoints, actor) {\n    const colormapsVTK = vtkColorMaps.rgbPresetNames.map((presetName) => vtkColorMaps.getPresetByName(presetName));\n    const colormapsCS3D = getColormapNames().map((colormapName) => getColormap(colormapName));\n    const colormaps = colormapsVTK.concat(colormapsCS3D);\n    const matchedColormap = colormaps.find((colormap) => {\n        const { RGBPoints: presetRGBPoints } = colormap;\n        if (presetRGBPoints.length !== rgbPoints.length) {\n            return false;\n        }\n        for (let i = 0; i < presetRGBPoints.length; i += 4) {\n            if (!isEqual(presetRGBPoints.slice(i + 1, i + 4), rgbPoints.slice(i + 1, i + 4))) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (!matchedColormap) {\n        return null;\n    }\n    const opacity = [];\n    if (actorIsA(actor, 'vtkVolume')) {\n        const opacityPoints = actor\n            .getProperty()\n            .getScalarOpacity(0)\n            .getDataPointer();\n        if (!opacityPoints) {\n            return {\n                name: matchedColormap.Name,\n            };\n        }\n        for (let i = 0; i < opacityPoints.length; i += 2) {\n            opacity.push({\n                value: opacityPoints[i],\n                opacity: opacityPoints[i + 1],\n            });\n        }\n    }\n    return {\n        name: matchedColormap.Name,\n        opacity,\n    };\n}\nexport { getColormap, getColormapNames, registerColormap, findMatchingColormap, };\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nexport default function createLinearRGBTransferFunction(voiRange) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    let lower = 0;\n    let upper = 1024;\n    if (voiRange.lower !== undefined && voiRange.upper !== undefined) {\n        lower = voiRange.lower;\n        upper = voiRange.upper;\n    }\n    cfun.addRGBPoint(lower, 0.0, 0.0, 0.0);\n    cfun.addRGBPoint(upper, 1.0, 1.0, 1.0);\n    return cfun;\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport * as windowLevelUtil from './windowLevel';\nimport { logit } from './logit';\nexport default function createSigmoidRGBTransferFunction(voiRange, approximationNodes = 1024) {\n    const { windowWidth, windowCenter } = windowLevelUtil.toWindowLevel(voiRange.lower, voiRange.upper);\n    const range = Array.from({ length: approximationNodes }, (_, i) => (i + 1) / (approximationNodes + 2));\n    const table = range.flatMap((y) => {\n        const x = logit(y, windowCenter, windowWidth);\n        return [x, y, y, y, 0.5, 0.0];\n    });\n    const cfun = vtkColorTransferFunction.newInstance();\n    cfun.buildFunctionFromArray(vtkDataArray.newInstance({\n        values: table,\n        numberOfComponents: 6,\n    }));\n    return cfun;\n}\n","export default function decimate(list, interleave, offset = 0) {\n    const interleaveIndices = [];\n    for (let i = offset; i < list.length; i += interleave) {\n        interleaveIndices.push(i);\n    }\n    return interleaveIndices;\n}\n","export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    if (typeof structuredClone === 'function') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(deepClone);\n    }\n    else {\n        const clonedObj = {};\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                clonedObj[key] = deepClone(obj[key]);\n            }\n        }\n        return clonedObj;\n    }\n}\n","export default function fnv1aHash(str) {\n    let hash = 0x811c9dc5;\n    for (let i = 0; i < str.length; i++) {\n        hash ^= str.charCodeAt(i);\n        hash +=\n            (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    return (hash >>> 0).toString(36);\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { EPSILON } from '../constants';\nexport default function getClosestImageId(imageVolume, worldPos, viewPlaneNormal, options) {\n    const { direction, spacing, imageIds } = imageVolume;\n    const { ignoreSpacing = false } = options || {};\n    if (!imageIds?.length) {\n        return;\n    }\n    const kVector = direction.slice(6, 9);\n    const dotProduct = vec3.dot(kVector, viewPlaneNormal);\n    if (Math.abs(dotProduct) < 1 - EPSILON) {\n        console.debug('View plane normal is not parallel to the image scan axis. Unable to find closest imageId.');\n        return;\n    }\n    let halfSpacingInNormalDirection;\n    if (!ignoreSpacing) {\n        const spacingInNormalDirection = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n        halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    }\n    let closestImageId;\n    let minDistance = Infinity;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n        if (!imagePlaneModule?.imagePositionPatient) {\n            console.warn(`Missing imagePositionPatient for imageId: ${imageId}`);\n            continue;\n        }\n        const { imagePositionPatient } = imagePlaneModule;\n        const dir = vec3.create();\n        vec3.sub(dir, worldPos, imagePositionPatient);\n        const distance = Math.abs(vec3.dot(dir, viewPlaneNormal));\n        if (ignoreSpacing) {\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n        else {\n            if (distance < halfSpacingInNormalDirection && distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n    }\n    if (closestImageId === undefined) {\n        console.debug('No imageId found within the specified criteria (half spacing or absolute closest).');\n    }\n    return closestImageId;\n}\n","import { vec3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nimport { buildMetadata } from './buildMetadata';\nexport function getImageDataMetadata(image) {\n    const { imagePlaneModule, imagePixelModule, voiLUTFunction, modality, scalingFactor, calibration, } = buildMetadata(image);\n    let { rowCosines, columnCosines } = imagePlaneModule;\n    if (rowCosines == null || columnCosines == null) {\n        rowCosines = [1, 0, 0];\n        columnCosines = [0, 1, 0];\n    }\n    const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n    const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    let origin = imagePlaneModule.imagePositionPatient;\n    if (origin == null) {\n        origin = [0, 0, 0];\n    }\n    const xSpacing = imagePlaneModule.columnPixelSpacing || image.columnPixelSpacing;\n    const ySpacing = imagePlaneModule.rowPixelSpacing || image.rowPixelSpacing;\n    const xVoxels = image.columns;\n    const yVoxels = image.rows;\n    const zSpacing = EPSILON;\n    const zVoxels = 1;\n    const numberOfComponents = image.numberOfComponents ||\n        _getNumCompsFromPhotometricInterpretation(imagePixelModule.photometricInterpretation);\n    return {\n        numberOfComponents,\n        origin,\n        direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n        dimensions: [xVoxels, yVoxels, zVoxels],\n        spacing: [xSpacing, ySpacing, zSpacing],\n        numVoxels: xVoxels * yVoxels * zVoxels,\n        imagePlaneModule,\n        imagePixelModule,\n        bitsAllocated: imagePixelModule.bitsAllocated,\n        voiLUTFunction,\n        modality,\n        scalingFactor,\n        calibration,\n        scanAxisNormal: scanAxisNormal,\n    };\n}\nfunction _getNumCompsFromPhotometricInterpretation(photometricInterpretation) {\n    let numberOfComponents = 1;\n    if (photometricInterpretation === 'RGB' ||\n        photometricInterpretation.includes('YBR') ||\n        photometricInterpretation === 'PALETTE COLOR') {\n        numberOfComponents = 3;\n    }\n    return numberOfComponents;\n}\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getImageSliceDataForVolumeViewport(viewport) {\n    const camera = viewport.getCamera();\n    const { spacingInNormalDirection, imageVolume } = getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n    if (!imageVolume) {\n        return;\n    }\n    const { viewPlaneNormal, focalPoint } = camera;\n    const actorEntry = viewport\n        .getActors()\n        .find((a) => a.referencedId === imageVolume.volumeId ||\n        a.uid === imageVolume.volumeId);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', imageVolume.volumeId);\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    const { min, max, current } = sliceRange;\n    const numberOfSlices = Math.round((max - min) / spacingInNormalDirection) + 1;\n    let imageIndex = ((current - min) / (max - min)) * numberOfSlices;\n    imageIndex = Math.floor(imageIndex);\n    if (imageIndex > numberOfSlices - 1) {\n        imageIndex = numberOfSlices - 1;\n    }\n    else if (imageIndex < 0) {\n        imageIndex = 0;\n    }\n    return {\n        numberOfSlices,\n        imageIndex,\n    };\n}\nexport default getImageSliceDataForVolumeViewport;\n","import * as metaData from '../metaData';\nexport default function getScalingParameters(imageId) {\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope || 1,\n        rescaleIntercept: modalityLutModule.rescaleIntercept ?? 0,\n        modality,\n    };\n    const suvFactor = metaData.get('scalingModule', imageId) || {};\n    return {\n        ...scalingParameters,\n        ...(modality === 'PT' && {\n            suvbw: suvFactor.suvbw,\n            suvbsa: suvFactor.suvbsa,\n            suvlbm: suvFactor.suvlbm,\n        }),\n    };\n}\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport { EPSILON } from '../constants';\nconst SMALL_EPSILON = EPSILON * EPSILON;\nconst isOne = (v) => Math.abs(Math.abs(v) - 1) < SMALL_EPSILON;\nconst isUnit = (v, off) => isOne(v[off]) || isOne(v[off + 1]) || isOne(v[off + 2]);\nconst isOrthonormal = (v) => isUnit(v, 0) && isUnit(v, 3) && isUnit(v, 6);\nexport default function getSliceRange(volumeActor, viewPlaneNormal, focalPoint) {\n    const imageData = volumeActor.getMapper().getInputData();\n    let corners;\n    const direction = imageData.getDirection();\n    if (isOrthonormal(direction)) {\n        corners = getVolumeActorCorners(volumeActor);\n    }\n    else {\n        const [dx, dy, dz] = imageData.getDimensions();\n        const cornersIdx = [\n            [0, 0, 0],\n            [dx - 1, 0, 0],\n            [0, dy - 1, 0],\n            [dx - 1, dy - 1, 0],\n            [0, 0, dz - 1],\n            [dx - 1, 0, dz - 1],\n            [0, dy - 1, dz - 1],\n            [dx - 1, dy - 1, dz - 1],\n        ];\n        corners = cornersIdx.map((it) => imageData.indexToWorld(it));\n    }\n    const transform = vtkMatrixBuilder\n        .buildFromDegree()\n        .identity()\n        .rotateFromDirections(viewPlaneNormal, [1, 0, 0]);\n    corners.forEach((pt) => transform.apply(pt));\n    const transformedFocalPoint = [...focalPoint];\n    transform.apply(transformedFocalPoint);\n    const currentSlice = transformedFocalPoint[0];\n    let minX = Infinity;\n    let maxX = -Infinity;\n    for (let i = 0; i < 8; i++) {\n        const x = corners[i][0];\n        if (x > maxX) {\n            maxX = x;\n        }\n        if (x < minX) {\n            minX = x;\n        }\n    }\n    return {\n        min: minX,\n        max: maxX,\n        current: currentSlice,\n        actor: volumeActor,\n        viewPlaneNormal,\n        focalPoint,\n    };\n}\n","import { vec3 } from 'gl-matrix';\nexport default function getSpacingInNormalDirection(imageVolume, viewPlaneNormal) {\n    const { direction, spacing } = imageVolume;\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const dotProducts = [\n        vec3.dot(iVector, viewPlaneNormal),\n        vec3.dot(jVector, viewPlaneNormal),\n        vec3.dot(kVector, viewPlaneNormal),\n    ];\n    const projectedSpacing = vec3.create();\n    vec3.set(projectedSpacing, dotProducts[0] * spacing[0], dotProducts[1] * spacing[1], dotProducts[2] * spacing[2]);\n    const spacingInNormalDirection = vec3.length(projectedSpacing);\n    return spacingInNormalDirection;\n}\n","import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nimport { getVolumeId } from './getVolumeId';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = (volume) => !!getVolumeLoaderSchemes().find((scheme) => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetId, useSlabThickness = false) {\n    const { viewPlaneNormal } = camera;\n    const volumeActors = viewport.getActors();\n    if (!volumeActors.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const imageVolumes = volumeActors\n        .map((va) => {\n        const actorUID = va.referencedId ?? va.uid;\n        return cache.getVolume(actorUID);\n    })\n        .filter((iv) => !!iv);\n    if (targetId) {\n        const targetVolumeId = getVolumeId(targetId);\n        const imageVolumeIndex = imageVolumes.findIndex((iv) => targetVolumeId.includes(iv.volumeId));\n        const imageVolume = imageVolumes[imageVolumeIndex];\n        const { uid: actorUID } = volumeActors[imageVolumeIndex];\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n        return { imageVolume, spacingInNormalDirection, actorUID };\n    }\n    if (!imageVolumes.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const smallest = {\n        spacingInNormalDirection: Infinity,\n        imageVolume: null,\n        actorUID: null,\n    };\n    const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n    for (let i = 0; i < imageVolumes.length; i++) {\n        const imageVolume = imageVolumes[i];\n        if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n            continue;\n        }\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n        if (spacingInNormalDirection * EPSILON_PART <\n            smallest.spacingInNormalDirection) {\n            smallest.spacingInNormalDirection = spacingInNormalDirection;\n            smallest.imageVolume = imageVolume;\n            smallest.actorUID = volumeActors[i].uid;\n        }\n    }\n    return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n    const { slabThickness } = viewport.getProperties();\n    let spacingInNormalDirection = slabThickness;\n    if (!slabThickness || !useSlabThickness) {\n        spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n    }\n    return spacingInNormalDirection;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nfunction getViewportsWithVolumeId(volumeId) {\n    const renderingEngines = getRenderingEngines();\n    const targetViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getVolumeViewports();\n        const filteredViewports = viewports.filter((vp) => vp.hasVolumeId(volumeId));\n        targetViewports.push(...filteredViewports);\n    });\n    return targetViewports;\n}\nexport default getViewportsWithVolumeId;\n","export default function getVoiFromSigmoidRGBTransferFunction(cfun) {\n    let cfunRange = [];\n    const [lower, upper] = cfun.getRange();\n    cfun.getTable(lower, upper, 1024, cfunRange);\n    cfunRange = cfunRange.filter((v, k) => k % 3 === 0);\n    const cfunDomain = [...Array(1024).keys()].map((v, k) => {\n        return lower + ((upper - lower) / (1024 - 1)) * k;\n    });\n    const y1 = cfunRange[256];\n    const logy1 = Math.log((1 - y1) / y1);\n    const x1 = cfunDomain[256];\n    const y2 = cfunRange[256 * 3];\n    const logy2 = Math.log((1 - y2) / y2);\n    const x2 = cfunDomain[256 * 3];\n    const ww = Math.round((4 * (x2 - x1)) / (logy1 - logy2));\n    const wc = Math.round(x1 + (ww * logy1) / 4);\n    return [Math.round(wc - ww / 2), Math.round(wc + ww / 2)];\n}\n","export default function getVolumeActorCorners(volumeActor) {\n    const imageData = volumeActor.getMapper().getInputData();\n    const bounds = imageData.extentToBounds(imageData.getExtent());\n    return [\n        [bounds[0], bounds[2], bounds[4]],\n        [bounds[0], bounds[2], bounds[5]],\n        [bounds[0], bounds[3], bounds[4]],\n        [bounds[0], bounds[3], bounds[5]],\n        [bounds[1], bounds[2], bounds[4]],\n        [bounds[1], bounds[2], bounds[5]],\n        [bounds[1], bounds[3], bounds[4]],\n        [bounds[1], bounds[3], bounds[5]],\n    ];\n}\n","export const getVolumeId = (targetId) => {\n    const prefix = 'volumeId:';\n    const str = targetId.includes(prefix)\n        ? targetId.substring(prefix.length)\n        : targetId;\n    const index = str.indexOf('sliceIndex=');\n    return index === -1 ? str : str.substring(0, index - 1);\n};\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness = false) {\n    const camera = viewport.getCamera();\n    const { focalPoint, viewPlaneNormal } = camera;\n    const { spacingInNormalDirection, actorUID } = getTargetVolumeAndSpacingInNormalDir(viewport, camera, volumeId, useSlabThickness);\n    if (!actorUID) {\n        throw new Error(`Could not find image volume with id ${volumeId} in the viewport`);\n    }\n    const actorEntry = viewport.getActor(actorUID);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', actorUID);\n        return null;\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    return {\n        sliceRange,\n        spacingInNormalDirection,\n        camera,\n    };\n}\nexport default getVolumeSliceRangeInfo;\n","import getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nfunction getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness = false) {\n    const { sliceRange, spacingInNormalDirection, camera } = getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness);\n    const { min, max, current } = sliceRange;\n    const numScrollSteps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * numScrollSteps;\n    const currentStepIndex = Math.round(floatingStepNumber);\n    return {\n        numScrollSteps,\n        currentStepIndex,\n        sliceRangeInfo: {\n            sliceRange,\n            spacingInNormalDirection,\n            camera,\n        },\n    };\n}\nexport default getVolumeViewportScrollInfo;\n","export const hasFloatScalingParameters = (scalingParameters) => {\n    const hasFloatRescale = Object.values(scalingParameters).some((value) => typeof value === 'number' && !Number.isInteger(value));\n    return hasFloatRescale;\n};\n","export default function hasNaNValues(input) {\n    if (Array.isArray(input)) {\n        return input.some((value) => Number.isNaN(value));\n    }\n    return Number.isNaN(input);\n}\n","export default function imageIdToURI(imageId) {\n    const colonIndex = imageId.indexOf(':');\n    return imageId.substring(colonIndex + 1);\n}\n","import { addProvider } from '../metaData';\nconst retrieveConfigurationState = new Map();\nconst IMAGE_RETRIEVE_CONFIGURATION = 'imageRetrieveConfiguration';\nconst imageRetrieveMetadataProvider = {\n    IMAGE_RETRIEVE_CONFIGURATION,\n    clear: () => {\n        retrieveConfigurationState.clear();\n    },\n    add: (key, payload) => {\n        retrieveConfigurationState.set(key, payload);\n    },\n    clone: () => {\n        return new Map(retrieveConfigurationState);\n    },\n    restore: (state) => {\n        retrieveConfigurationState.clear();\n        state.forEach((value, key) => {\n            retrieveConfigurationState.set(key, value);\n        });\n    },\n    get: (type, ...queries) => {\n        if (type === IMAGE_RETRIEVE_CONFIGURATION) {\n            return queries\n                .map((query) => retrieveConfigurationState.get(query))\n                .find((it) => it !== undefined);\n        }\n    },\n};\naddProvider(imageRetrieveMetadataProvider.get.bind(imageRetrieveMetadataProvider));\nexport default imageRetrieveMetadataProvider;\n","var EventListenerPhases;\n(function (EventListenerPhases) {\n    EventListenerPhases[EventListenerPhases[\"None\"] = 0] = \"None\";\n    EventListenerPhases[EventListenerPhases[\"Capture\"] = 1] = \"Capture\";\n    EventListenerPhases[EventListenerPhases[\"Bubble\"] = 2] = \"Bubble\";\n})(EventListenerPhases || (EventListenerPhases = {}));\nclass TargetEventListeners {\n    constructor(target) {\n        this._eventListeners = new Map();\n        this._children = new Map();\n        this._target = target;\n    }\n    get isEmpty() {\n        return this._eventListeners.size === 0 && this._children.size === 0;\n    }\n    addEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            let childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                childElementEventListener = new TargetEventListeners(this._target);\n                this._children.set(namespaceToken, childElementEventListener);\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.addEventListener(type, callback, options);\n        }\n        else {\n            this._addEventListener(type, callback, options);\n        }\n    }\n    removeEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            const childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                return;\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.removeEventListener(type, callback, options);\n            if (childElementEventListener.isEmpty) {\n                this._children.delete(namespaceToken);\n            }\n        }\n        else {\n            this._removeEventListener(type, callback, options);\n        }\n    }\n    reset() {\n        Array.from(this._children.entries()).forEach(([namespace, child]) => {\n            child.reset();\n            if (child.isEmpty) {\n                this._children.delete(namespace);\n            }\n            else {\n                throw new Error('Child is not empty and cannot be removed');\n            }\n        });\n        this._unregisterAllEvents();\n    }\n    _addEventListener(type, callback, options) {\n        let listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            listenersMap = new Map();\n            this._eventListeners.set(type, listenersMap);\n        }\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const registeredPhases = listenersMap.get(callback) ?? EventListenerPhases.None;\n        if (registeredPhases & listenerPhase) {\n            console.warn('A listener is already registered for this phase');\n            return;\n        }\n        listenersMap.set(callback, registeredPhases | listenerPhase);\n        this._target.addEventListener(type, callback, options);\n    }\n    _removeEventListener(type, callback, options) {\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            return;\n        }\n        const callbacks = callback ? [callback] : Array.from(listenersMap.keys());\n        callbacks.forEach((callbackItem) => {\n            const registeredPhases = listenersMap.get(callbackItem) ?? EventListenerPhases.None;\n            const phaseRegistered = !!(registeredPhases & listenerPhase);\n            if (!phaseRegistered) {\n                return;\n            }\n            this._target.removeEventListener(type, callbackItem, options);\n            const newListenerPhase = registeredPhases ^ listenerPhase;\n            if (newListenerPhase === EventListenerPhases.None) {\n                listenersMap.delete(callbackItem);\n            }\n            else {\n                listenersMap.set(callbackItem, newListenerPhase);\n            }\n        });\n        if (!listenersMap.size) {\n            this._eventListeners.delete(type);\n        }\n    }\n    _unregisterAllListeners(type, listenersMap) {\n        Array.from(listenersMap.entries()).forEach(([listener, eventPhases]) => {\n            const startPhase = EventListenerPhases.Capture;\n            for (let currentPhase = startPhase; eventPhases; currentPhase <<= 1) {\n                if (!(eventPhases & currentPhase)) {\n                    continue;\n                }\n                const useCapture = currentPhase === EventListenerPhases.Capture ? true : false;\n                this.removeEventListener(type, listener, { capture: useCapture });\n                eventPhases ^= currentPhase;\n            }\n        });\n    }\n    _unregisterAllEvents() {\n        Array.from(this._eventListeners.entries()).forEach(([type, listenersMap]) => {\n            this._unregisterAllListeners(type, listenersMap);\n        });\n    }\n}\nexport { TargetEventListeners as default, TargetEventListeners };\n","import TargetEventListeners from './TargetEventListeners';\nclass MultiTargetEventListenerManager {\n    constructor() {\n        this._targetsEventListeners = new Map();\n    }\n    addEventListener(target, type, callback, options) {\n        let eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            eventListeners = new TargetEventListeners(target);\n            this._targetsEventListeners.set(target, eventListeners);\n        }\n        eventListeners.addEventListener(type, callback, options);\n    }\n    removeEventListener(target, type, callback, options) {\n        const eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.removeEventListener(type, callback, options);\n        if (eventListeners.isEmpty) {\n            this._targetsEventListeners.delete(target);\n        }\n    }\n    reset() {\n        Array.from(this._targetsEventListeners.entries()).forEach(([target, targetEventListeners]) => {\n            targetEventListeners.reset();\n            this._targetsEventListeners.delete(target);\n        });\n    }\n}\nexport { MultiTargetEventListenerManager as default, MultiTargetEventListenerManager, };\n","export default function scaleRGBTransferFunction(rgbTransferFunction, scalingFactor) {\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = nodeValue1[1] * scalingFactor;\n        nodeValue1[2] = nodeValue1[2] * scalingFactor;\n        nodeValue1[3] = nodeValue1[3] * scalingFactor;\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","export default function getMinMax(storedPixelData) {\n    let min = storedPixelData[0];\n    let max = storedPixelData[0];\n    let storedPixel;\n    const numPixels = storedPixelData.length;\n    for (let index = 1; index < numPixels; index++) {\n        storedPixel = storedPixelData[index];\n        min = Math.min(min, storedPixel);\n        max = Math.max(max, storedPixel);\n    }\n    return {\n        min,\n        max,\n    };\n}\n","const LAST_RUNTIME_ID = Symbol('LastRuntimeId');\nconst GLOBAL_CONTEXT = {};\nconst DEFAULT_MAX = 0xffffffff;\nconst DEFAULT_SEPARATOR = '-';\nexport default function getRuntimeId(context, separator, max) {\n    return getNextRuntimeId(context !== null && typeof context === 'object' ? context : GLOBAL_CONTEXT, LAST_RUNTIME_ID, (typeof max === 'number' && max > 0 ? max : DEFAULT_MAX) >>> 0).join(typeof separator === 'string' ? separator : DEFAULT_SEPARATOR);\n}\nfunction getNextRuntimeId(context, symbol, max) {\n    let idComponents = context[symbol];\n    if (!(idComponents instanceof Array)) {\n        idComponents = [0];\n        Object.defineProperty(context, symbol, { value: idComponents });\n    }\n    for (let carry = true, i = 0; carry && i < idComponents.length; ++i) {\n        let n = idComponents[i] | 0;\n        if (n < max) {\n            carry = false;\n            n = n + 1;\n        }\n        else {\n            n = 0;\n            if (i + 1 === idComponents.length) {\n                idComponents.push(0);\n            }\n        }\n        idComponents[i] = n;\n    }\n    return idComponents;\n}\n","import imageIdToURI from './imageIdToURI';\nconst state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        const imageURI = imageIdToURI(imageId);\n        state[imageURI] = payload;\n    },\n    get: (type, imageId) => {\n        if (type === 'calibratedPixelSpacing') {\n            const imageURI = imageIdToURI(imageId);\n            return state[imageURI];\n        }\n    },\n};\nexport default metadataProvider;\n","export default function isOpposite(v1, v2, tolerance = 1e-5) {\n    return (Math.abs(v1[0] + v2[0]) < tolerance &&\n        Math.abs(v1[1] + v2[1]) < tolerance &&\n        Math.abs(v1[2] + v2[2]) < tolerance);\n}\n","export default function indexWithinDimensions(index, dimensions) {\n    if (index[0] < 0 ||\n        index[0] >= dimensions[0] ||\n        index[1] < 0 ||\n        index[1] >= dimensions[1] ||\n        index[2] < 0 ||\n        index[2] >= dimensions[2]) {\n        return false;\n    }\n    return true;\n}\n","import { getRenderingEngines, getRenderingEngine, } from '../RenderingEngine/getRenderingEngine';\nfunction getVolumeViewportsContainingSameVolumes(targetViewport, renderingEngineId) {\n    let renderingEngines;\n    if (renderingEngineId) {\n        renderingEngines = [getRenderingEngine(renderingEngineId)];\n    }\n    else {\n        renderingEngines = getRenderingEngines();\n    }\n    const sameVolumesViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const targetActors = targetViewport.getActors();\n        const viewports = renderingEngine.getVolumeViewports();\n        for (const vp of viewports) {\n            const vpActors = vp.getActors();\n            if (vpActors.length !== targetActors.length) {\n                continue;\n            }\n            const sameVolumes = targetActors.every(({ uid }) => vpActors.find((vpActor) => uid === vpActor.uid));\n            if (sameVolumes) {\n                sameVolumesViewports.push(vp);\n            }\n        }\n    });\n    return sameVolumesViewports;\n}\nexport default getVolumeViewportsContainingSameVolumes;\n","const isPTPrescaledWithSUV = (image) => {\n    return image.preScale.scaled && image.preScale.scalingParameters.suvbw;\n};\nexport default isPTPrescaledWithSUV;\n","import { vec3 } from 'gl-matrix';\nimport getOrCreateCanvas, { EPSILON, } from '../RenderingEngine/helpers/getOrCreateCanvas';\nimport { ViewportType, Events } from '../enums';\nimport { getRenderingEngine } from '../RenderingEngine/getRenderingEngine';\nimport RenderingEngine from '../RenderingEngine';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nexport default function renderToCanvasGPU(canvas, imageOrVolume, modality = undefined, renderingEngineId = '_thumbnails', viewportOptions = {\n    displayArea: { imageArea: [1, 1] },\n}) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n        throw new Error('canvas element is required');\n    }\n    const isVolume = !imageOrVolume.imageId;\n    const image = !isVolume && imageOrVolume;\n    const volume = isVolume && imageOrVolume;\n    const imageIdToPrint = image.imageId || volume.volumeId;\n    const viewportId = `renderGPUViewport-${imageIdToPrint}`;\n    const element = document.createElement('div');\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    if (!viewportOptions.displayArea) {\n        viewportOptions.displayArea = { imageArea: [1, 1] };\n    }\n    const originalWidth = canvas.width;\n    const originalHeight = canvas.height;\n    element.style.width = `${originalWidth / devicePixelRatio + EPSILON}px`;\n    element.style.height = `${originalHeight / devicePixelRatio + EPSILON}px`;\n    element.style.visibility = 'hidden';\n    element.style.position = 'absolute';\n    document.body.appendChild(element);\n    const uniqueId = viewportId.split(':').join('-');\n    element.setAttribute('viewport-id-for-remove', uniqueId);\n    const temporaryCanvas = getOrCreateCanvas(element);\n    const renderingEngine = getRenderingEngine(renderingEngineId) ||\n        new RenderingEngine(renderingEngineId);\n    let viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        const viewportInput = {\n            viewportId,\n            type: isVolume ? ViewportType.ORTHOGRAPHIC : ViewportType.STACK,\n            element,\n            defaultOptions: {\n                ...viewportOptions,\n                suppressEvents: true,\n            },\n        };\n        renderingEngine.enableElement(viewportInput);\n        viewport = renderingEngine.getViewport(viewportId);\n    }\n    return new Promise((resolve) => {\n        let elementRendered = false;\n        let { viewReference } = viewportOptions;\n        const onImageRendered = (eventDetail) => {\n            if (elementRendered) {\n                return;\n            }\n            if (viewReference) {\n                const useViewRef = viewReference;\n                viewReference = null;\n                viewport.setViewReference(useViewRef);\n                viewport.render();\n                return;\n            }\n            const context = canvas.getContext('2d');\n            context.drawImage(temporaryCanvas, 0, 0, temporaryCanvas.width, temporaryCanvas.height, 0, 0, canvas.width, canvas.height);\n            const origin = viewport.canvasToWorld([0, 0]);\n            const topRight = viewport.canvasToWorld([\n                temporaryCanvas.width / devicePixelRatio,\n                0,\n            ]);\n            const bottomLeft = viewport.canvasToWorld([\n                0,\n                temporaryCanvas.height / devicePixelRatio,\n            ]);\n            const rightVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([1 / devicePixelRatio, 0]), origin);\n            const downVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([0, 1 / devicePixelRatio]), origin);\n            const thicknessMm = 1;\n            elementRendered = true;\n            element.removeEventListener(Events.IMAGE_RENDERED, onImageRendered);\n            setTimeout(() => {\n                renderingEngine.disableElement(viewportId);\n                const elements = document.querySelectorAll(`[viewport-id-for-remove=\"${uniqueId}\"]`);\n                elements.forEach((element) => {\n                    element.remove();\n                });\n            }, 0);\n            resolve({\n                origin,\n                bottomLeft,\n                topRight,\n                thicknessMm,\n                rightVector,\n                downVector,\n            });\n        };\n        element.addEventListener(Events.IMAGE_RENDERED, onImageRendered);\n        if (isVolume) {\n            viewport.setVolumes([volume], false, true);\n        }\n        else {\n            viewport.renderImageObject(imageOrVolume);\n        }\n        viewport.resetCamera();\n        if (modality === 'PT' && !isPTPrescaledWithSUV(image)) {\n            viewport.setProperties({\n                voiRange: {\n                    lower: image.minPixelValue,\n                    upper: image.maxPixelValue,\n                },\n            });\n        }\n        viewport.render();\n    });\n}\n","import getDefaultViewport from '../RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport';\nimport calculateTransform from '../RenderingEngine/helpers/cpuFallback/rendering/calculateTransform';\nimport drawImageSync from '../RenderingEngine/helpers/cpuFallback/drawImageSync';\nexport default function renderToCanvasCPU(canvas, imageOrVolume, modality, _renderingEngineId, _viewportOptions) {\n    const volume = imageOrVolume;\n    if (volume.volumeId) {\n        throw new Error('Unsupported volume rendering for CPU');\n    }\n    const image = imageOrVolume;\n    const viewport = getDefaultViewport(canvas, image, modality);\n    const enabledElement = {\n        canvas,\n        viewport,\n        image,\n        renderingTools: {},\n    };\n    enabledElement.transform = calculateTransform(enabledElement);\n    const invalidated = true;\n    return new Promise((resolve, reject) => {\n        drawImageSync(enabledElement, invalidated);\n        resolve(null);\n    });\n}\n","import { loadAndCacheImage } from '../loaders/imageLoader';\nimport * as metaData from '../metaData';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport cache from '../cache/cache';\nexport default function loadImageToCanvas(options) {\n    const { canvas, imageId, viewReference, requestType = RequestType.Thumbnail, priority = -5, renderingEngineId = '_thumbnails', useCPURendering = false, thumbnail = false, imageAspect = false, viewportOptions: baseViewportOptions, } = options;\n    const volumeId = viewReference?.volumeId;\n    const isVolume = volumeId && !imageId;\n    const viewportOptions = viewReference && baseViewportOptions\n        ? { ...baseViewportOptions, viewReference }\n        : baseViewportOptions;\n    const renderFn = useCPURendering ? renderToCanvasCPU : renderToCanvasGPU;\n    return new Promise((resolve, reject) => {\n        function successCallback(imageOrVolume, imageId) {\n            const { modality } = metaData.get('generalSeriesModule', imageId) || {};\n            const image = !isVolume && imageOrVolume;\n            const volume = isVolume && imageOrVolume;\n            if (image) {\n                image.isPreScaled = image.isPreScaled || image.preScale?.scaled;\n            }\n            if (thumbnail) {\n                canvas.height = 256;\n                canvas.width = 256;\n            }\n            if (imageAspect && image) {\n                canvas.width = image && (canvas.height * image.width) / image.height;\n            }\n            canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n            canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n            if (volume && useCPURendering) {\n                reject(new Error('CPU rendering of volume not supported'));\n            }\n            renderFn(canvas, imageOrVolume, modality, renderingEngineId, viewportOptions).then(resolve);\n        }\n        function errorCallback(error, imageId) {\n            console.error(error, imageId);\n            reject(error);\n        }\n        function sendRequest(imageId, imageIdIndex, options) {\n            return loadAndCacheImage(imageId, options).then((image) => {\n                successCallback.call(this, image, imageId);\n            }, (error) => {\n                errorCallback.call(this, error, imageId);\n            });\n        }\n        const options = {\n            useRGBA: !!useCPURendering,\n            requestType,\n        };\n        if (volumeId) {\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                reject(new Error(`Volume id ${volumeId} not found in cache`));\n            }\n            const useImageId = volume.imageIds[0];\n            successCallback(volume, useImageId);\n        }\n        else {\n            imageLoadPoolManager.addRequest(sendRequest.bind(null, imageId, null, options), requestType, { imageId }, priority);\n        }\n    });\n}\n","import eventTarget from '../../eventTarget';\nconst Events = {\n    HISTORY_UNDO: 'CORNERSTONE_TOOLS_HISTORY_UNDO',\n    HISTORY_REDO: 'CORNERSTONE_TOOLS_HISTORY_REDO',\n};\nexport class HistoryMemo {\n    constructor(label = 'Tools', size = 50) {\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n        this.ring = new Array();\n        this.label = label;\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(newSize) {\n        this.ring = new Array(newSize);\n        this._size = newSize;\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n    }\n    undo(items = 1) {\n        while (items > 0 && this.undoAvailable > 0) {\n            const item = this.ring[this.position];\n            item.restoreMemo(true);\n            if (item.id) {\n                eventTarget.dispatchEvent(new CustomEvent(Events.HISTORY_UNDO, {\n                    detail: {\n                        isUndo: true,\n                        id: item.id,\n                        operationType: item.operationType || 'annotation',\n                        memo: item,\n                    },\n                }));\n            }\n            items--;\n            this.redoAvailable++;\n            this.undoAvailable--;\n            this.position = (this.position - 1 + this.size) % this.size;\n        }\n    }\n    undoIf(condition) {\n        if (this.undoAvailable > 0 && condition(this.ring[this.position])) {\n            this.undo();\n            return true;\n        }\n        return false;\n    }\n    redo(items = 1) {\n        while (items > 0 && this.redoAvailable > 0) {\n            const newPosition = (this.position + 1) % this.size;\n            const item = this.ring[newPosition];\n            item.restoreMemo(false);\n            if (item.id) {\n                eventTarget.dispatchEvent(new CustomEvent(Events.HISTORY_REDO, {\n                    detail: {\n                        isUndo: false,\n                        id: item.id,\n                        operationType: item.operationType || 'annotation',\n                        memo: item,\n                    },\n                }));\n            }\n            items--;\n            this.position = newPosition;\n            this.undoAvailable++;\n            this.redoAvailable--;\n        }\n    }\n    push(item) {\n        if (!item) {\n            return;\n        }\n        const memo = item.restoreMemo\n            ? item\n            : item.createMemo?.();\n        if (!memo) {\n            return;\n        }\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = memo;\n        return memo;\n    }\n}\nconst DefaultHistoryMemo = new HistoryMemo();\nexport { DefaultHistoryMemo };\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nfunction worldToImageCoords(imageId, worldCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const newOrigin = vec3.create();\n    vec3.scaleAndAdd(newOrigin, origin, columnCosines, -columnPixelSpacing / 2);\n    vec3.scaleAndAdd(newOrigin, newOrigin, rowCosines, -rowPixelSpacing / 2);\n    const sub = vec3.create();\n    vec3.sub(sub, worldCoords, newOrigin);\n    const rowDistance = vec3.dot(sub, rowCosines);\n    const columnDistance = vec3.dot(sub, columnCosines);\n    const imageCoords = [\n        rowDistance / rowPixelSpacing,\n        columnDistance / columnPixelSpacing,\n    ];\n    return imageCoords;\n}\nexport default worldToImageCoords;\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nexport default function imageToWorldCoords(imageId, imageCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const imageCoordsInWorld = vec3.create();\n    vec3.scaleAndAdd(imageCoordsInWorld, origin, rowCosines, rowPixelSpacing * (imageCoords[0] - 0.5));\n    vec3.scaleAndAdd(imageCoordsInWorld, imageCoordsInWorld, columnCosines, columnPixelSpacing * (imageCoords[1] - 0.5));\n    return Array.from(imageCoordsInWorld);\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nexport default function getViewportsWithImageURI(imageURI) {\n    const renderingEngines = getRenderingEngines();\n    const viewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewportsForRenderingEngine = renderingEngine.getViewports();\n        viewportsForRenderingEngine.forEach((viewport) => {\n            if (viewport.hasImageURI(imageURI)) {\n                viewports.push(viewport);\n            }\n        });\n    });\n    return viewports;\n}\n","import { vec3 } from 'gl-matrix';\nimport * as planar from './planar';\nimport * as metaData from '../metaData';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n    const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n    return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n    const imageIds = viewport.getImageIds();\n    const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n    if (imageIds.length === 0) {\n        return null;\n    }\n    const getDistance = (imageId) => {\n        const planeMetadata = getPlaneMetadata(imageId);\n        if (!planeMetadata) {\n            return null;\n        }\n        const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n        const distance = planar.planeDistanceToPoint(plane, point);\n        return distance;\n    };\n    const closestStack = {\n        distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n        index: currentImageIdIndex,\n    };\n    const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n    for (let i = 0; i < higherImageIds.length; i++) {\n        const id = higherImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null) {\n            continue;\n        }\n        if (distance <= closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i + currentImageIdIndex + 1;\n        }\n        else {\n            break;\n        }\n    }\n    const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n    for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n        const id = lowerImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null || distance === closestStack.distance) {\n            continue;\n        }\n        if (distance < closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i;\n        }\n        else {\n            break;\n        }\n    }\n    return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n    const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n    if (!targetImagePlane ||\n        !(targetImagePlane.rowCosines instanceof Array &&\n            targetImagePlane.rowCosines.length === 3) ||\n        !(targetImagePlane.columnCosines instanceof Array &&\n            targetImagePlane.columnCosines.length === 3) ||\n        !(targetImagePlane.imagePositionPatient instanceof Array &&\n            targetImagePlane.imagePositionPatient.length === 3)) {\n        return null;\n    }\n    const { rowCosines, columnCosines, imagePositionPatient, } = targetImagePlane;\n    const rowVec = vec3.set(vec3.create(), ...rowCosines);\n    const colVec = vec3.set(vec3.create(), ...columnCosines);\n    const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n    return { rowCosines, columnCosines, imagePositionPatient, planeNormal };\n}\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n    const { width: canvasWidth, height: canvasHeight } = viewport.getCanvas();\n    const { sliceToIndexMatrix, indexToSliceMatrix } = viewport.getSliceViewInfo();\n    const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n    const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n    const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n    const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n    const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n    const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n    vec3.normalize(ijkRowVec, ijkRowVec);\n    vec3.normalize(ijkColVec, ijkColVec);\n    vec3.normalize(ijkSliceVec, ijkSliceVec);\n    const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n    const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n    if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n        throw new Error('Livewire is not available for rotate/oblique viewports');\n    }\n    const { voxelManager } = viewport.getImageData();\n    const sliceViewInfo = viewport.getSliceViewInfo();\n    const scalarData = voxelManager.getSliceData(sliceViewInfo);\n    return {\n        width: sliceViewInfo.width,\n        height: sliceViewInfo.height,\n        scalarData,\n        sliceToIndexMatrix,\n        indexToSliceMatrix,\n    };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice, };\n","import { mat4 } from 'gl-matrix';\nimport { addProvider } from '../metaData';\nconst state = {};\nconst spatialRegistrationMetadataProvider = {\n    add: (query, payload) => {\n        const [viewportId1, viewportId2] = query;\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (!state[entryId]) {\n            state[entryId] = {};\n        }\n        state[entryId] = payload;\n    },\n    get: (type, viewportId1, viewportId2) => {\n        if (type !== 'spatialRegistrationModule') {\n            return;\n        }\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (state[entryId]) {\n            return state[entryId];\n        }\n        const entryIdReverse = `${viewportId2}_${viewportId1}`;\n        if (state[entryIdReverse]) {\n            return mat4.invert(mat4.create(), state[entryIdReverse]);\n        }\n    },\n};\naddProvider(spatialRegistrationMetadataProvider.get.bind(spatialRegistrationMetadataProvider));\nexport default spatialRegistrationMetadataProvider;\n","import { vec3, mat4 } from 'gl-matrix';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport { get } from '../metaData';\nconst ALLOWED_DELTA = 0.05;\nfunction calculateViewportsSpatialRegistration(viewport1, viewport2) {\n    const imageId1 = viewport1.getSliceIndex();\n    const imageId2 = viewport2.getSliceIndex();\n    const imagePlaneModule1 = get('imagePlaneModule', imageId1.toString());\n    const imagePlaneModule2 = get('imagePlaneModule', imageId2.toString());\n    if (!imagePlaneModule1 || !imagePlaneModule2) {\n        console.log('Viewport spatial registration requires image plane module');\n        return;\n    }\n    const { imageOrientationPatient: iop2 } = imagePlaneModule2;\n    const isSameImagePlane = imagePlaneModule1.imageOrientationPatient.every((v, i) => Math.abs(v - iop2[i]) < ALLOWED_DELTA);\n    if (!isSameImagePlane) {\n        console.log('Viewport spatial registration only supported for same orientation (hence translation only) for now', imagePlaneModule1?.imageOrientationPatient, imagePlaneModule2?.imageOrientationPatient);\n        return;\n    }\n    const imagePositionPatient1 = imagePlaneModule1.imagePositionPatient;\n    const imagePositionPatient2 = imagePlaneModule2.imagePositionPatient;\n    const translation = vec3.subtract(vec3.create(), imagePositionPatient1, imagePositionPatient2);\n    const mat = mat4.fromTranslation(mat4.create(), translation);\n    spatialRegistrationMetadataProvider.add([viewport1.id, viewport2.id], mat);\n}\nexport default calculateViewportsSpatialRegistration;\n","export default function getViewportImageCornersInWorld(viewport) {\n    const { imageData, dimensions } = viewport.getImageData() || {};\n    if (!imageData || !dimensions) {\n        return [];\n    }\n    const { canvas } = viewport;\n    const ratio = window.devicePixelRatio;\n    const topLeftCanvas = [0, 0];\n    const topRightCanvas = [canvas.width / ratio, 0];\n    const bottomRightCanvas = [\n        canvas.width / ratio,\n        canvas.height / ratio,\n    ];\n    const bottomLeftCanvas = [0, canvas.height / ratio];\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const topRightWorld = viewport.canvasToWorld(topRightCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const bottomLeftWorld = viewport.canvasToWorld(bottomLeftCanvas);\n    const topLeftImage = imageData.worldToIndex(topLeftWorld);\n    const topRightImage = imageData.worldToIndex(topRightWorld);\n    const bottomRightImage = imageData.worldToIndex(bottomRightWorld);\n    const bottomLeftImage = imageData.worldToIndex(bottomLeftWorld);\n    return _getStackViewportImageCorners({\n        dimensions,\n        imageData,\n        topLeftImage,\n        topRightImage,\n        bottomRightImage,\n        bottomLeftImage,\n        topLeftWorld,\n        topRightWorld,\n        bottomRightWorld,\n        bottomLeftWorld,\n    });\n}\nfunction _getStackViewportImageCorners({ dimensions, imageData, topLeftImage, topRightImage, bottomRightImage, bottomLeftImage, topLeftWorld, topRightWorld, bottomRightWorld, bottomLeftWorld, }) {\n    const topLeftImageWorld = _isInBounds(topLeftImage, dimensions)\n        ? topLeftWorld\n        : imageData.indexToWorld([0, 0, 0]);\n    const topRightImageWorld = _isInBounds(topRightImage, dimensions)\n        ? topRightWorld\n        : imageData.indexToWorld([dimensions[0] - 1, 0, 0]);\n    const bottomRightImageWorld = _isInBounds(bottomRightImage, dimensions)\n        ? bottomRightWorld\n        : imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n        ]);\n    const bottomLeftImageWorld = _isInBounds(bottomLeftImage, dimensions)\n        ? bottomLeftWorld\n        : imageData.indexToWorld([0, dimensions[1] - 1, 0]);\n    return [\n        topLeftImageWorld,\n        topRightImageWorld,\n        bottomLeftImageWorld,\n        bottomRightImageWorld,\n    ];\n}\nfunction _isInBounds(imageCoord, dimensions) {\n    return (imageCoord[0] > 0 ||\n        imageCoord[0] < dimensions[0] - 1 ||\n        imageCoord[1] > 0 ||\n        imageCoord[1] < dimensions[1] - 1 ||\n        imageCoord[2] > 0 ||\n        imageCoord[2] < dimensions[2] - 1);\n}\n","import StackViewport from '../RenderingEngine/StackViewport';\nimport getEnabledElement from '../getEnabledElement';\nfunction getImageLegacy(element) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof StackViewport)) {\n        throw new Error(`An image can only be fetched for a stack viewport and not for a viewport of type: ${viewport.type}`);\n    }\n    return viewport.getCornerstoneImage();\n}\nexport default getImageLegacy;\n","import * as metaData from '../metaData';\nimport isEqual from './isEqual';\nfunction isValidVolume(imageIds) {\n    if (imageIds.length <= 1) {\n        return false;\n    }\n    const imageId0 = imageIds[0];\n    const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, usingDefaultValues, } = metaData.get('imagePlaneModule', imageId0);\n    if (usingDefaultValues) {\n        return false;\n    }\n    const baseMetadata = {\n        modality,\n        imageOrientationPatient,\n        pixelSpacing,\n        frameOfReferenceUID,\n        columns,\n        rows,\n        seriesInstanceUID,\n    };\n    let validVolume = true;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId);\n        const { imageOrientationPatient, pixelSpacing, columns, rows } = metaData.get('imagePlaneModule', imageId);\n        if (seriesInstanceUID !== baseMetadata.seriesInstanceUID) {\n            validVolume = false;\n            break;\n        }\n        if (modality !== baseMetadata.modality) {\n            validVolume = false;\n            break;\n        }\n        if (columns !== baseMetadata.columns) {\n            validVolume = false;\n            break;\n        }\n        if (rows !== baseMetadata.rows) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(imageOrientationPatient, baseMetadata.imageOrientationPatient)) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(pixelSpacing, baseMetadata.pixelSpacing)) {\n            validVolume = false;\n            break;\n        }\n    }\n    return validVolume;\n}\nexport { isValidVolume };\n","export const videoUIDs = new Set([\n    '1.2.840.10008.1.2.4.100',\n    '1.2.840.10008.1.2.4.100.1',\n    '1.2.840.10008.1.2.4.101',\n    '1.2.840.10008.1.2.4.101.1',\n    '1.2.840.10008.1.2.4.102',\n    '1.2.840.10008.1.2.4.102.1',\n    '1.2.840.10008.1.2.4.103',\n    '1.2.840.10008.1.2.4.103.1',\n    '1.2.840.10008.1.2.4.104',\n    '1.2.840.10008.1.2.4.104.1',\n    '1.2.840.10008.1.2.4.105',\n    '1.2.840.10008.1.2.4.105.1',\n    '1.2.840.10008.1.2.4.106',\n    '1.2.840.10008.1.2.4.106.1',\n    '1.2.840.10008.1.2.4.107',\n    '1.2.840.10008.1.2.4.108',\n]);\nexport default function isVideoTransferSyntax(uidOrUids) {\n    if (!uidOrUids) {\n        return false;\n    }\n    const uids = Array.isArray(uidOrUids) ? uidOrUids : [uidOrUids];\n    return uids.find((uid) => videoUIDs.has(uid));\n}\n","import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema, } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nimport uuidv4 from './uuidv4';\nasync function convertStackToVolumeViewport({ viewport, options = {}, }) {\n    const renderingEngine = viewport.getRenderingEngine();\n    let volumeId = options.volumeId || `${uuidv4()}`;\n    if (volumeId.split(':').length === 0) {\n        const schema = getUnknownVolumeLoaderSchema();\n        volumeId = `${schema}:${volumeId}`;\n    }\n    const { id, element } = viewport;\n    const viewportId = options.viewportId || id;\n    const imageIds = viewport.getImageIds();\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    renderingEngine.enableElement({\n        viewportId,\n        type: ViewportType.ORTHOGRAPHIC,\n        element,\n        defaultOptions: {\n            background: options.background,\n            orientation: options.orientation,\n        },\n    });\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    volume.load();\n    const volumeViewport = renderingEngine.getViewport(viewportId);\n    await setVolumesForViewports(renderingEngine, [\n        {\n            volumeId,\n        },\n    ], [viewportId]);\n    const volumeViewportNewVolumeHandler = () => {\n        volumeViewport.render();\n        element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    const addVolumeViewportNewVolumeListener = () => {\n        element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    addVolumeViewportNewVolumeListener();\n    volumeViewport.setViewPresentation(prevViewPresentation);\n    volumeViewport.setViewReference(prevViewReference);\n    volumeViewport.render();\n    return volumeViewport;\n}\nexport { convertStackToVolumeViewport };\n","import cache from '../cache/cache';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({ viewport, options, }) {\n    const volumeViewport = viewport;\n    const { id, element } = volumeViewport;\n    const renderingEngine = viewport.getRenderingEngine();\n    const { background } = options;\n    const viewportId = options.viewportId || id;\n    const volume = cache.getVolume(volumeViewport.getVolumeId());\n    if (!(volume instanceof ImageVolume)) {\n        throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n    }\n    const viewportInput = {\n        viewportId,\n        type: ViewportType.STACK,\n        element,\n        defaultOptions: {\n            background,\n        },\n    };\n    const prevView = volumeViewport.getViewReference();\n    renderingEngine.enableElement(viewportInput);\n    const stackViewport = renderingEngine.getViewport(viewportId);\n    await stackViewport.setStack(volume.imageIds);\n    stackViewport.setViewReference(prevView);\n    stackViewport.render();\n    return stackViewport;\n}\nexport { convertVolumeToStackViewport };\n","import { EPSILON } from '../constants';\nfunction roundNumber(value, precision = 2) {\n    if (Array.isArray(value)) {\n        return value.map((v) => roundNumber(v, precision)).join(', ');\n    }\n    if (value === undefined || value === null || value === '') {\n        return 'NaN';\n    }\n    value = Number(value);\n    const absValue = Math.abs(value);\n    if (absValue < 0.0001) {\n        return `${value}`;\n    }\n    const fixedPrecision = absValue >= 100\n        ? precision - 2\n        : absValue >= 10\n            ? precision - 1\n            : absValue >= 1\n                ? precision\n                : absValue >= 0.1\n                    ? precision + 1\n                    : absValue >= 0.01\n                        ? precision + 2\n                        : absValue >= 0.001\n                            ? precision + 3\n                            : precision + 4;\n    return value.toFixed(fixedPrecision);\n}\nfunction roundToPrecision(value) {\n    return Math.round(value / EPSILON) * EPSILON;\n}\nexport { roundToPrecision };\nexport default roundNumber;\n","export default function convertToGrayscale(scalarData, width, height) {\n    const isRGBA = scalarData.length === width * height * 4;\n    const isRGB = scalarData.length === width * height * 3;\n    if (isRGBA || isRGB) {\n        const newScalarData = new Float32Array(width * height);\n        let offset = 0;\n        let destOffset = 0;\n        const increment = isRGBA ? 4 : 3;\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const r = scalarData[offset];\n                const g = scalarData[offset + 1];\n                const b = scalarData[offset + 2];\n                newScalarData[destOffset] = (r + g + b) / 3;\n                offset += increment;\n                destOffset++;\n            }\n        }\n        return newScalarData;\n    }\n    else {\n        return scalarData;\n    }\n}\n","import { VolumeViewport } from '../RenderingEngine';\nimport cache from '../cache/cache';\nfunction getViewportImageIds(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        const volume = cache.getVolume(viewport.getVolumeId());\n        return volume.imageIds;\n    }\n    else if (viewport.getImageIds) {\n        return viewport.getImageIds();\n    }\n}\nexport default getViewportImageIds;\n","export function getRandomSampleFromArray(array, size) {\n    const clonedArray = [...array];\n    if (size >= clonedArray.length) {\n        shuffleArray(clonedArray);\n        return clonedArray;\n    }\n    shuffleArray(clonedArray);\n    return clonedArray.slice(0, size);\n}\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n","function componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\nexport { hexToRgb, rgbToHex };\n","export function deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    try {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    catch (error) {\n        console.debug('Error in JSON.stringify during deep comparison:', error);\n        return obj1 === obj2;\n    }\n}\n","import * as metaData from '../metaData';\nconst groupBy = (array, key) => {\n    return array.reduce((rv, x) => {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\nfunction getIPPGroups(imageIds) {\n    const ippMetadata = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId) || {};\n        return { imageId, imagePositionPatient };\n    });\n    if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n        return null;\n    }\n    const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n    const positions = Object.keys(positionGroups);\n    const frame_count = positionGroups[positions[0]].length;\n    if (frame_count === 1) {\n        return null;\n    }\n    const frame_count_equal = positions.every((k) => positionGroups[k].length === frame_count);\n    if (!frame_count_equal) {\n        return null;\n    }\n    return positionGroups;\n}\nfunction test4DTag(IPPGroups, value_getter) {\n    const frame_groups = {};\n    let first_frame_value_set = [];\n    const positions = Object.keys(IPPGroups);\n    for (let i = 0; i < positions.length; i++) {\n        const frame_value_set = new Set();\n        const frames = IPPGroups[positions[i]];\n        for (let j = 0; j < frames.length; j++) {\n            const frame_value = value_getter(frames[j].imageId) || 0;\n            frame_groups[frame_value] = frame_groups[frame_value] || [];\n            frame_groups[frame_value].push({ imageId: frames[j].imageId });\n            frame_value_set.add(frame_value);\n            if (frame_value_set.size - 1 < j) {\n                return undefined;\n            }\n        }\n        if (i == 0) {\n            first_frame_value_set = Array.from(frame_value_set);\n        }\n        else if (!setEquals(first_frame_value_set, frame_value_set)) {\n            return undefined;\n        }\n    }\n    return frame_groups;\n}\nfunction getTagValue(imageId, tag) {\n    const value = metaData.get(tag, imageId);\n    try {\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getPhilipsPrivateBValue(imageId) {\n    const value = metaData.get('20011003', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            const value_bytes = atob(InlineBinary);\n            const ary_buf = new ArrayBuffer(value_bytes.length);\n            const dv = new DataView(ary_buf);\n            for (let i = 0; i < value_bytes.length; i++) {\n                dv.setUint8(i, value_bytes.charCodeAt(i));\n            }\n            return new Float32Array(ary_buf)[0];\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getSiemensPrivateBValue(imageId) {\n    let value = metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary);\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getGEPrivateBValue(imageId) {\n    let value = metaData.get('00431039', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary).split('//');\n        }\n        return parseFloat(value[0]) % 100000;\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction setEquals(set_a, set_b) {\n    if (set_a.length != set_b.size) {\n        return false;\n    }\n    for (let i = 0; i < set_a.length; i++) {\n        if (!set_b.has(set_a[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getPetFrameReferenceTime(imageId) {\n    const moduleInfo = metaData.get('petImageModule', imageId);\n    return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\nfunction splitImageIdsBy4DTags(imageIds) {\n    const positionGroups = getIPPGroups(imageIds);\n    if (!positionGroups) {\n        return { imageIdGroups: [imageIds], splittingTag: null };\n    }\n    const tags = [\n        'TemporalPositionIdentifier',\n        'DiffusionBValue',\n        'TriggerTime',\n        'EchoTime',\n        'EchoNumber',\n        'PhilipsPrivateBValue',\n        'SiemensPrivateBValue',\n        'GEPrivateBValue',\n        'PetFrameReferenceTime',\n    ];\n    const fncList2 = [\n        (imageId) => getTagValue(imageId, tags[0]),\n        (imageId) => getTagValue(imageId, tags[1]),\n        (imageId) => getTagValue(imageId, tags[2]),\n        (imageId) => getTagValue(imageId, tags[3]),\n        (imageId) => getTagValue(imageId, tags[4]),\n        getPhilipsPrivateBValue,\n        getSiemensPrivateBValue,\n        getGEPrivateBValue,\n        getPetFrameReferenceTime,\n    ];\n    for (let i = 0; i < fncList2.length; i++) {\n        const frame_groups = test4DTag(positionGroups, fncList2[i]);\n        if (frame_groups) {\n            const sortedKeys = Object.keys(frame_groups)\n                .map(Number.parseFloat)\n                .sort((a, b) => a - b);\n            const imageIdGroups = sortedKeys.map((key) => frame_groups[key].map((item) => item.imageId));\n            return { imageIdGroups, splittingTag: tags[i] };\n        }\n    }\n    return { imageIdGroups: [imageIds], splittingTag: null };\n}\nexport default splitImageIdsBy4DTags;\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nfunction getDynamicVolumeInfo(imageIds) {\n    const { imageIdGroups: timePoints, splittingTag } = splitImageIdsBy4DTags(imageIds);\n    const isDynamicVolume = timePoints.length > 1;\n    return { isDynamicVolume, timePoints, splittingTag };\n}\nexport default getDynamicVolumeInfo;\n","export default function scaleArray(array, scalingParameters) {\n    const arrayLength = array.length;\n    const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n    if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n        }\n    }\n    else {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = array[i] * rescaleSlope + rescaleIntercept;\n        }\n    }\n    return array;\n}\n","export function clip(val, low, high) {\n    return Math.min(Math.max(low, val), high);\n}\nexport function clipToBox(point, box) {\n    point.x = clip(point.x, 0, box.width);\n    point.y = clip(point.y, 0, box.height);\n}\nexport default clip;\n","import { Events } from '../enums';\nimport { StackViewport, VolumeViewport } from '../RenderingEngine';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getEnabledElement from '../getEnabledElement';\nimport triggerEvent from './triggerEvent';\nimport eventTarget from '../eventTarget';\nexport default function scroll(viewport, options) {\n    const enabledElement = getEnabledElement(viewport.element);\n    if (!enabledElement) {\n        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n    }\n    if (viewport instanceof StackViewport &&\n        viewport.getImageIds().length === 0) {\n        throw new Error('Scroll::Stack Viewport has no images');\n    }\n    const { volumeId, delta, scrollSlabs } = options;\n    if (viewport instanceof VolumeViewport) {\n        scrollVolume(viewport, volumeId, delta, scrollSlabs);\n    }\n    else {\n        const imageIdIndex = viewport.getCurrentImageIdIndex();\n        if (imageIdIndex + delta >\n            viewport.getImageIds().length - 1 ||\n            imageIdIndex + delta < 0) {\n            const eventData = {\n                imageIdIndex,\n                direction: delta,\n            };\n            triggerEvent(eventTarget, Events.STACK_SCROLL_OUT_OF_BOUNDS, eventData);\n        }\n        viewport.scroll(delta, options.debounceLoading, options.loop);\n    }\n}\nexport function scrollVolume(viewport, volumeId, delta, scrollSlabs = false) {\n    const useSlabThickness = scrollSlabs;\n    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n    if (!sliceRangeInfo) {\n        return;\n    }\n    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n    const { focalPoint, viewPlaneNormal, position } = camera;\n    const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n    viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n    });\n    viewport.render();\n    const desiredStepIndex = currentStepIndex + delta;\n    const VolumeScrollEventDetail = {\n        volumeId,\n        viewport,\n        delta,\n        desiredStepIndex,\n        currentStepIndex,\n        numScrollSteps,\n        currentImageId: viewport.getCurrentImageId(),\n    };\n    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n        viewport.getCurrentImageId()) {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);\n    }\n    else {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL, VolumeScrollEventDetail);\n    }\n}\n","import clip from './clip';\nimport scroll from './scroll';\nimport getEnabledElement from '../getEnabledElement';\nimport StackViewport from '../RenderingEngine/StackViewport';\nasync function jumpToSlice(element, options = {}) {\n    const { imageIndex, debounceLoading, volumeId } = options;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('Element has been disabled');\n    }\n    const { viewport } = enabledElement;\n    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);\n    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n    const delta = imageIndexToJump - currentImageIndex;\n    scroll(viewport, { delta, debounceLoading, volumeId });\n}\nfunction _getImageSliceData(viewport, debounceLoading) {\n    if (viewport instanceof StackViewport) {\n        return {\n            numberOfSlices: viewport.getImageIds().length,\n            imageIndex: debounceLoading\n                ? viewport.getTargetImageIdIndex()\n                : viewport.getCurrentImageIdIndex(),\n        };\n    }\n    return {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getSliceIndex(),\n    };\n}\nfunction _getImageIndexToJump(numberOfSlices, imageIndex) {\n    const lastSliceIndex = numberOfSlices - 1;\n    return clip(imageIndex, 0, lastSliceIndex);\n}\nexport { jumpToSlice };\n","import transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport uuidv4 from './uuidv4';\nimport { createLocalVolume } from '../loaders/volumeLoader';\nimport cache from '../cache/cache';\nfunction createSubVolume(referencedVolumeId, boundsIJK, options = {}) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    const { metadata, spacing, direction, dimensions: refVolumeDim, } = referencedVolume;\n    const { minX, maxX, minY, maxY, minZ, maxZ } = boundsIJK;\n    const ijkTopLeft = [\n        Math.min(minX, maxX),\n        Math.min(minY, maxY),\n        Math.min(minZ, maxZ),\n    ];\n    const boundingBoxOriginWorld = transformIndexToWorld(referencedVolume.imageData, ijkTopLeft);\n    const dimensions = [\n        Math.abs(maxX - minX) + 1,\n        Math.abs(maxY - minY) + 1,\n        Math.abs(maxZ - minZ) + 1,\n    ];\n    const { targetBuffer } = options;\n    const subVolumeOptions = {\n        metadata,\n        dimensions,\n        spacing,\n        origin: boundingBoxOriginWorld,\n        direction,\n        targetBuffer,\n        scalarData: targetBuffer?.type === 'Float32Array'\n            ? new Float32Array(dimensions[0] * dimensions[1] * dimensions[2])\n            : undefined,\n    };\n    const subVolume = createLocalVolume(uuidv4(), subVolumeOptions);\n    const subVolumeData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const subVolumeSliceSize = dimensions[0] * dimensions[1];\n    const refVolumeSliceSize = refVolumeDim[0] * refVolumeDim[1];\n    const refVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    for (let z = 0; z < dimensions[2]; z++) {\n        for (let y = 0; y < dimensions[1]; y++) {\n            const rowStartWorld = transformIndexToWorld(subVolume.imageData, [\n                0,\n                y,\n                z,\n            ]);\n            const refVolumeRowStartIJK = transformWorldToIndex(referencedVolume.imageData, rowStartWorld);\n            const refVolumeRowStartOffset = refVolumeRowStartIJK[2] * refVolumeSliceSize +\n                refVolumeRowStartIJK[1] * refVolumeDim[0] +\n                refVolumeRowStartIJK[0];\n            const rowData = refVolumeData.slice(refVolumeRowStartOffset, refVolumeRowStartOffset + dimensions[0]);\n            const subVolumeLineStartOffset = z * subVolumeSliceSize + y * dimensions[0];\n            subVolumeData.set(rowData, subVolumeLineStartOffset);\n        }\n    }\n    subVolume.voxelManager.setCompleteScalarDataArray(subVolumeData);\n    return subVolume;\n}\nexport { createSubVolume as default, createSubVolume };\n","import { vec3 } from 'gl-matrix';\nimport { transformWorldToIndexContinuous } from './transformWorldToIndex';\nfunction getVolumeDirectionVectors(imageData, camera) {\n    const { viewUp, viewPlaneNormal } = camera;\n    const ijkOrigin = transformWorldToIndexContinuous(imageData, [0, 0, 0]);\n    const worldVecColDir = vec3.negate(vec3.create(), viewUp);\n    const worldVecSliceDir = vec3.negate(vec3.create(), viewPlaneNormal);\n    const worldVecRowDir = vec3.cross(vec3.create(), worldVecColDir, worldVecSliceDir);\n    const ijkVecColDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecColDir), ijkOrigin);\n    const ijkVecSliceDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecSliceDir), ijkOrigin);\n    vec3.normalize(ijkVecColDir, ijkVecColDir);\n    vec3.normalize(ijkVecSliceDir, ijkVecSliceDir);\n    const ijkVecRowDir = vec3.cross(vec3.create(), ijkVecColDir, ijkVecSliceDir);\n    return {\n        worldVecRowDir,\n        worldVecColDir,\n        worldVecSliceDir,\n        ijkVecRowDir,\n        ijkVecColDir,\n        ijkVecSliceDir,\n    };\n}\nexport { getVolumeDirectionVectors as default, getVolumeDirectionVectors };\n","export function calculateNeighborhoodStats(scalarData, dimensions, centerIjk, radius) {\n    const [width, height, numSlices] = dimensions;\n    const numPixelsPerSlice = width * height;\n    let sum = 0;\n    let sumSq = 0;\n    let count = 0;\n    const [cx, cy, cz] = centerIjk.map(Math.round);\n    for (let z = cz - radius; z <= cz + radius; z++) {\n        if (z < 0 || z >= numSlices) {\n            continue;\n        }\n        for (let y = cy - radius; y <= cy + radius; y++) {\n            if (y < 0 || y >= height) {\n                continue;\n            }\n            for (let x = cx - radius; x <= cx + radius; x++) {\n                if (x < 0 || x >= width) {\n                    continue;\n                }\n                const index = z * numPixelsPerSlice + y * width + x;\n                const value = scalarData[index];\n                sum += value;\n                sumSq += value * value;\n                count++;\n            }\n        }\n    }\n    if (count === 0) {\n        const centerIndex = cz * numPixelsPerSlice + cy * width + cx;\n        if (centerIndex >= 0 && centerIndex < scalarData.length) {\n            const centerValue = scalarData[centerIndex];\n            return { mean: centerValue, stdDev: 0, count: 1 };\n        }\n        else {\n            return { mean: 0, stdDev: 0, count: 0 };\n        }\n    }\n    const mean = sum / count;\n    const variance = sumSq / count - mean * mean;\n    const stdDev = Math.sqrt(Math.max(0, variance));\n    return { mean, stdDev, count };\n}\n","import { isEqual } from './isEqual';\nimport { CalibrationTypes } from '../enums';\nconst projectionRadiographSOPClassUIDs = new Set([\n    '1.2.840.10008.5.1.4.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.2',\n    '1.2.840.10008.5.1.4.1.1.1.2.1',\n    '1.2.840.10008.5.1.4.1.1.1.3',\n    '1.2.840.10008.5.1.4.1.1.1.3.1',\n    '1.2.840.10008.5.1.4.1.1.12.1',\n    '1.2.840.10008.5.1.4.1.1.12.1.1',\n    '1.2.840.10008.5.1.4.1.1.12.2',\n    '1.2.840.10008.5.1.4.1.1.12.2.1',\n    '1.2.840.10008.5.1.4.1.1.12.3',\n]);\nfunction calculateRadiographicPixelSpacing(instance) {\n    const { PixelSpacing, ImagerPixelSpacing, EstimatedRadiographicMagnificationFactor, PixelSpacingCalibrationType, PixelSpacingCalibrationDescription, } = instance;\n    const isProjection = true;\n    if (!ImagerPixelSpacing) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.UNKNOWN,\n            isProjection,\n        };\n    }\n    if (!PixelSpacing) {\n        if (!EstimatedRadiographicMagnificationFactor) {\n            console.warn('EstimatedRadiographicMagnificationFactor was not present. Unable to correct ImagerPixelSpacing.');\n            return {\n                PixelSpacing: ImagerPixelSpacing,\n                type: CalibrationTypes.PROJECTION,\n                isProjection,\n            };\n        }\n        const correctedPixelSpacing = ImagerPixelSpacing.map((pixelSpacing) => pixelSpacing / EstimatedRadiographicMagnificationFactor);\n        return {\n            PixelSpacing: correctedPixelSpacing,\n            type: CalibrationTypes.ERMF,\n            isProjection,\n        };\n    }\n    if (isEqual(PixelSpacing, ImagerPixelSpacing)) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.PROJECTION,\n            isProjection,\n        };\n    }\n    if (PixelSpacingCalibrationType || PixelSpacingCalibrationDescription) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.CALIBRATED,\n            isProjection,\n            PixelSpacingCalibrationType,\n            PixelSpacingCalibrationDescription,\n        };\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.UNKNOWN,\n        isProjection,\n    };\n}\nfunction calculateUSPixelSpacing(instance) {\n    const { SequenceOfUltrasoundRegions } = instance;\n    const isArrayOfSequences = Array.isArray(SequenceOfUltrasoundRegions);\n    if (isArrayOfSequences && SequenceOfUltrasoundRegions.length > 1) {\n        console.warn('Sequence of Ultrasound Regions > one entry. This is not yet implemented, all measurements will be shown in pixels.');\n        return;\n    }\n    const { PhysicalDeltaX, PhysicalDeltaY } = isArrayOfSequences\n        ? SequenceOfUltrasoundRegions[0]\n        : SequenceOfUltrasoundRegions;\n    const USPixelSpacing = [PhysicalDeltaX * 10, PhysicalDeltaY * 10];\n    return {\n        PixelSpacing: USPixelSpacing,\n    };\n}\nexport default function getPixelSpacingInformation(instance) {\n    const { PixelSpacing, SOPClassUID, SequenceOfUltrasoundRegions } = instance;\n    if (SequenceOfUltrasoundRegions) {\n        return calculateUSPixelSpacing(instance);\n    }\n    const isProjection = projectionRadiographSOPClassUIDs.has(SOPClassUID);\n    if (isProjection) {\n        return calculateRadiographicPixelSpacing(instance);\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.NOT_APPLICABLE,\n        isProjection: false,\n    };\n}\n","import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport { isEqual, isEqualAbs, isEqualNegative } from './isEqual';\nimport isOpposite from './isOpposite';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex, { transformWorldToIndexContinuous, } from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport * as HistoryMemo from './historyMemo';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport PointsManager from './PointsManager';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport convertToGrayscale from './convertToGrayscale';\nimport getViewportImageIds from './getViewportImageIds';\nimport { getRandomSampleFromArray } from './getRandomSampleFromArray';\nimport { getVolumeId } from './getVolumeId';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { pointInShapeCallback } from './pointInShapeCallback';\nexport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as color from './color';\nimport { deepEqual } from './deepEqual';\nimport FrameRange from './FrameRange';\nimport fnv1aHash from './fnv1aHash';\nimport { getImageDataMetadata } from './getImageDataMetadata';\nimport { buildMetadata } from './buildMetadata';\nimport { _getViewportModality } from './getViewportModality';\nimport cache from '../cache/cache';\nimport getDynamicVolumeInfo from './getDynamicVolumeInfo';\nimport autoLoad from './autoLoad';\nimport scaleArray from './scaleArray';\nimport splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nimport { deepClone } from './deepClone';\nimport { jumpToSlice } from './jumpToSlice';\nimport scroll from './scroll';\nimport clip from './clip';\nimport createSubVolume from './createSubVolume';\nimport getVolumeDirectionVectors from './getVolumeDirectionVectors';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport * as logger from './logger';\nimport { calculateNeighborhoodStats } from './calculateNeighborhoodStats';\nimport getPixelSpacingInformation from './getPixelSpacingInformation';\nconst getViewportModality = (viewport, volumeId) => _getViewportModality(viewport, volumeId, cache.getVolume);\nexport { FrameRange, eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, fnv1aHash, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, getMinMax, getRuntimeId, isEqual, isEqualAbs, isEqualNegative, isOpposite, getViewportModality, windowLevel, convertToGrayscale, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, PointsManager, getScalingParameters, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, HistoryMemo, generateVolumePropsFromImageIds, getBufferConfiguration, VoxelManager, RLEVoxelMap, convertStackToVolumeViewport, convertVolumeToStackViewport, roundNumber, roundToPrecision, getViewportImageIds, getRandomSampleFromArray, getVolumeId, color, hasFloatScalingParameters, getDynamicVolumeInfo, autoLoad, scaleArray, deepClone, splitImageIdsBy4DTags, pointInShapeCallback, deepEqual, jumpToSlice, scroll, clip, transformWorldToIndexContinuous, createSubVolume, getVolumeDirectionVectors, calculateSpacingBetweenImageIds, getImageDataMetadata, buildMetadata, calculateNeighborhoodStats, getPixelSpacingInformation, };\n","function _getViewportModality(viewport, volumeId, getVolume) {\n    if (!getVolume) {\n        throw new Error('getVolume is required, use the utilities export instead ');\n    }\n    if (viewport.modality) {\n        return viewport.modality;\n    }\n    if (viewport.setVolumes) {\n        volumeId = volumeId ?? viewport.getVolumeId();\n        if (!volumeId || !getVolume) {\n            return;\n        }\n        const volume = getVolume(volumeId);\n        return volume.metadata.Modality;\n    }\n    throw new Error('Invalid viewport type');\n}\nexport { _getViewportModality };\n","export default function invertRgbTransferFunction(rgbTransferFunction) {\n    if (!rgbTransferFunction) {\n        return;\n    }\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = 1 - nodeValue1[1];\n        nodeValue1[2] = 1 - nodeValue1[2];\n        nodeValue1[3] = 1 - nodeValue1[3];\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","function areNumbersEqualWithTolerance(num1, num2, tolerance) {\n    return Math.abs(num1 - num2) <= tolerance;\n}\nfunction areArraysEqual(arr1, arr2, tolerance = 1e-5) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!areNumbersEqualWithTolerance(arr1[i], arr2[i], tolerance)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isNumberType(value) {\n    return typeof value === 'number';\n}\nfunction isNumberArrayLike(value) {\n    return (value &&\n        typeof value === 'object' &&\n        'length' in value &&\n        typeof value.length === 'number' &&\n        value.length > 0 &&\n        typeof value[0] === 'number');\n}\nexport default function isEqual(v1, v2, tolerance = 1e-5) {\n    if (typeof v1 !== typeof v2 || v1 === null || v2 === null) {\n        return false;\n    }\n    if (isNumberType(v1) && isNumberType(v2)) {\n        return areNumbersEqualWithTolerance(v1, v2, tolerance);\n    }\n    if (isNumberArrayLike(v1) && isNumberArrayLike(v2)) {\n        return areArraysEqual(v1, v2, tolerance);\n    }\n    return false;\n}\nconst negative = (v) => typeof v === 'number' ? -v : v?.map ? v.map(negative) : !v;\nconst abs = (v) => typeof v === 'number' ? Math.abs(v) : v?.map ? v.map(abs) : v;\nconst isEqualNegative = (v1, v2, tolerance = undefined) => isEqual(v1, negative(v2), tolerance);\nconst isEqualAbs = (v1, v2, tolerance = undefined) => isEqual(abs(v1), abs(v2), tolerance);\nexport { isEqualNegative, isEqual, isEqualAbs };\n","import loglevelImport from 'loglevel';\nconst loglevel = loglevelImport.noConflict();\nif (typeof window !== 'undefined') {\n    window.log = loglevel;\n}\nexport function getRootLogger(name) {\n    const logger = loglevel.getLogger(name[0]);\n    logger.getLogger = (...names) => {\n        return getRootLogger(`${name}.${names.join('.')}`);\n    };\n    return logger;\n}\nexport function getLogger(...name) {\n    return getRootLogger(name.join('.'));\n}\nexport const cs3dLog = getRootLogger('cs3d');\nexport const coreLog = cs3dLog.getLogger('core');\nexport const toolsLog = cs3dLog.getLogger('tools');\nexport const loaderLog = cs3dLog.getLogger('dicomImageLoader');\nexport const aiLog = cs3dLog.getLogger('ai');\nexport const examplesLog = cs3dLog.getLogger('examples');\nexport const dicomConsistencyLog = getLogger('consistency', 'dicom');\nexport const imageConsistencyLog = getLogger('consistency', 'image');\n","import { get } from '../metaData';\nexport default function makeVolumeMetadata(imageIds) {\n    const imageId0 = imageIds[0];\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = get('imagePixelModule', imageId0);\n    const voiLut = [];\n    const voiLutModule = get('voiLutModule', imageId0);\n    let voiLUTFunction;\n    if (voiLutModule) {\n        const { windowWidth, windowCenter } = voiLutModule;\n        voiLUTFunction = voiLutModule?.voiLUTFunction;\n        if (Array.isArray(windowWidth)) {\n            for (let i = 0; i < windowWidth.length; i++) {\n                voiLut.push({\n                    windowWidth: windowWidth[i],\n                    windowCenter: windowCenter[i],\n                });\n            }\n        }\n        else {\n            voiLut.push({\n                windowWidth: windowWidth,\n                windowCenter: windowCenter,\n            });\n        }\n    }\n    else {\n        voiLut.push({\n            windowWidth: undefined,\n            windowCenter: undefined,\n        });\n    }\n    const { modality, seriesInstanceUID } = get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = get('imagePlaneModule', imageId0);\n    return {\n        BitsAllocated: bitsAllocated,\n        BitsStored: bitsStored,\n        SamplesPerPixel: samplesPerPixel,\n        HighBit: highBit,\n        PhotometricInterpretation: photometricInterpretation,\n        PixelRepresentation: pixelRepresentation,\n        Modality: modality,\n        ImageOrientationPatient: imageOrientationPatient,\n        PixelSpacing: pixelSpacing,\n        FrameOfReferenceUID: frameOfReferenceUID,\n        Columns: columns,\n        Rows: rows,\n        voiLut,\n        VOILUTFunction: voiLUTFunction,\n        SeriesInstanceUID: seriesInstanceUID,\n    };\n}\n","import { mat3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nfunction linePlaneIntersection(p0, p1, plane) {\n    const [x0, y0, z0] = p0;\n    const [x1, y1, z1] = p1;\n    const [A, B, C, D] = plane;\n    const a = x1 - x0;\n    const b = y1 - y0;\n    const c = z1 - z0;\n    const t = (-1 * (A * x0 + B * y0 + C * z0 - D)) / (A * a + B * b + C * c);\n    const X = a * t + x0;\n    const Y = b * t + y0;\n    const Z = c * t + z0;\n    return [X, Y, Z];\n}\nfunction planeEquation(normal, point, normalized = false) {\n    const [A, B, C] = normal;\n    const D = A * point[0] + B * point[1] + C * point[2];\n    if (normalized) {\n        const length = Math.sqrt(A * A + B * B + C * C);\n        return [A / length, B / length, C / length, D / length];\n    }\n    return [A, B, C, D];\n}\nfunction threePlaneIntersection(firstPlane, secondPlane, thirdPlane) {\n    const [A1, B1, C1, D1] = firstPlane;\n    const [A2, B2, C2, D2] = secondPlane;\n    const [A3, B3, C3, D3] = thirdPlane;\n    const m0 = mat3.fromValues(A1, A2, A3, B1, B2, B3, C1, C2, C3);\n    const m1 = mat3.fromValues(D1, D2, D3, B1, B2, B3, C1, C2, C3);\n    const m2 = mat3.fromValues(A1, A2, A3, D1, D2, D3, C1, C2, C3);\n    const m3 = mat3.fromValues(A1, A2, A3, B1, B2, B3, D1, D2, D3);\n    const x = mat3.determinant(m1) / mat3.determinant(m0);\n    const y = mat3.determinant(m2) / mat3.determinant(m0);\n    const z = mat3.determinant(m3) / mat3.determinant(m0);\n    return [x, y, z];\n}\nfunction planeDistanceToPoint(plane, point, signed = false) {\n    const [A, B, C, D] = plane;\n    const [x, y, z] = point;\n    const numerator = A * x + B * y + C * z - D;\n    const distance = Math.abs(numerator) / Math.sqrt(A * A + B * B + C * C);\n    const sign = signed ? Math.sign(numerator) : 1;\n    return sign * distance;\n}\nfunction isPointOnPlane(point, plane, tolerance = EPSILON) {\n    return planeDistanceToPoint(plane, point) < tolerance;\n}\nexport { linePlaneIntersection, planeEquation, threePlaneIntersection, planeDistanceToPoint, isPointOnPlane, };\n","import { createPositionCallback } from './createPositionCallback';\nexport function pointInShapeCallback(imageData, options) {\n    const { pointInShapeFn, callback, boundsIJK, returnPoints = false } = options;\n    let scalarData;\n    if (imageData.getScalarData) {\n        scalarData = imageData.getScalarData();\n    }\n    else {\n        const scalars = imageData.getPointData().getScalars();\n        if (scalars) {\n            scalarData = scalars.getData();\n        }\n        else {\n            const { voxelManager } = imageData.get('voxelManager') || {};\n            if (voxelManager) {\n                scalarData = voxelManager.getCompleteScalarDataArray();\n            }\n        }\n    }\n    const dimensions = imageData.getDimensions();\n    const defaultBoundsIJK = [\n        [0, dimensions[0]],\n        [0, dimensions[1]],\n        [0, dimensions[2]],\n    ];\n    const bounds = boundsIJK || defaultBoundsIJK;\n    const pointsInShape = iterateOverPointsInShape({\n        imageData,\n        bounds,\n        scalarData,\n        pointInShapeFn,\n        callback,\n    });\n    return returnPoints ? pointsInShape : undefined;\n}\nexport function iterateOverPointsInShape({ imageData, bounds, scalarData, pointInShapeFn, callback, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const { numComps } = imageData;\n    const dimensions = imageData.getDimensions();\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const xMultiple = numComps ||\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n    const yMultiple = dimensions[0] * xMultiple;\n    const zMultiple = dimensions[1] * yMultiple;\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        const indexK = k * zMultiple;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            const indexJK = indexK + j * yMultiple;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = indexJK + i * xMultiple;\n                    let value;\n                    if (xMultiple > 2) {\n                        value = [\n                            scalarData[index],\n                            scalarData[index + 1],\n                            scalarData[index + 2],\n                        ];\n                    }\n                    else {\n                        value = scalarData[index];\n                    }\n                    pointsInShape.push({\n                        value,\n                        index,\n                        pointIJK,\n                        pointLPS: pointLPS.slice(),\n                    });\n                    callback({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\nexport function iterateOverPointsInShapeVoxelManager({ voxelManager, bounds, imageData, pointInShapeFn, callback, returnPoints, }) {\n    const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = bounds;\n    const indexToWorld = createPositionCallback(imageData);\n    const pointIJK = [0, 0, 0];\n    const pointsInShape = [];\n    for (let k = kMin; k <= kMax; k++) {\n        pointIJK[2] = k;\n        for (let j = jMin; j <= jMax; j++) {\n            pointIJK[1] = j;\n            for (let i = iMin; i <= iMax; i++) {\n                pointIJK[0] = i;\n                const pointLPS = indexToWorld(pointIJK);\n                if (pointInShapeFn(pointLPS, pointIJK)) {\n                    const index = voxelManager.toIndex(pointIJK);\n                    const value = voxelManager.getAtIndex(index);\n                    if (returnPoints) {\n                        pointsInShape.push({\n                            value,\n                            index,\n                            pointIJK: [...pointIJK],\n                            pointLPS: pointLPS.slice(),\n                        });\n                    }\n                    callback?.({ value, index, pointIJK, pointLPS });\n                }\n            }\n        }\n    }\n    return pointsInShape;\n}\n","import { vec3 } from 'gl-matrix';\nexport default function snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, deltaFrames) {\n    const { min, max, current } = sliceRange;\n    const posDiffFromFocalPoint = vec3.create();\n    vec3.sub(posDiffFromFocalPoint, position, focalPoint);\n    const steps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * steps;\n    let frameIndex = Math.round(floatingStepNumber);\n    let newFocalPoint = [\n        focalPoint[0] -\n            viewPlaneNormal[0] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[1] -\n            viewPlaneNormal[1] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[2] -\n            viewPlaneNormal[2] * floatingStepNumber * spacingInNormalDirection,\n    ];\n    frameIndex += deltaFrames;\n    if (frameIndex > steps) {\n        frameIndex = steps;\n    }\n    else if (frameIndex < 0) {\n        frameIndex = 0;\n    }\n    const newSlicePosFromMin = frameIndex * spacingInNormalDirection;\n    newFocalPoint = [\n        newFocalPoint[0] + viewPlaneNormal[0] * newSlicePosFromMin,\n        newFocalPoint[1] + viewPlaneNormal[1] * newSlicePosFromMin,\n        newFocalPoint[2] + viewPlaneNormal[2] * newSlicePosFromMin,\n    ];\n    const newPosition = [\n        newFocalPoint[0] + posDiffFromFocalPoint[0],\n        newFocalPoint[1] + posDiffFromFocalPoint[1],\n        newFocalPoint[2] + posDiffFromFocalPoint[2],\n    ];\n    return { newFocalPoint, newPosition };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    if (!scanAxisNormal) {\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    }\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    const zSpacing = calculateSpacingBetweenImageIds(imageIds);\n    let sortedImageIds;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        sortedImageIds = imageIds;\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        if (firstImageDistance - middleImageDistance < 0) {\n            sortedImageIds.reverse();\n        }\n    }\n    const { imagePositionPatient: origin } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n    const result = {\n        zSpacing,\n        origin,\n        sortedImageIds,\n    };\n    return result;\n}\n","function getTransferFunctionNodes(transferFunction) {\n    const size = transferFunction.getSize();\n    const values = [];\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        transferFunction.getNodeValue(index, nodeValue1);\n        values.push(nodeValue1);\n    }\n    return values;\n}\nfunction setTransferFunctionNodes(transferFunction, nodes) {\n    if (!nodes?.length) {\n        return;\n    }\n    transferFunction.removeAllPoints();\n    nodes.forEach((node) => {\n        transferFunction.addRGBPoint(...node);\n    });\n}\nexport { getTransferFunctionNodes, setTransferFunctionNodes };\n","import transformWorldToIndex from './transformWorldToIndex';\nexport function transformCanvasToIJK(viewport, canvasPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return transformWorldToIndex(vtkImageData, worldPoint);\n}\n","export default function transformIndexToWorld(imageData, voxelPos) {\n    return imageData.indexToWorld(voxelPos);\n}\n","export default function transformWorldToIndex(imageData, worldPos) {\n    const continuousIndex = imageData.worldToIndex(worldPos);\n    const index = continuousIndex.map(Math.round);\n    return index;\n}\nexport function transformWorldToIndexContinuous(imageData, worldPos) {\n    return imageData.worldToIndex(worldPos);\n}\n","function updateVTKImageDataWithCornerstoneImage(sourceImageData, image) {\n    const pixelData = image.voxelManager.getScalarData();\n    if (!sourceImageData.getPointData) {\n        return;\n    }\n    const scalarData = sourceImageData\n        .getPointData()\n        .getScalars()\n        .getData();\n    if (image.color && image.rgba) {\n        const newPixelData = new Uint8Array(image.columns * image.rows * 3);\n        for (let i = 0; i < image.columns * image.rows; i++) {\n            newPixelData[i * 3] = pixelData[i * 4];\n            newPixelData[i * 3 + 1] = pixelData[i * 4 + 1];\n            newPixelData[i * 3 + 2] = pixelData[i * 4 + 2];\n        }\n        image.rgba = false;\n        image.getPixelData = () => newPixelData;\n        scalarData.set(newPixelData);\n    }\n    else {\n        scalarData.set(pixelData);\n    }\n    sourceImageData.modified();\n}\nexport { updateVTKImageDataWithCornerstoneImage };\n","import VOILUTFunctionType from '../enums/VOILUTFunctionType';\nimport { logit } from './logit';\nfunction toWindowLevel(low, high) {\n    const windowWidth = Math.abs(high - low) + 1;\n    const windowCenter = (low + high + 1) / 2;\n    return { windowWidth, windowCenter };\n}\nfunction toLowHighRange(windowWidth, windowCenter, voiLUTFunction = VOILUTFunctionType.LINEAR) {\n    if (voiLUTFunction === VOILUTFunctionType.LINEAR) {\n        return {\n            lower: windowCenter - 0.5 - (windowWidth - 1) / 2,\n            upper: windowCenter - 0.5 + (windowWidth - 1) / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.LINEAR_EXACT) {\n        return {\n            lower: windowCenter - windowWidth / 2,\n            upper: windowCenter + windowWidth / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n        const xLower = logit(0.01, windowCenter, windowWidth);\n        const xUpper = logit(0.99, windowCenter, windowWidth);\n        return {\n            lower: xLower,\n            upper: xUpper,\n        };\n    }\n    else {\n        throw new Error('Invalid VOI LUT function');\n    }\n}\nexport { toWindowLevel, toLowHighRange };\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { utilities, Enums } from '@cornerstonejs/core';\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\nexport default function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {\n    if (typeof calibrationOrScale === 'number') {\n        calibrationOrScale = {\n            type: Enums.CalibrationTypes.USER,\n            scale: calibrationOrScale,\n        };\n    }\n    calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n    const viewports = renderingEngine.getStackViewports();\n    viewports.forEach((viewport) => {\n        const imageIds = viewport.getImageIds();\n        if (imageIds.includes(imageId)) {\n            viewport.calibrateSpacing(imageId);\n        }\n    });\n}\n","var Events;\n(function (Events) {\n    Events[\"CLIP_STOPPED\"] = \"CORNERSTONE_CINE_TOOL_STOPPED\";\n    Events[\"CLIP_STARTED\"] = \"CORNERSTONE_CINE_TOOL_STARTED\";\n})(Events || (Events = {}));\nexport default Events;\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, getEnabledElement, StackViewport, VideoViewport, VolumeViewport, cache, BaseVolumeViewport, Enums, } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState, getToolStateByViewportId } from './state';\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\nconst debounced = true;\nconst dynamicVolumesPlayingMap = new Map();\nfunction playClip(element, playClipOptions) {\n    let playClipTimeouts;\n    let playClipIsTimeVarying;\n    if (element === undefined) {\n        throw new Error('playClip: element must not be undefined');\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('playClip: element must be a valid Cornerstone enabled element');\n    }\n    if (!playClipOptions) {\n        playClipOptions = {};\n    }\n    playClipOptions.dynamicCineEnabled =\n        playClipOptions.dynamicCineEnabled ?? true;\n    const { viewport } = enabledElement;\n    const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n    let playClipData = getToolState(element);\n    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;\n    if (isDynamicCinePlaying) {\n        _stopDynamicVolumeCine(element);\n    }\n    if (!playClipData) {\n        playClipData = {\n            intervalId: undefined,\n            framesPerSecond: 30,\n            lastFrameTimeStamp: undefined,\n            ignoreFrameTimeVector: false,\n            usingFrameTimeVector: false,\n            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n            reverse: playClipOptions.reverse ?? false,\n            loop: playClipOptions.loop ?? true,\n        };\n        addToolState(element, playClipData);\n    }\n    else {\n        _stopClip(element, {\n            stopDynamicCine: !isDynamicCinePlaying,\n            viewportId: viewport.id,\n        });\n    }\n    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n    if (playClipOptions.framesPerSecond < 0 ||\n        playClipOptions.framesPerSecond > 0) {\n        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n        playClipData.reverse = playClipData.framesPerSecond < 0;\n        playClipData.ignoreFrameTimeVector = true;\n    }\n    if (playClipData.ignoreFrameTimeVector !== true &&\n        playClipData.frameTimeVector &&\n        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n        playClipContext.frameTimeVectorEnabled) {\n        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);\n        playClipTimeouts = timeouts;\n        playClipIsTimeVarying = isTimeVarying;\n    }\n    const playClipAction = () => {\n        const { numScrollSteps, currentStepIndex } = playClipContext;\n        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n        const newStepIndexOutOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;\n        if (!playClipData.loop && newStepIndexOutOfRange) {\n            _stopClip(element, {\n                stopDynamicCine: !isDynamicCinePlaying,\n                viewportId: viewport.id,\n            });\n            const eventDetail = { element };\n            triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, eventDetail);\n            return;\n        }\n        if (newStepIndex >= numScrollSteps) {\n            newStepIndex = 0;\n        }\n        else if (newStepIndex < 0) {\n            newStepIndex = numScrollSteps - 1;\n        }\n        const delta = newStepIndex - currentStepIndex;\n        if (delta) {\n            try {\n                playClipContext.scroll(delta);\n            }\n            catch (e) {\n                console.warn('Play clip not scrolling', e);\n                _stopClipWithData(playClipData);\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, eventDetail);\n                return;\n            }\n        }\n    };\n    if (isDynamicCinePlaying) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume) {\n            dynamicVolumesPlayingMap.set(volume.volumeId, element);\n        }\n    }\n    if (playClipContext.play) {\n        playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);\n    }\n    else if (playClipTimeouts &&\n        playClipTimeouts.length > 0 &&\n        playClipIsTimeVarying) {\n        playClipData.usingFrameTimeVector = true;\n        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {\n            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);\n            playClipAction();\n        }, 0);\n    }\n    else {\n        playClipData.usingFrameTimeVector = false;\n        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));\n    }\n    const eventDetail = {\n        element,\n    };\n    triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\nfunction stopClip(element, options = {}) {\n    _stopClip(element, {\n        stopDynamicCine: true,\n        ...options,\n    });\n}\nfunction _stopClip(element, options = { stopDynamicCine: true, viewportId: undefined }) {\n    const { stopDynamicCine, viewportId } = options;\n    const enabledElement = getEnabledElement(element);\n    let toolState;\n    const viewport = enabledElement?.viewport;\n    if (!enabledElement) {\n        if (viewportId) {\n            toolState = getToolStateByViewportId(viewportId);\n        }\n        else {\n            return;\n        }\n    }\n    else {\n        const { viewport } = enabledElement;\n        toolState = getToolState(viewport.element);\n    }\n    if (toolState) {\n        _stopClipWithData(toolState);\n    }\n    if (viewport instanceof VideoViewport) {\n        viewport.pause();\n    }\n    else if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n        _stopDynamicVolumeCine(element);\n    }\n}\nfunction _stopDynamicVolumeCine(element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume?.isDynamicVolume()) {\n            const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n            dynamicVolumesPlayingMap.delete(volume.volumeId);\n            if (dynamicCineElement && dynamicCineElement !== element) {\n                stopClip(dynamicCineElement);\n            }\n        }\n    }\n}\nfunction _getPlayClipTimeouts(vector, speed) {\n    let i;\n    let sample;\n    let delay;\n    let sum = 0;\n    const limit = vector.length;\n    const timeouts = [];\n    let isTimeVarying = false;\n    if (typeof speed !== 'number' || speed <= 0) {\n        speed = 1;\n    }\n    for (i = 1; i < limit; i++) {\n        delay = (Number(vector[i]) / speed) | 0;\n        timeouts.push(delay);\n        if (i === 1) {\n            sample = delay;\n        }\n        else if (delay !== sample) {\n            isTimeVarying = true;\n        }\n        sum += delay;\n    }\n    if (timeouts.length > 0) {\n        if (isTimeVarying) {\n            delay = (sum / timeouts.length) | 0;\n        }\n        else {\n            delay = timeouts[0];\n        }\n        timeouts.push(delay);\n    }\n    return { timeouts, isTimeVarying };\n}\nfunction _stopClipWithData(playClipData) {\n    const id = playClipData.intervalId;\n    if (typeof id !== 'undefined') {\n        playClipData.intervalId = undefined;\n        if (playClipData.usingFrameTimeVector) {\n            clearTimeout(id);\n        }\n        else {\n            clearInterval(id);\n        }\n    }\n}\nfunction _getVolumeFromViewport(viewport) {\n    if (!(viewport instanceof VolumeViewport)) {\n        return undefined;\n    }\n    const volumeIds = viewport.getAllVolumeIds();\n    if (!volumeIds?.length) {\n        return undefined;\n    }\n    const dynamicVolumeId = volumeIds.find((volumeId) => cache.getVolume(volumeId)?.isDynamicVolume());\n    const volumeId = dynamicVolumeId ?? volumeIds[0];\n    return cache.getVolume(volumeId);\n}\nfunction _createStackViewportCinePlayContext(viewport, waitForRendered) {\n    const imageIds = viewport.getImageIds();\n    return {\n        get numScrollSteps() {\n            return imageIds.length;\n        },\n        get currentStepIndex() {\n            return viewport.getTargetImageIdIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n    };\n}\nfunction _createVideoViewportCinePlayContext(viewport, waitForRendered) {\n    return {\n        get numScrollSteps() {\n            return viewport.getNumberOfSlices();\n        },\n        get currentStepIndex() {\n            return viewport.getSliceIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n        play(fps) {\n            if (fps) {\n                viewport.setPlaybackRate(fps / 24);\n            }\n            viewport.play();\n            return viewport.getFrameRate();\n        },\n    };\n}\nfunction _createVolumeViewportCinePlayContext(viewport, volume) {\n    const { volumeId } = volume;\n    const cachedScrollInfo = {\n        viewPlaneNormal: vec3.create(),\n        scrollInfo: null,\n    };\n    const getScrollInfo = () => {\n        const camera = viewport.getCamera();\n        const updateCache = !cachedScrollInfo.scrollInfo ||\n            !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n        if (updateCache) {\n            const scrollInfo = csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n            cachedScrollInfo.scrollInfo = scrollInfo;\n        }\n        return cachedScrollInfo.scrollInfo;\n    };\n    return {\n        get numScrollSteps() {\n            return getScrollInfo().numScrollSteps;\n        },\n        get currentStepIndex() {\n            return getScrollInfo().currentStepIndex;\n        },\n        get frameTimeVectorEnabled() {\n            const camera = viewport.getCamera();\n            const volumeViewPlaneNormal = volume.direction\n                .slice(6, 9)\n                .map((x) => -x);\n            const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n            return glMatrix.equals(dot, 1);\n        },\n        scroll(delta) {\n            getScrollInfo().currentStepIndex += delta;\n            csUtils.scroll(viewport, { delta });\n        },\n    };\n}\nfunction _createDynamicVolumeViewportCinePlayContext(volume) {\n    return {\n        get numScrollSteps() {\n            return volume.numDimensionGroups;\n        },\n        get currentStepIndex() {\n            return volume.dimensionGroupNumber - 1;\n        },\n        get frameTimeVectorEnabled() {\n            return false;\n        },\n        scroll(delta) {\n            volume.scroll(delta);\n        },\n    };\n}\nfunction _createCinePlayContext(viewport, playClipOptions) {\n    if (viewport instanceof StackViewport) {\n        return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n            return _createDynamicVolumeViewportCinePlayContext(volume);\n        }\n        return _createVolumeViewportCinePlayContext(viewport, volume);\n    }\n    if (viewport instanceof VideoViewport) {\n        return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    throw new Error('Unknown viewport type');\n}\nexport { playClip, stopClip };\n","import smoothAnnotation from './smoothAnnotation';\nexport default {\n    smoothAnnotation,\n};\nexport { smoothAnnotation };\n","import { Enums } from '@cornerstonejs/core';\nfunction sumOverDimensionGroups(voxelManager, dimensionGroups) {\n    const arrayLength = voxelManager.getScalarDataLength();\n    const resultArray = new Float32Array(arrayLength);\n    for (const dimensionGroupNumber of dimensionGroups) {\n        const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);\n        for (let i = 0; i < arrayLength; i++) {\n            resultArray[i] += scalarData[i];\n        }\n    }\n    return resultArray;\n}\nfunction averageOverDimensionGroups(voxelManager, dimensionGroups) {\n    const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n    const numDimensionGroups = dimensionGroups.length;\n    for (let i = 0; i < sumArray.length; i++) {\n        sumArray[i] /= numDimensionGroups;\n    }\n    return sumArray;\n}\nconst operationFunctions = {\n    [Enums.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {\n        if (dimensionGroups.length !== 2) {\n            throw new Error('Please provide only 2 dimension groups for subtraction.');\n        }\n        const arrayLength = voxelManager.getScalarDataLength();\n        const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);\n        const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);\n        for (let i = 0; i < arrayLength; i++) {\n            const difference = scalarData1[i] - scalarData2[i];\n            callback(i, difference);\n        }\n    },\n};\nfunction generateImageFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers } = options;\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const arrayLength = voxelManager.getScalarDataLength();\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    const resultArray = new Float32Array(arrayLength);\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        resultArray[index] = value;\n    });\n    return resultArray;\n}\nfunction updateVolumeFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;\n    if (!targetVolume) {\n        throw new Error('A target volume must be provided');\n    }\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const targetVoxelManager = targetVolume.voxelManager;\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        targetVoxelManager.setAtIndex(index, value);\n    });\n    targetVoxelManager.resetModifiedSlices();\n    for (let k = 0; k < targetVolume.dimensions[2]; k++) {\n        targetVoxelManager.modifiedSlices.add(k);\n    }\n}\nexport { generateImageFromTimeData, updateVolumeFromTimeData };\n","import { vec3 } from 'gl-matrix';\nexport function getPoint(points, idx) {\n    const idx3 = idx * 3;\n    if (idx3 < points.length) {\n        return vec3.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);\n    }\n}\nexport function getPolyDataPointIndexes(polyData) {\n    const linesData = polyData.getLines().getData();\n    let idx = 0;\n    const lineSegments = new Map();\n    while (idx < linesData.length) {\n        const segmentSize = linesData[idx++];\n        const segment = [];\n        for (let i = 0; i < segmentSize; i++) {\n            segment.push(linesData[idx + i]);\n        }\n        lineSegments.set(segment[0], segment);\n        idx += segmentSize;\n    }\n    const contours = [];\n    const findStartingPoint = (map) => {\n        for (const [key, value] of map.entries()) {\n            if (value !== undefined) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    let startPoint = findStartingPoint(lineSegments);\n    while (startPoint !== -1) {\n        const contour = [startPoint];\n        while (lineSegments.has(startPoint)) {\n            const nextPoint = lineSegments.get(startPoint)[1];\n            if (lineSegments.has(nextPoint)) {\n                contour.push(nextPoint);\n            }\n            lineSegments.delete(startPoint);\n            startPoint = nextPoint;\n        }\n        contours.push(contour);\n        startPoint = findStartingPoint(lineSegments);\n    }\n    return contours.length ? contours : undefined;\n}\nexport function getPolyDataPoints(polyData) {\n    const contoursIndexes = getPolyDataPointIndexes(polyData);\n    if (!contoursIndexes) {\n        return;\n    }\n    const rawPointsData = polyData.getPoints().getData();\n    return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));\n}\n","import { vec2 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\nconst DEFAULTS = {\n    MULTIPLIER: 1,\n    RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n    TICKS_BAR_SIZE: 50,\n};\nclass Colorbar extends Widget {\n    constructor(props) {\n        super(props);\n        this._isMouseOver = false;\n        this._isInteracting = false;\n        this._mouseOverCallback = (evt) => {\n            this._isMouseOver = true;\n            this.showTicks();\n            evt.stopPropagation();\n        };\n        this._mouseOutCallback = (evt) => {\n            this._isMouseOver = false;\n            this.hideTicks();\n            evt.stopPropagation();\n        };\n        this._mouseDownCallback = (evt) => {\n            this._isInteracting = true;\n            this.showTicks();\n            this._addVOIEventListeners(evt);\n            evt.stopPropagation();\n        };\n        this._mouseDragCallback = (evt, initialState) => {\n            const multipliers = this.getVOIMultipliers();\n            const currentPoints = this._getPointsFromMouseEvent(evt);\n            const { points: startPoints, voiRange: startVOIRange } = initialState;\n            const canvasDelta = vec2.sub(vec2.create(), currentPoints.local, startPoints.local);\n            const wwDelta = canvasDelta[0] * multipliers[0];\n            const wcDelta = canvasDelta[1] * multipliers[1];\n            if (!wwDelta && !wcDelta) {\n                return;\n            }\n            const { lower: voiLower, upper: voiUpper } = startVOIRange;\n            let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(voiLower, voiUpper);\n            windowWidth = Math.max(windowWidth + wwDelta, 1);\n            windowCenter += wcDelta;\n            const newVoiRange = csUtils.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            this.voiRange = newVoiRange;\n            evt.stopPropagation();\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            this._isInteracting = false;\n            this.hideTicks();\n            this._removeVOIEventListeners();\n            evt.stopPropagation();\n        };\n        this._eventListenersManager =\n            new csUtils.eventListener.MultiTargetEventListenerManager();\n        this._colormaps = Colorbar.getColormapsMap(props);\n        this._activeColormapName = Colorbar.getInitialColormapName(props);\n        this._canvas = this._createCanvas(props);\n        this._ticksBar = this._createTicksBar(props);\n        this._rangeTextPosition =\n            props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n        this._canvas.appendTo(this.rootElement);\n        this._ticksBar.appendTo(this.rootElement);\n        this._addRootElementEventListeners();\n    }\n    get activeColormapName() {\n        return this._activeColormapName;\n    }\n    set activeColormapName(colormapName) {\n        if (colormapName === this._activeColormapName) {\n            return;\n        }\n        const colormap = this._colormaps.get(colormapName);\n        if (!colormap) {\n            console.warn(`Invalid colormap name (${colormapName})`);\n            return;\n        }\n        this._activeColormapName = colormapName;\n        this._canvas.colormap = colormap;\n    }\n    get imageRange() {\n        return this._canvas.imageRange;\n    }\n    set imageRange(imageRange) {\n        this._canvas.imageRange = imageRange;\n        this._ticksBar.imageRange = imageRange;\n    }\n    get voiRange() {\n        return this._canvas.voiRange;\n    }\n    set voiRange(voiRange) {\n        const { voiRange: currentVoiRange } = this._canvas;\n        if (!isRangeValid(voiRange) ||\n            areColorbarRangesEqual(voiRange, currentVoiRange)) {\n            return;\n        }\n        this._canvas.voiRange = voiRange;\n        this._ticksBar.voiRange = voiRange;\n        this.onVoiChange(voiRange);\n    }\n    get showFullImageRange() {\n        return this._canvas.showFullImageRange;\n    }\n    set showFullImageRange(value) {\n        this._canvas.showFullImageRange = value;\n        this._ticksBar.showFullPixelValueRange = value;\n    }\n    destroy() {\n        super.destroy();\n        this._eventListenersManager.reset();\n    }\n    createRootElement() {\n        const rootElement = document.createElement('div');\n        Object.assign(rootElement.style, {\n            position: 'relative',\n            fontSize: '0',\n            width: '100%',\n            height: '100%',\n        });\n        return rootElement;\n    }\n    onContainerResize() {\n        super.onContainerResize();\n        this.updateTicksBar();\n        this._canvas.size = this.containerSize;\n    }\n    getVOIMultipliers() {\n        return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n    }\n    onVoiChange(voiRange) {\n    }\n    showTicks() {\n        this.updateTicksBar();\n        this._ticksBar.visible = true;\n    }\n    hideTicks() {\n        if (this._isInteracting || this._isMouseOver) {\n            return;\n        }\n        this._ticksBar.visible = false;\n    }\n    static getColormapsMap(props) {\n        const { colormaps } = props;\n        return colormaps.reduce((items, item) => items.set(item.Name, item), new Map());\n    }\n    static getInitialColormapName(props) {\n        const { activeColormapName, colormaps } = props;\n        const colormapExists = !!activeColormapName &&\n            colormaps.some((cm) => cm.Name === activeColormapName);\n        return colormapExists ? activeColormapName : colormaps[0].Name;\n    }\n    _createCanvas(props) {\n        const { imageRange, voiRange, showFullPixelValueRange } = props;\n        const colormap = this._colormaps.get(this._activeColormapName);\n        return new ColorbarCanvas({\n            colormap,\n            imageRange,\n            voiRange: voiRange,\n            showFullPixelValueRange,\n        });\n    }\n    _createTicksBar(props) {\n        const ticksProps = props.ticks;\n        return new ColorbarTicks({\n            imageRange: props.imageRange,\n            voiRange: props.voiRange,\n            ticks: ticksProps,\n            showFullPixelValueRange: props.showFullPixelValueRange,\n        });\n    }\n    _getPointsFromMouseEvent(evt) {\n        const { rootElement: element } = this;\n        const clientPoint = [evt.clientX, evt.clientY];\n        const pagePoint = [evt.pageX, evt.pageY];\n        const rect = element.getBoundingClientRect();\n        const localPoints = [\n            pagePoint[0] - rect.left - window.pageXOffset,\n            pagePoint[1] - rect.top - window.pageYOffset,\n        ];\n        return { client: clientPoint, page: pagePoint, local: localPoints };\n    }\n    updateTicksBar() {\n        const { width: containerWidth, height: containerHeight } = this.containerSize;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return;\n        }\n        const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n        const isHorizontal = containerWidth >= containerHeight;\n        const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n        const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n        if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {\n            throw new Error('Invalid rangeTextPosition value for the current colobar orientation');\n        }\n        let ticksBarTop;\n        let ticksBarLeft;\n        ticksBar.size = { width, height };\n        if (isHorizontal) {\n            ticksBarLeft = 0;\n            ticksBarTop =\n                rangeTextPosition === ColorbarRangeTextPosition.Top\n                    ? -height\n                    : containerHeight;\n        }\n        else {\n            ticksBarTop = 0;\n            ticksBarLeft =\n                rangeTextPosition === ColorbarRangeTextPosition.Left\n                    ? -width\n                    : containerWidth;\n        }\n        ticksBar.top = ticksBarTop;\n        ticksBar.left = ticksBarLeft;\n    }\n    _addRootElementEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        const { rootElement: element } = this;\n        manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n        manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n        manager.addEventListener(element, 'mousedown', this._mouseDownCallback);\n    }\n    _addVOIEventListeners(evt) {\n        const { _eventListenersManager: manager } = this;\n        const points = this._getPointsFromMouseEvent(evt);\n        const voiRange = { ...this._canvas.voiRange };\n        const initialDragState = { points, voiRange };\n        this._removeVOIEventListeners();\n        manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n        manager.addEventListener(document, 'voi.mousemove', (evt) => this._mouseDragCallback(evt, initialDragState));\n    }\n    _removeVOIEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        manager.removeEventListener(document, 'voi.mouseup');\n        manager.removeEventListener(document, 'voi.mousemove');\n    }\n}\nexport { Colorbar as default, Colorbar };\n","import { eventTarget, VolumeViewport, StackViewport, Enums, utilities, getEnabledElement, cache, } from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\nclass ViewportColorbar extends Colorbar {\n    constructor(props) {\n        const { element, volumeId } = props;\n        const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n        super({ ...props, imageRange, voiRange });\n        this.autoHideTicks = () => {\n            if (this._hideTicksTimeoutId) {\n                return;\n            }\n            const timeLeft = this._hideTicksTime - Date.now();\n            if (timeLeft <= 0) {\n                this.hideTicks();\n            }\n            else {\n                this._hideTicksTimeoutId = window.setTimeout(() => {\n                    this._hideTicksTimeoutId = 0;\n                    this.autoHideTicks();\n                }, timeLeft);\n            }\n        };\n        this._stackNewImageCallback = () => {\n            this.imageRange = ViewportColorbar._getImageRange(this._element);\n        };\n        this._imageVolumeModifiedCallback = (evt) => {\n            const { volumeId } = evt.detail;\n            if (volumeId !== this._volumeId) {\n                return;\n            }\n            const { _element: element } = this;\n            this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        };\n        this._viewportVOIModifiedCallback = (evt) => {\n            const { viewportId, volumeId, range: voiRange, colormap } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.voiRange = voiRange;\n            if (colormap) {\n                this.activeColormapName = colormap.name;\n            }\n            this.showAndAutoHideTicks();\n        };\n        this._viewportColormapModifiedCallback = (evt) => {\n            const { viewportId, colormap, volumeId } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.activeColormapName = colormap.name;\n        };\n        this._element = element;\n        this._volumeId = volumeId;\n        this._addCornerstoneEventListener();\n    }\n    get element() {\n        return this._element;\n    }\n    get enabledElement() {\n        return getEnabledElement(this._element);\n    }\n    getVOIMultipliers() {\n        const { viewport } = this.enabledElement;\n        return getVOIMultipliers(viewport, this._volumeId);\n    }\n    onVoiChange(voiRange) {\n        super.onVoiChange(voiRange);\n        const { viewport } = this.enabledElement;\n        if (viewport instanceof StackViewport) {\n            viewport.setProperties({\n                voiRange: voiRange,\n            });\n            viewport.render();\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { _volumeId: volumeId } = this;\n            const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(volumeId);\n            viewport.setProperties({ voiRange }, volumeId);\n            viewportsContainingVolumeUID.forEach((vp) => vp.render());\n        }\n    }\n    static _getImageRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const imageData = actor.getMapper().getInputData();\n        const scalarData = imageData.getPointData().getScalars();\n        let imageRange;\n        if (!scalarData) {\n            if (!volumeId) {\n                throw new Error('volumeId is required when scalarData is not available');\n            }\n            const volume = cache.getVolume(volumeId);\n            const [minValue, maxValue] = volume.voxelManager.getRange();\n            imageRange = [minValue, maxValue];\n        }\n        else {\n            imageRange = scalarData.getRange();\n        }\n        return imageRange[0] === 0 && imageRange[1] === 0\n            ? defaultImageRange\n            : { lower: imageRange[0], upper: imageRange[1] };\n    }\n    static _getVOIRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();\n        return voiRange[0] === 0 && voiRange[1] === 0\n            ? defaultImageRange\n            : { lower: voiRange[0], upper: voiRange[1] };\n    }\n    showAndAutoHideTicks(interval = 1000) {\n        this._hideTicksTime = Date.now() + interval;\n        this.showTicks();\n        this.autoHideTicks();\n    }\n    _addCornerstoneEventListener() {\n        const { _element: element } = this;\n        eventTarget.addEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.addEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.addEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.addEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n    destroy() {\n        super.destroy();\n        const { _element: element } = this;\n        eventTarget.removeEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.removeEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.removeEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.removeEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n}\nexport { ViewportColorbar as default, ViewportColorbar };\n","import { utilities as csUtils, StackViewport, VolumeViewport, } from '@cornerstonejs/core';\nfunction extractWindowLevelRegionToolData(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        return extractImageDataVolume(viewport);\n    }\n    if (viewport instanceof StackViewport) {\n        return extractImageDataStack(viewport);\n    }\n    throw new Error('Viewport not supported');\n}\nfunction extractImageDataVolume(viewport) {\n    const { scalarData, width, height } = csUtils.getCurrentVolumeViewportSlice(viewport);\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    return {\n        scalarData,\n        minPixelValue,\n        maxPixelValue,\n        width,\n        height,\n        rows: width,\n        columns: height,\n    };\n}\nfunction extractImageDataStack(viewport) {\n    const imageData = viewport.getImageData();\n    const { scalarData } = imageData;\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    const width = imageData.dimensions[0];\n    const height = imageData.dimensions[1];\n    const { rows, columns, color } = viewport.getCornerstoneImage();\n    return {\n        scalarData,\n        width,\n        height,\n        minPixelValue,\n        maxPixelValue,\n        rows,\n        columns,\n        color,\n    };\n}\nexport { extractWindowLevelRegionToolData };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    const dimensions = imageData.getDimensions();\n    const voxelManager = csUtils.VoxelManager.createScalarVolumeVoxelManager({\n        dimensions: dimensions,\n        scalarData: imageData.getPointData().getScalars().getData(),\n    });\n    voxelManager.forEach(callback, {\n        boundsIJK,\n        isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),\n        imageData,\n    });\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n","import { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../enums';\nexport default function setAnnotationLabel(annotation, element, updatedLabel) {\n    annotation.data.label = updatedLabel;\n    triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport AnnotationMultiSlice from './AnnotationMultiSlice';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nimport normalizeViewportPlane from './normalizeViewportPlane';\nimport IslandRemoval from './segmentation/islandRemoval';\nimport { getPixelValueUnits, getPixelValueUnitsImageId, } from './getPixelValueUnits';\nimport * as geometricSurfaceUtils from './geometricSurfaceUtils';\nimport setAnnotationLabel from './setAnnotationLabel';\nimport { moveAnnotationToViewPlane } from './moveAnnotationToViewPlane';\nimport getOrCreateImageVolume from './segmentation/getOrCreateImageVolume';\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, getPixelValueUnits, getPixelValueUnitsImageId, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, AnnotationMultiSlice, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, normalizeViewportPlane, IslandRemoval, geometricSurfaceUtils, setAnnotationLabel, moveAnnotationToViewPlane, getOrCreateImageVolume, };\n","import * as math from '../../../utilities/math';\nclass Spline {\n    constructor(props) {\n        this._controlPoints = [];\n        this._invalidated = false;\n        this._length = 0;\n        this._controlPoints = [];\n        this._resolution = props?.resolution ?? 20;\n        this._fixedResolution = props?.fixedResolution ?? false;\n        this._closed = props?.closed ?? false;\n        this._invalidated = true;\n    }\n    get controlPoints() {\n        return this._controlPoints;\n    }\n    get numControlPoints() {\n        return this._controlPoints.length;\n    }\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(resolution) {\n        if (this._fixedResolution || this._resolution === resolution) {\n            return;\n        }\n        this._resolution = resolution;\n        this.invalidated = true;\n    }\n    get fixedResolution() {\n        return this._fixedResolution;\n    }\n    get closed() {\n        return this._closed;\n    }\n    set closed(closed) {\n        if (this._closed === closed) {\n            return;\n        }\n        this._closed = closed;\n        this.invalidated = true;\n    }\n    get aabb() {\n        this._update();\n        return this._aabb;\n    }\n    get length() {\n        this._update();\n        return this._length;\n    }\n    get invalidated() {\n        return this._invalidated;\n    }\n    set invalidated(invalidated) {\n        this._invalidated = invalidated;\n    }\n    hasTangentPoints() {\n        return false;\n    }\n    addControlPoint(point) {\n        this._controlPoints.push([point[0], point[1]]);\n        this.invalidated = true;\n    }\n    addControlPoints(points) {\n        points.forEach((point) => this.addControlPoint(point));\n    }\n    addControlPointAtU(u) {\n        const lineSegment = this._getLineSegmentAt(u);\n        const { start: startPoint, end: endPoint } = lineSegment.points;\n        const curveSegmentIndex = Math.floor(u);\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const t = u - Math.floor(curveSegmentIndex);\n        const controlPointPos = [\n            startPoint[0] + t * (endPoint[0] - startPoint[0]),\n            startPoint[1] + t * (endPoint[1] - startPoint[1]),\n        ];\n        const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n        this._controlPoints.splice(insertIndex, 0, controlPointPos);\n        this.invalidated = true;\n        return {\n            index: insertIndex,\n            point: controlPointPos,\n        };\n    }\n    deleteControlPointByIndex(index) {\n        const minControlPoints = this._closed ? 3 : 1;\n        const canDelete = index >= 0 &&\n            index < this._controlPoints.length &&\n            this._controlPoints.length > minControlPoints;\n        if (!canDelete) {\n            return false;\n        }\n        this._controlPoints.splice(index, 1);\n        this.invalidated = true;\n        return true;\n    }\n    clearControlPoints() {\n        this._controlPoints = [];\n        this.invalidated = true;\n    }\n    setControlPoints(points) {\n        this.clearControlPoints();\n        this.addControlPoints(points);\n    }\n    updateControlPoint(index, newControlPoint) {\n        if (index < 0 || index >= this._controlPoints.length) {\n            throw new Error('Index out of bounds');\n        }\n        this._controlPoints[index] = [...newControlPoint];\n        this.invalidated = true;\n    }\n    getControlPoints() {\n        return this._controlPoints.map((controlPoint) => [\n            controlPoint[0],\n            controlPoint[1],\n        ]);\n    }\n    getClosestControlPoint(point) {\n        const controlPoints = this._controlPoints;\n        let minSquaredDist = Infinity;\n        let closestPointIndex = -1;\n        for (let i = 0, len = controlPoints.length; i < len; i++) {\n            const controlPoint = controlPoints[i];\n            const dx = point[0] - controlPoint[0];\n            const dy = point[1] - controlPoint[1];\n            const squaredDist = dx * dx + dy * dy;\n            if (squaredDist < minSquaredDist) {\n                minSquaredDist = squaredDist;\n                closestPointIndex = i;\n            }\n        }\n        return {\n            index: closestPointIndex,\n            point: closestPointIndex === -1\n                ? undefined\n                : [...controlPoints[closestPointIndex]],\n            distance: Math.sqrt(minSquaredDist),\n        };\n    }\n    getClosestControlPointWithinDistance(point, maxDist) {\n        const closestControlPoint = this.getClosestControlPoint(point);\n        return closestControlPoint.distance <= maxDist\n            ? closestControlPoint\n            : undefined;\n    }\n    getClosestPoint(point) {\n        this._update();\n        const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        if (!curveSegmentsDistInfo.length) {\n            return;\n        }\n        curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n        let closestPoint;\n        let closestPointCurveSegmentIndex = -1;\n        let minDistSquared = Infinity;\n        let minDistCurveSegment;\n        let minDistLineSegment;\n        for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n            const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n            if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n                continue;\n            }\n            const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n            const { lineSegments } = curveSegment;\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineSegDistSquared < minDistSquared) {\n                    minDistLineSegment = lineSegment;\n                    closestPointCurveSegmentIndex = curveSegmentIndex;\n                    minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n                    closestPoint = lineSegPoint;\n                    minDistSquared = lineSegDistSquared;\n                }\n            }\n        }\n        const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength +\n            math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n        const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n        const u = closestPointCurveSegmentIndex + t;\n        return {\n            point: closestPoint,\n            uValue: u,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getClosestPointOnControlPointLines(point) {\n        const linePoints = [...this._controlPoints];\n        if (this._closed) {\n            linePoints.push(this._controlPoints[0]);\n        }\n        if (!linePoints.length) {\n            return;\n        }\n        let closestPoint;\n        let minDistSquared = Infinity;\n        let startPoint = linePoints[0];\n        for (let i = 1, len = linePoints.length; i < len; i++) {\n            const endPoint = linePoints[i];\n            const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n            if (lineSegDistSquared < minDistSquared) {\n                closestPoint = lineSegPoint;\n                minDistSquared = lineSegDistSquared;\n            }\n            startPoint = endPoint;\n        }\n        return {\n            point: closestPoint,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getPolylinePoints() {\n        this._update();\n        return this._convertCurveSegmentsToPolyline(this._curveSegments);\n    }\n    getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n        if (this._closed) {\n            return [];\n        }\n        this._update();\n        const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n        const closeSpline = closestControlPoint?.index === 0;\n        const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n        return previewCurveSegments?.length\n            ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n            : [];\n    }\n    isPointNearCurve(point, maxDist) {\n        this._update();\n        const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n        const maxDistSquared = maxDist * maxDist;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const { lineSegments } = curveSegments[i];\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineDistSquared <= maxDistSquared) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    containsPoint(point) {\n        this._update();\n        const controlPoints = this._controlPoints;\n        if (controlPoints.length < 3) {\n            return false;\n        }\n        const curveSegments = [...this._curveSegments];\n        const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n        if (closingCurveSegment) {\n            curveSegments.push(closingCurveSegment);\n        }\n        let numIntersections = 0;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const { aabb: curveSegAABB } = curveSegment;\n            const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX &&\n                point[1] >= curveSegAABB.minY &&\n                point[1] < curveSegAABB.maxY;\n            if (!mayIntersectCurveSegment) {\n                continue;\n            }\n            const { lineSegments } = curveSegment;\n            for (let i = 0; i < lineSegments.length; i++) {\n                const lineSegment = lineSegments[i];\n                const { aabb: lineSegmentAABB } = lineSegment;\n                const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX &&\n                    point[1] >= lineSegmentAABB.minY &&\n                    point[1] < lineSegmentAABB.maxY;\n                if (mayIntersectLineSegment) {\n                    const { start: p1, end: p2 } = lineSegment.points;\n                    const isVerticalLine = p1[0] === p2[0];\n                    const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                    numIntersections +=\n                        isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n                }\n            }\n        }\n        return numIntersections % 2 === 1;\n    }\n    _update() {\n        if (!this._invalidated) {\n            return;\n        }\n        const curveSegments = this.getSplineCurves();\n        let length = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for (let i = 0, len = curveSegments.length; i < len; i++) {\n            const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n            minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n            minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n            maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n            maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n            length += curveSegLength;\n        }\n        this._curveSegments = curveSegments;\n        this._aabb = { minX, minY, maxX, maxY };\n        this._length = length;\n        this._invalidated = false;\n    }\n    _convertCurveSegmentsToPolyline(curveSegments) {\n        this._update();\n        const polylinePoints = [];\n        curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n            lineSegments.forEach((lineSegment, lineSegIndex) => {\n                if (curveSegIndex === 0 && lineSegIndex === 0) {\n                    polylinePoints.push([...lineSegment.points.start]);\n                }\n                polylinePoints.push([...lineSegment.points.end]);\n            });\n        });\n        return polylinePoints;\n    }\n    _getCurveSegmmentsDistanceSquaredInfo(point) {\n        this._update();\n        const curveSegmentsDistanceSquared = [];\n        const { _curveSegments: curveSegments } = this;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n            curveSegmentsDistanceSquared.push({\n                curveSegmentIndex: i,\n                curveSegment,\n                distanceSquared,\n            });\n        }\n        return curveSegmentsDistanceSquared;\n    }\n    _getCurveSegmmentsWithinDistance(point, maxDist) {\n        this._update();\n        const maxDistSquared = maxDist * maxDist;\n        if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n            return [];\n        }\n        const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        const curveSegmentsWithinRange = [];\n        for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n            const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];\n            if (curveSegmentDistSquared <= maxDistSquared) {\n                curveSegmentsWithinRange.push(curveSegment);\n            }\n        }\n        return curveSegmentsWithinRange;\n    }\n    _getLineSegmentAt(u) {\n        this._update();\n        const curveSegmentIndex = Math.floor(u);\n        const t = u - curveSegmentIndex;\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const { lineSegments } = curveSegment;\n        const pointLength = curveSegment.length * t;\n        for (let i = 0; i < lineSegments.length; i++) {\n            const lineSegment = lineSegments[i];\n            const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n            if (pointLength >= lineSegment.previousLineSegmentsLength &&\n                pointLength <= lengthEnd) {\n                return lineSegment;\n            }\n        }\n    }\n    _getClosingCurveSegmentWithStraightLineSegment() {\n        if (this.closed) {\n            return;\n        }\n        const controlPoints = this._controlPoints;\n        const startControlPoint = controlPoints[0];\n        const endControlPoint = controlPoints[controlPoints.length - 1];\n        const closingLineSegment = {\n            points: {\n                start: [...startControlPoint],\n                end: [...endControlPoint],\n            },\n            aabb: {\n                minX: Math.min(startControlPoint[0], endControlPoint[0]),\n                minY: Math.min(startControlPoint[1], endControlPoint[1]),\n                maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n                maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n            },\n        };\n        return {\n            aabb: {\n                minX: closingLineSegment.aabb.minX,\n                minY: closingLineSegment.aabb.minY,\n                maxX: closingLineSegment.aabb.maxX,\n                maxY: closingLineSegment.aabb.maxY,\n            },\n            lineSegments: [closingLineSegment],\n        };\n    }\n}\nexport { Spline as default, Spline };\n","import { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n        const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n        const endCurveSegIndex = closeSpline\n            ? previewNumCurveSegments\n            : previewNumCurveSegments - 1;\n        const transformMatrix = this.getTransformMatrix();\n        const controlPoints = [...this.controlPoints];\n        const curveSegments = [];\n        if (!closeSpline) {\n            controlPoints.push(controlPointPreview);\n        }\n        for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n            curveSegments.push(curveSegment);\n        }\n        return curveSegments;\n    }\n    getSplineCurves() {\n        const numCurveSegments = this._getNumCurveSegments();\n        const curveSegments = new Array(numCurveSegments);\n        if (numCurveSegments <= 0) {\n            return [];\n        }\n        const transformMatrix = this.getTransformMatrix();\n        let previousCurveSegmentsLength = 0;\n        for (let i = 0; i < numCurveSegments; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix);\n            curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n            curveSegments[i] = curveSegment;\n            previousCurveSegmentsLength += curveSegment.length;\n        }\n        return curveSegments;\n    }\n    _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n        return closed\n            ? controlPoints.length\n            : Math.max(0, controlPoints.length - 1);\n    }\n    _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const uInt = Math.floor(u);\n        let curveSegmentIndex = uInt % numCurveSegments;\n        const t = u - uInt;\n        const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n        if (curveSegmentIndexOutOfBounds) {\n            if (this.closed) {\n                curveSegmentIndex =\n                    (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n            }\n            else {\n                return;\n            }\n        }\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const tt = t * t;\n        const ttt = tt * t;\n        const tValues = vec4.fromValues(1, t, tt, ttt);\n        const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n        return [\n            vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n            vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n        ];\n    }\n    _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const p1Index = curveSegmentIndex;\n        const p0Index = p1Index - 1;\n        const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n        const p3Index = p2Index + 1;\n        const p1 = controlPoints[p1Index];\n        const p2 = controlPoints[p2Index];\n        let p0;\n        let p3;\n        if (p0Index >= 0) {\n            p0 = controlPoints[p0Index];\n        }\n        else {\n            p0 = closed\n                ? controlPoints[controlPoints.length - 1]\n                : math.point.mirror(p2, p1);\n        }\n        if (p3Index < controlPoints.length) {\n            p3 = controlPoints[p3Index];\n        }\n        else {\n            p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n        }\n        return { p0, p1, p2, p3 };\n    }\n    _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const numLineSegments = this.resolution + 1;\n        const inc = 1 / numLineSegments;\n        const minU = curveSegmentIndex;\n        let maxU = minU + 1;\n        if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n            maxU -= MAX_U_ERROR;\n        }\n        const lineSegments = [];\n        let startPoint;\n        let endPoint;\n        let previousLineSegmentsLength = 0;\n        for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n            u = u > maxU ? maxU : u;\n            const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n            if (!i) {\n                startPoint = point;\n                continue;\n            }\n            endPoint = point;\n            const dx = endPoint[0] - startPoint[0];\n            const dy = endPoint[1] - startPoint[1];\n            const length = Math.sqrt(dx ** 2 + dy ** 2);\n            const aabb = {\n                minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n                maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n                minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n                maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n            };\n            lineSegments.push({\n                points: {\n                    start: startPoint,\n                    end: endPoint,\n                },\n                aabb,\n                length,\n                previousLineSegmentsLength,\n            });\n            startPoint = endPoint;\n            previousLineSegmentsLength += length;\n        }\n        return lineSegments;\n    }\n    _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n        let curveSegmentLength = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n            minX = Math.min(minX, lineSegAABB.minX);\n            minY = Math.min(minY, lineSegAABB.minY);\n            maxX = Math.max(maxX, lineSegAABB.maxX);\n            maxY = Math.max(maxY, lineSegAABB.maxY);\n            curveSegmentLength += lineSegLength;\n        });\n        return {\n            controlPoints: { p0, p1, p2, p3 },\n            aabb: { minX, minY, maxX, maxY },\n            length: curveSegmentLength,\n            previousCurveSegmentsLength: 0,\n            lineSegments,\n        };\n    }\n}\nexport { CubicSpline as default, CubicSpline };\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(mat4.create(), mat4.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);\nclass BSpline extends CubicSpline {\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { BSpline as default, BSpline };\n","import { CubicSpline } from './CubicSpline';\nclass CardinalSpline extends CubicSpline {\n    constructor(props) {\n        super(props);\n        this._scale = props?.scale ?? 0.5;\n        this._fixedScale = props?.fixedScale ?? false;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(scale) {\n        if (this._fixedScale || this._scale === scale) {\n            return;\n        }\n        this._scale = scale;\n        this.invalidated = true;\n    }\n    get fixedScale() {\n        return this._fixedScale;\n    }\n    getTransformMatrix() {\n        const { scale: s } = this;\n        const s2 = 2 * s;\n        return [\n            0, 1, 0, 0,\n            -s, 0, s, 0,\n            s2, s - 3, 3 - s2, -s,\n            -s, 2 - s, s - 2, s\n        ];\n    }\n}\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass CatmullRomSpline extends CardinalSpline {\n    constructor() {\n        super({ scale: 0.5, fixedScale: true });\n    }\n}\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass LinearSpline extends CardinalSpline {\n    constructor() {\n        super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });\n    }\n}\nexport { LinearSpline as default, LinearSpline };\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                mapper.setSampleDistance(originalSampleDistance * 2);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        const voiLutFunction = viewport.getProperties().VOILUTFunction;\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            imageDynamicRange = Math.min(calculatedDynamicRange, metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return ratio > 1 ? Math.round(ratio) : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiLutFunction = viewport.getProperties().VOILUTFunction;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","function getLuminanceFromRegion(imageData, x, y, width, height) {\n    const luminance = [];\n    let index = 0;\n    const pixelData = imageData.scalarData;\n    let spIndex, row, column;\n    if (imageData.color) {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = ((row + y) * imageData.columns + (column + x)) * 4;\n                const red = pixelData[spIndex];\n                const green = pixelData[spIndex + 1];\n                const blue = pixelData[spIndex + 2];\n                luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n            }\n        }\n    }\n    else {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = (row + y) * imageData.columns + (column + x);\n                luminance[index++] = pixelData[spIndex];\n            }\n        }\n    }\n    return luminance;\n}\nexport { getLuminanceFromRegion };\n","function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {\n    const numPixels = pixelLuminance.length;\n    let min = globalMax;\n    let max = globalMin;\n    let sum = 0;\n    if (numPixels < 2) {\n        return {\n            min,\n            max,\n            mean: (globalMin + globalMax) / 2,\n        };\n    }\n    for (let index = 0; index < numPixels; index++) {\n        const spv = pixelLuminance[index];\n        min = Math.min(min, spv);\n        max = Math.max(max, spv);\n        sum += spv;\n    }\n    return {\n        min,\n        max,\n        mean: sum / numPixels,\n    };\n}\nexport { calculateMinMaxMean };\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            if (imageData) {\n                spacing = imageData.spacing;\n            }\n            const { minZoomScale, maxZoomScale } = this.configuration;\n            const t = element.clientHeight * spacing[1] * 0.5;\n            const scale = t / parallelScaleToSet;\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                if (scale < minZoomScale) {\n                    cappedParallelScale = t / minZoomScale;\n                    thresholdExceeded = true;\n                }\n                else if (scale >= maxZoomScale) {\n                    cappedParallelScale = t / maxZoomScale;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nconst EPSILON = 1e-3;\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            handleRadius: 3,\n            enableHDPIHandles: false,\n            referenceLinesCenterGapRadius: 20,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            const toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            this.setToolCenter(toolCenter);\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                    triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                        toolGroupId: this.toolGroupId,\n                        toolCenter: this.toolCenter,\n                    });\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const centerGap = this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    let handleRadius = this.configuration.handleRadius *\n                        (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);\n                    let opacity = 1;\n                    if (this.configuration.mobile?.enabled) {\n                        handleRadius = this.configuration.mobile.handleRadius;\n                        opacity = this.configuration.mobile.opacity;\n                    }\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const volumeIds = viewport.getAllVolumeIds();\n            const otherVolumeIds = otherViewport.getAllVolumeIds();\n            return (volumeIds.length === otherVolumeIds.length &&\n                volumeIds.every((id) => otherVolumeIds.includes(id)));\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = this.editData.annotation.data.handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    setToolCenter(toolCenter, suppressEvents = false) {\n        this.toolCenter = toolCenter;\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        if (!suppressEvents) {\n            triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                toolCenter: this.toolCenter,\n            });\n        }\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { rotation: originalViewportRotation } = viewport.getViewPresentation();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                magnifyViewport.setViewPresentation({\n                    rotation: originalViewportRotation,\n                });\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            const { element } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","export function pointToString(point, decimals = 5) {\n    return (parseFloat(point[0]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[1]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[2]).toFixed(decimals) +\n        ',');\n}\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData?.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData?.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData || !this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates, ChangeTypes, } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { vec2 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass LabelTool extends AnnotationTool {\n    static { this.toolName = 'Label'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotationUID } = annotation;\n            const point = annotation.data.handles.points[0];\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            const dist = vec2.distance(canvasCoords, annotationCanvasCoordinate);\n            if (dist < proximity) {\n                return true;\n            }\n            const svgLayer = element.querySelector('svg');\n            if (!svgLayer) {\n                return false;\n            }\n            const textGroup = svgLayer.querySelector(`g[data-annotation-uid=\"${annotationUID}\"]`);\n            if (!textGroup) {\n                return false;\n            }\n            const textGroupElement = textGroup;\n            const bbox = textGroupElement.getBBox();\n            const transform = textGroupElement.getAttribute('transform');\n            let translateX = 0;\n            let translateY = 0;\n            if (transform) {\n                const matches = transform.match(/translate\\(([-\\d.]+)\\s+([-\\d.]+)\\)/);\n                if (matches) {\n                    translateX = parseFloat(matches[1]);\n                    translateY = parseFloat(matches[2]);\n                }\n            }\n            const x = bbox.x + translateX;\n            const y = bbox.y + translateY;\n            const isNear = canvasCoords[0] >= x &&\n                canvasCoords[0] <= x + bbox.width &&\n                canvasCoords[1] >= y &&\n                canvasCoords[1] <= y + bbox.height;\n            return isNear;\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID: null,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n                offset: [0, 0, 0],\n            };\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                resetElementCursor(element);\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            let offset = [0, 0, 0];\n            if (currentPoints && currentPoints.world) {\n                const initialWorldPos = currentPoints.world;\n                const anchorWorldPos = annotation.data.handles.points[0];\n                offset = [\n                    anchorWorldPos[0] - initialWorldPos[0],\n                    anchorWorldPos[1] - initialWorldPos[1],\n                    anchorWorldPos[2] - initialWorldPos[2],\n                ];\n            }\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                offset,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, offset } = this.editData;\n            if (offset) {\n                annotation.data.handles.points[0] = [\n                    worldPos[0] + offset[0],\n                    worldPos[1] + offset[1],\n                    worldPos[2] + offset[2],\n                ];\n            }\n            else {\n                annotation.data.handles.points[0] = [...worldPos];\n            }\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const point = data.handles.points[0];\n                styleSpecifier.annotationUID = annotationUID;\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!data.text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                const textBoxUID = '1';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [data.text], canvasCoordinates, {\n                    ...options,\n                    padding: 0,\n                });\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, position, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const instance = new this();\n        const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text,\n                handles: {\n                    points: [position],\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle, interactionType) { }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nLabelTool.toolName = 'Label';\nexport default LabelTool;\n","import { Events, ChangeTypes } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    static { this.toolName = 'Length'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(LengthTool, enabledElement, points, options);\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            if (this._isInsideVolume(index1, index2, dimensions)) {\n                this.isHandleOutsideImage = false;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n            }\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nexport default LengthTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    static { this.toolName = 'Height'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nexport default HeightTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    static { this.toolName = 'Probe'; }\n    static { this.probeDefaults = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            handleRadius: '6',\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps) {\n        super(toolProps, AnnotationTool.mergeDefaultProps(ProbeTool.probeDefaults, defaultToolProps));\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value === null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes.StatsUpdated);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + 6,\n                        canvasCoordinates[1] - 6,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        return vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n    }\n    toolSelectedCallback() { }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(ProbeTool, enabledElement, points, options);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes.StatsUpdated) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, changeType);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined || !index) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default ProbeTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    static { this.toolName = 'DragProbe'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value === null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    static { this.toolName = 'EllipticalROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    initialRotation: viewport.getRotation(),\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const canvasCorners = getCanvasEllipseCorners(canvasCoordinates);\n            const [canvasPoint1, canvasPoint2] = canvasCorners;\n            const minorEllipse = {\n                left: Math.min(canvasPoint1[0], canvasPoint2[0]) + proximity / 2,\n                top: Math.min(canvasPoint1[1], canvasPoint2[1]) + proximity / 2,\n                width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) - proximity,\n                height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) - proximity,\n            };\n            const majorEllipse = {\n                left: Math.min(canvasPoint1[0], canvasPoint2[0]) - proximity / 2,\n                top: Math.min(canvasPoint1[1], canvasPoint2[1]) - proximity / 2,\n                width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) + proximity,\n                height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) + proximity,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const post2Index = transformWorldToIndex(imageData, worldPos2);\n                post2Index[0] = Math.floor(post2Index[0]);\n                post2Index[1] = Math.floor(post2Index[1]);\n                post2Index[2] = Math.floor(post2Index[2]);\n                this.isHandleOutsideImage = !this._isInsideVolume(pos1Index, post2Index, dimensions);\n                const iMin = Math.min(pos1Index[0], post2Index[0]);\n                const iMax = Math.max(pos1Index[0], post2Index[0]);\n                const jMin = Math.min(pos1Index[1], post2Index[1]);\n                const jMax = Math.max(pos1Index[1], post2Index[1]);\n                const kMin = Math.min(pos1Index[2], post2Index[2]);\n                const kMax = Math.max(pos1Index[2], post2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = [\n                    (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                    (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                    (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                ];\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                const handles = [pos1Index, post2Index];\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n                    scale /\n                    scale;\n                const pixelUnitsOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    boundsIJK,\n                    imageData,\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                    returnPoints: this.configuration.storePointData,\n                });\n                const stats = this.configuration.statsCalculator.getStatistics();\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    mean: stats.mean?.value,\n                    max: stats.max?.value,\n                    stdDev: stats.stdDev?.value,\n                    statsArray: stats.array,\n                    pointsInShape,\n                    isEmptyArea,\n                    areaUnit,\n                    modalityUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(EllipticalROITool, enabledElement, points, options);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    _pointInEllipseCanvas(ellipse, location) {\n        const xRadius = ellipse.width / 2;\n        const yRadius = ellipse.height / 2;\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const center = [ellipse.left + xRadius, ellipse.top + yRadius];\n        const normalized = [location[0] - center[0], location[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (mean) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (max) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (stdDev) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default EllipticalROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    static { this.toolName = 'CircleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const radius = getCanvasCircleRadius(canvasCoordinates);\n            const radiusPoint = getCanvasCircleRadius([\n                canvasCoordinates[0],\n                canvasCoords,\n            ]);\n            if (Math.abs(radiusPoint - radius) < proximity / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            data.handles.points = [\n                data.handles.points[0],\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0) {\n                const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n                const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n                const canvasCenter = currentCanvasPoints;\n                const canvasEnd = [\n                    canvasCoordinates[1][0] + dXCanvas,\n                    canvasCoordinates[1][1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasCenter);\n                points[1] = canvasToWorld(canvasEnd);\n            }\n            else {\n                points[1] = canvasToWorld(currentCanvasPoints);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius(canvasCoordinates);\n                const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const wasInvalidated = annotation.invalidated;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = [\n                        (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                        (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                        (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                    ];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                        boundsIJK,\n                        imageData,\n                        returnPoints: this.configuration.storePointData,\n                    });\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        pointsInShape,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            if (wasInvalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(CircleROITool, enabledElement, points, options);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (radius) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (mean) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (max) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (stdDev) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default CircleROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    static { this.toolName = 'ETDRSGrid'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nexport default ETDRSGridTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'SplineROI'; }\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length) {\n                this.createMemo(element, annotation, {\n                    newAnnotation: data.handles.points.length === 1,\n                });\n            }\n            if (data.handles.points.length >= 3) {\n                this.createMemo(element, annotation);\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints > 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                color: '#9EA0CA',\n                lineDash: lineDash,\n                lineWidth: 1,\n            });\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (points.length < SPLINE_MIN_POINTS) {\n            console.warn('Spline requires at least 3 control points');\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(SplineROITool, enabledElement, points, options);\n        const splineType = options?.splineType || SplineTypesEnum.CatmullRom;\n        const splineConfig = instance._getSplineConfig(splineType);\n        const SplineClass = splineConfig.Class;\n        const splineInstance = new SplineClass();\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n                label: '',\n                cachedStats: {},\n                spline: {\n                    type: splineType,\n                    instance: splineInstance,\n                },\n                contour: {\n                    closed: true,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nexport default SplineROITool;\n","import { utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nclass SplineContourSegmentationTool extends SplineROITool {\n    static { this.toolName = 'SplineContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default SplineContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'LivewireContour'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                cancelInProgress: {\n                    method: 'cancelInProgress',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation, } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            this.doneEditMemo();\n            this.createMemo(element, annotation, {\n                newAnnotation: newAnnotation && controlPoints.length === 1,\n            });\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    cancelInProgress(element, config, evt) {\n        if (!this.editData) {\n            this.undo();\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId]?.areaUnit === null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    static { this.toolName = 'LivewireContourSegmentationTool'; }\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default LivewireContourSegmentationTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { setAnnotationLabel } from '../../utilities';\nclass ArrowAnnotateTool extends AnnotationTool {\n    static { this.toolName = 'ArrowAnnotate'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n            arrowHeadStyle: 'legacy',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const { arrowFirst } = this.configuration;\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        arrowFirst,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox, } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((text) => {\n                    if (!text) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.text = text;\n                    triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n                    triggerAnnotationCompleted(annotation);\n                    this.createMemo(element, annotation, { newAnnotation: !!this.memo });\n                    setAnnotationLabel(annotation, element, text);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else if (!movingTextBox) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, text } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                renderStatus = true;\n                if (!text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [text], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, points, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(ArrowAnnotateTool, enabledElement, points, options);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text: text || '',\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const enabledElement = getEnabledElement(element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default ArrowAnnotateTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass AngleTool extends AnnotationTool {\n    static { this.toolName = 'Angle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(AngleTool, enabledElement, points, options);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nexport default AngleTool;\n","import { vec3 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass CobbAngleTool extends AnnotationTool {\n    static { this.toolName = 'CobbAngle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nexport default CobbAngleTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { lineSegment } from '../../utilities/math';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundDirectionalTool'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nexport default UltrasoundDirectionalTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg, drawHandles as drawHandlesSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    static { this.toolName = 'KeyImage'; }\n    static { this.dataSeries = {\n        data: {\n            seriesLevel: true,\n        },\n    }; }\n    static { this.dataPoint = {\n        data: {\n            isPoint: true,\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n            handleRadius: '6',\n            seriesLevel: false,\n            isPoint: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const worldPos = currentPoints.world;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                    seriesLevel: this.configuration.seriesLevel,\n                    isPoint: this.configuration.isPoint,\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            if (!data?.isPoint) {\n                return false;\n            }\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.createMemo(element, annotation);\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            this.doneEditMemo();\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                const arrowUID = '1';\n                if (data?.isPoint) {\n                    const point = data.handles.points[0];\n                    const canvasCoordinates = viewport.worldToCanvas(point);\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {\n                        color,\n                        lineWidth,\n                        handleRadius: this.configuration.handleRadius,\n                    });\n                }\n                else if (canvasPosition?.length) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {\n        annotation.data.isPoint = isPoint;\n        triggerAnnotationModified(annotation, element);\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    cancel(element) {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default KeyImageTool;\n","import { BaseTool, AnnotationTool } from './base';\nimport { getAnnotations, getAnnotation, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);\n            if (!interactableAnnotations) {\n                continue;\n            }\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            AnnotationTool.createAnnotationMemo(element, annotation, {\n                deleting: true,\n            });\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getRenderingEngine, } from '@cornerstonejs/core';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nclass RegionSegmentTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegment'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positiveSeedVariance: 0.5,\n            negativeSeedVariance: 0.9,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.growCutData.circleBorderPoint = currentWorldPoint;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        await super.preMouseDownCallback(evt);\n        Object.assign(this.growCutData, {\n            circleCenterPoint: worldPoint,\n            circleBorderPoint: worldPoint,\n        });\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const worldCircleRadius = vec3.len(vec3.sub(vec3.create(), circleCenterPoint, circleBorderPoint));\n        const sphereInfo = {\n            center: circleCenterPoint,\n            radius: worldCircleRadius,\n        };\n        return growCut.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint, } = this.growCutData;\n        const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);\n        const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);\n        const vecCenterToBorder = vec2.sub(vec2.create(), canvasBorderPoint, canvasCenterPoint);\n        const circleRadius = vec2.len(vecCenterToBorder);\n        if (csUtils.isEqual(circleRadius, 0)) {\n            return;\n        }\n        const annotationUID = 'growcut';\n        const circleUID = '0';\n        const { color } = this.getSegmentStyle({\n            segmentationId: segmentationData.segmentationId,\n            segmentIndex: segmentationData.segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {\n            color,\n        });\n    }\n}\nexport default RegionSegmentTool;\n","import { cache, utilities as csUtils, getEnabledElement, } from '@cornerstonejs/core';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nimport { calculateGrowCutSeeds } from '../../utilities/segmentation/growCut/runOneClickGrowCut';\nimport { ToolModes } from '../../enums';\nclass RegionSegmentPlusTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegmentPlus'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: false,\n            positiveSeedVariance: 0.4,\n            negativeSeedVariance: 0.9,\n            subVolumePaddingPercentage: 0.1,\n            islandRemoval: {\n                enabled: false,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseTimer = null;\n        this.allowedToProceed = false;\n    }\n    mouseMoveCallback(evt) {\n        if (this.mode !== ToolModes.Active) {\n            return;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const { world: worldPoint } = currentPoints;\n        element.style.cursor = 'default';\n        if (this.mouseTimer !== null) {\n            window.clearTimeout(this.mouseTimer);\n            this.mouseTimer = null;\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.onMouseStable(evt, worldPoint, element);\n        }, this.configuration.mouseStabilityDelay || 500);\n    }\n    async onMouseStable(evt, worldPoint, element) {\n        await super.preMouseDownCallback(evt);\n        const refVolume = cache.getVolume(this.growCutData.segmentation.referencedVolumeId);\n        const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {\n            positiveSeedIndices: new Set(),\n            negativeSeedIndices: new Set(),\n        };\n        const { positiveSeedIndices, negativeSeedIndices } = seeds;\n        let cursor;\n        if (positiveSeedIndices.size / negativeSeedIndices.size > 20 ||\n            negativeSeedIndices.size < 30) {\n            cursor = 'not-allowed';\n            this.allowedToProceed = false;\n        }\n        else {\n            cursor = 'copy';\n            this.allowedToProceed = true;\n        }\n        const enabledElement = getEnabledElement(element);\n        if (element) {\n            element.style.cursor = cursor;\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== cursor) {\n                    element.style.cursor = cursor;\n                }\n            });\n        }\n        if (this.allowedToProceed) {\n            this.seeds = seeds;\n        }\n        if (enabledElement && enabledElement.viewport) {\n            enabledElement.viewport.render();\n        }\n    }\n    async preMouseDownCallback(evt) {\n        if (!this.allowedToProceed) {\n            return false;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        if (enabledElement) {\n            element.style.cursor = 'wait';\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== 'wait') {\n                    element.style.cursor = 'wait';\n                }\n            });\n        }\n        const { world: worldPoint } = currentPoints;\n        await super.preMouseDownCallback(evt);\n        this.growCutData = csUtils.deepMerge(this.growCutData, {\n            worldPoint,\n            islandRemoval: {\n                worldIslandPoints: [worldPoint],\n            },\n        });\n        this.growCutData.worldPoint = worldPoint;\n        this.growCutData.islandRemoval = {\n            worldIslandPoints: [worldPoint],\n        };\n        await this.runGrowCut();\n        if (element) {\n            element.style.cursor = 'default';\n        }\n        return true;\n    }\n    getRemoveIslandData(growCutData) {\n        const { worldPoint } = growCutData;\n        return {\n            worldIslandPoints: [worldPoint],\n        };\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, worldPoint, options, } = growCutData;\n        const { subVolumePaddingPercentage } = this.configuration;\n        const mergedOptions = {\n            ...options,\n            subVolumePaddingPercentage,\n            seeds: this.seeds,\n        };\n        return growCut.runOneClickGrowCut({\n            referencedVolumeId,\n            worldPosition: worldPoint,\n            options: mergedOptions,\n        });\n    }\n}\nexport default RegionSegmentPlusTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, cache, getRenderingEngine, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nconst ISLAND_PIXEL_RANGE = [1000, 1900];\nconst { transformWorldToIndex, transformIndexToWorld } = csUtils;\nclass WholeBodySegmentTool extends GrowCutBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positivePixelRange: POSITIVE_PIXEL_RANGE,\n            negativePixelRange: NEGATIVE_PIXEL_RANGE,\n            islandRemoval: {\n                enabled: true,\n                islandPixelRange: ISLAND_PIXEL_RANGE,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);\n            this.growCutData.horizontalLines[1] = linePoints;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            await this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);\n        await super.preMouseDownCallback(evt);\n        this.growCutData.horizontalLines = [linePoints, linePoints];\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { segmentation: segmentationData, horizontalLines } = this.growCutData;\n        if (horizontalLines.length !== 2) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentationId, segmentIndex } = segmentationData;\n        const [line1, line2] = horizontalLines;\n        const [worldLine1P1, worldLine1P2] = line1;\n        const [worldLine2P1, worldLine2P2] = line2;\n        const canvasPoints = [\n            worldLine1P1,\n            worldLine1P2,\n            worldLine2P2,\n            worldLine2P1,\n        ].map((worldPoint) => viewport.worldToCanvas(worldPoint));\n        const annotationUID = 'growCutRect';\n        const squareGroupUID = '0';\n        const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({\n            segmentationId,\n            segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawPolylineSvg(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {\n            color,\n            fillColor,\n            fillOpacity,\n            lineWidth,\n            lineDash,\n            closePath: true,\n        });\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const [line1, line2] = horizontalLines;\n        const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);\n        const ijkTopLeft = transformWorldToIndex(referencedVolume.imageData, worldTopLeft);\n        const ijkBottomRight = transformWorldToIndex(referencedVolume.imageData, worldBottomRight);\n        const boundingBoxInfo = {\n            boundingBox: {\n                ijkTopLeft,\n                ijkBottomRight,\n            },\n        };\n        const config = this.configuration;\n        const options = {\n            positiveSeedValue: segmentIndex,\n            negativeSeedValue: 255,\n            negativePixelRange: config.negativePixelRange,\n            positivePixelRange: config.positivePixelRange,\n        };\n        return growCut.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);\n    }\n    getRemoveIslandData() {\n        const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId }, } = this.growCutData;\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const labelmapVolume = cache.getVolume(labelmapVolumeId);\n        const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n        const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();\n        const { islandPixelRange } = this.configuration.islandRemoval;\n        const islandPointIndexes = [];\n        for (let i = 0, len = labelmapData.length; i < len; i++) {\n            if (labelmapData[i] !== segmentIndex) {\n                continue;\n            }\n            const pixelValue = referencedVolumeData[i];\n            if (pixelValue >= islandPixelRange[0] &&\n                pixelValue <= islandPixelRange[1]) {\n                islandPointIndexes.push(i);\n            }\n        }\n        return {\n            islandPointIndexes,\n        };\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldEdgePoint);\n        const axis = vecDirection.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        if (axis === -1) {\n            throw new Error('Non-orthogonal direction vector');\n        }\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {\n        const { viewPlaneNormal } = viewport.getCamera();\n        return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);\n    }\n    _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {\n        const cuboidPoints = [];\n        const volume = this._getViewportVolume(viewport);\n        worldSquarePoints.forEach((worldSquarePoint) => {\n            const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);\n            const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld(volume.imageData, ijkPoint));\n            cuboidPoints.push(...worldEdgePoints);\n        });\n        return cuboidPoints;\n    }\n    _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {\n        const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);\n        const topLeft = [...worldCuboidPoints[0]];\n        const bottomRight = [...worldCuboidPoints[0]];\n        worldCuboidPoints.forEach((worldPoint) => {\n            vec3.min(topLeft, topLeft, worldPoint);\n            vec3.max(bottomRight, bottomRight, worldPoint);\n        });\n        return { topLeft, bottomRight };\n    }\n    _getViewportVolume(viewport) {\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('Viewport is not a BaseVolumeViewport');\n        }\n        const volumeId = viewport.getAllVolumeIds()[0];\n        return cache.getVolume(volumeId);\n    }\n    _getHorizontalLineIJKPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldPoint);\n        const { viewUp, viewPlaneNormal } = viewport.getCamera();\n        const vecRow = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        const axis = vecRow.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getHorizontalLineWorldPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);\n        const worldPoint1 = transformIndexToWorld(volume.imageData, ijkPoint1);\n        const worldPoint2 = transformIndexToWorld(volume.imageData, ijkPoint2);\n        return [worldPoint1, worldPoint2];\n    }\n}\nWholeBodySegmentTool.toolName = 'WholeBodySegment';\nexport default WholeBodySegmentTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass RectangleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass CircleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass SphereScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const editData = this.getEditData({\n                viewport,\n                representationData,\n                segmentsLocked,\n                segmentationId,\n            });\n            this.editData = {\n                ...this.editData,\n                ...editData,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: false,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            if (this.configuration.calculatePointsInsideVolume) {\n                this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius(canvasCoordinates);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox == true &&\n                    this.configuration.calculatePointsInsideVolume == true) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, 100, { trailing: true });\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { imageData } = imageVolume;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const startIJK = transformWorldToIndex(imageData, points[0]);\n        const endIJK = transformWorldToIndex(imageData, points[0]);\n        const handlesToStart = csUtils.deepClone(points);\n        const startWorld = vec3.create();\n        imageData.indexToWorldVec3(startIJK, startWorld);\n        const endWorld = vec3.create();\n        imageData.indexToWorldVec3(endIJK, endWorld);\n        if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 2) {\n            startWorld[2] = startCoordinate;\n            endWorld[2] = endCoordinate;\n            handlesToStart[0][2] = startCoordinate;\n            handlesToStart[1][2] = startCoordinate;\n        }\n        else if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 0) {\n            startWorld[0] = startCoordinate;\n            endWorld[0] = endCoordinate;\n            handlesToStart[0][0] = startCoordinate;\n            handlesToStart[1][0] = startCoordinate;\n        }\n        else if (this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) == 1) {\n            startWorld[1] = startCoordinate;\n            endWorld[1] = endCoordinate;\n            handlesToStart[0][1] = startCoordinate;\n            handlesToStart[1][1] = startCoordinate;\n        }\n        const distance = vec3.distance(startWorld, endWorld);\n        const newProjectionPoints = [];\n        for (let dist = 0; dist < distance; dist += spacingInNormal) {\n            newProjectionPoints.push(handlesToStart.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n        const pos1 = viewport.canvasToWorld(topLeftCanvas);\n        const pos2 = viewport.canvasToWorld(bottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, pos1, pos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const canvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        }\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let index;\n            let voxelManager;\n            this.doneEditMemo();\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { flooded: boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .offscreenMultiRenderWindow.getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .offscreenMultiRenderWindow.getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { ToolModes } from '../../enums';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode !== ToolModes.Active) {\n                return;\n            }\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport BidirectionalTool from '../annotation/BidirectionalTool';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nclass SegmentBidirectionalTool extends BidirectionalTool {\n    static { this.toolName = 'SegmentBidirectional'; }\n    constructor(toolProps = {}) {\n        super(toolProps);\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportId = viewport.id;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { segmentIndex, segmentationId } = annotation.metadata;\n                const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n                const color = `rgb(${colorArray.slice(0, 3).join(',')})`;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                options.color = color;\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const existingAnnotations = getAllAnnotations();\n        const toolAnnotations = existingAnnotations.filter((annotation) => annotation.metadata.toolName === 'SegmentBidirectional');\n        const existingAnnotation = toolAnnotations.find((annotation) => {\n            const { metadata } = annotation;\n            if (metadata.segmentIndex === options?.segmentIndex &&\n                metadata.segmentationId === options?.segmentationId) {\n                return true;\n            }\n            return false;\n        });\n        if (existingAnnotation) {\n            removeAnnotation(existingAnnotation.annotationUID);\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, } = this.hydrateBase(SegmentBidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                segmentIndex: options?.segmentIndex,\n                segmentationId: options?.segmentationId,\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n}\nexport default SegmentBidirectionalTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { getSegmentIndexAtWorldPoint } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { drawLinkedTextBox as drawLinkedTextBoxSvg } from '../../drawingSvg';\nclass SegmentLabelTool extends BaseTool {\n    constructor(toolProps = {\n        data: {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        },\n    }, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setHoveredSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.data = toolProps.data ?? {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        };\n        this.hoverTimer = null;\n    }\n    _setHoveredSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId } = activeSegmentation;\n        const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n            viewport,\n        });\n        const segment = activeSegmentation.segments[hoveredSegmentIndex];\n        const label = segment?.label;\n        const canvasCoordinates = viewport.worldToCanvas(worldPoint);\n        this._editData = {\n            hoveredSegmentIndex,\n            hoveredSegmentLabel: label,\n            canvasCoordinates,\n            worldPoint,\n        };\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._editData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, worldPoint, } = this._editData;\n        if (!hoveredSegmentIndex) {\n            return;\n        }\n        const textBoxPosition = viewport.worldToCanvas(worldPoint);\n        const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, 'segmentSelectLabelAnnotation', 'segmentSelectLabelTextBox', [hoveredSegmentLabel ? hoveredSegmentLabel : '(unnamed segment)'], textBoxPosition, [canvasCoordinates], {}, {});\n        const left = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const { width, height } = boundingBox;\n        this.data.handles.textBox.worldBoundingBox = {\n            topLeft: viewport.canvasToWorld([left, top]),\n            topRight: viewport.canvasToWorld([left + width, top]),\n            bottomLeft: viewport.canvasToWorld([left, top + height]),\n            bottomRight: viewport.canvasToWorld([left + width, top + height]),\n        };\n    }\n}\nSegmentLabelTool.toolName = 'SegmentLabelTool';\nexport default SegmentLabelTool;\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    static { this.toolName = 'VideoRedaction'; }\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportUID,\n                    renderingEngineUID,\n                    sceneUID: sceneUID,\n                    changeType: ChangeTypes.StatsUpdated,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.metadata.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nexport default VideoRedactionTool;\n","import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nconst Dir = {\n  Forward: 1,\n  Backward: -1\n};\nconst visited = new Set();\nfunction vtkContourLoopExtraction(publicAPI, model) {\n  publicAPI.requestData = (inData, outData) => {\n    const [input] = inData;\n    if (!outData[0]) {\n      outData[0] = vtkPolyData.newInstance();\n    }\n    const [output] = outData;\n    publicAPI.extractContours(input, output);\n    output.modified();\n  };\n  publicAPI.traverseLoop = (pd, dir, startLineId, startPtId, loopPoints) => {\n    let lineId = startLineId;\n    let lastPtId = startPtId;\n    let terminated = false;\n    let numInserted = 0;\n    while (!terminated) {\n      const {\n        cellPointIds\n      } = pd.getCellPoints(lineId);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      lastPtId = cellPointIds[0] !== lastPtId ? cellPointIds[0] : cellPointIds[1];\n      numInserted++;\n\n      // parametric point value\n      const t = dir * numInserted;\n      loopPoints.push({\n        t,\n        ptId: lastPtId\n      });\n      const lineCell = pd.getPointCells(lastPtId);\n      if (lineCell.length !== 2 || lastPtId === startPtId) {\n        // looped\n        return lastPtId;\n      }\n      if (lineCell.length === 2) {\n        // continue along loop\n        lineId = lineCell[0] !== lineId ? lineCell[0] : lineCell[1];\n        visited.add(lineId);\n      } else {\n        // empty or invalid cell\n        terminated = true;\n      }\n    }\n    return lastPtId;\n  };\n  publicAPI.extractContours = (input, output) => {\n    const loops = [];\n    visited.clear();\n    const inLines = input.getLines();\n    output.getPoints().setData(Float32Array.from(input.getPoints().getData()));\n\n    // TODO skip if cached input mtime hasn't changed.\n    // iterate over input lines\n    for (let li = 0; li < inLines.getNumberOfCells(); li++) {\n      if (visited.has(li)) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      const {\n        cellPointIds\n      } = input.getCellPoints(li);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      visited.add(li);\n      const startPtId = cellPointIds[0];\n      const loopPoints = [];\n      loopPoints.push({\n        t: 0,\n        ptId: startPtId\n      });\n      const endPtId = publicAPI.traverseLoop(input, Dir.Forward, li, startPtId, loopPoints);\n      if (startPtId !== endPtId) {\n        // didn't find a loop. Go other direction to see where we end up\n        publicAPI.traverseLoop(input, Dir.Backward, li, startPtId, loopPoints);\n        loopPoints.sort((a, b) => a.t < b.t ? -1 : 1);\n        // make closed contour\n        if (loopPoints.length && loopPoints[0].ptId !== loopPoints[loopPoints.length - 1]?.ptId) {\n          loopPoints.push({\n            ...loopPoints[loopPoints.length - 1]\n          });\n        }\n      }\n      if (loopPoints.length) {\n        loops.push(loopPoints);\n      }\n    }\n\n    // clear output lines\n    const outLines = output.getLines();\n    outLines.resize(0);\n    loops.forEach(loop => {\n      outLines.insertNextCell(loop.map(pt => pt.ptId));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 1);\n  vtkContourLoopExtraction(publicAPI);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkContourLoopExtraction');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\nexport { index as default, extend, newInstance };\n","import { expose } from 'comlink';\nimport { utilities } from '@cornerstonejs/core';\nimport { utilities as ToolsUtilities } from '@cornerstonejs/tools';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkContourLoopExtraction from '@kitware/vtk.js/Filters/General/ContourLoopExtraction';\nimport vtkCutter from '@kitware/vtk.js/Filters/Core/Cutter';\nconst { math: { polyline: { containsPoint, getAABB, projectTo2D }, }, geometricSurfaceUtils: { checkStandardBasis, rotatePoints }, boundingBox: { getBoundingBoxAroundShapeWorld }, planar: { isPlaneIntersectingAABB }, } = ToolsUtilities;\nasync function peerImport(moduleId) {\n    try {\n        if (moduleId === '@icr/polyseg-wasm') {\n            return import('@icr/polyseg-wasm');\n        }\n    }\n    catch (error) {\n        console.warn('Error importing module:', error);\n        return null;\n    }\n}\nconst polySegConverters = {\n    polySeg: null,\n    polySegInitializing: false,\n    polySegInitializingPromise: null,\n    async initializePolySeg(progressCallback) {\n        let ICRPolySeg;\n        try {\n            ICRPolySeg = (await peerImport('@icr/polyseg-wasm')).default;\n        }\n        catch (error) {\n            console.error(error);\n            console.debug(\"Warning: '@icr/polyseg-wasm' module not found. Please install it separately.\");\n            return;\n        }\n        if (this.polySegInitializing) {\n            await this.polySegInitializingPromise;\n            return;\n        }\n        if (this.polySeg?.instance) {\n            return;\n        }\n        this.polySegInitializing = true;\n        this.polySegInitializingPromise = new Promise((resolve) => {\n            this.polySeg = new ICRPolySeg();\n            this.polySeg\n                .initialize({\n                updateProgress: progressCallback,\n            })\n                .then(() => {\n                this.polySegInitializing = false;\n                resolve();\n            });\n        });\n        await this.polySegInitializingPromise;\n    },\n    async convertContourToSurface(args, ...callbacks) {\n        const { polylines, numPointsArray } = args;\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = await this.polySeg.instance.convertContourRoiToSurface(polylines, numPointsArray);\n        return results;\n    },\n    async convertLabelmapToSurface(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertLabelmapToSurface(args.scalarData, args.dimensions, args.spacing, args.direction, args.origin, [args.segmentIndex]);\n        const rotationInfo = checkStandardBasis(args.direction);\n        if (!rotationInfo.isStandard) {\n            const rotatedPoints = rotatePoints(rotationInfo.rotationMatrix, args.origin, results.points);\n            results.points = [...rotatedPoints];\n        }\n        return results;\n    },\n    async convertContourToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentIndices, scalarData, annotationUIDsInSegmentMap, dimensions, origin, direction, spacing, } = args;\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const imageData = vtkImageData.newInstance();\n        imageData.setDimensions(dimensions);\n        imageData.setOrigin(origin);\n        imageData.setDirection(direction);\n        imageData.setSpacing(spacing);\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: scalarData,\n        });\n        imageData.getPointData().setScalars(scalarArray);\n        imageData.modified();\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                    dimensions,\n                    scalarData,\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        return segmentationVoxelManager.scalarData;\n    },\n    async convertContourToStackLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentationsInfo, annotationUIDsInSegmentMap, segmentIndices } = args;\n        const segmentationVoxelManagers = new Map();\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { dimensions, scalarData, direction, spacing, origin } = segmentationInfo;\n            const manager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData,\n            });\n            const imageData = vtkImageData.newInstance();\n            imageData.setDimensions(dimensions);\n            imageData.setOrigin(origin);\n            imageData.setDirection(direction);\n            imageData.setSpacing(spacing);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: scalarData,\n            });\n            imageData.getPointData().setScalars(scalarArray);\n            imageData.modified();\n            segmentationVoxelManagers.set(referencedImageId, { manager, imageData });\n        });\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline, referencedImageId } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const { manager: segmentationVoxelManager, imageData } = segmentationVoxelManagers.get(referencedImageId);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createImageVoxelManager({\n                    width: imageData.getDimensions()[0],\n                    height: imageData.getDimensions()[1],\n                    scalarData: imageData.getPointData().getScalars().getData(),\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { manager: segmentationVoxelManager } = segmentationVoxelManagers.get(referencedImageId);\n            segmentationInfo.scalarData = segmentationVoxelManager.scalarData;\n        });\n        return segmentationsInfo;\n    },\n    async convertSurfaceToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertSurfaceToLabelmap(args.points, args.polys, args.dimensions, args.spacing, args.direction, args.origin);\n        return results;\n    },\n    async convertSurfacesToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentsInfo } = args;\n        const promises = Array.from(segmentsInfo.keys()).map((segmentIndex) => {\n            const { points, polys } = segmentsInfo.get(segmentIndex);\n            const result = this.polySeg.instance.convertSurfaceToLabelmap(points, polys, args.dimensions, args.spacing, args.direction, args.origin);\n            return {\n                ...result,\n                segmentIndex,\n            };\n        });\n        const results = await Promise.all(promises);\n        const targetImageData = vtkImageData.newInstance();\n        targetImageData.setDimensions(args.dimensions);\n        targetImageData.setOrigin(args.origin);\n        targetImageData.setSpacing(args.spacing);\n        targetImageData.setDirection(args.direction);\n        const totalSize = args.dimensions[0] * args.dimensions[1] * args.dimensions[2];\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: new Uint8Array(totalSize),\n        });\n        targetImageData.getPointData().setScalars(scalarArray);\n        targetImageData.modified();\n        const { dimensions } = args;\n        const scalarData = targetImageData.getPointData().getScalars().getData();\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const outputVolumesInfo = results.map((result) => {\n            const { data, dimensions, direction, origin, spacing } = result;\n            const volume = vtkImageData.newInstance();\n            volume.setDimensions(dimensions);\n            volume.setOrigin(origin);\n            volume.setSpacing(spacing);\n            volume.setDirection(direction);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: data,\n            });\n            volume.getPointData().setScalars(scalarArray);\n            volume.modified();\n            const voxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData: data,\n            });\n            const extent = volume.getExtent();\n            return {\n                volume,\n                voxelManager,\n                extent,\n                scalarData: data,\n                segmentIndex: result.segmentIndex,\n            };\n        });\n        const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions: targetImageData.getDimensions(),\n            scalarData: targetImageData.getPointData().getScalars().getData(),\n        });\n        voxels.forEach(({ pointIJK, pointLPS }) => {\n            try {\n                for (const volumeInfo of outputVolumesInfo) {\n                    const { volume, extent, voxelManager, segmentIndex } = volumeInfo;\n                    const index = volume.worldToIndex(pointLPS);\n                    if (index[0] < extent[0] ||\n                        index[0] > extent[1] ||\n                        index[1] < extent[2] ||\n                        index[1] > extent[3] ||\n                        index[2] < extent[4] ||\n                        index[2] > extent[5]) {\n                        continue;\n                    }\n                    const roundedIndex = index.map(Math.round);\n                    const value = voxelManager.getAtIJK(...roundedIndex);\n                    if (value > 0) {\n                        segmentationVoxelManager.setAtIJKPoint(pointIJK, segmentIndex);\n                        break;\n                    }\n                }\n            }\n            catch (error) {\n            }\n        }, { imageData: targetImageData });\n        return segmentationVoxelManager.scalarData;\n    },\n    getSurfacesAABBs({ surfacesInfo }) {\n        const aabbs = new Map();\n        for (const { points, id } of surfacesInfo) {\n            const aabb = getAABB(points, { numDimensions: 3 });\n            aabbs.set(id, aabb);\n        }\n        return aabbs;\n    },\n    cutSurfacesIntoPlanes({ planesInfo, surfacesInfo, surfacesAABB = new Map() }, progressCallback, updateCacheCallback) {\n        const numberOfPlanes = planesInfo.length;\n        const cutter = vtkCutter.newInstance();\n        const plane1 = vtkPlane.newInstance();\n        cutter.setCutFunction(plane1);\n        const surfacePolyData = vtkPolyData.newInstance();\n        try {\n            for (const [index, planeInfo] of planesInfo.entries()) {\n                const { sliceIndex, planes } = planeInfo;\n                const polyDataResults = new Map();\n                for (const polyDataInfo of surfacesInfo) {\n                    const { points, polys, id, segmentIndex } = polyDataInfo;\n                    const aabb3 = surfacesAABB.get(id) || getAABB(points, { numDimensions: 3 });\n                    if (!surfacesAABB.has(id)) {\n                        surfacesAABB.set(id, aabb3);\n                    }\n                    const { minX, minY, minZ, maxX, maxY, maxZ } = aabb3;\n                    const { origin, normal } = planes[0];\n                    if (!isPlaneIntersectingAABB(origin, normal, minX, minY, minZ, maxX, maxY, maxZ)) {\n                        continue;\n                    }\n                    surfacePolyData.getPoints().setData(points, 3);\n                    surfacePolyData.getPolys().setData(polys, 3);\n                    surfacePolyData.modified();\n                    cutter.setInputData(surfacePolyData);\n                    plane1.setOrigin(origin);\n                    plane1.setNormal(normal);\n                    try {\n                        cutter.update();\n                    }\n                    catch (e) {\n                        console.warn('Error during clipping', e);\n                        continue;\n                    }\n                    const polyData = cutter.getOutputData();\n                    const cutterOutput = polyData;\n                    cutterOutput.buildLinks();\n                    const loopExtraction = vtkContourLoopExtraction.newInstance();\n                    loopExtraction.setInputData(cutterOutput);\n                    const loopOutput = loopExtraction.getOutputData();\n                    if (polyData) {\n                        polyDataResults.set(segmentIndex, {\n                            points: loopOutput.getPoints().getData(),\n                            lines: loopOutput.getLines().getData(),\n                            numberOfCells: loopOutput.getLines().getNumberOfCells(),\n                            segmentIndex,\n                        });\n                    }\n                }\n                progressCallback({ progress: (index + 1) / numberOfPlanes });\n                updateCacheCallback({ sliceIndex, polyDataResults });\n            }\n        }\n        catch (e) {\n            console.warn('Error during processing', e);\n        }\n        finally {\n            surfacesInfo = null;\n            plane1.delete();\n        }\n    },\n};\nexpose(polySegConverters);\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","import { state } from '../store/state';\nimport { getEnabledElement } from '@cornerstonejs/core';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction getSvgDrawingHelper(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement;\n    const canvasHash = `${viewportId}:${renderingEngineId}`;\n    const svgLayerElement = _getSvgLayer(element);\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        state.svgNodeCache[canvasHash][cacheKey].touched = false;\n    });\n    return {\n        svgLayerElement: svgLayerElement,\n        svgNodeCacheForCanvas: state.svgNodeCache,\n        getSvgNode: getSvgNode.bind(this, canvasHash),\n        appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n        setNodeTouched: setNodeTouched.bind(this, canvasHash),\n        clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n    };\n}\nfunction _getSvgLayer(element) {\n    const viewportElement = `.${VIEWPORT_ELEMENT}`;\n    const internalDivElement = element.querySelector(viewportElement);\n    const svgLayer = internalDivElement?.querySelector(':scope > .svg-layer');\n    return svgLayer;\n}\nfunction getSvgNode(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        return state.svgNodeCache[canvasHash][cacheKey].domRef;\n    }\n}\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return null;\n    }\n    state.svgNodeCache[canvasHash][cacheKey] = {\n        touched: true,\n        domRef: svgNode,\n    };\n    svgLayerElement.appendChild(svgNode);\n}\nfunction setNodeTouched(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        state.svgNodeCache[canvasHash][cacheKey].touched = true;\n    }\n}\nfunction clearUntouched(svgLayerElement, canvasHash) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n        if (!cacheEntry.touched && cacheEntry.domRef) {\n            svgLayerElement.removeChild(cacheEntry.domRef);\n            delete state.svgNodeCache[canvasHash][cacheKey];\n        }\n    });\n}\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\nfunction draw(element, fn) {\n    const svgDrawingHelper = getSvgDrawingHelper(element);\n    fn(svgDrawingHelper);\n    svgDrawingHelper.clearUntouched();\n}\nexport default draw;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawCircle(svgDrawingHelper, annotationUID, circleUID, center, radius, options = {}, dataId = '') {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n    const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        r: `${radius}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingCircleElement) {\n        setAttributesIfNecessary(attributes, existingCircleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newCircleElement = document.createElementNS(svgns, 'circle');\n        if (dataId !== '') {\n            newCircleElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newCircleElement);\n        svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n    }\n}\nexport default drawCircle;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import drawHandle from './drawHandle';\nfunction drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, handlePoints, options = {}) {\n    handlePoints.forEach((handle, i) => {\n        drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options, i);\n    });\n}\nexport default drawHandles;\n","import drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nfunction drawLink(svgDrawingHelper, annotationUID, linkUID, annotationAnchorPoints, refPoint, boundingBox, options = {}) {\n    const start = annotationAnchorPoints.length > 0\n        ? findClosestPoint(annotationAnchorPoints, refPoint)\n        : refPoint;\n    const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n    const end = findClosestPoint(boundingBoxPoints, start);\n    const mergedOptions = Object.assign({\n        color: 'rgb(255, 255, 0)',\n        lineWidth: '1',\n        lineDash: '2,3',\n    }, options);\n    drawLine(svgDrawingHelper, annotationUID, `link-${linkUID}`, start, end, mergedOptions);\n}\nfunction _boundingBoxPoints(boundingBox) {\n    const { x: left, y: top, height, width } = boundingBox;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const topMiddle = [left + halfWidth, top];\n    const leftMiddle = [left, top + halfHeight];\n    const bottomMiddle = [left + halfWidth, top + height];\n    const rightMiddle = [left + width, top + halfHeight];\n    return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\nexport default drawLink;\n","import drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nfunction drawLinkedTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, annotationAnchorPoints, textBox, options = {}) {\n    const mergedOptions = Object.assign({\n        handleRadius: '6',\n        centering: {\n            x: false,\n            y: true,\n        },\n    }, options);\n    const canvasBoundingBox = drawTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, mergedOptions);\n    drawLink(svgDrawingHelper, annotationUID, textBoxUID, annotationAnchorPoints, textBoxPosition, canvasBoundingBox, mergedOptions);\n    return canvasBoundingBox;\n}\nexport default drawLinkedTextBox;\n","import _getHash from './_getHash';\nimport drawRectByCoordinates from './drawRectByCoordinates';\nexport default function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = '') {\n    const topLeft = [start[0], start[1]];\n    const topRight = [end[0], start[1]];\n    const bottomLeft = [start[0], end[1]];\n    const bottomRight = [end[0], end[1]];\n    drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, [topLeft, topRight, bottomLeft, bottomRight], options, dataId);\n}\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import drawLine from './drawLine';\nconst svgns = 'http://www.w3.org/2000/svg';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { viaMarker = false, color = 'rgb(0, 255, 0)', markerSize = 10, } = options;\n    if (!viaMarker) {\n        legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n        return;\n    }\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const markerBaseId = `arrow-${annotationUID}`;\n    const markerFullId = `${markerBaseId}-${layerId}`;\n    const defs = svgDrawingHelper.svgLayerElement.querySelector('defs');\n    let arrowMarker = defs.querySelector(`#${markerFullId}`);\n    if (!arrowMarker) {\n        arrowMarker = document.createElementNS(svgns, 'marker');\n        arrowMarker.setAttribute('id', markerFullId);\n        arrowMarker.setAttribute('viewBox', '0 0 10 10');\n        arrowMarker.setAttribute('refX', '8');\n        arrowMarker.setAttribute('refY', '5');\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        arrowMarker.setAttribute('orient', 'auto');\n        const arrowPath = document.createElementNS(svgns, 'path');\n        arrowPath.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        arrowPath.setAttribute('fill', color);\n        arrowMarker.appendChild(arrowPath);\n        defs.appendChild(arrowMarker);\n    }\n    else {\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        const arrowPath = arrowMarker.querySelector('path');\n        if (arrowPath) {\n            arrowPath.setAttribute('fill', color);\n        }\n    }\n    options.markerEndId = markerFullId;\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n}\nfunction legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    const { color = 'rgb(0, 255, 0)', width = 2, lineWidth, lineDash } = options;\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","import { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport getViewportsForAnnotation from '../../../utilities/getViewportsForAnnotation';\nimport * as math from '../../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport { addAnnotation, removeAnnotation, getAllAnnotations, getChildAnnotations, addChildAnnotation, clearParentAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { ContourWindingDirection } from '../../../types/ContourAnnotation';\nimport { triggerAnnotationModified } from '../../../stateManagement/annotation/helpers/state';\nimport updateContourPolyline from '../../../utilities/contours/updateContourPolyline';\nimport { addContourSegmentationAnnotation, areSameSegment, isContourSegmentationAnnotation, removeContourSegmentationAnnotation, } from '../../../utilities/contourSegmentation';\nimport { getToolGroupForViewport } from '../../../store/ToolGroupManager';\nimport { hasTool, hasToolByName } from '../../../store/addTool';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default async function contourSegmentationCompletedListener(evt) {\n    const sourceAnnotation = evt.detail\n        .annotation;\n    if (!isContourSegmentationAnnotation(sourceAnnotation)) {\n        return;\n    }\n    const viewport = getViewport(sourceAnnotation);\n    const contourSegmentationAnnotations = getValidContourSegmentationAnnotations(viewport, sourceAnnotation);\n    if (!contourSegmentationAnnotations.length) {\n        return;\n    }\n    const sourcePolyline = convertContourPolylineToCanvasSpace(sourceAnnotation.data.contour.polyline, viewport);\n    const targetAnnotationInfo = findIntersectingContour(viewport, sourcePolyline, contourSegmentationAnnotations);\n    if (!targetAnnotationInfo) {\n        return;\n    }\n    const { targetAnnotation, targetPolyline, isContourHole } = targetAnnotationInfo;\n    if (isContourHole) {\n        const { contourHoleProcessingEnabled = false } = evt.detail;\n        if (!contourHoleProcessingEnabled) {\n            return;\n        }\n        createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n    }\n    else {\n        combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline);\n    }\n}\nfunction isFreehandContourSegToolRegisteredForViewport(viewport, silent = false) {\n    const toolName = 'PlanarFreehandContourSegmentationTool';\n    const toolGroup = getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n    let errorMessage;\n    if (!toolGroup.hasTool(toolName)) {\n        errorMessage = `Tool ${toolName} not added to ${toolGroup.id} toolGroup`;\n    }\n    else if (!toolGroup.getToolOptions(toolName)) {\n        errorMessage = `Tool ${toolName} must be in active/passive state`;\n    }\n    if (errorMessage && !silent) {\n        console.warn(errorMessage);\n    }\n    return !errorMessage;\n}\nfunction getViewport(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    const viewportWithToolRegistered = viewports.find((viewport) => isFreehandContourSegToolRegisteredForViewport(viewport, true));\n    return viewportWithToolRegistered ?? viewports[0];\n}\nfunction convertContourPolylineToCanvasSpace(polyline, viewport) {\n    const numPoints = polyline.length;\n    const projectedPolyline = new Array(numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n    }\n    return projectedPolyline;\n}\nfunction getValidContourSegmentationAnnotations(viewport, sourceAnnotation) {\n    const { annotationUID: sourceAnnotationUID } = sourceAnnotation;\n    const allAnnotations = getAllAnnotations();\n    return allAnnotations.filter((targetAnnotation) => targetAnnotation.annotationUID &&\n        targetAnnotation.annotationUID !== sourceAnnotationUID &&\n        isContourSegmentationAnnotation(targetAnnotation) &&\n        areSameSegment(targetAnnotation, sourceAnnotation) &&\n        viewport.isReferenceViewable(targetAnnotation.metadata));\n}\nfunction findIntersectingContour(viewport, sourcePolyline, contourSegmentationAnnotations) {\n    const sourceAABB = math.polyline.getAABB(sourcePolyline);\n    for (let i = 0; i < contourSegmentationAnnotations.length; i++) {\n        const targetAnnotation = contourSegmentationAnnotations[i];\n        const targetPolyline = convertContourPolylineToCanvasSpace(targetAnnotation.data.contour.polyline, viewport);\n        const targetAABB = math.polyline.getAABB(targetPolyline);\n        const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n        const lineSegmentsIntersect = aabbIntersect &&\n            math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n        const isContourHole = aabbIntersect &&\n            !lineSegmentsIntersect &&\n            math.polyline.containsPoints(targetPolyline, sourcePolyline);\n        if (lineSegmentsIntersect || isContourHole) {\n            return { targetAnnotation, targetPolyline, isContourHole };\n        }\n    }\n}\nexport function createPolylineHole(viewport, targetAnnotation, holeAnnotation) {\n    const { windingDirection: targetWindingDirection } = targetAnnotation.data.contour;\n    const { windingDirection: holeWindingDirection } = holeAnnotation.data.contour;\n    addChildAnnotation(targetAnnotation, holeAnnotation);\n    removeContourSegmentationAnnotation(holeAnnotation);\n    const { contour: holeContour } = holeAnnotation.data;\n    const holePolyline = convertContourPolylineToCanvasSpace(holeContour.polyline, viewport);\n    updateContourPolyline(holeAnnotation, {\n        points: holePolyline,\n        closed: holeContour.closed,\n    }, viewport);\n    const { element } = viewport;\n    const updatedToolNames = new Set([\n        DEFAULT_CONTOUR_SEG_TOOL_NAME,\n        targetAnnotation.metadata.toolName,\n        holeAnnotation.metadata.toolName,\n    ]);\n    for (const toolName of updatedToolNames.values()) {\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n}\nfunction getContourHolesData(viewport, annotation) {\n    return getChildAnnotations(annotation).map((holeAnnotation) => {\n        const polyline = convertContourPolylineToCanvasSpace(holeAnnotation.data.contour.polyline, viewport);\n        return { annotation: holeAnnotation, polyline };\n    });\n}\nfunction combinePolylines(viewport, targetAnnotation, targetPolyline, sourceAnnotation, sourcePolyline) {\n    if (!hasToolByName(DEFAULT_CONTOUR_SEG_TOOL_NAME)) {\n        console.warn(`${DEFAULT_CONTOUR_SEG_TOOL_NAME} is not registered in cornerstone`);\n        return;\n    }\n    if (!isFreehandContourSegToolRegisteredForViewport(viewport)) {\n        return;\n    }\n    const sourceStartPoint = sourcePolyline[0];\n    const mergePolylines = math.polyline.containsPoint(targetPolyline, sourceStartPoint);\n    const contourHolesData = getContourHolesData(viewport, targetAnnotation);\n    const unassignedContourHolesSet = new Set(contourHolesData);\n    const reassignedContourHolesMap = new Map();\n    const assignHoleToPolyline = (parentPolyline, holeData) => {\n        let holes = reassignedContourHolesMap.get(parentPolyline);\n        if (!holes) {\n            holes = [];\n            reassignedContourHolesMap.set(parentPolyline, holes);\n        }\n        holes.push(holeData);\n        unassignedContourHolesSet.delete(holeData);\n    };\n    const newPolylines = [];\n    if (mergePolylines) {\n        const mergedPolyline = math.polyline.mergePolylines(targetPolyline, sourcePolyline);\n        newPolylines.push(mergedPolyline);\n        Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => assignHoleToPolyline(mergedPolyline, holeData));\n    }\n    else {\n        const subtractedPolylines = math.polyline.subtractPolylines(targetPolyline, sourcePolyline);\n        subtractedPolylines.forEach((newPolyline) => {\n            newPolylines.push(newPolyline);\n            Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => {\n                const containsHole = math.polyline.containsPoints(newPolyline, holeData.polyline);\n                if (containsHole) {\n                    assignHoleToPolyline(newPolyline, holeData);\n                    unassignedContourHolesSet.delete(holeData);\n                }\n            });\n        });\n    }\n    Array.from(reassignedContourHolesMap.values()).forEach((contourHolesDataArray) => contourHolesDataArray.forEach((contourHoleData) => clearParentAnnotation(contourHoleData.annotation)));\n    const { element } = viewport;\n    const enabledElement = getEnabledElement(element);\n    const { metadata, data } = targetAnnotation;\n    const { handles, segmentation } = data;\n    const { textBox } = handles;\n    removeAnnotation(sourceAnnotation.annotationUID);\n    removeAnnotation(targetAnnotation.annotationUID);\n    for (let i = 0; i < newPolylines.length; i++) {\n        const polyline = newPolylines[i];\n        const startPoint = viewport.canvasToWorld(polyline[0]);\n        const endPoint = viewport.canvasToWorld(polyline[polyline.length - 1]);\n        const newAnnotation = {\n            metadata: {\n                ...metadata,\n                toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n                originalToolName: metadata.originalToolName || metadata.toolName,\n            },\n            data: {\n                cachedStats: {},\n                handles: {\n                    points: [startPoint, endPoint],\n                    textBox: textBox ? { ...textBox } : undefined,\n                },\n                contour: {\n                    polyline: [],\n                    closed: true,\n                },\n                spline: targetAnnotation.data.spline,\n                segmentation: {\n                    ...segmentation,\n                },\n            },\n            annotationUID: csUtils.uuidv4(),\n            highlighted: true,\n            invalidated: true,\n            isLocked: false,\n            isVisible: undefined,\n            interpolationUID: targetAnnotation.interpolationUID,\n            interpolationCompleted: targetAnnotation.interpolationCompleted,\n        };\n        updateContourPolyline(newAnnotation, {\n            points: polyline,\n            closed: true,\n            targetWindingDirection: ContourWindingDirection.Clockwise,\n        }, viewport);\n        addAnnotation(newAnnotation, element);\n        addContourSegmentationAnnotation(newAnnotation);\n        triggerAnnotationModified(newAnnotation, viewport.element);\n        reassignedContourHolesMap\n            .get(polyline)\n            ?.forEach((holeData) => addChildAnnotation(newAnnotation, holeData.annotation));\n    }\n    updateViewports(enabledElement, targetAnnotation, sourceAnnotation);\n}\nfunction updateViewports(enabledElement, targetAnnotation, sourceAnnotation) {\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    const updatedTtoolNames = new Set([\n        DEFAULT_CONTOUR_SEG_TOOL_NAME,\n        targetAnnotation.metadata.toolName,\n        sourceAnnotation.metadata.toolName,\n    ]);\n    for (const toolName of updatedTtoolNames.values()) {\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, toolName);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    return new Promise((resolve) => window.requestAnimationFrame(resolve));\n}\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntries } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    if (!element) {\n        return;\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .flatMap((representation) => {\n        return getLabelmapActorEntries(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);\n            return derivedImageIds?.includes(actor.referencedId);\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n        if (!derivedImageIds) {\n            return;\n        }\n        const updateSegmentationActor = (derivedImageId) => {\n            const derivedImage = cache.getImage(derivedImageId);\n            if (!derivedImage) {\n                console.warn('No derived image found in the cache for segmentation representation', representation);\n                return;\n            }\n            const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n            if (!segmentationActorInput) {\n                const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n                const currentImage = cache.getImage(currentImageId) ||\n                    {\n                        imageId: currentImageId,\n                    };\n                const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n                const originToUse = currentOrigin;\n                const constructor = derivedImage.voxelManager.getConstructor();\n                const newPixelData = derivedImage.voxelManager.getScalarData();\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: new constructor(newPixelData),\n                });\n                const imageData = vtkImageData.newInstance();\n                imageData.setDimensions(dimensions[0], dimensions[1], 1);\n                imageData.setSpacing(spacing);\n                imageData.setDirection(direction);\n                imageData.setOrigin(originToUse);\n                imageData.getPointData().setScalars(scalarArray);\n                imageData.modified();\n                viewport.addImages([\n                    {\n                        imageId: derivedImageId,\n                        representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}-${derivedImage.imageId}`,\n                        callback: ({ imageActor }) => {\n                            imageActor.getMapper().setInputData(imageData);\n                        },\n                    },\n                ]);\n                triggerSegmentationRender(viewportId);\n                return;\n            }\n            else {\n                const segmentationImageData = segmentationActorInput.actor\n                    .getMapper()\n                    .getInputData();\n                if (segmentationImageData.setDerivedImage) {\n                    segmentationImageData.setDerivedImage(derivedImage);\n                }\n                else {\n                    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n                }\n            }\n        };\n        derivedImageIds.forEach(updateSegmentationActor);\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport * as Enums from '../../enums';\nimport { utilities } from '@cornerstonejs/core';\nclass SegmentationStyle {\n    constructor() {\n        this.config = {\n            global: {},\n            segmentations: {},\n            viewportsStyle: {},\n        };\n    }\n    setStyle(specifier, styles) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        const currentStyles = this.getStyle(specifier);\n        let updatedStyles;\n        if (!viewportId && !segmentationId) {\n            updatedStyles = {\n                ...currentStyles,\n                ...styles,\n            };\n        }\n        else {\n            updatedStyles = this.copyActiveToInactiveIfNotProvided({\n                ...currentStyles,\n                ...styles,\n            }, type);\n        }\n        if (!type) {\n            throw new Error('Type is required to set a style');\n        }\n        if (viewportId) {\n            if (!this.config.viewportsStyle[viewportId]) {\n                this.config.viewportsStyle[viewportId] = {\n                    renderInactiveSegmentations: false,\n                    representations: {},\n                };\n            }\n            const representations = this.config.viewportsStyle[viewportId].representations;\n            if (segmentationId) {\n                if (!representations[segmentationId]) {\n                    representations[segmentationId] = {};\n                }\n                if (!representations[segmentationId][type]) {\n                    representations[segmentationId][type] = {};\n                }\n                const repConfig = representations[segmentationId][type];\n                if (segmentIndex !== undefined) {\n                    if (!repConfig.perSegment) {\n                        repConfig.perSegment = {};\n                    }\n                    repConfig.perSegment[segmentIndex] = updatedStyles;\n                }\n                else {\n                    repConfig.allSegments = updatedStyles;\n                }\n            }\n            else {\n                const ALL_SEGMENTATIONS_KEY = '__allSegmentations__';\n                if (!representations[ALL_SEGMENTATIONS_KEY]) {\n                    representations[ALL_SEGMENTATIONS_KEY] = {};\n                }\n                if (!representations[ALL_SEGMENTATIONS_KEY][type]) {\n                    representations[ALL_SEGMENTATIONS_KEY][type] = {};\n                }\n                representations[ALL_SEGMENTATIONS_KEY][type].allSegments =\n                    updatedStyles;\n            }\n        }\n        else if (segmentationId) {\n            if (!this.config.segmentations[segmentationId]) {\n                this.config.segmentations[segmentationId] = {};\n            }\n            if (!this.config.segmentations[segmentationId][type]) {\n                this.config.segmentations[segmentationId][type] = {};\n            }\n            const segConfig = this.config.segmentations[segmentationId][type];\n            if (segmentIndex !== undefined) {\n                if (!segConfig.perSegment) {\n                    segConfig.perSegment = {};\n                }\n                segConfig.perSegment[segmentIndex] = updatedStyles;\n            }\n            else {\n                segConfig.allSegments = updatedStyles;\n            }\n        }\n        else {\n            this.config.global[type] = updatedStyles;\n        }\n    }\n    copyActiveToInactiveIfNotProvided(styles, type) {\n        const processedStyles = { ...styles };\n        if (type === Enums.SegmentationRepresentations.Labelmap) {\n            const labelmapStyles = processedStyles;\n            labelmapStyles.renderOutlineInactive ??= labelmapStyles.renderOutline;\n            labelmapStyles.outlineWidthInactive ??= labelmapStyles.outlineWidth;\n            labelmapStyles.renderFillInactive ??= labelmapStyles.renderFill;\n            labelmapStyles.fillAlphaInactive ??= labelmapStyles.fillAlpha;\n            labelmapStyles.outlineOpacityInactive ??= labelmapStyles.outlineOpacity;\n        }\n        else if (type === Enums.SegmentationRepresentations.Contour) {\n            const contourStyles = processedStyles;\n            contourStyles.outlineWidthInactive ??= contourStyles.outlineWidth;\n            contourStyles.outlineOpacityInactive ??= contourStyles.outlineOpacity;\n            contourStyles.outlineDashInactive ??= contourStyles.outlineDash;\n            contourStyles.renderOutlineInactive ??= contourStyles.renderOutline;\n            contourStyles.renderFillInactive ??= contourStyles.renderFill;\n            contourStyles.fillAlphaInactive ??= contourStyles.fillAlpha;\n        }\n        return processedStyles;\n    }\n    getStyle(specifier) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        let combinedStyle = this.getDefaultStyle(type);\n        let renderInactiveSegmentations = false;\n        if (this.config.global[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.global[type],\n            };\n        }\n        if (this.config.segmentations[segmentationId]?.[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.segmentations[segmentationId][type].allSegments,\n            };\n            if (segmentIndex !== undefined &&\n                this.config.segmentations[segmentationId][type].perSegment?.[segmentIndex]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.segmentations[segmentationId][type].perSegment[segmentIndex],\n                };\n            }\n        }\n        if (viewportId && this.config.viewportsStyle[viewportId]) {\n            renderInactiveSegmentations =\n                this.config.viewportsStyle[viewportId].renderInactiveSegmentations;\n            const allSegmentationsKey = '__allSegmentations__';\n            if (this.config.viewportsStyle[viewportId].representations[allSegmentationsKey]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[allSegmentationsKey][type].allSegments,\n                };\n            }\n            if (segmentationId &&\n                this.config.viewportsStyle[viewportId].representations[segmentationId]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].allSegments,\n                };\n                if (segmentIndex !== undefined &&\n                    this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment?.[segmentIndex]) {\n                    combinedStyle = {\n                        ...combinedStyle,\n                        ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment[segmentIndex],\n                    };\n                }\n            }\n        }\n        return combinedStyle;\n    }\n    getRenderInactiveSegmentations(viewportId) {\n        return this.config.viewportsStyle[viewportId]?.renderInactiveSegmentations;\n    }\n    setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n        if (!this.config.viewportsStyle[viewportId]) {\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations: false,\n                representations: {},\n            };\n        }\n        this.config.viewportsStyle[viewportId].renderInactiveSegmentations =\n            renderInactiveSegmentations;\n    }\n    getDefaultStyle(type) {\n        switch (type) {\n            case Enums.SegmentationRepresentations.Labelmap:\n                return getDefaultLabelmapConfig();\n            case Enums.SegmentationRepresentations.Contour:\n                return getDefaultContourConfig();\n            case Enums.SegmentationRepresentations.Surface:\n                return {};\n            default:\n                throw new Error(`Unknown representation type: ${type}`);\n        }\n    }\n    clearSegmentationStyle(segmentationId) {\n        if (this.config.segmentations[segmentationId]) {\n            delete this.config.segmentations[segmentationId];\n        }\n    }\n    clearAllSegmentationStyles() {\n        this.config.segmentations = {};\n    }\n    clearViewportStyle(viewportId) {\n        if (this.config.viewportsStyle[viewportId]) {\n            delete this.config.viewportsStyle[viewportId];\n        }\n    }\n    clearAllViewportStyles() {\n        for (const viewportId in this.config.viewportsStyle) {\n            const viewportStyle = this.config.viewportsStyle[viewportId];\n            const renderInactiveSegmentations = viewportStyle.renderInactiveSegmentations;\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations,\n                representations: {},\n            };\n        }\n    }\n    resetToGlobalStyle() {\n        this.clearAllSegmentationStyles();\n        this.clearAllViewportStyles();\n    }\n    hasCustomStyle(specifier) {\n        const { type } = specifier;\n        const style = this.getStyle(specifier);\n        const defaultStyle = this.getDefaultStyle(type);\n        return !utilities.deepEqual(style, defaultStyle);\n    }\n}\nconst segmentationStyle = new SegmentationStyle();\nexport { segmentationStyle };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { cache } from '@cornerstonejs/core';\nfunction normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation, config } = segmentationInput;\n    const { type, data: inputData } = representation;\n    const data = inputData ? { ...inputData } : {};\n    if (!data) {\n        throw new Error('Segmentation representation data may not be undefined');\n    }\n    if (type === SegmentationRepresentations.Contour) {\n        normalizeContourData(data);\n    }\n    const normalizedSegments = normalizeSegments(config?.segments, type, data);\n    delete config?.segments;\n    return {\n        segmentationId,\n        label: config?.label ?? null,\n        cachedStats: config?.cachedStats ?? {},\n        segments: normalizedSegments,\n        representationData: {\n            [type]: {\n                ...data,\n            },\n        },\n    };\n}\nfunction normalizeContourData(contourData) {\n    contourData.geometryIds = contourData.geometryIds ?? [];\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n}\nfunction normalizeSegments(segmentsConfig, type, data) {\n    const normalizedSegments = {};\n    if (segmentsConfig) {\n        Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {\n            normalizedSegments[segmentIndex] = {\n                segmentIndex: Number(segmentIndex),\n                label: segment.label ?? `Segment ${segmentIndex}`,\n                locked: segment.locked ?? false,\n                cachedStats: segment.cachedStats ?? {},\n                active: segment.active ?? false,\n            };\n        });\n    }\n    else if (type === SegmentationRepresentations.Surface) {\n        normalizeSurfaceSegments(normalizedSegments, data);\n    }\n    else {\n        normalizedSegments[1] = createDefaultSegment();\n    }\n    return normalizedSegments;\n}\nfunction normalizeSurfaceSegments(normalizedSegments, surfaceData) {\n    const { geometryIds } = surfaceData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction createDefaultSegment() {\n    return {\n        segmentIndex: 1,\n        label: 'Segment 1',\n        locked: false,\n        cachedStats: {},\n        active: true,\n    };\n}\nexport default normalizeSegmentationInput;\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nexport function addSegmentations(segmentationInputArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationInputArray.forEach((segmentationInput) => {\n        const segmentation = normalizeSegmentationInput(segmentationInput);\n        segmentationStateManager.addSegmentation(segmentation);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentation.segmentationId);\n        }\n    });\n}\nexport default addSegmentations;\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { setSegmentationDirty } from '../../../utilities/segmentation/utilities';\nexport function triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse, segmentIndex) {\n    const eventDetail = {\n        segmentationId,\n        modifiedSlicesToUse,\n        segmentIndex,\n    };\n    setSegmentationDirty(segmentationId);\n    triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getActiveSegmentation(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getActiveSegmentation(viewportId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentationVisibility(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationVisibility(viewportId, specifier);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportSegmentations(viewportId, type) {\n    const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);\n    const segmentations = viewportRepresentations.map((representation) => {\n        if (type && representation.type === type) {\n            return getSegmentation(representation.segmentationId);\n        }\n        return getSegmentation(representation.segmentationId);\n    });\n    const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== undefined);\n    return filteredSegmentations;\n}\nexport function getViewportSegmentationRepresentations(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportRepresentations = state.viewportSegRepresentations[viewportId];\n    return viewportRepresentations;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { updateStackSegmentationState } from '../helpers/updateStackSegmentationState';\nexport async function computeStackLabelmapFromVolume({ volumeId, }) {\n    const segmentationVolume = cache.getVolume(volumeId);\n    return { imageIds: segmentationVolume.imageIds };\n}\nexport function convertVolumeToStackLabelmap({ segmentationId, options, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const { volumeId } = segmentation.representationData\n        .Labelmap;\n    const segmentationVolume = cache.getVolume(volumeId);\n    return updateStackSegmentationState({\n        segmentationId,\n        viewportId: options.viewportId,\n        imageIds: segmentationVolume.imageIds,\n        options,\n    });\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport addRepresentationData from './internalAddRepresentationData';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport * as strategies from './../../tools/segmentation/strategies';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, } from './getCurrentLabelmapImageIdForViewport';\nimport { getActiveSegmentation } from './getActiveSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, helpers, removeSegment, getLabelmapImageIds, addRepresentationData, strategies, segmentationStyle, defaultSegmentationStateManager, getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, getActiveSegmentation, };\n","import { getSegmentation } from './getSegmentation';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nfunction internalAddRepresentationData({ segmentationId, type, data, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`Segmentation ${segmentationId} not found`);\n    }\n    if (segmentation.representationData[type]) {\n        console.warn(`Representation data of type ${type} already exists for segmentation ${segmentationId}, overwriting it.`);\n    }\n    switch (type) {\n        case SegmentationRepresentations.Labelmap:\n            if (data) {\n                segmentation.representationData[type] =\n                    data;\n            }\n            break;\n        case SegmentationRepresentations.Contour:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        case SegmentationRepresentations.Surface:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        default:\n            throw new Error(`Invalid representation type ${type}`);\n    }\n}\nexport default internalAddRepresentationData;\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n        ...config,\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    if (colorLUTOrIndex === undefined) {\n        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n        return index;\n    }\n    if (typeof colorLUTOrIndex === 'number') {\n        return colorLUTOrIndex;\n    }\n    if (Array.isArray(colorLUTOrIndex) &&\n        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {\n        const index = addColorLUT(colorLUTOrIndex);\n        return index;\n    }\n    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n    return index;\n}\nexport { internalAddSegmentationRepresentation };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationRemoved } from './triggerSegmentationEvents';\nimport { removeSegmentationRepresentations } from './removeSegmentationRepresentations';\nexport function removeSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const viewportsWithSegmentation = segmentationStateManager\n        .getAllViewportSegmentationRepresentations()\n        .filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId))\n        .map(({ viewportId }) => viewportId);\n    viewportsWithSegmentation.forEach((viewportId) => {\n        removeSegmentationRepresentations(viewportId, { segmentationId });\n    });\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nexport function removeAllSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentations = segmentationStateManager.getState().segmentations;\n    const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);\n    segmentationIds.forEach((segmentationId) => {\n        removeSegmentation(segmentationId);\n    });\n    segmentationStateManager.resetState();\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\nfunction removeSegmentationRepresentation(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction _removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    const { segmentationId, type } = specifier;\n    _removeRepresentationObject(viewportId, segmentationId, type, immediate);\n    return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n}\nfunction removeAllSegmentationRepresentations() {\n    const state = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();\n    state.forEach(({ viewportId, representations }) => {\n        representations.forEach(({ segmentationId, type }) => {\n            removeSegmentationRepresentation(viewportId, {\n                segmentationId,\n                type,\n            });\n        });\n    });\n    defaultSegmentationStateManager.resetState();\n}\nfunction removeLabelmapRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    }, immediate);\n}\nfunction removeContourRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Contour,\n    }, immediate);\n}\nfunction removeSurfaceRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Surface,\n    }, immediate);\n}\nfunction _removeRepresentationObject(viewportId, segmentationId, type, immediate) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n    representations.forEach((representation) => {\n        if (representation.type === SegmentationRepresentations.Labelmap) {\n            labelmapDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Contour) {\n            contourDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Surface) {\n            surfaceDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n    });\n    const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n    if (viewport) {\n        viewport.render();\n    }\n}\nexport { removeSegmentationRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { getSegmentation } from './getSegmentation';\nimport { getSegmentations } from './getSegmentations';\nimport { addSegmentations } from './addSegmentations';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addColorLUT } from './addColorLUT';\nimport { getColorLUT } from './getColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { removeColorLUT } from './removeColorLUT';\nimport { getViewportSegmentations, getViewportSegmentationRepresentations, } from './getViewportSegmentations';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, } from './getCurrentLabelmapImageIdForViewport';\nimport { updateLabelmapSegmentationImageReferences } from './updateLabelmapSegmentationImageReferences';\nimport { getStackSegmentationImageIdsForViewport } from './getStackSegmentationImageIdsForViewport';\nimport { getSegmentationRepresentation, getSegmentationRepresentations, getSegmentationRepresentationsBySegmentationId, } from './getSegmentationRepresentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction destroy() {\n    defaultSegmentationStateManager.resetState();\n}\nexport { getColorLUT, getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, getNextColorLUTIndex, getSegmentation, getSegmentations, getStackSegmentationImageIdsForViewport, getViewportIdsWithSegmentation, getSegmentationRepresentation, getSegmentationRepresentations, getViewportSegmentationRepresentations, removeColorLUT, getViewportSegmentations, removeSegmentation, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, removeAllSegmentations, addColorLUT, addSegmentations, updateLabelmapSegmentationImageReferences, getSegmentationRepresentationsBySegmentationId, destroy, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { state } from '../state';\nfunction getToolGroupForViewport(viewportId, renderingEngineId) {\n    if (!renderingEngineId) {\n        renderingEngineId = getRenderingEngines().find((re) => re.getViewports().find((vp) => vp.id === viewportId))?.id;\n    }\n    const toolGroupFilteredByIds = state.toolGroups.filter((tg) => tg.viewportsInfo.some((vp) => vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)));\n    if (!toolGroupFilteredByIds.length) {\n        return;\n    }\n    if (toolGroupFilteredByIds.length > 1) {\n        throw new Error(`Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`);\n    }\n    return toolGroupFilteredByIds[0];\n}\nexport default getToolGroupForViewport;\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, [], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { utilities } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport PlanarFreehandROITool from './PlanarFreehandROITool';\nclass PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool {\n    static { this.toolName = 'PlanarFreehandContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    renderAnnotationInstance(renderContext) {\n        const annotation = renderContext.annotation;\n        const { invalidated } = annotation;\n        const renderResult = super.renderAnnotationInstance(renderContext);\n        if (invalidated) {\n            const { segmentationId } = annotation.data.segmentation;\n            triggerSegmentationDataModified(segmentationId);\n        }\n        return renderResult;\n    }\n}\nexport default PlanarFreehandContourSegmentationTool;\n","import { CONSTANTS, getEnabledElement, VolumeViewport, utilities as csUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport * as math from '../../utilities/math';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { drawLinkedTextBox } from '../../drawingSvg';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getLineSegmentIntersectionsCoordinates } from '../../utilities/math/polyline';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport calculatePerimeter from '../../utilities/contours/calculatePerimeter';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { KeyboardBindings, ChangeTypes } from '../../enums';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\nclass PlanarFreehandROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'PlanarFreehandROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            alwaysRenderOpenContourHandles: {\n                enabled: false,\n                radius: 2,\n            },\n            allowOpenContours: true,\n            closeContourProximity: 10,\n            checkCanvasEditFallbackProximity: 6,\n            makeClockWise: true,\n            subPixelResolution: 4,\n            smoothing: {\n                smoothOnAdd: false,\n                smoothOnEdit: false,\n                knotsRatioPercentageOnAdd: 40,\n                knotsRatioPercentageOnEdit: 40,\n            },\n            interpolation: {\n                enabled: false,\n                onInterpolationComplete: null,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            displayOnePointAsCrosshairs: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isEditingClosed = false;\n        this.isEditingOpen = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const annotation = this.createAnnotation(evt);\n            this.addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateDraw(evt, annotation, viewportIdsToRender);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            if (annotation.data.contour.closed) {\n                this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            else {\n                this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { polyline: points } = annotation.data.contour;\n            let previousPoint = viewport.worldToCanvas(points[0]);\n            for (let i = 1; i < points.length; i++) {\n                const p1 = previousPoint;\n                const p2 = viewport.worldToCanvas(points[i]);\n                const canProject = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n                if (canProject) {\n                    return true;\n                }\n                previousPoint = p2;\n            }\n            if (!annotation.data.contour.closed) {\n                return false;\n            }\n            const pStart = viewport.worldToCanvas(points[0]);\n            const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n            return pointCanProjectOnLine(canvasCoords, pStart, pEnd, proximity);\n        };\n        this.cancel = (element) => {\n            const isDrawing = this.isDrawing;\n            const isEditingOpen = this.isEditingOpen;\n            const isEditingClosed = this.isEditingClosed;\n            if (isDrawing) {\n                this.cancelDrawing(element);\n            }\n            else if (isEditingOpen) {\n                this.cancelOpenContourEdit(element);\n            }\n            else if (isEditingClosed) {\n                this.cancelClosedContourEdit(element);\n            }\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { cachedStats } = data;\n            const { polyline: points, closed } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const modalityUnitOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n                const calibratedScale = getCalibratedLengthUnitsAndScale(image, () => {\n                    const polyline = data.contour.polyline;\n                    const numPoints = polyline.length;\n                    const projectedPolyline = new Array(numPoints);\n                    for (let i = 0; i < numPoints; i++) {\n                        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n                    }\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(projectedPolyline);\n                    const topLeftBBWorld = viewport.canvasToWorld([canvasMinX, canvasMinY]);\n                    const topLeftBBIndex = csUtils.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = csUtils.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                if (closed) {\n                    this.updateClosedCachedStats({\n                        targetId,\n                        viewport,\n                        canvasCoordinates,\n                        points,\n                        imageData,\n                        metadata,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                    });\n                }\n                else {\n                    this.updateOpenCachedStats({\n                        metadata,\n                        canvasCoordinates,\n                        targetId,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                    });\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n            const { data } = annotation;\n            const targetId = this.getTargetId(viewport);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n            if (!options.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = '1';\n            const boundingBox = drawLinkedTextBox(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        registerDrawLoop(this);\n        registerEditLoopCommon(this);\n        registerClosedContourEditLoop(this);\n        registerOpenContourEditLoop(this);\n        registerOpenContourEndEditLoop(this);\n        registerRenderMethods(this);\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations || !annotations.length) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let annotationsToDisplay;\n        if (viewport instanceof VolumeViewport) {\n            const camera = viewport.getCamera();\n            const { spacingInNormalDirection } = csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n            annotationsToDisplay = this.filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);\n        }\n        else {\n            annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n        }\n        return annotationsToDisplay;\n    }\n    filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {\n        const { viewPlaneNormal } = camera;\n        const annotationsWithParallelNormals = annotations.filter((td) => {\n            const annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n            const isParallel = Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n                PARALLEL_THRESHOLD;\n            return annotationViewPlaneNormal && isParallel;\n        });\n        if (!annotationsWithParallelNormals.length) {\n            return [];\n        }\n        const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n        const { focalPoint } = camera;\n        const annotationsWithinSlice = [];\n        for (const annotation of annotationsWithParallelNormals) {\n            const data = annotation.data;\n            const point = data.contour.polyline[0];\n            if (!annotation.isVisible) {\n                continue;\n            }\n            const dir = vec3.create();\n            vec3.sub(dir, focalPoint, point);\n            const dot = vec3.dot(dir, viewPlaneNormal);\n            if (Math.abs(dot) < halfSpacingInNormalDirection) {\n                annotationsWithinSlice.push(annotation);\n            }\n        }\n        return annotationsWithinSlice;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const worldPos = evt.detail.currentPoints.world;\n        const contourAnnotation = super.createAnnotation(evt);\n        const onInterpolationComplete = (annotation) => {\n            annotation.data.handles.points.length = 0;\n        };\n        const annotation = csUtils.deepMerge(contourAnnotation, {\n            data: {\n                contour: {\n                    polyline: [[...worldPos]],\n                },\n                label: '',\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n        return annotation;\n    }\n    getAnnotationStyle(context) {\n        return super.getAnnotationStyle(context);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        let renderStatus = false;\n        const { viewport, renderingEngine } = enabledElement;\n        const isDrawing = this.isDrawing;\n        const isEditingOpen = this.isEditingOpen;\n        const isEditingClosed = this.isEditingClosed;\n        if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n            if (this.configuration.displayOnePointAsCrosshairs &&\n                annotation.data.contour.polyline.length === 1) {\n                this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n            }\n            else {\n                this.renderContour(enabledElement, svgDrawingHelper, annotation);\n            }\n        }\n        else {\n            const activeAnnotationUID = this.commonData.annotation.annotationUID;\n            if (annotation.annotationUID === activeAnnotationUID) {\n                if (isDrawing) {\n                    this.renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingClosed) {\n                    this.renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingOpen) {\n                    this.renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    throw new Error(`Unknown ${this.getToolName()} annotation rendering state`);\n                }\n            }\n            else {\n                if (this.configuration.displayOnePointAsCrosshairs &&\n                    annotation.data.contour.polyline.length === 1) {\n                    this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    this.renderContour(enabledElement, svgDrawingHelper, annotation);\n                }\n            }\n            renderStatus = true;\n        }\n        if (!this.configuration.calculateStats) {\n            return;\n        }\n        this._calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement);\n        this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n        return renderStatus;\n    }\n    _calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement) {\n        const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n        if (annotation.annotationUID === activeAnnotationUID &&\n            !this.commonData?.movingTextBox) {\n            return;\n        }\n        if (!this.commonData?.movingTextBox) {\n            const { data } = annotation;\n            if (!data.cachedStats[targetId]?.unit) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    area: null,\n                    max: null,\n                    mean: null,\n                    stdDev: null,\n                    areaUnit: null,\n                    unit: null,\n                };\n                this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n        }\n    }\n    updateClosedCachedStats({ viewport, points, imageData, metadata, cachedStats, targetId, modalityUnit, canvasCoordinates, calibratedScale, }) {\n        const { scale, areaUnit, unit } = calibratedScale;\n        const { voxelManager } = viewport.getImageData();\n        const canvasPoint = canvasCoordinates[0];\n        const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n        const deltaXPoint = viewport.canvasToWorld([\n            canvasPoint[0] + 1,\n            canvasPoint[1],\n        ]);\n        const deltaYPoint = viewport.canvasToWorld([\n            canvasPoint[0],\n            canvasPoint[1] + 1,\n        ]);\n        const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n        const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n        const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        let iMin = worldPosIndex[0];\n        let iMax = worldPosIndex[0];\n        let jMin = worldPosIndex[1];\n        let jMax = worldPosIndex[1];\n        let kMin = worldPosIndex[2];\n        let kMax = worldPosIndex[2];\n        for (let j = 1; j < points.length; j++) {\n            const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[j]);\n            worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n            worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n            worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n            iMin = Math.min(iMin, worldPosIndex[0]);\n            iMax = Math.max(iMax, worldPosIndex[0]);\n            jMin = Math.min(jMin, worldPosIndex[1]);\n            jMax = Math.max(jMax, worldPosIndex[1]);\n            kMin = Math.min(kMin, worldPosIndex[2]);\n            kMax = Math.max(kMax, worldPosIndex[2]);\n        }\n        const worldPosIndex2 = csUtils.transformWorldToIndex(imageData, points[1]);\n        worldPosIndex2[0] = Math.floor(worldPosIndex2[0]);\n        worldPosIndex2[1] = Math.floor(worldPosIndex2[1]);\n        worldPosIndex2[2] = Math.floor(worldPosIndex2[2]);\n        let area = polyline.getArea(canvasCoordinates) / scale / scale;\n        area *= deltaInX * deltaInY;\n        const iDelta = 0.01 * (iMax - iMin);\n        const jDelta = 0.01 * (jMax - jMin);\n        const kDelta = 0.01 * (kMax - kMin);\n        iMin = Math.floor(iMin - iDelta);\n        iMax = Math.ceil(iMax + iDelta);\n        jMin = Math.floor(jMin - jDelta);\n        jMax = Math.ceil(jMax + jDelta);\n        kMin = Math.floor(kMin - kDelta);\n        kMax = Math.ceil(kMax + kDelta);\n        const boundsIJK = [\n            [iMin, iMax],\n            [jMin, jMax],\n            [kMin, kMax],\n        ];\n        const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n        const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n        let curRow = 0;\n        let intersections = [];\n        let intersectionCounter = 0;\n        const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n            imageData,\n            isInObject: (pointLPS, _pointIJK) => {\n                let result = true;\n                const point = viewport.worldToCanvas(pointLPS);\n                if (point[1] != curRow) {\n                    intersectionCounter = 0;\n                    curRow = point[1];\n                    intersections = getLineSegmentIntersectionsCoordinates(canvasCoordinates, point, [canvasPosEnd[0], point[1]]);\n                    intersections.sort((function (index) {\n                        return function (a, b) {\n                            return a[index] === b[index]\n                                ? 0\n                                : a[index] < b[index]\n                                    ? -1\n                                    : 1;\n                        };\n                    })(0));\n                }\n                if (intersections.length && point[0] > intersections[0][0]) {\n                    intersections.shift();\n                    intersectionCounter++;\n                }\n                if (intersectionCounter % 2 === 0) {\n                    result = false;\n                }\n                return result;\n            },\n            boundsIJK,\n            returnPoints: this.configuration.storePointData,\n        });\n        const stats = this.configuration.statsCalculator.getStatistics();\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            area,\n            perimeter: calculatePerimeter(canvasCoordinates, closed) / scale,\n            mean: stats.mean?.value,\n            max: stats.max?.value,\n            stdDev: stats.stdDev?.value,\n            statsArray: stats.array,\n            pointsInShape: pointsInShape,\n            areaUnit,\n            modalityUnit,\n            unit,\n        };\n    }\n    updateOpenCachedStats({ targetId, metadata, canvasCoordinates, cachedStats, modalityUnit, calibratedScale, }) {\n        const { scale, unit } = calibratedScale;\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            length: calculatePerimeter(canvasCoordinates, false) / scale,\n            modalityUnit,\n            unit,\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, length, perimeter, max, isEmptyArea, unit, areaUnit, modalityUnit, } = cachedVolumeStats || {};\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (mean) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (Number.isFinite(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (stdDev) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    if (perimeter) {\n        textLines.push(`Perimeter: ${csUtils.roundNumber(perimeter)} ${unit}`);\n    }\n    if (length) {\n        textLines.push(`${csUtils.roundNumber(length)} ${unit}`);\n    }\n    return textLines;\n}\nexport default PlanarFreehandROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawRectByCoordinates as drawRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROITool extends AnnotationTool {\n    static { this.toolName = 'RectangleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    cachedStats: {},\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { viewPlaneNormal, viewUp } = viewport.getCamera();\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const { data } = annotation;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        boundsIJK,\n                        imageData,\n                        returnPoints: this.configuration.storePointData,\n                    });\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        stdDev: stats.stdDev?.value,\n                        max: stats.max?.value,\n                        statsArray: stats.array,\n                        pointsInShape: pointsInShape,\n                        areaUnit,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(RectangleROITool, enabledElement, points, options);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined || mean === null) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nexport default RectangleROITool;\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, this.getOperationData(element));\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentPoints.canvas;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this.doneEditMemo();\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { getEnabledElement, cache, utilities as csUtils, Enums, eventTarget, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/getActiveSegmentation';\nimport { getLockedSegmentIndices } from '../../stateManagement/segmentation/segmentLocking';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { getClosestImageIdForStackViewport } from '../../utilities/annotationHydration';\nimport { getCurrentLabelmapImageIdForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { StrategyCallbacks, Events } from '../../enums';\nimport * as LabelmapMemo from '../../utilities/segmentation/createLabelmapMemo';\nimport { getAllAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport { isPointInsidePolyline3D } from '../../utilities/math/polyline';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { fillInsideCircle } from './strategies';\nexport default class LabelmapBaseTool extends BaseTool {\n    static { this.previewData = {\n        preview: null,\n        element: null,\n        timerStart: 0,\n        timer: null,\n        startPoint: [NaN, NaN],\n        isDrag: false,\n    }; }\n    constructor(toolProps, defaultToolProps) {\n        super(toolProps, defaultToolProps);\n        this.memoMap = new Map();\n        this.acceptedMemoIds = new Map();\n        this.centerSegmentIndexInfo = {\n            segmentIndex: null,\n            hasSegmentIndex: false,\n            hasPreviewIndex: false,\n            changedIndices: [],\n        };\n    }\n    _historyRedoHandler(evt) {\n        const { id, operationType } = evt.detail;\n        if (operationType !== 'labelmap') {\n            return;\n        }\n        if (this.acceptedMemoIds.has(id)) {\n            this._hoverData = null;\n            const memoData = this.acceptedMemoIds.get(id);\n            const element = memoData?.element;\n            const operationData = this.getOperationData(element);\n            operationData.segmentIndex = memoData?.segmentIndex;\n            if (element) {\n                this.applyActiveStrategyCallback(getEnabledElement(element), operationData, StrategyCallbacks.AcceptPreview);\n            }\n        }\n        this._previewData.isDrag = true;\n    }\n    get _previewData() {\n        return LabelmapBaseTool.previewData;\n    }\n    createMemo(segmentationId, segmentationVoxelManager) {\n        const voxelManagerId = segmentationVoxelManager.id;\n        if (this.memo &&\n            this.memo.segmentationVoxelManager === segmentationVoxelManager) {\n            return this.memo;\n        }\n        let memo = this.memoMap.get(voxelManagerId);\n        if (!memo) {\n            memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n            this.memoMap.set(voxelManagerId, memo);\n        }\n        else {\n            if (memo.redoVoxelManager) {\n                memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n                this.memoMap.set(voxelManagerId, memo);\n            }\n        }\n        this.memo = memo;\n        return memo;\n    }\n    createEditData(element) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                detail: {\n                    type: 'Segmentation',\n                    message: 'No active segmentation detected, create a segmentation representation before using the brush tool',\n                },\n                cancelable: true,\n            });\n            eventTarget.dispatchEvent(event);\n            return null;\n        }\n        const { segmentationId } = activeSegmentation;\n        const segmentsLocked = getLockedSegmentIndices(segmentationId);\n        const { representationData } = getSegmentation(segmentationId);\n        const editData = this.getEditData({\n            viewport,\n            representationData,\n            segmentsLocked,\n            segmentationId,\n        });\n        return editData;\n    }\n    getEditData({ viewport, representationData, segmentsLocked, segmentationId, }) {\n        if (viewport instanceof BaseVolumeViewport) {\n            const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n            const actors = viewport.getActors();\n            const isStackViewport = viewport instanceof getClosestImageIdForStackViewport;\n            if (isStackViewport) {\n                const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                    detail: {\n                        type: 'Segmentation',\n                        message: 'Cannot perform brush operation on the selected viewport',\n                    },\n                    cancelable: true,\n                });\n                eventTarget.dispatchEvent(event);\n                return null;\n            }\n            const volumes = actors.map((actorEntry) => cache.getVolume(actorEntry.referencedId));\n            const segmentationVolume = cache.getVolume(volumeId);\n            const referencedVolumeIdToThreshold = volumes.find((volume) => csUtils.isEqual(volume.dimensions, segmentationVolume.dimensions))?.volumeId || volumes[0]?.volumeId;\n            return {\n                volumeId,\n                referencedVolumeId: this.configuration.threshold?.volumeId ??\n                    referencedVolumeIdToThreshold,\n                segmentsLocked,\n            };\n        }\n        else {\n            const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n            if (!segmentationImageId) {\n                return;\n            }\n            return {\n                imageId: segmentationImageId,\n                segmentsLocked,\n            };\n        }\n    }\n    createHoverData(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const viewportIdsToRender = [viewport.id];\n        const { segmentIndex, segmentationId, segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        const brushCursor = {\n            metadata: {\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                referencedImageId: '',\n                toolName: this.getToolName(),\n                segmentColor,\n            },\n            data: {},\n        };\n        return {\n            brushCursor,\n            centerCanvas,\n            segmentIndex,\n            viewport,\n            segmentationId,\n            segmentColor,\n            viewportIdsToRender,\n        };\n    }\n    getActiveSegmentationData(viewport) {\n        const viewportId = viewport.id;\n        const activeRepresentation = getActiveSegmentation(viewportId);\n        if (!activeRepresentation) {\n            return;\n        }\n        const { segmentationId } = activeRepresentation;\n        const segmentIndex = getActiveSegmentIndex(segmentationId);\n        if (!segmentIndex) {\n            return;\n        }\n        const segmentColor = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n        return {\n            segmentIndex,\n            segmentationId,\n            segmentColor,\n        };\n    }\n    getOperationData(element) {\n        const editData = this._editData || this.createEditData(element);\n        const { segmentIndex, segmentationId, brushCursor } = this._hoverData || this.createHoverData(element);\n        const { data, metadata = {} } = brushCursor || {};\n        const { viewPlaneNormal, viewUp } = metadata;\n        const configColor = this.configuration.preview?.previewColors?.[segmentIndex];\n        const { viewport } = getEnabledElement(element);\n        const segmentColor = getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n        if (!configColor && !segmentColor) {\n            return;\n        }\n        let previewColor = null, previewSegmentIndex = null;\n        if (this.configuration.preview.enabled) {\n            previewColor = configColor || lightenColor(...segmentColor);\n            previewSegmentIndex = 255;\n        }\n        const operationData = {\n            ...editData,\n            points: data?.handles?.points,\n            segmentIndex,\n            viewPlaneNormal,\n            previewOnHover: !this._previewData.isDrag,\n            toolGroupId: this.toolGroupId,\n            segmentationId,\n            viewUp,\n            centerSegmentIndexInfo: this.centerSegmentIndexInfo,\n            activeStrategy: this.configuration.activeStrategy,\n            configuration: this.configuration,\n            previewColor,\n            previewSegmentIndex,\n            createMemo: this.createMemo.bind(this),\n        };\n        return operationData;\n    }\n    addPreview(element = this._previewData.element, options) {\n        const { _previewData } = this;\n        const acceptReject = options?.acceptReject;\n        if (acceptReject === true) {\n            this.acceptPreview(element);\n        }\n        else if (acceptReject === false) {\n            this.rejectPreview(element);\n        }\n        const enabledElement = getEnabledElement(element);\n        const results = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.AddPreview);\n        _previewData.isDrag = true;\n        return results;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        const operationData = this.getOperationData(element);\n        if (this.memo && this.memo.id) {\n            this.acceptedMemoIds.set(this.memo.id, {\n                element,\n                segmentIndex: operationData.segmentIndex,\n            });\n        }\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.AcceptPreview);\n        this.doneEditMemo();\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    static viewportContoursToLabelmap(viewport, options) {\n        const removeContours = options?.removeContours ?? true;\n        const annotations = getAllAnnotations();\n        const viewAnnotations = filterAnnotationsForDisplay(viewport, annotations);\n        if (!viewAnnotations?.length) {\n            return;\n        }\n        const contourAnnotations = viewAnnotations.filter((annotation) => annotation.data.contour?.polyline?.length);\n        if (!contourAnnotations.length) {\n            return;\n        }\n        const brushInstance = new LabelmapBaseTool({}, {\n            configuration: {\n                strategies: {\n                    FILL_INSIDE_CIRCLE: fillInsideCircle,\n                },\n                activeStrategy: 'FILL_INSIDE_CIRCLE',\n            },\n        });\n        const preview = brushInstance.addPreview(viewport.element);\n        const { memo, segmentationId } = preview;\n        const previewVoxels = memo?.voxelManager;\n        const segmentationVoxels = previewVoxels.sourceVoxelManager || previewVoxels;\n        const { dimensions } = previewVoxels;\n        const imageData = viewport\n            .getDefaultActor()\n            .actor.getMapper()\n            .getInputData();\n        for (const annotation of contourAnnotations) {\n            const boundsIJK = [\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n            ];\n            const { polyline } = annotation.data.contour;\n            for (const point of polyline) {\n                const indexPoint = imageData.worldToIndex(point);\n                indexPoint.forEach((v, idx) => {\n                    boundsIJK[idx][0] = Math.min(boundsIJK[idx][0], v);\n                    boundsIJK[idx][1] = Math.max(boundsIJK[idx][1], v);\n                });\n            }\n            boundsIJK.forEach((bound, idx) => {\n                bound[0] = Math.round(Math.max(0, bound[0]));\n                bound[1] = Math.round(Math.min(dimensions[idx] - 1, bound[1]));\n            });\n            const activeIndex = getActiveSegmentIndex(segmentationId);\n            const startPoint = annotation.data.handles?.[0] || polyline[0];\n            const startIndex = imageData.worldToIndex(startPoint).map(Math.round);\n            const startValue = segmentationVoxels.getAtIJKPoint(startIndex) || 0;\n            let hasZeroIndex = false;\n            let hasPositiveIndex = false;\n            for (const polyPoint of polyline) {\n                const polyIndex = imageData.worldToIndex(polyPoint).map(Math.round);\n                const polyValue = segmentationVoxels.getAtIJKPoint(polyIndex);\n                if (polyValue === startValue) {\n                    hasZeroIndex = true;\n                }\n                else if (polyValue >= 0) {\n                    hasPositiveIndex = true;\n                }\n            }\n            const hasBoth = hasZeroIndex && hasPositiveIndex;\n            const segmentIndex = hasBoth\n                ? startValue\n                : startValue === 0\n                    ? activeIndex\n                    : 0;\n            for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                    for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n                        const worldPoint = imageData.indexToWorld([i, j, k]);\n                        const isContained = isPointInsidePolyline3D(worldPoint, polyline);\n                        if (isContained) {\n                            previewVoxels.setAtIJK(i, j, k, segmentIndex);\n                        }\n                    }\n                }\n            }\n            if (removeContours) {\n                removeAnnotation(annotation.annotationUID);\n            }\n        }\n        const slices = previewVoxels.getArrayOfModifiedSlices();\n        triggerSegmentationDataModified(segmentationId, slices);\n    }\n}\nfunction lightenColor(r, g, b, a, factor = 0.4) {\n    return [\n        Math.round(r + (255 - r) * factor),\n        Math.round(g + (255 - g) * factor),\n        Math.round(b + (255 - b) * factor),\n        a,\n    ];\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getCanvasEllipseCorners, precalculatePointInEllipse, } from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, isEqual } = csUtils;\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const [topLeftCanvas, bottomRightCanvas] = getCanvasEllipseCorners(canvasCoordinates);\n        const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n        const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n        const circleCornersIJK = points.map((world) => {\n            return transformWorldToIndex(segmentationImageData, world);\n        });\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.isInObject = createPointInEllipse({\n            topLeftWorld,\n            bottomRightWorld,\n            center,\n        });\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(worldInfo) {\n    const { topLeftWorld, bottomRightWorld, center } = worldInfo;\n    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n    const radius = Math.max(xRadius, yRadius, zRadius);\n    if (isEqual(xRadius, radius) &&\n        isEqual(yRadius, radius) &&\n        isEqual(zRadius, radius)) {\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS) => pointInSphere(sphereObj, pointLPS);\n    }\n    const ellipseObj = {\n        center: center,\n        xRadius,\n        yRadius,\n        zRadius,\n    };\n    const { precalculated } = precalculatePointInEllipse(ellipseObj, {});\n    return precalculated;\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK, getBoundingBoxAroundShapeWorld, } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getStrategyData } from './utils/getStrategyData';\nimport { isAxisAlignedRectangle } from '../../../utilities/rectangleROITool/isAxisAlignedRectangle';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, imageVoxelManager, viewport, segmentationImageData, segmentationVoxelManager, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const isStackViewport = viewport instanceof StackViewport;\n    const isAligned = isStackViewport || isAxisAlignedRectangle(rectangleCornersIJK);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointsBoundsLPS = getBoundingBoxAroundShapeWorld(points);\n    let [[xMin, xMax], [yMin, yMax], [zMin, zMax]] = pointsBoundsLPS;\n    xMin -= EPS;\n    xMax += EPS;\n    yMin -= EPS;\n    yMax += EPS;\n    zMin -= EPS;\n    zMax += EPS;\n    const pointInShapeFn = isAligned\n        ? () => true\n        : (pointLPS) => {\n            const [x, y, z] = pointLPS;\n            const xInside = x >= xMin && x <= xMax;\n            const yInside = y >= yMin && y <= yMax;\n            const zInside = z >= zMin && z <= zMax;\n            return xInside && yInside && zInside;\n        };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nexport function addContourSegmentationAnnotation(annotation) {\n    if (annotation.parentAnnotationUID) {\n        return;\n    }\n    if (!annotation.data.segmentation) {\n        throw new Error('addContourSegmentationAnnotation: annotation does not have a segmentation data');\n    }\n    const { segmentationId, segmentIndex } = annotation.data.segmentation;\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation.representationData.Contour) {\n        segmentation.representationData.Contour = { annotationUIDsMap: new Map() };\n    }\n    let { annotationUIDsMap } = segmentation.representationData.Contour;\n    if (!annotationUIDsMap) {\n        annotationUIDsMap = new Map();\n    }\n    let annotationsUIDsSet = annotationUIDsMap?.get(segmentIndex);\n    if (!annotationsUIDsSet) {\n        annotationsUIDsSet = new Set();\n        annotationUIDsMap.set(segmentIndex, annotationsUIDsSet);\n    }\n    annotationUIDsMap.set(segmentIndex, annotationsUIDsSet.add(annotation.annotationUID));\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","import isObject from './isObject';\nfunction debounce(func, wait, options) {\n    let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n    let lastInvokeTime = 0;\n    let leading = false;\n    let maxing = false;\n    let trailing = true;\n    const useRAF = !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = Number(wait) || 0;\n    if (isObject(options)) {\n        leading = Boolean(options.leading);\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    function invokeFunc(time) {\n        const args = lastArgs;\n        const thisArg = lastThis;\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n    }\n    function startTimer(pendingFunc, wait) {\n        if (useRAF) {\n            return window.requestAnimationFrame(pendingFunc);\n        }\n        return setTimeout(pendingFunc, wait);\n    }\n    function cancelTimer(id) {\n        if (useRAF) {\n            return window.cancelAnimationFrame(id);\n        }\n        clearTimeout(id);\n    }\n    function leadingEdge(time) {\n        lastInvokeTime = time;\n        timerId = startTimer(timerExpired, wait);\n        return leading ? invokeFunc(time) : result;\n    }\n    function remainingWait(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        const timeWaiting = wait - timeSinceLastCall;\n        return maxing\n            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n            : timeWaiting;\n    }\n    function shouldInvoke(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        return (lastCallTime === undefined ||\n            timeSinceLastCall >= wait ||\n            timeSinceLastCall < 0 ||\n            (maxing && timeSinceLastInvoke >= maxWait));\n    }\n    function timerExpired() {\n        const time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        timerId = startTimer(timerExpired, remainingWait(time));\n    }\n    function trailingEdge(time) {\n        timerId = undefined;\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    }\n    function cancel() {\n        if (timerId !== undefined) {\n            cancelTimer(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n    function flush() {\n        return timerId === undefined ? result : trailingEdge(Date.now());\n    }\n    function pending() {\n        return timerId !== undefined;\n    }\n    function debounced(...args) {\n        const time = Date.now();\n        const isInvoking = shouldInvoke(time);\n        lastArgs = args;\n        lastThis = this;\n        lastCallTime = time;\n        if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxing) {\n                timerId = startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (timerId === undefined) {\n            timerId = startTimer(timerExpired, wait);\n        }\n        return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    debounced.pending = pending;\n    return debounced;\n}\nexport default debounce;\n","export default function getTextBoxCoordsCanvas(annotationCanvasPoints) {\n    const corners = _determineCorners(annotationCanvasPoints);\n    const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n    const textBoxCanvas = [corners.right[0], centerY];\n    return textBoxCanvas;\n}\nfunction _determineCorners(canvasPoints) {\n    const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n    const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n    const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n    const top = handlesTopToBottom[0];\n    const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n    return {\n        top,\n        bottom,\n        right,\n    };\n    function _compareX(a, b) {\n        return a[0] < b[0] ? -1 : 1;\n    }\n    function _compareY(a, b) {\n        return a[1] < b[1] ? -1 : 1;\n    }\n}\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n        CalibrationTypes.CALIBRATED,\n        CalibrationTypes.UNKNOWN,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import getViewportsForAnnotation from './getViewportsForAnnotation';\nexport default function getViewportForAnnotation(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    return viewports.length ? viewports[0] : undefined;\n}\n","function isObject(value) {\n    const type = typeof value;\n    return value !== null && (type === 'object' || type === 'function');\n}\nexport default isObject;\n","export default function pointInSphere(sphere, pointLPS) {\n    const { center, radius } = sphere;\n    const radius2 = sphere.radius2 || radius * radius;\n    return ((pointLPS[0] - center[0]) * (pointLPS[0] - center[0]) +\n        (pointLPS[1] - center[1]) * (pointLPS[1] - center[1]) +\n        (pointLPS[2] - center[2]) * (pointLPS[2] - center[2]) <=\n        radius2);\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nconst iAxis = vec3.fromValues(1, 0, 0);\nconst jAxis = vec3.fromValues(0, 1, 0);\nconst kAxis = vec3.fromValues(0, 0, 1);\nconst axisList = [iAxis, jAxis, kAxis];\nfunction isAxisAlignedRectangle(rectangleCornersIJK) {\n    const rectangleVec1 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[1]);\n    const rectangleVec2 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[2]);\n    const anglesVec1 = calculateAnglesWithAxes(rectangleVec1, axisList);\n    const anglesVec2 = calculateAnglesWithAxes(rectangleVec2, axisList);\n    const isAligned = [...anglesVec1, ...anglesVec2].every((angle) => isEqual(angle, 0) ||\n        isEqual(angle, 90) ||\n        isEqual(angle, 180) ||\n        isEqual(angle, 270));\n    return isAligned;\n}\nfunction calculateAnglesWithAxes(vec, axes) {\n    return axes.map((axis) => (vec3.angle(vec, axis) * 180) / Math.PI);\n}\nexport { isAxisAlignedRectangle };\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","function floodFill(getter, seed, options = {}) {\n    const onFlood = options.onFlood;\n    const onBoundary = options.onBoundary;\n    const equals = options.equals;\n    const filter = options.filter;\n    const diagonals = options.diagonals || false;\n    const startNode = get(seed);\n    const permutations = prunedPermutations();\n    const stack = [];\n    const flooded = [];\n    const visits = new Set();\n    const bounds = options.bounds;\n    stack.push({ currentArgs: seed });\n    while (stack.length > 0) {\n        flood(stack.pop());\n    }\n    return {\n        flooded,\n    };\n    function flood(job) {\n        const getArgs = job.currentArgs;\n        const prevArgs = job.previousArgs;\n        if (visited(getArgs)) {\n            return;\n        }\n        markAsVisited(getArgs);\n        if (member(getArgs)) {\n            markAsFlooded(getArgs);\n            pushAdjacent(getArgs);\n        }\n        else {\n            markAsBoundary(prevArgs);\n        }\n    }\n    function visited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        return visits.has(iKey);\n    }\n    function markAsVisited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        visits.add(iKey);\n    }\n    function member(getArgs) {\n        const node = get(getArgs);\n        return equals ? equals(node, startNode) : node === startNode;\n    }\n    function markAsFlooded(getArgs) {\n        flooded.push(getArgs);\n        if (onFlood) {\n            onFlood(...getArgs);\n        }\n    }\n    function markAsBoundary(prevArgs) {\n        const [x, y, z = 0] = prevArgs;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        bounds?.set(iKey, prevArgs);\n        if (onBoundary) {\n            onBoundary(...prevArgs);\n        }\n    }\n    function pushAdjacent(getArgs) {\n        for (let i = 0; i < permutations.length; i += 1) {\n            const perm = permutations[i];\n            const nextArgs = getArgs.slice(0);\n            for (let j = 0; j < getArgs.length; j += 1) {\n                nextArgs[j] += perm[j];\n            }\n            if (filter?.(nextArgs) === false) {\n                continue;\n            }\n            if (visited(nextArgs)) {\n                continue;\n            }\n            stack.push({\n                currentArgs: nextArgs,\n                previousArgs: getArgs,\n            });\n        }\n    }\n    function get(getArgs) {\n        return getter(...getArgs);\n    }\n    function prunedPermutations() {\n        const permutations = permute(seed.length);\n        return permutations.filter(function (perm) {\n            const count = countNonZeroes(perm);\n            return count !== 0 && (count === 1 || diagonals);\n        });\n    }\n    function permute(length) {\n        const perms = [];\n        const permutation = function (string) {\n            return string.split('').map(function (c) {\n                return parseInt(c, 10) - 1;\n            });\n        };\n        for (let i = 0; i < Math.pow(3, length); i += 1) {\n            const string = lpad(i.toString(3), '0', length);\n            perms.push(permutation(string));\n        }\n        return perms;\n    }\n}\nfunction countNonZeroes(array) {\n    let count = 0;\n    for (let i = 0; i < array.length; i += 1) {\n        if (array[i] !== 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nfunction lpad(string, character, length) {\n    const array = new Array(length + 1);\n    const pad = array.join(character);\n    return (pad + string).slice(-length);\n}\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nexport function getBrushToolInstances(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    if (toolName && toolInstances[toolName]) {\n        return [toolInstances[toolName]];\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\n","import { getAnnotation } from '../../stateManagement';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nexport function getHoveredContourSegmentationAnnotation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation.representationData.Contour;\n    for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {\n        const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);\n        if (highlightedAnnotationUID) {\n            return segmentIndex;\n        }\n    }\n    return undefined;\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { getSegmentation, getCurrentLabelmapImageIdForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers';\nexport function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {\n    const segmentation = getSegmentation(segmentationId);\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const voxelManager = segmentationVolume.voxelManager;\n        const imageData = segmentationVolume.imageData;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        const segmentIndex = voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n        const canvasPoint = viewport.worldToCanvas(worldPoint);\n        const onEdge = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius);\n        return onEdge ? segmentIndex : undefined;\n    }\n    const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);\n    return onEdge ? segmentIndex : undefined;\n}\nfunction isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {\n    const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);\n    for (const deltaI of neighborRange) {\n        for (const deltaJ of neighborRange) {\n            for (const deltaK of neighborRange) {\n                if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {\n                    continue;\n                }\n                const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);\n                if (neighborIndex !== undefined && segmentIndex !== neighborIndex) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ, deltaK) => {\n        const neighborIJK = [\n            indexIJK[0] + deltaI,\n            indexIJK[1] + deltaJ,\n            indexIJK[2] + deltaK,\n        ];\n        return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\nfunction isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ) => {\n        const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];\n        const worldPoint = viewport.canvasToWorld(neighborCanvas);\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getSegmentation, getCurrentLabelmapImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getAnnotation } from '../../stateManagement';\nimport { isPointInsidePolyline3D } from '../math/polyline';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nexport function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];\n    if (!desiredRepresentation) {\n        throw new Error(`Segmentation ${segmentationId} does not have any representations`);\n    }\n    switch (desiredRepresentation) {\n        case SegmentationRepresentations.Labelmap:\n            return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);\n        case SegmentationRepresentations.Contour:\n            return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);\n        default:\n            return;\n    }\n}\nexport function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const segmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n        return segmentIndex;\n    }\n    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);\n    if (segmentationImageIds.length > 1) {\n        console.warn('Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.');\n        return;\n    }\n    const segmentationImageId = segmentationImageIds[0];\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    return segmentIndex;\n}\nexport function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {\n    const contourData = segmentation.representationData.Contour;\n    const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());\n    const { viewPlaneNormal } = viewport.getCamera();\n    for (const segmentIndex of segmentIndices) {\n        const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);\n        if (!annotationsSet) {\n            continue;\n        }\n        for (const annotationUID of annotationsSet) {\n            const annotation = getAnnotation(annotationUID);\n            if (!annotation) {\n                continue;\n            }\n            const { polyline } = annotation.data.contour;\n            if (!utilities.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {\n                continue;\n            }\n            if (isPointInsidePolyline3D(worldPoint, polyline)) {\n                return Number(segmentIndex);\n            }\n        }\n    }\n}\n","const shader = `\nconst MAX_STRENGTH = 65535f;\n\n// Workgroup size - X*Y*Z must be multiple of 32 for better performance\noverride workGroupSizeX = 1u;\noverride workGroupSizeY = 1u;\noverride workGroupSizeZ = 1u;\n\n// Compare the current voxel to neighbors using a 9x9x9 window\noverride windowSize = 9i;\n\nstruct Params {\n  size: vec3u,\n  iteration: u32,\n}\n\n// New structure to track bounds of modified voxels\nstruct Bounds {\n  minX: atomic<i32>,\n  minY: atomic<i32>,\n  minZ: atomic<i32>,\n  maxX: atomic<i32>,\n  maxY: atomic<i32>,\n  maxZ: atomic<i32>,\n}\n\n@group(0) @binding(0) var<uniform> params: Params;\n@group(0) @binding(1) var<storage> volumePixelData: array<f32>;\n@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;\n@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;\n@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;\n@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;\n@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;\n@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;\n\nfn getPixelIndex(ijkPos: vec3u) -> u32 {\n  let numPixelsPerSlice = params.size.x * params.size.y;\n  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;\n}\n\nfn updateBounds(position: vec3i) {\n  // Atomically update min bounds (use min operation)\n  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);\n  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);\n  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);\n\n  // Atomically update max bounds (use max operation)\n  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);\n  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);\n  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);\n}\n\n@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\nfn main(\n  @builtin(global_invocation_id) globalId: vec3u,\n) {\n  // Make sure it will not get out of bounds for volume with sizes that\n  // are not multiple of workGroupSize\n  if (\n    globalId.x >= params.size.x ||\n    globalId.y >= params.size.y ||\n    globalId.z >= params.size.z\n  ) {\n    return;\n  }\n\n  // Initialize bounds for the first iteration\n  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {\n    // Initialize to opposite extremes to ensure any update will improve the bounds\n    atomicStore(&modifiedBounds.minX, i32(params.size.x));\n    atomicStore(&modifiedBounds.minY, i32(params.size.y));\n    atomicStore(&modifiedBounds.minZ, i32(params.size.z));\n    atomicStore(&modifiedBounds.maxX, -1);\n    atomicStore(&modifiedBounds.maxY, -1);\n    atomicStore(&modifiedBounds.maxZ, -1);\n  }\n\n  let currentCoord = vec3i(globalId);\n  let currentPixelIndex = getPixelIndex(globalId);\n\n  let numPixels = arrayLength(&volumePixelData);\n  let currentPixelValue = volumePixelData[currentPixelIndex];\n\n  if (params.iteration == 0) {\n    // All non-zero initial labels are given maximum strength\n    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);\n\n    // Update bounds for non-zero initial labels\n    if (labelmap[currentPixelIndex] != 0) {\n      updateBounds(currentCoord);\n    }\n    return;\n  }\n\n  // It should at least copy the values from previous state\n  var newLabel = prevLabelmap[currentPixelIndex];\n  var newStrength = prevStrengthData[currentPixelIndex];\n\n  let window = i32(ceil(f32(windowSize - 1) * .5));\n  let minWindow = -1i * window;\n  let maxWindow = 1i * window;\n\n  for (var k = minWindow; k <= maxWindow; k++) {\n    for (var j = minWindow; j <= maxWindow; j++) {\n      for (var i = minWindow; i <= maxWindow; i++) {\n        // Skip current voxel\n        if (i == 0 && j == 0 && k == 0) {\n          continue;\n        }\n\n        let neighborCoord = currentCoord + vec3i(i, j, k);\n\n        //  Boundary conditions. Do not grow outside of the volume\n        if (\n          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||\n          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||\n          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)\n        ) {\n          continue;\n        }\n\n        let neighborIndex = getPixelIndex(vec3u(neighborCoord));\n        let neighborPixelValue = volumePixelData[neighborIndex];\n        let prevNeighborStrength = prevStrengthData[neighborIndex];\n        let strengthCost = abs(neighborPixelValue - currentPixelValue);\n        let takeoverStrength = prevNeighborStrength - strengthCost;\n\n        if (takeoverStrength > newStrength) {\n          newLabel = prevLabelmap[neighborIndex];\n          newStrength = takeoverStrength;\n        }\n      }\n    }\n  }\n\n  if (labelmap[currentPixelIndex] != newLabel) {\n    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);\n\n    // Update bounds for modified voxels\n    updateBounds(currentCoord);\n  }\n\n  labelmap[currentPixelIndex] = newLabel;\n  strengthData[currentPixelIndex] = newStrength;\n}\n`;\nexport default shader;\n","import { cache } from '@cornerstonejs/core';\nimport shaderCode from './growCutShader';\nconst GB = 1024 * 1024 * 1024;\nconst WEBGPU_MEMORY_LIMIT = 1.99 * GB;\nconst DEFAULT_GROWCUT_OPTIONS = {\n    windowSize: 3,\n    maxProcessingTime: 30000,\n    inspection: {\n        numCyclesInterval: 5,\n        numCyclesBelowThreshold: 3,\n        threshold: 1e-4,\n    },\n};\nasync function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {\n    const workGroupSize = [8, 8, 4];\n    const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);\n    const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);\n    const volume = cache.getVolume(referenceVolumeId);\n    const labelmap = cache.getVolume(labelmapVolumeId);\n    const [columns, rows, numSlices] = volume.dimensions;\n    if (labelmap.dimensions[0] !== columns ||\n        labelmap.dimensions[1] !== rows ||\n        labelmap.dimensions[2] !== numSlices) {\n        throw new Error('Volume and labelmap must have the same size');\n    }\n    let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);\n    numIterations = Math.min(numIterations, 500);\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();\n    if (!(volumePixelData instanceof Float32Array)) {\n        volumePixelData = new Float32Array(volumePixelData);\n    }\n    const requiredLimits = {\n        maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,\n        maxBufferSize: WEBGPU_MEMORY_LIMIT,\n    };\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter.requestDevice({ requiredLimits });\n    const BUFFER_SIZE = volumePixelData.byteLength;\n    const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;\n    const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;\n    const shaderModule = device.createShaderModule({\n        code: shaderCode,\n    });\n    const numIterationIndex = 3;\n    const paramsArrayValues = new Uint32Array([\n        columns,\n        rows,\n        numSlices,\n        0,\n    ]);\n    const gpuParamsBuffer = device.createBuffer({\n        size: paramsArrayValues.byteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const gpuVolumePixelDataBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);\n    const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    }));\n    device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));\n    const gpuStrengthBuffers = [0, 1].map(() => {\n        const strengthBuffer = device.createBuffer({\n            size: BUFFER_SIZE,\n            usage: GPUBufferUsage.STORAGE |\n                GPUBufferUsage.COPY_SRC |\n                GPUBufferUsage.COPY_DST,\n        });\n        return strengthBuffer;\n    });\n    const gpuCounterBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const gpuBoundsBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const initialBounds = new Int32Array([\n        columns,\n        rows,\n        numSlices,\n        -1,\n        -1,\n        -1,\n    ]);\n    device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);\n    const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'uniform',\n                },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 3,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 4,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 5,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 6,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 7,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n        ],\n    });\n    const bindGroups = [0, 1].map((i) => {\n        const outputLabelmapBuffer = gpuLabelmapBuffers[i];\n        const outputStrengthBuffer = gpuStrengthBuffers[i];\n        const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];\n        const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];\n        return device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: gpuParamsBuffer,\n                    },\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: gpuVolumePixelDataBuffer,\n                    },\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: outputLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: outputStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: previouLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 5,\n                    resource: {\n                        buffer: previousStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 6,\n                    resource: {\n                        buffer: gpuCounterBuffer,\n                    },\n                },\n                {\n                    binding: 7,\n                    resource: {\n                        buffer: gpuBoundsBuffer,\n                    },\n                },\n            ],\n        });\n    });\n    const pipeline = device.createComputePipeline({\n        layout: device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }),\n        compute: {\n            module: shaderModule,\n            entryPoint: 'main',\n            constants: {\n                workGroupSizeX: workGroupSize[0],\n                workGroupSizeY: workGroupSize[1],\n                workGroupSizeZ: workGroupSize[2],\n                windowSize,\n            },\n        },\n    });\n    const numWorkGroups = [\n        Math.ceil(columns / workGroupSize[0]),\n        Math.ceil(rows / workGroupSize[1]),\n        Math.ceil(numSlices / workGroupSize[2]),\n    ];\n    const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const limitProcessingTime = maxProcessingTime\n        ? performance.now() + maxProcessingTime\n        : 0;\n    let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n    let belowThresholdCounter = 0;\n    for (let i = 0; i < numIterations; i++) {\n        paramsArrayValues[numIterationIndex] = i;\n        device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroups[i % 2]);\n        passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);\n        passEncoder.end();\n        commandEncoder.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);\n        device.queue.submit([commandEncoder.finish()]);\n        const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);\n        if (inspect) {\n            await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));\n            const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;\n            gpuUpdatedVoxelsCounterStagingBuffer.unmap();\n            if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {\n                currentInspectionNumCyclesInterval = 1;\n                belowThresholdCounter++;\n                if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {\n                    break;\n                }\n            }\n            else {\n                currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n            }\n        }\n        if (limitProcessingTime && performance.now() > limitProcessingTime) {\n            console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);\n            break;\n        }\n    }\n    const commandEncoder = device.createCommandEncoder();\n    const outputLabelmapBufferIndex = (numIterations + 1) % 2;\n    const labelmapStagingBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const boundsStagingBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);\n    device.queue.submit([commandEncoder.finish()]);\n    await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n    const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);\n    const labelmapResult = new Uint32Array(labelmapResultBuffer);\n    labelmapData.set(labelmapResult);\n    labelmapStagingBuffer.unmap();\n    await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);\n    const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);\n    const boundsResult = new Int32Array(boundsResultBuffer.slice(0));\n    boundsStagingBuffer.unmap();\n    const minX = boundsResult[0];\n    const minY = boundsResult[1];\n    const minZ = boundsResult[2];\n    const maxX = boundsResult[3];\n    const maxY = boundsResult[4];\n    const maxZ = boundsResult[5];\n    labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);\n    labelmap.voxelManager.clearBounds();\n    labelmap.voxelManager.setBounds([\n        [minX, maxX],\n        [minY, maxY],\n        [minZ, maxZ],\n    ]);\n}\nexport { runGrowCut as default, runGrowCut as run };\n","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nfunction _setNegativeSeedValues(subVolume, labelmap, options) {\n    const { negativeSeedValue = NEGATIVE_SEED_VALUE, negativePixelRange = NEGATIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const visited = new Array(width * height).fill(false);\n    const sliceOffset = middleSliceIndex * width * height;\n    const bfs = (startX, startY) => {\n        const queue = [[startX, startY]];\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            const slicePixelIndex = y * width + x;\n            if (x < 0 ||\n                x >= width ||\n                y < 0 ||\n                y >= height ||\n                visited[slicePixelIndex]) {\n                continue;\n            }\n            visited[slicePixelIndex] = true;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);\n            queue.push([x - 1, y]);\n            queue.push([x + 1, y]);\n            queue.push([x, y - 1]);\n            queue.push([x, y + 1]);\n        }\n    };\n    const scanLine = (startX, limitX, incX, y) => {\n        for (let x = startX; x !== limitX; x += incX) {\n            const slicePixelIndex = y * width + x;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                break;\n            }\n            if (!visited[slicePixelIndex]) {\n                bfs(x, y);\n            }\n        }\n    };\n    for (let y = 0; y < height; y++) {\n        scanLine(0, width - 1, 1, y);\n        scanLine(width - 1, 0, -1, y);\n    }\n}\nfunction _setPositiveSeedValues(subVolume, labelmap, options) {\n    const { positiveSeedValue = POSITIVE_SEED_VALUE, positivePixelRange = POSITIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const startSliceIndex = Math.max(middleSliceIndex - 3, 0);\n    const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);\n    const pixelsPerSlice = width * height;\n    for (let z = startSliceIndex; z < stopSliceIndex; z++) {\n        const zOffset = z * pixelsPerSlice;\n        for (let y = 0; y < height; y++) {\n            const yOffset = y * width;\n            for (let x = 0; x < width; x++) {\n                const index = zOffset + yOffset + x;\n                const pixelValue = subVolPixelData[index];\n                const isPositiveValue = pixelValue >= positivePixelRange[0] &&\n                    pixelValue <= positivePixelRange[1];\n                if (isPositiveValue) {\n                    labelmap.voxelManager.setAtIndex(index, positiveSeedValue);\n                }\n            }\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, options);\n    _setNegativeSeedValues(subVolume, labelmap, options);\n    return labelmap;\n}\nasync function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {\n    const { boundingBox } = boundingBoxInfo;\n    const { ijkTopLeft, ijkBottomRight } = boundingBox;\n    const subVolumeBoundsIJK = {\n        minX: ijkTopLeft[0],\n        maxX: ijkBottomRight[0],\n        minY: ijkTopLeft[1],\n        maxY: ijkBottomRight[1],\n        minZ: ijkTopLeft[2],\n        maxZ: ijkBottomRight[2],\n    };\n    const subVolume = csUtils.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n    const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForBoundingBox as default, runGrowCutForBoundingBox };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import debounce from './debounce';\nimport isObject from './isObject';\nfunction throttle(func, wait, options) {\n    let leading = true;\n    let trailing = true;\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    if (isObject(options)) {\n        leading = 'leading' in options ? Boolean(options.leading) : leading;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    return debounce(func, wait, {\n        leading,\n        trailing,\n        maxWait: wait,\n    });\n}\nexport default throttle;\n","function getDeltaPoints(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _subtractPoints2D(curr.page, last.page),\n        client: _subtractPoints2D(curr.client, last.client),\n        canvas: _subtractPoints2D(curr.canvas, last.canvas),\n        world: _subtractPoints3D(curr.world, last.world),\n    };\n}\nfunction getDeltaDistance(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _getDistance2D(curr.page, last.page),\n        client: _getDistance2D(curr.client, last.client),\n        canvas: _getDistance2D(curr.canvas, last.canvas),\n        world: _getDistance3D(curr.world, last.world),\n    };\n}\nfunction getDeltaRotation(currentPoints, lastPoints) {\n}\nfunction getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {\n    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n    const deltaDistance = {\n        page: currentDistance.page - lastDistance.page,\n        client: currentDistance.client - lastDistance.client,\n        canvas: currentDistance.canvas - lastDistance.canvas,\n        world: currentDistance.world - lastDistance.world,\n    };\n    return deltaDistance;\n}\nfunction copyPointsList(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction copyPoints(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction getMeanPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n    });\n}\nfunction getMeanTouchPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n            touch: {\n                identifier: null,\n                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n                force: prev.touch.force + curr.touch.force / points.length,\n                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n            },\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n        touch: {\n            identifier: null,\n            radiusX: 0,\n            radiusY: 0,\n            force: 0,\n            rotationAngle: 0,\n        },\n    });\n}\nfunction _subtractPoints2D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1]];\n}\nfunction _subtractPoints3D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\nfunction _getMeanDistanceBetweenAllIPoints(points) {\n    const pairedDistance = [];\n    for (let i = 0; i < points.length; i++) {\n        for (let j = 0; j < points.length; j++) {\n            if (i < j) {\n                pairedDistance.push({\n                    page: _getDistance2D(points[i].page, points[j].page),\n                    client: _getDistance2D(points[i].client, points[j].client),\n                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n                    world: _getDistance3D(points[i].world, points[j].world),\n                });\n            }\n        }\n    }\n    return pairedDistance.reduce((prev, curr) => {\n        return {\n            page: prev.page + curr.page / pairedDistance.length,\n            client: prev.client + curr.client / pairedDistance.length,\n            canvas: prev.canvas + curr.canvas / pairedDistance.length,\n            world: prev.world + curr.world / pairedDistance.length,\n        };\n    }, {\n        page: 0,\n        client: 0,\n        canvas: 0,\n        world: 0,\n    });\n}\nfunction _getDistance2D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));\n}\nfunction _getDistance3D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +\n        Math.pow(point0[1] - point1[1], 2) +\n        Math.pow(point0[2] - point1[2], 2));\n}\nexport { getMeanPoints, getMeanTouchPoints, copyPoints, copyPointsList, getDeltaDistanceBetweenIPoints, getDeltaPoints, getDeltaDistance, getDeltaRotation, };\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","import { cache, StackViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nfunction isViewportPreScaled(viewport, targetId) {\n    if (viewport instanceof BaseVolumeViewport) {\n        const volumeId = utilities.getVolumeId(targetId);\n        const volume = cache.getVolume(volumeId);\n        return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n    }\n    else if (viewport instanceof StackViewport) {\n        const { preScale } = viewport.getImageData() || {};\n        return !!preScale?.scaled;\n    }\n    else {\n        return false;\n    }\n}\nexport { isViewportPreScaled };\n","export var ColorbarRangeTextPosition;\n(function (ColorbarRangeTextPosition) {\n    ColorbarRangeTextPosition[\"Top\"] = \"top\";\n    ColorbarRangeTextPosition[\"Left\"] = \"left\";\n    ColorbarRangeTextPosition[\"Bottom\"] = \"bottom\";\n    ColorbarRangeTextPosition[\"Right\"] = \"right\";\n})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));\n","const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n","import { m as macro } from '../../macros2.js';\nimport { b as roundVector, c as clampVector } from '../Core/Math/index.js';\nimport vtkBoundingBox from './BoundingBox.js';\nimport vtkDataSet from './DataSet.js';\nimport vtkStructuredData from './StructuredData.js';\nimport { StructuredType } from './StructuredData/Constants.js';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageData');\n  publicAPI.setExtent = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n    for (var _len = arguments.length, inExtent = new Array(_len), _key = 0; _key < _len; _key++) {\n      inExtent[_key] = arguments[_key];\n    }\n    const extentArray = inExtent.length === 1 ? inExtent[0] : inExtent;\n    if (extentArray.length !== 6) {\n      return false;\n    }\n    const changeDetected = model.extent.some((item, index) => item !== extentArray[index]);\n    if (changeDetected) {\n      model.extent = extentArray.slice();\n      model.dataDescription = vtkStructuredData.getDataDescriptionFromExtent(model.extent);\n      publicAPI.modified();\n    }\n    return changeDetected;\n  };\n  publicAPI.setDimensions = function () {\n    let i;\n    let j;\n    let k;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (arguments.length === 1) {\n      const array = arguments.length <= 0 ? undefined : arguments[0];\n      i = array[0];\n      j = array[1];\n      k = array[2];\n    } else if (arguments.length === 3) {\n      i = arguments.length <= 0 ? undefined : arguments[0];\n      j = arguments.length <= 1 ? undefined : arguments[1];\n      k = arguments.length <= 2 ? undefined : arguments[2];\n    } else {\n      vtkErrorMacro('Bad dimension specification');\n      return;\n    }\n    publicAPI.setExtent(0, i - 1, 0, j - 1, 0, k - 1);\n  };\n  publicAPI.getDimensions = () => [model.extent[1] - model.extent[0] + 1, model.extent[3] - model.extent[2] + 1, model.extent[5] - model.extent[4] + 1];\n  publicAPI.getNumberOfCells = () => {\n    const dims = publicAPI.getDimensions();\n    let nCells = 1;\n    for (let i = 0; i < 3; i++) {\n      if (dims[i] === 0) {\n        return 0;\n      }\n      if (dims[i] > 1) {\n        nCells *= dims[i] - 1;\n      }\n    }\n    return nCells;\n  };\n  publicAPI.getNumberOfPoints = () => {\n    const dims = publicAPI.getDimensions();\n    return dims[0] * dims[1] * dims[2];\n  };\n  publicAPI.getPoint = index => {\n    const dims = publicAPI.getDimensions();\n    if (dims[0] === 0 || dims[1] === 0 || dims[2] === 0) {\n      vtkErrorMacro('Requesting a point from an empty image.');\n      return null;\n    }\n    const ijk = new Float64Array(3);\n    switch (model.dataDescription) {\n      case StructuredType.EMPTY:\n        return null;\n      case StructuredType.SINGLE_POINT:\n        break;\n      case StructuredType.X_LINE:\n        ijk[0] = index;\n        break;\n      case StructuredType.Y_LINE:\n        ijk[1] = index;\n        break;\n      case StructuredType.Z_LINE:\n        ijk[2] = index;\n        break;\n      case StructuredType.XY_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0];\n        break;\n      case StructuredType.YZ_PLANE:\n        ijk[1] = index % dims[1];\n        ijk[2] = index / dims[1];\n        break;\n      case StructuredType.XZ_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[2] = index / dims[0];\n        break;\n      case StructuredType.XYZ_GRID:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0] % dims[1];\n        ijk[2] = index / (dims[0] * dims[1]);\n        break;\n      default:\n        vtkErrorMacro('Invalid dataDescription');\n        break;\n    }\n    const coords = [0, 0, 0];\n    publicAPI.indexToWorld(ijk, coords);\n    return coords;\n  };\n\n  // vtkCell *GetCell(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCell(vtkIdType cellId, vtkGenericCell *cell) VTK_OVERRIDE;\n  // void GetCellBounds(vtkIdType cellId, double bounds[6]) VTK_OVERRIDE;\n  // virtual vtkIdType FindPoint(double x, double y, double z)\n  // {\n  //   return this->vtkDataSet::FindPoint(x, y, z);\n  // }\n  // vtkIdType FindPoint(double x[3]) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkIdType cellId, double tol2,\n  //   int& subId, double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkGenericCell *gencell,\n  //   vtkIdType cellId, double tol2, int& subId,\n  //   double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,\n  //                                 double tol2, int& subId, double pcoords[3],\n  //                                 double *weights) VTK_OVERRIDE;\n  // int GetCellType(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetCellPoints(cellId,ptIds,this->DataDescription,\n  //                                     this->GetDimensions());}\n  // void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetPointCells(ptId,cellIds,this->GetDimensions());}\n  // void ComputeBounds() VTK_OVERRIDE;\n  // int GetMaxCellSize() VTK_OVERRIDE {return 8;}; //voxel is the largest\n\n  publicAPI.getBounds = () => publicAPI.extentToBounds(publicAPI.getSpatialExtent());\n  publicAPI.extentToBounds = ex => vtkBoundingBox.transformBounds(ex, model.indexToWorld);\n  publicAPI.getSpatialExtent = () => vtkBoundingBox.inflate([...model.extent], 0.5);\n\n  // Internal, shouldn't need to call this manually.\n  publicAPI.computeTransforms = () => {\n    mat4.fromTranslation(model.indexToWorld, model.origin);\n    model.indexToWorld[0] = model.direction[0];\n    model.indexToWorld[1] = model.direction[1];\n    model.indexToWorld[2] = model.direction[2];\n    model.indexToWorld[4] = model.direction[3];\n    model.indexToWorld[5] = model.direction[4];\n    model.indexToWorld[6] = model.direction[5];\n    model.indexToWorld[8] = model.direction[6];\n    model.indexToWorld[9] = model.direction[7];\n    model.indexToWorld[10] = model.direction[8];\n    mat4.scale(model.indexToWorld, model.indexToWorld, model.spacing);\n    mat4.invert(model.worldToIndex, model.indexToWorld);\n  };\n  publicAPI.indexToWorld = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.indexToWorld);\n    return aout;\n  };\n  publicAPI.indexToWorldVec3 = publicAPI.indexToWorld;\n  publicAPI.worldToIndex = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.worldToIndex);\n    return aout;\n  };\n  publicAPI.worldToIndexVec3 = publicAPI.worldToIndex;\n  publicAPI.indexToWorldBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.indexToWorld, bout);\n  };\n  publicAPI.worldToIndexBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.worldToIndex, bout);\n  };\n\n  // Make sure the transform is correct\n  publicAPI.onModified(publicAPI.computeTransforms);\n  publicAPI.computeTransforms();\n  publicAPI.getCenter = () => vtkBoundingBox.getCenter(publicAPI.getBounds());\n  publicAPI.computeHistogram = function (worldBounds) {\n    let voxelFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const bounds = [0, 0, 0, 0, 0, 0];\n    publicAPI.worldToIndexBounds(worldBounds, bounds);\n    const point1 = [0, 0, 0];\n    const point2 = [0, 0, 0];\n    vtkBoundingBox.computeCornerPoints(bounds, point1, point2);\n    roundVector(point1, point1);\n    roundVector(point2, point2);\n    const dimensions = publicAPI.getDimensions();\n    clampVector(point1, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point1);\n    clampVector(point2, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point2);\n    const yStride = dimensions[0];\n    const zStride = dimensions[0] * dimensions[1];\n    const pixels = publicAPI.getPointData().getScalars().getData();\n    let maximum = -Infinity;\n    let minimum = Infinity;\n    let sumOfSquares = 0;\n    let isum = 0;\n    let inum = 0;\n    for (let z = point1[2]; z <= point2[2]; z++) {\n      for (let y = point1[1]; y <= point2[1]; y++) {\n        let index = point1[0] + y * yStride + z * zStride;\n        for (let x = point1[0]; x <= point2[0]; x++) {\n          if (!voxelFunction || voxelFunction([x, y, z], bounds)) {\n            const pixel = pixels[index];\n            if (pixel > maximum) maximum = pixel;\n            if (pixel < minimum) minimum = pixel;\n            sumOfSquares += pixel * pixel;\n            isum += pixel;\n            inum += 1;\n          }\n          ++index;\n        }\n      }\n    }\n    const average = inum > 0 ? isum / inum : 0;\n    const variance = inum ? Math.abs(sumOfSquares / inum - average * average) : 0;\n    const sigma = Math.sqrt(variance);\n    return {\n      minimum,\n      maximum,\n      average,\n      variance,\n      sigma,\n      count: inum\n    };\n  };\n\n  // TODO: use the unimplemented `vtkDataSetAttributes` for scalar length, that is currently also a TODO (GetNumberOfComponents).\n  // Scalar data could be tuples for color information?\n  publicAPI.computeIncrements = function (extent) {\n    let numberOfComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const increments = [];\n    let incr = numberOfComponents;\n\n    // Calculate array increment offsets\n    // similar to c++ vtkImageData::ComputeIncrements\n    for (let idx = 0; idx < 3; ++idx) {\n      increments[idx] = incr;\n      incr *= extent[idx * 2 + 1] - extent[idx * 2] + 1;\n    }\n    return increments;\n  };\n\n  /**\n   * @param {Number[]} index the localized `[i,j,k]` pixel array position. Float values will be rounded.\n   * @return {Number} the corresponding flattened index in the scalar array\n   */\n  publicAPI.computeOffsetIndex = _ref => {\n    let [i, j, k] = _ref;\n    const extent = publicAPI.getExtent();\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    const increments = publicAPI.computeIncrements(extent, numberOfComponents);\n    // Use the array increments to find the pixel index\n    // similar to c++ vtkImageData::GetArrayPointer\n    // Math.floor to catch \"practically 0\" e^-15 scenarios.\n    return Math.floor((Math.round(i) - extent[0]) * increments[0] + (Math.round(j) - extent[2]) * increments[1] + (Math.round(k) - extent[4]) * increments[2]);\n  };\n\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @return {Number|NaN} the corresponding pixel's index in the scalar array\n   */\n  publicAPI.getOffsetIndexFromWorld = xyz => {\n    const extent = publicAPI.getExtent();\n    const index = publicAPI.worldToIndex(xyz);\n\n    // Confirm indexed i,j,k coords are within the bounds of the volume\n    for (let idx = 0; idx < 3; ++idx) {\n      if (index[idx] < extent[idx * 2] || index[idx] > extent[idx * 2 + 1]) {\n        vtkErrorMacro(`GetScalarPointer: Pixel ${index} is not in memory. Current extent = ${extent}`);\n        return NaN;\n      }\n    }\n\n    // Assumed the index here is within 0 <-> scalarData.length, but doesn't hurt to check upstream\n    return publicAPI.computeOffsetIndex(index);\n  };\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @param {Number?} comp the scalar component index for multi-component scalars\n   * @return {Number|NaN} the corresponding pixel's scalar value\n   */\n  publicAPI.getScalarValueFromWorld = function (xyz) {\n    let comp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    if (comp < 0 || comp >= numberOfComponents) {\n      vtkErrorMacro(`GetScalarPointer: Scalar Component ${comp} is not within bounds. Current Scalar numberOfComponents: ${numberOfComponents}`);\n      return NaN;\n    }\n    const offsetIndex = publicAPI.getOffsetIndexFromWorld(xyz);\n    if (Number.isNaN(offsetIndex)) {\n      // VTK Error Macro will have been tripped already, no need to do it again,\n      return offsetIndex;\n    }\n    return publicAPI.getPointData().getScalars().getComponent(offsetIndex, comp);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  direction: null,\n  // a mat3\n  indexToWorld: null,\n  // a mat4\n  worldToIndex: null,\n  // a mat4\n  spacing: [1.0, 1.0, 1.0],\n  origin: [0.0, 0.0, 0.0],\n  extent: [0, -1, 0, -1, 0, -1],\n  dataDescription: StructuredType.EMPTY\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkDataSet.extend(publicAPI, model, initialValues);\n  if (!model.direction) {\n    model.direction = mat3.identity(new Float64Array(9));\n  } else if (Array.isArray(model.direction)) {\n    model.direction = new Float64Array(model.direction.slice(0, 9));\n  }\n  model.indexToWorld = new Float64Array(16);\n  model.worldToIndex = new Float64Array(16);\n\n  // Set/Get methods\n  macro.get(publicAPI, model, ['indexToWorld', 'worldToIndex']);\n  macro.setGetArray(publicAPI, model, ['origin', 'spacing'], 3);\n  macro.setGetArray(publicAPI, model, ['direction'], 9);\n  macro.getArray(publicAPI, model, ['extent'], 6);\n\n  // Object specific methods\n  vtkImageData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageData$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageData$1 as default, extend, newInstance };\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n"],"names":["enabledElement","invalidated","image","canvas","start","stats","lastGetPixelDataTime","lastStoredPixelDataToCanvasImageDataTime","lastPutImageDataTime","lastRenderTime","lastLutGenerateTime","render","viewport","colormap","color","renderTimeInMs","invalid","needsRedraw","scale","transform","displayedArea","translate","width","height","angle","rotation","rotate","Math","PI","widthScale","heightScale","brhc","x","tlhc","y","presentationSizeMode","rowPixelSpacing","columnPixelSpacing","verticalScale","horizontalScale","min","translation","undefined","hflip","vflip","modality","Error","scaleFactor","voi","isPreScaled","windowWidth","windowCenter","Array","isArray","invert","pixelReplication","modalityLUT","voiLUT","columns","rows","GenerateImageType","DEFAULT_SETTINGS","Symbol","RUNTIME_SETTINGS","OBJECT_SETTINGS_MAP","DICTIONARY","Settings","constructor","base","dictionary","Object","create","seal","defineProperty","this","value","set","key","get","unset","name","endsWith","deleteCount","namespace","slice","deleteAll","length","prototype","hasOwnProperty","call","startsWith","forEach","callback","iterate","extend","import","root","isPlainObject","keys","dump","context","deepSet","assert","subject","getRuntimeSettings","getDefaultSettings","subfield","defaultSettings","settingObj","setting","split","runtimeSettings","getObjectSettings","from","settings","objectSettingsMap","WeakMap","extendRuntimeSettings","references","last","current","previous","indexOf","isValidKey","prefix","record","failCount","has","add","field","delete","setAll","WeakSet","getPrototypeOf","separator","subKey","subContext","subContextValue","imageLoaders","unknownImageLoader","loadImageFromImageLoader","imageId","options","cachedImageLoadObject","getImageLoadObject","handleImageLoadPromise","promise","scheme","loader","imageLoadObject","imagePromise","Promise","resolve","then","voxelManager","numberOfComponents","createImageVoxelManager","scalarData","getPixelData","getScalarData","imageFrame","pixelData","ensureVoxelManager","IMAGE_LOADED","catch","error","errorDetails","IMAGE_LOAD_FAILED","loadImage","priority","requestType","loadAndCacheImage","putImageLoadObject","loadAndCacheImages","imageIds","map","createAndCacheDerivedImage","referencedImageId","skipCreateBuffer","onCacheAdd","voxelRepresentation","imagePlaneModule","TypedArrayConstructor","targetBuffer","type","imageScalarData","derivedImageId","referencedImagePlaneMetadata","metadata","referencedImageGeneralSeriesMetadata","instanceNumber","imagePixelModule","bitsAllocated","bitsStored","highBit","samplesPerPixel","pixelRepresentation","localImage","createAndCacheLocalImage","dimensions","spacing","origin","imagePositionPatient","direction","imageOrientationPatient","frameOfReferenceUID","putImageSync","createAndCacheDerivedImages","referencedImageIds","derivedImageIds","index","newOptions","getDerivedImageId","push","rowCosines","columnCosines","pixelSpacing","scalarDataToUse","Uint8Array","Float32Array","Uint16Array","Int16Array","photometricInterpretation","id","RLE","createRLEImageVoxelManager","minPixelValue","maxPixelValue","i","intercept","dataType","slope","getCanvas","rgba","FrameOfReferenceUID","sizeInBytes","byteLength","cancelLoadImage","filterRequests","additionalDetails","cancelFn","cancelLoadImages","cancelLoadAll","requestPool","getRequestPool","requests","requestDetails","pop","volumeId","loadObject","getVolumeLoadObject","cancel","clearRequestStack","registerImageLoader","imageLoader","registerUnknownImageLoader","oldImageLoader","unregisterAllImageLoaders","createAndCacheDerivedLabelmapImages","createAndCacheDerivedLabelmapImage","FrameRange","frameRangeExtractor","imageIdToFrames","match","range","it","Number","imageIdToFrameEnd","imageIdToFrameStart","framesToString","String","framesToImageId","newRangeString","replace","PointsManager","configuration","_dimensions","_length","_byteSize","growSize","initialSize","itemLength","array","ArrayBuffer","data","func","getPoint","dimensionLength","offset","subarray","getPointArray","grow","additionalSize","newSize","newArray","newData","reverse","midLength","floor","indexStart","indexEnd","dimension","valueStart","getTypedArray","point","f","mapData","points","p","toXYZ","xyz","z","fromXYZ","create3","subselect","count","selected","max","newPoints","create2","ProgressiveIterator","as","iterator","v","e","reject","reason","done","nextValue","waiting","rejectReason","getRecent","asyncIterator","errorCallback","console","warn","generate","processFunction","bind","nextPromise","donePromise","getNextPromise","getDonePromise","ADJACENT_ALL","ADJACENT_SINGLE_PLANE","ADJACENT_IN","ADJACENT_OUT","RLEVoxelMap","copyMap","destination","source","row","structuredClone","depth","Map","jMultiple","kMultiple","numComps","pixelDataConstructor","updateScalarData","fill","rle","end","j","getRLE","defaultValue","getRun","k","runIndex","rleIndex","findIndex","rle1","rle0","oldValue","rleInsert","isAfter","insertIndex","rlePrev","rleNext","splice","nextnext","ArrayType","Uint8ClampedArray","frameSize","toIJK","toIndex","newRle","iEnd","rowModified","baseIndex","rowToUse","forEachRow","clear","rowOffset","comp","floodFill","stack","replaceValue","flood","sourceValue","sum","planar","diagonals","singlePlane","childOptions","top","adjacents","findAdjacents","filter","adjacent","fillFrom","getter","boundsIJK","item","adjacentsDelta","leftRle","rightRle","delta","delta1","delta2","testJ","testK","testRle","newAdjacentDelta","isImageActor","actorEntry","actorIsA","actorType","actorToCheck","actor","isA","applyPreset","preset","colorTransferArray","colorTransfer","parseFloat","shiftRange","Infinity","center","getShiftRange","cfun","normColorTransferValuePoints","r","g","b","rescaled","removeAllPoints","addRGBPoint","applyPointsToRGBFunction","getProperty","setRGBTransferFunction","scalarOpacityArray","scalarOpacity","ofun","normPoints","opacity","pwf","addPoint","applyPointsToPiecewiseFunction","property","setScalarOpacity","gradientMinValue","gradientMinOpacity","gradientMaxValue","gradientMaxOpacity","gradientOpacity","setUseGradientOpacity","setGradientOpacityMinimumValue","setGradientOpacityMinimumOpacity","setGradientOpacityMaximumValue","setGradientOpacityMaximumOpacity","interpolation","setInterpolationTypeToFastLinear","setShade","shade","ambient","diffuse","specular","specularPower","setAmbient","setDiffuse","setSpecular","setSpecularPower","renderingEngineAndViewportIds","renderingEnginesArray","renderingEngine","viewports","viewportIds","getRenderingEngineAndViewportsContainingVolume","hasBeenDestroyed","renderViewports","getImagePlaneModule","newImagePlaneModule","MetadataModules","IMAGE_PLANE","buildMetadata","voiLUTFunction","imageIdScalingFactor","calibration","CALIBRATION","voiLUTFunctionEnum","values","VOILUTFunctionType","includes","LINEAR","getValidVOILUTFunction","scalingFactor","calculateSpacingBetweenImageIds","referenceImagePositionPatient","rowCosineVec","colCosineVec","scanAxisNormal","refIppVec","getDistance","positionVector","ippVec","prefetchedImageIds","metadataForMiddleImage","middleIppVec","distanceBetweenFirstAndMiddleImages","abs","distanceImagePairs","distance","sort","a","numImages","sliceThickness","spacingBetweenSlices","strictZSpacingForVolumeViewport","rendering","isNaN","debug","clamp","_colormaps","registerColormap","Name","getColormap","getColormapNames","findMatchingColormap","rgbPoints","colormapsVTK","rgbPresetNames","presetName","getPresetByName","colormapsCS3D","colormapName","matchedColormap","concat","find","RGBPoints","presetRGBPoints","opacityPoints","getScalarOpacity","getDataPointer","createLinearRGBTransferFunction","voiRange","lower","upper","createSigmoidRGBTransferFunction","approximationNodes","table","_","flatMap","buildFunctionFromArray","decimate","list","interleave","interleaveIndices","deepClone","obj","clonedObj","fnv1aHash","str","hash","charCodeAt","toString","getClosestImageId","imageVolume","worldPos","viewPlaneNormal","ignoreSpacing","kVector","dotProduct","EPSILON","halfSpacingInNormalDirection","closestImageId","minDistance","dir","getImageDataMetadata","xSpacing","ySpacing","xVoxels","yVoxels","zSpacing","_getNumCompsFromPhotometricInterpretation","numVoxels","camera","getCamera","spacingInNormalDirection","focalPoint","getActors","referencedId","uid","volumeActor","sliceRange","numberOfSlices","round","imageIndex","getScalingParameters","modalityLutModule","generalSeriesModule","scalingParameters","rescaleSlope","rescaleIntercept","suvFactor","suvbw","suvbsa","suvlbm","SMALL_EPSILON","isOne","isUnit","off","isOrthonormal","getSliceRange","imageData","getMapper","getInputData","corners","getDirection","dx","dy","dz","getDimensions","indexToWorld","buildFromDegree","identity","rotateFromDirections","pt","apply","transformedFocalPoint","currentSlice","minX","maxX","getSpacingInNormalDirection","iVector","jVector","dotProducts","projectedSpacing","EPSILON_PART","isPrimaryVolume","volume","getVolumeLoaderSchemes","starts","substring","getTargetVolumeAndSpacingInNormalDir","targetId","useSlabThickness","volumeActors","actorUID","imageVolumes","va","getVolume","iv","targetVolumeId","imageVolumeIndex","getSpacingInNormal","smallest","hasPrimaryVolume","slabThickness","getProperties","renderingEngines","targetViewports","filteredViewports","getVolumeViewports","vp","hasVolumeId","getVoiFromSigmoidRGBTransferFunction","cfunRange","getRange","getTable","cfunDomain","y1","logy1","log","x1","y2","logy2","x2","ww","wc","getVolumeActorCorners","bounds","extentToBounds","getExtent","getVolumeId","getActor","numScrollSteps","floatingStepNumber","currentStepIndex","sliceRangeInfo","hasFloatScalingParameters","some","isInteger","hasNaNValues","input","imageIdToURI","colonIndex","retrieveConfigurationState","IMAGE_RETRIEVE_CONFIGURATION","imageRetrieveMetadataProvider","payload","clone","restore","state","queries","query","addProvider","EventListenerPhases","TargetEventListeners","target","_eventListeners","_children","_target","isEmpty","size","addEventListener","dotIndex","namespaceToken","childElementEventListener","_addEventListener","removeEventListener","_removeEventListener","reset","entries","child","_unregisterAllEvents","listenersMap","listenerPhase","capture","Capture","Bubble","registeredPhases","None","callbackItem","newListenerPhase","_unregisterAllListeners","listener","eventPhases","currentPhase","useCapture","MultiTargetEventListenerManager","_targetsEventListeners","eventListeners","targetEventListeners","scaleRGBTransferFunction","rgbTransferFunction","getSize","nodeValue1","getNodeValue","setNodeValue","getMinMax","storedPixelData","storedPixel","numPixels","LAST_RUNTIME_ID","GLOBAL_CONTEXT","DEFAULT_MAX","DEFAULT_SEPARATOR","getRuntimeId","symbol","idComponents","carry","n","getNextRuntimeId","join","imageURI","isOpposite","v1","v2","tolerance","indexWithinDimensions","targetViewport","renderingEngineId","getRenderingEngine","sameVolumesViewports","targetActors","vpActors","every","vpActor","preScale","scaled","renderToCanvasGPU","imageOrVolume","viewportOptions","displayArea","imageArea","HTMLCanvasElement","isVolume","viewportId","element","document","createElement","devicePixelRatio","window","originalWidth","originalHeight","style","visibility","position","body","appendChild","uniqueId","setAttribute","temporaryCanvas","getOrCreateCanvas","RenderingEngine","getViewport","viewportInput","ViewportType","ORTHOGRAPHIC","STACK","defaultOptions","suppressEvents","enableElement","elementRendered","viewReference","onImageRendered","eventDetail","useViewRef","setViewReference","getContext","drawImage","canvasToWorld","topRight","bottomLeft","rightVector","downVector","Events","IMAGE_RENDERED","setTimeout","disableElement","querySelectorAll","remove","thicknessMm","setVolumes","renderImageObject","resetCamera","setProperties","renderToCanvasCPU","_renderingEngineId","_viewportOptions","getDefaultViewport","renderingTools","calculateTransform","drawImageSync","loadImageToCanvas","RequestType","Thumbnail","useCPURendering","thumbnail","imageAspect","baseViewportOptions","renderFn","successCallback","metaData","useRGBA","cache","imageLoadPoolManager","addRequest","imageIdIndex","HistoryMemo","label","redoAvailable","undoAvailable","ring","_size","undo","items","restoreMemo","eventTarget","dispatchEvent","CustomEvent","detail","isUndo","operationType","memo","undoIf","condition","redo","newPosition","createMemo","DefaultHistoryMemo","worldCoords","newOrigin","sub","imageToWorldCoords","imageCoords","imageCoordsInWorld","getViewportsWithImageURI","getViewports","hasImageURI","getClosestStackImageIndexForPoint","minimalDistance","getImageIds","currentImageIdIndex","getCurrentImageIdIndex","planeMetadata","targetImagePlane","rowVec","colVec","planeNormal","getPlaneMetadata","plane","planeEquation","planeDistanceToPoint","closestStack","higherImageIds","lowerImageIds","calculateMinimalDistanceForStackViewport","getCurrentVolumeViewportSlice","canvasWidth","canvasHeight","sliceToIndexMatrix","indexToSliceMatrix","getSliceViewInfo","ijkOriginPoint","transformCanvasToIJK","ijkRowPoint","ijkColPoint","ijkRowVec","ijkColVec","ijkSliceVec","maxIJKRowVec","maxIJKColVec","getImageData","sliceViewInfo","getSliceData","spatialRegistrationMetadataProvider","viewportId1","viewportId2","entryId","entryIdReverse","viewport1","viewport2","imageId1","getSliceIndex","imageId2","imagePlaneModule1","imagePlaneModule2","iop2","imagePositionPatient1","imagePositionPatient2","mat","getViewportImageCornersInWorld","ratio","topRightCanvas","bottomRightCanvas","bottomLeftCanvas","topLeftWorld","topRightWorld","bottomRightWorld","bottomLeftWorld","topLeftImage","worldToIndex","topRightImage","bottomRightImage","bottomLeftImage","topLeftImageWorld","_isInBounds","topRightImageWorld","bottomRightImageWorld","bottomLeftImageWorld","_getStackViewportImageCorners","imageCoord","getEnabledElement","StackViewport","getCornerstoneImage","isValidVolume","imageId0","seriesInstanceUID","usingDefaultValues","baseMetadata","validVolume","isEqual","videoUIDs","Set","isVideoTransferSyntax","uidOrUids","async","convertStackToVolumeViewport","uuidv4","getUnknownVolumeLoaderSchema","prevViewPresentation","getViewPresentation","prevViewReference","getViewReference","background","orientation","createAndCacheVolume","load","volumeViewport","volumeViewportNewVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","setViewPresentation","convertVolumeToStackViewport","ImageVolume","prevView","stackViewport","setStack","roundToPrecision","roundNumber","precision","absValue","fixedPrecision","toFixed","convertToGrayscale","isRGBA","isRGB","newScalarData","destOffset","increment","getRandomSampleFromArray","clonedArray","shuffleArray","random","componentToHex","c","hex","rgbToHex","hexToRgb","result","exec","parseInt","deepEqual","obj1","obj2","JSON","stringify","groupBy","reduce","rv","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","frame_value_set","frames","frame_value","setEquals","getTagValue","tag","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","dv","DataView","setUint8","getSiemensPrivateBValue","getGEPrivateBValue","set_a","set_b","getPetFrameReferenceTime","moduleInfo","positionGroups","ippMetadata","frame_count","getIPPGroups","imageIdGroups","splittingTag","tags","fncList2","timePoints","isDynamicVolume","scaleArray","arrayLength","clip","val","low","high","scrollSlabs","getVolumeViewportScrollInfo","newFocalPoint","snapFocalPointToSlice","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","getCurrentImageId","triggerEvent","VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS","VOLUME_VIEWPORT_SCROLL","scrollVolume","eventData","STACK_SCROLL_OUT_OF_BOUNDS","scroll","debounceLoading","loop","jumpToSlice","currentImageIndex","getTargetImageIdIndex","getNumberOfSlices","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","createSubVolume","referencedVolumeId","referencedVolume","refVolumeDim","minY","maxY","minZ","maxZ","ijkTopLeft","boundingBoxOriginWorld","transformIndexToWorld","subVolumeOptions","subVolume","createLocalVolume","subVolumeData","getCompleteScalarDataArray","subVolumeSliceSize","refVolumeSliceSize","refVolumeData","rowStartWorld","refVolumeRowStartIJK","transformWorldToIndex","refVolumeRowStartOffset","rowData","subVolumeLineStartOffset","setCompleteScalarDataArray","getVolumeDirectionVectors","viewUp","ijkOrigin","worldVecColDir","worldVecSliceDir","worldVecRowDir","ijkVecColDir","ijkVecSliceDir","ijkVecRowDir","calculateNeighborhoodStats","centerIjk","radius","numSlices","numPixelsPerSlice","sumSq","cx","cy","cz","centerIndex","mean","stdDev","variance","sqrt","projectionRadiographSOPClassUIDs","getPixelSpacingInformation","instance","PixelSpacing","SOPClassUID","SequenceOfUltrasoundRegions","isArrayOfSequences","PhysicalDeltaX","PhysicalDeltaY","calculateUSPixelSpacing","ImagerPixelSpacing","EstimatedRadiographicMagnificationFactor","PixelSpacingCalibrationType","PixelSpacingCalibrationDescription","isProjection","CalibrationTypes","UNKNOWN","ERMF","PROJECTION","CALIBRATED","calculateRadiographicPixelSpacing","NOT_APPLICABLE","getViewportModality","Modality","_getViewportModality","invertRgbTransferFunction","areNumbersEqualWithTolerance","num1","num2","isNumberType","isNumberArrayLike","arr1","arr2","areArraysEqual","negative","isEqualNegative","isEqualAbs","loglevel","getRootLogger","logger","getLogger","names","cs3dLog","coreLog","toolsLog","loaderLog","aiLog","examplesLog","dicomConsistencyLog","imageConsistencyLog","makeVolumeMetadata","voiLut","voiLutModule","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","ImageOrientationPatient","Columns","Rows","VOILUTFunction","SeriesInstanceUID","linePlaneIntersection","p0","p1","x0","y0","z0","z1","A","B","C","D","t","normal","normalized","threePlaneIntersection","firstPlane","secondPlane","thirdPlane","A1","B1","C1","D1","A2","B2","C2","D2","A3","B3","C3","D3","m0","m1","m2","m3","signed","numerator","sign","isPointOnPlane","pointInShapeCallback","pointInShapeFn","returnPoints","scalars","getPointData","getScalars","getData","defaultBoundsIJK","pointsInShape","iMin","iMax","jMin","jMax","kMin","kMax","pointIJK","xMultiple","yMultiple","zMultiple","indexK","indexJK","pointLPS","iterateOverPointsInShape","iterateOverPointsInShapeVoxelManager","getAtIndex","deltaFrames","posDiffFromFocalPoint","steps","frameIndex","newSlicePosFromMin","sortImageIdsAndGetSpacing","usingWadoUri","sortedImageIds","getTransferFunctionNodes","transferFunction","setTransferFunctionNodes","nodes","node","canvasPoint","vtkImageData","worldPoint","voxelPos","transformWorldToIndexContinuous","updateVTKImageDataWithCornerstoneImage","sourceImageData","newPixelData","modified","toWindowLevel","toLowHighRange","LINEAR_EXACT","SAMPLED_SIGMOID","Active","Passive","Enabled","ToolModes","CAMERA_MODIFIED","Enums","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","calibratedPixelSpacingMetadataProvider","utilities","ViewportStatus","sumOverDimensionGroups","dimensionGroups","getScalarDataLength","resultArray","dimensionGroupNumber","getDimensionGroupScalarData","SUM","AVERAGE","SUBTRACT","idx","idx3","getPolyDataPointIndexes","polyData","linesData","getLines","lineSegments","segmentSize","segment","contours","findStartingPoint","startPoint","contour","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","getPoints","contourIndexes","ColorbarRangeTextPosition","Right","Widget","extractWindowLevelRegionToolData","VolumeViewport","extractImageDataVolume","extractImageDataStack","setAnnotationLabel","annotation","updatedLabel","triggerAnnotationModified","ChangeTypes","LabelChange","props","_controlPoints","_invalidated","_resolution","resolution","_fixedResolution","fixedResolution","_closed","closed","controlPoints","numControlPoints","aabb","_update","_aabb","hasTangentPoints","addControlPoint","addControlPoints","addControlPointAtU","u","lineSegment","_getLineSegmentAt","endPoint","curveSegmentIndex","curveSegment","_curveSegments","controlPointPos","deleteControlPointByIndex","minControlPoints","clearControlPoints","setControlPoints","updateControlPoint","newControlPoint","getControlPoints","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","len","squaredDist","getClosestControlPointWithinDistance","maxDist","closestControlPoint","getClosestPoint","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","closestPoint","csA","csB","distanceSquared","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","math","distanceToPointSquaredInfo","uValue","previousLineSegmentsLength","distanceToPoint","getClosestPointOnControlPointLines","linePoints","getPolylinePoints","_convertCurveSegmentsToPolyline","getPreviewPolylinePoints","controlPointPreview","closeDistance","closeSpline","previewCurveSegments","getPreviewCurveSegments","isPointNearCurve","curveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","distanceToPointSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","p2","isVerticalLine","xIntersection","getSplineCurves","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","CubicSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","getTransformMatrix","_getCurveSegment","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","p3","_getCurveSegmentPoints","tt","ttt","tValues","qValues","p0Index","p2Index","p3Index","mirror","_getLineSegments","numLineSegments","inc","maxU","curveSegmentLength","lineSegAABB","lineSegLength","TRANSFORM_MATRIX","BSpline","CardinalSpline","super","_scale","_fixedScale","fixedScale","s","s2","CatmullRomSpline","LinearSpline","PanTool","toolProps","defaultToolProps","supportedInteractionTypes","touchDragCallback","evt","_dragCallback","mouseDragCallback","deltaPoints","deltaPointsWorld","world","updatedPosition","updatedFocalPoint","toolName","TrackballRotateTool","rotateIncrementDegrees","_resizeObservers","_hasResolutionChanged","preMouseDownCallback","mapper","getDefaultActor","originalSampleDistance","getSampleDistance","setSampleDistance","cleanUp","once","_getViewportsInfo","getToolGroup","toolGroupId","viewportsInfo","onSetToolActive","subscribeToElementResize","getEnabledElementByIds","resizeObserver","ResizeObserver","viewPresentation","observe","_viewportAddedListener","TOOLGROUP_VIEWPORT_ADDED","onSetToolDisabled","disconnect","rotateCamera","centerWorld","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPoints","lastPoints","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","dot","angleX","acos","upVec","atV","rightV","forwardV","angleY","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","frame","buffer","_getMinMax","newRange","viewportsContainingVolumeUID","properties","scaling","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","voiLutFunction","imageDynamicRange","calculatedDynamicRange","getMiddleSliceData","acc","pixel","metadataDynamicRange","_getImageDynamicRangeFromViewport","imageDataRange","voxel","WindowLevelRegionTool","minWindowWidth","addNewAnnotation","isDrawing","getReferencedImageId","getFrameOfReferenceUID","highlighted","getToolName","handles","cachedStats","viewportIdsToRender","getViewportIdsWithToolToRender","editData","_activateDraw","hideElementCursor","preventDefault","triggerAnnotationRenderForViewportIds","_endCallback","_deactivateDraw","resetElementCursor","annotationUID","triggerAnnotationCompleted","applyWindowLevelRegion","worldToCanvas","topLeftCanvas","isInteractingWithTool","MOUSE_UP","MOUSE_DRAG","MOUSE_MOVE","MOUSE_CLICK","TOUCH_END","TOUCH_DRAG","TOUCH_TAP","renderAnnotation","svgDrawingHelper","renderStatus","annotations","filterInteractableAnnotationsForElement","styleSpecifier","canvasCoordinates","lineWidth","lineDash","getAnnotationStyle","dataId","rectangleUID","drawRect","startCanvas","endCanvas","left","pixelLuminanceData","luminance","spIndex","column","red","green","blue","minMaxMean","pixelLuminance","globalMin","globalMax","spv","isPointNearTool","toolSelectedCallback","handleSelectedCallback","_activateModify","_deactivateModify","StackScrollTool","debounceIfNotLoaded","deltaY","mouseWheelCallback","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","wheel","BaseVolumeViewport","offsetHeight","PlanarRotateTool","setAngle","startPoints","currentPointWorld","startPointWorld","centerCanvas","angleBetweenLines","cross","rotAngle","rotMat","rotatedViewUp","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","deltaDistance","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","currentPointsList","parallelProjection","_panCallback","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","getToolGroupForViewport","jumpToWorld","RENDERING_DEFAULTS","CONSTANTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","shadow","viewportIndicators","viewportIndicatorsConfig","autoPan","enabled","panSize","handleRadius","enableHDPIHandles","referenceLinesCenterGapRadius","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","mobile","toolCenter","initializeViewport","_getAnnotations","removeAnnotation","cameraPosition","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","addAnnotation","resetCrosshairs","viewportInfo","resetPan","resetZoom","resetToCenter","resetRotation","resetSlabThickness","_computeToolCenter","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","point1","normal2","point2","normal3","point3","setToolCenter","jumpWorld","_jump","filteredAnnotations","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","canvasCoords","proximity","_pointNearTool","interactionType","onCameraModified","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","CROSSHAIR_TOOL_CENTER_CHANGED","getViewportIds","_autoPanViewportIfNecessary","onResetCamera","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","isAnnotationLocked","previousActiveOperation","previousActiveViewportIds","near","getHandleNearImagePoint","_areViewportIdArraysEqual","viewportUIDSpecificCrosshairs","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","liangBarksyClip","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","lineUID","drawLine","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","drawHandles","referenceColorCoordinates","xOffset","yOffset","circleRadius","circleUID","drawCircle","getAnnotations","toolGroupAnnotations","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewportsAnnotationsWithSameCameraDirection","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","volumeIds","getAllVolumeIds","otherVolumeIds","viewportsAnnotationsToUpdate","sameScene","_applyDeltaShiftToSelectedViewportCameras","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","otherViewportsIds","referenceAnnotations","viewportsIds","dotProd","projectedDelta","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","getToolInstance","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","onSetToolPassive","onSetToolEnabled","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","_applyDeltaShiftToViewportCamera","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","viewportProperties","originalViewportRotation","canvasPos","magnifyToolElement","querySelector","magnifyElement","classList","display","magnifyViewport","pow","_dragEndCallback","viewportElement","removeChild","getTargetId","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","AdvancedMagnifyTool","Actions","magnifyingGlass","zoomFactor","zoomFactorList","padding","actions","showZoomFactorsList","method","bindings","mouseButton","MouseBindings","Secondary","modifierKey","KeyboardBindings","Shift","config","canvasHandlePoints","_getCanvasHandlePoints","magnifyViewportId","sourceViewportId","isCanvasAnnotation","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","dispose","getAllAnnotations","canvasTop","canvasBottom","canvasLeft","radiusPoint","getCanvasCircleRadius","handle","handleIndex","newAnnotation","_dragDrawCallback","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","getStyle","activeHandleCanvasCoords","isAnnotationVisible","handleGroupUID","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","assign","focus","onChangeCallback","eventName","stopPropagation","keyCode","which","toLowerCase","option","title","defaultSelected","sourceViewport","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","getEnabledElementByViewportId","stackActorReInitialized","_reset","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","ANNOTATION_REMOVED","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","visible","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","debounce","_resizeViewport","_syncViewports","parentNode","magnifyToolGroup","mode","toolBindingsOptions","setToolActive","setToolPassive","setToolEnabled","Disabled","setToolDisabled","_inheritBorderRadius","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","toolInstance","addViewport","addSegmentationRepresentations","segmentationId","SegmentationRepresentations","Labelmap","_cloneStack","_cloneVolumes","volumeInputArray","_cloneViewport","sourceViewportOptions","toolGroups","_cancelMouseEventCallback","closest","canvasCurrent","magnifyRadius","dist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","_addBrowserEventListeners","_removeBrowserEventListeners","TOOL_MODE_CHANGED","sourceCanvas","_syncViewportsCameras","_syncStackViewports","setImageIdIndex","sourceProperties","resize","ReferenceLines","AnnotationDisplayTool","enforceSameFrameOfReference","showFullDimension","_init","getRenderingEngines","filterViewportsWithToolEnabled","sourceViewportCanvasCornersInWorld","onSetToolConfiguration","topLeft","bottomRight","sourceViewPlaneNormal","isParallel","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","handleFullDimension","vec1","vec2","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","OverlayGridTool","sourceImageIds","pointSets","calculateImageIdPointSets","viewportData","imageIdNormal","getImageIdNormal","targetData","initializeViewportData","pointSetsToUse","lineStartsWorld","lineEndsWorld","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","actorEntries","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","canvasPoints","fillColor","fillOpacity","closePath","polyLineUID","drawPath","actorWorldPointsMap","getOutputData","colorArray","colorComponentToString","component","componentString","colorToString","getColor","decimals","pointToString","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","textBox","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","right","centerSpace","lineLength","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","renderViewport","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","enabledElements","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","bottom","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","fontFamily","fontSize","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","HandlesUpdated","dragCallback","polyline","sculpt","registerShapes","CircleSculptCursor","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mousePoint","mouseCanvasPoint","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","contourIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertHandleRadially","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","toolIndex","isLocked","isVisible","distanceFromTool","distancePointToContour","AnnotationStyleStates","Default","Highlighted","renderShape","DIRECTIONS","VolumeRotateTool","ax","ay","az","LabelTool","getTextCallback","changeTextCallback","svgLayer","textGroup","textGroupElement","bbox","getBBox","getAttribute","translateX","translateY","matches","text","initialWorldPos","anchorWorldPos","doneEditMemo","getLinkedTextBoxStyle","textBoxUID","hydrate","autoGenerated","_doneChangingTextCallback","updatedText","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","LengthTool","getTextLines","defaultGetTextLines","movingTextBox","canvasPoint1","canvasPoint2","worldPosDelta","unit","_throttledCalculateCachedStats","_calculateCachedStats","textLines","canvasTextBoxCoords","getTextBoxCoordsCanvas","textBoxPosition","boundingBox","drawLinkedTextBox","throttle","trailing","hydrateBase","_calculateLength","pos1","pos2","worldPos1","worldPos2","targetIds","StatsUpdated","cachedVolumeStats","HeightTool","heightUID","drawHeight","_calculateHeight","outside","ProbeTool","probeDefaults","mergeDefaultProps","createAnnotationForViewport","eventDispatchDetail","getStackViewports","referencedImageURI","currentImageURI","textUID","changeType","pixelUnitsOptions","isViewportPreScaled","isSuvScaled","ijk","modalityUnit","getAtIJKPoint","calibratedResults","hasEnhancedRegionValues","units","getPixelValueUnits","DragProbeTool","postMouseDownCallback","postTouchStartCallback","EllipticalROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","initialRotation","getRotation","canvasCorners","getCanvasEllipseCorners","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","dYCanvas","newHalfCanvasWidth","canvasRight","dXCanvas","newHalfCanvasHeight","areaUnit","area","ellipseUID","centerPoint","_getCanvasEllipseCenter","pos1Index","post2Index","ellipseObj","xRadius","yRadius","zRadius","worldWidth","worldHeight","getWorldWidthAndHeightFromTwoPoints","isEmptyArea","statsCallback","isInObject","pointInEllipse","fast","getStatistics","statsArray","ellipse","ellipseCanvasPoints","areaLine","CircleROITool","canvasEnd","getCanvasCircleCorners","radiusUnit","perimeter","wasInvalidated","pos2Index","aspect","radiusLine","ETDRSGridTool","degrees","diameters","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","cos","sin","measurement","p1Canvas","p2Canvas","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","SplineROITool","ContourSegmentationBaseTool","SplineTypes","contourHoleAdditionModifierKey","epsilon","spline","Cardinal","Class","CatmullRom","Linear","drawPreviewEnabled","lastControlPointDeletionKeys","AddControlPoint","Primary","DeleteControlPoint","Ctrl","fireChangeOnUpdate","contourHoleProcessingEnabled","Completed","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","_mouseMoveCallback","lastCanvasPoint","_mouseDownCallback","doubleClick","MOUSE_DOUBLE_CLICK","closeContour","addNewPoint","moveAnnotation","eventType","ANNOTATION_COMPLETED","ANNOTATION_MODIFIED","triggerChangeEvent","KEY_DOWN","MOUSE_DOWN","_renderStats","textboxStyle","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","deleteControlPointCallback","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","canvasMaxX","canvasMaxY","canvasMinX","canvasMinY","getAABB","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","getArea","getMouseModifier","event","createAnnotation","cancelAnnotation","isContourSegmentationTool","renderAnnotationInstance","renderContext","annotationStyle","locked","annotationLocked","childAnnotations","getChildAnnotations","childAnnotationUIDs","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","updateContourPolyline","targetWindingDirection","Clockwise","updateWindingDirection","previewPolylinePoints","drawPolyline","controlPointsConnectors","textbox","createInterpolatedSplineControl","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","splineInstance","SplineClass","SplineContourSegmentationTool","LivewireContourTool","snapHandleNearby","nearestEdge","showInterpolationPolyline","cancelInProgress","proximitySquared","clearAnnotation","clearEditData","triggerContourAnnotationCompleted","worldToSlice","sliceToWorld","worldPosOriginal","currentPath","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","scissors","findMinNearby","pathPoints","findPathToPoint","addPoints","prependPath","confirmedPath","lastPoint","getLastPoint","startSearch","updateAnnotation","imgWidth","imgHeight","slicePoint","editHandle","setupBaseEditData","nextPos","viewportImageData","sliceImageData","ijkPoint","startPos","LivewireScissors","createInstanceFromRawPixelData","scissorsNext","currentPathNext","confirmedPathNext","handlePoints","numHandles","previousHandle","nextHandle","findHandlePolylineIndex","slicePos","pathPointsLeft","pathPointsRight","appendPath","contourSegmentationAnnotation","canvasHandles","livewirePath","pointArray","imagePoints","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","repeatInterpolation","originalPoints","handleSmoothing","hIndex","testPoint","minPoint","acceptedPath","path","InterpolationUpdated","rendered","polylineCanvasPoints","ArrowAnnotateTool","arrowFirst","arrowHeadStyle","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","stopImmediatePropagation","markerSize","arrowUID","drawArrow","viaMarker","AngleTool","angleStartedNotYetCompleted","line1","canvasPoint3","line2","worldPos3","fromCharCode","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","TOUCH_START","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","firstLine","secondLine","mid1","midPoint","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","units1","values2","units2","dist1","dist2","KeyImageTool","dataSeries","seriesLevel","dataPoint","isPoint","canvasPosition","setPoint","AnnotationEraserTool","_deleteNearbyAnnotations","toolGroup","tools","_toolInstances","annotationsToRemove","interactableAnnotations","setAnnotationSelected","getAnnotation","createAnnotationMemo","deleting","RegionSegmentTool","GrowCutBaseTool","isPartialVolume","positiveSeedVariance","negativeSeedVariance","currentWorldPoint","growCutData","circleBorderPoint","runGrowCut","circleCenterPoint","getGrowCutLabelmap","segmentation","sphereInfo","growCut","segmentationData","canvasCenterPoint","canvasBorderPoint","vecCenterToBorder","getSegmentStyle","segmentIndex","RegionSegmentPlusTool","subVolumePaddingPercentage","islandRemoval","mouseTimer","allowedToProceed","cursor","clearTimeout","onMouseStable","mouseStabilityDelay","refVolume","seeds","positiveSeedIndices","negativeSeedIndices","requestAnimationFrame","worldIslandPoints","getRemoveIslandData","mergedOptions","NEGATIVE_PIXEL_RANGE","POSITIVE_PIXEL_RANGE","ISLAND_PIXEL_RANGE","WholeBodySegmentTool","positivePixelRange","negativePixelRange","islandPixelRange","_getHorizontalLineWorldPoints","horizontalLines","worldLine1P1","worldLine1P2","worldLine2P1","worldLine2P2","worldSquarePoints","worldTopLeft","worldBottomRight","_getWorldBoundingBoxFromProjectedSquare","boundingBoxInfo","ijkBottomRight","positiveSeedValue","negativeSeedValue","labelmapVolumeId","labelmapVolume","referencedVolumeData","labelmapData","islandPointIndexes","pixelValue","_projectWorldPointAcrossSlices","worldEdgePoint","vecDirection","_getViewportVolume","ijkLineP1","ijkLineP2","_getCuboidIJKEdgePointsFromProjectedWorldPoint","_getWorldCuboidCornerPoints","cuboidPoints","worldSquarePoint","worldEdgePoints","worldCuboidPoints","_getHorizontalLineIJKPoints","ijkPoint1","ijkPoint2","RectangleScissorsTool","LabelmapBaseTool","strategies","FILL_INSIDE","ERASE_INSIDE","defaultStrategy","activeStrategy","activeLabelmapSegmentation","activeSegmentation","segmentsLocked","segmentLocking","segmentColor","representationData","getSegmentation","segmentationImageId","getCurrentLabelmapImageIdForViewport","operationData","applyActiveStrategy","toolMetadata","CircleScissorsTool","SphereScissorsTool","activeSegmentationRepresentation","getEditData","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","handlesToStart","startWorld","indexToWorldVec3","endWorld","newProjectionPoints","newPoint","pointsInsideVolume","measureInfo","modalityUnitOptions","worldPos1Index","worldProjectionPointIndex","indexOfProjection","worldPos2Index","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","pos","_context","PaintFillTool","currentSegmentationImageId","getImage","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataIndex","setAtIndex","framesModified","getFramesModified","triggerSegmentationDataModified","boundaries","minJ","maxJ","seedIndex3D","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","AXES","CUSTOM","polyDataURL","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","setEnabled","offscreenMultiRenderWindow","getRenderWindow","widget","getWidget","isDeleted","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","url","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","shallowCopy","setActiveScalars","setInputData","setColorModeToDirectScalars","setMapper","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","toUpperCase","SegmentSelectTool","SelectMode","Inside","Border","hoverTimeout","searchRadius","hoverTimer","_setActiveSegment","getActiveSegmentation","_setActiveSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","getSegmentIndexAtLabelmapBorder","Contour","getHoveredContourSegmentationAnnotation","Surface","setActiveSegmentIndex","triggerSegmentationModified","SegmentBidirectionalTool","BidirectionalTool","getSegmentIndexColor","dataId1","dataId2","secondLineUID","toolAnnotations","existingAnnotation","majorAxis","minorAxis","major0","major1","minor0","minor1","SegmentLabelTool","_setHoveredSegment","_setHoveredSegmentForType","segments","_editData","hoveredSegmentLabel","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","rectangle","active","drawRedactionRect","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldToIndexVec3","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","getVolumeActors","coloneIndex","_getTargetStackUID","Dir","Forward","Backward","visited","DEFAULT_VALUES","publicAPI","model","initialValues","arguments","m","algo","requestData","inData","outData","output","extractContours","traverseLoop","pd","startLineId","startPtId","loopPoints","lineId","lastPtId","terminated","numInserted","cellPointIds","getCellPoints","ptId","lineCell","getPointCells","loops","inLines","setData","li","getNumberOfCells","outLines","insertNextCell","vtkContourLoopExtraction","newInstance","projectTo2D","geometricSurfaceUtils","checkStandardBasis","rotatePoints","getBoundingBoxAroundShapeWorld","isPlaneIntersectingAABB","polySegConverters","polySeg","polySegInitializing","polySegInitializingPromise","initializePolySeg","progressCallback","ICRPolySeg","moduleId","peerImport","default","initialize","updateProgress","convertContourToSurface","args","callbacks","polylines","numPointsArray","convertContourRoiToSurface","convertLabelmapToSurface","results","rotationInfo","isStandard","rotatedPoints","rotationMatrix","convertContourToVolumeLabelmap","segmentIndices","annotationUIDsInSegmentMap","segmentationVoxelManager","createScalarVolumeVoxelManager","setDimensions","setOrigin","setDirection","setSpacing","scalarArray","setScalars","holesPolyline","projectedPolyline","sharedDimensionIndex","holes","hole","projectedHole","firstDim","secondDim","setAtIJKPoint","point2D","convertContourToStackLabelmap","segmentationsInfo","segmentationVoxelManagers","segmentationInfo","manager","convertSurfaceToVolumeLabelmap","convertSurfaceToLabelmap","polys","convertSurfacesToVolumeLabelmap","segmentsInfo","promises","all","targetImageData","totalSize","outputVolumesInfo","extent","volumeInfo","roundedIndex","getSurfacesAABBs","surfacesInfo","aabbs","numDimensions","cutSurfacesIntoPlanes","planesInfo","surfacesAABB","updateCacheCallback","numberOfPlanes","cutter","plane1","setCutFunction","surfacePolyData","planeInfo","sliceIndex","planes","polyDataResults","polyDataInfo","aabb3","getPolys","setNormal","cutterOutput","buildLinks","loopExtraction","loopOutput","lines","numberOfCells","progress","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","svgNodeCache","domRef","appendNode","svgLayerElement","svgNode","touched","setNodeTouched","clearUntouched","cacheEntry","internalDivElement","_getSvgLayer","svgNodeCacheForCanvas","fn","strokeOpacity","strokeWidth","svgNodeHash","existingCircleElement","attributes","stroke","newCircleElement","createElementNS","existingEllipse","w","hypot","h","atan2","rx","ry","svgEllipseElement","linkUID","annotationAnchorPoints","refPoint","findClosestPoint","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","centering","canvasBoundingBox","midX","endfirstLine","endsecondLine","threeLine","svgns","headLength","legacyDrawArrow","markerFullId","defs","arrowMarker","arrowPath","markerEndId","_width","_getHash","existingRect","svgRectElement","Swipe","DEFAULT_CONTOUR_SEG_TOOL_NAME","convertContourPolylineToCanvasSpace","numPoints","createPolylineHole","targetAnnotation","holeAnnotation","windingDirection","holeWindingDirection","addChildAnnotation","removeContourSegmentationAnnotation","holeContour","holePolyline","updatedToolNames","renderers","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","_needsRender","_animationFrameSet","_animationFrameHandle","_getAllViewports","_renderFlaggedSegmentations","_throwIfDestroyed","_triggerRender","_getViewportIdsForSegmentation","_setViewportsToBeRenderedNextFrame","renderSegmentation","segmentationRepresentations","_render","viewportRenderList","segmentationRenderList","representation","_addPlanarFreeHandToolIfAbsent","allSettled","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","hasTool","addTool","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","segmentationImageIds","volumeLoader","internalConvertStackToVolumeLabelmap","defaultSegmentationStateManager","getDefaultRenderingConfig","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","freeze","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","resetState","updateSegmentation","draftState","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","isBaseVolumeSegmentation","updateLabelmapSegmentationImageReferences","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","isReferenceViewable","asOverlay","_updateLabelmapImageIdReferenceMap","_updateAllLabelmapSegmentationImageReferences","withNavigation","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentation","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","addColorLUT","removeColorLUT","_getStackIdForImageIds","getAllViewportSegmentationRepresentations","representations","getSegmentationRepresentationsBySegmentationId","viewportReps","filteredReps","segmentationStyle","global","viewportsStyle","setStyle","styles","currentStyles","updatedStyles","copyActiveToInactiveIfNotProvided","renderInactiveSegmentations","repConfig","perSegment","allSegments","ALL_SEGMENTATIONS_KEY","segConfig","processedStyles","labelmapStyles","renderOutlineInactive","renderOutline","outlineWidthInactive","outlineWidth","renderFillInactive","renderFill","fillAlphaInactive","fillAlpha","outlineOpacityInactive","outlineOpacity","contourStyles","outlineDashInactive","outlineDash","combinedStyle","getDefaultStyle","allSegmentationsKey","getRenderInactiveSegmentations","clearSegmentationStyle","clearAllSegmentationStyles","clearViewportStyle","clearAllViewportStyles","resetToGlobalStyle","hasCustomStyle","segmentationStateManager","indexToUse","colorLUTToUse","missingColorLUTs","segmentationInputArray","segmentationInput","inputData","contourData","geometryIds","annotationUIDsMap","normalizedSegments","segmentsConfig","surfaceData","geometryId","geometry","getGeometry","normalizeSurfaceSegments","normalizeSegments","addSegmentations","setColorLUT","colorLUTsIndex","segmentationRepresentation","colorValue","setSegmentIndexColor","colorReference","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","getSegmentations","getViewportSegmentations","getViewportSegmentationRepresentations","convertVolumeToStackLabelmap","segmentationVolume","computeVolumeLabelmapFromStack","internalAddSegmentationRepresentation","representationInput","getColorLUTIndex","colorLUTOrIndex","parse","rep","removeAllSegmentations","immediate","_removeSegmentationRepresentations","labelmapDisplay","contourDisplay","removeRepresentation","surfaceDisplay","_removeRepresentationObject","removeAllSegmentationRepresentations","removeLabelmapRepresentation","removeContourRepresentation","removeSurfaceRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegmentIndices","destroy","re","toolGroupFilteredByIds","tg","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","index3","index4","handles1","handles2","scale1","scale2","widthUnit","vector1","vector2","PlanarFreehandContourSegmentationTool","allowOpenContours","renderResult","pointCanProjectOnLine","PlanarFreehandROITool","alwaysRenderOpenContourHandles","closeContourProximity","checkCanvasEditFallbackProximity","makeClockWise","subPixelResolution","smoothing","smoothOnAdd","smoothOnEdit","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","displayOnePointAsCrosshairs","isEditingClosed","isEditingOpen","activateDraw","activateOpenContourEndEdit","activateClosedContourEdit","activateOpenContourEdit","previousPoint","pStart","pEnd","cancelDrawing","cancelOpenContourEdit","cancelClosedContourEdit","calibratedScale","updateClosedCachedStats","updateOpenCachedStats","annotationsToDisplay","filterAnnotationsWithinSlice","filterAnnotationsForDisplay","annotationsWithParallelNormals","td","annotationViewPlaneNormal","annotationsWithinSlice","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","renderPointContourWithMarker","renderContour","_calculateStatsIfActive","worldPosIndex","worldPosIndex2","iDelta","jDelta","kDelta","ceil","worldPosEnd","canvasPosEnd","curRow","intersections","intersectionCounter","_pointIJK","getLineSegmentIntersectionsCoordinates","shift","isFinite","RectangleROITool","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","brushSize","useCenterSegmentIndex","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","StrategyCallbacks","AcceptPreview","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","getOperationData","applyActiveStrategyCallback","OnInteractionStart","timer","time","rejectPreview","previewCallback","strategyData","strategy","Preview","OnInteractionEnd","acceptPreview","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","GetStatistics","interpolate","invalidateBrushCursor","getActiveSegmentationData","brushCursorUID","centerSegmentIndexInfo","dynamicRadiusInCanvas","threshold","circleUID1","previewData","NaN","memoMap","acceptedMemoIds","hasSegmentIndex","hasPreviewIndex","changedIndices","_historyRedoHandler","memoData","voxelManagerId","redoVoxelManager","ERROR_EVENT","message","cancelable","actors","volumes","referencedVolumeIdToThreshold","activeRepresentation","configColor","previewColor","previewSegmentIndex","factor","lightenColor","previewOnHover","addPreview","acceptReject","AddPreview","viewportContoursToLabelmap","removeContours","viewAnnotations","contourAnnotations","fillInsideCircle","previewVoxels","segmentationVoxels","sourceVoxelManager","bound","activeIndex","startIndex","startValue","hasZeroIndex","hasPositiveIndex","polyPoint","polyIndex","polyValue","isPointInsidePolyline3D","setAtIJK","slices","getArrayOfModifiedSlices","initializeCircle","Initialize","segmentationImageData","centerIJK","circleCornersIJK","getBoundingBoxAroundShapeIJK","createPointInEllipse","isInObjectBoundsIJK","worldInfo","sphereObj","radius2","precalculated","precalculatePointInEllipse","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","strategyFunction","thresholdInsideCircle","initializeRectangle","imageVoxelManager","rectangleCornersIJK","coord","isStackViewport","isAligned","getSpacing","EPS","pointsBoundsLPS","xMin","xMax","yMin","yMax","zMin","zMax","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","fillInsideRectangle","getClosestImageIdForStackViewport","ImagePositionPatient","calculateDistanceToImage","numSlicesToProject","sliceNormalIndex","addContourSegmentationAnnotation","parentAnnotationUID","annotationsUIDsSet","closestDistance","testIndex","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","useRAF","TypeError","invokeFunc","thisArg","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","Boolean","cancelAnimationFrame","cancelTimer","flush","pending","annotationCanvasPoints","handlesLeftToRight","_compareX","handlesTopToBottom","_compareY","_determineCorners","centerY","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","SQUARE","getCalibratedLengthUnitsAndScale","hasPixelSpacing","volumeUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","regions","region","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","USER","ERROR","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","rowCosine","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfo","scanAxis","getSphereBoundsInfoFromViewport","getViewportForAnnotation","pointInSphere","sphere","axisList","isAxisAlignedRectangle","rectangleVec1","rectangleVec2","calculateAnglesWithAxes","vec","SegmentStatsCalculator","calculators","indices","statsInit","statsData","calculator","lpad","string","character","seed","onFlood","onBoundary","equals","startNode","permutations","perms","permutation","permute","perm","countNonZeroes","prunedPermutations","visits","currentArgs","job","getArgs","prevArgs","previousArgs","iKey","markAsVisited","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","getBrushToolInstances","toolInstances","annotationUIDs","indexIJK","onEdge","getNeighborIndex","deltaI","deltaJ","neighborCanvas","isSegmentOnEdge","isSegmentOnEdgeCanvas","segmentationActorEntry","deltaK","neighborIJK","isSegmentOnEdgeIJK","neighborRange","neighborIndex","desiredRepresentation","representationType","getScalarValueFromWorld","getSegmentIndexAtWorldForLabelmap","annotationsSet","getSegmentIndexAtWorldForContour","WEBGPU_MEMORY_LIMIT","DEFAULT_GROWCUT_OPTIONS","windowSize","maxProcessingTime","inspection","numCyclesInterval","numCyclesBelowThreshold","referenceVolumeId","workGroupSize","labelmap","numIterations","volumePixelData","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","adapter","navigator","gpu","requestAdapter","device","requestDevice","BUFFER_SIZE","UPDATED_VOXELS_COUNTER_BUFFER_SIZE","Uint32Array","BYTES_PER_ELEMENT","BOUNDS_BUFFER_SIZE","Int32Array","shaderModule","createShaderModule","code","paramsArrayValues","gpuParamsBuffer","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","gpuVolumePixelDataBuffer","STORAGE","queue","writeBuffer","gpuLabelmapBuffers","COPY_SRC","gpuStrengthBuffers","gpuCounterBuffer","gpuBoundsBuffer","initialBounds","bindGroupLayout","createBindGroupLayout","binding","GPUShaderStage","COMPUTE","bindGroups","outputLabelmapBuffer","outputStrengthBuffer","previouLabelmapBuffer","previousStrengthBuffer","createBindGroup","layout","resource","pipeline","createComputePipeline","createPipelineLayout","bindGroupLayouts","compute","module","entryPoint","constants","workGroupSizeX","workGroupSizeY","workGroupSizeZ","numWorkGroups","gpuUpdatedVoxelsCounterStagingBuffer","MAP_READ","limitProcessingTime","performance","currentInspectionNumCyclesInterval","belowThresholdCounter","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","updatedVoxelsCounterResultBuffer","getMappedRange","updatedVoxelsRatio","unmap","outputLabelmapBufferIndex","labelmapStagingBuffer","boundsStagingBuffer","labelmapResultBuffer","labelmapResult","boundsResultBuffer","boundsResult","clearBounds","setBounds","POSITIVE_SEED_VALUE","NEGATIVE_SEED_VALUE","_createAndCacheSegmentationSubVolumeForBoundingBox","subVolPixelData","startSliceIndex","stopSliceIndex","pixelsPerSlice","zOffset","_setPositiveSeedValues","sliceOffset","bfs","slicePixelIndex","volumeVoxelIndex","volumeVoxelValue","scanLine","limitX","incX","_setNegativeSeedValues","runGrowCutForBoundingBox","subVolumeBoundsIJK","POSITIVE_SEED_VARIANCE","NEGATIVE_SEED_VARIANCE","vecColumn","sphereCenterPoint","sphereRadius","refVolImageData","topCirclePoint","bottomCirclePoint","sphereBoundsInfo","_getGrowCutSphereBoundsInfo","_createAndCacheSegmentationSubVolumeForSphere","refVolumePixelData","worldStartPos","ijkStartPosition","referencePixelValue","positiveSeedVarianceValue","minPositivePixelValue","maxPositivePixelValue","neighborsCoordDelta","startVoxelIndex","ijkVoxel","neighborCoordDelta","nx","ny","nz","neighborVoxelIndex","neighborPixelValue","ijkSphereCenter","negativeSeedVarianceValue","minNegativePixelValue","maxNegativePixelValue","rotationAngle","worldQuat","vecRotation","worldCircleBorderPoint","ijkCircleBorderPoint","runGrowCutForSphere","sphereBoundsIJK","_createSubVolumeFromSphere","MAX_POSITIVE_SEEDS","calculateGrowCutSeeds","refImageData","referenceVolumeVoxelManager","neighborhoodRadius","initialNeighborhoodRadius","positiveK","positiveStdDevMultiplier","negativeK","negativeStdDevMultiplier","negativeSeedMargin","negativeSeedsTargetPatches","ijkStart","initialStats","positiveIntensityMin","positiveIntensityMax","currentQueueIndex","neighborValue","positiveSum","positiveSumSq","positiveCount","positiveMean","positiveVariance","negativeDiffThreshold","minXm","minYm","minZm","maxXm","maxYm","maxZm","attempts","patchesAdded","maxAttempts","rz","centerValue","patchContributed","runOneClickGrowCut","positiveSeedLabel","negativeSeedLabel","tool","getViewportsInfo","getDeltaPoints","curr","getMeanPoints","page","_subtractPoints2D","client","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaDistanceBetweenIPoints","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","prev","getMeanTouchPoints","touch","identifier","radiusX","radiusY","force","pairedDistance","triggerAnnotationRenderForToolGroupIds","toolGroupIds","DesiredOutputPrecision","DEFAULT","SINGLE","DOUBLE","Constants","AttributeCopyOperations","COPYTUPLE","INTERPOLATE","PASSDATA","ALLCOPY","AttributeLimitTypes","MAX","EXACT","NOLIMIT","AttributeTypes","SCALARS","VECTORS","NORMALS","TCOORDS","TENSORS","GLOBALIDS","PEDIGREEIDS","EDGEFLAG","NUM_ATTRIBUTES","CellGhostTypes","DUPLICATECELL","HIGHCONNECTIVITYCELL","LOWCONNECTIVITYCELL","REFINEDCELL","EXTERIORCELL","HIDDENCELL","PointGhostTypes","DUPLICATEPOINT","HIDDENPOINT","ghostArrayName","vtkErrorMacro","dataDescription","EMPTY","Float64Array","setGetArray","getArray","classHierarchy","setExtent","deleted","_len","inExtent","_key","extentArray","changeDetected","dims","nCells","getNumberOfPoints","SINGLE_POINT","X_LINE","Y_LINE","Z_LINE","XY_PLANE","YZ_PLANE","XZ_PLANE","XYZ_GRID","coords","getBounds","getSpatialExtent","ex","computeTransforms","ain","aout","indexToWorldBounds","bin","bout","worldToIndexBounds","onModified","getCenter","computeHistogram","worldBounds","voxelFunction","yStride","zStride","pixels","maximum","minimum","sumOfSquares","isum","inum","average","sigma","computeIncrements","increments","incr","computeOffsetIndex","_ref","getNumberOfComponents","getOffsetIndexFromWorld","offsetIndex","getComponent","vtkImageData$1","out","fromValues","copy","subtract","multiply","divide","scaleAndAdd","squaredDistance","squaredLength","negate","inverse","normalize","bx","by","bz","lerp","hermite","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","rotateY","mag","cosine","zero","exactEquals","a0","b0","mul","div","sqrDist","sqrLen","stride","arg","l","zip","interpolator","samples"],"sourceRoot":""}