{"version":3,"file":"236.bundle.18d97dc207557e7bef47.js","mappings":"gHAGA,MAkQA,EAlQ8B,CAC5B,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,C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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/src/constants/COLOR_LUT.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/elementCursor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/MouseCursor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/ImageMouseCursor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/SVGCursorDescriptor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/SVGMouseCursor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/setCursorForElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/cursors/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/_getHash.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/setAttributesIfNecessary.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/setNewAttributesIfValid.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawCircle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawEllipseByCoordinates.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawEllipse.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawHandle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawHandles.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawLine.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawPolyline.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawPath.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawTextBox.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawLink.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawLinkedTextBox.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawRect.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawArrow.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/drawingSvg/drawRedactionRect.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/ChangeTypes.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/Events.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/SegmentationRepresentations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/StrategyCallbacks.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/Touch.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/ToolBindings.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/AnnotationStyleStates.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/enums/WorkerTypes.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/imageRenderedEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/mouseToolEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/keyboardToolEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/cameraModifiedEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/imageSpacingCalibratedEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/touchToolEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventDispatchers/annotationInterpolationEventDispatcher.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/annotations/contourSegmentation/contourSegmentationCompleted.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/mouse/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/touch/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/wheel/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/segmentationRepresentationModifiedEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/labelmap/onLabelmapSegmentationDataModified.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/segmentationDataModifiedEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/segmentationRepresentationRemovedEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/segmentationModifiedEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/segmentation/imageChangeEventListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/annotations/annotationCompletedListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/annotations/annotationSelectionListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/annotations/annotationModifiedListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/annotations/annotationRemovedListener.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/eventListeners/annotations/contourSegmentation/contourSegmentationRemoved.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/init.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/AnnotationGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/annotationLocking.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/annotationSelection.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/annotationState.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/annotationVisibility.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/config/ToolStyle.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/config/getFont.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/config/getState.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/config/helpers.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/annotation/helpers/state.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/activeSegmentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/config/segmentationVisibility.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/helpers/clipAndCacheSurfacesForViewport.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/removeSegmentationsFromToolGroup.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/helpers/validateSegmentationInput.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/addSegmentations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/config/segmentationConfig.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/helpers/getRepresentationSpecificConfig.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/addSegmentationRepresentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/addSegmentationRepresentations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/addRepresentationData.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/convertStackToVolumeSegmentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/convertVolumeToStackSegmentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/segmentLocking.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/config/segmentationColor.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/computeAndAddRepresentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Surface/convertContourToSurface.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Surface/createAndCacheSurfacesFromRaw.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Surface/convertLabelmapToSurface.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Surface/surfaceComputationStrategies.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Surface/computeAndAddSurfaceRepresentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Surface/updateSurfaceData.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Labelmap/convertContourToLabelmap.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Labelmap/convertSurfaceToLabelmap.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Labelmap/labelmapComputationStrategies.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Labelmap/computeAndAddLabelmapRepresentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Contour/utils/extractContourData.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Contour/utils/createAndAddContourSegmentationsFromClippedSurfaces.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Contour/contourComputationStrategies.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/Contour/computeAndAddContourRepresentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/canComputeRequestedRepresentation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/polySeg/registerPolySegWorker.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/segmentIndex.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/SegmentationStateManager.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/helpers/normalizeSegmentationInput.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/segmentationState.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/stateManagement/segmentation/triggerSegmentationEvents.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/Synchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/getSynchronizersForViewport.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/createSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/destroy.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/getSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/getAllSynchronizers.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/SynchronizerManager/destroySynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/ToolGroupManager/getToolGroupForViewport.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/addTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/addEnabledElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/removeEnabledElement.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/cancelActiveManipulations.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/state.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/store/svgNodeCache.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/cameraSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createCameraPositionSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/presentationViewSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createPresentationViewSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/voiSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createVOISynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/zoomPanSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createZoomPanSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/imageSliceSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/areViewportsCoplanar .ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createImageSliceSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/callbacks/slabThicknessSyncCallback.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/synchronizers/createSlabThicknessSynchronizer.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/synchronizers/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/AdvancedMagnifyTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/AnnotationEraserTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/CrosshairsTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/MIPJumpToClickTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/MagnifyTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/OrientationMarkerTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/OverlayGridTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/PanTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/PlanarRotateTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/ReferenceCursors.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/ReferenceLinesTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/ScaleOverlayTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/SegmentationIntersectionTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/StackScrollTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/StackScrollToolMouseWheelTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/TrackballRotateTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/VolumeRotateMouseWheelTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/WindowLevelTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/ZoomTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/AngleTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/ArrowAnnotateTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/BidirectionalTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/CircleROITool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/CobbAngleTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/DragProbeTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/EllipticalROITool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/KeyImageTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/LengthTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/LivewireContourSegmentationTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/LivewireContourTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/PlanarFreehandContourSegmentationTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/ProbeTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/RectangleROITool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/SplineContourSegmentationTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/SplineROITool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/UltrasoundDirectionalTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/annotation/VideoRedactionTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/base/AnnotationDisplayTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/base/BaseTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/displayTools/Labelmap/labelmapDisplay.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/RectangleROIThresholdTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/RectangleROIStartEndThresholdTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/BrushTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/CircleROIStartEndThresholdTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/CircleScissorsTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/PaintFillTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/RectangleScissorsTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/SegmentSelectTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/SphereScissorsTool.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/tools/segmentation/strategies/utils/stackVolumeCheck.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/types/ContourAnnotation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/getViewportsForAnnotation.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/index.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/math/vec2/findClosestPoint.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/getUniqueSegmentIndices.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/segmentation/triggerSegmentationRender.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/triggerAnnotationRender.ts","webpack:///../../../node_modules/@cornerstonejs/tools/src/utilities/triggerAnnotationRenderForViewportIds.ts"],"sourcesContent":["/**\n * Cornerstone Color LUT used for Segmentations\n */\nconst CORNERSTONE_COLOR_LUT = [\n  [0, 0, 0, 0],\n  [221, 84, 84, 255],\n  [77, 228, 121, 255],\n  [166, 70, 235, 255],\n  [189, 180, 116, 255],\n  [109, 182, 196, 255],\n  [204, 101, 157, 255],\n  [123, 211, 94, 255],\n  [93, 87, 218, 255],\n  [225, 128, 80, 255],\n  [73, 232, 172, 255],\n  [181, 119, 186, 255],\n  [176, 193, 112, 255],\n  [105, 153, 200, 255],\n  [208, 97, 120, 255],\n  [90, 215, 101, 255],\n  [135, 83, 222, 255],\n  [229, 178, 76, 255],\n  [122, 183, 181, 255],\n  [190, 115, 171, 255],\n  [149, 197, 108, 255],\n  [100, 118, 205, 255],\n  [212, 108, 93, 255],\n  [86, 219, 141, 255],\n  [183, 79, 226, 255],\n  [233, 233, 72, 255],\n  [118, 167, 187, 255],\n  [194, 111, 146, 255],\n  [116, 201, 104, 255],\n  [115, 96, 209, 255],\n  [216, 147, 89, 255],\n  [82, 223, 188, 255],\n  [230, 75, 224, 255],\n  [163, 184, 121, 255],\n  [114, 143, 191, 255],\n  [198, 107, 114, 255],\n  [99, 206, 122, 255],\n  [153, 92, 213, 255],\n  [220, 192, 85, 255],\n  [78, 215, 227, 255],\n  [234, 71, 173, 255],\n  [141, 188, 117, 255],\n  [110, 113, 195, 255],\n  [202, 128, 103, 255],\n  [95, 210, 157, 255],\n  [195, 88, 217, 255],\n  [206, 224, 81, 255],\n  [74, 166, 231, 255],\n  [185, 120, 139, 255],\n  [113, 192, 113, 255],\n  [133, 106, 199, 255],\n  [207, 162, 98, 255],\n  [91, 214, 198, 255],\n  [221, 84, 198, 255],\n  [159, 228, 77, 255],\n  [70, 111, 235, 255],\n  [189, 119, 116, 255],\n  [109, 196, 138, 255],\n  [165, 101, 204, 255],\n  [211, 201, 94, 255],\n  [87, 191, 218, 255],\n  [225, 80, 153, 255],\n  [106, 232, 73, 255],\n  [124, 119, 186, 255],\n  [193, 142, 112, 255],\n  [105, 200, 168, 255],\n  [203, 97, 208, 255],\n  [184, 215, 90, 255],\n  [83, 147, 222, 255],\n  [229, 76, 101, 255],\n  [122, 183, 130, 255],\n  [146, 115, 190, 255],\n  [197, 171, 108, 255],\n  [100, 205, 205, 255],\n  [212, 93, 177, 255],\n  [141, 219, 86, 255],\n  [79, 97, 226, 255],\n  [233, 99, 72, 255],\n  [118, 187, 150, 255],\n  [173, 111, 194, 255],\n  [197, 201, 104, 255],\n  [96, 171, 209, 255],\n  [216, 89, 137, 255],\n  [94, 223, 82, 255],\n  [107, 75, 230, 255],\n  [184, 153, 121, 255],\n  [114, 191, 175, 255],\n  [198, 107, 191, 255],\n  [166, 206, 99, 255],\n  [92, 132, 213, 255],\n  [220, 85, 91, 255],\n  [78, 227, 115, 255],\n  [159, 71, 234, 255],\n  [188, 176, 117, 255],\n  [110, 185, 195, 255],\n  [202, 103, 161, 255],\n  [129, 210, 95, 255],\n  [88, 88, 217, 255],\n  [224, 123, 81, 255],\n  [74, 231, 166, 255],\n  [177, 120, 185, 255],\n  [179, 192, 113, 255],\n  [106, 156, 199, 255],\n  [207, 98, 125, 255],\n  [91, 214, 96, 255],\n  [130, 84, 221, 255],\n  [228, 171, 77, 255],\n  [70, 235, 221, 255],\n  [189, 116, 174, 255],\n  [153, 196, 109, 255],\n  [101, 123, 204, 255],\n  [211, 104, 94, 255],\n  [87, 218, 136, 255],\n  [177, 80, 225, 255],\n  [232, 225, 73, 255],\n  [119, 169, 186, 255],\n  [193, 112, 149, 255],\n  [121, 200, 105, 255],\n  [111, 97, 208, 255],\n  [215, 142, 90, 255],\n  [83, 222, 181, 255],\n  [229, 76, 229, 255],\n  [165, 183, 122, 255],\n  [115, 146, 190, 255],\n  [197, 108, 119, 255],\n  [100, 205, 118, 255],\n  [148, 93, 212, 255],\n  [219, 186, 86, 255],\n  [79, 220, 226, 255],\n  [233, 72, 179, 255],\n  [144, 187, 118, 255],\n  [111, 118, 194, 255],\n  [201, 124, 104, 255],\n  [96, 209, 153, 255],\n  [189, 89, 216, 255],\n  [211, 223, 82, 255],\n  [75, 172, 230, 255],\n  [184, 121, 142, 255],\n  [117, 191, 114, 255],\n  [130, 107, 198, 255],\n  [206, 157, 99, 255],\n  [92, 213, 193, 255],\n  [220, 85, 203, 255],\n  [165, 227, 78, 255],\n  [71, 118, 234, 255],\n  [188, 117, 117, 255],\n  [110, 195, 135, 255],\n  [161, 103, 202, 255],\n  [210, 195, 95, 255],\n  [88, 195, 217, 255],\n  [224, 81, 158, 255],\n  [113, 231, 74, 255],\n  [123, 120, 185, 255],\n  [192, 139, 113, 255],\n  [106, 199, 164, 255],\n  [198, 98, 207, 255],\n  [188, 214, 91, 255],\n  [84, 153, 221, 255],\n  [228, 77, 108, 255],\n  [70, 235, 84, 255],\n  [143, 116, 189, 255],\n  [196, 167, 109, 255],\n  [101, 204, 199, 255],\n  [211, 94, 182, 255],\n  [147, 218, 87, 255],\n  [80, 104, 225, 255],\n  [232, 93, 73, 255],\n  [119, 186, 147, 255],\n  [170, 112, 193, 255],\n  [200, 200, 105, 255],\n  [97, 175, 208, 255],\n  [215, 90, 142, 255],\n  [100, 222, 83, 255],\n  [101, 76, 229, 255],\n  [183, 150, 122, 255],\n  [115, 190, 171, 255],\n  [197, 108, 194, 255],\n  [170, 205, 100, 255],\n  [93, 138, 212, 255],\n  [219, 86, 97, 255],\n  [79, 226, 110, 255],\n  [153, 72, 233, 255],\n  [187, 173, 118, 255],\n  [111, 187, 194, 255],\n  [201, 104, 165, 255],\n  [134, 209, 96, 255],\n  [89, 95, 216, 255],\n  [223, 117, 82, 255],\n  [75, 230, 159, 255],\n  [174, 121, 184, 255],\n  [182, 191, 114, 255],\n  [107, 160, 198, 255],\n  [206, 99, 130, 255],\n  [92, 213, 92, 255],\n  [124, 85, 220, 255],\n  [227, 165, 78, 255],\n  [71, 234, 214, 255],\n  [188, 117, 176, 255],\n  [156, 195, 110, 255],\n  [103, 128, 202, 255],\n  [210, 100, 95, 255],\n  [88, 217, 131, 255],\n  [170, 81, 224, 255],\n  [231, 218, 74, 255],\n  [120, 172, 185, 255],\n  [192, 113, 153, 255],\n  [125, 199, 106, 255],\n  [107, 98, 207, 255],\n  [214, 137, 91, 255],\n  [84, 221, 175, 255],\n  [222, 77, 228, 255],\n  [194, 235, 70, 255],\n  [116, 149, 189, 255],\n  [196, 109, 123, 255],\n  [101, 204, 114, 255],\n  [143, 94, 211, 255],\n  [218, 180, 87, 255],\n  [80, 225, 225, 255],\n  [232, 73, 186, 255],\n  [147, 186, 119, 255],\n  [112, 122, 193, 255],\n  [200, 121, 105, 255],\n  [97, 208, 148, 255],\n  [184, 90, 215, 255],\n  [216, 222, 83, 255],\n  [76, 178, 229, 255],\n  [183, 122, 145, 255],\n  [121, 190, 115, 255],\n  [126, 108, 197, 255],\n  [205, 153, 100, 255],\n  [93, 212, 187, 255],\n  [219, 86, 208, 255],\n  [171, 226, 79, 255],\n  [72, 126, 233, 255],\n  [187, 118, 121, 255],\n  [111, 194, 132, 255],\n  [157, 104, 201, 255],\n  [209, 190, 96, 255],\n  [89, 200, 216, 255],\n  [223, 82, 164, 255],\n  [120, 230, 75, 255],\n  [121, 121, 184, 255],\n  [191, 136, 114, 255],\n  [107, 198, 160, 255],\n  [192, 99, 206, 255],\n  [193, 213, 92, 255],\n  [85, 158, 220, 255],\n  [227, 78, 115, 255],\n  [71, 234, 78, 255],\n  [141, 117, 188, 255],\n  [195, 163, 110, 255],\n  [103, 202, 194, 255],\n  [210, 95, 186, 255],\n  [153, 217, 88, 255],\n  [81, 111, 224, 255],\n];\n\nexport default CORNERSTONE_COLOR_LUT;\n","import { MouseCursor } from '.';\n\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\n\n/*\n * Public Methods\n */\n\nfunction initElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  _getElementCursors(element)[0] = cursor;\n  _setElementCursor(element, cursor);\n}\n\nfunction _setElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  const cursors = _getElementCursors(element);\n  cursors[1] = cursors[0];\n  cursors[0] = cursor;\n  element.style.cursor = (\n    cursor instanceof MouseCursor\n      ? cursor\n      : MouseCursor.getDefinedCursor('auto')\n  ).getStyleProperty();\n}\n\nfunction resetElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, _getElementCursors(element)[1]);\n}\n\nfunction hideElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\n\n/*\n * Helpers\n */\n\nfunction _getElementCursors(\n  element: HTMLDivElement\n): [MouseCursor | null, MouseCursor | null] {\n  let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n  if (!(map instanceof WeakMap)) {\n    map = new WeakMap();\n    Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n      value: map,\n    });\n  }\n  let cursors = map.get(element);\n  if (!cursors) {\n    cursors = [null, null];\n    map.set(element, cursors);\n  }\n  return cursors;\n}\n\n/*\n * Exports\n */\nexport {\n  initElementCursor,\n  resetElementCursor,\n  hideElementCursor,\n  _setElementCursor as setElementCursor,\n};\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n  'alias',\n  'all-scroll',\n  'auto',\n  'cell',\n  'col-resize',\n  'context-menu',\n  'copy',\n  'crosshair',\n  'default',\n  'e-resize',\n  'ew-resize',\n  'grab',\n  'grabbing',\n  'help',\n  'move',\n  'ne-resize',\n  'nesw-resize',\n  'no-drop',\n  'none',\n  'not-allowed',\n  'n-resize',\n  'ns-resize',\n  'nw-resize',\n  'nwse-resize',\n  'pointer',\n  'progress',\n  'row-resize',\n  'se-resize',\n  's-resize',\n  'sw-resize',\n  'text',\n  'vertical-text',\n  'wait',\n  'w-resize',\n  'zoom-in',\n  'zoom-out',\n]);\n\nexport default class MouseCursor {\n  private name: string;\n  private fallback: MouseCursor | undefined;\n\n  constructor(name: string, fallback?: MouseCursor | undefined) {\n    this.name = name + '';\n    this.fallback = fallback;\n  }\n\n  getName(): string {\n    return this.name + '';\n  }\n\n  addFallbackStyleProperty(style: string): string {\n    const { fallback } = this;\n    if (fallback instanceof MouseCursor) {\n      return `${style}, ${fallback.getStyleProperty()}`;\n    }\n    return style + '';\n  }\n\n  getStyleProperty(): string {\n    return this.addFallbackStyleProperty(this.name) + '';\n  }\n\n  static getDefinedCursor(name: string): MouseCursor | undefined {\n    const definedCursors = getDefinedCursors(\n      // @ts-ignore\n      MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n      DEFINED_CURSORS\n    );\n    let mouseCursor = definedCursors.get(name);\n    if (mouseCursor instanceof MouseCursor) {\n      return mouseCursor;\n    }\n    if (STANDARD_CURSORS.has(name)) {\n      mouseCursor = new MouseCursor(name);\n      definedCursors.set(name, mouseCursor);\n      return mouseCursor;\n    }\n  }\n\n  static setDefinedCursor(name: string, cursor: MouseCursor): boolean {\n    if (cursor instanceof MouseCursor) {\n      const definedCursors = getDefinedCursors(\n        // @ts-ignore\n        MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n        DEFINED_CURSORS\n      );\n      definedCursors.set(name, cursor);\n      return true;\n    }\n    return false;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction getDefinedCursors(\n  context: Record<symbol, Map<string, MouseCursor>>,\n  symbol: symbol\n): Map<string, MouseCursor> {\n  let definedCursors = context[symbol];\n  if (!(definedCursors instanceof Map)) {\n    definedCursors = new Map();\n    Object.defineProperty(context, symbol, { value: definedCursors });\n  }\n  return definedCursors;\n}\n\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\n\nconst DEFAULT_NAME = 'image-cursor';\n\nexport default class ImageMouseCursor extends MouseCursor {\n  private url: string;\n  private x: number;\n  private y: number;\n\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(\n      name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME),\n      fallback\n    );\n    this.url = url;\n    this.x = Number(x) || 0;\n    this.y = Number(y) || 0;\n  }\n\n  getStyleProperty(): string {\n    const { url, x, y } = this;\n    let style = `url('${url}')`;\n    if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n      style += ` ${x} ${y}`;\n    }\n    return this.addFallbackStyleProperty(style);\n  }\n\n  static getUniqueInstanceName(prefix: string): string {\n    return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n  }\n}\n","import { SVGCursorDescriptor } from '../types';\n\n/*\n * Definitions\n */\n\nconst BASE: SVGCursorDescriptor = {\n  iconContent: '',\n  iconSize: 16,\n  viewBox: {\n    x: 16,\n    y: 16,\n  },\n  mousePoint: {\n    x: 8,\n    y: 8,\n  },\n  mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\n\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n  x: 127,\n  y: 60,\n};\n\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\n\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\n\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\n\nconst CursorSVG: Record<string, SVGCursorDescriptor> = {\n  Angle: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  ArrowAnnotate: extend(BASE, {\n    iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Bidirectional: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n    viewBox: {\n      x: 48,\n      y: 48,\n    },\n  }),\n  CobbAngle: extend(BASE, {\n    iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  CircleROI: extend(BASE, {\n    iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  EllipticalROI: extend(BASE, {\n    iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  FreehandROI: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  FreehandROISculptor: extend(BASE, {\n    iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Length: extend(BASE, {\n    iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Probe: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  RectangleROI: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  TextMarker: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Crosshairs: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Eraser: extend(BASE, {\n    iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n    viewBox: {\n      x: 2048,\n      y: 1792,\n    },\n  }),\n  Magnify: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n    viewBox: {\n      x: 512,\n      y: 512,\n    },\n  }),\n  Pan: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Rotate: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  StackScroll: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n    viewBox: {\n      x: 24,\n      y: 28,\n    },\n  }),\n  WindowLevelRegion: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  WindowLevel: extend(BASE, {\n    iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Zoom: extend(BASE, {\n    iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n    viewBox: {\n      x: 640,\n      y: 512,\n    },\n  }),\n\n  /*\n   * Segmentation Cursors\n   */\n\n  SegmentationFreeHandEraseInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandEraseOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationRectangleEraseInside: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  // Default Rectangle Scissors\n  RectangleScissor: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  CircleScissor: extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n};\n\n/*\n * Utils\n */\n\nfunction extend(\n  base: SVGCursorDescriptor,\n  values: Record<string, unknown>\n): SVGCursorDescriptor {\n  return Object.assign(Object.create(base), values);\n}\n\n/**\n * Registers a cursor to the list, so that it will be used for the given `toolName`.\n * Overwrites the given cursor if it is already set.\n *\n * @param toolName - The name of the tool to assign a cursor to.\n * @param iconContent - The SVG icon content of the cursor.\n * @param viewBox - The viewBox of the cursor object.\n */\nfunction registerCursor(\n  toolName: string,\n  iconContent: string,\n  viewBox: { x: number; y: number }\n) {\n  CursorSVG[toolName] = extend(BASE, {\n    iconContent,\n    viewBox,\n  });\n}\n\nfunction getDefinedSVGCursorDescriptor(\n  name: string\n): SVGCursorDescriptor | undefined {\n  return CursorSVG[name];\n}\n\n/*\n * Exports\n */\nconst svgCursorNames = Object.keys(CursorSVG);\n\nexport {\n  getDefinedSVGCursorDescriptor,\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n};\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport MouseCursor from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\n\nimport type { StyleSpecifier } from '../types/AnnotationStyle';\nimport type { SVGCursorDescriptor } from '../types';\n\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\n\nexport default class SVGMouseCursor extends ImageMouseCursor {\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(url, x, y, name, fallback);\n  }\n\n  /**\n   * Get a shared instance of the SVGMouseCursor class satisfying the given parameters.\n   *\n   * @param name - The name of the cursor (defined in SVGCursorDescriptor.ts);\n   * @param pointer - Should be true to use the version of the cursor containing\n   * a mouse pointer. Defaults to false (which does not add a pointer to the cursor);\n   * @param color - The color of the cursor. Defaults to tool.style.colorHighlightedActive;\n   * @returns a SVGMouseCursor instance or\n   * undefined if no SVG cursor descriptor was found with the given name;\n   */\n  static getDefinedCursor(\n    name: string,\n    pointer = false,\n    color?: string\n  ): MouseCursor {\n    if (!color) {\n      color = getStyleProperty(PROPERTY, {} as StyleSpecifier, STATE, MODE);\n    }\n    const urn = getCursorURN(name, pointer, color);\n    let cursor = super.getDefinedCursor(urn);\n    if (!cursor) {\n      const descriptor = getDefinedSVGCursorDescriptor(name);\n      if (descriptor) {\n        cursor = createSVGMouseCursor(\n          descriptor,\n          urn,\n          pointer,\n          color,\n          super.getDefinedCursor('default')\n        );\n        super.setDefinedCursor(urn, cursor);\n      }\n    }\n    return cursor;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction format(template: string, dictionary: Record<string, unknown>): string {\n  const dict = Object(dictionary);\n  const defined = Object.prototype.hasOwnProperty.bind(dict);\n  return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n    return defined(key) ? dict[key] + '' : '';\n  });\n}\n\nfunction getCursorURN(name: string, pointer: boolean, color: string) {\n  const type = pointer ? 'pointer' : 'cursor';\n  return `${type}:${name}/${color}`;\n}\n\nfunction createSVGMouseCursor(\n  descriptor: SVGCursorDescriptor,\n  name: string,\n  pointer: boolean,\n  color: string,\n  fallback: MouseCursor\n): SVGMouseCursor {\n  const { x, y } = descriptor.mousePoint;\n  return new SVGMouseCursor(\n    createSVGIconUrl(descriptor, pointer, { color }),\n    x,\n    y,\n    name,\n    fallback\n  );\n}\n\nfunction createSVGIconUrl(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): string {\n  return URL.createObjectURL(createSVGIconBlob(descriptor, pointer, options));\n}\n\nfunction createSVGIconBlob(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): Blob {\n  const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(\n    descriptor,\n    options\n  );\n  return new Blob([svgString], { type: 'image/svg+xml' });\n}\n\nfunction createSVGIcon(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n): string {\n  const { iconContent, iconSize, viewBox } = descriptor;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n  return format(svgString, options);\n}\n\nfunction createSVGIconWithPointer(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n) {\n  const { iconContent, iconSize, viewBox, mousePointerGroupString } =\n    descriptor;\n  const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n  const svgSize = 16 + iconSize;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g>${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n  return format(svgString, options);\n}\n","import { setElementCursor } from './elementCursor';\nimport MouseCursor from './MouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\n\n/**\n * Set the cursor for an HTML element. cursorNames can be either\n * cornerstone3DTools cursors or standard cursors.\n *\n * @param element - The element to set the cursor on.\n * @param cursorName - The name of the cursor to set. This can be\n * any cursor name either Cornerstone-specific cursor names or the standard\n * CSS cursor names.\n */\nfunction setCursorForElement(\n  element: HTMLDivElement,\n  cursorName: string\n): void {\n  let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n  if (!cursor) {\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  if (!cursor) {\n    console.log(\n      `Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`\n    );\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  setElementCursor(element, cursor);\n}\n\nexport default setCursorForElement;\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport {\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n} from './SVGCursorDescriptor';\n\n// Todo: this should be enum\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\n\nexport {\n  MouseCursor,\n  ImageMouseCursor,\n  SVGMouseCursor,\n  elementCursor,\n  registerCursor,\n  CursorNames,\n  CursorSVG,\n  setCursorForElement,\n};\n","function _getHash(\n  annotationUID: string,\n  drawingElementType: string,\n  nodeUID: string\n): string {\n  return `${annotationUID}::${drawingElementType}::${nodeUID}`;\n}\n\nexport default _getHash;\n","export function setAttributesIfNecessary(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const currentValue = svgNode.getAttribute(key);\n    const newValue = attributes[key];\n    if (newValue === undefined || newValue === '') {\n      svgNode.removeAttribute(key);\n    } else if (currentValue !== newValue) {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default setAttributesIfNecessary;\n","export function setNewAttributesIfValid(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const newValue = attributes[key];\n    if (newValue !== undefined && newValue !== '') {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default setNewAttributesIfValid;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\n\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\n\nfunction drawCircle(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  circleUID: string,\n  center: Types.Point2,\n  radius: number,\n  options = {},\n  dataId = ''\n): void {\n  const {\n    color,\n    fill,\n    width,\n    lineWidth,\n    lineDash,\n    fillOpacity,\n    strokeOpacity,\n  } = Object.assign(\n    {\n      color: 'rgb(0, 255, 0)',\n      fill: 'transparent',\n      width: '2',\n      lineDash: undefined,\n      lineWidth: undefined,\n      strokeOpacity: 1,\n      fillOpacity: 1,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  // variable for the namespace\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n  const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    r: `${radius}`,\n    stroke: color,\n    fill,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n    'fill-opacity': fillOpacity, // setting fill opacity\n    'stroke-opacity': strokeOpacity, // setting stroke opacity\n  };\n\n  if (existingCircleElement) {\n    setAttributesIfNecessary(attributes, existingCircleElement);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newCircleElement = document.createElementNS(svgns, 'circle');\n\n    if (dataId !== '') {\n      newCircleElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, newCircleElement);\n\n    svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n  }\n}\n\nexport default drawCircle;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\n\nfunction drawEllipseByCoordinates(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  ellipseUID: string,\n  canvasCoordinates: [Types.Point2, Types.Point2, Types.Point2, Types.Point2],\n  options = {},\n  dataId = ''\n): void {\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'rgb(0, 255, 0)',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n  const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const [bottom, top, left, right] = canvasCoordinates;\n\n  const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n  const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n  const angle =\n    (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n\n  const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n  const radiusX = w / 2;\n  const radiusY = h / 2;\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    rx: `${radiusX}`,\n    ry: `${radiusY}`,\n    stroke: color,\n    fill: 'transparent',\n    transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingEllipse) {\n    setAttributesIfNecessary(attributes, existingEllipse);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n\n    if (dataId !== '') {\n      svgEllipseElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, svgEllipseElement);\n\n    svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n  }\n}\n\nexport default drawEllipseByCoordinates;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport drawEllipseByCoordinates from './drawEllipseByCoordinates';\n\nfunction drawEllipse(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  ellipseUID: string,\n  corner1: Types.Point2,\n  corner2: Types.Point2,\n  options = {},\n  dataId = ''\n) {\n  const top: Types.Point2 = [(corner1[0] + corner2[0]) / 2, corner1[1]];\n  const bottom: Types.Point2 = [(corner1[0] + corner2[0]) / 2, corner2[1]];\n  const left: Types.Point2 = [corner1[0], (corner1[1] + corner2[1]) / 2];\n  const right: Types.Point2 = [corner2[0], (corner1[1] + corner2[1]) / 2];\n\n  drawEllipseByCoordinates(\n    svgDrawingHelper,\n    annotationUID,\n    ellipseUID,\n    [bottom, top, left, right],\n    (options = {}),\n    (dataId = '')\n  );\n}\n\nexport default drawEllipse;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawHandle(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  handleGroupUID: string,\n  handle: Types.Point2,\n  options = {},\n  uniqueIndex\n): void {\n  const { color, handleRadius, width, lineWidth, fill, type, opacity } =\n    Object.assign(\n      {\n        color: 'rgb(0, 255, 0)',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n      },\n      options\n    );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  // variable for the namespace\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(\n    annotationUID,\n    'handle',\n    `hg-${handleGroupUID}-index-${uniqueIndex}`\n  );\n\n  let attributes;\n  if (type === 'circle') {\n    attributes = {\n      cx: `${handle[0]}`,\n      cy: `${handle[1]}`,\n      r: handleRadius,\n      stroke: color,\n      fill,\n      'stroke-width': strokeWidth,\n      opacity: opacity,\n    };\n  } else if (type === 'rect') {\n    const handleRadiusFloat = parseFloat(handleRadius);\n    const side = handleRadiusFloat * 1.5;\n    const x = handle[0] - side * 0.5;\n    const y = handle[1] - side * 0.5;\n\n    attributes = {\n      x: `${x}`,\n      y: `${y}`,\n      width: `${side}`,\n      height: `${side}`,\n      stroke: color,\n      fill,\n      'stroke-width': strokeWidth,\n      rx: `${side * 0.1}`,\n      opacity: opacity,\n    };\n  } else {\n    throw new Error(`Unsupported handle type: ${type}`);\n  }\n\n  const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  if (existingHandleElement) {\n    setAttributesIfNecessary(attributes, existingHandleElement);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newHandleElement = document.createElementNS(svgns, type);\n\n    setNewAttributesIfValid(attributes, newHandleElement);\n\n    svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n  }\n}\n\nexport default drawHandle;\n","import type { Types } from '@cornerstonejs/core';\n\nimport { SVGDrawingHelper } from '../types';\nimport drawHandle from './drawHandle';\n\nfunction drawHandles(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  handleGroupUID: string,\n  handlePoints: Array<Types.Point2>,\n  options = {}\n): void {\n  handlePoints.forEach((handle, i) => {\n    drawHandle(\n      svgDrawingHelper,\n      annotationUID,\n      handleGroupUID,\n      handle,\n      options,\n      i\n    );\n  });\n}\n\nexport default drawHandles;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nexport default function drawLine(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  lineUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash, shadow } = Object.assign(\n    {\n      color: 'rgb(0, 255, 0)',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n      shadow: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n  const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n  const dropShadowStyle = shadow\n    ? `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`\n    : '';\n\n  const attributes = {\n    x1: `${start[0]}`,\n    y1: `${start[1]}`,\n    x2: `${end[0]}`,\n    y2: `${end[1]}`,\n    stroke: color,\n    style: dropShadowStyle,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    setAttributesIfNecessary(attributes, existingLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newLine = document.createElementNS(svgns, 'line');\n\n    if (dataId !== '') {\n      newLine.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, newLine);\n\n    svgDrawingHelper.appendNode(newLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\n/**\n * Draws an SVG polyline with the given points.\n *\n * The `closePath` option, if true, draws a closed polyline, with the\n * last point connected to the first.\n */\nexport default function drawPolyline(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  polylineUID: string,\n  points: Types.Point2[],\n  options: {\n    color?: string;\n    fillColor?: string;\n    fillOpacity?: number;\n    width?: number;\n    lineWidth?: number;\n    lineDash?: string;\n    closePath?: boolean;\n  }\n): void {\n  if (points.length < 2) {\n    return;\n  }\n\n  const {\n    color = 'rgb(0, 255, 0)',\n    width = 10,\n    fillColor = 'none',\n    fillOpacity = 0,\n    lineWidth,\n    lineDash,\n    closePath = false,\n  } = options;\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n  const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  let pointsAttribute = '';\n\n  for (const point of points) {\n    pointsAttribute += `${point[0].toFixed(1)}, ${point[1].toFixed(1)} `;\n  }\n\n  if (closePath) {\n    const firstPoint = points[0];\n\n    pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n  }\n\n  const attributes = {\n    points: pointsAttribute,\n    stroke: color,\n    fill: fillColor,\n    'fill-opacity': fillOpacity,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingPolyLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    setAttributesIfNecessary(attributes, existingPolyLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newPolyLine = document.createElementNS(svgns, 'polyline');\n\n    setNewAttributesIfValid(attributes, newPolyLine);\n\n    svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\n/**\n * Draws an SVG path with the given points.\n *\n * The `closePath` option, if true, draws a closed path (last point\n * connected to the first).\n */\nexport default function drawPath(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  pathUID: string,\n  points: Types.Point2[] | Types.Point2[][],\n  options: {\n    color?: string;\n    fillColor?: string;\n    fillOpacity?: number;\n    width?: number;\n    lineWidth?: number;\n    lineDash?: string;\n    closePath?: boolean;\n  }\n): void {\n  // It may be a polyline with holes that will be an array with multiple\n  // 'points' arrays\n  const hasSubArrays =\n    points.length && points[0].length && Array.isArray(points[0][0]);\n\n  const pointsArrays = hasSubArrays ? points : [points];\n  const {\n    color = 'rgb(0, 255, 0)',\n    width = 10,\n    fillColor = 'none',\n    fillOpacity = 0,\n    lineWidth,\n    lineDash,\n    closePath = false,\n  } = options;\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'path', pathUID);\n  const existingNode = svgDrawingHelper.getSvgNode(svgNodeHash);\n  let pointsAttribute = '';\n\n  for (let i = 0, numArrays = pointsArrays.length; i < numArrays; i++) {\n    const points = pointsArrays[i];\n    const numPoints = points.length;\n\n    if (numPoints < 2) {\n      continue;\n    }\n\n    for (let j = 0; j < numPoints; j++) {\n      const point = points[j];\n      const cmd = j ? 'L' : 'M';\n\n      pointsAttribute += `${cmd} ${point[0].toFixed(1)}, ${point[1].toFixed(\n        1\n      )} `;\n    }\n\n    if (closePath) {\n      pointsAttribute += 'Z ';\n    }\n  }\n\n  if (!pointsAttribute) {\n    return;\n  }\n\n  const attributes = {\n    d: pointsAttribute,\n    stroke: color,\n    fill: fillColor,\n    'fill-opacity': fillOpacity,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingNode) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    setAttributesIfNecessary(attributes, existingNode);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newNode = document.createElementNS(svgns, 'path');\n\n    setNewAttributesIfValid(attributes, newNode);\n    svgDrawingHelper.appendNode(newNode, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\n\n/**\n * Draws a textBox.\n *\n * @param textLines - The text to display.\n * @param position - The x/y position of the textbox\n * @param options - Options for the textBox.\n * @returns Bounding box; can be used for isPointNearTool\n */\nfunction drawTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string>,\n  position: Types.Point2,\n  options = {}\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      fontFamily: 'Helvetica, Arial, sans-serif',\n      fontSize: '14px',\n      color: 'rgb(255, 255, 0)',\n      background: '',\n      padding: 25,\n      centerX: false,\n      centerY: true,\n    },\n    options\n  );\n\n  // Draw each of the text lines on top of the background box\n  const textGroupBoundingBox = _drawTextGroup(\n    svgDrawingHelper,\n    annotationUID,\n    textUID,\n    textLines,\n    position,\n    mergedOptions\n  );\n\n  return textGroupBoundingBox;\n}\n\nfunction _drawTextGroup(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string> = [''],\n  position: Types.Point2,\n  options: any\n): SVGRect {\n  const { padding, color, fontFamily, fontSize, background } = options;\n\n  let textGroupBoundingBox;\n  const [x, y] = [position[0] + padding, position[1] + padding];\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n  const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  // Todo: right now textBox gets a re-render even if the textBox has not changed\n  // and evenIf the attributes are not set again since they are the same.\n  if (existingTextGroup) {\n    // TODO: Iterate each node and update color? font-size?\n    const textElement = existingTextGroup.querySelector('text');\n    const textSpans = Array.from(textElement.children) as Array<SVGElement>;\n\n    for (let i = 0; i < textSpans.length; i++) {\n      const textSpanElement = textSpans[i];\n      const text = textLines[i] || '';\n\n      textSpanElement.textContent = text;\n    }\n\n    // if the textLines have changed size, we need to create textSpans for them\n    if (textLines.length > textSpans.length) {\n      for (let i = 0; i < textLines.length - textSpans.length; i++) {\n        const textLine = textLines[i + textSpans.length];\n        const textSpan = _createTextSpan(textLine);\n\n        textElement.appendChild(textSpan);\n      }\n\n      existingTextGroup.appendChild(textElement);\n      svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n    }\n\n    const textAttributes = {\n      fill: color,\n      'font-size': fontSize,\n      'font-family': fontFamily,\n    };\n\n    const textGroupAttributes = {\n      transform: `translate(${x} ${y})`,\n    };\n\n    // Todo: for some reason this does not work to not re-render the textBox\n    setAttributesIfNecessary(textAttributes, textElement);\n    setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n\n    textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const textGroup = document.createElementNS(svgns, 'g');\n\n    textGroup.setAttribute('transform', `translate(${x} ${y})`);\n\n    //\n    const textElement = _createTextElement(svgDrawingHelper, options);\n    for (let i = 0; i < textLines.length; i++) {\n      const textLine = textLines[i];\n      const textSpan = _createTextSpan(textLine);\n\n      textElement.appendChild(textSpan);\n    }\n\n    textGroup.appendChild(textElement);\n    svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n    textGroupBoundingBox = _drawTextBackground(textGroup, background);\n  }\n\n  // We translate the group using `position`\n  // which means we also need to pluck those values when returning\n  // the bounding box\n  return Object.assign({}, textGroupBoundingBox, {\n    x,\n    y,\n    height: textGroupBoundingBox.height + padding,\n    width: textGroupBoundingBox.width + padding,\n  });\n}\n\nfunction _createTextElement(\n  svgDrawingHelper: SVGDrawingHelper,\n  options: any\n): SVGElement {\n  const { color, fontFamily, fontSize } = options;\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textElement = document.createElementNS(svgns, 'text');\n  const noSelectStyle =\n    'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n  const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n  const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n\n  // font-size=\"100\"\n  textElement.setAttribute('x', '0');\n  textElement.setAttribute('y', '0');\n  textElement.setAttribute('fill', color);\n  textElement.setAttribute('font-family', fontFamily);\n  textElement.setAttribute('font-size', fontSize);\n  textElement.setAttribute('style', combinedStyle);\n\n  return textElement;\n}\n\nfunction _createTextSpan(text): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textSpanElement = document.createElementNS(svgns, 'tspan');\n\n  // TODO: centerX\n  // (parent width / 2) - my width\n  // TODO: centerY\n\n  textSpanElement.setAttribute('x', '0');\n  textSpanElement.setAttribute('dy', '1.2em');\n  textSpanElement.textContent = text;\n\n  return textSpanElement;\n}\n\nfunction _drawTextBackground(group: SVGGElement, color: string) {\n  let element = group.querySelector('rect.background');\n\n  // If we have no background color, remove any element that exists and return\n  // the bounding box of the text\n  if (!color) {\n    if (element) {\n      group.removeChild(element);\n    }\n\n    return group.getBBox();\n  }\n\n  // Otherwise, check if we have a <rect> element. If not, create one\n  if (!element) {\n    element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    element.setAttribute('class', 'background');\n    group.insertBefore(element, group.firstChild);\n  }\n\n  // Get the text groups's bounding box and use it to draw the background rectangle\n  const bBox = group.getBBox();\n\n  const attributes = {\n    x: `${bBox.x}`,\n    y: `${bBox.y}`,\n    width: `${bBox.width}`,\n    height: `${bBox.height}`,\n    fill: color,\n  };\n\n  setAttributesIfNecessary(attributes, element);\n\n  return bBox;\n}\n\nexport default drawTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nimport { PlanarBoundingBox, SVGDrawingHelper } from '../types';\n\n/**\n * Draw a link between an annotation to a box.\n */\nfunction drawLink(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  linkUID: string,\n  // Find closest point to approx. bounding box\n  annotationAnchorPoints: Array<Types.Point2>,\n  refPoint: Types.Point2,\n  // Find bounding box point that's closest to our identified\n  // start point\n  boundingBox: PlanarBoundingBox,\n  options = {}\n): void {\n  // The closest anchor point (for the annotation) to the\n  // text box / bounding box\n  const start =\n    annotationAnchorPoints.length > 0\n      ? findClosestPoint(annotationAnchorPoints, refPoint)\n      : refPoint;\n\n  // Calculate the midpoints of the bounding box\n  const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n  // Find the closest textBox midpoint to the annotation's anchor/start point\n  const end = findClosestPoint(boundingBoxPoints, start);\n\n  // Finally we draw the dashed linking line\n  const mergedOptions = Object.assign(\n    {\n      color: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '2,3',\n    },\n    options\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    `link-${linkUID}`,\n    start,\n    end,\n    mergedOptions\n  );\n}\n\n/**\n * Find potential anchor points for a given bounding box. For example, it may\n * look nicer to draw a line from the \"middle left\" of a bounding box to an\n * annotation (instead of from a corner). This function calculates those points\n *\n * @param boundingBox\n */\nfunction _boundingBoxPoints(\n  boundingBox: PlanarBoundingBox\n): Array<Types.Point2> {\n  const { x: left, y: top, height, width } = boundingBox;\n  const halfWidth = width / 2;\n  const halfHeight = height / 2;\n\n  const topMiddle = [left + halfWidth, top] as Types.Point2;\n  const leftMiddle = [left, top + halfHeight] as Types.Point2;\n  const bottomMiddle = [left + halfWidth, top + height] as Types.Point2;\n  const rightMiddle = [left + width, top + halfHeight] as Types.Point2;\n\n  return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\n\nexport default drawLink;\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawLinkedTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textBoxUID: string,\n  //\n  textLines: Array<string>,\n  textBoxPosition: Types.Point2,\n  annotationAnchorPoints: Array<Types.Point2>,\n  textBox: unknown,\n  options = {}\n  // TODO: yCenter as an option\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      handleRadius: '6',\n      centering: {\n        x: false,\n        y: true, // yCenter,\n      },\n    },\n    options\n  );\n\n  // Draw the text box\n  const canvasBoundingBox = drawTextBox(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    textLines,\n    textBoxPosition,\n    mergedOptions\n  );\n  // if (textBox.hasMoved) {\n  //   // Draw dashed link line between tool and text\n  drawLink(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    annotationAnchorPoints, // annotationAnchorPoints\n    textBoxPosition, // refPoint (text)\n    canvasBoundingBox, // textBoxBoundingBox\n    mergedOptions\n  );\n  // }\n\n  // const { top, left, width, height } = canvasBoundingBox\n\n  // textBox.worldBoundingBox = {\n  //   topLeft: canvasToWorld([left, top]),\n  //   topRight: canvasToWorld([left + width, top]),\n  //   bottomLeft: canvasToWorld([left, top + height]),\n  //   bottomRight: canvasToWorld([left + width, top + height]),\n  // }\n\n  return canvasBoundingBox;\n}\n\nexport default drawLinkedTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport { SVGDrawingHelper } from '../types';\n\n// <rect x=\"120\" y=\"100\" width=\"100\" height=\"100\" />\nexport default function drawRect(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  rectangleUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  const {\n    color,\n    width: _width,\n    lineWidth,\n    lineDash,\n  } = Object.assign(\n    {\n      color: 'rgb(0, 255, 0)',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || _width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n  const width = Math.abs(start[0] - end[0]);\n  const height = Math.abs(start[1] - end[1]);\n\n  const attributes = {\n    x: `${tlhc[0]}`,\n    y: `${tlhc[1]}`,\n    width: `${width}`,\n    height: `${height}`,\n    stroke: color,\n    fill: 'transparent',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingRect) {\n    setAttributesIfNecessary(attributes, existingRect);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgRectElement = document.createElementNS(svgns, 'rect');\n\n    if (dataId !== '') {\n      svgRectElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, svgRectElement);\n\n    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\nimport drawLine from './drawLine';\n\nexport default function drawArrow(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  arrowUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {}\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'rgb(0, 255, 0)',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // The line itself\n  drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n    color,\n    width,\n    lineWidth,\n    lineDash,\n  });\n\n  // Drawing the head arrow with two lines\n  // Variables to be used when creating the arrow\n  const headLength = 10;\n  const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n\n  const firstLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle - Math.PI / 7),\n      end[1] - headLength * Math.sin(angle - Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  const secondLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle + Math.PI / 7),\n      end[1] - headLength * Math.sin(angle + Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '2',\n    firstLine.start,\n    firstLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '3',\n    secondLine.start,\n    secondLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\n\n// <rect x=\"120\" y=\"100\" width=\"100\" height=\"100\" />\nexport default function drawRedactionRect(\n  svgDrawingHelper: any,\n  annotationUID: string,\n  rectangleUID: string,\n  start: any,\n  end: any,\n  options = {}\n): void {\n  const {\n    color,\n    width: _width,\n    lineWidth,\n    lineDash,\n  } = Object.assign(\n    {\n      color: 'rgb(0, 255, 0)',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || _width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n  const width = Math.abs(start[0] - end[0]);\n  const height = Math.abs(start[1] - end[1]);\n\n  const attributes = {\n    x: `${tlhc[0]}`,\n    y: `${tlhc[1]}`,\n    width: `${width}`,\n    height: `${height}`,\n    stroke: color,\n    fill: 'black',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingRect) {\n    _setAttributesIfNecessary(attributes, existingRect);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgRectElement = document.createElementNS(svgns, 'rect');\n\n    _setNewAttributesIfValid(attributes, svgRectElement);\n\n    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n  }\n}\n","/**\n * ChangeTypes defines the types of changes occurring on annotation and\n * segmentation data.\n */\nenum ChangeTypes {\n  /**\n   * Interaction events are done when the user is actively interacting with\n   * an annotation, and probably means the event shouldn't be handled/used.\n   */\n  Interaction = 'Interaction',\n  /**\n   * HandlesUpdated occurs when the handle data is added or removed, or moved around\n   */\n  HandlesUpdated = 'HandlesUpdated',\n  /**\n   * StatsUpdated occurs when the stats are updated/calculated.  This can be used\n   * to ignore stats calculations changes occurring on initial load, while still\n   * rendering other updates.\n   */\n  StatsUpdated = 'StatsUpdated',\n  /**\n   * InitialSetup occurs when an annotation has been created initially and\n   * has the first render/data calculation being applied.\n   */\n  InitialSetup = 'InitialSetup',\n  /**\n   * Completed occurs only for the annotation completed event, just to identify it\n   */\n  Completed = 'Completed',\n  /**\n   * Occurs when an interpolation result is updated with more tool specific data.\n   */\n  InterpolationUpdated = 'InterpolationUpdated',\n}\n\nexport default ChangeTypes;\n","/**\n *  The events for cornerstoneTools3D Tools. Native Mouse and Keyboard events are\n *  captured, normalized, and re-triggered with a `CORNERSTONE_TOOLS` prefix. This\n *  allows us to handle events consistently across different browsers.\n *\n */\nenum Events {\n  ///////////////////////////////////////\n  //            Tools\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new tools is activated.\n   *\n   * Make use of {@link EventTypes.ToolActivatedEventType | Tool Activated Event Type  }\n   * for typing your event listeners for this tool activated event, and see what event\n   * detail is included in {@link EventTypes.ToolActivatedEventDetail | Tool Activated Event Detail}.\n   */\n  TOOL_ACTIVATED = 'CORNERSTONE_TOOLS_TOOL_ACTIVATED',\n\n  // fired when a viewport is added to the toolGroup\n  TOOLGROUP_VIEWPORT_ADDED = 'CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_ADDED',\n\n  // fired when a viewport is removed from the toolGroup\n  TOOLGROUP_VIEWPORT_REMOVED = 'CORNERSTONE_TOOLS_TOOLGROUP_VIEWPORT_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a mode of a tool is changed (active, passive, enabled and disabled).\n   *\n   * Make use of {@link EventTypes.ToolModeChangedEventType | Tool Mode Changed Event Type  }\n   * for typing your event listeners for this tool activated event, and see what event\n   * detail is included in {@link EventTypes.ToolModeChangedEventDetail | Tool Mode Changed Event Detail}.\n   */\n  TOOL_MODE_CHANGED = 'CORNERSTONE_TOOLS_TOOL_MODE_CHANGED',\n\n  ///////////////////////////////////////\n  //            Annotations\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new annotation is added to the state.\n   *\n   * Make use of {@link EventTypes.AnnotationAddedEventType | Annotation Added Event Type  }\n   * for typing your event listeners for this annotation added event, and see what event\n   * detail is included in {@link EventTypes.AnnotationAddedEventDetail | Annotation Added Event Detail}.\n   */\n  ANNOTATION_ADDED = 'CORNERSTONE_TOOLS_ANNOTATION_ADDED',\n\n  /**\n   * Triggers on the eventTarget when a new annotation is completed its drawing\n   * Make use of {@link EventTypes.AnnotationCompletedEventType | Annotation Completed Event Type }\n   * for typing your event listeners for this annotation completed event, and see what event\n   * detail is included in {@link EventTypes.AnnotationCompletedEventDetail | Annotation Completed Event Detail}.\n   */\n  ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is modified (e.g. a handle is modified).\n   * Make use of {@link EventTypes.AnnotationModifiedEventType | Annotation Modified Event Type}\n   * for typing your event listeners for this annotation modified event, and see what\n   * event detail is included in {@link EventTypes.AnnotationModifiedEventDetail | Annotation Modified Event Detail}.\n   */\n  ANNOTATION_MODIFIED = 'CORNERSTONE_TOOLS_ANNOTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is removed from the annotations manager.\n   * Make use of {@link EventTypes.AnnotationRemovedEventType | Annotation Removed Event Type}\n   * for typing your event listeners for this annotation removed event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRemovedEventDetail | Annotation Removed Event Detail}.\n   */\n  ANNOTATION_REMOVED = 'CORNERSTONE_TOOLS_ANNOTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when an annotation selection status is changed.\n   * Make use of {@link EventTypes.AnnotationSelectionChangeEventType | Annotation Selection Change Event Type}\n   * for typing your event listeners for this annotation selection change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationSelectionChangeEventDetail | Annotation Selection Change Event Detail}.\n   */\n  ANNOTATION_SELECTION_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation locked status is changed.\n   * Make use of {@link EventTypes.AnnotationLockChangeEventType | Annotation Lock Change Event Type}\n   * for typing your event listeners for this annotation lock change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationLockChangeEventDetail | Annotation Lock Change Event Detail}.\n   */\n  ANNOTATION_LOCK_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation visible status is changed.\n   * Make use of {@link EventTypes.AnnotationVisibilityChangeEventType | Annotation Visible Change Event Type}\n   * for typing your event listeners for this annotation Hide change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationVisibilityChangeEventDetail | Annotation Visible Change Event Detail}.\n   */\n  ANNOTATION_VISIBILITY_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation is rendered.\n   * Make use of {@link EventTypes.AnnotationRenderedEventType | Annotation Rendered Event Type}\n   * for typing your event listeners for this annotation rendered event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRenderedEventDetail | Annotation Rendered Event Detail}.\n   */\n  ANNOTATION_RENDERED = 'CORNERSTONE_TOOLS_ANNOTATION_RENDERED',\n\n  /**\n   * Triggers on the eventTarget when an annotation interpolation process completed.\n   * Make use of {@link EventTypes.AnnotationInterpolationCompletedEventType | Annotation Interpolation process Completed Event Type}\n   * for typing your event listeners for this annotation interpolation complete event, and see what\n   * event detail is included in {@link EventTypes.AnnotationInterpolationCompletedEventDetail | Annotation interpolation process Event Detail}.\n   */\n  ANNOTATION_INTERPOLATION_PROCESS_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_INTERPOLATION_PROCESS_COMPLETED',\n\n  /**\n   * Triggers on the eventTarget when interpolated annotations are removed.\n   * Make use of {@link EventTypes.AnnotationInterpolationRemovedEventType | Annotation Interpolation Removed Event Type}\n   * for typing your event listeners for this interpolated annotation removed event, and see what\n   * event detail is included in {@link EventTypes.AnnotationInterpolationRemovedEventDetail | Annotation interpolation removed Event Detail}.\n   */\n  INTERPOLATED_ANNOTATIONS_REMOVED = 'CORNERSTONE_TOOLS_INTERPOLATED_ANNOTATIONS_REMOVED',\n\n  ///////////////////////////////////////\n  //        Segmentations Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is updated in the state manager.\n   * Make use of {@link EventTypes.SegmentationModifiedEventType | Segmentation Modified Event Type}\n   * for typing your event listeners for this segmentation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationModifiedEventDetail | Segmentation Modified Event Detail}.\n   */\n  SEGMENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is rendered by the Segmentation Rendering Engine.\n   * Make use of {@link EventTypes.SegmentationRenderedEventType | Segmentation Rendered Event Type}\n   * for typing your event listeners for this segmentation rendered event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRenderedEventDetail | Segmentation Rendered Event Detail}.\n   */\n  SEGMENTATION_RENDERED = 'CORNERSTONE_TOOLS_SEGMENTATION_RENDERED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is modified in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationModifiedEventType | Segmentation Representation Modified Event Type}\n   * for typing your event listeners for this segmentation representation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationModifiedEventDetail | Segmentation Representation Modified Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is removed from the state manager.\n   * Make use of {@link EventTypes.SegmentationRemovedEventType | Segmentation Removed Event Type}\n   * for typing your event listeners for this segmentation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRemovedEventDetail | Segmentation Removed Event Detail}.\n   */\n  SEGMENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is removed in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationRemovedEventType | Segmentation Representation Removed Event Type}\n   * for typing your event listeners for this segmentation representation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationRemovedEventDetail | Segmentation Representation Removed Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation data is modified (e.g., by brush tool).\n   * Make use of {@link EventTypes.SegmentationDataModifiedEventType | Segmentation Data Modified Event Type}\n   * for typing your event listeners for this segmentation data modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationDataModifiedEventDetail | Segmentation Data Modified Event Detail}.\n   */\n  SEGMENTATION_DATA_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED',\n\n  ///////////////////////////////////////\n  //         Keyboard Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is pressed.\n   * Make use of {@link EventTypes.KeyDownEventType | Key Down Event Type}\n   * for typing your event listeners for this key down event, and see what\n   * event detail is included in {@link EventTypes.KeyDownEventDetail | Key Down Event Detail}.\n   */\n  KEY_DOWN = 'CORNERSTONE_TOOLS_KEY_DOWN',\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is released.\n   * Make use of {@link EventTypes.KeyUpEventType | Key Up Event Type}\n   * for typing your event listeners for this key up event, and see what\n   * event detail is included in {@link EventTypes.KeyUpEventDetail | Key Up Event Detail}.\n   */\n  KEY_UP = 'CORNERSTONE_TOOLS_KEY_UP',\n\n  ///////////////////////////////////////\n  //      Mouse Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when the mouse is pressed down, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDownEventType | Mouse Down Event Type}\n   * for typing your event listeners for this mouse down event, and see what\n   * event detail is included in {@link EventTypes.MouseDownEventDetail | Mouse Down Event Detail}.\n   */\n  MOUSE_DOWN = 'CORNERSTONE_TOOLS_MOUSE_DOWN',\n\n  /**\n   * Triggers on the eventTarget when the mouse is released, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseUpEventType | Mouse Up Event Type}\n   * for typing your event listeners for this mouse up event, and see what\n   * event detail is included in {@link EventTypes.MouseUpEventDetail | Mouse Up Event Detail}.\n   */\n  MOUSE_UP = 'CORNERSTONE_TOOLS_MOUSE_UP',\n\n  /**\n   * Triggers on the eventTarget when a handled `MOUSE_DOWN` event does not `stopPropagation`. The hook\n   * we use to create new annotation for mouse events.\n   * Make use of {@link EventTypes.MouseDownActivateEventType | Mouse Down Activate Event Type}\n   * for typing your event listeners for this mouse down activate event, and see what\n   * event detail is included in {@link EventTypes.MouseDownActivateEventDetail | Mouse Down Activate Event Detail}.\n   */\n  MOUSE_DOWN_ACTIVATE = 'CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE',\n\n  /**\n   * Triggers on the event target when mouse is dragging an annotation or textBox.\n   * Make use of {@link EventTypes.MouseDragEventType | Mouse Drag Event Type}\n   * for typing your event listeners for this mouse drag event, and see what\n   * event detail is included in {@link EventTypes.MouseDragEventDetail | Mouse Drag Event Detail}.\n   */\n  MOUSE_DRAG = 'CORNERSTONE_TOOLS_MOUSE_DRAG',\n\n  /**\n   * Triggers on the eventTarget, when the mouse is moved, it is CornerstoneTools normalized event.\n   * It can be just a mouse move or when double click is performed and annotation\n   * drawing can be performed with just mouse move.\n   * Make use of {@link EventTypes.MouseMoveEventType | Mouse Move Event Type}\n   * for typing your event listeners for this mouse move event, and see what\n   * event detail is included in {@link EventTypes.MouseMoveEventDetail | Mouse Move Event Detail}.\n   */\n  MOUSE_MOVE = 'CORNERSTONE_TOOLS_MOUSE_MOVE',\n\n  /**\n   * Triggers on the eventTarget when a mouse click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseClickEventType | Mouse Click Event Type}\n   * for typing your event listeners for this mouse click event, and see what\n   * event detail is included in {@link EventTypes.MouseClickEventDetail | Mouse Click Event Detail}.\n   */\n  MOUSE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse double click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDoubleClickEventType | Mouse Double Click Event Type}\n   * for typing your event listeners for this mouse double click event, and see what\n   * event detail is included in {@link EventTypes.MouseDoubleClickEventDetail | Mouse Double Click Event Detail}.\n   */\n  MOUSE_DOUBLE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse wheel event is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseWheelEventType | Mouse Wheel Event Type}\n   * for typing your event listeners for this mouse wheel event, and see what\n   * event detail is included in {@link EventTypes.MouseWheelEventDetail | Mouse Wheel Event Detail}.\n   */\n  MOUSE_WHEEL = 'CORNERSTONE_TOOLS_MOUSE_WHEEL',\n\n  // Todo: not being fired as of now\n  // ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n  // Todo: not implemented yet\n  // KEY_PRESS = 'CORNERSTONE_TOOLS_KEY_PRESS',\n\n  //////////////////////\n  //   Touch Events   //\n  //////////////////////\n  // The event flow looks like the following\n  // Touch Start -> (optional) Touch Press -> Touch Drag -> (optional) Touch Swipe -> Touch End\n  // Touch Tap\n  // mousedown\n  // mousedown, Touch Start, and Tap are mutually exclusive events\n  TOUCH_START = 'CORNERSTONE_TOOLS_TOUCH_START',\n  TOUCH_START_ACTIVATE = 'CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE',\n  TOUCH_PRESS = 'CORNERSTONE_TOOLS_TOUCH_PRESS',\n  TOUCH_DRAG = 'CORNERSTONE_TOOLS_TOUCH_DRAG',\n  TOUCH_END = 'CORNERSTONE_TOOLS_TOUCH_END',\n  TOUCH_TAP = 'CORNERSTONE_TOOLS_TAP',\n  TOUCH_SWIPE = 'CORNERSTONE_TOOLS_SWIPE',\n}\n\nexport default Events;\n","/**\n * Segmentations on viewports can be visualized in different ways. This enum\n * defines the different ways of visualizing segmentations. Currently, only\n * labelmap is supported.\n */\nenum SegmentationRepresentations {\n  Labelmap = 'LABELMAP',\n  Contour = 'CONTOUR',\n  Surface = 'SURFACE',\n}\n\nexport default SegmentationRepresentations;\n","/**\n * Defines the names of the strategy callbacks used for performing enhanced\n * strategy operations.\n */\nenum StrategyCallbacks {\n  /**\n   * startStrategy is called at the start of a strategy, typically on mouse down\n   * Note this is separate from preview and the endings for preview, which could\n   * be called alternatively, but this may be nested within a preview.\n   */\n  OnInteractionStart = 'onInteractionStart',\n  /**\n   * finishStrategy is called at the end of a strategy being applied, usually on\n   * mouse up.\n   */\n  OnInteractionEnd = 'onInteractionEnd',\n  /**\n   * The preview can be used for tools to show what would happen on accepting\n   * before the change is actually done.  For example, a spline tool might\n   * show a preview state, and allow that to be accepted or rejected.\n   */\n  Preview = 'preview',\n  RejectPreview = 'rejectPreview',\n  AcceptPreview = 'acceptPreview',\n\n  /**\n   * Fills the given reygion\n   */\n  Fill = 'fill',\n\n  /**\n   * The default strategy function, often synonymous with fill\n   */\n  StrategyFunction = 'strategyFunction',\n\n  /**\n   * For threshold functions, this creates the thresold test.  Mostly an internal\n   * detail, but might be useful to share between strategies.\n   */\n  CreateIsInThreshold = 'createIsInThreshold',\n\n  /**\n   *  Some strategy functions need to initialize some data before being runnable.\n   * This is mostly an internal detail, just useful to have an enum here for this.\n   */\n  Initialize = 'initialize',\n\n  // Internal Details\n  INTERNAL_setValue = 'setValue',\n\n  /** inner circle size  */\n  ComputeInnerCircleRadius = 'computeInnerCircleRadius',\n}\n\nexport default StrategyCallbacks;\n","enum Swipe {\n  UP = 'UP',\n  DOWN = 'DOWN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nexport { Swipe };\n","/**\n * Mouse This enum enumerates the different buttons returned by `.buttons` on the mouse event.\n * These values are used when setting a tool active in a tool group.\n *\n * See also: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n */\nenum MouseBindings {\n  /** usually the left button */\n  Primary = 1,\n  /** usually the right button */\n  Secondary = 2,\n  Primary_And_Secondary = 3,\n  /** usually mouse wheel button */\n  Auxiliary = 4,\n  Primary_And_Auxiliary = 5,\n  Secondary_And_Auxiliary = 6,\n  Primary_And_Secondary_And_Auxiliary = 7,\n  /** usually \"Browser Back\" button */\n  Fourth_Button = 8,\n  /** usually \"Browser Forward\" button */\n  Fifth_Button = 16,\n}\n\nenum KeyboardBindings {\n  Shift = 16,\n  Ctrl = 17,\n  Alt = 18,\n  Meta = 91,\n  ShiftCtrl = 1617,\n  ShiftAlt = 1618,\n  ShiftMeta = 1691,\n  CtrlAlt = 1718,\n  CtrlMeta = 1791,\n  AltMeta = 1891,\n}\n\nexport { MouseBindings, KeyboardBindings };\n","/**\n * AnnotationStyleStates - This enum defines the 4 possible states available for\n *  a Annotation instance.\n *\n * Default:\n *   The default state for the annotation instance\n * Highlighted:\n *   The annotation should be rendered in \"highlighted\" mode in response to\n *   direct user interaction;\n * Selected:\n *   The annotation has been selected by the user;\n * Locked:\n *   The annotation has been locked;\n * AutoGenerated:\n *   The annotation has been auto generated;\n */\nenum AnnotationStyleStates {\n  Default = '',\n  Highlighted = 'Highlighted',\n  Selected = 'Selected',\n  Locked = 'Locked',\n  AutoGenerated = 'AutoGenerated',\n}\n\nexport default AnnotationStyleStates;\n","/**\n * Worker Types are used to define the types the worker that is getting performed\n */\nenum ChangeTypes {\n  POLYSEG_CONTOUR_TO_LABELMAP = 'polySeg/convertContourToVolumeLabelmap',\n\n  POLYSEG_SURFACE_TO_LABELMAP = 'polySeg/convertSurfacesToVolumeLabelmap',\n\n  POLYSEG_CONTOUR_TO_SURFACE = 'polySeg/convertContourToSurface',\n\n  POLYSEG_LABELMAP_TO_SURFACE = 'polySeg/convertLabelmapToSurface',\n\n  SURFACE_CLIPPING = 'surfaceClipping',\n}\n\nexport default ChangeTypes;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from '../utilities/triggerAnnotationRender';\n\n/**\n *  When the image is rendered, check what tools can be rendered for this element.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `renderAnnotation` method, then we render them.\n * - Note that these tools don't necessarily have to be instances of  `AnnotationTool`,\n *   Any tool may register a `renderAnnotation` method (e.g. a tool that displays an overlay).\n *\n * @param evt - The normalized IMAGE_RENDERED event.\n */\nconst onImageRendered = function (evt: Types.EventTypes.ImageRenderedEvent) {\n  // TODO: should we do this on camera modified instead of image rendered?\n  // e.g. no need to re-render annotations if only the VOI has changed\n  triggerAnnotationRender(evt.detail.element);\n};\n\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement): void {\n  element.removeEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import Events from '../enums/Events';\n\nimport {\n  mouseClick,\n  mouseDown,\n  mouseDownActivate,\n  mouseDoubleClick,\n  mouseDrag,\n  mouseMove,\n  mouseUp,\n  mouseWheel,\n} from './mouseEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.addEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.addEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.addEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.addEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.addEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.addEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.addEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.removeEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.removeEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.removeEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.removeEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.removeEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.removeEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.removeEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\nconst mouseToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default mouseToolEventDispatcher;\n","import Events from '../enums/Events';\nimport { keyDown, keyUp } from './keyboardEventHandlers';\n\n/**\n * Enable Key down and key up listeners\n *\n * @param element - The HTML element to attach the event listeners to.\n */\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.addEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\n/**\n * Disable Key down and key up listeners\n * @param element - The HTML element to attach the event listeners to.\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.removeEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\nconst keyboardToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default keyboardToolEventDispatcher;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When the camera is modified, check what tools need to react to this.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onCameraModified` method, we call it.\n *\n * @param evt - The normalized camera modified event.\n */\nconst onCameraModified = function (evt: Types.EventTypes.CameraModifiedEvent) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onCameraModified) {\n      tool.onCameraModified(evt);\n    }\n  });\n};\n\nconst enable = function (element) {\n  element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nconst disable = function (element) {\n  element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When image spacing is calibrated modify the annotations for all of its tools\n * to consider the new calibration info.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onImageSpacingCalibrated` method, we call it.\n *\n * @param evt - The normalized image calibration event.\n */\nconst onImageSpacingCalibrated = function (\n  evt: Types.EventTypes.ImageSpacingCalibratedEvent\n) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onImageSpacingCalibrated) {\n      tool.onImageSpacingCalibrated(evt);\n    }\n  });\n};\n\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import Events from '../enums/Events';\n\nimport {\n  touchStart,\n  touchStartActivate,\n  touchDrag,\n  touchEnd,\n  touchTap,\n  touchPress,\n} from './touchEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.addEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.addEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.addEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.addEventListener(Events.TOUCH_TAP, touchTap as EventListener);\n  element.addEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.removeEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.removeEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.removeEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.removeEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\nconst touchToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default touchToolEventDispatcher;\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\n\n/**\n * The enable and disable add/remove the event listeners that dispatch the\n * required events to the interpolation manager.\n */\nconst enable = function () {\n  eventTarget.addEventListener(\n    Events.ANNOTATION_COMPLETED,\n    InterpolationManager.handleAnnotationCompleted as EventListener\n  );\n  eventTarget.addEventListener(\n    Events.ANNOTATION_MODIFIED,\n    InterpolationManager.handleAnnotationUpdate as EventListener\n  );\n  eventTarget.addEventListener(\n    Events.ANNOTATION_REMOVED,\n    InterpolationManager.handleAnnotationDelete as EventListener\n  );\n};\n\nconst disable = function () {\n  eventTarget.removeEventListener(\n    Events.ANNOTATION_COMPLETED,\n    InterpolationManager.handleAnnotationCompleted as EventListener\n  );\n  eventTarget.removeEventListener(\n    Events.ANNOTATION_MODIFIED,\n    InterpolationManager.handleAnnotationUpdate as EventListener\n  );\n  eventTarget.removeEventListener(\n    Events.ANNOTATION_REMOVED,\n    InterpolationManager.handleAnnotationDelete as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import {\n  getEnabledElement,\n  utilities as csUtils,\n  Types,\n} from '@cornerstonejs/core';\nimport { ContourSegmentationAnnotation } from '../../../types/ContourSegmentationAnnotation';\nimport getViewportsForAnnotation from '../../../utilities/getViewportsForAnnotation';\nimport {\n  math,\n  triggerAnnotationRenderForViewportIds,\n} from '../../../utilities';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport {\n  addAnnotation,\n  removeAnnotation,\n  getAllAnnotations,\n  getChildAnnotations,\n  addChildAnnotation,\n  clearParentAnnotation,\n} from '../../../stateManagement/annotation/annotationState';\nimport {\n  AnnotationCompletedEventType,\n  ContourAnnotationCompletedEventDetail,\n} from '../../../types/EventTypes';\nimport * as contourUtils from '../../../utilities/contours';\nimport * as contourSegUtils from '../../../utilities/contourSegmentation';\nimport { ToolGroupManager, hasTool as cstHasTool } from '../../../store';\nimport { PlanarFreehandContourSegmentationTool } from '../../../tools';\nimport type { Annotation } from '../../../types';\nimport type { ContourAnnotation } from '../../../types/ContourAnnotation';\nimport { ContourWindingDirection } from '../../../types/ContourAnnotation';\nimport { triggerAnnotationModified } from '../../../stateManagement/annotation/helpers/state';\n\nconst DEFAULT_CONTOUR_SEG_TOOLNAME = 'PlanarFreehandContourSegmentationTool';\n\nexport default async function contourSegmentationCompletedListener(\n  evt: AnnotationCompletedEventType\n) {\n  const sourceAnnotation = evt.detail\n    .annotation as ContourSegmentationAnnotation;\n\n  if (!contourSegUtils.isContourSegmentationAnnotation(sourceAnnotation)) {\n    return;\n  }\n\n  const viewport = getViewport(sourceAnnotation);\n  const contourSegmentationAnnotations = getValidContourSegmentationAnnotations(\n    viewport,\n    sourceAnnotation\n  );\n\n  if (!contourSegmentationAnnotations.length) {\n    return;\n  }\n\n  const sourcePolyline = convertContourPolylineToCanvasSpace(\n    sourceAnnotation.data.contour.polyline,\n    viewport\n  );\n\n  const targetAnnotationInfo = findIntersectingContour(\n    viewport,\n    sourcePolyline,\n    contourSegmentationAnnotations\n  );\n\n  if (!targetAnnotationInfo) {\n    return;\n  }\n\n  const { targetAnnotation, targetPolyline, isContourHole } =\n    targetAnnotationInfo;\n\n  if (isContourHole) {\n    const { contourHoleProcessingEnabled = false } =\n      evt.detail as ContourAnnotationCompletedEventDetail;\n\n    // Do not create holes when contourHoleProcessingEnabled is `false`\n    if (!contourHoleProcessingEnabled) {\n      return;\n    }\n\n    createPolylineHole(viewport, targetAnnotation, sourceAnnotation);\n  } else {\n    combinePolylines(\n      viewport,\n      targetAnnotation,\n      targetPolyline,\n      sourceAnnotation,\n      sourcePolyline\n    );\n  }\n}\n\nfunction isFreehandContourSegToolRegisteredForViewport(\n  viewport: Types.IViewport,\n  silent = false\n) {\n  const { toolName } = PlanarFreehandContourSegmentationTool;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewport.id,\n    viewport.renderingEngineId\n  );\n\n  let errorMessage;\n\n  if (!toolGroup.hasTool(toolName)) {\n    errorMessage = `Tool ${toolName} not added to ${toolGroup.id} toolGroup`;\n  } else if (!toolGroup.getToolOptions(toolName)) {\n    errorMessage = `Tool ${toolName} must be in active/passive state`;\n  }\n\n  if (errorMessage && !silent) {\n    console.warn(errorMessage);\n  }\n\n  return !errorMessage;\n}\n\nfunction getViewport(annotation: Annotation) {\n  const viewports = getViewportsForAnnotation(annotation);\n  const viewportWithToolRegistered = viewports.find((viewport) =>\n    isFreehandContourSegToolRegisteredForViewport(viewport, true)\n  );\n\n  // Returns the first viewport even if freehand contour segmentation is not\n  // registered because it can be used to project the polyline to create holes.\n  // Another verification is done before appending/removing contours which is\n  // possible only when the tool is registered.\n  return viewportWithToolRegistered ?? viewports[0];\n}\n\nfunction convertContourPolylineToCanvasSpace(\n  polyline: Types.Point3[],\n  viewport: Types.IViewport\n): Types.Point2[] {\n  const numPoints = polyline.length;\n  const projectedPolyline = new Array(numPoints);\n\n  for (let i = 0; i < numPoints; i++) {\n    projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n  }\n\n  return projectedPolyline;\n}\n\nfunction getValidContourSegmentationAnnotations(\n  viewport: Types.IViewport,\n  sourceAnnotation: ContourSegmentationAnnotation\n): ContourSegmentationAnnotation[] {\n  const { annotationUID: sourceAnnotationUID } = sourceAnnotation;\n\n  // Get all annotations and filter all contour segmentations locally\n  const allAnnotations = getAllAnnotations();\n  return allAnnotations.filter(\n    (targetAnnotation) =>\n      targetAnnotation.annotationUID &&\n      targetAnnotation.annotationUID !== sourceAnnotationUID &&\n      contourSegUtils.isContourSegmentationAnnotation(targetAnnotation) &&\n      contourSegUtils.areSameSegment(targetAnnotation, sourceAnnotation) &&\n      viewport.isReferenceViewable(targetAnnotation.metadata)\n  ) as ContourSegmentationAnnotation[];\n}\n\n/**\n * Finds other contours on the same slice which intersect the source polyline,\n * represented as canvas points.\n */\nfunction findIntersectingContour(\n  viewport: Types.IViewport,\n  sourcePolyline: Types.Point2[],\n  contourSegmentationAnnotations: ContourSegmentationAnnotation[]\n): {\n  targetAnnotation: ContourSegmentationAnnotation;\n  targetPolyline: Types.Point2[];\n  isContourHole: boolean;\n} {\n  const sourceAABB = math.polyline.getAABB(sourcePolyline);\n\n  for (let i = 0; i < contourSegmentationAnnotations.length; i++) {\n    const targetAnnotation = contourSegmentationAnnotations[i];\n    const targetPolyline = convertContourPolylineToCanvasSpace(\n      targetAnnotation.data.contour.polyline,\n      viewport\n    );\n\n    const targetAABB = math.polyline.getAABB(targetPolyline);\n    const aabbIntersect = math.aabb.intersectAABB(sourceAABB, targetAABB);\n    const lineSegmentsIntersect =\n      aabbIntersect &&\n      math.polyline.intersectPolyline(sourcePolyline, targetPolyline);\n    const isContourHole =\n      aabbIntersect &&\n      !lineSegmentsIntersect &&\n      math.polyline.containsPoints(targetPolyline, sourcePolyline);\n\n    if (lineSegmentsIntersect || isContourHole) {\n      return { targetAnnotation, targetPolyline, isContourHole };\n    }\n  }\n}\n\n/**\n * Modifies the holeAnnotation to work as a contour hole in the targetAnnotation,\n * displayed on the given viewport.\n\n */\nexport function createPolylineHole(\n  viewport: Types.IViewport,\n  targetAnnotation: ContourSegmentationAnnotation,\n  holeAnnotation: ContourSegmentationAnnotation\n) {\n  const { windingDirection: targetWindingDirection } =\n    targetAnnotation.data.contour;\n  const { windingDirection: holeWindingDirection } =\n    holeAnnotation.data.contour;\n\n  // Check if both normals are pointing to the same direction because the\n  // polyline for the hole needs to be in a different direction\n  // if (glMatrix.equals(1, dotNormals)) {\n  if (targetWindingDirection === holeWindingDirection) {\n    holeAnnotation.data.contour.polyline.reverse();\n    holeAnnotation.data.contour.windingDirection = targetWindingDirection * -1;\n  }\n\n  addChildAnnotation(targetAnnotation, holeAnnotation);\n  contourSegUtils.removeContourSegmentationAnnotation(holeAnnotation);\n\n  const { element } = viewport;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine } = enabledElement;\n\n  // Updating a Spline contours, for example, should also update freehand contours\n  const updatedToolNames = new Set([\n    DEFAULT_CONTOUR_SEG_TOOLNAME,\n    targetAnnotation.metadata.toolName,\n    holeAnnotation.metadata.toolName,\n  ]);\n\n  for (const toolName of updatedToolNames.values()) {\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      toolName\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n}\n\nfunction getContourHolesData(\n  viewport: Types.IViewport,\n  annotation: ContourAnnotation\n) {\n  return getChildAnnotations(annotation).map((holeAnnotation) => {\n    const polyline = convertContourPolylineToCanvasSpace(\n      holeAnnotation.data.contour.polyline,\n      viewport\n    );\n\n    return { annotation: holeAnnotation, polyline };\n  });\n}\n\nfunction combinePolylines(\n  viewport: Types.IViewport,\n  targetAnnotation: ContourSegmentationAnnotation,\n  targetPolyline: Types.Point2[],\n  sourceAnnotation: ContourSegmentationAnnotation,\n  sourcePolyline: Types.Point2[]\n) {\n  if (!cstHasTool(PlanarFreehandContourSegmentationTool)) {\n    console.warn(\n      `${PlanarFreehandContourSegmentationTool.toolName} is not registered in cornerstone`\n    );\n    return;\n  }\n\n  // Cannot append/remove an annotation if it will not be available on any viewport\n  if (!isFreehandContourSegToolRegisteredForViewport(viewport)) {\n    return;\n  }\n\n  const sourceStartPoint = sourcePolyline[0];\n  const mergePolylines = math.polyline.containsPoint(\n    targetPolyline,\n    sourceStartPoint\n  );\n\n  const contourHolesData = getContourHolesData(viewport, targetAnnotation);\n  const unassignedContourHolesSet = new Set(contourHolesData);\n  const reassignedContourHolesMap = new Map();\n  const assignHoleToPolyline = (parentPolyline, holeData) => {\n    let holes = reassignedContourHolesMap.get(parentPolyline);\n\n    if (!holes) {\n      holes = [];\n      reassignedContourHolesMap.set(parentPolyline, holes);\n    }\n\n    holes.push(holeData);\n    unassignedContourHolesSet.delete(holeData);\n  };\n  const newPolylines = [];\n\n  if (mergePolylines) {\n    const mergedPolyline = math.polyline.mergePolylines(\n      targetPolyline,\n      sourcePolyline\n    );\n\n    newPolylines.push(mergedPolyline);\n\n    // Keep all holes because the contour can only grow when merging and there\n    // is no chance for any hole to be removed\n    Array.from(unassignedContourHolesSet.keys()).forEach((holeData) =>\n      assignHoleToPolyline(mergedPolyline, holeData)\n    );\n  } else {\n    const subtractedPolylines = math.polyline.subtractPolylines(\n      targetPolyline,\n      sourcePolyline\n    );\n\n    subtractedPolylines.forEach((newPolyline) => {\n      newPolylines.push(newPolyline);\n\n      Array.from(unassignedContourHolesSet.keys()).forEach((holeData) => {\n        const containsHole = math.polyline.containsPoints(\n          newPolyline,\n          holeData.polyline\n        );\n\n        if (containsHole) {\n          assignHoleToPolyline(newPolyline, holeData);\n          unassignedContourHolesSet.delete(holeData);\n        }\n      });\n    });\n  }\n\n  // Make sure the holes that will be added to the new annotation are not\n  // associated to the target annotation that will be deleted\n  Array.from(reassignedContourHolesMap.values()).forEach(\n    (contourHolesDataArray) =>\n      contourHolesDataArray.forEach((contourHoleData) =>\n        clearParentAnnotation(contourHoleData.annotation)\n      )\n  );\n\n  const { element } = viewport;\n  const enabledElement = getEnabledElement(element);\n  const { metadata, data } = targetAnnotation;\n  const { handles, segmentation } = data;\n  const { textBox } = handles;\n\n  removeAnnotation(sourceAnnotation.annotationUID);\n  removeAnnotation(targetAnnotation.annotationUID);\n\n  for (let i = 0; i < newPolylines.length; i++) {\n    const polyline = newPolylines[i];\n    const startPoint = viewport.canvasToWorld(polyline[0]);\n    const endPoint = viewport.canvasToWorld(polyline[polyline.length - 1]);\n    const newAnnotation: ContourSegmentationAnnotation = {\n      metadata: {\n        ...metadata,\n        toolName: DEFAULT_CONTOUR_SEG_TOOLNAME,\n        originalToolName: metadata.originalToolName || metadata.toolName,\n      },\n      data: {\n        cachedStats: {},\n        handles: {\n          points: [startPoint, endPoint],\n          textBox: textBox ? { ...textBox } : undefined,\n        },\n        contour: {\n          polyline: [],\n          closed: true,\n        },\n        spline: targetAnnotation.data.spline,\n        segmentation: {\n          ...segmentation,\n        },\n      },\n      annotationUID: csUtils.uuidv4() as string,\n      highlighted: true,\n      invalidated: true,\n      isLocked: false,\n      isVisible: undefined,\n      // Allow this object to be interpolated against the original interpolation\n      // data.\n      interpolationUID: targetAnnotation.interpolationUID,\n      interpolationCompleted: targetAnnotation.interpolationCompleted,\n    };\n\n    // Calling `updateContourPolyline` method instead of setting it locally\n    // because it is also responsible for checking/setting the winding direction.\n    contourUtils.updateContourPolyline(\n      newAnnotation,\n      {\n        points: polyline,\n        closed: true,\n        targetWindingDirection: ContourWindingDirection.Clockwise,\n      },\n      viewport\n    );\n\n    addAnnotation(newAnnotation, element);\n    contourSegUtils.addContourSegmentationAnnotation(newAnnotation);\n    triggerAnnotationModified(newAnnotation, viewport.element);\n\n    reassignedContourHolesMap\n      .get(polyline)\n      ?.forEach((holeData) =>\n        addChildAnnotation(newAnnotation, holeData.annotation)\n      );\n  }\n\n  updateViewports(enabledElement, targetAnnotation, sourceAnnotation);\n}\n\nfunction updateViewports(enabledElement, targetAnnotation, sourceAnnotation) {\n  const { viewport } = enabledElement;\n  const { element } = viewport;\n  const { renderingEngine } = enabledElement;\n\n  const updatedTtoolNames = new Set([\n    DEFAULT_CONTOUR_SEG_TOOLNAME,\n    targetAnnotation.metadata.toolName,\n    sourceAnnotation.metadata.toolName,\n  ]);\n\n  for (const toolName of updatedTtoolNames.values()) {\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      toolName\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n\n  return new Promise((resolve) => window.requestAnimationFrame(resolve));\n}\n","import mouseDoubleClickListener from './mouseDoubleClickListener';\nimport mouseDownListener, {\n  mouseDoubleClickIgnoreListener,\n} from './mouseDownListener';\nimport mouseMoveListener from './mouseMoveListener';\n\n/**\n * Removes mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('dblclick', mouseDoubleClickListener);\n  element.removeEventListener('mousedown', mouseDownListener);\n  element.removeEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.removeEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\n/**\n * Registers mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n\n  element.addEventListener('dblclick', mouseDoubleClickListener);\n  element.addEventListener('mousedown', mouseDownListener);\n  element.addEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.addEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import preventGhostClick from './preventGhostClick';\nimport touchStartListener from './touchStartListener';\n\n/**\n * Removes touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  preventGhostClick.disable(element);\n  element.removeEventListener('touchstart', touchStartListener);\n}\n\n/**\n * Registers touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n  preventGhostClick.enable(element);\n  element.addEventListener('touchstart', touchStartListener, {\n    passive: false,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import wheelListener from './wheelListener';\n\n/**\n * Listens for the wheel event, and handles it. Handled event\n * will be \"normalized\" and re-emitted as `Events.MOUSE_WHEEL`\n *\n * @param element - The HTML element\n */\nfunction enable(element: HTMLDivElement) {\n  disable(element);\n  element.addEventListener('wheel', wheelListener, { passive: false });\n}\n\n/**\n * Removes listener and handler for wheel event. `Events.MOUSE_WHEEL`\n * will no longer be emitted.\n *\n * @param element - THe HTML element\n */\nfunction disable(element: HTMLDivElement) {\n  element.removeEventListener('wheel', wheelListener);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationModifiedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationStateModified` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationModifiedListener = function (\n  evt: SegmentationRepresentationModifiedEventType\n): void {\n  const { toolGroupId } = evt.detail;\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationModifiedListener;\n","import {\n  cache,\n  getEnabledElementByIds,\n  utilities as csUtils,\n  VolumeViewport,\n} from '@cornerstonejs/core';\n\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { SegmentationDataModifiedEventType } from '../../../types/EventTypes';\nimport {\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../../types/LabelmapTypes';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\n\n/** A callback function that is called when the segmentation data is modified which\n *  often is as a result of tool interactions e.g., scissors, eraser, etc.\n */\nconst onLabelmapSegmentationDataModified = function (\n  evt: SegmentationDataModifiedEventType\n): void {\n  const { segmentationId, modifiedSlicesToUse } = evt.detail;\n\n  const { representationData, type } =\n    SegmentationState.getSegmentation(segmentationId);\n\n  const toolGroupIds =\n    SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);\n\n  const labelmapRepresentationData = representationData[type];\n\n  if ('volumeId' in labelmapRepresentationData) {\n    // get the volume from cache, we need the openGLTexture to be updated to GPU\n    performVolumeLabelmapUpdate({\n      modifiedSlicesToUse,\n      representationData,\n      type,\n    });\n  }\n\n  if ('imageIdReferenceMap' in labelmapRepresentationData) {\n    // get the stack from cache, we need the imageData to be updated to GPU\n    performStackLabelmapUpdate({\n      toolGroupIds,\n      segmentationId,\n      representationData,\n      type,\n    });\n  }\n};\n\nfunction performVolumeLabelmapUpdate({\n  modifiedSlicesToUse,\n  representationData,\n  type,\n}) {\n  const segmentationVolume = cache.getVolume(\n    (representationData[type] as LabelmapSegmentationDataVolume).volumeId\n  );\n\n  if (!segmentationVolume) {\n    console.warn('segmentation not found in cache');\n    return;\n  }\n\n  const { imageData, vtkOpenGLTexture } = segmentationVolume;\n\n  // Update the texture for the volume in the GPU\n  let slicesToUpdate;\n  if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {\n    slicesToUpdate = modifiedSlicesToUse;\n  } else {\n    const numSlices = imageData.getDimensions()[2];\n    slicesToUpdate = [...Array(numSlices).keys()];\n  }\n\n  slicesToUpdate.forEach((i) => {\n    vtkOpenGLTexture.setUpdatedFrame(i);\n  });\n\n  // Trigger modified on the imageData to update the image\n  imageData.modified();\n}\n\nfunction performStackLabelmapUpdate({\n  toolGroupIds,\n  segmentationId,\n  representationData,\n  type,\n}) {\n  toolGroupIds.forEach((toolGroupId) => {\n    const toolGroupSegmentationRepresentations =\n      SegmentationState.getSegmentationRepresentations(toolGroupId);\n\n    const toolGroup = getToolGroup(toolGroupId);\n    const viewportsInfo = toolGroup.getViewportsInfo();\n\n    toolGroupSegmentationRepresentations.forEach((representation) => {\n      if (representation.segmentationId !== segmentationId) {\n        return;\n      }\n\n      viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getEnabledElementByIds(\n          viewportId,\n          renderingEngineId\n        ).viewport;\n\n        if (viewport instanceof VolumeViewport) {\n          return;\n        }\n\n        const actorEntry = viewport.getActor(\n          representation.segmentationRepresentationUID\n        );\n\n        if (!actorEntry) {\n          return;\n        }\n\n        const currentImageId = viewport.getCurrentImageId();\n\n        const segImageData = actorEntry.actor.getMapper().getInputData();\n\n        const { imageIdReferenceMap } = representationData[\n          type\n        ] as LabelmapSegmentationDataStack;\n\n        const currentSegmentationImageId =\n          imageIdReferenceMap.get(currentImageId);\n\n        const segmentationImage = cache.getImage(currentSegmentationImageId);\n        segImageData.modified();\n\n        // update the cache with the new image data\n        csUtils.updateVTKImageDataWithCornerstoneImage(\n          segImageData,\n          segmentationImage\n        );\n      });\n    });\n  });\n}\n\nexport default onLabelmapSegmentationDataModified;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { SegmentationDataModifiedEventType } from '../../types/EventTypes';\nimport onLabelmapSegmentationDataModified from './labelmap/onLabelmapSegmentationDataModified';\n\n/** A callback function that is called when the segmentation data is modified which\n *  often is as a result of tool interactions e.g., scissors, eraser, etc.\n */\nconst onSegmentationDataModified = function (\n  evt: SegmentationDataModifiedEventType\n): void {\n  const { segmentationId } = evt.detail;\n  const { type } = SegmentationState.getSegmentation(segmentationId);\n\n  const toolGroupIds =\n    SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);\n\n  if (type === SegmentationRepresentations.Labelmap) {\n    onLabelmapSegmentationDataModified(evt);\n  }\n\n  toolGroupIds.forEach((toolGroupId) => {\n    triggerSegmentationRender(toolGroupId);\n  });\n};\n\nexport default onSegmentationDataModified;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationRemovedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationRepresentationRemoved` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationRemovedEventListener = function (\n  evt: SegmentationRepresentationRemovedEventType\n): void {\n  const { toolGroupId, segmentationRepresentationUID } = evt.detail;\n\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationRemovedEventListener;\n","import { SegmentationModifiedEventType } from '../../types/EventTypes';\nimport {\n  getToolGroupIdsWithSegmentation,\n  getSegmentationRepresentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\n\n/** A function that listens to the `segmentationModified` event and triggers\n * the triggerSegmentationRepresentationModified on each toolGroup that\n * has a representation of the given segmentationId.\n */\nconst segmentationModifiedListener = function (\n  evt: SegmentationModifiedEventType\n): void {\n  const { segmentationId } = evt.detail;\n\n  const toolGroupIds = getToolGroupIdsWithSegmentation(segmentationId);\n\n  toolGroupIds.forEach((toolGroupId) => {\n    const segRepresentations = getSegmentationRepresentations(toolGroupId);\n    segRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        triggerSegmentationRepresentationModified(\n          toolGroupId,\n          representation.segmentationRepresentationUID\n        );\n      }\n    });\n  });\n};\n\nexport default segmentationModifiedListener;\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport {\n  BaseVolumeViewport,\n  getEnabledElement,\n  Enums,\n  getEnabledElementByIds,\n  cache,\n  utilities,\n  Types,\n} from '@cornerstonejs/core';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationDataStack } from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from '../../tools/segmentation/strategies/utils/stackVolumeCheck';\nimport triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\n\nconst enable = function (element: HTMLDivElement): void {\n  const { viewport } = getEnabledElement(element);\n\n  if (viewport instanceof BaseVolumeViewport) {\n    return;\n  }\n\n  element.addEventListener(\n    Enums.Events.STACK_NEW_IMAGE,\n    _imageChangeEventListener as EventListener\n  );\n  // this listener handles the segmentation modifications\n  element.addEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    _imageChangeEventListener as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement): void {\n  element.removeEventListener(\n    Enums.Events.STACK_NEW_IMAGE,\n    _imageChangeEventListener as EventListener\n  );\n  element.removeEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    _imageChangeEventListener as EventListener\n  );\n};\n\nconst perToolGroupManualTriggers = new Map();\n\n/**\n *  When the image is rendered, check what tools can be rendered for this element.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `renderAnnotation` method, then we render them.\n * - Note that these tools don't necessarily have to be instances of  `AnnotationTool`,\n *   Any tool may register a `renderAnnotation` method (e.g. a tool that displays an overlay).\n *\n * @param evt - The normalized IMAGE_RENDERED event.\n */\nfunction _imageChangeEventListener(evt) {\n  const eventData = evt.detail;\n  const { viewportId, renderingEngineId } = eventData;\n  const { viewport } = getEnabledElementByIds(\n    viewportId,\n    renderingEngineId\n  ) as { viewport: Types.IStackViewport };\n\n  const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n  if (!toolGroup) {\n    return;\n  }\n\n  let toolGroupSegmentationRepresentations =\n    SegmentationState.getSegmentationRepresentations(toolGroup.id) || [];\n\n  toolGroupSegmentationRepresentations =\n    toolGroupSegmentationRepresentations.filter(\n      (representation) => representation.type === Representations.Labelmap\n    );\n\n  if (!toolGroupSegmentationRepresentations?.length) {\n    return;\n  }\n\n  const segmentationRepresentations = {};\n  toolGroupSegmentationRepresentations.forEach((representation) => {\n    const segmentation = SegmentationState.getSegmentation(\n      representation.segmentationId\n    );\n\n    if (!segmentation || !segmentation.representationData?.LABELMAP) {\n      return;\n    }\n\n    const labelmapData = segmentation.representationData.LABELMAP;\n\n    if (isVolumeSegmentation(labelmapData, viewport)) {\n      return;\n    }\n\n    const { imageIdReferenceMap } =\n      labelmapData as LabelmapSegmentationDataStack;\n\n    segmentationRepresentations[representation.segmentationRepresentationUID] =\n      {\n        imageIdReferenceMap,\n      };\n  });\n\n  const representationList = Object.keys(segmentationRepresentations);\n  const currentImageId = viewport.getCurrentImageId();\n  const actors = viewport.getActors();\n\n  const segmentationFound = actors.find((actor) => {\n    if (!representationList.includes(actor.uid)) {\n      return false;\n    }\n\n    return true;\n  });\n\n  if (!segmentationFound) {\n    // If the segmentation is not found, it could be because of some special cases\n    // where we are in the process of updating the volume conversion to a stack while\n    // the data is still coming in. In such situations, we should trigger the render\n    // to ensure that the segmentation actors are created, even if the data arrives late.\n\n    if (!perToolGroupManualTriggers.has(toolGroup.id)) {\n      perToolGroupManualTriggers.set(toolGroup.id, true);\n      triggerSegmentationRender(toolGroup.id);\n    }\n\n    // we should return here, since there is no segmentation actor to update\n    // we will hit this function later on after the actor is created\n    return;\n  }\n\n  actors.forEach((actor) => {\n    if (!representationList.includes(actor.uid)) {\n      return;\n    }\n    const segmentationActor = actor.actor;\n\n    const { imageIdReferenceMap } = segmentationRepresentations[actor.uid];\n\n    const derivedImageId = imageIdReferenceMap.get(currentImageId);\n\n    const segmentationImageData = segmentationActor.getMapper().getInputData();\n\n    if (!derivedImageId) {\n      // this means that this slice doesn't have a segmentation for this representation\n      // this can be a case where the segmentation was added to certain slices only\n      // so we can keep the actor but empty out the imageData\n      if (segmentationImageData.setDerivedImage) {\n        // If the image data has a set derived image, then it should be called\n        // to update any vtk or actor data associated with it.  In this case, null\n        // is used to clear the data.  THis allows intercepting/alternative\n        // to vtk calls.  Eventually the vtk version should also use this.\n        segmentationImageData.setDerivedImage(null);\n        return;\n      }\n      // This is the vtk version of the clearing out the image data, and fails\n      // to work for non scalar image data.\n      const scalarArray = vtkDataArray.newInstance({\n        name: 'Pixels',\n        numberOfComponents: 1,\n        values: new Uint8Array(segmentationImageData.getNumberOfPoints()),\n      });\n\n      const imageData = vtkImageData.newInstance();\n      imageData.getPointData().setScalars(scalarArray);\n      segmentationActor.getMapper().setInputData(imageData);\n      return;\n    }\n\n    const derivedImage = cache.getImage(derivedImageId);\n\n    const { dimensions, spacing, direction } =\n      viewport.getImageDataMetadata(derivedImage);\n\n    const currentImage =\n      cache.getImage(currentImageId) ||\n      ({\n        imageId: currentImageId,\n      } as Types.IImage);\n    const { origin: currentOrigin } =\n      viewport.getImageDataMetadata(currentImage);\n\n    // IMPORTANT: We need to make sure that the origin of the segmentation\n    // is the same as the current image origin. This is because due to some\n    // floating point precision issues, when coming from volume to stack\n    // the origin of the segmentation can be slightly different from the\n    // current image origin. This can cause the segmentation to be rendered\n    // in the wrong location.\n    // Todo: This will not work for segmentations that are not in the same frame\n    // of reference or derived from the same image. This can happen when we have\n    // a segmentation that happens to exist in the same space as the image but is\n    // not derived from it. We need to find a way to handle this case, but don't think\n    // it makes sense to do it for the stack viewport, as the volume viewport is designed to handle this case.\n    const originToUse = currentOrigin;\n\n    segmentationImageData.setOrigin(originToUse);\n    segmentationImageData.modified();\n\n    if (\n      segmentationImageData.getDimensions()[0] !== dimensions[0] ||\n      segmentationImageData.getDimensions()[1] !== dimensions[1]\n    ) {\n      // IMPORTANT: Not sure why we can't just update the dimensions\n      // and the orientation of the image data and then call modified\n      // I tried calling modified on everything, but seems like we should remove\n      // and add the actor again below\n      viewport.removeActors([actor.uid]);\n      viewport.addImages(\n        [\n          {\n            imageId: derivedImageId,\n            actorUID: actor.uid,\n            callback: ({ imageActor }) => {\n              const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: [...derivedImage.getPixelData()],\n              });\n\n              const imageData = vtkImageData.newInstance();\n\n              imageData.setDimensions(dimensions[0], dimensions[1], 1);\n              imageData.setSpacing(spacing);\n              imageData.setDirection(direction);\n              imageData.setOrigin(originToUse);\n              imageData.getPointData().setScalars(scalarArray);\n\n              imageActor.getMapper().setInputData(imageData);\n            },\n          },\n        ],\n        true,\n        false\n      );\n\n      triggerSegmentationRender(toolGroup.id);\n      return;\n    }\n\n    if (segmentationImageData.setDerivedImage) {\n      // Update the derived image data, whether vtk or other as appropriate\n      // to the actor(s) displaying the data.\n      segmentationImageData.setDerivedImage(derivedImage);\n    } else {\n      // TODO - use setDerivedImage for this functionality\n      utilities.updateVTKImageDataWithCornerstoneImage(\n        segmentationImageData,\n        derivedImage\n      );\n    }\n    viewport.render();\n\n    // This is put here to make sure that the segmentation is rendered\n    // for the initial image as well after that we don't need it since\n    // stack new image is called when changing slices\n    if (evt.type === Enums.Events.IMAGE_RENDERED) {\n      // unsubscribe after the initial render\n      viewport.element.removeEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        _imageChangeEventListener as EventListener\n      );\n    }\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import { AnnotationCompletedEventType } from '../../types/EventTypes';\nimport * as contourSegUtils from '../../utilities/contourSegmentation';\nimport { contourSegmentationCompleted } from './contourSegmentation';\n\nexport default function annotationCompletedListener(\n  evt: AnnotationCompletedEventType\n) {\n  const annotation = evt.detail.annotation;\n\n  if (contourSegUtils.isContourSegmentationAnnotation(annotation)) {\n    contourSegmentationCompleted(evt);\n  }\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\n\n/**\n * When an annotation is deselected, trigger an annotation render for all viewports.\n * The reason for this is that, drawing an annotation in a different viewport\n * should deselect all other annotations in other viewports. In order to achieve\n * this, we need to trigger an annotation render for all viewports.\n * Todo: Although this is inefficient, but since annotations are only rendered if necessary,\n * it's probably not going to have a noticeable impact on performance.\n * @param evt - The event object.\n */\nfunction annotationSelectionListener(evt): void {\n  const deselectedAnnotation = evt.detail.removed;\n\n  if (!deselectedAnnotation.length) {\n    return;\n  }\n\n  const renderingEngines = getRenderingEngines();\n\n  renderingEngines.forEach((renderingEngine) => {\n    const viewports = renderingEngine.getViewports();\n    const viewportIds = viewports.map((vp) => vp.id);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n  });\n}\n\nexport default annotationSelectionListener;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\n/**\n * This is a callback function that is called when an annotation is modified.\n * Since we are throttling the cachedStats calculation for annotation tools,\n * we need to trigger a final render for the annotation. so that the annotation\n * textBox is updated.\n * Todo: This will trigger all the annotation tools to re-render, although DOM\n * will update those that have changed, but more efficient would be to only\n * update the changed annotation.\n * Todo: A better way is to extract the textBox render logic from the renderAnnotation\n * of all tools and just trigger a render for that (instead of the entire annotation., even if\n * no svg update happens since the attributes for handles are the same)\n */\nfunction annotationModifiedListener(evt): void {\n  const { viewportId, renderingEngineId } = evt.detail;\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n  triggerAnnotationRenderForViewportIds(renderingEngine, [viewportId]);\n}\n\nexport default annotationModifiedListener;\n","import { AnnotationRemovedEventType } from '../../types/EventTypes';\nimport * as contourSegUtils from '../../utilities/contourSegmentation';\nimport { contourSegmentationRemoved } from './contourSegmentation';\n\nexport default function annotationRemovedListener(\n  evt: AnnotationRemovedEventType\n) {\n  const annotation = evt.detail.annotation;\n\n  if (contourSegUtils.isContourSegmentationAnnotation(annotation)) {\n    contourSegmentationRemoved(evt);\n  }\n}\n","import type { AnnotationRemovedEventType } from '../../../types/EventTypes';\nimport type { ContourSegmentationAnnotation } from '../../../types/ContourSegmentationAnnotation';\nimport { removeContourSegmentationAnnotation } from '../../../utilities/contourSegmentation';\n\nexport default function contourSegmentationRemovedListener(\n  evt: AnnotationRemovedEventType\n) {\n  const annotation = evt.detail.annotation as ContourSegmentationAnnotation;\n\n  removeContourSegmentationAnnotation(annotation);\n}\n","import { eventTarget, Enums } from '@cornerstonejs/core';\nimport { getAnnotationManager } from './stateManagement/annotation/annotationState';\nimport { getDefaultSegmentationStateManager } from './stateManagement/segmentation/segmentationState';\nimport { Events as TOOLS_EVENTS } from './enums';\nimport { addEnabledElement, removeEnabledElement } from './store';\nimport { resetCornerstoneToolsState } from './store/state';\nimport {\n  annotationCompletedListener,\n  annotationRemovedListener,\n  annotationSelectionListener,\n  annotationModifiedListener,\n  segmentationDataModifiedEventListener,\n  segmentationRepresentationModifiedEventListener,\n  segmentationRepresentationRemovedEventListener,\n  segmentationModifiedListener,\n} from './eventListeners';\nimport { annotationInterpolationEventDispatcher } from './eventDispatchers';\n\nimport * as ToolGroupManager from './store/ToolGroupManager';\n\nlet csToolsInitialized = false;\n\n/**\n * Initialize the cornerstoneTools package. It will add event listeners for mouse\n * and keyboard events.\n * @param defaultConfiguration - A configuration object that will be used to\n * initialize the tool.\n */\nexport function init(defaultConfiguration = {}): void {\n  if (csToolsInitialized) {\n    return;\n  }\n\n  _addCornerstoneEventListeners();\n  _addCornerstoneToolsEventListeners();\n\n  csToolsInitialized = true;\n}\n\n/**\n * It destroys and cleanup state for cornerstone3DTools. It removes all the tools\n * that were added to the tool groups and restore states. It also removes all\n * event listeners.\n */\nexport function destroy(): void {\n  _removeCornerstoneEventListeners();\n  _removeCornerstoneToolsEventListeners();\n\n  // Important: destroy ToolGroups first, in order for cleanup to work correctly for the\n  // added tools.\n  ToolGroupManager.destroy();\n\n  // Remove all tools\n  resetCornerstoneToolsState();\n\n  // remove all annotation.\n  const annotationManager = getAnnotationManager();\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  annotationManager.restoreAnnotations({});\n  segmentationStateManager.resetState();\n  csToolsInitialized = false;\n}\n\n/**\n * Wires up event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n * @internal\n */\nfunction _addCornerstoneEventListeners(): void {\n  // Clear any listeners that may already be set\n  _removeCornerstoneEventListeners();\n\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.addEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.addEventListener(elementDisabledEvent, removeEnabledElement);\n  annotationInterpolationEventDispatcher.enable();\n}\n\n/**\n * Removes event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n */\nfunction _removeCornerstoneEventListeners(): void {\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.removeEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.removeEventListener(elementDisabledEvent, removeEnabledElement);\n  annotationInterpolationEventDispatcher.disable();\n}\n\n/**\n * It adds an event listener to the event target (the cornerstoneTools object) for\n * the annotation selected and annotation modified events.\n */\nfunction _addCornerstoneToolsEventListeners() {\n  // Clear any listeners that may already be set\n  _removeCornerstoneToolsEventListeners();\n\n  /**\n   * Annotation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_COMPLETED,\n    annotationCompletedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_REMOVED,\n    annotationRemovedListener\n  );\n\n  /**\n   * Segmentation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\n/**\n * Remove the event listener for the the annotation selected and annotation modified events.\n */\nfunction _removeCornerstoneToolsEventListeners() {\n  /**\n   * Annotation\n   */\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_COMPLETED,\n    annotationCompletedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\nexport default init;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { getAnnotation } from './annotationState';\n\nexport type BaseEventDetail = {\n  viewportId: string;\n  renderingEngineId: string;\n};\n\n/**\n * An annotation group\n */\n\nexport default class AnnotationGroup {\n  private annotationUIDs = new Set<string>();\n  private _isVisible = true;\n\n  public visibleFilter: (uid: string) => boolean;\n\n  constructor() {\n    this.visibleFilter = this.unboundVisibleFilter.bind(this);\n  }\n\n  /**\n   * Returns true if other groups are free to hide this annotation.\n   * That is, if the annotation is not a member or is hidden.\n   */\n  protected unboundVisibleFilter(uid: string): boolean {\n    return !this._isVisible || !this.annotationUIDs.has(uid);\n  }\n\n  public has(uid: string): boolean {\n    return this.annotationUIDs.has(uid);\n  }\n  /**\n   * Sets whether annotations belonging to this group are visible or not.\n   * If there are multiple groups, then the set visible false should be called\n   * before before re-enabling the other groups with setVisible true.\n   */\n  public setVisible(\n    isVisible = true,\n    baseEvent: BaseEventDetail,\n    filter?: (annotationUID: string) => boolean\n  ) {\n    if (this._isVisible === isVisible) {\n      return;\n    }\n    this._isVisible = isVisible;\n    this.annotationUIDs.forEach((uid) => {\n      const annotation = getAnnotation(uid);\n      if (!annotation) {\n        this.annotationUIDs.delete(uid);\n        return;\n      }\n      if (annotation.isVisible === isVisible) {\n        return;\n      }\n      if (!isVisible && filter?.(uid) === false) {\n        return;\n      }\n      annotation.isVisible = isVisible;\n      const eventDetail = {\n        ...baseEvent,\n        annotation,\n      };\n      triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n    });\n  }\n\n  public get isVisible() {\n    return this._isVisible;\n  }\n\n  /** Finds the nearby/next annotation in the given direction */\n  public findNearby(uid: string, direction: 1) {\n    const uids = [...this.annotationUIDs];\n    if (uids.length === 0) {\n      return null;\n    }\n    if (!uid) {\n      return uids[direction === 1 ? 0 : uids.length - 1];\n    }\n    const index = uids.indexOf(uid);\n    if (\n      index === -1 ||\n      index + direction < 0 ||\n      index + direction >= uids.length\n    ) {\n      return null;\n    }\n    return uids[index + direction];\n  }\n\n  /**\n   * Adds the annotation to the group\n   * Does NOT change the visibility status of the annotation.\n   */\n  public add(...annotationUIDs: string[]) {\n    annotationUIDs.forEach((annotationUID) =>\n      this.annotationUIDs.add(annotationUID)\n    );\n  }\n\n  /**\n   * Removes the annotation from the group.\n   * Does not affect the visibility status of the annotation.\n   */\n  public remove(...annotationUIDs: string[]) {\n    annotationUIDs.forEach((annotationUID) =>\n      this.annotationUIDs.delete(annotationUID)\n    );\n  }\n\n  /**\n   * Removes everything from the group.\n   */\n  public clear() {\n    this.annotationUIDs.clear();\n  }\n}\n","import cloneDeep from 'lodash.clonedeep';\nimport {\n  Annotation,\n  Annotations,\n  AnnotationState,\n  GroupSpecificAnnotations,\n} from '../../types/AnnotationTypes';\n\nimport { AnnotationGroupSelector, IAnnotationManager } from '../../types';\n\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElement,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport { checkAndDefineIsLockedProperty } from './annotationLocking';\nimport { checkAndDefineIsVisibleProperty } from './annotationVisibility';\n\n/**\n * This is the default annotation manager. It stores annotations by default\n * based on the FrameOfReferenceUID. However, it is possible to override the\n * getAnnotationStateKey function to store annotations based on any other\n * property of the element. When you write your custom annotation manager, you\n * can use the setAnnotationManager function to set your custom annotation.\n *\n * Note that this class is a singleton and should not be instantiated directly.\n * To get the stored annotations information you can use ToolState helpers.\n */\nclass FrameOfReferenceSpecificAnnotationManager implements IAnnotationManager {\n  private annotations: AnnotationState;\n  public readonly uid: string;\n\n  /**\n   * @param uid - The uid of the state manager. If omitted it is autogenerated.\n   */\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = utilities.uuidv4();\n    }\n    this.annotations = {};\n    this.uid = uid;\n\n    // Listen to the IMAGE_VOLUME_MODIFIED event to invalidate data.\n    eventTarget.addEventListener(\n      Enums.Events.IMAGE_VOLUME_MODIFIED,\n      this._imageVolumeModifiedHandler\n    );\n  }\n\n  /**\n   * Default annotation manager works with FrameOfReferenceUID as the key. The\n   * manager adds them under the FrameOfReferenceUID for the element being\n   * annotated.\n   *\n   * @param annotationGroupSelector - element or a string that is provided\n   * to the annotation manager to get the key.\n   * @returns - The annotation state key for the element.\n   */\n  getGroupKey = (annotationGroupSelector: AnnotationGroupSelector): string => {\n    if (typeof annotationGroupSelector === 'string') {\n      return annotationGroupSelector;\n    }\n\n    const element = annotationGroupSelector;\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      throw new Error(\n        'Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID'\n      );\n    }\n\n    return enabledElement.FrameOfReferenceUID;\n  };\n\n  /**\n   * When a volume is modified we invalidate all of the `annotations` on the\n   * volume's `FrameOfReferenceUID`. This is mainly to update statistics calculations\n   * when an annotation is drawn whilst data is still loading.\n   *\n   * @param evt - The IMAGE_VOLUME_MODIFIED rendering event.\n   */\n  _imageVolumeModifiedHandler = (\n    evt: Types.EventTypes.ImageVolumeModifiedEvent\n  ) => {\n    const eventDetail = evt.detail;\n    const { FrameOfReferenceUID } = eventDetail;\n\n    const annotations = this.annotations;\n    const frameOfReferenceSpecificAnnotations =\n      annotations[FrameOfReferenceUID];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      return;\n    }\n\n    Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      toolSpecificAnnotations.forEach((annotation) => {\n        const invalidated = annotation.invalidated;\n\n        if (invalidated !== undefined) {\n          annotation.invalidated = true;\n        }\n      });\n    });\n  };\n\n  /**\n   * Returns all the available frameOfReferences inside the state manager\n   * @returns - All the added frames of references inside the manager\n   */\n  getFramesOfReference = (): Array<string> => {\n    return Object.keys(this.annotations);\n  };\n\n  /**\n   * Returns the annotations associated with the specified frameOfReference and tool, or\n   * all annotations for the group if the tool name is not provided.\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns The annotations associated with the specified group (default FrameOfReferenceUID) and tool,\n   * or all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   * WARNING: The list returned here is internal tool data, not a copy, so do NOT modify it.\n   */\n  getAnnotations = (\n    groupKey: string,\n    toolName?: string\n  ): GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (!annotations[groupKey]) {\n      return [];\n    }\n\n    if (toolName) {\n      return annotations[groupKey][toolName]\n        ? annotations[groupKey][toolName]\n        : [];\n    }\n\n    return annotations[groupKey];\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, returns the `annotation`\n   * from the `annotations`. Each `annotation` has a unique identifier.\n   *\n   * @param annotationUID - The unique identifier of the `annotation`.\n   * @returns The retrieved `annotation`.\n   */\n  getAnnotation = (annotationUID: string): Annotation | undefined => {\n    const annotations = this.annotations;\n\n    for (const frameOfReferenceUID in annotations) {\n      const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n\n      for (const toolName in frameOfReferenceAnnotations) {\n        const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n\n        for (const annotation of toolSpecificAnnotations) {\n          if (annotationUID === annotation.annotationUID) {\n            return annotation;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * A function that returns the number of annotations for a given tool in the\n   * specific group (default FrameOfReferenceUID) IF no groupKey (FrameOfReferenceUID) is provided,\n   * it will return the number of annotations for the tool in all groups (FrameOfReferenceUIDs)\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - The name of the tool to retrieve data for.\n   *\n   * @returns The number of annotations for a given tool in the state\n   */\n  getNumberOfAnnotations = (groupKey: string, toolName?: string): number => {\n    const annotations = this.getAnnotations(groupKey, toolName);\n\n    if (!annotations.length) {\n      return 0;\n    }\n\n    if (toolName) {\n      return (annotations as Annotations).length;\n    }\n\n    let total = 0;\n\n    for (const toolName in annotations) {\n      total += annotations[toolName].length;\n    }\n\n    return total;\n  };\n\n  /**\n   * Adds an instance of `Annotation` to the `annotations`.\n   *\n   * @param annotation - The annotation to add.\n   * @param groupKey - The annotation group key to add the annotation to (in default manager it is FrameOfReferenceUID).\n   */\n  addAnnotation = (annotation: Annotation, groupKey?: string): void => {\n    const { metadata } = annotation;\n    const { FrameOfReferenceUID, toolName } = metadata;\n\n    groupKey = groupKey || FrameOfReferenceUID;\n\n    const annotations = this.annotations;\n\n    let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      annotations[groupKey] = {};\n\n      frameOfReferenceSpecificAnnotations = annotations[groupKey];\n    }\n\n    let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n\n    if (!toolSpecificAnnotations) {\n      frameOfReferenceSpecificAnnotations[toolName] = [];\n\n      toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n    }\n\n    toolSpecificAnnotations.push(annotation);\n    checkAndDefineIsLockedProperty(annotation);\n    checkAndDefineIsVisibleProperty(annotation);\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, removes the `annotation`\n   * from the `annotations`.\n   *\n   * @param annotationUID - The unique identifier of the `annotation` to remove.\n   */\n  removeAnnotation = (annotationUID: string): void => {\n    const { annotations } = this;\n\n    for (const groupKey in annotations) {\n      const groupAnnotations = annotations[groupKey];\n\n      for (const toolName in groupAnnotations) {\n        const toolAnnotations = groupAnnotations[toolName];\n\n        const index = toolAnnotations.findIndex(\n          (annotation) => annotation.annotationUID === annotationUID\n        );\n\n        if (index !== -1) {\n          toolAnnotations.splice(index, 1);\n\n          if (toolAnnotations.length === 0) {\n            delete groupAnnotations[toolName];\n          }\n        }\n      }\n\n      if (Object.keys(groupAnnotations).length === 0) {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Removes all annotations associated with the specified group (FrameOfReferenceUID) and tool, or\n   * all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   *\n   * @param groupKey - The group key to remove annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to remove annotations for.\n   */\n  removeAnnotations = (groupKey: string, toolName?: string): void => {\n    const annotations = this.annotations;\n    if (annotations[groupKey]) {\n      if (toolName) {\n        delete annotations[groupKey][toolName];\n      } else {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Returns a section of the annotations. Useful for serialization.\n   * If both groupKey (default manager is FrameOfReferenceUID) and toolName are provided, returns the corresponding Annotations instance\n   * for that groupKey (FrameOfReferenceUID) and toolName.\n   * If only groupKey is provided, returns the corresponding FrameOfReferenceSpecificAnnotations instance\n   * for that groupKey.\n   * If neither groupKey nor toolName is provided, returns the entire AnnotationState object.\n   * @param groupKey - Optional. The group key (e.g. FrameOfReferenceUID) to retrieve annotations for.\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns A section of the annotations.\n   */\n  saveAnnotations = (\n    groupKey?: string,\n    toolName?: string\n  ): AnnotationState | GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        return;\n      }\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      return cloneDeep(toolSpecificAnnotations);\n    } else if (groupKey) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      return cloneDeep(frameOfReferenceSpecificAnnotations);\n    }\n\n    return cloneDeep(annotations);\n  };\n\n  /**\n   * Restores a section of the `annotations`. Useful for loading in serialized data.\n   *\n   * - If no arguments are given, the entire `AnnotationState` instance is restored.\n   * - If the `FrameOfReferenceUID` is given, the corresponding\n   * `FrameOfReferenceSpecificAnnotations` instance is restored.\n   * - If both the `FrameOfReferenceUID` and the `toolName` are are given, the\n   * corresponding `Annotations` instance is restored.\n   *\n   * @param groupKey - A filter string for restoring only the `annotations` of a specific frame of reference.\n   * @param toolName - A filter string for restoring `annotation` for a specific tool on a specific frame of reference.\n   */\n  restoreAnnotations = (\n    state: AnnotationState | GroupSpecificAnnotations | Annotations,\n    groupKey?: string,\n    toolName?: string\n  ): void => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      // Set Annotations for FrameOfReferenceUID and toolName.\n\n      let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        annotations[groupKey] = {};\n\n        frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      }\n\n      frameOfReferenceSpecificAnnotations[toolName] = <Annotations>state;\n    } else if (groupKey) {\n      // Set FrameOfReferenceSpecificAnnotations for FrameOfReferenceUID.\n\n      annotations[groupKey] = <GroupSpecificAnnotations>state;\n    } else {\n      // Set entire annotations\n      this.annotations = <AnnotationState>cloneDeep(state);\n    }\n  };\n\n  /**\n   * return all annotations as a single array\n   */\n  getAllAnnotations = (): Annotations => {\n    return Object.values(this.annotations)\n      .map((frameOfReferenceSpecificAnnotations) =>\n        Object.values(frameOfReferenceSpecificAnnotations)\n      )\n      .flat(2);\n  };\n\n  /**\n   * A function that returns the number of all annotations in the annotation state\n   *\n   * @returns The number of all annotations in the state\n   */\n  getNumberOfAllAnnotations = (): number => {\n    let count = 0;\n    const annotations = this.annotations;\n    for (const groupKey in annotations) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      for (const toolName in frameOfReferenceSpecificAnnotations) {\n        const toolSpecificAnnotations =\n          frameOfReferenceSpecificAnnotations[toolName];\n        count += toolSpecificAnnotations.length;\n      }\n    }\n    return count;\n  };\n\n  /**\n   * Removes all annotations in the annotation state.\n   */\n  removeAllAnnotations = (): void => {\n    this.annotations = {};\n  };\n}\n\nconst defaultFrameOfReferenceSpecificAnnotationManager =\n  new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\n\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationLockChangeEventDetail } from '../../types/EventTypes';\n\n/*\n * Constants\n */\nconst globalLockedAnnotationsSet: Set<Annotation> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"Locked\" state of a given annotation instance.\n *\n * @triggers ANNOTATION_LOCK_CHANGE\n *\n * @param annotation - The annotation instance which will have\n * its locked state changed. An event will only be triggered if the locked state\n * of the given annotation instance changed.\n * @param locked - A boolean value indicating if the instance should\n * be locked (true) or not (false)\n */\nfunction setAnnotationLocked(annotation: Annotation, locked = true): void {\n  const detail = makeEventDetail();\n  if (annotation) {\n    if (locked) {\n      lock(annotation, globalLockedAnnotationsSet, detail);\n    } else {\n      unlock(annotation, globalLockedAnnotationsSet, detail);\n    }\n  }\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Clears all the locked annotation\n *\n */\nfunction unlockAllAnnotations(): void {\n  const detail = makeEventDetail();\n  clearLockedAnnotationsSet(globalLockedAnnotationsSet, detail);\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Returns an array of all the annotation that is currently locked\n * @returns An array of tool specific annotation objects.\n *\n */\nfunction getAnnotationsLocked(): Array<Annotation> {\n  return Array.from(globalLockedAnnotationsSet);\n}\n\n/**\n * Given a Annotation object, return true if it is locked.\n * @param annotation - Annotation\n * @returns A boolean value.\n */\nfunction isAnnotationLocked(annotation: Annotation): boolean {\n  return globalLockedAnnotationsSet.has(annotation);\n}\n\n/**\n * Get the number of locked annotation objects in the global set of locked annotation\n * objects.\n * @returns The number of locked annotation objects.\n *\n */\nfunction getAnnotationsLockedCount(): number {\n  return globalLockedAnnotationsSet.size;\n}\n\n/**\n * Properly initialize the isLocked on annotation, and set it as locked if\n * isLocked is true.\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsLockedProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isLocked = !!annotation.isLocked;\n    if (shouldDefineIsLockedProperty(annotation)) {\n      Object.defineProperty(annotation, 'isLocked', {\n        configurable: false,\n        enumerable: true,\n        set: setIsLocked,\n        get: getIsLocked,\n      });\n    }\n    setAnnotationLocked(annotation, isLocked);\n  }\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationLockChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    locked: [],\n  });\n}\n\nfunction lock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (!lockedAnnotationsSet.has(annotation)) {\n    lockedAnnotationsSet.add(annotation);\n    detail.added.push(annotation);\n  }\n}\n\nfunction unlock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (lockedAnnotationsSet.delete(annotation)) {\n    detail.removed.push(annotation);\n  }\n}\n\nfunction clearLockedAnnotationsSet(\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  lockedAnnotationsSet.forEach((annotation) => {\n    unlock(annotation, lockedAnnotationsSet, detail);\n  });\n}\n\nfunction publish(\n  detail: AnnotationLockChangeEventDetail,\n  lockedAnnotationsSet: Set<Annotation>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    lockedAnnotationsSet.forEach((item) => void detail.locked.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsLockedProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isLocked');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsLocked || descriptor.get !== getIsLocked)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsLocked(locked: boolean) {\n  setAnnotationLocked(this as Annotation, locked);\n}\n\nfunction getIsLocked() {\n  return isAnnotationLocked(this as Annotation);\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationLocked,\n  getAnnotationsLocked,\n  getAnnotationsLockedCount,\n  unlockAllAnnotations,\n  isAnnotationLocked,\n  checkAndDefineIsLockedProperty,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { AnnotationSelectionChangeEventDetail } from '../../types/EventTypes';\nimport { getAnnotation } from './annotationState';\n\n/*\n * Constants\n */\n\nconst selectedAnnotationUIDs: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set a given annotationUID as selected or deselected based on the provided\n * selected value.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param selected - When true, the annotation is selected. When false, the annotation is deselected.\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction setAnnotationSelected(\n  annotationUID: string,\n  selected = true,\n  preserveSelected = false\n): void {\n  if (selected) {\n    selectAnnotation(annotationUID, preserveSelected);\n  } else {\n    deselectAnnotation(annotationUID);\n  }\n}\n\n/**\n * Set a given annotation as selected.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction selectAnnotation(\n  annotationUID: string,\n  preserveSelected = false\n): void {\n  const detail = makeEventDetail();\n  if (!preserveSelected) {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n    selectedAnnotationUIDs.add(annotationUID);\n    detail.added.push(annotationUID);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Deselect one or all annotations.\n *\n * @param annotationUID - If an annotation is provided that instance will be removed from\n * the internal selection set. If none is given, ALL selections will be cleared.\n */\nfunction deselectAnnotation(annotationUID?: string): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (selectedAnnotationUIDs.delete(annotationUID)) {\n      detail.removed.push(annotationUID);\n    }\n  } else {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Return an array of ALL the selected annotationUIDs\n * @returns An array of Annotation UIDs\n */\nfunction getAnnotationsSelected(): Array<string> {\n  return Array.from(selectedAnnotationUIDs);\n}\n\n/**\n * Given a tool name, return ALL the annotationUIDs for that tool that are selected\n * @param toolName - The name of the tool you want to get the selected annotation for\n * @returns An array of annotationUIDs\n */\nfunction getAnnotationsSelectedByToolName(toolName: string): Array<string> {\n  return getAnnotationsSelected().filter((annotationUID) => {\n    const annotation = getAnnotation(annotationUID);\n    return annotation?.metadata?.toolName === toolName;\n  });\n}\n\n/**\n * Given an annotationUID, return true if it is selected, false\n * otherwise.\n * @param annotationUID - Annotation UID\n * @returns A boolean value.\n */\nfunction isAnnotationSelected(annotationUID: string): boolean {\n  return selectedAnnotationUIDs.has(annotationUID);\n}\n\n/**\n * Return the number of the selected annotation\n * @returns The size of the selected annotation set\n */\nfunction getAnnotationsSelectedCount(): number {\n  return selectedAnnotationUIDs.size;\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationSelectionChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    selection: [],\n  });\n}\n\nfunction clearSelectionSet(\n  selectionSet: Set<string>,\n  detail: AnnotationSelectionChangeEventDetail\n): void {\n  selectionSet.forEach((value) => {\n    if (selectionSet.delete(value)) {\n      detail.removed.push(value);\n    }\n  });\n}\n\nfunction publish(\n  detail: AnnotationSelectionChangeEventDetail,\n  selectionSet: Set<string>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    selectionSet.forEach((item) => void detail.selection.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n  }\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationSelected,\n  getAnnotationsSelected,\n  getAnnotationsSelectedByToolName,\n  getAnnotationsSelectedCount,\n  deselectAnnotation,\n  isAnnotationSelected,\n};\n","import {\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { defaultFrameOfReferenceSpecificAnnotationManager } from './FrameOfReferenceSpecificAnnotationManager';\nimport { Annotations, Annotation } from '../../types/AnnotationTypes';\nimport { AnnotationRemovedEventDetail } from '../../types/EventTypes';\nimport { AnnotationGroupSelector } from '../../types';\nimport {\n  triggerAnnotationAddedForElement,\n  triggerAnnotationAddedForFOR,\n} from './helpers/state';\n\n// our default annotation manager\nlet defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n\n/**\n * It returns the default annotations manager.\n * @returns the singleton default annotations manager.\n */\nfunction getAnnotationManager() {\n  return defaultManager;\n}\n\n/**\n * Set the annotation manager to be used for rendering, adding, removing, etc.\n * @param annotationManager - The annotation manager to be used\n */\nfunction setAnnotationManager(annotationManager) {\n  defaultManager = annotationManager;\n}\n\n// set back to default frameOfReferenceSpecificAnnotationManager\nfunction resetAnnotationManager() {\n  defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n}\n\n/**\n * Returns the annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getAnnotations function will return the annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n * @returns The annotations corresponding to the Frame of Reference and the toolName.\n */\nfunction getAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): Annotations {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n  return manager.getAnnotations(groupKey, toolName) as Annotations;\n}\n\nfunction getAllAnnotations(): Annotations {\n  const manager = getAnnotationManager();\n  return manager.getAllAnnotations();\n}\n\n/**\n * Removes the association between the annotation passed as parameter and its\n * parent in case it has one (eg: contour holes).\n * @param annotation - Annotation\n */\nfunction clearParentAnnotation(annotation: Annotation): void {\n  const { annotationUID: childUID, parentAnnotationUID } = annotation;\n\n  if (!parentAnnotationUID) {\n    return;\n  }\n\n  const parentAnnotation = getAnnotation(parentAnnotationUID);\n  const childUIDIndex = parentAnnotation.childAnnotationUIDs.indexOf(childUID);\n\n  parentAnnotation.childAnnotationUIDs.splice(childUIDIndex, 1);\n  annotation.parentAnnotationUID = undefined;\n}\n\n/**\n * Creates a parent/child association between annotations.\n * A annotation may have only one parent and multiple children (eg: a contour\n * may have multiple holes in it).\n * @param parentAnnotation - Parent annotation\n * @param childAnnotation - Child annotation\n */\nfunction addChildAnnotation(\n  parentAnnotation: Annotation,\n  childAnnotation: Annotation\n): void {\n  const { annotationUID: parentUID } = parentAnnotation;\n  const { annotationUID: childUID } = childAnnotation;\n\n  // Make sure it is not associated with any other tool\n  clearParentAnnotation(childAnnotation);\n\n  if (!parentAnnotation.childAnnotationUIDs) {\n    parentAnnotation.childAnnotationUIDs = [];\n  }\n\n  // Check if it is already a child\n  if (parentAnnotation.childAnnotationUIDs.includes(childUID)) {\n    return;\n  }\n\n  parentAnnotation.childAnnotationUIDs.push(childUID);\n  childAnnotation.parentAnnotationUID = parentUID;\n}\n\n/**\n * Returns the parent annotation of a given one since annotations can be\n * associated in a parent/child way (eg: polyline holes)\n * @param annotation - Annotation\n * @returns Parent annotation\n */\nfunction getParentAnnotation(annotation: Annotation) {\n  return annotation.parentAnnotationUID\n    ? getAnnotation(annotation.parentAnnotationUID)\n    : undefined;\n}\n\n/**\n * Returns all children annotation of a given one since annotations can be\n * associated in a parent/child way (eg: polyline holes)\n * @param annotation - Annotation\n * @returns Child annotations\n */\nfunction getChildAnnotations(annotation: Annotation) {\n  return (\n    annotation.childAnnotationUIDs?.map((childAnnotationUID) =>\n      getAnnotation(childAnnotationUID)\n    ) ?? []\n  );\n}\n\n/**\n * Add the annotation to the annotation manager along with the options that is\n * used to filter the annotation manager and the annotation group that\n * the annotation belongs to.\n *\n * As a result, our default implementation will add the annotation to the\n * default manager using the FrameOfReferenceUID as the group key.\n *\n * @param annotation - The annotation that is being added to the annotations manager.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n */\nfunction addAnnotation(\n  annotation: Annotation,\n  annotationGroupSelector: AnnotationGroupSelector\n): string {\n  if (!annotation.annotationUID) {\n    annotation.annotationUID = csUtils.uuidv4() as string;\n  }\n\n  const manager = getAnnotationManager();\n\n  // if the annotation manager selector is an element, trigger the\n  // annotation added event for that element.\n  if (annotationGroupSelector instanceof HTMLDivElement) {\n    const groupKey = manager.getGroupKey(annotationGroupSelector);\n    manager.addAnnotation(annotation, groupKey);\n    triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n  } else {\n    // if no element is provided, render all viewports that have the\n    // same frame of reference.\n    // Todo: we should do something else here for other types of annotation managers.\n    manager.addAnnotation(annotation);\n    triggerAnnotationAddedForFOR(annotation);\n  }\n\n  return annotation.annotationUID;\n}\n\n/**\n * Get the number of annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getNumberOfAnnotations function will return the number of annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n *\n */\nfunction getNumberOfAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): number {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  return manager.getNumberOfAnnotations(groupKey, toolName);\n}\n\n/**\n * Remove the annotation by UID of the annotation.\n * @param annotationUID - The unique identifier for the annotation.\n */\nfunction removeAnnotation(annotationUID: string): void {\n  if (!annotationUID) {\n    return;\n  }\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  // no need to continue in case there is no annotation.\n  if (!annotation) {\n    return;\n  }\n\n  // Remove all child annotations first\n  annotation.childAnnotationUIDs?.forEach((childAnnotationUID) =>\n    removeAnnotation(childAnnotationUID)\n  );\n\n  manager.removeAnnotation(annotationUID);\n\n  // trigger annotation removed\n  const eventType = Events.ANNOTATION_REMOVED;\n\n  const eventDetail: AnnotationRemovedEventDetail = {\n    annotation,\n    annotationManagerUID: manager.uid,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * Get the Annotation object by its UID\n * @param annotationUID - The unique identifier of the annotation.\n */\nfunction getAnnotation(annotationUID: string): Annotation {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  return annotation;\n}\n\n/**\n * It removes all annotations from the default annotation manager\n */\nfunction removeAllAnnotations(): void {\n  const manager = getAnnotationManager();\n  manager.removeAllAnnotations();\n}\n\n/**\n * Invalidate current and all parent annotations (eg: contour holes)\n * @param annotation - Annotation\n */\nfunction invalidateAnnotation(annotation: Annotation): void {\n  let currAnnotation = annotation;\n\n  while (currAnnotation) {\n    currAnnotation.invalidated = true;\n\n    currAnnotation = currAnnotation.parentAnnotationUID\n      ? getAnnotation(currAnnotation.parentAnnotationUID)\n      : undefined;\n  }\n}\n\nexport {\n  getAllAnnotations,\n  getAnnotations,\n  getParentAnnotation,\n  getChildAnnotations,\n  clearParentAnnotation,\n  addChildAnnotation,\n  getNumberOfAnnotations,\n  addAnnotation,\n  getAnnotation,\n  removeAnnotation,\n  removeAllAnnotations,\n  // annotation manager\n  setAnnotationManager,\n  getAnnotationManager,\n  resetAnnotationManager,\n  invalidateAnnotation,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotation } from './annotationState';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationVisibilityChangeEventDetail } from '../../types/EventTypes';\nimport {\n  isAnnotationSelected,\n  deselectAnnotation,\n} from './annotationSelection';\n\n/*\n * It stores all hidden annotation uids.\n */\nconst globalHiddenAnnotationUIDsSet: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"visible\" state of a given annotation instance.\n *\n * @event ANNOTATION_VISIBILITY_CHANGE\n *\n * @param annotationUID - The annotation uid which will have\n * its visible state changed. An event will only be triggered if the visible state\n * of the given annotation instance changed.\n * @param visible - A boolean value indicating if the instance should\n * be visible (true) or not (false)\n */\nfunction setAnnotationVisibility(annotationUID: string, visible = true): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (visible) {\n      show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    } else {\n      hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    }\n  }\n  publish(detail);\n}\n\n/**\n * Clears all the hidden annotations.\n *\n */\nfunction showAllAnnotations(): void {\n  const detail = makeEventDetail();\n  globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n    show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n  });\n  publish(detail);\n}\n\n/**\n * Given an annotation UID, return true if it is visible, false if hidden and undefined if does not exist.\n * @param annotationUID - The annotation uid to tell if is visible or not.\n * @returns A boolean value or value if does not exist.\n */\nfunction isAnnotationVisible(annotationUID: string): boolean | undefined {\n  const annotation = getAnnotation(annotationUID);\n\n  if (annotation) {\n    return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n  }\n}\n/**\n * It decorates given annotation with isVisible property.\n * It properly initializes the isVisible on annotation(the property will be create if does not exist yet)\n *\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsVisibleProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isVisible = annotation.isVisible ?? true;\n    if (shouldDefineIsVisibleProperty(annotation)) {\n      Object.defineProperty(annotation, 'isVisible', {\n        configurable: false,\n        enumerable: true,\n        set: setIsVisible,\n        get: getIsVisible,\n      });\n    }\n    setAnnotationVisibility(annotation.annotationUID, isVisible);\n  }\n}\n\n/*\n * Private Helpers\n */\nfunction makeEventDetail(): AnnotationVisibilityChangeEventDetail {\n  return Object.freeze({\n    lastVisible: [],\n    lastHidden: [],\n    hidden: [],\n  });\n}\n\nfunction show(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (annotationUIDsSet.delete(annotationUID)) {\n    detail.lastVisible.push(annotationUID);\n  }\n}\n\nfunction hide(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (!annotationUIDsSet.has(annotationUID)) {\n    annotationUIDsSet.add(annotationUID);\n    if (isAnnotationSelected(annotationUID)) {\n      deselectAnnotation(annotationUID);\n    }\n    detail.lastHidden.push(annotationUID);\n  }\n}\n\nfunction publish(detail: AnnotationVisibilityChangeEventDetail) {\n  if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n    globalHiddenAnnotationUIDsSet.forEach(\n      (item) => void detail.hidden.push(item)\n    );\n    triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsVisibleProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isVisible');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsVisible || descriptor.get !== getIsVisible)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsVisible(hidden: boolean) {\n  setAnnotationVisibility((this as Annotation).annotationUID, hidden);\n}\n\nfunction getIsVisible() {\n  return isAnnotationVisible((this as Annotation).annotationUID);\n}\n\nexport {\n  setAnnotationVisibility,\n  showAllAnnotations,\n  isAnnotationVisible,\n  checkAndDefineIsVisibleProperty,\n};\n","import {\n  StyleConfig,\n  ToolStyleConfig,\n  StyleSpecifier,\n  AnnotationStyle,\n} from '../../../types/AnnotationStyle';\n\n/**\n * This class handles the configuration of the tool style. You can use it to set\n * the style of a tool at various levels (annotation, viewport, toolGroup, global).\n *\n * The hierarchy of the configuration is as follows (each level falls back to the\n * next level if not specified):\n *\n * 1) Annotation-level styles (with annotationUID)\n *     2) Viewport-level tool styles\n *         - Per-tool: Length on the viewport with viewportId\n *         - Global: All tools on the viewport with viewportId\n *             3) ToolGroup tool styles\n *                 - Per-tool: Angle on toolGroupId in all viewports of the toolGroup\n *                 - Global: All tools in the toolGroupId for all viewports\n *                     4) Default level:\n *                         - Per-tool: Length styles\n *                         - Global: Opinionated styles by CornerstoneJS\n */\nclass ToolStyle {\n  config: StyleConfig;\n\n  constructor() {\n    const defaultConfig = {\n      color: 'rgb(255, 255, 0)',\n      colorHighlighted: 'rgb(0, 255, 0)',\n      colorSelected: 'rgb(0, 220, 0)',\n      colorLocked: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '',\n      shadow: true,\n      textBoxVisibility: true,\n      textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n      textBoxFontSize: '14px',\n      textBoxColor: 'rgb(255, 255, 0)',\n      textBoxColorHighlighted: 'rgb(0, 255, 0)',\n      textBoxColorSelected: 'rgb(0, 255, 0)',\n      textBoxColorLocked: 'rgb(255, 255, 0)',\n      textBoxBackground: '',\n      textBoxLinkLineWidth: '1',\n      textBoxLinkLineDash: '2,3',\n      textBoxShadow: true,\n    };\n\n    this._initializeConfig(defaultConfig);\n  }\n\n  /**\n   * It returns the annotation-specific tool styles for the annotation with the given UID\n   * @param annotationUID - The unique identifier of the annotation.\n   * @returns The annotation tool styles for the annotation with the given UID.\n   */\n  getAnnotationToolStyles(annotationUID: string): AnnotationStyle {\n    return this.config.annotations && this.config.annotations[annotationUID];\n  }\n\n  /**\n   * It returns the styles for a given viewport. It includes tool-specific and\n   * global styles (all tools in the viewport)\n   * @param viewportId - The id of the viewport\n   * @returns The viewport tool styles for the given viewport id.\n   */\n  getViewportToolStyles(viewportId: string): ToolStyleConfig {\n    return this.config.viewports && this.config.viewports[viewportId];\n  }\n\n  /**\n   * It returns the tool style for the given toolGroup. It includes tool-specific and\n   * global styles (all tools in the toolGroup)\n   * @param toolGroupId - The id of the toolGroup.\n   * @returns The tool styles for the tool group with the given id.\n   */\n  getToolGroupToolStyles(toolGroupId: string): ToolStyleConfig {\n    return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n  }\n\n  /**\n   * It returns the default tool styles from the config file. It includes tool-specific and\n   * global styles (all tools in all tooLGroups)\n   * @returns The default tool styles.\n   */\n  getDefaultToolStyles(): ToolStyleConfig {\n    return this.config.default;\n  }\n\n  /**\n   * It takes an annotationUID and a style object and sets the styles at\n   * the annotationLevel (highest priority in the hierarchy). The styles is an\n   * object with key value pairs.\n   * @param annotationUID - string - The unique identifier for the annotation.\n   * @param styles - ToolStyles\n   */\n  setAnnotationStyles(annotationUID: string, styles: AnnotationStyle) {\n    let annotationSpecificStyles = this.config.annotations;\n\n    if (!annotationSpecificStyles) {\n      this.config = {\n        ...this.config,\n        annotations: {},\n      };\n\n      annotationSpecificStyles = this.config.annotations;\n    }\n\n    annotationSpecificStyles[annotationUID] = styles;\n  }\n\n  /**\n   * It takes a viewportId and a ToolStyles object, and adds the ToolStyles object\n   * at the viewport level (second highest priority in the hierarchy after the annotation level).\n   * @param viewportId - The id of the viewport\n   * @param styles - style object including tool-specific and/or global styles (All tools in the viewport)\n   */\n  setViewportToolStyles(viewportId: string, styles: ToolStyleConfig) {\n    let viewportSpecificStyles = this.config.viewports;\n\n    if (!viewportSpecificStyles) {\n      this.config = {\n        ...this.config,\n        viewports: {},\n      };\n\n      viewportSpecificStyles = this.config.viewports;\n    }\n\n    viewportSpecificStyles[viewportId] = styles;\n  }\n\n  /**\n   * It takes a toolGroupId and a ToolStyles object, and it adds the ToolStyles object\n   * at the toolGroup level (third highest priority in the hierarchy after the viewport level).\n   * @param toolGroupId - The id of the toolGroup\n   * @param styles - style object including tool-specific (in all viewports of the toolGroup) and/or\n   * global styles (All tools in the toolGroup for all viewports)\n   */\n  setToolGroupToolStyles(toolGroupId: string, styles: ToolStyleConfig) {\n    let toolGroupSpecificStyles = this.config.toolGroups;\n\n    if (!toolGroupSpecificStyles) {\n      this.config = {\n        ...this.config,\n        toolGroups: {},\n      };\n\n      toolGroupSpecificStyles = this.config.toolGroups;\n    }\n\n    toolGroupSpecificStyles[toolGroupId] = styles;\n  }\n\n  /**\n   * Sets the default tool styles for the editor. It overrides the default styles for all tools.\n   * @param styles - style object including tool-specific (a tool in all toolGroups) and/or\n   * global styles (All tools in all tooLGroups)\n   */\n  setDefaultToolStyles(styles: ToolStyleConfig) {\n    this.config.default = styles;\n  }\n\n  /**\n   * It returns the value for a given style key, based on the provided specifications.\n   * It starts by looking at the annotation-specific styles, then at the viewport-specific styles,\n   * then at the toolGroup-specific styles, and finally at the default styles.\n   * @param styleKey - The key of the style.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met\n   * @returns The value for the given style key.\n   */\n  getStyleProperty(toolStyle: string, specifications: StyleSpecifier) {\n    const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n\n    return this._getToolStyle(\n      toolStyle,\n      annotationUID,\n      viewportId,\n      toolGroupId,\n      toolName\n    );\n  }\n\n  private _getToolStyle(\n    property: string,\n    annotationUID: string,\n    viewportId: string,\n    toolGroupId: string,\n    toolName: string\n  ) {\n    if (annotationUID) {\n      const annotationToolStyles = this.getAnnotationToolStyles(annotationUID);\n\n      if (annotationToolStyles) {\n        // check first in the toolSpecific styles\n        if (annotationToolStyles[property] !== undefined) {\n          return annotationToolStyles[property];\n        }\n      }\n    }\n\n    if (viewportId) {\n      const viewportToolStyles = this.getViewportToolStyles(viewportId);\n\n      if (viewportToolStyles) {\n        // check if we have the viewportId specific style\n        // check first in the toolSpecific styles\n        if (\n          viewportToolStyles[toolName] &&\n          viewportToolStyles[toolName][property] !== undefined\n        ) {\n          return viewportToolStyles[toolName][property];\n        }\n\n        // check if we have the style in the viewport specific global viewportSpecificStyles\n        if (\n          viewportToolStyles.global &&\n          viewportToolStyles.global[property] !== undefined\n        ) {\n          return viewportToolStyles.global[property];\n        }\n      }\n    }\n\n    if (toolGroupId) {\n      const toolGroupToolStyles = this.getToolGroupToolStyles(toolGroupId);\n\n      if (toolGroupToolStyles) {\n        // check first in the toolSpecific styles\n        if (\n          toolGroupToolStyles[toolName] &&\n          toolGroupToolStyles[toolName][property] !== undefined\n        ) {\n          return toolGroupToolStyles[toolName][property];\n        }\n\n        // check if we have the style in the toolGroup specific global styles\n        if (\n          toolGroupToolStyles.global &&\n          toolGroupToolStyles.global[property] !== undefined\n        ) {\n          return toolGroupToolStyles.global[property];\n        }\n      }\n    }\n\n    const globalStyles = this.getDefaultToolStyles();\n\n    if (\n      globalStyles[toolName] &&\n      globalStyles[toolName][property] !== undefined\n    ) {\n      return globalStyles[toolName][property];\n    }\n\n    if (globalStyles.global && globalStyles.global[property] !== undefined) {\n      return globalStyles.global[property];\n    }\n  }\n\n  private _initializeConfig(config) {\n    const toolStyles = {};\n    for (const name in config) {\n      toolStyles[name] = config[name];\n    }\n\n    this.config = {\n      default: {\n        global: toolStyles as AnnotationStyle,\n      },\n    };\n  }\n}\n\nconst toolStyle = new ToolStyle();\n\nexport default toolStyle;\n","import { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport { getStyleProperty } from './helpers';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\n\n/**\n * getFont - Returns a font string of the form \"{fontSize}px fontName\" used by `canvas`.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns The font string.\n */\nfunction getFont(\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  const fontSize = getStyleProperty(\n    'textBoxFontSize',\n    styleSpecifier,\n    state,\n    mode\n  );\n  const fontFamily = getStyleProperty(\n    'textBoxFontFamily',\n    styleSpecifier,\n    state,\n    mode\n  );\n\n  return `${fontSize}px ${fontFamily}`;\n}\n\nexport default getFont;\n","import { Annotation } from '../../../types';\nimport { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\n\n/**\n * Given a Annotation object, return the annotationStyle State that it\n * should be in based on its data.\n * The ordering of states is:\n *   * Highlighted\n *   * Selected\n *   * Locked\n *   * Autogenerated\n *   * Default\n * So the first one that applies will be returned.\n * For the autogenerated state, it depends on the autoGenerated flag on the\n * annotation, so once that is gone/false, the annotation will go to default.\n *\n * @param annotation - The annotation that we want to style.\n * @returns The state of the annotation whether it is Default, Highlighted, Locked, Selected, or AutoGenerated.\n */\nfunction getState(annotation?: Annotation): AnnotationStyleStates {\n  if (annotation) {\n    if (annotation.data && annotation.highlighted) {\n      return AnnotationStyleStates.Highlighted;\n    }\n    if (isAnnotationSelected(annotation.annotationUID)) {\n      return AnnotationStyleStates.Selected;\n    }\n\n    // Todo: make annotation lock api not to rely on the annotation itself\n    if (isAnnotationLocked(annotation)) {\n      return AnnotationStyleStates.Locked;\n    }\n\n    if (annotation.data && annotation.autoGenerated) {\n      return AnnotationStyleStates.AutoGenerated;\n    }\n  }\n\n  return AnnotationStyleStates.Default;\n}\n\nexport default getState;\n","import { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport toolStyle from './ToolStyle';\n\n/**\n * Build a list of hierarchal property names in ascending order of priority\n * @param property - The base property name -- e.g., 'color'\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns A list of property names\n */\nfunction getHierarchalPropertyStyles(\n  property: string,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string[] {\n  const list = [`${property}`];\n  if (state) {\n    list.push(`${list[0]}${state}`);\n  }\n  if (mode) {\n    list.push(`${list[list.length - 1]}${mode}`);\n  }\n  return list;\n}\n\n/**\n * Get the value of a style property from the ToolStyle config\n * @param property - The name of the property to get.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - The state of the tool (Default, Locked etc.)\n * @param mode - The current tool mode. (Active, Passive etc.)\n * @returns The value of the property.\n */\nfunction getStyleProperty(\n  property: string,\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  // Hierarchal property styles is a list of property names with priority in ascending\n  // order like: ['color', 'colorSelected', 'colorSelectedActive'], if in the toolStyle\n  // config, the `colorSelectedActive` property is defined, it will be used, otherwise\n  // the `colorSelected` property will be used, and if that is not defined, the `color`\n  // property will be used. This is done to ensure that the most specific property is used.\n  // Thus, we attempt resolving property names in reverse order\n  const alternatives = getHierarchalPropertyStyles(property, state, mode);\n  for (let i = alternatives.length - 1; i >= 0; --i) {\n    const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n    if (style !== undefined) {\n      return style;\n    }\n  }\n}\n\nexport { getStyleProperty };\n","import {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport { Events, ChangeTypes } from '../../../enums';\nimport { Annotation } from '../../../types/AnnotationTypes';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nimport {\n  AnnotationAddedEventDetail,\n  AnnotationModifiedEventDetail,\n  AnnotationCompletedEventDetail,\n  ContourAnnotationCompletedEventDetail,\n} from '../../../types/EventTypes';\n\n/**\n * It triggers an event for the element when an annotation is added\n * @param annotation - Annotation - The annotation that was added.\n * @param element - The element that the annotation was added to.\n */\nfunction triggerAnnotationAddedForElement(\n  annotation: Annotation,\n  element: HTMLDivElement\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewportId } = enabledElement;\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  const eventDetail: AnnotationAddedEventDetail = {\n    annotation,\n    viewportId,\n    renderingEngineId: renderingEngine.id,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * If the annotation has a FrameOfReferenceUID, it triggers the ANNOTATION_ADDED\n * event for all the viewports that has the same FrameOfReferenceUID.\n * @param annotation -  Annotation - The annotation that was added\n */\nfunction triggerAnnotationAddedForFOR(annotation: Annotation) {\n  const { toolName } = annotation.metadata;\n\n  const toolGroups = getToolGroupsWithToolName(toolName);\n  if (!toolGroups.length) {\n    return;\n  }\n\n  // Find the viewports in the toolGroups who has the same FrameOfReferenceUID\n  const viewportsToRender = [];\n  toolGroups.forEach((toolGroup) => {\n    toolGroup.viewportsInfo.forEach((viewportInfo) => {\n      const { renderingEngineId, viewportId } = viewportInfo;\n      const { FrameOfReferenceUID } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n        viewportsToRender.push(viewportInfo);\n      }\n    });\n  });\n\n  const eventType = Events.ANNOTATION_ADDED;\n  const eventDetail: AnnotationAddedEventDetail = { annotation };\n\n  if (!viewportsToRender.length) {\n    triggerEvent(eventTarget, eventType, eventDetail);\n    return;\n  }\n\n  viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n    eventDetail.viewportId = viewportId;\n    eventDetail.renderingEngineId = renderingEngineId;\n    triggerEvent(eventTarget, eventType, eventDetail);\n  });\n}\n\n/**\n * Triggers an annotation modified event.\n */\nfunction triggerAnnotationModified(\n  annotation: Annotation,\n  element: HTMLDivElement,\n  changeType = ChangeTypes.HandlesUpdated\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId, renderingEngineId } = enabledElement;\n  const eventType = Events.ANNOTATION_MODIFIED;\n  const eventDetail: AnnotationModifiedEventDetail = {\n    annotation,\n    viewportId,\n    renderingEngineId,\n    changeType,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * Triggers an annotation completed event.\n */\nfunction triggerAnnotationCompleted(annotation: Annotation): void {\n  const eventDetail: AnnotationCompletedEventDetail = {\n    annotation,\n  };\n\n  _triggerAnnotationCompleted(eventDetail);\n}\n\n/**\n * Triggers an annotation completed event for contours (same annotation completed\n * event but with more specific details).\n */\nfunction triggerContourAnnotationCompleted(\n  annotation: Annotation,\n  contourHoleProcessingEnabled = false\n): void {\n  const eventDetail: ContourAnnotationCompletedEventDetail = {\n    annotation,\n    contourHoleProcessingEnabled,\n  };\n\n  _triggerAnnotationCompleted(eventDetail);\n}\n\n/**\n * Triggers an annotation completed event for the `detail` provided\n * @param eventDetail - Event detail\n */\nfunction _triggerAnnotationCompleted(\n  eventDetail: AnnotationCompletedEventDetail\n) {\n  const eventType = Events.ANNOTATION_COMPLETED;\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\nexport {\n  triggerAnnotationAddedForElement,\n  triggerAnnotationAddedForFOR,\n  triggerAnnotationModified,\n  triggerAnnotationCompleted,\n  triggerContourAnnotationCompleted,\n};\n","import { ToolGroupSpecificRepresentation } from '../../types/SegmentationStateTypes';\nimport {\n  getDefaultSegmentationStateManager,\n  getSegmentation,\n} from './segmentationState';\nimport { triggerSegmentationRepresentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the active segmentation representation for the tool group with\n * the given toolGroupId.\n * @param toolGroupId - The Id of the tool group\n * @returns The active segmentation representation for the tool group.\n */\nfunction getActiveSegmentationRepresentation(\n  toolGroupId: string\n): ToolGroupSpecificRepresentation {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const toolGroupSegmentationRepresentations =\n    segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const activeRepresentation = toolGroupSegmentationRepresentations.find(\n    (representation) => representation.active\n  );\n\n  return activeRepresentation;\n}\n\n/**\n * Retrieves the active segmentation for a given tool group.\n * @param toolGroupId - The ID of the tool group.\n * @returns The active segmentation Id, or undefined if no active segmentation is found.\n */\nfunction getActiveSegmentation(toolGroupId: string) {\n  const activeRepresentation = getActiveSegmentationRepresentation(toolGroupId);\n\n  if (!activeRepresentation) {\n    return;\n  }\n\n  const activeSegmentation = getSegmentation(\n    activeRepresentation.segmentationId\n  );\n\n  return activeSegmentation;\n}\n\n/**\n * Set the active segmentation for the given tool group for all its viewports\n *\n * @param toolGroupId - The Id of the tool group to set the active\n * segmentation for.\n * @param segmentationRepresentationUID - The id of the segmentation representation to set as\n * active.\n */\nfunction setActiveSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  segmentationStateManager.setActiveSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  // get\n  getActiveSegmentationRepresentation,\n  getActiveSegmentation,\n  // set\n  setActiveSegmentationRepresentation,\n};\n","import * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getSegmentationRepresentations } from '../../../stateManagement/segmentation/segmentationState';\nimport { ToolGroupSpecificRepresentation } from '../../../types/SegmentationStateTypes';\nimport { getUniqueSegmentIndices } from '../../../utilities/segmentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\n\n/**\n * Set the visibility of a segmentation representation for a given tool group. It fires\n * a SEGMENTATION_REPRESENTATION_MODIFIED event. Visibility true will show all segments\n * and visibility false will hide all segments\"\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that contains the segmentation.\n * @param segmentationRepresentationUID - The id of the segmentation representation to modify its visibility.\n * @param visibility - boolean\n */\nfunction setSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  visibility: boolean\n): void {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden, segmentationId } = representation;\n\n  const indices = getUniqueSegmentIndices(segmentationId);\n\n  // if visibility is set to be true, we need to remove all the segments\n  // from the segmentsHidden set, otherwise we need to add all the segments\n  // to the segmentsHidden set\n  if (visibility) {\n    segmentsHidden.clear();\n  } else {\n    indices.forEach((index) => {\n      segmentsHidden.add(index);\n    });\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    representation.segmentationRepresentationUID\n  );\n}\n\n/**\n * Get the visibility of a segmentation data for a given tool group.\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The id of the segmentation data to get\n * @returns A boolean value that indicates whether the segmentation data is visible or\n * not on the toolGroup\n */\nfunction getSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): boolean | undefined {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden, segmentationId } = representation;\n  const indices = getUniqueSegmentIndices(segmentationId);\n\n  // Create a set that contains all segments indices\n  const indicesSet = new Set(indices);\n\n  // Remove a indices that are hidden\n  segmentsHidden.forEach((segmentIndex) => indicesSet.delete(segmentIndex));\n\n  // Check if there is at least one segment visible\n  return !!indicesSet.size;\n}\n\n/**\n * Set the visibility of the given segment indices to the given visibility. This\n * is a helper to set the visibility of multiple segments at once and reduces\n * the number of events fired.\n *\n * @param toolGroupId -  The tool group id of the segmentation representation.\n * @param segmentationRepresentationUID -  The UID of the segmentation\n * representation.\n * @param segmentIndices -  The indices of the segments to be hidden/shown.\n * @param visibility -  The visibility to set the segments to.\n *\n */\nfunction setSegmentsVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndices: number[],\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  segmentIndices.forEach((segmentIndex) => {\n    visibility\n      ? segRepresentation.segmentsHidden.delete(segmentIndex)\n      : segRepresentation.segmentsHidden.add(segmentIndex);\n  });\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * @param toolGroupId - The Id of the tool group that contains the segmentation\n * @param segmentationRepresentationUID - The id of the segmentation representation that contains the segment\n * @param segmentIndex - Index of the segment that will be updated\n * @param visibility - True to show the segment or false to hide it\n * @returns True if the segment is visible or false otherwise\n */\nfunction setSegmentVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  visibility\n    ? segRepresentation.segmentsHidden.delete(segmentIndex)\n    : segRepresentation.segmentsHidden.add(segmentIndex);\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * @param toolGroupId - The Id of the tool group that contains the segmentation.\n * @param segmentationRepresentationUID - The id of the segmentation representation to modify its visibility.\n * @param segmentIndex - Index of the segment\n * @returns True if the segment is visible or false otherwise\n */\nfunction getSegmentVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): boolean {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return false;\n  }\n\n  return !segRepresentation.segmentsHidden.has(segmentIndex);\n}\n\nexport {\n  setSegmentationVisibility,\n  getSegmentationVisibility,\n  setSegmentVisibility,\n  setSegmentsVisibility,\n  getSegmentVisibility,\n};\n","import {\n  Types,\n  Enums,\n  getWebWorkerManager,\n  eventTarget,\n  triggerEvent,\n} from '@cornerstonejs/core';\n\nimport { WorkerTypes } from '../../../enums';\nimport { pointToString } from '../../../utilities';\nimport { registerPolySegWorker } from '../polySeg/registerPolySegWorker';\nconst workerManager = getWebWorkerManager();\n\n/**\n * Surfaces info for clipping\n */\nexport type SurfacesInfo = {\n  id: string;\n  points: number[];\n  polys: number[];\n  segmentIndex: number;\n};\n\n/**\n * The result of the surface clipping\n */\nexport type SurfaceClipResult = {\n  points: number[];\n  lines: number[];\n  numberOfCells: number;\n};\n\nexport type PolyDataClipCacheType = Map<string, Map<string, SurfaceClipResult>>;\n\n/**\n * a cache from actorUID to cacheId to SurfaceClipResult\n * Map<actorUID, Map<cacheId, SurfaceClipResult>>\n * cacheId is slice specific (viewPlaneNormal, sliceIndex)\n */\nconst polyDataCache = new Map() as PolyDataClipCacheType;\nconst surfacesAABBCache = new Map();\n\nconst triggerWorkerProgress = (eventTarget, progress) => {\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n    progress,\n    type: WorkerTypes.SURFACE_CLIPPING,\n  });\n};\n\n/**\n * Clips and caches surfaces for a specific viewport.\n *\n * @param surfacesInfo - An array of surfaces information.\n * @param viewport - The volume viewport.\n * @param segmentationRepresentationUID - The UID of the segmentation representation.\n * @returns The cached polydata.\n */\nexport async function clipAndCacheSurfacesForViewport(\n  surfacesInfo: SurfacesInfo[],\n  viewport: Types.IVolumeViewport,\n  segmentationRepresentationUID: string\n) {\n  registerPolySegWorker();\n  // All planes is an array of planes pairs for each slice, so we should loop over them and\n  // add the planes to the clipping filter and cache the results for that slice\n\n  // Fix these ts ignores\n  // @ts-ignore\n  const planesInfo = viewport.getSlicesClippingPlanes?.();\n\n  if (!planesInfo) {\n    // this means it is probably the stack viewport not being ready\n    // in terms of planes which we should wait for the first render to\n    // get the planes\n    return;\n  }\n\n  // @ts-ignore\n  const currentSliceIndex = viewport.getSliceIndex();\n\n  // Reorder planesInfo based on proximity to currentSliceIndex\n  planesInfo.sort((a, b) => {\n    const diffA = Math.abs(a.sliceIndex - currentSliceIndex);\n    const diffB = Math.abs(b.sliceIndex - currentSliceIndex);\n    return diffA - diffB;\n  });\n\n  triggerWorkerProgress(eventTarget, 0);\n\n  // check which surfaces don't have a cached AABB\n  // make a list of the surfaces that don't have a cached AABB\n  await updateSurfacesAABBCache(surfacesInfo);\n\n  const surfacesAABB = new Map();\n  surfacesInfo.forEach((surface) => {\n    surfacesAABB.set(surface.id, surfacesAABBCache.get(surface.id));\n  });\n\n  const camera = viewport.getCamera();\n\n  await workerManager\n    .executeTask(\n      'polySeg',\n      'cutSurfacesIntoPlanes',\n      {\n        surfacesInfo,\n        planesInfo,\n        surfacesAABB,\n      },\n      {\n        callbacks: [\n          // progress callback\n          ({ progress }) => {\n            triggerWorkerProgress(eventTarget, progress);\n          },\n          // update cache callback\n          ({ sliceIndex, polyDataResults }) => {\n            polyDataResults.forEach((polyDataResult, surfaceId) => {\n              const actorUID = `${segmentationRepresentationUID}_${surfaceId}`;\n              const cacheId = generateCacheId(\n                viewport,\n                camera.viewPlaneNormal,\n                sliceIndex\n              );\n              updatePolyDataCache(actorUID, cacheId, polyDataResult);\n            });\n          },\n        ],\n      }\n    )\n    .catch((error) => {\n      console.error(error);\n    });\n\n  triggerWorkerProgress(eventTarget, 1);\n\n  return polyDataCache;\n}\n\n/**\n * Updates the surfaces AABB cache with the AABB information for the given surfaces.\n * If the AABB information for a surface already exists in the cache, it will not be updated.\n * @param surfacesInfo - An array of surfaces information.\n * @returns A Promise that resolves when the surfaces AABB cache has been updated.\n */\nasync function updateSurfacesAABBCache(surfacesInfo: SurfacesInfo[]) {\n  const surfacesWithoutAABB = surfacesInfo.filter(\n    (surface) => !surfacesAABBCache.has(surface.id)\n  );\n\n  if (!surfacesWithoutAABB.length) {\n    return;\n  }\n\n  const surfacesAABB = await workerManager.executeTask(\n    'polySeg',\n    'getSurfacesAABBs',\n    {\n      surfacesInfo: surfacesWithoutAABB,\n    },\n    {\n      callbacks: [\n        // progress callback\n        ({ progress }) => {\n          triggerWorkerProgress(eventTarget, progress);\n        },\n      ],\n    }\n  );\n\n  // update the surfacesAABBCache with the new surfacesAABB\n  surfacesAABB.forEach((aabb, id) => {\n    surfacesAABBCache.set(id, aabb);\n  });\n}\n\nexport function getSurfaceActorUID(\n  segmentationRepresentationUID: string,\n  surfaceId: string\n) {\n  return `${segmentationRepresentationUID}_${surfaceId}`;\n}\n\n// Helper function to generate a cache ID\nexport function generateCacheId(viewport, viewPlaneNormal, sliceIndex) {\n  return `${viewport.id}-${pointToString(viewPlaneNormal)}-${sliceIndex}`;\n}\n\n// Helper function to update PolyData cache\nexport function updatePolyDataCache(\n  actorUID: string,\n  cacheId: string,\n  polyDataResult: SurfaceClipResult\n) {\n  const { points, lines, numberOfCells } = polyDataResult;\n\n  let actorCache = polyDataCache.get(actorUID);\n  if (!actorCache) {\n    actorCache = new Map<string, SurfaceClipResult>();\n    polyDataCache.set(actorUID, actorCache);\n  }\n  actorCache.set(cacheId, { points, lines, numberOfCells });\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { labelmapDisplay } from '../../tools/displayTools/Labelmap';\nimport { contourDisplay } from '../../tools/displayTools/Contour';\n\nimport {\n  getSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n} from './segmentationState';\n\n/**\n * Remove the segmentation representation (representation) from the viewports of the toolGroup.\n * @param toolGroupId - The Id of the toolGroup to remove the segmentation from.\n * @param segmentationRepresentationUIDs - The UIDs of the segmentation representations to remove.\n * @param immediate - if True the viewport will be re-rendered immediately.\n */\nfunction removeSegmentationsFromToolGroup(\n  toolGroupId: string,\n  segmentationRepresentationUIDs?: string[] | undefined,\n  immediate?: boolean\n): void {\n  const toolGroupSegRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (\n    !toolGroupSegRepresentations ||\n    toolGroupSegRepresentations.length === 0\n  ) {\n    return;\n  }\n\n  const toolGroupSegRepresentationUIDs = toolGroupSegRepresentations.map(\n    (representation) => representation.segmentationRepresentationUID\n  );\n\n  let segRepresentationUIDsToRemove = segmentationRepresentationUIDs;\n  if (segRepresentationUIDsToRemove) {\n    // make sure the segmentationDataUIDs that are going to be removed belong\n    // to the toolGroup\n    const invalidSegRepresentationUIDs = segmentationRepresentationUIDs.filter(\n      (segRepresentationUID) =>\n        !toolGroupSegRepresentationUIDs.includes(segRepresentationUID)\n    );\n\n    if (invalidSegRepresentationUIDs.length > 0) {\n      throw new Error(\n        `The following segmentationRepresentationUIDs are not part of the toolGroup: ${JSON.stringify(\n          invalidSegRepresentationUIDs\n        )}`\n      );\n    }\n  } else {\n    // remove all segmentation representations\n    segRepresentationUIDsToRemove = toolGroupSegRepresentationUIDs;\n  }\n\n  segRepresentationUIDsToRemove.forEach((segmentationDataUID) => {\n    _removeSegmentation(toolGroupId, segmentationDataUID, immediate);\n  });\n}\n\nfunction _removeSegmentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  immediate?: boolean\n): void {\n  const segmentationRepresentation = getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  const { type } = segmentationRepresentation;\n\n  if (type === SegmentationRepresentations.Labelmap) {\n    labelmapDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else if (type === SegmentationRepresentations.Contour) {\n    contourDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else {\n    throw new Error(`The representation ${type} is not supported yet`);\n  }\n}\n\nexport default removeSegmentationsFromToolGroup;\n","import * as Enums from '../../../enums';\nimport { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport { validatePublic as validatePublicLabelmap } from '../../../tools/displayTools/Labelmap/validateLabelmap';\n\n/**\n * Validates the given segmentationInputArray to ensure it contains\n * appropriate representationProps for the representation type being used.\n *\n * @param segmentationInputArray - Array of segmentation inputs\n * @throws If the segmentationInputArray is undefined or empty\n * @throws If the segmentationInput.segmentationId is undefined\n * @throws If the segmentationInput.representation is undefined\n * @internal\n */\nfunction validateSegmentationInput(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  if (!segmentationInputArray || segmentationInputArray.length === 0) {\n    throw new Error(\n      'The segmentationInputArray is undefined or an empty array'\n    );\n  }\n\n  segmentationInputArray.forEach((segmentationInput) => {\n    if (segmentationInput.segmentationId === undefined) {\n      throw new Error(\n        'Undefined segmentationInput.segmentationId. Please provide a valid segmentationId'\n      );\n    }\n\n    if (segmentationInput.representation === undefined) {\n      throw new Error(\n        'Undefined segmentationInput.representation. Please provide a valid representation'\n      );\n    }\n\n    if (\n      segmentationInput.representation.type ===\n      Enums.SegmentationRepresentations.Labelmap\n    ) {\n      validatePublicLabelmap(segmentationInput);\n    }\n  });\n}\n\nexport default validateSegmentationInput;\n","import cloneDeep from 'lodash.clonedeep';\nimport { SegmentationPublicInput } from '../../types/SegmentationStateTypes';\nimport { validateSegmentationInput } from './helpers';\nimport { addSegmentation as addSegmentationToState } from './segmentationState';\n/**\n * Adds the segmentation to the cornerstone3D segmentation state. It should be\n * noted that segmentations are not added to any toolGroup's viewports. In order to\n * do so, you should add a \"representation\" of the segmentation to the toolGroup\n * using addSegmentationRepresentations helper. The reason for this is that there\n * can be multiple representations of the same segmentation (e.g. Labelmap and\n * Contour, etc. - Currently only Labelmap representations is supported).\n * @param segmentationInputArray - The array of segmentation input, each of which\n * defining the segmentationId and the main representation data for the segmentation.\n */\nfunction addSegmentations(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  validateSegmentationInput(segmentationInputArray);\n\n  segmentationInputArray.map((segInput) => {\n    const segmentationInput = cloneDeep(segInput);\n\n    addSegmentationToState(segmentationInput);\n  });\n}\n\nexport default addSegmentations;\n","import SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\n\nimport {\n  RepresentationConfig,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It returns the global segmentation config.\n * @returns The global segmentation config containing the representations\n * config for each representation type and renderInactiveSegmentations flag.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  return SegmentationState.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation config\n * @param segmentationConfig - SegmentationConfig\n */\nfunction setGlobalConfig(\n  segmentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setGlobalConfig(segmentationConfig);\n}\n\n/**\n * Given a representation type, return the corresponding global representation config\n * @param representationType - The type of representation to query\n * @returns A representation configuration object.\n */\nfunction getGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations\n): RepresentationConfig['LABELMAP'] {\n  const globalConfig = getGlobalConfig();\n  return globalConfig.representations[representationType];\n}\n\n/**\n * Set the global configuration for a given representation type. It fires\n * a SEGMENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param representationType - The type of representation to set config for\n * @param config - The configuration for the representation.\n */\nfunction setGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations,\n  config: RepresentationConfig['LABELMAP']\n): void {\n  const globalConfig = getGlobalConfig();\n\n  setGlobalConfig({\n    ...globalConfig,\n    representations: {\n      ...globalConfig.representations,\n      [representationType]: {\n        ...globalConfig.representations[representationType],\n        ...config,\n      },\n    },\n  });\n}\n\n/**\n * Get the toolGroup specific segmentation config\n * @param toolGroupId - The Id of the tool group\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  return SegmentationState.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Sets the tool group specific configuration for the segmentation\n * representation. This will apply to all segmentation representations.\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationConfig - This is the configuration object that you will use to set the default values for\n * the segmentation representation.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setToolGroupSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationConfig\n  );\n}\n\n/**\n * Give the segmentation representation UID, return the corresponding config\n * which is shared by all segments in the segmentation representation. This is\n * an optional level of configuration that can be set by the user, by default\n * it will fallback to the toolGroup specific config, if not set, it will fallback\n * to the global config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n * @returns - The configuration for the representation.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  return SegmentationState.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Set the segmentation representation specific configuration for the\n * segmentation representation. This will apply to all segments in the\n * segmentation representation and has higher priority than the toolGroup\n * specific config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig\n): void {\n  SegmentationState.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\n/**\n * Get the segment specific configuration for the segmentation representation.\n *\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID  - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @returns - The configuration for the segment index in the segmentation representation that is shown in the toolGroup's viewport\n */\nfunction getSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  return SegmentationState.getSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\n/**\n * Set the segment specific configuration for the segmentation representation.\n * This configuration, if specified, has higher priority than the segmentation representation specific config,\n * and the toolGroup specific config. The order of priority is: segment specific config > segmentation representation specific config > toolGroup specific config > global config\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @param config - The configuration for the representation. This is an object\n */\nfunction setSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig\n): void {\n  SegmentationState.setSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport {\n  // Global\n  getGlobalConfig,\n  setGlobalConfig,\n  getGlobalRepresentationConfig,\n  setGlobalRepresentationConfig,\n  // ToolGroup Specific\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  // segmentation representation specific config\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  // segment specific config\n  getSegmentSpecificConfig,\n  setSegmentSpecificConfig,\n};\n","import SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport { RepresentationPublicInput } from '../../../types';\nimport { getRepresentationRenderingConfig as getLabelmapRenderingConfig } from '../../../tools/displayTools/Labelmap/labelmapDisplay';\n\nexport function getRepresentationSpecificConfig(\n  representationInput: RepresentationPublicInput\n) {\n  const { type } = representationInput;\n\n  if (type === SegmentationRepresentations.Labelmap) {\n    return getLabelmapRenderingConfig();\n  } else {\n    return {};\n  }\n}\n","import { getRenderingEngine, utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  SegmentationRepresentationConfig,\n  RepresentationPublicInput,\n  ToolGroupSpecificRepresentation,\n  RepresentationPublicInputOptions,\n} from '../../types/SegmentationStateTypes';\nimport * as SegmentationConfig from './config/segmentationConfig';\nimport {\n  addSegmentationRepresentation as addSegmentationRepresentationToState,\n  getNextColorLUTIndex,\n  addColorLUT,\n} from './segmentationState';\nimport { getRepresentationSpecificConfig } from './helpers/getRepresentationSpecificConfig';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { SegmentationRepresentations } from '../../enums';\n\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId, options = {} as RepresentationPublicInputOptions } =\n    representationInput;\n\n  const segmentationRepresentationUID =\n    representationInput.options?.segmentationRepresentationUID ||\n    utilities.uuidv4();\n\n  // Todo: make segmentsHidden also an option that can get passed by\n  // the user\n  const segmentsHidden = new Set() as Set<number>;\n\n  const colorLUTIndexToUse = getColorLUTIndex(options);\n\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: representationInput.type,\n    segmentsHidden,\n    colorLUTIndex: colorLUTIndexToUse,\n    active: true,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: getRepresentationSpecificConfig(representationInput),\n    polySeg: options.polySeg,\n  };\n\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n\n    const mergedConfig = utilities.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n\n  addSegmentationRepresentationToState(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n\n  if (representationInput.type === SegmentationRepresentations.Contour) {\n    getToolGroup(toolGroupId)\n      .getViewportsInfo()\n      .forEach(({ viewportId, renderingEngineId }) => {\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        triggerAnnotationRenderForViewportIds(renderingEngine, [viewportId]);\n      });\n  }\n\n  return segmentationRepresentationUID;\n}\n\nfunction getColorLUTIndex(options = {} as RepresentationPublicInputOptions) {\n  const colorLUTOrIndexInput = options.colorLUTOrIndex;\n  let colorLUTIndexToUse;\n\n  if (typeof colorLUTOrIndexInput === 'number') {\n    colorLUTIndexToUse = colorLUTOrIndexInput;\n  } else {\n    const nextIndex = getNextColorLUTIndex();\n    const colorLUTToAdd = Array.isArray(colorLUTOrIndexInput)\n      ? colorLUTOrIndexInput\n      : CORNERSTONE_COLOR_LUT;\n    addColorLUT(colorLUTToAdd as Types.ColorLUT, nextIndex);\n    colorLUTIndexToUse = nextIndex;\n  }\n  return colorLUTIndexToUse;\n}\n\nexport { addSegmentationRepresentation };\n","import {\n  SegmentationRepresentationConfig,\n  RepresentationPublicInput,\n} from '../../types/SegmentationStateTypes';\nimport { getToolGroup } from '../../store/ToolGroupManager';\n\nimport { addSegmentationRepresentation } from './addSegmentationRepresentation';\n\n/**\n * Set the specified segmentation representations on the viewports of the specified\n * toolGroup. It accepts a second argument which is a toolGroup specific representation\n * configuration.\n *\n * @param toolGroupId - The Id of the toolGroup to add the segmentation representations to\n * @param representationInputArray - An array of segmentation representations to add to the toolGroup\n * @param toolGroupSpecificRepresentationConfig - The toolGroup specific configuration\n * for the segmentation representations\n */\nasync function addSegmentationRepresentations(\n  toolGroupId: string,\n  representationInputArray: RepresentationPublicInput[],\n  toolGroupSpecificRepresentationConfig?: SegmentationRepresentationConfig\n): Promise<string[]> {\n  // Check if there exists a toolGroup with the toolGroupId\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (!toolGroup) {\n    throw new Error(`No tool group found for toolGroupId: ${toolGroupId}`);\n  }\n\n  const promises = representationInputArray.map((representationInput) => {\n    return addSegmentationRepresentation(\n      toolGroupId,\n      representationInput,\n      toolGroupSpecificRepresentationConfig\n    );\n  });\n\n  const segmentationRepresentationUIDs = await Promise.all(promises);\n\n  return segmentationRepresentationUIDs;\n}\n\nexport default addSegmentationRepresentations;\n","import { LabelmapSegmentationData } from '../../types/LabelmapTypes';\nimport { ContourSegmentationData } from '../../types/ContourTypes';\nimport { SurfaceSegmentationData } from '../../types/SurfaceTypes';\nimport { getSegmentation } from './segmentationState';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\n\ntype SegmentationData =\n  | LabelmapSegmentationData\n  | ContourSegmentationData\n  | SurfaceSegmentationData;\n\ntype AddRepresentationData = {\n  segmentationId: string;\n  type: SegmentationRepresentations;\n  data: SegmentationData;\n};\n\n/**\n * This will add representation data to the segmentation, for rendering.\n * Each segmentation can have multiple representation data, for example\n * labelmap, contour and surface representation data. For each representation\n * the relevant data should be provided, for instance for the labelmap\n * representation the volumeId should be provided, for contour the contour data\n * which includes geometryIds of the contour sets, and for surface the surface\n * data which includes geometryId of the points and cells.\n *\n * Note: if the representation data already exists for the segmentation, it will\n * be overwritten.\n *\n * @param segmentationId - id of the segmentation\n * @param representationData - representation data to add, it can be either\n * labelmap, contour or surface representation data.\n */\nfunction addRepresentationData({\n  segmentationId,\n  type,\n  data,\n}: AddRepresentationData) {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation.representationData[type]) {\n    console.warn(\n      `Representation data of type ${type} already exists for segmentation ${segmentationId}, overwriting it.`\n    );\n\n    // update the representation data class\n  }\n\n  switch (type) {\n    case SegmentationRepresentations.Labelmap:\n      if (data) {\n        segmentation.representationData[type] =\n          data as LabelmapSegmentationData;\n      }\n      break;\n    case SegmentationRepresentations.Contour:\n      if (data) {\n        segmentation.representationData[type] = data as ContourSegmentationData;\n      }\n      break;\n    case SegmentationRepresentations.Surface:\n      if (data) {\n        segmentation.representationData[type] = data as SurfaceSegmentationData;\n      }\n      break;\n    default:\n      throw new Error(`Invalid representation type ${type}`);\n  }\n}\n\nexport default addRepresentationData;\n","import {\n  volumeLoader,\n  utilities as csUtils,\n  eventTarget,\n  cache,\n} from '@cornerstonejs/core';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport addSegmentationRepresentations from './addSegmentationRepresentations';\nimport { triggerSegmentationRender } from '../../utilities/segmentation';\nimport { getSegmentation } from './segmentationState';\nimport { LabelmapSegmentationDataStack } from '../../types/LabelmapTypes';\nimport { triggerSegmentationDataModified } from './triggerSegmentationEvents';\n\nasync function computeVolumeSegmentationFromStack({\n  imageIdReferenceMap,\n  options,\n}: {\n  imageIdReferenceMap: Map<string, string>;\n  options?: {\n    volumeId?: string;\n  };\n}): Promise<{ volumeId: string }> {\n  const segmentationImageIds = Array.from(imageIdReferenceMap.values());\n\n  const additionalDetails = {\n    imageIdReferenceMap,\n  };\n\n  const volumeId = options?.volumeId ?? csUtils.uuidv4();\n\n  await volumeLoader.createAndCacheVolumeFromImages(\n    volumeId,\n    segmentationImageIds,\n    {\n      additionalDetails,\n    }\n  );\n\n  return { volumeId };\n}\n\n/**\n * Converts a stack-based segmentation to a volume-based segmentation.\n *\n * @param params - The parameters for the conversion.\n * @param params.segmentationId - The segmentationId to convert.\n * @param [params.options] - The conversion options.\n * @param params.options.toolGroupId - The new toolGroupId to use for the segmentation.\n * @param [params.options.volumeId] - the new volumeId to use for the segmentation. If not provided, a new ID will be generated.\n * @param [params.options.newSegmentationId] - the new segmentationId to use for the segmentation. If not provided, a new ID will be generated.\n * @param [params.options.removeOriginal] - Whether or not to remove the original segmentation. Defaults to true.\n *\n * @returns A promise that resolves when the conversion is complete.\n */\nasync function convertStackToVolumeSegmentation({\n  segmentationId,\n  options,\n}: {\n  segmentationId: string;\n  options?: {\n    toolGroupId: string;\n    volumeId?: string;\n    removeOriginal?: boolean;\n  };\n}): Promise<void> {\n  const segmentation = getSegmentation(segmentationId);\n\n  const data = segmentation.representationData\n    .LABELMAP as LabelmapSegmentationDataStack;\n\n  const { volumeId } = await computeVolumeSegmentationFromStack({\n    imageIdReferenceMap: data.imageIdReferenceMap,\n    options,\n  });\n\n  await updateSegmentationState({\n    segmentationId,\n    toolGroupId: options.toolGroupId,\n    options,\n    volumeId,\n  });\n}\n\n// This function is responsible for updating the segmentation state\nasync function updateSegmentationState({\n  segmentationId,\n  toolGroupId,\n  volumeId,\n  options,\n}: {\n  segmentationId: string;\n  toolGroupId: string;\n  volumeId: string;\n  options?: {\n    removeOriginal?: boolean;\n  };\n}): Promise<void> {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (options?.removeOriginal) {\n    const data = segmentation.representationData\n      .LABELMAP as LabelmapSegmentationDataStack;\n\n    const imageIdReferenceMap = data.imageIdReferenceMap;\n\n    Array.from(imageIdReferenceMap.values()).forEach((imageId) => {\n      cache.removeImageLoadObject(imageId);\n    });\n\n    segmentation.representationData.LABELMAP = {\n      volumeId,\n    };\n  } else {\n    segmentation.representationData.LABELMAP = {\n      ...segmentation.representationData.LABELMAP,\n      volumeId,\n    };\n  }\n\n  await addSegmentationRepresentations(toolGroupId, [\n    {\n      segmentationId,\n      type: SegmentationRepresentations.Labelmap,\n    },\n  ]);\n\n  triggerSegmentationRender(toolGroupId);\n  // Note: It is crucial to trigger the data modified event. This ensures that the\n  // old texture is updated to the GPU, especially in scenarios where it may not be getting updated.\n  eventTarget.addEventListenerOnce(Events.SEGMENTATION_RENDERED, () =>\n    triggerSegmentationDataModified(segmentationId)\n  );\n}\n\nexport { convertStackToVolumeSegmentation, computeVolumeSegmentationFromStack };\n","import {\n  Types,\n  cache,\n  eventTarget,\n  getRenderingEngines,\n} from '@cornerstonejs/core';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport addSegmentationRepresentations from './addSegmentationRepresentations';\nimport {\n  triggerSegmentationRender,\n  createImageIdReferenceMap,\n} from '../../utilities/segmentation';\nimport { getSegmentation } from './segmentationState';\nimport { LabelmapSegmentationDataVolume } from '../../types/LabelmapTypes';\nimport { triggerSegmentationDataModified } from './triggerSegmentationEvents';\n\n// This function is responsible for the conversion calculations\nexport async function computeStackSegmentationFromVolume({\n  volumeId,\n}: {\n  volumeId: string;\n}): Promise<{ imageIdReferenceMap: Map<string, string> }> {\n  const segmentationVolume = cache.getVolume(volumeId) as Types.IImageVolume;\n\n  // we need to decache the segmentation Volume so that we use it\n  // for the conversion\n\n  // So here we have two scenarios that we need to handle:\n  // 1. the volume was derived from a stack and we need to decache it, this is easy\n  // since we just need purge the volume from the cache and those images will get\n  // their copy of the image back\n  // 2. It was actually a native volume and we need to decache it, this is a bit more\n  // complicated since then we need to decide on the imageIds for it to get\n  // decached to\n  const hasCachedImages = segmentationVolume.imageCacheOffsetMap.size > 0;\n  // Initialize the variable to hold the final result\n  let isAllImagesCached = false;\n\n  if (hasCachedImages) {\n    // Check if every imageId in the volume is in the _imageCache\n    isAllImagesCached = segmentationVolume.imageIds.every((imageId) =>\n      cache.getImage(imageId)\n    );\n  }\n\n  //Todo: This is a hack to get the rendering engine\n  const renderingEngine = getRenderingEngines()[0];\n  const volumeUsedInOtherViewports = renderingEngine\n    .getVolumeViewports()\n    .find((vp) => vp.hasVolumeId(volumeId));\n\n  segmentationVolume.decache(!volumeUsedInOtherViewports && isAllImagesCached);\n\n  const imageIdReferenceMap =\n    _getImageIdReferenceMapForStackSegmentation(segmentationVolume);\n\n  // check if the imageIds have been cache, if not we should actually copy\n\n  return { imageIdReferenceMap };\n}\n\n// Updated original function to call the new separate functions\nexport async function convertVolumeToStackSegmentation({\n  segmentationId,\n  options,\n}: {\n  segmentationId: string;\n  options?: {\n    toolGroupId: string;\n    newSegmentationId?: string;\n    removeOriginal?: boolean;\n  };\n}): Promise<void> {\n  const segmentation = getSegmentation(segmentationId);\n\n  const data = segmentation.representationData\n    .LABELMAP as LabelmapSegmentationDataVolume;\n  const { imageIdReferenceMap } = await computeStackSegmentationFromVolume({\n    volumeId: data.volumeId,\n  });\n\n  await updateStackSegmentationState({\n    segmentationId,\n    toolGroupId: options.toolGroupId,\n    imageIdReferenceMap,\n    options,\n  });\n}\n\n/**\n * Converts a volume segmentation to a stack segmentation.\n *\n * @param params - The parameters for the conversion.\n * @param params.segmentationId - The segmentationId to convert.\n * @param [params.options] - The conversion options.\n * @param params.options.toolGroupId - The new toolGroupId that the new segmentation will belong to.\n * @param [params.options.newSegmentationId] -  The new segmentationId to use for the segmentation. If not provided, a new ID will be generated.\n * @param [params.options.removeOriginal] - Whether or not to remove the original segmentation. Defaults to true.\n *\n * @returns A promise that resolves when the conversion is complete.\n */\nexport async function updateStackSegmentationState({\n  segmentationId,\n  toolGroupId,\n  imageIdReferenceMap,\n  options,\n}: {\n  segmentationId: string;\n  toolGroupId: string;\n  imageIdReferenceMap: Map<any, any>;\n  options?: {\n    removeOriginal?: boolean;\n  };\n}): Promise<void> {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (options?.removeOriginal) {\n    const data = segmentation.representationData\n      .LABELMAP as LabelmapSegmentationDataVolume;\n\n    if (cache.getVolume(data.volumeId)) {\n      cache.removeVolumeLoadObject(data.volumeId);\n    }\n\n    segmentation.representationData.LABELMAP = {\n      imageIdReferenceMap,\n    };\n  } else {\n    segmentation.representationData.LABELMAP = {\n      ...segmentation.representationData.LABELMAP,\n      imageIdReferenceMap,\n    };\n  }\n\n  await addSegmentationRepresentations(toolGroupId, [\n    {\n      segmentationId,\n      type: SegmentationRepresentations.Labelmap,\n    },\n  ]);\n\n  triggerSegmentationRender(toolGroupId);\n  eventTarget.addEventListenerOnce(Events.SEGMENTATION_RENDERED, () =>\n    triggerSegmentationDataModified(segmentationId)\n  );\n}\n\nfunction _getImageIdReferenceMapForStackSegmentation(\n  segmentationVolume: Types.IImageVolume\n) {\n  // There might be or might not be segmentationImageIds, if it is a volume\n  // segmentation converted from stack segmentation, there will be segmentationImageIds\n  // otherwise, if it is empty volume segmentation derived from\n  // a volume that is not a stack, there will be no segmentationImageIds\n\n  if (segmentationVolume.additionalDetails?.imageIdReferenceMap) {\n    // this means the segmentation volume is derived from a stack segmentation\n    // and we can use the imageIdReferenceMap from the additionalDetails\n    return segmentationVolume.additionalDetails.imageIdReferenceMap;\n  } else if (\n    segmentationVolume.referencedImageIds?.length &&\n    !segmentationVolume.referencedImageIds[0].startsWith('derived')\n  ) {\n    // this means the segmentation volume is derived from a stack segmentation\n    // and we can use the referencedImageIds from the segmentationVolume\n    const referencedImageIds = segmentationVolume.referencedImageIds;\n    const segmentationImageIds = segmentationVolume.imageIds;\n\n    return createImageIdReferenceMap(\n      referencedImageIds,\n      [...segmentationImageIds].reverse()\n    );\n  } else {\n    // check if the segmentation volume is derived from another volume and\n    // whether if that volume has imageIds\n    const referencedVolumeId = segmentationVolume.referencedVolumeId;\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n\n    if (!referencedVolume) {\n      throw new Error(\n        'Cannot convert volumetric segmentation without referenced volume to stack segmentation yet'\n      );\n    }\n\n    if (!referencedVolume?.imageIds?.length) {\n      throw new Error(\n        'Cannot convert volumetric segmentation without imageIds to stack segmentation yet'\n      );\n    }\n\n    if (referencedVolume.imageIds?.[0].startsWith('derived')) {\n      throw new Error(\n        `Cannot convert volume segmentation that is derived from another segmentation\n         to stack segmentation yet, include the additionalDetails.imageIdReferenceMap\n         in the volume segmentation in case you need it for the conversion`\n      );\n    }\n\n    // if the referenced volume has imageIds, and itself is not derived from\n    // another segmentation then we can use the imageIds from the referenced volume\n    const referencedImageIds = referencedVolume.imageIds;\n\n    let segmentationImageIdsToUse = segmentationVolume.imageIds;\n    if (!segmentationImageIdsToUse?.length) {\n      // If segmentation Ids don't exist it means that the segmentation is literally\n      // just a volume so we need to assume imageIds and decache it to the _imageCache\n      // so that it can be used for the conversion\n      segmentationImageIdsToUse =\n        segmentationVolume.convertToImageSlicesAndCache();\n    }\n\n    return createImageIdReferenceMap(\n      referencedImageIds,\n      [...segmentationImageIdsToUse].reverse()\n    );\n  }\n}\n","import { getActiveSegmentationRepresentation } from './activeSegmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the locked status for a segment index in a segmentation\n * @param segmentationId - The id of the segmentation that the segment\n * belongs to.\n * @param segmentIndex - The index of the segment\n * @returns A boolean value indicating whether the segment is locked or not.\n */\nfunction isSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number\n): boolean {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return segmentsLocked.has(segmentIndex);\n}\n\n/**\n * Set the locked status of a segment index in a segmentation\n * @param segmentationId - The id of the segmentation whose segment\n * index is being modified.\n * @param segmentIndex - The index of the segment to lock/unlock.\n */\nfunction setSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number,\n  locked = true\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n\n  if (locked) {\n    segmentsLocked.add(segmentIndex);\n  } else {\n    segmentsLocked.delete(segmentIndex);\n  }\n\n  triggerSegmentationModified(segmentationId);\n}\n\n/**\n * Get the locked segments for a segmentation\n * @param segmentationId - The id of the segmentation to get locked\n * segments for.\n * @returns An array of locked segment indices.\n */\nfunction getLockedSegments(segmentationId: string): number[] | [] {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return Array.from(segmentsLocked);\n}\n\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegments };\n","import { utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\n\n/**\n * addColorLUT - Adds a new color LUT to the state at the given colorLUTIndex.\n * If no colorLUT is provided, a new color LUT is generated.\n *\n * @param colorLUTIndex - the index of the colorLUT in the state\n * @param colorLUT - An array of The colorLUT to set.\n * @returns\n */\nfunction addColorLUT(colorLUT: Types.ColorLUT, colorLUTIndex: number): void {\n  if (!colorLUT) {\n    throw new Error('addColorLUT: colorLUT is required');\n  }\n\n  // Append the \"zero\" (no label) color to the front of the LUT, if necessary.\n  if (!utilities.isEqual(colorLUT[0], [0, 0, 0, 0])) {\n    console.warn(\n      'addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it'\n    );\n    colorLUT.unshift([0, 0, 0, 0]);\n  }\n\n  SegmentationState.addColorLUT(colorLUT, colorLUTIndex);\n}\n\n/**\n * It sets the toolGroup's segmentationRepresentation to use the provided\n * colorLUT at the given colorLUTIndex.\n * @param toolGroupId - the id of the toolGroup that renders the representation\n * @param segmentationRepresentationUID - the representationUID for the segmentation\n * @param colorLUTIndex - the index of the colorLUT to use\n */\nfunction setColorLUT(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  colorLUTIndex: number\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    throw new Error(\n      `setColorLUT: could not find segmentation representation with UID ${segmentationRepresentationUID}`\n    );\n  }\n\n  if (!SegmentationState.getColorLUT(colorLUTIndex)) {\n    throw new Error(\n      `setColorLUT: could not find colorLUT with index ${colorLUTIndex}`\n    );\n  }\n\n  segRepresentation.colorLUTIndex = colorLUTIndex;\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Given a tool group UID, a segmentation representationUID, and a segment index, return the\n * color for that segment. It can be used for segmentation tools that need to\n * display the color of their annotation.\n *\n * @param toolGroupId - The Id of the tool group that owns the segmentation representation.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment in the segmentation\n * @returns A color.\n */\nfunction getColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): Types.Color {\n  const segmentationRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segmentationRepresentation) {\n    throw new Error(\n      `segmentation representation with UID ${segmentationRepresentationUID} does not exist for tool group ${toolGroupId}`\n    );\n  }\n\n  const { colorLUTIndex } = segmentationRepresentation;\n\n  // get colorLUT\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  let colorValue = colorLUT[segmentIndex];\n  if (!colorValue) {\n    if (typeof segmentIndex !== 'number') {\n      throw new Error(`Can't create colour for LUT index ${segmentIndex}`);\n    }\n    colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n  }\n  return colorValue;\n}\n\nfunction setColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  color: Types.Color\n): void {\n  // Get the reference to the color in the colorLUT.\n  const colorReference = getColorForSegmentIndex(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n\n  // Modify the values by reference\n  for (let i = 0; i < color.length; i++) {\n    colorReference[i] = color[i];\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  getColorForSegmentIndex,\n  addColorLUT,\n  setColorLUT,\n  setColorForSegmentIndex,\n};\n","import { eventTarget } from '@cornerstonejs/core';\nimport { Events, SegmentationRepresentations } from '../../../enums';\nimport addRepresentationData from '../addRepresentationData';\nimport { triggerSegmentationModified } from '../triggerSegmentationEvents';\nimport { debounce } from '../../../utilities';\nimport { registerPolySegWorker } from './registerPolySegWorker';\n\nconst computedRepresentations = new Map<\n  string,\n  SegmentationRepresentations[]\n>();\n\n/**\n * Computes a representation using the provided computation function, adds the computed data,\n * subscribes to segmentation changes, and triggers segmentation modification.\n *\n * @param segmentationId - The ID of the segmentation.\n * @param representationType - The type of the segmentation representation.\n * @param computeFunction - The function that computes the representation data.\n * @param options - Additional options for computing the representation.\n * @returns - A promise that resolves with the computed representation data.\n */\nasync function computeAndAddRepresentation<T>(\n  segmentationId: string,\n  representationType: SegmentationRepresentations,\n  computeFunction: () => Promise<T>,\n  updateFunction?: () => void\n): Promise<T> {\n  // register the worker if it hasn't been registered yet\n  registerPolySegWorker();\n\n  // Compute the specific representation data\n  const data = await computeFunction();\n\n  // Add the computed data to the system\n  addRepresentationData({\n    segmentationId,\n    type: representationType,\n    data,\n  });\n\n  // Update internal structures and possibly UI components\n  if (!computedRepresentations.has(segmentationId)) {\n    computedRepresentations.set(segmentationId, []);\n  }\n\n  const representations = computedRepresentations.get(segmentationId);\n  if (!representations.includes(representationType)) {\n    representations.push(representationType);\n  }\n\n  // Subscribe to any changes in the segmentation data for real-time updates\n  subscribeToSegmentationChanges(updateFunction);\n\n  // Notify other system parts that segmentation data has been modified\n  triggerSegmentationModified(segmentationId);\n\n  return data;\n}\n\n/**\n * Subscribes to segmentation changes by adding an event listener for the SEGMENTATION_DATA_MODIFIED event.\n * If there is an existing listener, it will be unsubscribed before adding the new listener.\n */\nfunction subscribeToSegmentationChanges(updateFunction) {\n  const debouncedUpdateFunction = (event) => {\n    _debouncedSegmentationModified(event, updateFunction);\n  };\n\n  updateFunction._debouncedUpdateFunction = debouncedUpdateFunction;\n\n  eventTarget.removeEventListener(\n    Events.SEGMENTATION_DATA_MODIFIED,\n    updateFunction._debouncedUpdateFunction\n  );\n\n  eventTarget.addEventListener(\n    Events.SEGMENTATION_DATA_MODIFIED,\n    updateFunction._debouncedUpdateFunction\n  );\n}\n\nconst _debouncedSegmentationModified = debounce((event, updateFunction) => {\n  const segmentationId = event.detail.segmentationId;\n  const representations = computedRepresentations.get(segmentationId);\n  if (!representations || !representations.length) {\n    return;\n  }\n\n  updateFunction(segmentationId);\n\n  if (representations.length) {\n    triggerSegmentationModified(segmentationId);\n  }\n}, 300);\n\nexport { computeAndAddRepresentation };\n","import { Enums, Types, eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { getWebWorkerManager } from '@cornerstonejs/core';\nimport { ContourSegmentationData } from '../../../../types';\nimport { getAnnotation } from '../../../annotation/annotationState';\nimport { WorkerTypes } from '../../../../enums';\n\nconst workerManager = getWebWorkerManager();\n\nconst triggerWorkerProgress = (eventTarget, progress) => {\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n    progress,\n    type: WorkerTypes.POLYSEG_CONTOUR_TO_SURFACE,\n  });\n};\n\n/**\n * Converts a contour representation to a surface representation.\n *\n * @param contourRepresentationData - The contour segmentation data.\n * @param segmentIndex - The index of the segment to convert.\n * @returns A promise that resolves to the surface data.\n */\nexport async function convertContourToSurface(\n  contourRepresentationData: ContourSegmentationData,\n  segmentIndex: number\n): Promise<Types.SurfaceData> {\n  const { annotationUIDsMap } = contourRepresentationData;\n\n  // loop over all annotations in the segment and flatten their polylines\n  const polylines = [];\n  const numPointsArray = [];\n  const annotationUIDs = annotationUIDsMap.get(segmentIndex);\n\n  for (const annotationUID of annotationUIDs) {\n    const annotation = getAnnotation(annotationUID);\n    const { polyline } = annotation.data.contour;\n    numPointsArray.push(polyline.length);\n    polyline.forEach((polyline) => polylines.push(...polyline));\n  }\n\n  triggerWorkerProgress(eventTarget, 0);\n\n  const results = await workerManager.executeTask(\n    'polySeg',\n    'convertContourToSurface',\n    {\n      polylines,\n      numPointsArray,\n    },\n    {\n      callbacks: [\n        (progress) => {\n          triggerWorkerProgress(eventTarget, progress);\n        },\n      ],\n    }\n  );\n\n  triggerWorkerProgress(eventTarget, 1);\n\n  return results;\n}\n","import { Enums, Types, geometryLoader } from '@cornerstonejs/core';\nimport { getColorForSegmentIndex } from '../../config/segmentationColor';\nimport {\n  findSegmentationRepresentationByUID,\n  getSegmentation,\n} from '../../segmentationState';\nimport { RawSurfacesData } from './surfaceComputationStrategies';\nimport { PolySegConversionOptions } from '../../../../types';\n\n/**\n * Creates and caches surfaces from raw surface data.\n *\n * @param segmentationId - The ID of the segmentation.\n * @param rawSurfacesData - The raw surface data.\n * @param options - Additional options for creating and caching surfaces.\n * @param options.segmentIndices - An array of segment indices.\n * @param options.segmentationRepresentationUID - The UID of the segmentation representation.\n * @returns An object containing the IDs of the created surfaces.\n */\nexport async function createAndCacheSurfacesFromRaw(\n  segmentationId: string,\n  rawSurfacesData: RawSurfacesData,\n  options: PolySegConversionOptions = {}\n) {\n  // Initialize segmentationRepresentation and toolGroupId if a representation UID is provided\n  let segmentationRepresentation: any, toolGroupId: any;\n  if (options.segmentationRepresentationUID) {\n    ({ segmentationRepresentation, toolGroupId } =\n      findSegmentationRepresentationByUID(\n        options.segmentationRepresentationUID\n      ));\n  }\n\n  const segmentation = getSegmentation(segmentationId);\n\n  const geometryIds = new Map<number, string>();\n\n  // Loop through raw surfaces data and create surfaces\n  const promises = Object.keys(rawSurfacesData).map(async (index: string) => {\n    const rawSurfaceData = rawSurfacesData[index];\n    const segmentIndex = rawSurfaceData.segmentIndex;\n\n    // Get the color either from the segmentation representation or randomly generated\n    const color = segmentationRepresentation;\n    getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentation.segmentationRepresentationUID,\n      segmentIndex\n    ).slice(0, 3);\n\n    if (!color) {\n      throw new Error(\n        'No color found for segment index, unable to create surface'\n      );\n    }\n\n    const closedSurface = {\n      id: `segmentation_${segmentation.segmentationId}_surface_${segmentIndex}`,\n      color,\n      frameOfReferenceUID: 'test-frameOfReferenceUID',\n      data: {\n        points: rawSurfaceData.data.points,\n        polys: rawSurfaceData.data.polys,\n      },\n    };\n\n    const geometryId = closedSurface.id;\n    geometryIds.set(segmentIndex, geometryId);\n\n    return geometryLoader.createAndCacheGeometry(geometryId, {\n      type: Enums.GeometryType.SURFACE,\n      geometryData: closedSurface as Types.PublicSurfaceData,\n    });\n  });\n\n  await Promise.all(promises);\n\n  return {\n    geometryIds,\n  };\n}\n","import {\n  Types,\n  cache,\n  eventTarget,\n  triggerEvent,\n  Enums,\n} from '@cornerstonejs/core';\nimport { getWebWorkerManager } from '@cornerstonejs/core';\nimport {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../../../types/LabelmapTypes';\nimport { computeVolumeSegmentationFromStack } from '../../convertStackToVolumeSegmentation';\nimport { WorkerTypes } from '../../../../enums';\n\nconst workerManager = getWebWorkerManager();\n\nconst triggerWorkerProgress = (eventTarget, progress) => {\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n    progress,\n    type: WorkerTypes.POLYSEG_LABELMAP_TO_SURFACE,\n  });\n};\n\n/**\n * Converts a labelmap representation to a surface representation.\n *\n * @param labelmapRepresentationData - The labelmap segmentation data.\n * @param segmentIndex - The index of the segment to convert.\n * @param isVolume - Optional flag indicating whether the labelmap is a volume or a stack. Default is true.\n * @returns A promise that resolves to the surface data.\n */\nexport async function convertLabelmapToSurface(\n  labelmapRepresentationData: LabelmapSegmentationData,\n  segmentIndex: number,\n  isVolume = true\n): Promise<Types.SurfaceData> {\n  let volumeId;\n  if (isVolume) {\n    volumeId = (labelmapRepresentationData as LabelmapSegmentationDataVolume)\n      .volumeId;\n  } else {\n    const { imageIdReferenceMap } =\n      labelmapRepresentationData as LabelmapSegmentationDataStack;\n    ({ volumeId } = await computeVolumeSegmentationFromStack({\n      imageIdReferenceMap,\n    }));\n  }\n\n  const volume = cache.getVolume(volumeId);\n\n  const scalarData = volume.getScalarData();\n  const { dimensions, spacing, origin, direction } = volume;\n\n  triggerWorkerProgress(eventTarget, 0);\n\n  const results = await workerManager.executeTask(\n    'polySeg',\n    'convertLabelmapToSurface',\n    {\n      scalarData,\n      dimensions,\n      spacing,\n      origin,\n      direction,\n      segmentIndex,\n    },\n    {\n      callbacks: [\n        (progress) => {\n          triggerWorkerProgress(eventTarget, progress);\n        },\n      ],\n    }\n  );\n\n  triggerWorkerProgress(eventTarget, 1);\n\n  return results;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport {\n  ContourSegmentationData,\n  PolySegConversionOptions,\n} from '../../../../types';\nimport { getUniqueSegmentIndices } from '../../../../utilities/segmentation';\nimport { getSegmentation } from '../../segmentationState';\nimport { convertContourToSurface } from './convertContourToSurface';\nimport { createAndCacheSurfacesFromRaw } from './createAndCacheSurfacesFromRaw';\nimport {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from '../../../../tools/segmentation/strategies/utils/stackVolumeCheck';\nimport { convertLabelmapToSurface } from './convertLabelmapToSurface';\n\nexport type RawSurfacesData = {\n  segmentIndex: number;\n  data: Types.SurfaceData;\n}[];\n\n/**\n * Computes surface data for a given segmentation.\n * @param segmentationId - The ID of the segmentation.\n * @param options - Additional options for surface computation.\n * @returns A promise that resolves to the computed surface data.\n * @throws An error if there is no surface data available for the segmentation.\n */\nexport async function computeSurfaceData(\n  segmentationId: string,\n  options: PolySegConversionOptions = {}\n) {\n  const segmentIndices = options.segmentIndices?.length\n    ? options.segmentIndices\n    : getUniqueSegmentIndices(segmentationId);\n\n  let rawSurfacesData: RawSurfacesData;\n  const segmentation = getSegmentation(segmentationId);\n  const representationData = segmentation.representationData;\n\n  try {\n    if (representationData.CONTOUR) {\n      rawSurfacesData = await computeSurfaceFromContourSegmentation(\n        segmentationId,\n        {\n          segmentIndices,\n          ...options,\n        }\n      );\n    } else if (representationData.LABELMAP as LabelmapSegmentationData) {\n      // convert volume labelmap to surface\n      rawSurfacesData = await computeSurfaceFromLabelmapSegmentation(\n        segmentation.segmentationId,\n        {\n          segmentIndices,\n          ...options,\n        }\n      );\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n\n  if (!rawSurfacesData) {\n    throw new Error(\n      'Not enough data to convert to surface, currently only support converting volume labelmap to surface if available'\n    );\n  }\n\n  const surfacesData = await createAndCacheSurfacesFromRaw(\n    segmentationId,\n    rawSurfacesData,\n    options\n  );\n\n  return surfacesData;\n}\n\nasync function computeSurfaceFromLabelmapSegmentation(\n  segmentationId,\n  options: PolySegConversionOptions = {}\n): Promise<RawSurfacesData> {\n  // Todo: validate valid labelmap representation\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation?.representationData?.LABELMAP) {\n    console.warn('Only support surface update from labelmaps');\n    return;\n  }\n\n  const isVolume = isVolumeSegmentation(\n    segmentation.representationData.LABELMAP\n  );\n\n  const labelmapRepresentationData = segmentation.representationData.LABELMAP;\n\n  const segmentIndices =\n    options.segmentIndices || getUniqueSegmentIndices(segmentationId);\n\n  const promises = segmentIndices.map((index) => {\n    const surface = convertLabelmapToSurface(\n      labelmapRepresentationData as\n        | LabelmapSegmentationDataVolume\n        | LabelmapSegmentationDataStack,\n      index,\n      isVolume\n    );\n\n    return surface;\n  });\n\n  const surfaces = await Promise.allSettled(promises);\n  const errors = surfaces.filter((p) => p.status === 'rejected');\n\n  if (errors.length > 0) {\n    console.error(errors);\n    throw new Error('Failed to convert labelmap to surface');\n  }\n\n  const rawSurfacesData = surfaces\n    .map((surface, index) => {\n      if (surface.status === 'fulfilled') {\n        return { segmentIndex: segmentIndices[index], data: surface.value };\n      }\n    })\n    .filter(Boolean);\n\n  return rawSurfacesData;\n}\n\n/**\n * Computes the surface from contour segmentation.\n * @param segmentationId - The ID of the segmentation.\n * @param options - The options for surface computation.\n * @returns A promise that resolves to the raw surfaces data.\n */\nasync function computeSurfaceFromContourSegmentation(\n  segmentationId: string,\n  options: PolySegConversionOptions = {}\n): Promise<RawSurfacesData> {\n  const segmentation = getSegmentation(segmentationId);\n\n  const contourRepresentationData = segmentation.representationData.CONTOUR;\n\n  const segmentIndices =\n    options.segmentIndices || getUniqueSegmentIndices(segmentationId);\n\n  const promises = segmentIndices.map(async (index) => {\n    const surface = await convertContourToSurface(\n      contourRepresentationData as ContourSegmentationData,\n      index\n    );\n\n    return { segmentIndex: index, data: surface };\n  });\n\n  const surfaces = await Promise.all(promises);\n\n  return surfaces;\n}\n\nexport {\n  computeSurfaceFromContourSegmentation,\n  computeSurfaceFromLabelmapSegmentation,\n};\n","import { SegmentationRepresentations } from '../../../../enums';\nimport { PolySegConversionOptions } from '../../../../types';\nimport { computeAndAddRepresentation } from '../computeAndAddRepresentation';\nimport { computeSurfaceData } from './surfaceComputationStrategies';\nimport { updateSurfaceData } from './updateSurfaceData';\n\n/**\n * Computes and adds a surface representation for a given segmentation.\n * @param segmentationId - The ID of the segmentation.\n * @param options - Additional options for computing the surface representation.\n * @param options.segmentIndices - The indices of the segments to compute the surface for.\n * @param options.segmentationRepresentationUID - The UID of the segmentation representation to compute the surface for.\n *\n * @returns A promise that resolves when the surface representation is computed and added.\n */\nexport function computeAndAddSurfaceRepresentation(\n  segmentationId: string,\n  options: PolySegConversionOptions = {}\n) {\n  return computeAndAddRepresentation(\n    segmentationId,\n    SegmentationRepresentations.Surface,\n    () => computeSurfaceData(segmentationId, options),\n    () => updateSurfaceData(segmentationId)\n  );\n}\n","import { Types, cache } from '@cornerstonejs/core';\nimport { getUniqueSegmentIndices } from '../../../../utilities/segmentation';\nimport {\n  getSegmentation,\n  getSegmentationRepresentations,\n  getToolGroupIdsWithSegmentation,\n} from '../../segmentationState';\nimport { triggerSegmentationModified } from '../../triggerSegmentationEvents';\nimport { ToolGroupSpecificRepresentations } from '../../../../types/SegmentationStateTypes';\nimport { SegmentationRepresentations } from '../../../../enums';\nimport { computeSurfaceFromLabelmapSegmentation } from './surfaceComputationStrategies';\nimport { createAndCacheSurfacesFromRaw } from './createAndCacheSurfacesFromRaw';\n\nexport async function updateSurfaceData(segmentationId) {\n  const surfacesObj = await computeSurfaceFromLabelmapSegmentation(\n    segmentationId\n  );\n\n  if (!surfacesObj) {\n    return;\n  }\n\n  const segmentation = getSegmentation(segmentationId);\n  const indices = getUniqueSegmentIndices(segmentationId);\n\n  if (!indices.length) {\n    // means all segments were removed so we need to empty out\n    // the geometry data\n    const geometryIds = segmentation.representationData.SURFACE.geometryIds;\n    geometryIds.forEach((geometryId) => {\n      const geometry = cache.getGeometry(geometryId);\n      const surface = geometry.data as Types.ISurface;\n      surface.setPoints([]);\n      surface.setPolys([]);\n    });\n\n    triggerSegmentationModified(segmentationId);\n\n    return;\n  }\n\n  const promises = surfacesObj.map(({ data, segmentIndex }) => {\n    const geometryId = `segmentation_${segmentationId}_surface_${segmentIndex}`;\n\n    const geometry = cache.getGeometry(geometryId);\n\n    if (!geometry) {\n      // means it is a new segment getting added while we were\n      // listening to the segmentation data modified event\n      const toolGroupIds = getToolGroupIdsWithSegmentation(segmentationId);\n\n      return toolGroupIds.map((toolGroupId) => {\n        const segmentationRepresentations = getSegmentationRepresentations(\n          toolGroupId\n        ) as ToolGroupSpecificRepresentations;\n\n        return segmentationRepresentations.map((segmentationRepresentation) => {\n          if (\n            segmentationRepresentation.type !==\n            SegmentationRepresentations.Surface\n          ) {\n            return;\n          }\n          segmentation.representationData.SURFACE.geometryIds.set(\n            segmentIndex,\n            geometryId\n          );\n\n          return createAndCacheSurfacesFromRaw(\n            segmentationId,\n            [{ segmentIndex, data }],\n            {\n              segmentationRepresentationUID:\n                segmentationRepresentation.segmentationRepresentationUID,\n            }\n          );\n        });\n      });\n    } else if (indices.includes(segmentIndex)) {\n      // if the geometry already exists and the segmentIndex is\n      // still present, update the geometry data\n      const surface = geometry.data as Types.ISurface;\n      surface.setPoints(data.points);\n      surface.setPolys(data.polys);\n    } else {\n      const surface = geometry.data as Types.ISurface;\n      surface.setPoints([]);\n      surface.setPolys([]);\n    }\n  });\n\n  await Promise.all(promises);\n\n  triggerSegmentationModified(segmentationId);\n}\n","import { vec3 } from 'gl-matrix';\nimport {\n  Types,\n  cache,\n  utilities,\n  getWebWorkerManager,\n  volumeLoader,\n  imageLoader,\n  metaData,\n  Enums,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport {\n  Annotation,\n  ContourAnnotation,\n  ContourSegmentationData,\n  PolySegConversionOptions,\n} from '../../../../types';\nimport { getAnnotation } from '../../..';\nimport { WorkerTypes } from '../../../../enums';\n\nconst workerManager = getWebWorkerManager();\n\nconst triggerWorkerProgress = (eventTarget, progress) => {\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n    progress,\n    type: WorkerTypes.POLYSEG_CONTOUR_TO_LABELMAP,\n  });\n};\n\nexport async function convertContourToVolumeLabelmap(\n  contourRepresentationData: ContourSegmentationData,\n  options: PolySegConversionOptions = {}\n) {\n  const { viewport } = options;\n\n  const imageIds = utilities.getViewportImageIds(viewport);\n\n  if (!imageIds) {\n    throw new Error(\n      'No imageIds found, labelmap computation from contour requires viewports with imageIds'\n    );\n  }\n\n  const segmentationVolumeId = utilities.uuidv4();\n\n  const volumeProps = utilities.generateVolumePropsFromImageIds(\n    imageIds,\n    segmentationVolumeId\n  );\n\n  const { metadata, dimensions, origin, direction, spacing, scalarData } =\n    volumeProps;\n\n  const segmentationVolume = await volumeLoader.createLocalSegmentationVolume(\n    {\n      dimensions,\n      origin,\n      direction,\n      spacing,\n      metadata,\n      imageIds: imageIds.map((imageId) => `generated://${imageId}`),\n      referencedImageIds: imageIds,\n    },\n    segmentationVolumeId\n  );\n\n  const { segmentIndices, annotationUIDsInSegmentMap } =\n    _getAnnotationMapFromSegmentation(contourRepresentationData, options);\n\n  triggerWorkerProgress(eventTarget, 0);\n\n  const newScalarData = await workerManager.executeTask(\n    'polySeg',\n    'convertContourToVolumeLabelmap',\n    {\n      segmentIndices,\n      dimensions,\n      scalarData,\n      origin,\n      direction,\n      spacing,\n      annotationUIDsInSegmentMap,\n    },\n    {\n      callbacks: [\n        (progress) => {\n          triggerWorkerProgress(eventTarget, progress);\n        },\n      ],\n    }\n  );\n\n  triggerWorkerProgress(eventTarget, 1);\n\n  segmentationVolume.imageData\n    .getPointData()\n    .getScalars()\n    .setData(newScalarData);\n  segmentationVolume.imageData.modified();\n\n  // update the scalarData in the volume as well\n  segmentationVolume.modified();\n\n  return {\n    volumeId: segmentationVolume.volumeId,\n  };\n}\n\nexport async function convertContourToStackLabelmap(\n  contourRepresentationData: ContourSegmentationData,\n  options: PolySegConversionOptions = {}\n) {\n  if (!options.viewport) {\n    throw new Error(\n      'No viewport provided, labelmap computation from contour requires viewports'\n    );\n  }\n\n  const viewport = options.viewport as Types.IStackViewport;\n\n  const imageIds = viewport.getImageIds();\n\n  if (!imageIds) {\n    throw new Error(\n      'No imageIds found, labelmap computation from contour requires viewports with imageIds'\n    );\n  }\n\n  // check if the imageIds are already cached\n  imageIds.forEach((imageId) => {\n    if (!cache.getImageLoadObject(imageId)) {\n      throw new Error(\n        'ImageIds must be cached before converting contour to labelmap'\n      );\n    }\n  });\n\n  // create\n  const { imageIds: segmentationImageIds } =\n    await imageLoader.createAndCacheDerivedSegmentationImages(imageIds);\n\n  const { segmentIndices, annotationUIDsInSegmentMap } =\n    _getAnnotationMapFromSegmentation(contourRepresentationData, options);\n\n  // information for the referenced to the segmentation image\n  // Define constant to hold segmentation information\n  const segmentationsInfo = new Map();\n\n  // Loop through each segmentation image ID\n  segmentationImageIds.forEach((segImageId, index) => {\n    // Fetch the image from cache\n    const segImage = cache.getImage(segImageId);\n\n    // Fetch metadata for the image\n    const imagePlaneModule = metaData.get(\n      Enums.MetadataModules.IMAGE_PLANE,\n      segImageId\n    );\n\n    // Extract properties from image metadata\n    let {\n      columnCosines,\n      rowCosines,\n      rowPixelSpacing,\n      columnPixelSpacing,\n      imagePositionPatient,\n    } = imagePlaneModule;\n\n    // Set defaults if necessary\n    columnCosines = columnCosines ?? [0, 1, 0];\n    rowCosines = rowCosines ?? [1, 0, 0];\n    rowPixelSpacing = rowPixelSpacing ?? 1;\n    columnPixelSpacing = columnPixelSpacing ?? 1;\n    imagePositionPatient = imagePositionPatient ?? [0, 0, 0];\n\n    // Create vector from row and column cosines\n    const rowCosineVec = vec3.fromValues(\n      rowCosines[0],\n      rowCosines[1],\n      rowCosines[2]\n    );\n    const colCosineVec = vec3.fromValues(\n      columnCosines[0],\n      columnCosines[1],\n      columnCosines[2]\n    );\n\n    // Calculate scan axis normal\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n\n    // Define direction and spacing\n    const direction = [...rowCosineVec, ...colCosineVec, ...scanAxisNormal];\n    const spacing = [rowPixelSpacing, columnPixelSpacing, 1];\n\n    // Set origin\n    const origin = imagePositionPatient;\n\n    // Store segmentation information\n    segmentationsInfo.set(imageIds[index], {\n      direction,\n      spacing,\n      origin,\n      scalarData: segImage.getPixelData(),\n      imageId: segImageId,\n      dimensions: [segImage.width, segImage.height, 1],\n    });\n  });\n\n  triggerWorkerProgress(eventTarget, 0);\n\n  const newSegmentationsScalarData = await workerManager.executeTask(\n    'polySeg',\n    'convertContourToStackLabelmap',\n    {\n      segmentationsInfo,\n      annotationUIDsInSegmentMap,\n      segmentIndices,\n    },\n    {\n      callbacks: [\n        (progress) => {\n          triggerWorkerProgress(eventTarget, progress);\n        },\n      ],\n    }\n  );\n\n  triggerWorkerProgress(eventTarget, 1);\n\n  const imageIdReferenceMap = new Map();\n  newSegmentationsScalarData.forEach(({ scalarData }, referencedImageId) => {\n    const segmentationInfo = segmentationsInfo.get(referencedImageId);\n    const { imageId: segImageId } = segmentationInfo;\n\n    const segImage = cache.getImage(segImageId);\n    segImage.getPixelData().set(scalarData);\n    segImage.imageFrame?.pixelData?.set(scalarData);\n\n    imageIdReferenceMap.set(referencedImageId, segImageId);\n  });\n\n  return {\n    imageIdReferenceMap,\n  };\n}\n\nfunction _getAnnotationMapFromSegmentation(\n  contourRepresentationData: ContourSegmentationData,\n  options: PolySegConversionOptions = {}\n) {\n  const annotationMap = contourRepresentationData.annotationUIDsMap;\n\n  const segmentIndices = options.segmentIndices?.length\n    ? options.segmentIndices\n    : Array.from(annotationMap.keys());\n\n  const annotationUIDsInSegmentMap = new Map<number, any>();\n  segmentIndices.forEach((index) => {\n    const annotationUIDsInSegment = annotationMap.get(index);\n\n    // Todo: there is a bug right now where the annotationUIDsInSegment has both\n    // children and parent annotations, so we need to filter out the parent\n    // annotations only\n\n    let uids = Array.from(annotationUIDsInSegment);\n\n    uids = uids.filter(\n      (uid) => !(getAnnotation(uid) as Annotation).parentAnnotationUID\n    );\n\n    const annotations = uids.map((uid) => {\n      const annotation = getAnnotation(uid) as ContourAnnotation;\n      const hasChildAnnotations = annotation.childAnnotationUIDs?.length;\n\n      return {\n        polyline: annotation.data.contour.polyline,\n        referencedImageId: annotation.metadata.referencedImageId,\n        holesPolyline:\n          hasChildAnnotations &&\n          annotation.childAnnotationUIDs.map((childUID) => {\n            const childAnnotation = getAnnotation(\n              childUID\n            ) as ContourAnnotation;\n            return childAnnotation.data.contour.polyline;\n          }),\n      };\n    });\n\n    annotationUIDsInSegmentMap.set(index, annotations);\n  });\n\n  return { segmentIndices, annotationUIDsInSegmentMap };\n}\n","import {\n  Enums,\n  Types,\n  cache,\n  eventTarget,\n  getWebWorkerManager,\n  triggerEvent,\n} from '@cornerstonejs/core';\nimport { SurfaceSegmentationData } from '../../../../types/SurfaceTypes';\nimport { WorkerTypes } from '../../../../enums';\n\nconst workerManager = getWebWorkerManager();\n\nconst triggerWorkerProgress = (eventTarget, progress) => {\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\n    progress,\n    type: WorkerTypes.POLYSEG_SURFACE_TO_LABELMAP,\n  });\n};\n\nexport async function convertSurfaceToVolumeLabelmap(\n  surfaceRepresentationData: SurfaceSegmentationData,\n  segmentationVolume: Types.IImageVolume\n) {\n  const { geometryIds } = surfaceRepresentationData;\n  if (!geometryIds?.size) {\n    throw new Error('No geometry IDs found for surface representation');\n  }\n\n  const segmentsInfo = new Map() as Map<\n    number,\n    {\n      points: number[];\n      polys: number[];\n    }\n  >;\n\n  geometryIds.forEach((geometryId, segmentIndex) => {\n    const geometry = cache.getGeometry(geometryId);\n    const geometryData = geometry.data as Types.ISurface;\n    const points = geometryData.getPoints();\n    const polys = geometryData.getPolys();\n\n    segmentsInfo.set(segmentIndex, {\n      points,\n      polys,\n    });\n  });\n\n  const { dimensions, direction, origin, spacing } = segmentationVolume;\n\n  triggerWorkerProgress(eventTarget, 0);\n\n  const newScalarData = await workerManager.executeTask(\n    'polySeg',\n    'convertSurfacesToVolumeLabelmap',\n    {\n      segmentsInfo,\n      dimensions,\n      spacing,\n      direction,\n      origin,\n    },\n    {\n      callbacks: [\n        (progress) => {\n          triggerWorkerProgress(eventTarget, progress);\n        },\n      ],\n    }\n  );\n\n  triggerWorkerProgress(eventTarget, 1);\n\n  segmentationVolume.imageData\n    .getPointData()\n    .getScalars()\n    .setData(newScalarData);\n  segmentationVolume.imageData.modified();\n\n  // update the scalarData in the volume as well\n  segmentationVolume.modified();\n\n  return {\n    volumeId: segmentationVolume.volumeId,\n  };\n}\n\nexport async function convertSurfaceToStackLabelmap() {\n  // TODO\n}\n","import { VolumeViewport, volumeLoader, utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { getUniqueSegmentIndices } from '../../../../utilities/segmentation';\nimport { getSegmentation } from '../../segmentationState';\nimport {\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../../../types/LabelmapTypes';\nimport {\n  convertContourToStackLabelmap,\n  convertContourToVolumeLabelmap,\n} from './convertContourToLabelmap';\nimport { convertSurfaceToVolumeLabelmap } from './convertSurfaceToLabelmap';\nimport { computeStackSegmentationFromVolume } from '../../convertVolumeToStackSegmentation';\nimport { PolySegConversionOptions } from '../../../../types';\n\nexport type RawLabelmapData =\n  | LabelmapSegmentationDataVolume\n  | LabelmapSegmentationDataStack;\n\nexport async function computeLabelmapData(\n  segmentationId: string,\n  options: PolySegConversionOptions = {}\n) {\n  const segmentIndices = options.segmentIndices?.length\n    ? options.segmentIndices\n    : getUniqueSegmentIndices(segmentationId);\n\n  let rawLabelmapData: RawLabelmapData;\n  const segmentation = getSegmentation(segmentationId);\n  const representationData = segmentation.representationData;\n\n  try {\n    if (representationData.CONTOUR) {\n      rawLabelmapData = await computeLabelmapFromContourSegmentation(\n        segmentationId,\n        {\n          segmentIndices,\n          ...options,\n        }\n      );\n    } else if (representationData.SURFACE) {\n      rawLabelmapData = await computeLabelmapFromSurfaceSegmentation(\n        segmentation.segmentationId,\n        {\n          segmentIndices,\n          ...options,\n        }\n      );\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n\n  if (!rawLabelmapData) {\n    throw new Error(\n      'Not enough data to convert to surface, currently only support converting volume labelmap to surface if available'\n    );\n  }\n\n  return rawLabelmapData;\n}\n\nasync function computeLabelmapFromContourSegmentation(\n  segmentationId,\n  options: PolySegConversionOptions = {}\n): Promise<LabelmapSegmentationDataVolume | LabelmapSegmentationDataStack> {\n  const isVolume = options.viewport instanceof VolumeViewport ?? true;\n\n  if (isVolume && !options.viewport) {\n    // Todo: we don't have support for volume viewport without providing the\n    // viewport, since we need to get the referenced volumeId from the viewport\n    // but we can alternatively provide the volumeId directly, or even better\n    // the target metadata for the volume (spacing, origin, dimensions, etc.)\n    // and then we can create the volume from that\n    throw new Error(\n      'Cannot compute labelmap from contour segmentation without providing the viewport'\n    );\n  }\n\n  const segmentIndices = options.segmentIndices?.length\n    ? options.segmentIndices\n    : getUniqueSegmentIndices(segmentationId);\n\n  const segmentation = getSegmentation(segmentationId);\n  const representationData = segmentation.representationData.CONTOUR;\n\n  const convertFunction = isVolume\n    ? convertContourToVolumeLabelmap\n    : convertContourToStackLabelmap;\n\n  const result = await convertFunction(representationData, {\n    segmentIndices,\n    segmentationRepresentationUID: options.segmentationRepresentationUID,\n    viewport: options.viewport,\n  });\n\n  return result;\n}\n\nasync function computeLabelmapFromSurfaceSegmentation(\n  segmentationId,\n  options: PolySegConversionOptions = {}\n): Promise<LabelmapSegmentationDataVolume | LabelmapSegmentationDataStack> {\n  const isVolume = options.viewport instanceof VolumeViewport ?? true;\n\n  const segmentIndices = options.segmentIndices?.length\n    ? options.segmentIndices\n    : getUniqueSegmentIndices(segmentationId);\n\n  const segmentation = getSegmentation(segmentationId);\n\n  const segmentsGeometryIds = new Map() as Map<number, string>;\n  const representationData = segmentation.representationData.SURFACE;\n  representationData.geometryIds.forEach((geometryId, segmentIndex) => {\n    if (segmentIndices.includes(segmentIndex)) {\n      segmentsGeometryIds.set(segmentIndex, geometryId);\n    }\n  });\n\n  if (isVolume && !options.viewport) {\n    // Todo: we don't have support for volume viewport without providing the\n    // viewport, since we need to get the referenced volumeId from the viewport\n    // but we can alternatively provide the volumeId directly, or even better\n    // the target metadata for the volume (spacing, origin, dimensions, etc.)\n    // and then we can create the volume from that\n    throw new Error(\n      'Cannot compute labelmap from surface segmentation without providing the viewport'\n    );\n  }\n\n  let segmentationVolume;\n  if (isVolume) {\n    const defaultActor = options.viewport.getDefaultActor();\n    const { uid: volumeId } = defaultActor;\n    segmentationVolume =\n      await volumeLoader.createAndCacheDerivedSegmentationVolume(volumeId);\n  } else {\n    // for stack we basically need to create a volume from the stack\n    // imageIds and then create a segmentation volume from that and finally\n    // convert the surface to a labelmap and later on convert the labelmap\n    // to a stack labelmap\n    const imageIds = (options.viewport as Types.IStackViewport).getImageIds();\n    const volumeId = 'generatedSegmentationVolumeId';\n    const volumeProps = utilities.generateVolumePropsFromImageIds(\n      imageIds,\n      volumeId\n    );\n\n    // we don't need the imageIds for the viewport (e.g., CT), but rather\n    // want to use the imageIds as a reference\n    delete volumeProps.imageIds;\n\n    segmentationVolume = await volumeLoader.createLocalSegmentationVolume(\n      {\n        ...volumeProps,\n        scalarData: volumeProps.scalarData as Types.PixelDataTypedArray,\n        referencedImageIds: imageIds,\n      },\n      volumeId\n    );\n  }\n\n  const result = await convertSurfaceToVolumeLabelmap(\n    { geometryIds: segmentsGeometryIds },\n    segmentationVolume\n  );\n\n  if (isVolume) {\n    return result;\n  }\n\n  // we need to convert the volume labelmap to a stack labelmap\n  const stackData = (await computeStackSegmentationFromVolume({\n    volumeId: segmentationVolume.volumeId,\n  })) as LabelmapSegmentationDataStack;\n\n  return stackData;\n}\n\nexport { computeLabelmapFromContourSegmentation };\n","import { SegmentationRepresentations } from '../../../../enums';\nimport { computeAndAddRepresentation } from '../computeAndAddRepresentation';\nimport { computeLabelmapData } from './labelmapComputationStrategies';\nimport { PolySegConversionOptions } from '../../../../types';\n\n/**\n * Computes and adds the labelmap representation for a given segmentation.\n *\n * @param segmentationId - The ID of the segmentation.\n * @param options - Optional parameters for computing the labelmap representation.\n * @param options.segmentIndices - An array of segment indices to include in the labelmap representation.\n * @param options.segmentationRepresentationUID - The UID of the segmentation representation.\n * @returns A promise that resolves when the labelmap representation is computed and added.\n */\nexport function computeAndAddLabelmapRepresentation(\n  segmentationId: string,\n  options: PolySegConversionOptions = {}\n) {\n  return computeAndAddRepresentation(\n    segmentationId,\n    SegmentationRepresentations.Labelmap,\n    () => computeLabelmapData(segmentationId, options),\n    () => undefined\n  );\n}\n","import { PolyDataClipCacheType } from '../../../helpers/clipAndCacheSurfacesForViewport';\nimport { RawContourData } from '../contourComputationStrategies';\n\n/**\n * Extracts contour data from the given polyDataCache.\n * @param polyDataCache - The polyData cache containing intersection information.\n * @param segmentIndexMap - Optional map for mapping surface IDs to segment indices.\n * @returns A map of segment indices to an array of contour results.\n */\nexport function extractContourData(\n  polyDataCache: PolyDataClipCacheType,\n  segmentIndexMap?: Map<string, number>\n) {\n  const rawResults = new Map() as RawContourData;\n\n  for (const [cacheId, intersectionInfo] of polyDataCache) {\n    // Todo; fix this\n    const surfaceId = cacheId.split('_')[1];\n\n    for (const [_, result] of intersectionInfo) {\n      if (!result) {\n        continue;\n      }\n      const segmentIndex = Number(surfaceId) || segmentIndexMap?.get(surfaceId);\n\n      if (!segmentIndex) {\n        continue;\n      }\n\n      if (!rawResults.has(segmentIndex)) {\n        rawResults.set(segmentIndex, []);\n      }\n\n      rawResults.get(segmentIndex).push(result);\n    }\n  }\n  return rawResults;\n}\n","import { PlanarFreehandContourSegmentationTool } from '../../../../../tools';\nimport { addAnnotation } from '../../../../annotation/annotationState';\nimport { RawContourData } from '../contourComputationStrategies';\nimport { utilities, type Types } from '@cornerstonejs/core';\n\n/**\n * Creates and adds contour segmentations from a clipped surface.\n *\n * @param rawContourData - The raw contour data.\n * @param viewport - The viewport.\n * @param segmentationId - The segmentation ID.\n */\nexport function createAndAddContourSegmentationsFromClippedSurfaces(\n  rawContourData: RawContourData,\n  viewport: Types.IViewport,\n  segmentationId: string\n) {\n  const annotationUIDsMap = new Map<number, Set<string>>();\n\n  for (const [segmentIndex, contoursData] of rawContourData) {\n    for (const contourData of contoursData) {\n      const { points } = contourData;\n\n      const { lineSegments, linesNumberOfPoints } =\n        _extractLineSegments(contourData);\n\n      // There may be a few lines as the surface might not be closed and could have holes in it.\n      // Currently, we simply render the generated contour as empty fill to indicate\n      // the presence of holes. However, filling the proper area with\n      //  fillAlpha requires further work.\n      for (let i = 0; i < lineSegments.length; i++) {\n        const line = lineSegments[i];\n        const polyline = [];\n\n        for (let j = 0; j < linesNumberOfPoints[i]; j++) {\n          const pointIndex = line[j];\n          polyline.push([\n            points[3 * pointIndex],\n            points[3 * pointIndex + 1],\n            points[3 * pointIndex + 2],\n          ]);\n        }\n\n        if (polyline.length < 3) {\n          continue;\n        }\n\n        const contourSegmentationAnnotation = {\n          annotationUID: utilities.uuidv4(),\n          data: {\n            contour: {\n              closed: true,\n              polyline,\n            },\n            segmentation: {\n              segmentationId,\n              segmentIndex,\n            },\n            handles: {},\n          },\n          handles: {},\n          highlighted: false,\n          autoGenerated: false,\n          invalidated: false,\n          isLocked: false,\n          isVisible: true,\n          metadata: {\n            toolName: PlanarFreehandContourSegmentationTool.toolName,\n            ...viewport.getViewReference(),\n          },\n        };\n\n        addAnnotation(contourSegmentationAnnotation, viewport.element);\n\n        const currentSet = annotationUIDsMap.get(segmentIndex) || new Set();\n        currentSet.add(contourSegmentationAnnotation.annotationUID);\n        annotationUIDsMap.set(segmentIndex, currentSet);\n      }\n    }\n  }\n\n  return annotationUIDsMap;\n}\n\nconst _extractLineSegments = (contourData) => {\n  const { numberOfCells, lines } = contourData;\n\n  const lineSegments = [];\n  const linesNumberOfPoints = [];\n\n  for (let i = 0; i < lines.length; ) {\n    const pointsInLine = lines[i];\n    linesNumberOfPoints.push(pointsInLine);\n    lineSegments.push(lines.slice(i + 1, i + pointsInLine + 1));\n    i += pointsInLine + 1;\n\n    if (lineSegments.length === numberOfCells) {\n      break;\n    }\n  }\n\n  return { lineSegments, linesNumberOfPoints };\n};\n","import { cache } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { getUniqueSegmentIndices } from '../../../../utilities/segmentation';\nimport {\n  getSegmentation,\n  setSegmentationRepresentationSpecificConfig,\n} from '../../segmentationState';\nimport { PolySegConversionOptions } from '../../../../types';\nimport { computeSurfaceFromLabelmapSegmentation } from '../Surface/surfaceComputationStrategies';\nimport {\n  SurfaceClipResult,\n  clipAndCacheSurfacesForViewport,\n} from '../../helpers/clipAndCacheSurfacesForViewport';\nimport { extractContourData } from './utils/extractContourData';\nimport { createAndAddContourSegmentationsFromClippedSurfaces } from './utils/createAndAddContourSegmentationsFromClippedSurfaces';\nimport { getToolGroupForViewport } from '../../../../store/ToolGroupManager';\n\n// the map between segment index and the intersection points and lines\nexport type RawContourData = Map<number, SurfaceClipResult[]>;\n\n/**\n * Computes contour data for a given segmentation.\n * @param segmentationId - The ID of the segmentation.\n * @param options - Optional parameters for the computation.\n * @returns An object containing the annotation UIDs map.\n * @throws Error if there is not enough data to convert to contour.\n */\nexport async function computeContourData(\n  segmentationId: string,\n  options: PolySegConversionOptions = {}\n) {\n  const segmentIndices = options.segmentIndices?.length\n    ? options.segmentIndices\n    : getUniqueSegmentIndices(segmentationId);\n\n  let rawContourData: RawContourData;\n  const segmentation = getSegmentation(segmentationId);\n  const representationData = segmentation.representationData;\n\n  try {\n    if (representationData.SURFACE) {\n      rawContourData = await computeContourFromSurfaceSegmentation(\n        segmentationId,\n        {\n          segmentIndices,\n          ...options,\n        }\n      );\n    } else if (representationData.LABELMAP) {\n      rawContourData = await computeContourFromLabelmapSegmentation(\n        segmentationId,\n        {\n          segmentIndices,\n          ...options,\n        }\n      );\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n\n  if (!rawContourData) {\n    throw new Error(\n      'Not enough data to convert to contour, currently only support converting volume labelmap to contour if available'\n    );\n  }\n\n  const { viewport, segmentationRepresentationUID } = options;\n\n  // create the new annotations and add them to the segmentation state representation\n  // data for the contour representation\n  const annotationUIDsMap = createAndAddContourSegmentationsFromClippedSurfaces(\n    rawContourData,\n    viewport,\n    segmentationId\n  );\n\n  // make the segmentation configuration fillAlpha 0 since\n  // we don't have proper hole support right now\n  // Todo: add hole support\n  const toolGroupId = getToolGroupForViewport(viewport.id)?.id;\n\n  setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    {\n      CONTOUR: {\n        fillAlpha: 0,\n      },\n    }\n  );\n\n  return {\n    annotationUIDsMap,\n  };\n}\n\n/**\n * Computes the contour from a labelmap segmentation.\n * @param segmentationId - The ID of the segmentation.\n * @param options - The options for the contour computation.\n * @returns The raw contour data.\n */\nasync function computeContourFromLabelmapSegmentation(\n  segmentationId,\n  options: PolySegConversionOptions = {}\n) {\n  if (!options.viewport) {\n    throw new Error('Viewport is required to compute contour from labelmap');\n  }\n\n  const results = await computeSurfaceFromLabelmapSegmentation(\n    segmentationId,\n    options\n  );\n\n  if (!results?.length) {\n    console.error('Failed to convert labelmap to surface or labelmap is empty');\n    return;\n  }\n\n  const { viewport, segmentationRepresentationUID } = options;\n\n  const pointsAndPolys = results.map((surface) => {\n    return {\n      id: surface.segmentIndex.toString(),\n      points: surface.data.points,\n      polys: surface.data.polys,\n      segmentIndex: surface.segmentIndex,\n    };\n  });\n\n  const polyDataCache = await clipAndCacheSurfacesForViewport(\n    pointsAndPolys,\n    viewport as Types.IVolumeViewport,\n    segmentationRepresentationUID\n  );\n\n  const rawResults = extractContourData(polyDataCache);\n\n  return rawResults;\n}\n\n/**\n * Computes the contour from a surface segmentation.\n * @param segmentationId - The ID of the segmentation.\n * @param options - The options for the contour computation.\n * @returns A promise that resolves to the raw contour data.\n * @throws An error if the viewport is not provided.\n */\nasync function computeContourFromSurfaceSegmentation(\n  segmentationId,\n  options: PolySegConversionOptions = {}\n): Promise<RawContourData> {\n  if (!options.viewport) {\n    throw new Error('Viewport is required to compute contour from surface');\n  }\n  const { viewport, segmentationRepresentationUID } = options;\n\n  const segmentIndices = options.segmentIndices?.length\n    ? options.segmentIndices\n    : getUniqueSegmentIndices(segmentationId);\n\n  const segmentIndexToSurfaceId = new Map() as Map<number, string>;\n  const surfaceIdToSegmentIndex = new Map() as Map<string, number>;\n\n  const segmentation = getSegmentation(segmentationId);\n  const representationData = segmentation.representationData.SURFACE;\n\n  const surfacesInfo = [];\n  representationData.geometryIds.forEach((geometryId, segmentIndex) => {\n    if (segmentIndices.includes(segmentIndex)) {\n      segmentIndexToSurfaceId.set(segmentIndex, geometryId);\n      const surface = cache.getGeometry(geometryId)?.data as Types.ISurface;\n      if (surface) {\n        surfacesInfo.push({\n          id: geometryId,\n          points: surface.getPoints(),\n          polys: surface.getPolys(),\n        });\n      }\n    }\n  });\n\n  segmentIndexToSurfaceId.forEach((surfaceId, segmentIndex) => {\n    surfaceIdToSegmentIndex.set(surfaceId, segmentIndex);\n  });\n\n  const polyDataCache = await clipAndCacheSurfacesForViewport(\n    surfacesInfo,\n    viewport as Types.IVolumeViewport,\n    segmentationRepresentationUID\n  );\n\n  const rawResults = extractContourData(polyDataCache, surfaceIdToSegmentIndex);\n\n  return rawResults;\n}\n\nexport { computeContourFromLabelmapSegmentation };\n","import { SegmentationRepresentations } from '../../../../enums';\nimport { PolySegConversionOptions } from '../../../../types';\nimport { computeAndAddRepresentation } from '../computeAndAddRepresentation';\nimport { computeContourData } from './contourComputationStrategies';\n/**\n * Computes and adds the contour representation for a given segmentation.\n *\n * @param segmentationId - The ID of the segmentation.\n * @param options - Optional parameters for computing the labelmap representation.\n * @param options.segmentIndices - An array of segment indices to include in the labelmap representation.\n * @param options.segmentationRepresentationUID - The UID of the segmentation representation.\n * @returns A promise that resolves when the labelmap representation is computed and added.\n */\nexport function computeAndAddContourRepresentation(\n  segmentationId: string,\n  options: PolySegConversionOptions = {}\n) {\n  return computeAndAddRepresentation(\n    segmentationId,\n    SegmentationRepresentations.Contour,\n    () => computeContourData(segmentationId, options),\n    () => undefined\n  );\n}\n","import { SegmentationRepresentations } from '../../../enums';\nimport { validateLabelmap } from '../../../tools/displayTools/Labelmap';\nimport { SegmentationRepresentationData } from '../../../types';\nimport {\n  findSegmentationRepresentationByUID,\n  getSegmentation,\n} from '../segmentationState';\n\n// Map of conversion paths between source and target representations\n// You should read it as \"source\" -> \"targets\"\nconst conversionPaths = new Map<\n  SegmentationRepresentations,\n  Set<SegmentationRepresentations>\n>([\n  [\n    SegmentationRepresentations.Labelmap,\n    new Set([\n      SegmentationRepresentations.Surface,\n      SegmentationRepresentations.Contour,\n    ]),\n  ],\n  [\n    SegmentationRepresentations.Contour,\n    new Set([\n      SegmentationRepresentations.Labelmap,\n      SegmentationRepresentations.Surface,\n    ]),\n  ],\n  [\n    SegmentationRepresentations.Surface,\n    new Set([SegmentationRepresentations.Labelmap]),\n  ],\n]);\n\n/**\n * Determines whether the requested representation can be computed, based on\n * the existing representation types and available conversion paths.\n * This is used in the labelmapDisplay and surfaceDisplay logic if the\n * requested representation is not available whether we can use the existing\n * representation to compute the requested representation. You can checkout the polySeg\n * examples to see how this is used polyDataActorManipulationTools and others\n *\n * @param segmentationRepresentationUID - The UID of the desired segmentation representation.\n * @returns true if the requested representation can be computed, otherwise false.\n */\nfunction canComputeRequestedRepresentation(\n  segmentationRepresentationUID: string\n): boolean {\n  const representationInfo = findSegmentationRepresentationByUID(\n    segmentationRepresentationUID\n  );\n\n  if (!representationInfo?.segmentationRepresentation) {\n    return false;\n  }\n\n  const { segmentationRepresentation } = representationInfo;\n  const { type: representationType, polySeg } = segmentationRepresentation;\n\n  if (!polySeg || !polySeg.enabled) {\n    return false;\n  }\n\n  const { representationData } = getSegmentation(\n    segmentationRepresentation.segmentationId\n  );\n\n  const existingRepresentationTypes =\n    getExistingRepresentationTypes(representationData);\n\n  return existingRepresentationTypes.some((existingRepresentationType) =>\n    canConvertFromTo(existingRepresentationType, representationType)\n  );\n}\n\n/**\n * Retrieves the existing representation types for the given representationData\n * by verifying the validity of each representation type.\n *\n * @param representationData - The representation data\n * @returns supportedTypes - An array of valid representation types\n */\nfunction getExistingRepresentationTypes(\n  representationData: SegmentationRepresentationData\n): string[] {\n  const supportedTypes: string[] = [];\n\n  Object.keys(representationData).forEach((representationType) => {\n    const representationTypeData = representationData[representationType];\n\n    let validateFn;\n    switch (representationType) {\n      case SegmentationRepresentations.Labelmap:\n        validateFn = validateLabelmap;\n        break;\n      // Todo: add validation for other representation types\n    }\n\n    if (validateFn) {\n      try {\n        validateFn(representationTypeData);\n        supportedTypes.push(representationType);\n      } catch (error) {\n        console.warn(\n          `Validation failed for labelmap of type ${representationType}`\n        );\n      }\n    } else {\n      supportedTypes.push(representationType);\n    }\n  });\n\n  return supportedTypes;\n}\n\nasync function canConvertFromTo(fromRepresentationType, toRepresentationType) {\n  return (\n    conversionPaths.get(fromRepresentationType)?.has(toRepresentationType) ||\n    false\n  );\n}\n\nexport { canComputeRequestedRepresentation };\n","import { getWebWorkerManager } from '@cornerstonejs/core';\n\nlet registered = false;\n\nexport function registerPolySegWorker() {\n  if (registered) {\n    return;\n  }\n\n  registered = true;\n\n  const workerFn = () => {\n    // @ts-ignore\n    return new Worker(\n      // @ts-ignore\n      new URL('../../../workers/polySegConverters', import.meta.url),\n      {\n        name: 'polySeg',\n      }\n    );\n  };\n\n  const workerManager = getWebWorkerManager();\n\n  const options = {\n    maxWorkerInstances: 1, // Todo, make this configurable\n    autoTerminateOnIdle: {\n      enabled: true,\n      idleTimeThreshold: 2000,\n    },\n  };\n\n  workerManager.registerWorker('polySeg', workerFn, options);\n}\n","import { invalidateBrushCursor } from '../../utilities/segmentation/';\nimport {\n  getSegmentation,\n  getToolGroupIdsWithSegmentation,\n} from './segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Set the active segment index for a segmentation Id. It fires a global state\n * modified event. Also it invalidates the brush cursor for all toolGroups that\n * has the segmentationId as active segment (since the brush cursor color\n * should change as well)\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param segmentationId - The id of the segmentation that the segment belongs to.\n * @param segmentIndex - The index of the segment to be activated.\n */\nfunction setActiveSegmentIndex(\n  segmentationId: string,\n  segmentIndex: number\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (typeof segmentIndex === 'string') {\n    console.warn('segmentIndex is a string, converting to number');\n    segmentIndex = Number(segmentIndex);\n  }\n\n  if (segmentation?.activeSegmentIndex !== segmentIndex) {\n    segmentation.activeSegmentIndex = segmentIndex;\n\n    triggerSegmentationModified(segmentationId);\n  }\n\n  // get all toolGroups that has the segmentationId as active\n  // segment and call invalidateBrushCursor on them\n  const toolGroups = getToolGroupIdsWithSegmentation(segmentationId);\n  toolGroups.forEach((toolGroupId) => {\n    invalidateBrushCursor(toolGroupId);\n  });\n}\n\n/**\n * Get the active segment index for a segmentation in the global state\n * @param segmentationId - The id of the segmentation to get the active segment index from.\n * @returns The active segment index for the given segmentation.\n */\nfunction getActiveSegmentIndex(segmentationId: string): number | undefined {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation) {\n    return segmentation.activeSegmentIndex;\n  }\n}\n\nexport { getActiveSegmentIndex, setActiveSegmentIndex };\n","import cloneDeep from 'lodash.clonedeep';\nimport type { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\n\nimport { SegmentationRepresentations } from '../../enums';\nimport getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport getDefaultSurfaceConfig from '../../tools/displayTools/Surface/surfaceConfig';\nimport type {\n  RepresentationConfig,\n  Segmentation,\n  SegmentationRepresentationConfig,\n  SegmentationState,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\n\n// Initialize the default configuration\n// Note: when we get other representations, we should set their default representations too.\nconst defaultLabelmapConfig = getDefaultLabelmapConfig();\nconst defaultContourConfig = getDefaultContourConfig();\nconst defaultSurfaceConfig = getDefaultSurfaceConfig();\n\nconst newGlobalConfig: SegmentationRepresentationConfig = {\n  renderInactiveSegmentations: true,\n  representations: {\n    [SegmentationRepresentations.Labelmap]: defaultLabelmapConfig,\n    [SegmentationRepresentations.Contour]: defaultContourConfig,\n    [SegmentationRepresentations.Surface]: defaultSurfaceConfig,\n  },\n};\n\n/* A default initial state for the segmentation manager. */\nconst initialDefaultState: SegmentationState = {\n  colorLUT: [],\n  segmentations: [],\n  globalConfig: newGlobalConfig,\n  toolGroups: {},\n};\n\n/**\n * The SegmentationStateManager Class is responsible for managing the state of the\n * segmentations. It stores the segmentations and toolGroup specific representations\n * of the segmentation. It also stores a global config and a toolGroup specific\n * config. Note that this is a singleton state manager.\n */\nexport default class SegmentationStateManager {\n  private state: SegmentationState;\n  public readonly uid: string;\n\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = csUtils.uuidv4();\n    }\n    this.state = cloneDeep(initialDefaultState);\n    this.uid = uid;\n  }\n\n  /**\n   * It returns a copy of the current state of the segmentation\n   * @returns A deep copy of the state.\n   */\n  getState(): SegmentationState {\n    return this.state;\n  }\n\n  /**\n   * It returns an array of toolGroupIds currently in the segmentation state.\n   * @returns An array of strings.\n   */\n  getToolGroups(): string[] {\n    return Object.keys(this.state.toolGroups);\n  }\n\n  /**\n   * It returns the colorLUT at the specified index.\n   * @param lutIndex - The index of the color LUT to retrieve.\n   * @returns A ColorLUT object.\n   */\n  getColorLUT(lutIndex: number): Types.ColorLUT | undefined {\n    return this.state.colorLUT[lutIndex];\n  }\n\n  getNextColorLUTIndex(): number {\n    return this.state.colorLUT.length;\n  }\n\n  /**\n   * Reset the state to the default state\n   */\n  resetState(): void {\n    this.state = cloneDeep(initialDefaultState);\n  }\n\n  /**\n   * Given a segmentation Id, return the segmentation state\n   * @param segmentationId - The id of the segmentation to get the data for.\n   * @returns - The segmentation data\n   */\n  getSegmentation(segmentationId: string): Segmentation | undefined {\n    return this.state.segmentations.find(\n      (segmentation) => segmentation.segmentationId === segmentationId\n    );\n  }\n\n  /**\n   * It adds a segmentation to the segmentations array.\n   * @param segmentation - Segmentation\n   */\n  addSegmentation(segmentation: Segmentation): void {\n    // Check if the segmentation already exists with the segmentationId\n    if (this.getSegmentation(segmentation.segmentationId)) {\n      throw new Error(\n        `Segmentation with id ${segmentation.segmentationId} already exists`\n      );\n    }\n\n    this.state.segmentations.push(segmentation);\n  }\n\n  /**\n   * Get the segmentation representations for a tool group\n   * @param toolGroupId - string\n   * @returns A list of segmentation representations.\n   */\n  getSegmentationRepresentations(\n    toolGroupId: string\n  ): ToolGroupSpecificRepresentations | undefined {\n    const toolGroupSegRepresentationsWithConfig =\n      this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupSegRepresentationsWithConfig) {\n      return;\n    }\n\n    return toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n  }\n\n  /**\n   * Returns an array of all segmentation representations for all tool groups.\n   * @returns An array of ToolGroupSpecificRepresentations.\n   */\n  getAllSegmentationRepresentations(): Record<\n    string,\n    ToolGroupSpecificRepresentation[]\n  > {\n    const toolGroupSegReps: Record<string, ToolGroupSpecificRepresentation[]> =\n      {};\n    Object.entries(this.state.toolGroups).forEach(\n      ([toolGroupId, toolGroupSegRepresentationsWithConfig]) => {\n        toolGroupSegReps[toolGroupId] =\n          toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n      }\n    );\n    return toolGroupSegReps;\n  }\n\n  /**\n   * Add a new segmentation representation to the toolGroup's segmentation representations.\n   * @param toolGroupId - The Id of the tool group .\n   * @param segmentationRepresentation - The segmentation representation to add.\n   */\n  addSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    // Initialize the default toolGroup state if not created yet\n    if (!this.state.toolGroups[toolGroupId]) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {} as SegmentationRepresentationConfig,\n      };\n    }\n\n    // local toolGroupSpecificSegmentationState\n    this.state.toolGroups[toolGroupId].segmentationRepresentations.push(\n      segmentationRepresentation\n    );\n\n    this._handleActiveSegmentation(toolGroupId, segmentationRepresentation);\n  }\n\n  /**\n   * Get the global config containing both representation config\n   * and render inactive segmentations config\n   * @returns The global config object.\n   */\n  getGlobalConfig(): SegmentationRepresentationConfig {\n    return this.state.globalConfig;\n  }\n\n  /**\n   * It sets the global segmentation config including both representation config\n   * and render inactive segmentations config\n   * @param config - The global configuration for the segmentations.\n   */\n  setGlobalConfig(config: SegmentationRepresentationConfig): void {\n    this.state.globalConfig = config;\n  }\n\n  /**\n   * Given a toolGroupId and a segmentationRepresentationUID, return the segmentation\n   * representation for that tool group.\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - string\n   * @returns The segmentation representation.\n   */\n  getSegmentationRepresentationByUID(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): ToolGroupSpecificRepresentation | undefined {\n    const toolGroupSegRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    const segmentationData = toolGroupSegRepresentations?.find(\n      (representation) =>\n        representation.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    return segmentationData;\n  }\n\n  /**\n   * It removes the segmentation from the segmentation state.\n   * @param segmentationId - The id of the segmentation to remove.\n   */\n  removeSegmentation(segmentationId: string): void {\n    this.state.segmentations = this.state.segmentations.filter(\n      (segmentation) => segmentation.segmentationId !== segmentationId\n    );\n  }\n\n  /**\n   * Remove a segmentation representation from the toolGroup\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - the uid of the segmentation representation to remove\n   * @param immediate - If true, the viewport will be updated immediately.\n   */\n  removeSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      !toolGroupSegmentationRepresentations.length\n    ) {\n      throw new Error(\n        `No viewport specific segmentation state found for viewport ${toolGroupId}`\n      );\n    }\n\n    const state =\n      toolGroupSegmentationRepresentations as ToolGroupSpecificRepresentations;\n    const index = state.findIndex(\n      (segData) =>\n        segData.segmentationRepresentationUID === segmentationRepresentationUID\n    );\n\n    if (index === -1) {\n      console.warn(\n        `No viewport specific segmentation state data found for viewport ${toolGroupId} and segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    const removedSegmentationRepresentation =\n      toolGroupSegmentationRepresentations[index];\n\n    toolGroupSegmentationRepresentations.splice(index, 1);\n\n    this._handleActiveSegmentation(\n      toolGroupId,\n      removedSegmentationRepresentation\n    );\n  }\n\n  /**\n   * Set the active segmentation data for a tool group\n   * @param toolGroupId - The Id of the tool group that owns the\n   * segmentation data.\n   * @param segmentationRepresentationUID - string\n   */\n  setActiveSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (!toolGroupSegmentations || !toolGroupSegmentations.length) {\n      throw new Error(\n        `No segmentation data found for toolGroupId: ${toolGroupId}`\n      );\n    }\n\n    const segmentationData = toolGroupSegmentations.find(\n      (segmentationData) =>\n        segmentationData.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    if (!segmentationData) {\n      throw new Error(\n        `No segmentation data found for segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    segmentationData.active = true;\n    this._handleActiveSegmentation(toolGroupId, segmentationData);\n  }\n\n  /**\n   * Given a tool group Id it returns the tool group specific representation config\n   *\n   * @param toolGroupId - The Id of the tool group\n   * @returns A SegmentationConfig object.\n   */\n  getToolGroupSpecificConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig | undefined {\n    const toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      return;\n    }\n\n    return toolGroupStateWithConfig.config;\n  }\n\n  getSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentationRepresentationSpecificConfig;\n  }\n\n  setSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: RepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentationRepresentationSpecificConfig =\n      config;\n  }\n\n  getSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    segmentIndex: number\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentSpecificConfig[segmentIndex];\n  }\n\n  setSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: SegmentSpecificRepresentationConfig,\n    options?: {\n      clear: false;\n    }\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    if (!segmentationRepresentation.segmentSpecificConfig || options?.clear) {\n      segmentationRepresentation.segmentSpecificConfig = {};\n    }\n\n    Object.keys(config).forEach((key) => {\n      segmentationRepresentation.segmentSpecificConfig[key] = config[key];\n    });\n  }\n\n  /**\n   * Set the segmentation representations config for a given tool group. It will create a new\n   * tool group specific config if one does not exist.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation\n   * belongs to.\n   * @param config - SegmentationConfig\n   */\n  setSegmentationRepresentationConfig(\n    toolGroupId: string,\n    config: SegmentationRepresentationConfig\n  ): void {\n    let toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {\n          renderInactiveSegmentations: true,\n          representations: {},\n        },\n      };\n\n      toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n    }\n\n    toolGroupStateWithConfig.config = {\n      ...toolGroupStateWithConfig.config,\n      ...config,\n    };\n  }\n\n  /**\n   * It adds a color LUT to the state.\n   * @param colorLUT - ColorLUT\n   * @param lutIndex - The index of the color LUT table to add.\n   */\n  addColorLUT(colorLUT: Types.ColorLUT, lutIndex: number): void {\n    if (this.state.colorLUT[lutIndex]) {\n      console.warn('Color LUT table already exists, overwriting');\n    }\n\n    this.state.colorLUT[lutIndex] = cloneDeep(colorLUT);\n  }\n\n  /**\n   * Removes a color LUT to the state.\n   * @param colorLUTIndex - The index of the color LUT table to remove.\n   */\n  removeColorLUT(colorLUTIndex: number): void {\n    delete this.state.colorLUT[colorLUTIndex];\n  }\n\n  /**\n   * It handles the active segmentation representation based on the active status of the\n   * segmentation representation that was added or removed.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation representation belongs to.\n   * @param recentlyAddedOrRemovedSegmentationRepresentation - ToolGroupSpecificSegmentationData\n   */\n  _handleActiveSegmentation(\n    toolGroupId: string,\n    recentlyAddedOrRemovedSegmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    const segmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    // 1. If there is no segmentation representations, return early\n    if (segmentationRepresentations.length === 0) {\n      return;\n    }\n\n    // 2. If there is only one segmentation representation, make that one active\n    if (segmentationRepresentations.length === 1) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 3. If removed Segmentation representation was active, make the first one active\n    const activeSegmentationRepresentations =\n      segmentationRepresentations.filter(\n        (representation) => representation.active\n      );\n\n    if (activeSegmentationRepresentations.length === 0) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 4. If the added segmentation representation is active, make other segmentation\n    // representations inactive\n    if (recentlyAddedOrRemovedSegmentationRepresentation.active) {\n      segmentationRepresentations.forEach((representation) => {\n        if (\n          representation.segmentationRepresentationUID !==\n          recentlyAddedOrRemovedSegmentationRepresentation.segmentationRepresentationUID\n        ) {\n          representation.active = false;\n        }\n      });\n    }\n\n    // 5. if added/removed segmentation is is inactive, do nothing\n  }\n}\n\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { defaultSegmentationStateManager };\n","import { SegmentationRepresentations } from '../../../enums';\nimport {\n  SegmentationPublicInput,\n  Segmentation,\n} from '../../../types/SegmentationStateTypes';\nimport type { ContourSegmentationData } from '../../../types/ContourTypes';\n\n/**\n * It takes in a segmentation input and returns a segmentation with default values\n * @param segmentationInput - The input to the segmentation.\n * @returns A Segmentation object.\n * @internal\n */\nfunction normalizeSegmentationInput(\n  segmentationInput: SegmentationPublicInput\n): Segmentation {\n  const { segmentationId, representation } = segmentationInput;\n  const isContourRepresentation =\n    representation.type === SegmentationRepresentations.Contour;\n  let data = representation.data ? { ...representation.data } : null;\n\n  // Contour representation data is defined internally\n  data = !data && isContourRepresentation ? {} : data;\n\n  // Data cannot be undefined for labelmap and surface\n  if (!data) {\n    throw new Error('Segmentation representation data may not be undefined');\n  }\n\n  if (isContourRepresentation) {\n    const contourData = <ContourSegmentationData>data;\n\n    // geometryIds will be removed in a near future. It still exist in the\n    // code for compatibility only but it is optional from now on.\n    contourData.geometryIds = contourData.geometryIds ?? [];\n\n    // Make sure annotationUIDsMap is defined because an empty contour is\n    // created before adding contour annotations to the map. Also it prevents\n    // breaking legacy code after moving from geometryIds to annotationUIDsMap.\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n  }\n\n  // Todo: we should be able to let the user pass in non-default values for\n  // cachedStats, label, activeSegmentIndex, etc.\n  return {\n    segmentationId,\n    cachedStats: {},\n    segmentLabels: {},\n    label: null,\n    segmentsLocked: new Set(),\n    type: representation.type,\n    activeSegmentIndex: 1,\n    representationData: {\n      [representation.type]: {\n        ...data,\n      },\n    },\n  };\n}\n\nexport default normalizeSegmentationInput;\n","import type { Types } from '@cornerstonejs/core';\nimport type {\n  RepresentationConfig,\n  Segmentation,\n  SegmentationPublicInput,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport {\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n} from './triggerSegmentationEvents';\n\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\n\n/**\n * It returns the defaultSegmentationStateManager.\n */\nfunction getDefaultSegmentationStateManager() {\n  return defaultSegmentationStateManager;\n}\n\n/*************************\n *\n * Segmentation State\n *\n **************************/\n\n/**\n * Get the segmentation for the given segmentationId\n * @param segmentationId - The Id of the segmentation\n * @returns A GlobalSegmentationData object\n */\nfunction getSegmentation(segmentationId: string): Segmentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentation(segmentationId);\n}\n\n/**\n * Get the segmentations inside the state\n * @returns Segmentation array\n */\nfunction getSegmentations(): Segmentation[] | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n\n  return state.segmentations;\n}\n\n/**\n * It takes a segmentation input and adds it to the segmentation state manager\n * @param segmentationInput - The segmentation to add.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction addSegmentation(\n  segmentationInput: SegmentationPublicInput,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const segmentation = normalizeSegmentationInput(segmentationInput);\n\n  segmentationStateManager.addSegmentation(segmentation);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified(segmentation.segmentationId);\n  }\n}\n\n/**\n * Get the segmentation state for a tool group. It will return an array of\n * segmentation representation objects.\n * @param toolGroupId - The unique identifier of the tool group.\n * @returns An array of segmentation representation objects.\n */\nfunction getSegmentationRepresentations(\n  toolGroupId: string\n): ToolGroupSpecificRepresentations | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n}\n\n/**\n * Get all segmentation representations in the state\n * @returns An array of segmentation representation objects.\n */\nfunction getAllSegmentationRepresentations(): Record<\n  string,\n  ToolGroupSpecificRepresentation[]\n> {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getAllSegmentationRepresentations();\n}\n\n/**\n * Finds all segmentation representations with the given segmentationId.\n * @param segmentationId - The ID of the segmentation.\n * @returns An array of found segmentation representations.\n */\nfunction getSegmentationIdRepresentations(segmentationId) {\n  const allRepresentations = getAllSegmentationRepresentations() || {};\n  const foundRepresentations = [];\n\n  for (const toolGroupId in allRepresentations) {\n    const toolGroupRepresentations = allRepresentations[toolGroupId];\n\n    const foundRepresentation = toolGroupRepresentations.find(\n      (representation) => representation.segmentationId === segmentationId\n    );\n\n    if (foundRepresentation) {\n      foundRepresentations.push(foundRepresentation);\n    }\n  }\n\n  return foundRepresentations;\n}\n\n/**\n * Finds a segmentation representation by its UID.\n *\n * @param segmentationRepresentationUID - The UID of the segmentation representation to find.\n * @returns The found segmentation representation, or undefined if not found.\n */\nfunction findSegmentationRepresentationByUID(\n  segmentationRepresentationUID: string\n): {\n  toolGroupId: string;\n  segmentationRepresentation: ToolGroupSpecificRepresentation;\n} {\n  const allToolGroupRepresentations = getAllSegmentationRepresentations() || [];\n\n  const toolGroupIds = Object.keys(allToolGroupRepresentations);\n\n  for (const toolGroupId of toolGroupIds) {\n    const toolGroupRepresentations =\n      getAllSegmentationRepresentations()[toolGroupId];\n\n    const foundRepresentation = toolGroupRepresentations.find(\n      (representation) =>\n        representation.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    if (foundRepresentation) {\n      return {\n        segmentationRepresentation: foundRepresentation,\n        toolGroupId,\n      };\n    }\n  }\n}\n\n/**\n * Get the tool group IDs that have a segmentation representation with the given\n * segmentationId\n * @param segmentationId - The id of the segmentation\n * @returns An array of tool group IDs.\n */\nfunction getToolGroupIdsWithSegmentation(segmentationId: string): string[] {\n  if (!segmentationId) {\n    throw new Error('getToolGroupIdsWithSegmentation: segmentationId is empty');\n  }\n\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n  const toolGroupIds = Object.keys(state.toolGroups);\n\n  const foundToolGroupIds = [];\n  toolGroupIds.forEach((toolGroupId) => {\n    const toolGroupSegmentationRepresentations =\n      segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n    toolGroupSegmentationRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        foundToolGroupIds.push(toolGroupId);\n      }\n    });\n  });\n\n  return foundToolGroupIds;\n}\n\n/**\n * Get the segmentation representations config for a given tool group\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config belongs to.\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Set the segmentation representation config for the provided toolGroup. ToolGroup specific\n * configuration overwrites the global configuration for each representation.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config is being set for.\n * @param config - The new configuration for the tool group.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationConfig(\n    toolGroupId,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId);\n  }\n}\n\n/**\n * It sets the segmentation representation specific config for all the segments\n * inside the segmentation.\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @param config  - The new configuration for the segmentation representation it is an object with keys of\n * different representation types, and values of the configuration for each representation type.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the segmentation representation specific config which is the same for all the segments\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @returns - The segmentation representation specific config.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction getSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\nfunction setSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  // Todo: this can be even more performant if we create a new event for\n  // triggering a specific segment config change.\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nfunction getToolGroupIdFromSegmentationRepresentationUID(\n  segmentationRepresentationUID: string\n): string {\n  const allToolGroupRepresentations = getAllSegmentationRepresentations() || [];\n\n  const toolGroupIds = Object.keys(allToolGroupRepresentations);\n\n  for (const toolGroupId of toolGroupIds) {\n    const toolGroupRepresentations =\n      getAllSegmentationRepresentations()[toolGroupId];\n\n    const foundRepresentation = toolGroupRepresentations.find(\n      (representation) =>\n        representation.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    if (foundRepresentation) {\n      return toolGroupId;\n    }\n  }\n}\n\n/**\n * Add the given segmentation representation data to the given tool group state. It fires\n * SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation representation is for.\n * @param segmentationData - The data to add to the segmentation state.\n * @param suppressEvents - boolean\n */\nfunction addSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentation\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentation.segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the global segmentation config. Note that the toolGroup-specific\n * configuration has higher priority than the global configuration and overwrites\n * the global configuration for each representation.\n * @returns The global segmentation configuration for all segmentations.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation configuration. It fires SEGMENTATION_MODIFIED\n * event if not suppressed.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param config - The new global segmentation config.\n * @param suppressEvents - If true, the `segmentationGlobalStateModified` event will not be triggered.\n */\nfunction setGlobalConfig(\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setGlobalConfig(config);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified();\n  }\n}\n\n/**\n * Get the segmentation data object for a given tool group and\n * segmentation data UID. It searches all the toolGroup specific segmentation\n * data objects and returns the first one that matches the UID.\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @returns Segmentation Data object.\n */\nfunction getSegmentationRepresentationByUID(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): ToolGroupSpecificRepresentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * It removes the segmentation from the segmentation state manager\n *\n * @triggers SEGMENTATION_REMOVED\n *\n * @param segmentationId - The id of the segmentation\n */\nfunction removeSegmentation(segmentationId: string): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentation(segmentationId);\n  triggerSegmentationRemoved(segmentationId);\n}\n\n/**\n * Remove a segmentation representation from the segmentation state manager for a toolGroup.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_REPRESENTATION_REMOVED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation to remove.\n * remove.\n * @param - immediate - If true, the viewports will be updated immediately.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationRemoved(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Removes all segmentation representations associated with a tool group.\n * @param toolGroupId - The ID of the tool group.\n */\nfunction removeSegmentationRepresentations(toolGroupId: string): void {\n  const segmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId) || [];\n\n  segmentationRepresentations.forEach((representation) => {\n    removeSegmentationRepresentation(\n      toolGroupId,\n      representation.segmentationRepresentationUID\n    );\n  });\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction removeColorLUT(colorLUTIndex: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n\n/**\n * Get the color lut for a given index\n * @param index - The index of the color lut to retrieve.\n * @returns A ColorLUT array.\n */\nfunction getColorLUT(index: number): Types.ColorLUT | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getColorLUT(index);\n}\n\nfunction getNextColorLUTIndex(): number {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getNextColorLUTIndex();\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction addColorLUT(colorLUT: Types.ColorLUT, index: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addColorLUT(colorLUT, index);\n  // Todo: trigger event color LUT added\n}\n\nexport {\n  getDefaultSegmentationStateManager,\n  // Segmentation\n  getSegmentation,\n  getSegmentations,\n  addSegmentation,\n  removeSegmentation,\n  // ToolGroup specific Segmentation Representation\n  getSegmentationRepresentations,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n  removeSegmentationRepresentations,\n  // config\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  getGlobalConfig,\n  setGlobalConfig,\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  getSegmentSpecificRepresentationConfig,\n  setSegmentSpecificRepresentationConfig,\n  // helpers s\n  getToolGroupIdsWithSegmentation,\n  getAllSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n  getSegmentationIdRepresentations,\n  // color\n  addColorLUT,\n  getColorLUT,\n  getNextColorLUTIndex,\n  removeColorLUT,\n  //\n  findSegmentationRepresentationByUID,\n  getToolGroupIdFromSegmentationRepresentationUID,\n};\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\n\nimport { Events } from '../../enums';\nimport {\n  getSegmentationRepresentations,\n  getSegmentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport {\n  SegmentationRepresentationModifiedEventDetail,\n  SegmentationDataModifiedEventDetail,\n  SegmentationModifiedEventDetail,\n  SegmentationRepresentationRemovedEventDetail,\n  SegmentationRemovedEventDetail,\n} from '../../types/EventTypes';\nimport { setSegmentationDirty } from '../../utilities/segmentation/getUniqueSegmentIndices';\n\n/**\n * Trigger an event that a segmentation is removed\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationRemoved(segmentationId: string): void {\n  const eventDetail: SegmentationRemovedEventDetail = {\n    segmentationId,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_REMOVED, eventDetail);\n}\n\n/**\n * Trigger an event that a segmentation representation was removed\n * @param toolGroupId - The id of the tool group that the segmentation\n * representation was removed from.\n * @param segmentationRepresentationUID - The UID of the segmentation\n * representation that was removed.\n */\nfunction triggerSegmentationRepresentationRemoved(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const eventDetail: SegmentationRepresentationRemovedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  triggerEvent(\n    eventTarget,\n    Events.SEGMENTATION_REPRESENTATION_REMOVED,\n    eventDetail\n  );\n}\n\n/**\n * Trigger an event on the eventTarget that the segmentation representation for\n * toolGroupId has been updated\n * @param toolGroupId - The Id of the toolGroup\n */\nfunction triggerSegmentationRepresentationModified(\n  toolGroupId: string,\n  segmentationRepresentationUID?: string\n): void {\n  const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  if (segmentationRepresentationUID) {\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n    return;\n  }\n\n  // If no segmentationRepresentationUID is provided, then we need to trigger\n  // the event for all segmentation representations in the toolGroup\n\n  // Get all segmentation representations in the toolGroup\n  const segmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId) || [];\n\n  segmentationRepresentations.forEach((segmentationRepresentation) => {\n    const { segmentationRepresentationUID } = segmentationRepresentation;\n    const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n      toolGroupId,\n      segmentationRepresentationUID,\n    };\n\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n  });\n}\n\n/**\n * Triggers segmentation global state updated event, notifying all toolGroups\n * that the global state has been updated, If a segmentationId is provided\n * the event will only be triggered for that segmentation, otherwise it will\n * be triggered for all segmentations.\n *\n * @param segmentationId - The id of the segmentation that has been updated\n */\nfunction triggerSegmentationModified(segmentationId?: string): void {\n  let segmentationIds;\n\n  if (segmentationId) {\n    segmentationIds = [segmentationId];\n  } else {\n    // get all toolGroups\n    segmentationIds = getSegmentations().map(\n      ({ segmentationId }) => segmentationId\n    );\n  }\n\n  // 1. Trigger an event notifying all listeners about the segmentationId\n  // that has been updated.\n  segmentationIds.forEach((segmentationId) => {\n    const eventDetail: SegmentationModifiedEventDetail = {\n      segmentationId,\n    };\n    triggerEvent(eventTarget, Events.SEGMENTATION_MODIFIED, eventDetail);\n  });\n\n  // Todo: I don't think we need the following lines of code\n  // // 2. Notify all viewports that render the segmentationId in order to update the\n  // // rendering based on the new global state.\n  // toolGroupIds.forEach((toolGroupId) => {\n  //   triggerSegmentationRepresentationModified(toolGroupId)\n  // })\n}\n\n/**\n * Trigger an event that a segmentation data has been modified\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationDataModified(\n  segmentationId: string,\n  modifiedSlicesToUse?: number[]\n): void {\n  const eventDetail: SegmentationDataModifiedEventDetail = {\n    segmentationId,\n    modifiedSlicesToUse,\n  };\n\n  // set it to dirty to force the next call to getUniqueSegmentIndices to\n  // recalculate the segment indices\n  setSegmentationDirty(segmentationId);\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n\nexport {\n  // ToolGroup Specific\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n  // Global\n  triggerSegmentationDataModified,\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n};\n","import {\n  getRenderingEngine,\n  getEnabledElement,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\n\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Synchronizer is a class that listens to a specific event on a specific source\n * targets and fires a specific event on a specific target elements. Use cases\n * include: synchronizing a camera between two viewports, synchronizing a\n * windowLevel between various viewports.\n */\nclass Synchronizer {\n  //\n  private _enabled: boolean;\n  private _eventName: string;\n  private _auxiliaryEventNames: string[];\n  private _eventHandler: ISynchronizerEventHandler;\n  private _ignoreFiredEvents: boolean;\n  private _sourceViewports: Array<Types.IViewportId>;\n  private _targetViewports: Array<Types.IViewportId>;\n  private _viewportOptions: Record<string, Record<string, unknown>> = {};\n  private _options: any;\n  public id: string;\n\n  constructor(\n    synchronizerId: string,\n    eventName: string,\n    eventHandler: ISynchronizerEventHandler,\n    options?: any\n  ) {\n    this._enabled = true;\n    this._eventName = eventName;\n    this._eventHandler = eventHandler;\n    this._ignoreFiredEvents = false;\n    this._sourceViewports = [];\n    this._targetViewports = [];\n    this._options = options || {};\n    this._auxiliaryEventNames = this._options.auxiliaryEventNames || [];\n\n    //\n    this.id = synchronizerId;\n  }\n\n  /**\n   * \"Returns true if the synchronizer is disabled.\"\n   * @returns A boolean value.\n   */\n  public isDisabled(): boolean {\n    return !this._enabled || !this._hasSourceElements();\n  }\n\n  /**\n   * Sets the options for the viewport id.  This can be used to\n   * provide configuration on a viewport basis for things like offsets\n   * to the general synchronization, or turn on/off synchronization of certain\n   * attributes.\n   */\n  public setOptions(\n    viewportId: string,\n    options: Record<string, unknown> = {}\n  ): void {\n    this._viewportOptions[viewportId] = options;\n  }\n\n  /**\n   * Sets a synchronizer enabled\n   */\n  public setEnabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /** Gets the options for the given viewport id */\n  public getOptions(viewportId: string): Record<string, unknown> | undefined {\n    return this._viewportOptions[viewportId];\n  }\n\n  /**\n   * Add a viewport to the list of targets and sources both.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public add(viewportInfo: Types.IViewportId): void {\n    this.addTarget(viewportInfo);\n    this.addSource(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of sources (source ONLY)\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addSource(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._sourceViewports, viewportInfo)) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = viewportInfo;\n\n    const viewport =\n      getRenderingEngine(renderingEngineId).getViewport(viewportId);\n\n    if (!viewport) {\n      console.warn(\n        `Synchronizer.addSource: No viewport for ${renderingEngineId} ${viewportId}`\n      );\n      return;\n    }\n\n    const element = viewport.element;\n\n    element.addEventListener(this._eventName, this._onEvent.bind(this));\n\n    if (this._auxiliaryEventNames.length) {\n      this._auxiliaryEventNames.forEach((eventName) => {\n        element.addEventListener(eventName, this._onEvent.bind(this));\n      });\n    }\n\n    this._updateDisableHandlers();\n\n    this._sourceViewports.push(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of viewports that will get the eventHandler\n   * executed when the event is fired on the source viewport.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addTarget(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._targetViewports, viewportInfo)) {\n      return;\n    }\n\n    this._targetViewports.push(viewportInfo);\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Get the list of source viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getSourceViewports(): Array<Types.IViewportId> {\n    return this._sourceViewports;\n  }\n\n  /**\n   * Get the list of target viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getTargetViewports(): Array<Types.IViewportId> {\n    return this._targetViewports;\n  }\n\n  public destroy(): void {\n    this._sourceViewports.forEach((s) => this.removeSource(s));\n    this._targetViewports.forEach((t) => this.removeTarget(t));\n  }\n\n  /**\n   * Remove the viewport from the list of targets and sources\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public remove(viewportInfo: Types.IViewportId): void {\n    this.removeTarget(viewportInfo);\n    this.removeSource(viewportInfo);\n  }\n\n  /**\n   * Remove the viewport from the list of source viewports\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public removeSource(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._sourceViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    const element = _getViewportElement(viewportInfo);\n\n    this._sourceViewports.splice(index, 1);\n\n    //@ts-ignore\n    element.removeEventListener(this._eventName, this._eventHandler);\n\n    if (this._auxiliaryEventNames) {\n      this._auxiliaryEventNames.forEach((eventName) => {\n        //@ts-ignore\n        element.removeEventListener(eventName, this._eventHandler);\n      });\n    }\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Remove the viewport from the list of viewports that are currently targeted by\n   * this handler\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   *\n   */\n  public removeTarget(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._targetViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    this._targetViewports.splice(index, 1);\n    this._updateDisableHandlers();\n  }\n\n  public hasSourceViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._sourceViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  public hasTargetViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._targetViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  private fireEvent(sourceViewport: Types.IViewportId, sourceEvent: any): void {\n    if (this.isDisabled() || this._ignoreFiredEvents) {\n      return;\n    }\n\n    this._ignoreFiredEvents = true;\n    const promises = [];\n    try {\n      for (let i = 0; i < this._targetViewports.length; i++) {\n        const targetViewport = this._targetViewports[i];\n        const targetIsSource =\n          sourceViewport.viewportId === targetViewport.viewportId;\n\n        if (targetIsSource) {\n          continue;\n        }\n        const result = this._eventHandler(\n          this,\n          sourceViewport,\n          targetViewport,\n          sourceEvent,\n          this._options\n        );\n\n        // if the result is a promise, then add it to the list of promises\n        // to wait for before setting _ignoreFiredEvents to false\n        if (result instanceof Promise) {\n          promises.push(result);\n        }\n      }\n    } catch (ex) {\n      console.warn(`Synchronizer, for: ${this._eventName}`, ex);\n    } finally {\n      if (promises.length) {\n        Promise.allSettled(promises).then(() => {\n          this._ignoreFiredEvents = false;\n        });\n      } else {\n        this._ignoreFiredEvents = false;\n      }\n    }\n  }\n\n  private _onEvent = (evt: any): void => {\n    if (this._ignoreFiredEvents === true) {\n      return;\n    }\n\n    // If no target viewports, then return immediately, this is useful\n    // when switching between layouts, when previous layout has disabled\n    // its viewports, and the new layout has not yet enabled them.\n    // Right now we don't \"delete\" the synchronizer if all source and targets\n    // are removed, but we may want to do that in the future.\n    if (!this._targetViewports.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(evt.currentTarget);\n\n    if (!enabledElement) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = enabledElement;\n\n    // If the viewport has been removed from the synchronizer before the event is\n    // fired, then return immediately.\n    if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {\n      return;\n    }\n\n    this.fireEvent(\n      {\n        renderingEngineId,\n        viewportId,\n      },\n      evt\n    );\n  };\n\n  private _hasSourceElements(): boolean {\n    return this._sourceViewports.length !== 0;\n  }\n\n  private _updateDisableHandlers(): void {\n    const viewports = _getUniqueViewports(\n      this._sourceViewports,\n      this._targetViewports\n    );\n    const _remove = this.remove;\n    const disableHandler = (elementDisabledEvent) => {\n      _remove(elementDisabledEvent.detail.element);\n    };\n\n    viewports.forEach(function (vUid) {\n      const renderingEngine = getRenderingEngine(vUid.renderingEngineId);\n\n      if (!renderingEngine) {\n        return;\n      }\n\n      const viewport = renderingEngine.getViewport(vUid.viewportId);\n\n      if (!viewport) {\n        return;\n      }\n\n      const { element } = viewport;\n\n      element.removeEventListener(\n        Enums.Events.ELEMENT_DISABLED,\n        disableHandler\n      );\n      element.addEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n    });\n  }\n}\n\nfunction _getUniqueViewports(\n  vp1: Array<Types.IViewportId>,\n  vp2: Array<Types.IViewportId>\n): Array<Types.IViewportId> {\n  const unique = [];\n\n  const vps = vp1.concat(vp2);\n\n  for (let i = 0; i < vps.length; i++) {\n    const vp = vps[i];\n    if (\n      !unique.some(\n        (u) =>\n          vp.renderingEngineId === u.renderingEngineId &&\n          vp.viewportId === u.viewportId\n      )\n    ) {\n      unique.push(vp);\n    }\n  }\n\n  return unique;\n}\n\nfunction _getViewportIndex(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n): number {\n  return arr.findIndex(\n    (ar) =>\n      vp.renderingEngineId === ar.renderingEngineId &&\n      vp.viewportId === ar.viewportId\n  );\n}\n\nfunction _containsViewport(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n) {\n  return arr.some(\n    (ar) =>\n      ar.renderingEngineId === vp.renderingEngineId &&\n      ar.viewportId === vp.viewportId\n  );\n}\n\nfunction _getViewportElement(vp: Types.IViewportId): HTMLDivElement {\n  const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(`No RenderingEngine for Id: ${vp.renderingEngineId}`);\n  }\n\n  return renderingEngine.getViewport(vp.viewportId).element;\n}\n\nexport default Synchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * It returns all synchronizers that are not disabled and have a source viewport\n * with the given rendering engine Id and viewport Id\n * @param renderingEngineId - The Id of the rendering engine\n * @param viewportId - The Id of the viewport\n * @returns An array of synchronizers\n */\nfunction getSynchronizersForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): Array<Synchronizer> {\n  const synchronizersFilteredByIds = [];\n\n  if (!renderingEngineId && !viewportId) {\n    throw new Error(\n      'At least one of renderingEngineId or viewportId should be given'\n    );\n  }\n\n  for (let i = 0; i < state.synchronizers.length; i++) {\n    const synchronizer = state.synchronizers[i];\n    const notDisabled = !synchronizer.isDisabled();\n    const hasSourceViewport = synchronizer.hasSourceViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    const hasTargetViewport = synchronizer.hasTargetViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    if (notDisabled && (hasSourceViewport || hasTargetViewport)) {\n      synchronizersFilteredByIds.push(synchronizer);\n    }\n  }\n\n  return synchronizersFilteredByIds;\n}\n\nexport default getSynchronizersForViewport;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Create a new synchronizer instance from Synchronizer class\n * @param synchronizerId - The id of the synchronizer.\n * @param eventName - The name of the event that will be emitted by the\n * synchronizer.\n * @param eventHandler - The event handler that will be\n * called when the event is emitted.\n * @param options - Options for the synchronizer.\n * @returns A reference to the synchronizer.\n */\nfunction createSynchronizer(\n  synchronizerId: string,\n  eventName: string,\n  eventHandler: ISynchronizerEventHandler,\n  options?: any\n): Synchronizer {\n  const synchronizerWithSameIdExists = state.synchronizers.some(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerWithSameIdExists) {\n    throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);\n  }\n\n  // Create\n  const synchronizer = new Synchronizer(\n    synchronizerId,\n    eventName,\n    eventHandler,\n    options\n  );\n\n  // Update state\n  state.synchronizers.push(synchronizer);\n\n  // Return reference\n  return synchronizer;\n}\n\nexport default createSynchronizer;\n","import { state } from '../index';\n\n/**\n * \"Destroy all synchronizers.\"\n */\nfunction destroy(): void {\n  while (state.synchronizers.length > 0) {\n    const synchronizer = state.synchronizers.pop();\n\n    synchronizer.destroy();\n  }\n}\n\nexport default destroy;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Get the synchronizer with the given id from the state.\n * @param synchronizerId - The id of the synchronizer to be retrieved.\n * @returns A synchronizer object.\n */\nfunction getSynchronizer(synchronizerId: string): Synchronizer | void {\n  return state.synchronizers.find((s) => s.id === synchronizerId);\n}\n\nexport default getSynchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Return the array of synchronizers\n * @returns An array of synchronizers.\n */\nfunction getAllSynchronizers(): Array<Synchronizer> {\n  return state.synchronizers;\n}\n\nexport default getAllSynchronizers;\n","import { state } from '../index';\n\n// Synchronizers are a bit more tenacious. We need to make sure we remove\n// any attached events\n// We should probably just have a destroySynchronizer call\n// then use getByX to allow versatility in how we can call destroy\n\n/**\n * Destroy a synchronizer by its ID.\n * @param synchronizerId - The id of the synchronizer to destroy.\n */\nfunction destroySynchronizer(synchronizerId: string): void {\n  const synchronizerIndex = state.synchronizers.findIndex(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerIndex > -1) {\n    const synchronizer = state.synchronizers[synchronizerIndex];\n\n    synchronizer.destroy();\n    state.synchronizers.splice(synchronizerIndex, 1);\n  }\n}\n\nexport default destroySynchronizer;\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a rendering engine Id and a viewport Id, return the tool group that\n * contains that rendering engine and viewport. Note: A viewport can only be\n * associated with a single tool group. You cannot have a viewport that belongs\n * to multiple tool groups. To achieve so, create a new viewport and a new toolGroup\n * for it. This will not impact memory usage much as the volume textures are\n * shared across all viewports rendering the same image.\n *\n * @param viewportId - The Id of the viewport that the tool is being\n * added to.\n * @param renderingEngineId - The Id of the rendering engine that the\n * tool group is associated with.\n * @returns A tool group.\n */\nfunction getToolGroupForViewport(\n  viewportId: string,\n  renderingEngineId?: string\n): IToolGroup | undefined {\n  if (!renderingEngineId) {\n    renderingEngineId = getRenderingEngines().find((re) =>\n      re.getViewports().find((vp) => vp.id === viewportId)\n    )?.id;\n  }\n\n  const toolGroupFilteredByIds = state.toolGroups.filter((tg) =>\n    tg.viewportsInfo.some(\n      (vp) =>\n        vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)\n    )\n  );\n\n  if (!toolGroupFilteredByIds.length) {\n    return;\n  }\n\n  if (toolGroupFilteredByIds.length > 1) {\n    throw new Error(\n      `Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`\n    );\n  }\n\n  return toolGroupFilteredByIds[0];\n}\n\nexport default getToolGroupForViewport;\n","import { state } from './state';\n\n/**\n * Adds the tool class to the cornerstoneTools to be used later. This function\n * should be called before creating the toolGroups and adding tools and setting their mode.\n * The flow is:\n * - addTool(ToolClass) // where ToolClass is the tool constructor imported from CornerstoneTools or created by a 3rd party\n * - createToolGroup(toolGroupId)\n * - toolGroup.addTool(${toolName}) // NOT THE TOOL CLASS\n * - toolGroup.setToolActive(${toolName})\n *\n * @param ToolClass - A tool calls to instantiate.\n * @param toolOptions - The tool-specific configuration options for the tool.\n * @returns\n */\nexport function addTool(ToolClass): void {\n  // Check if tool exists and name is not undefined\n  const toolName = ToolClass.toolName;\n  const toolAlreadyAdded = state.tools[toolName] !== undefined;\n\n  if (!toolName) {\n    throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n  }\n\n  if (toolAlreadyAdded) {\n    throw new Error(`${toolName} has already been added globally`);\n  }\n\n  // Stores the toolNames and ToolClass to be instantiated in the toolGroup on toolGroup.addTool\n  state.tools[toolName] = {\n    toolClass: ToolClass,\n  };\n}\n\n/**\n * Check if a given tool is already registered\n * @param ToolClass - A tool class to check\n * @returns True if the tool is alredy registered or false otherwise\n */\nexport function hasTool(ToolClass): boolean {\n  const toolName = ToolClass.toolName;\n\n  return !!(toolName && state.tools[toolName]);\n}\n\n/**\n * Removes the tool class from the cornerstoneTools.\n *\n * @param ToolClass - A tool calls to instantiate.\n */\nexport function removeTool(ToolClass): void {\n  const toolName = ToolClass.toolName;\n\n  if (!toolName) {\n    throw new Error(`No tool found for: ${ToolClass.name}`);\n  }\n\n  if (!state.tools[toolName] !== undefined) {\n    delete state.tools[toolName];\n  } else {\n    throw new Error(\n      `${toolName} cannot be removed because it has not been added`\n    );\n  }\n}\n\nexport default addTool;\n","import { Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n  imageChangeEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  touchToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n} from '../eventDispatchers';\nimport { state } from './state';\n\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\n/**\n * When an element is \"enabled\", add event listeners and dispatchers to it\n * so we can use interactions to affect tool behaviors\n *\n * @param evt - The ELEMENT_ENABLED event\n */\nexport default function addEnabledElement(\n  evt: Types.EventTypes.ElementEnabledEvent\n): void {\n  const { element, viewportId } = evt.detail;\n  const svgLayer = _createSvgAnnotationLayer(viewportId);\n\n  // Reset/Create svgNodeCache for element\n  _setSvgNodeCache(element);\n  _appendChild(svgLayer, element);\n\n  // Add this element to the annotation rendering engine\n  annotationRenderingEngine.addViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.enable(element);\n  wheelEventListener.enable(element);\n  touchEventListeners.enable(element);\n  keyEventListener.enable(element);\n  imageChangeEventListener.enable(element);\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.enable(element);\n  cameraModifiedEventDispatcher.enable(element);\n  imageSpacingCalibratedEventDispatcher.enable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.enable(element);\n  keyboardToolEventDispatcher.enable(element);\n  touchToolEventDispatcher.enable(element);\n\n  // labelmap\n  // State\n  state.enabledElements.push(element);\n}\n\n/**\n *\n */\nfunction _createSvgAnnotationLayer(viewportId: string): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgLayer = document.createElementNS(svgns, 'svg');\n\n  const svgLayerId = `svg-layer-${viewportId}`;\n  svgLayer.classList.add('svg-layer');\n  svgLayer.setAttribute('id', svgLayerId);\n  svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svgLayer.style.width = '100%';\n  svgLayer.style.height = '100%';\n  svgLayer.style.pointerEvents = 'none';\n  svgLayer.style.position = 'absolute';\n  // TODO: we should test this on high-res monitors\n  //svgLayer.style.textRendering = 'optimizeSpeed'\n\n  // Single dropshadow config for now\n  const defs = document.createElementNS(svgns, 'defs');\n  const filter = document.createElementNS(svgns, 'filter');\n  const feOffset = document.createElementNS(svgns, 'feOffset');\n  const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');\n  const feBlend = document.createElementNS(svgns, 'feBlend');\n\n  //\n  filter.setAttribute('id', `shadow-${svgLayerId}`);\n  filter.setAttribute('filterUnits', 'userSpaceOnUse');\n\n  //\n  feOffset.setAttribute('result', 'offOut');\n  feOffset.setAttribute('in', 'SourceGraphic');\n  feOffset.setAttribute('dx', '0.5');\n  feOffset.setAttribute('dy', '0.5');\n\n  //\n  feColorMatrix.setAttribute('result', 'matrixOut');\n  feColorMatrix.setAttribute('in', 'offOut');\n  feColorMatrix.setAttribute('in2', 'matrix');\n  feColorMatrix.setAttribute(\n    'values',\n    '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0'\n  );\n\n  //\n  feBlend.setAttribute('in', 'SourceGraphic');\n  feBlend.setAttribute('in2', 'matrixOut');\n  feBlend.setAttribute('mode', 'normal');\n\n  filter.appendChild(feOffset);\n  filter.appendChild(feColorMatrix);\n  filter.appendChild(feBlend);\n  defs.appendChild(filter);\n  svgLayer.appendChild(defs);\n\n  return svgLayer;\n}\n\nfunction _setSvgNodeCache(element) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  // Create or reset\n  // TODO: If... Reset, we should blow out any nodes in DOM\n  state.svgNodeCache[elementHash] = {};\n}\n\n/**\n *\n * @param newNode\n * @param referenceNode\n */\nfunction _appendChild(\n  newNode: SVGElement,\n  referenceNode: HTMLDivElement\n): void {\n  referenceNode.querySelector('div.viewport-element').appendChild(newNode);\n}\n","import { getEnabledElement, Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n  imageChangeEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n  touchToolEventDispatcher,\n} from '../eventDispatchers';\n// ~~\n\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nimport { state } from './state';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport { ToolModes } from '../enums';\nimport { removeAnnotation } from '../stateManagement';\nimport getSynchronizersForViewport from './SynchronizerManager/getSynchronizersForViewport';\nimport getToolGroupForViewport from './ToolGroupManager/getToolGroupForViewport';\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\nfunction removeEnabledElement(\n  elementDisabledEvt: Types.EventTypes.ElementDisabledEvent\n): void {\n  // Is DOM element\n  const { element, viewportId } = elementDisabledEvt.detail;\n\n  _resetSvgNodeCache(element);\n  _removeSvgNode(element);\n\n  // Remove this element from the annotation rendering engine\n  annotationRenderingEngine.removeViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.disable(element);\n  wheelEventListener.disable(element);\n  touchEventListeners.disable(element);\n  keyEventListener.disable(element);\n\n  // labelmap\n  imageChangeEventListener.disable(element);\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.disable(element);\n  cameraModifiedEventDispatcher.disable(element);\n  imageSpacingCalibratedEventDispatcher.disable(element);\n\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.disable(element);\n  keyboardToolEventDispatcher.disable(element);\n  touchToolEventDispatcher.disable(element);\n\n  // State\n  // @TODO: We used to \"disable\" the tool before removal. Should we preserve the hook that would call on tools?\n  _removeViewportFromSynchronizers(element);\n  _removeViewportFromToolGroup(element);\n\n  // _removeAllToolsForElement(canvas)\n  _removeEnabledElement(element);\n}\n\nconst _removeViewportFromSynchronizers = (element: HTMLDivElement) => {\n  const enabledElement = getEnabledElement(element);\n\n  const synchronizers = getSynchronizersForViewport(\n    enabledElement.viewportId,\n    enabledElement.renderingEngineId\n  );\n  synchronizers.forEach((sync) => {\n    sync.remove(enabledElement);\n  });\n};\n\nconst _removeViewportFromToolGroup = (element: HTMLDivElement) => {\n  const { renderingEngineId, viewportId } = getEnabledElement(element);\n\n  const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n  if (toolGroup) {\n    toolGroup.removeViewports(renderingEngineId, viewportId);\n  }\n};\n\nconst _removeAllToolsForElement = function (element) {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  toolsWithData.forEach(({ annotations }) => {\n    annotations.forEach((annotation) => {\n      removeAnnotation(annotation.annotationUID);\n    });\n  });\n};\n\nfunction _resetSvgNodeCache(element: HTMLDivElement) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  delete state.svgNodeCache[elementHash];\n}\n\nfunction _removeSvgNode(element: HTMLDivElement) {\n  const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);\n  const svgLayer = internalViewportNode.querySelector('svg');\n  if (svgLayer) {\n    internalViewportNode.removeChild(svgLayer);\n  }\n}\n\n/**\n * @private\n * @param enabledElement\n */\nconst _removeEnabledElement = function (element: HTMLDivElement) {\n  const foundElementIndex = state.enabledElements.findIndex(\n    (el) => el === element\n  );\n\n  if (foundElementIndex > -1) {\n    state.enabledElements.splice(foundElementIndex, 1);\n  }\n};\n\nexport default removeEnabledElement;\n","import { ToolModes } from '../enums';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\n\n/**\n * Cancel the current active manipulation that is being performed on the provided\n * element. It filters all the active and passive tools for the enabledElement\n * and calls cancel() method for all of them, and returns the tool that has executed its\n * cancellation (returned its annotationUID), since tools that are not being manipulated will\n * short circuit early. Note: not all tools currently implement a cancel method.\n *\n * @param element - canvas element\n * @returns annotationUID that is cancelled\n */\nexport default function cancelActiveManipulations(\n  element: HTMLDivElement\n): string | undefined {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  for (const { tool } of toolsWithData) {\n    const annotationUID = tool.cancel(element);\n    if (annotationUID) {\n      return annotationUID;\n    }\n  }\n}\n","import { IToolGroup, IToolClassReference } from '../types';\nimport Synchronizer from './SynchronizerManager/Synchronizer';\nimport svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\nimport cloneDeep from 'lodash.clonedeep';\n\ninterface ICornerstoneTools3dState {\n  isInteractingWithTool: boolean;\n  isMultiPartToolActive: boolean;\n  tools: Record<\n    string,\n    {\n      toolClass: IToolClassReference;\n    }\n  >;\n  toolGroups: Array<IToolGroup>;\n  synchronizers: Array<Synchronizer>;\n  svgNodeCache: Record<string, unknown>;\n  enabledElements: Array<unknown>;\n  handleRadius: number;\n}\n\nconst defaultState: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nlet state: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nfunction resetCornerstoneToolsState(): void {\n  resetSvgNodeCache();\n  state = {\n    ...cloneDeep({\n      ...defaultState,\n      svgNodeCache: {},\n    }),\n    svgNodeCache: {\n      ...defaultState.svgNodeCache,\n    },\n  };\n}\n\nexport {\n  ICornerstoneTools3dState,\n  resetCornerstoneToolsState,\n  state,\n  state as default,\n};\n","let svgNodeCache = {};\n\nexport function resetSvgNodeCache(): void {\n  svgNodeCache = {};\n}\n\nexport default svgNodeCache;\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera by updating all camera\n * values.  See also zoomPanSyncCallback\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default function cameraSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  cameraModifiedEvent: CustomEvent\n): void {\n  const { camera } = cameraModifiedEvent.detail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n\n  tViewport.setCamera(camera);\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createCameraPositionSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const cameraPositionSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    cameraSyncCallback\n  );\n\n  return cameraPositionSynchronizer;\n}\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\n\n/**\n * Synchronizer callback to synchronize the camera. Synchronization\n *\n * targetViewport.options.syncZoom set to false to not sync the zoom\n * targetViewport.options.syncPan set to false to not sync the pan\n\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, different\n *   from sourceViewport\n */\nexport default function presentationViewSyncCallback(\n  _synchronizerInstance,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  _sourceEvent,\n  options?: Types.ViewPresentationSelector\n): void {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n\n  const presentationView = sViewport.getViewPresentation(options);\n\n  tViewport.setView(null, presentationView);\n\n  tViewport.render();\n}\n","import { Enums } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback` based on presentation view\n * values and not based on absolute camera positions.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createPresentationViewSynchronizer(\n  synchronizerName: string,\n  options?: Types.ViewPresentation\n): Synchronizer {\n  const presentationView = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    presentationViewSyncCallback,\n    options\n  );\n\n  return presentationView;\n}\n","import {\n  BaseVolumeViewport,\n  getRenderingEngine,\n  StackViewport,\n  Types,\n} from '@cornerstonejs/core';\n\n/**\n * Synchronizer callback to synchronize the voi of volumeActors of identical volumes\n * in different viewports.\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport.\n * @param modifiedEvent - The COLORMAP_MODIFIED or VOI_MODIFIED event.\n * @param options - Options for the synchronizer.\n */\nexport default function voiSyncCallback(\n  synchronizerInstance,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  modifiedEvent: any,\n  options?: any\n): void {\n  const eventDetail = modifiedEvent.detail;\n  const { volumeId, range, invertStateChanged, invert, colormap } = eventDetail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `Rendering Engine does not exist: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const tProperties:\n    | Types.VolumeViewportProperties\n    | Types.StackViewportProperties = {\n    voiRange: range,\n  };\n\n  if (options?.syncInvertState && invertStateChanged) {\n    tProperties.invert = invert;\n  }\n  if (options?.syncColormap && colormap) {\n    tProperties.colormap = colormap;\n  }\n\n  if (tViewport instanceof BaseVolumeViewport) {\n    const isFusion = tViewport._actors && tViewport._actors.size > 1;\n    if (isFusion) {\n      tViewport.setProperties(tProperties, volumeId);\n    } else {\n      tViewport.setProperties(tProperties);\n    }\n  } else if (tViewport instanceof StackViewport) {\n    tViewport.setProperties(tProperties);\n  } else {\n    throw new Error('Viewport type not supported.');\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport voiSyncCallback from '../callbacks/voiSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\ntype VOISynchronizerOptions = {\n  syncInvertState: boolean;\n  syncColormap :boolean;\n};\n\n/**\n * A helper that creates a new `Synchronizer`\n * which listens to the `VOI_MODIFIED` rendering event and calls the `voiSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @param options - The options for the synchronizer. By default the voi\n * synchronizer will also sync the invert state of the volume, but this can be\n * disabled by setting `syncInvertState` to false.\n *\n * @returns A new `Synchronizer` instance.\n */\nexport default function createVOISynchronizer(\n  synchronizerName: string,\n  options: VOISynchronizerOptions\n): Synchronizer {\n  //  = { syncInvertState: true } if options is not provided or undefined or {}\n  options = Object.assign({ syncInvertState: true, syncColormap:true }, options);\n\n  const VOISynchronizer = createSynchronizer(\n    synchronizerName,\n    Enums.Events.VOI_MODIFIED,\n    voiSyncCallback,\n    {\n      auxiliaryEventNames: [Enums.Events.COLORMAP_MODIFIED],\n      ...options,\n    }\n  );\n\n  return VOISynchronizer;\n}\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera. Synchronization\n *\n * targetViewport.options.syncZoom set to false to not sync the zoom\n * targetViewport.options.syncPan set to false to not sync the pan\n\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, different\n *   from sourceViewport\n */\nexport default function zoomPanSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): void {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n\n  if (options?.syncZoom !== false) {\n    const srcZoom = sViewport.getZoom();\n    // Do the zoom first, as the pan is relative to the zoom level\n    tViewport.setZoom(srcZoom);\n  }\n  if (options?.syncPan !== false) {\n    const srcPan = sViewport.getPan();\n    tViewport.setPan(srcPan);\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createZoomPanSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const zoomPanSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    zoomPanSyncCallback\n  );\n\n  return zoomPanSynchronizer;\n}\n","import { vec3, mat4 } from 'gl-matrix';\nimport {\n  getRenderingEngine,\n  Types,\n  metaData,\n  utilities,\n  VolumeViewport,\n} from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\nimport { jumpToSlice } from '../../utilities';\nimport areViewportsCoplanar from './areViewportsCoplanar ';\n\nconst getSpatialRegistration = (targetId, sourceId) =>\n  utilities.spatialRegistrationMetadataProvider.get(\n    'spatialRegistrationModule',\n    targetId,\n    sourceId\n  );\n\n/**\n * Synchronizer callback to synchronize the source viewport image to the\n * target viewports closest image in its stack.\n *\n * This synchronizer does a setup (which can already be predefined as required)\n * to register the target and soruce viewports.  The registration will default\n * to the identity registration if the same FOR is present in both viewports,\n * unless the option `useInitialPosition` is set in the target viewport.\n *\n * The consuming apps using Cornerstone3D (OHIF, etc) MAY provide such data in\n * the registrationMetadataProvider to override the data here. This can be done\n * by various methods 1) Using spatialRegistrationModule inside dicom 2) assuming\n * the user has actually manually scrolled the target viewport to the correct\n * slice before initiating the synchronization 3) using some other method\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default async function imageSliceSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): Promise<void> {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId) as\n    | Types.IVolumeViewport\n    | Types.IStackViewport;\n\n  const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n\n  if (options?.disabled) {\n    return;\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId) as\n    | Types.IVolumeViewport\n    | Types.IStackViewport;\n\n  const imageId1 = sViewport.getCurrentImageId();\n  const imagePlaneModule1 = metaData.get('imagePlaneModule', imageId1);\n  const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;\n\n  const targetImageIds = tViewport.getImageIds();\n\n  if (!areViewportsCoplanar(sViewport, tViewport)) {\n    return;\n  }\n\n  // if the frame of reference is different we need to use the registrationMetadataProvider\n  // and add that to the imagePositionPatient of the source viewport to get the\n  // imagePositionPatient of the target viewport's closest image in its stack\n  let registrationMatrixMat4 = getSpatialRegistration(\n    targetViewport.viewportId,\n    sourceViewport.viewportId\n  );\n\n  if (!registrationMatrixMat4) {\n    const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();\n    const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();\n    if (\n      frameOfReferenceUID1 === frameOfReferenceUID2 &&\n      options?.useInitialPosition !== false\n    ) {\n      registrationMatrixMat4 = mat4.identity(mat4.create());\n    } else {\n      utilities.calculateViewportsSpatialRegistration(sViewport, tViewport);\n      registrationMatrixMat4 = getSpatialRegistration(\n        targetViewport.viewportId,\n        sourceViewport.viewportId\n      );\n    }\n    if (!registrationMatrixMat4) {\n      return;\n    }\n  }\n\n  // apply the registration matrix to the source viewport's imagePositionPatient\n  // to get the target viewport's imagePositionPatient\n  const targetImagePositionPatientWithRegistrationMatrix = vec3.transformMat4(\n    vec3.create(),\n    sourceImagePositionPatient,\n    registrationMatrixMat4\n  );\n\n  // find the closest image in the target viewport's stack to the\n  // targetImagePositionPatientWithRegistrationMatrix\n  const closestImageIdIndex2 = _getClosestImageIdIndex(\n    targetImagePositionPatientWithRegistrationMatrix,\n    targetImageIds\n  );\n\n  let imageIndexToSet = closestImageIdIndex2.index;\n  if (tViewport instanceof VolumeViewport) {\n    // since in case of volume viewport our stack is reversed, we should\n    // reverse the index as well\n    imageIndexToSet = targetImageIds.length - closestImageIdIndex2.index - 1;\n  }\n\n  if (\n    closestImageIdIndex2.index !== -1 &&\n    tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index\n  ) {\n    await jumpToSlice(tViewport.element, {\n      imageIndex: imageIndexToSet,\n    });\n  }\n}\n\nfunction _getClosestImageIdIndex(targetPoint, imageIds) {\n  // todo: this does not assume orientation yet, but that can be added later\n  // todo: handle multiframe images\n  return imageIds.reduce(\n    (closestImageIdIndex, imageId, index) => {\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n      const distance = vec3.distance(imagePositionPatient, targetPoint);\n\n      if (distance < closestImageIdIndex.distance) {\n        return {\n          distance,\n          index,\n        };\n      }\n      return closestImageIdIndex;\n    },\n    {\n      distance: Infinity,\n      index: -1,\n    }\n  );\n}\n","import { vec3 } from 'gl-matrix';\nimport { Types } from '@cornerstonejs/core';\n\nexport default function areViewportsCoplanar(\n  viewport1: Types.IStackViewport | Types.IVolumeViewport,\n  viewport2: Types.IStackViewport | Types.IVolumeViewport\n): boolean {\n  const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();\n  const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();\n  const dotProducts = vec3.dot(viewPlaneNormal1, viewPlaneNormal2);\n  return Math.abs(dotProducts) > 0.9;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `STACK_NEW_IMAGE`\n * rendering event and calls the `ImageSliceSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createImageSliceSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const stackImageSynchronizer = createSynchronizer(\n    synchronizerName,\n    STACK_NEW_IMAGE,\n    imageSliceSyncCallback,\n    {\n      auxiliaryEventNames: [VOLUME_NEW_IMAGE],\n    }\n  );\n\n  return stackImageSynchronizer;\n}\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\n\n/**\n * Synchronizer callback to synchronize the slab thickness.\n */\nexport default function slabThicknessSyncCallback(\n  _synchronizerInstance,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): void {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n\n  const slabThickness = (\n    sViewport as Types.IVolumeViewport\n  ).getSlabThickness?.();\n  if (!slabThickness) {\n    return;\n  }\n  (tViewport as Types.IVolumeViewport).setSlabThickness?.(slabThickness);\n  tViewport.render();\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback` based on presentation view\n * values and not based on absolute camera positions.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createPresentationViewSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const presentationView = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    slabThicknessSyncCallback\n  );\n\n  return presentationView;\n}\n","import createCameraPositionSynchronizer from './synchronizers/createCameraPositionSynchronizer';\nimport createPresentationViewSynchronizer from './synchronizers/createPresentationViewSynchronizer';\nimport createVOISynchronizer from './synchronizers/createVOISynchronizer';\nimport createZoomPanSynchronizer from './synchronizers/createZoomPanSynchronizer';\nimport createImageSliceSynchronizer from './synchronizers/createImageSliceSynchronizer';\nimport createSlabThicknessSynchronizer from './synchronizers/createSlabThicknessSynchronizer';\n\n// for backward compatibility\nconst createStackImageSynchronizer = createImageSliceSynchronizer;\n\nexport {\n  createCameraPositionSynchronizer,\n  createPresentationViewSynchronizer,\n  createVOISynchronizer,\n  createZoomPanSynchronizer,\n  createImageSliceSynchronizer,\n  createStackImageSynchronizer,\n  createSlabThicknessSynchronizer,\n};\n","import { AnnotationTool } from './base';\n\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAllAnnotations,\n  getAnnotations,\n  removeAnnotation,\n} from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n} from '../drawingSvg';\nimport { state } from '../store';\nimport { Events, MouseBindings, KeyboardBindings } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../types';\nimport { AdvancedMagnifyAnnotation } from '../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport AdvancedMagnifyViewportManager from './AdvancedMagnifyViewportManager';\nimport type { AutoPanCallbackData } from './AdvancedMagnifyViewport';\n\nenum AdvancedMagnifyToolActions {\n  ShowZoomFactorsList = 'showZoomFactorsList',\n}\n\nclass AdvancedMagnifyTool extends AnnotationTool {\n  static toolName;\n  static Actions = AdvancedMagnifyToolActions;\n\n  magnifyViewportManager: AdvancedMagnifyViewportManager;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        magnifyingGlass: {\n          radius: 125, // px\n          zoomFactor: 3,\n          zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n          autoPan: {\n            enabled: true,\n            padding: 10, // px\n          },\n        },\n        actions: {\n          showZoomFactorsList: {\n            method: 'showZoomFactorsList',\n            bindings: [\n              {\n                mouseButton: MouseBindings.Secondary,\n                modifierKey: KeyboardBindings.Shift,\n              },\n            ],\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): AdvancedMagnifyAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n    const { magnifyingGlass: config } = this.configuration;\n    const { radius, zoomFactor, autoPan } = config;\n\n    const canvasHandlePoints = this._getCanvasHandlePoints(\n      canvasPos,\n      radius\n    ) as [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotationUID = csUtils.uuidv4();\n    const magnifyViewportId = csUtils.uuidv4();\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: AdvancedMagnifyAnnotation = {\n      annotationUID,\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        sourceViewportId: viewport.id,\n        magnifyViewportId,\n        zoomFactor,\n        // this means that the last coordinate for the points\n        // is 0 and should not be used for calculations\n        isCanvasAnnotation: true,\n        handles: {\n          points: canvasHandlePoints,\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    this.magnifyViewportManager.createViewport(annotation, {\n      magnifyViewportId,\n      sourceEnabledElement: enabledElement,\n      position: canvasPos,\n      radius,\n      zoomFactor,\n      autoPan: {\n        enabled: autoPan.enabled,\n        padding: autoPan.padding,\n        callback: (data: AutoPanCallbackData) => {\n          const annotationPoints = annotation.data.handles.points;\n          const { canvas: canvasDelta } = data.delta;\n\n          for (let i = 0, len = annotationPoints.length; i < len; i++) {\n            const point = annotationPoints[i];\n            point[0] += canvasDelta[0];\n            point[1] += canvasDelta[1];\n            annotation.invalidated = true;\n          }\n        },\n      },\n    });\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    evt.preventDefault();\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  onSetToolDisabled = () => {\n    // reset\n    this.magnifyViewportManager.dispose();\n    // remove the annotations from the state for that toolGroup\n    const annotations = getAllAnnotations();\n    annotations.forEach((annotation) => {\n      if (annotation.metadata.toolName === this.getToolName()) {\n        removeAnnotation(annotation.annotationUID);\n      }\n    });\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  public isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AdvancedMagnifyAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points;\n\n    const canvasTop = canvasCoordinates[0];\n    const canvasBottom = canvasCoordinates[2];\n    const canvasLeft = canvasCoordinates[3];\n    const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n    const center = [\n      canvasLeft[0] + radius,\n      canvasTop[1] + radius,\n    ] as Types.Point2;\n    const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n\n    if (Math.abs(radiusPoint - radius) < proximity * 2) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    const { points } = data.handles;\n    const handleIndex = points.findIndex((p) => p === handle);\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element, deltaPoints } = eventDetail;\n    const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { points } = annotation.data.handles;\n\n    points.forEach((point) => {\n      point[0] += canvasDelta[0];\n      point[1] += canvasDelta[1];\n    });\n\n    annotation.invalidated = true;\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const canvasDelta = deltaPoints.canvas;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += canvasDelta[0];\n        point[1] += canvasDelta[1];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n\n    const { annotation } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasCoordinates = points;\n    const canvasTop = canvasCoordinates[0];\n    const canvasBottom = canvasCoordinates[2];\n    const canvasLeft = canvasCoordinates[3];\n    const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n    const canvasCenter: Types.Point2 = [\n      canvasLeft[0] + radius,\n      canvasTop[1] + radius,\n    ];\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    const newRadius = getCanvasCircleRadius([\n      canvasCenter,\n      currentCanvasPoints,\n    ]);\n    const newCanvasHandlePoints = this._getCanvasHandlePoints(\n      canvasCenter,\n      newRadius\n    );\n\n    points[0] = newCanvasHandlePoints[0];\n    points[1] = newCanvasHandlePoints[1];\n    points[2] = newCanvasHandlePoints[2];\n    points[3] = newCanvasHandlePoints[3];\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n\n    this.editData = null;\n    return annotation.annotationUID;\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = annotations?.filter(\n      (annotation) =>\n        (<AdvancedMagnifyAnnotation>annotation).data.sourceViewportId ===\n        viewport.id\n    );\n\n    const filteredAnnotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!filteredAnnotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < filteredAnnotations.length; i++) {\n      const annotation = filteredAnnotations[i] as AdvancedMagnifyAnnotation;\n      const { annotationUID, data } = annotation;\n      const { magnifyViewportId, zoomFactor, handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points;\n      const canvasTop = canvasCoordinates[0];\n      const canvasBottom = canvasCoordinates[2];\n      const canvasLeft = canvasCoordinates[3];\n      const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n      const center = [\n        canvasLeft[0] + radius,\n        canvasTop[1] + radius,\n      ] as Types.Point2;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-advancedMagnify`;\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineWidth: 5,\n        },\n        dataId\n      );\n\n      const magnifyViewport =\n        this.magnifyViewportManager.getViewport(magnifyViewportId);\n\n      magnifyViewport.position = center;\n      magnifyViewport.radius = radius;\n      magnifyViewport.zoomFactor = zoomFactor;\n      magnifyViewport.update();\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  // Basic dropdown component that allows the user to select a different zoom factor.\n  // configurations.actions may be changed to use a customized dropdown.\n  public showZoomFactorsList(\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation\n  ) {\n    const { element, currentPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { canvas: canvasPoint } = currentPoints;\n    const viewportElement = element.querySelector(':scope .viewport-element');\n    const currentZoomFactor = annotation.data.zoomFactor;\n    const remove = () => dropdown.parentElement.removeChild(dropdown);\n\n    const dropdown = this._getZoomFactorsListDropdown(\n      currentZoomFactor,\n      (newZoomFactor) => {\n        if (newZoomFactor !== undefined) {\n          annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n          annotation.invalidated = true;\n        }\n\n        remove();\n        viewport.render();\n      }\n    );\n\n    Object.assign(dropdown.style, {\n      left: `${canvasPoint[0]}px`,\n      top: `${canvasPoint[1]}px`,\n    });\n\n    viewportElement.appendChild(dropdown);\n    dropdown.focus();\n  }\n\n  private _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n    const { zoomFactorList } = this.configuration.magnifyingGlass;\n    const dropdown = document.createElement('select');\n\n    dropdown.size = 5;\n    Object.assign(dropdown.style, {\n      width: '50px',\n      position: 'absolute',\n    });\n\n    ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n      dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n    });\n\n    dropdown.addEventListener('change', (evt) => {\n      evt.stopPropagation();\n      onChangeCallback(dropdown.value);\n    });\n\n    dropdown.addEventListener('keydown', (evt) => {\n      const shouldCancel =\n        (evt.keyCode ?? evt.which === 27) ||\n        evt.key?.toLowerCase() === 'escape';\n\n      if (shouldCancel) {\n        evt.stopPropagation();\n        onChangeCallback();\n      }\n    });\n\n    zoomFactorList.forEach((zoomFactor) => {\n      const option = document.createElement('option');\n\n      option.label = zoomFactor;\n      option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n      option.value = zoomFactor;\n      option.defaultSelected = zoomFactor === currentZoomFactor;\n\n      dropdown.add(option);\n    });\n\n    return dropdown;\n  }\n\n  private _getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n    return [\n      [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0], // top\n      [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0], // right\n      [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0], // bottom\n      [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0], // left\n    ];\n  };\n}\n\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\n\nexport { AdvancedMagnifyTool as default };\n","import { BaseTool } from './base';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { ToolGroupManager } from '../store';\nimport {\n  getAnnotations,\n  removeAnnotation,\n} from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\n\nclass AnnotationEraserTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    return this._deleteNearbyAnnotations(evt, 'mouse');\n  };\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    return this._deleteNearbyAnnotations(evt, 'touch');\n  };\n\n  _deleteNearbyAnnotations(\n    evt: EventTypes.InteractionEventType,\n    interactionType: string\n  ): boolean {\n    const { renderingEngineId, viewportId, element, currentPoints } =\n      evt.detail;\n\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(\n      viewportId,\n      renderingEngineId\n    );\n\n    if (!toolGroup) {\n      return false;\n    }\n\n    const tools = toolGroup._toolInstances;\n    const annotationsToRemove = [];\n\n    for (const toolName in tools) {\n      const toolInstance = tools[toolName];\n\n      if (\n        typeof toolInstance.isPointNearTool !== 'function' ||\n        typeof toolInstance.filterInteractableAnnotationsForElement !==\n          'function'\n      ) {\n        continue;\n      }\n\n      const annotations = getAnnotations(toolName, element);\n\n      if (!annotations) {\n        continue;\n      }\n\n      const interactableAnnotations =\n        toolInstance.filterInteractableAnnotationsForElement(\n          element,\n          annotations\n        );\n\n      for (const annotation of interactableAnnotations) {\n        if (\n          toolInstance.isPointNearTool(\n            element,\n            annotation,\n            currentPoints.canvas,\n            10,\n            interactionType\n          )\n        ) {\n          annotationsToRemove.push(annotation.annotationUID);\n        }\n      }\n    }\n\n    for (const annotationUID of annotationsToRemove) {\n      setAnnotationSelected(annotationUID);\n      removeAnnotation(annotationUID);\n    }\n\n    evt.preventDefault();\n\n    return true;\n  }\n}\n\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\n\nimport { AnnotationTool } from './base';\n\nimport {\n  getEnabledElementByIds,\n  getEnabledElement,\n  utilities as csUtils,\n  Enums,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../store/ToolGroupManager';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../stateManagement/annotation/annotationState';\n\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n} from '../drawingSvg';\nimport { state } from '../store';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\n\nimport * as lineSegment from '../utilities/math/line';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../types';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { CONSTANTS } from '@cornerstonejs/core';\n\nconst { RENDERING_DEFAULTS } = CONSTANTS;\n\n// TODO: nested config is weird\ninterface ToolConfiguration {\n  configuration?: {\n    getReferenceLineColor?: (viewportId: string) => string;\n    getReferenceLineControllable?: (viewportId: string) => boolean;\n    getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n    getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n    referenceLinesCenterGapRadius?: number;\n    shadow?: boolean;\n    autopan?: {\n      enabled: boolean;\n      panSize: number;\n    };\n    mobile?: {\n      enabled: boolean;\n      opacity: number;\n      handleRadius: number;\n    };\n  };\n}\n\ninterface CrosshairsAnnotation extends Annotation {\n  data: {\n    handles: {\n      rotationPoints: any[]; // rotation handles, used for rotation interactions\n      slabThicknessPoints: any[]; // slab thickness handles, used for setting the slab thickness\n      activeOperation: number | null; // 0 translation, 1 rotation handles, 2 slab thickness handles\n      toolCenter: Types.Point3;\n    };\n    activeViewportIds: string[]; // a list of the viewport ids connected to the reference lines being translated\n    viewportId: string;\n  };\n}\n\nfunction defaultReferenceLineColor() {\n  return 'rgb(0, 200, 0)';\n}\n\nfunction defaultReferenceLineControllable() {\n  return true;\n}\n\nfunction defaultReferenceLineDraggableRotatable() {\n  return true;\n}\n\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n  return true;\n}\n\nconst OPERATION = {\n  DRAG: 1,\n  ROTATE: 2,\n  SLAB: 3,\n};\n\nconst EPSILON = 1e-3;\n\n/**\n * CrosshairsTool is a tool that provides reference lines between different viewports\n * of a toolGroup. Using crosshairs, you can jump to a specific location in one\n * viewport and the rest of the viewports in the toolGroup will be aligned to that location.\n * Crosshairs have grababble handles that can be used to rotate and translate the\n * reference lines. They can also be used to set the slab thickness of the viewports\n * by modifying the slab thickness handles.\n *\n */\nclass CrosshairsTool extends AnnotationTool {\n  static toolName;\n\n  toolCenter: Types.Point3 = [0, 0, 0]; // NOTE: it is assumed that all the active/linked viewports share the same crosshair center.\n  // This because the rotation operation rotates also all the other active/intersecting reference lines of the same angle\n  _getReferenceLineColor?: (viewportId: string) => string;\n  _getReferenceLineControllable?: (viewportId: string) => boolean;\n  _getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n  _getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n  editData: {\n    annotation: any;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse'],\n      configuration: {\n        shadow: true,\n        // renders a colored circle on top right of the viewports whose color\n        // matches the color of the reference line\n        viewportIndicators: true,\n        // Auto pan is a configuration which will update pan\n        // other viewports in the toolGroup if the center of the crosshairs\n        // is outside of the viewport. This might be useful for the case\n        // when the user is scrolling through an image (usually in the zoomed view)\n        // and the crosshairs will eventually get outside of the viewport for\n        // the other viewports.\n        autoPan: {\n          enabled: false,\n          panSize: 10,\n        },\n        // radius of the area around the intersection of the planes, in which\n        // the reference lines will not be rendered. This is only used when\n        // having 3 viewports in the toolGroup.\n        referenceLinesCenterGapRadius: 20,\n        // actorUIDs for slabThickness application, if not defined, the slab thickness\n        // will be applied to all actors of the viewport\n        filterActorUIDsToSetSlabThickness: [],\n        // blend mode for slabThickness modifications\n        slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n        mobile: {\n          enabled: false,\n          opacity: 0.8,\n          handleRadius: 9,\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._getReferenceLineColor =\n      toolProps.configuration?.getReferenceLineColor ||\n      defaultReferenceLineColor;\n    this._getReferenceLineControllable =\n      toolProps.configuration?.getReferenceLineControllable ||\n      defaultReferenceLineControllable;\n    this._getReferenceLineDraggableRotatable =\n      toolProps.configuration?.getReferenceLineDraggableRotatable ||\n      defaultReferenceLineDraggableRotatable;\n    this._getReferenceLineSlabThicknessControlsOn =\n      toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n      defaultReferenceLineSlabThicknessControlsOn;\n  }\n\n  /**\n   * Gets the camera from the viewport, and adds crosshairs annotation for the viewport\n   * to the annotationManager. If any annotation is found in the annotationManager, it\n   * overwrites it.\n   * @param viewportInfo - The viewportInfo for the viewport to add the crosshairs\n   * @returns viewPlaneNormal and center of viewport canvas in world space\n   */\n  initializeViewport = ({\n    renderingEngineId,\n    viewportId,\n  }: Types.IViewportId): {\n    normal: Types.Point3;\n    point: Types.Point3;\n  } => {\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    const { FrameOfReferenceUID, viewport } = enabledElement;\n    const { element } = viewport;\n    const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n\n    // Check if there is already annotation for this viewport\n    let annotations = this._getAnnotations(enabledElement);\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (annotations.length) {\n      // If found, it will override it by removing the annotation and adding it later\n      removeAnnotation(annotations[0].annotationUID);\n    }\n\n    const annotation = {\n      highlighted: false,\n      metadata: {\n        cameraPosition: <Types.Point3>[...position],\n        cameraFocalPoint: <Types.Point3>[...focalPoint],\n        FrameOfReferenceUID,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          rotationPoints: [], // rotation handles, used for rotation interactions\n          slabThicknessPoints: [], // slab thickness handles, used for setting the slab thickness\n          toolCenter: this.toolCenter,\n        },\n        activeOperation: null, // 0 translation, 1 rotation handles, 2 slab thickness handles\n        activeViewportIds: [], // a list of the viewport ids connected to the reference lines being translated\n        viewportId,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    return {\n      normal: viewPlaneNormal,\n      point: viewport.canvasToWorld([\n        viewport.canvas.clientWidth / 2,\n        viewport.canvas.clientHeight / 2,\n      ]),\n    };\n  };\n\n  _getViewportsInfo = () => {\n    const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    return viewports;\n  };\n\n  onSetToolActive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    // Upon new setVolumes on viewports we need to update the crosshairs\n    // reference points in the new space, so we subscribe to the event\n    // and update the reference points accordingly.\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    this._subscribeToViewportNewVolumeSet(viewportsInfo);\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolPassive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolEnabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolDisabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n\n    // Crosshairs annotations in the state\n    // has no value when the tool is disabled\n    // since viewports can change (zoom, pan, scroll)\n    // between disabled and enabled/active states.\n    // so we just remove the annotations from the state\n    viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const annotations = this._getAnnotations(enabledElement);\n\n      if (annotations?.length) {\n        annotations.forEach((annotation) => {\n          removeAnnotation(annotation.annotationUID);\n        });\n      }\n    });\n  }\n\n  resetCrosshairs = () => {\n    const viewportsInfo = this._getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { viewport } = enabledElement;\n      const { element } = viewport;\n      let annotations = this._getAnnotations(enabledElement);\n      annotations = this.filterInteractableAnnotationsForElement(\n        element,\n        annotations\n      );\n      if (annotations.length) {\n        removeAnnotation(annotations[0].annotationUID);\n      }\n    });\n\n    this.computeToolCenter(viewportsInfo);\n  };\n\n  /**\n   * When activated, it initializes the crosshairs. It begins by computing\n   * the intersection of viewports associated with the crosshairs instance.\n   * When all three views are accessible, the intersection (e.g., crosshairs tool centre)\n   * will be an exact point in space; however, with two viewports, because the\n   * intersection of two planes is a line, it assumes the last view is between the centre\n   * of the two rendering viewports.\n   * @param viewportsInfo Array of viewportInputs which each item containing {viewportId, renderingEngineId}\n   */\n  computeToolCenter = (viewportsInfo): void => {\n    if (!viewportsInfo.length || viewportsInfo.length === 1) {\n      console.warn(\n        'For crosshairs to operate, at least two viewports must be given.'\n      );\n      return;\n    }\n\n    // Todo: handle two same view viewport, or more than 3 viewports\n    const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n\n    // Initialize first viewport\n    const { normal: normal1, point: point1 } =\n      this.initializeViewport(firstViewport);\n\n    // Initialize second viewport\n    const { normal: normal2, point: point2 } =\n      this.initializeViewport(secondViewport);\n\n    let normal3 = <Types.Point3>[0, 0, 0];\n    let point3 = vec3.create();\n\n    // If there are three viewports\n    if (thirdViewport) {\n      ({ normal: normal3, point: point3 } =\n        this.initializeViewport(thirdViewport));\n    } else {\n      // If there are only two views (viewport) associated with the crosshairs:\n      // In this situation, we don't have a third information to find the\n      // exact intersection, and we \"assume\" the third view is looking at\n      // a location in between the first and second view centers\n      vec3.add(point3, point1, point2);\n      vec3.scale(point3, point3, 0.5);\n      vec3.cross(normal3, normal1, normal2);\n    }\n\n    // Planes of each viewport\n    const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n    const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n    const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n\n    // Calculating the intersection of 3 planes\n    // prettier-ignore\n    this.toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane)\n\n    // assuming all viewports are in the same rendering engine\n    const { renderingEngine } = getEnabledElementByIds(\n      viewportsInfo[0].viewportId,\n      viewportsInfo[0].renderingEngineId\n    );\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  /**\n   * addNewAnnotation acts as jump for the crosshairs tool. It is called when\n   * the user clicks on the image. It does not store the annotation in the stateManager though.\n   *\n   * @param evt - The mouse event\n   * @param interactionType - The type of interaction (e.g., mouse, touch, etc.)\n   * @returns Crosshairs annotation\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CrosshairsAnnotation => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { currentPoints } = eventDetail;\n    const jumpWorld = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    this._jump(enabledElement, jumpWorld);\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredAnnotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      annotations\n    );\n\n    // viewport Annotation\n    const { data } = filteredAnnotations[0];\n\n    const { rotationPoints } = data.handles;\n    const viewportIdArray = [];\n    // put all the draggable reference lines in the viewportIdArray\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n      viewportIdArray.push(otherViewport.id);\n      // rotation handles are two per viewport\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n    // set translation operation\n    data.handles.activeOperation = OPERATION.DRAG;\n\n    evt.preventDefault();\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n    return filteredAnnotations[0];\n  };\n\n  cancel = () => {\n    console.log('Not implemented yet');\n  };\n\n  /**\n   * It checks if the mouse click is near crosshairs handles, if yes\n   * it returns the handle location. If the mouse click is not near any\n   * of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let point = this._getRotationHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n\n    point = this._getSlabThicknessHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n\n    // NOTE: handle index or coordinates are not used when dragging.\n    // This because the handle points are actually generated in the renderTool and they are a derivative\n    // from the camera variables of the viewports and of the slab thickness variable.\n    // Remember that the translation and rotation operations operate on the camera\n    // variables and not really on the handles. Similar for the slab thickness.\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * It returns if the canvas point is near the provided crosshairs annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CrosshairsAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  onCameraModified = (evt) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const viewport = enabledElement.viewport as Types.IVolumeViewport;\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport that the camera modified is originating from\n    const viewportAnnotation =\n      filteredToolAnnotations[0] as CrosshairsAnnotation;\n\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    // -- Update the camera of other linked viewports containing the same volumeId that\n    //    have the same camera in case of translation\n    // -- Update the crosshair center in world coordinates in annotation.\n    // This is necessary because other tools can modify the position of the slices,\n    // e.g. stackScroll tool at wheel scroll. So we update the coordinates of the center always here.\n    // NOTE: rotation and slab thickness handles are created/updated in renderTool.\n    const currentCamera = viewport.getCamera();\n    const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n    const deltaCameraPosition: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.position,\n      oldCameraPosition,\n      deltaCameraPosition\n    );\n\n    const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.focalPoint,\n      oldCameraFocalPoint,\n      deltaCameraFocalPoint\n    );\n\n    // updated cached \"previous\" camera position and focal point\n    viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n    viewportAnnotation.metadata.cameraFocalPoint = [\n      ...currentCamera.focalPoint,\n    ];\n\n    const viewportControllable = this._getReferenceLineControllable(\n      viewport.id\n    );\n    const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(\n      viewport.id\n    );\n    if (\n      !csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n      viewportControllable &&\n      viewportDraggableRotatable\n    ) {\n      // Is camera Modified a TRANSLATION or ROTATION?\n      let isRotation = false;\n\n      // This is guaranteed to be the same diff for both position and focal point\n      // if the camera is modified by pan, zoom, or scroll BUT for rotation of\n      // crosshairs handles it will be different.\n      const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(\n        deltaCameraPosition,\n        deltaCameraFocalPoint,\n        1e-3\n      );\n\n      // NOTE: it is a translation if the the focal point and camera position shifts are the same\n      if (!cameraModifiedSameForPosAndFocalPoint) {\n        isRotation = true;\n      }\n\n      const cameraModifiedInPlane =\n        Math.abs(\n          vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)\n        ) < 1e-2;\n\n      // TRANSLATION\n      // NOTE1: if the camera modified is a result of a pan or zoom don't update the crosshair center\n      // NOTE2: rotation handles are updates in renderTool\n      if (!isRotation && !cameraModifiedInPlane) {\n        this.toolCenter[0] += deltaCameraPosition[0];\n        this.toolCenter[1] += deltaCameraPosition[1];\n        this.toolCenter[2] += deltaCameraPosition[2];\n      }\n    }\n\n    // AutoPan modification\n    if (this.configuration.autoPan?.enabled) {\n      const toolGroup = getToolGroupForViewport(\n        viewport.id,\n        renderingEngine.id\n      );\n\n      const otherViewportIds = toolGroup\n        .getViewportIds()\n        .filter((id) => id !== viewport.id);\n\n      otherViewportIds.forEach((viewportId) => {\n        this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n      });\n    }\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredToolAnnotations: Annotations\n  ): boolean => {\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let imageNeedsUpdate = false;\n\n    for (let i = 0; i < filteredToolAnnotations.length; i++) {\n      const annotation = filteredToolAnnotations[i] as CrosshairsAnnotation;\n\n      if (isAnnotationLocked(annotation)) {\n        continue;\n      }\n\n      const { data, highlighted } = annotation;\n      if (!data.handles) {\n        continue;\n      }\n\n      const previousActiveOperation = data.handles.activeOperation;\n      const previousActiveViewportIds =\n        data.activeViewportIds && data.activeViewportIds.length > 0\n          ? [...data.activeViewportIds]\n          : [];\n\n      // This init are necessary, because when we move the mouse they are not cleaned by _endCallback\n      data.activeViewportIds = [];\n      data.handles.activeOperation = null;\n\n      const handleNearImagePoint = this.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        6\n      );\n\n      let near = false;\n      if (handleNearImagePoint) {\n        near = true;\n      } else {\n        near = this._pointNearTool(element, annotation, canvasCoords, 6);\n      }\n\n      const nearToolAndNotMarkedActive = near && !highlighted;\n      const notNearToolAndMarkedActive = !near && highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !highlighted;\n        imageNeedsUpdate = true;\n      } else if (\n        data.handles.activeOperation !== previousActiveOperation ||\n        !this._areViewportIdArraysEqual(\n          data.activeViewportIds,\n          previousActiveViewportIds\n        )\n      ) {\n        imageNeedsUpdate = true;\n      }\n    }\n\n    return imageNeedsUpdate;\n  };\n\n  filterInteractableAnnotationsForElement = (element, annotations) => {\n    if (!annotations || !annotations.length) {\n      return [];\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n\n    const viewportUIDSpecificCrosshairs = annotations.filter(\n      (annotation) => annotation.data.viewportId === viewportId\n    );\n\n    return viewportUIDSpecificCrosshairs;\n  };\n\n  /**\n   * renders the crosshairs lines and handles in the requestAnimationFrame callback\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n    const annotations = this._getAnnotations(enabledElement);\n    const camera = viewport.getCamera();\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!annotations?.length || !viewportAnnotation?.data) {\n      // No annotations yet, and didn't just create it as we likely don't have a FrameOfReference/any data loaded yet.\n      return renderStatus;\n    }\n\n    const annotationUID = viewportAnnotation.annotationUID;\n\n    // Get cameras/canvases for each of these.\n    // -- Get two world positions for this canvas in this line (e.g. the diagonal)\n    // -- Convert these world positions to this canvas.\n    // -- Extend/confine this line to fit in this canvas.\n    // -- Render this line.\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n\n    const data = viewportAnnotation.data;\n    const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    const otherViewportAnnotations =\n      this._filterAnnotationsByUniqueViewportOrientations(\n        enabledElement,\n        annotations\n      );\n\n    const referenceLines = [];\n\n    // get canvas information for points and lines (canvas box, canvas horizontal distances)\n    const canvasBox = [0, 0, clientWidth, clientHeight];\n\n    otherViewportAnnotations.forEach((annotation) => {\n      const { data } = annotation;\n\n      data.handles.toolCenter = this.toolCenter;\n\n      const otherViewport = renderingEngine.getViewport(\n        data.viewportId\n      ) as Types.IVolumeViewport;\n\n      const otherCamera = otherViewport.getCamera();\n\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const otherViewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      const otherViewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      // get coordinates for the reference line\n      const { clientWidth, clientHeight } = otherViewport.canvas;\n      const otherCanvasDiagonalLength = Math.sqrt(\n        clientWidth * clientWidth + clientHeight * clientHeight\n      );\n      const otherCanvasCenter: Types.Point2 = [\n        clientWidth * 0.5,\n        clientHeight * 0.5,\n      ];\n      const otherViewportCenterWorld =\n        otherViewport.canvasToWorld(otherCanvasCenter);\n\n      const direction: Types.Point3 = [0, 0, 0];\n      vtkMath.cross(\n        camera.viewPlaneNormal,\n        otherCamera.viewPlaneNormal,\n        direction\n      );\n      vtkMath.normalize(direction);\n      vtkMath.multiplyScalar(\n        <Types.Point3>direction,\n        otherCanvasDiagonalLength\n      );\n\n      const pointWorld0: Types.Point3 = [0, 0, 0];\n      vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n\n      const pointWorld1: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n\n      const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n\n      const otherViewportCenterCanvas = viewport.worldToCanvas(\n        otherViewportCenterWorld\n      );\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        pointCanvas0,\n        otherViewportCenterCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      // Graphic:\n      // Mid -> SlabThickness handle\n      // Short -> Rotation handle\n      //                           Long\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      // Long --- Mid--- Short--- Center --- Short --- Mid --- Long\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                           Long\n      const canvasVectorFromCenterLong = vec2.create();\n\n      vec2.scale(\n        canvasVectorFromCenterLong,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 100\n      );\n      const canvasVectorFromCenterMid = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterMid,\n        canvasUnitVectorFromCenter,\n        // to maximize the visibility of the controls, they need to be\n        // placed at most at half the length of the shortest side of the canvas.\n        // Chosen 0.4 to have some margin to the edge.\n        canvasMinDimensionLength * 0.4\n      );\n      const canvasVectorFromCenterShort = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterShort,\n        canvasUnitVectorFromCenter,\n        // Chosen 0.2 because is half of 0.4.\n        canvasMinDimensionLength * 0.2\n      );\n      const canvasVectorFromCenterStart = vec2.create();\n      const centerGap = this.configuration.referenceLinesCenterGapRadius;\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        // Don't put a gap if the the third view is missing\n        otherViewportAnnotations.length === 2 ? centerGap : 0\n      );\n\n      // Computing Reference start and end (4 lines per viewport in case of 3 view MPR)\n      const refLinePointOne = vec2.create();\n      const refLinePointTwo = vec2.create();\n      const refLinePointThree = vec2.create();\n      const refLinePointFour = vec2.create();\n\n      let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n      if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n        refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n      vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n      vec2.subtract(\n        refLinePointThree,\n        refLinesCenter,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        refLinePointFour,\n        refLinesCenter,\n        canvasVectorFromCenterLong\n      );\n\n      // Clipping lines to be only included in a box (canvas), we don't want\n      // the lines goes beyond canvas\n      liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n      liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n\n      // Computing rotation handle positions\n      const rotHandleOne = vec2.create();\n      vec2.subtract(\n        rotHandleOne,\n        crosshairCenterCanvas,\n        canvasVectorFromCenterMid\n      );\n\n      const rotHandleTwo = vec2.create();\n      vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n\n      // Computing SlabThickness (st below) position\n\n      // SlabThickness center in canvas\n      let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      // SlabThickness center in world\n      let stHandlesCenterWorld: Types.Point3 = [...this.toolCenter];\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterWorld = [...otherViewportCenterWorld];\n      }\n\n      const worldUnitVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n      vtkMath.normalize(worldUnitVectorFromCenter);\n\n      const { viewPlaneNormal } = camera;\n      // @ts-ignore // Todo: fix after vtk pr merged\n      const { matrix } = vtkMatrixBuilder\n        .buildFromDegree()\n        // @ts-ignore fix after vtk pr merged\n        .rotate(90, viewPlaneNormal);\n\n      const worldUnitOrthoVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vec3.transformMat4(\n        worldUnitOrthoVectorFromCenter,\n        worldUnitVectorFromCenter,\n        matrix\n      );\n\n      const slabThicknessValue = otherViewport.getSlabThickness();\n      const worldOrthoVectorFromCenter: Types.Point3 = [\n        ...worldUnitOrthoVectorFromCenter,\n      ];\n      vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n\n      const worldVerticalRefPoint: Types.Point3 = [0, 0, 0];\n      vtkMath.add(\n        stHandlesCenterWorld,\n        worldOrthoVectorFromCenter,\n        worldVerticalRefPoint\n      );\n\n      // convert vertical world distances in canvas coordinates\n      const canvasVerticalRefPoint = viewport.worldToCanvas(\n        worldVerticalRefPoint\n      );\n\n      // points for slab thickness lines\n      const canvasOrthoVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasOrthoVectorFromCenter,\n        stHandlesCenterCanvas,\n        canvasVerticalRefPoint\n      );\n\n      const stLinePointOne = vec2.create();\n      vec2.subtract(\n        stLinePointOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n\n      const stLinePointTwo = vec2.create();\n      vec2.add(\n        stLinePointTwo,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n\n      liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n\n      const stLinePointThree = vec2.create();\n      vec2.add(\n        stLinePointThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointThree,\n        stLinePointThree,\n        canvasOrthoVectorFromCenter\n      );\n\n      const stLinePointFour = vec2.create();\n      vec2.subtract(\n        stLinePointFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointFour,\n        stLinePointFour,\n        canvasOrthoVectorFromCenter\n      );\n\n      liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n\n      // points for slab thickness handles\n      const stHandleOne = vec2.create();\n      const stHandleTwo = vec2.create();\n      const stHandleThree = vec2.create();\n      const stHandleFour = vec2.create();\n\n      vec2.subtract(\n        stHandleOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n      vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n      vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n      vec2.subtract(\n        stHandleThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n      vec2.add(\n        stHandleFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n\n      referenceLines.push([\n        otherViewport,\n        refLinePointOne,\n        refLinePointTwo,\n        refLinePointThree,\n        refLinePointFour,\n        stLinePointOne,\n        stLinePointTwo,\n        stLinePointThree,\n        stLinePointFour,\n        rotHandleOne,\n        rotHandleTwo,\n        stHandleOne,\n        stHandleTwo,\n        stHandleThree,\n        stHandleFour,\n      ]);\n    });\n\n    const newRtpoints = [];\n    const newStpoints = [];\n    const viewportColor = this._getReferenceLineColor(viewport.id);\n    const color =\n      viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n    referenceLines.forEach((line, lineIndex) => {\n      // get color for the reference line\n      const otherViewport = line[0];\n      const viewportColor = this._getReferenceLineColor(otherViewport.id);\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const selectedViewportId = data.activeViewportIds.find(\n        (id) => id === otherViewport.id\n      );\n\n      let color =\n        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n      let lineWidth = 1;\n\n      const lineActive =\n        data.handles.activeOperation !== null &&\n        data.handles.activeOperation === OPERATION.DRAG &&\n        selectedViewportId;\n\n      if (lineActive) {\n        lineWidth = 2.5;\n      }\n\n      let lineUID = `${lineIndex}`;\n      if (viewportControllable && viewportDraggableRotatable) {\n        lineUID = `${lineIndex}One`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[1],\n          line[2],\n          {\n            color,\n            lineWidth,\n          }\n        );\n\n        lineUID = `${lineIndex}Two`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[3],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      } else {\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[2],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      if (viewportControllable) {\n        color =\n          viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n        const rotHandlesActive =\n          data.handles.activeOperation === OPERATION.ROTATE;\n        const rotationHandles = [line[9], line[10]];\n\n        const rotHandleWorldOne = [\n          viewport.canvasToWorld(line[9]),\n          otherViewport,\n          line[1],\n          line[2],\n        ];\n        const rotHandleWorldTwo = [\n          viewport.canvasToWorld(line[10]),\n          otherViewport,\n          line[3],\n          line[4],\n        ];\n        newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n\n        const slabThicknessHandlesActive =\n          data.handles.activeOperation === OPERATION.SLAB;\n        const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n\n        const slabThicknessHandleWorldOne = [\n          viewport.canvasToWorld(line[11]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldTwo = [\n          viewport.canvasToWorld(line[12]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldThree = [\n          viewport.canvasToWorld(line[13]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        const slabThicknessHandleWorldFour = [\n          viewport.canvasToWorld(line[14]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        newStpoints.push(\n          slabThicknessHandleWorldOne,\n          slabThicknessHandleWorldTwo,\n          slabThicknessHandleWorldThree,\n          slabThicknessHandleWorldFour\n        );\n\n        if (\n          (lineActive || this.configuration.mobile?.enabled) &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw all handles inactive (rotation and slab thickness)\n          let handleUID = `${lineIndex}One`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n          handleUID = `${lineIndex}Two`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (\n          lineActive &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw rotation handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n        } else if (\n          selectedViewportId &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportSlabThicknessControlsOn\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw slab thickness handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (rotHandlesActive && viewportDraggableRotatable) {\n          const handleUID = `${lineIndex}`;\n          // draw all rotation handles as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'circle',\n            }\n          );\n        } else if (\n          slabThicknessHandlesActive &&\n          selectedViewportId &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw only the slab thickness handles for the active viewport as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'rect',\n            }\n          );\n        }\n        const slabThicknessValue = otherViewport.getSlabThickness();\n        if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n          // draw slab thickness reference lines\n          lineUID = `${lineIndex}STOne`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[5],\n            line[6],\n            {\n              color,\n              width: 1,\n              lineDash: [2, 3],\n            }\n          );\n\n          lineUID = `${lineIndex}STTwo`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[7],\n            line[8],\n            {\n              color,\n              width: line,\n              lineDash: [2, 3],\n            }\n          );\n        }\n      }\n    });\n\n    renderStatus = true;\n\n    // Save new handles points in annotation\n    data.handles.rotationPoints = newRtpoints;\n    data.handles.slabThicknessPoints = newStpoints;\n\n    if (this.configuration.viewportIndicators) {\n      // render a circle to pin point the viewport color\n      // TODO: This should not be part of the tool, and definitely not part of the renderAnnotation loop\n      const referenceColorCoordinates = [\n        clientWidth * 0.95,\n        clientHeight * 0.05,\n      ] as Types.Point2;\n      const circleRadius = canvasDiagonalLength * 0.01;\n\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        referenceColorCoordinates,\n        circleRadius,\n        { color, fill: color }\n      );\n    }\n\n    return renderStatus;\n  };\n\n  _getAnnotations = (enabledElement: Types.IEnabledElement) => {\n    const { viewport } = enabledElement;\n    const annotations =\n      getAnnotations(this.getToolName(), viewport.element) || [];\n    const viewportIds = this._getViewportsInfo().map(\n      ({ viewportId }) => viewportId\n    );\n\n    // filter the annotations to only keep that are for this toolGroup\n    const toolGroupAnnotations = annotations.filter((annotation) => {\n      const { data } = annotation;\n      return viewportIds.includes(data.viewportId);\n    });\n\n    return toolGroupAnnotations;\n  };\n\n  _onNewVolume = (e: any) => {\n    const viewportsInfo = this._getViewportsInfo();\n    this.computeToolCenter(viewportsInfo);\n  };\n\n  _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _subscribeToViewportNewVolumeSet(viewports) {\n    viewports.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.addEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _autoPanViewportIfNecessary(\n    viewportId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): void {\n    // 1. Check if the toolCenter is outside the viewport\n    // 2. If it is outside, pan the viewport to fit in the toolCenter\n\n    const viewport = renderingEngine.getViewport(viewportId);\n    const { clientWidth, clientHeight } = viewport.canvas;\n\n    const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    // pan the viewport to fit the toolCenter in the direction\n    // that is out of bounds\n    const pan = this.configuration.autoPan.panSize;\n\n    const visiblePointCanvas = <Types.Point2>[\n      toolCenterCanvas[0],\n      toolCenterCanvas[1],\n    ];\n\n    if (toolCenterCanvas[0] < 0) {\n      visiblePointCanvas[0] = pan;\n    } else if (toolCenterCanvas[0] > clientWidth) {\n      visiblePointCanvas[0] = clientWidth - pan;\n    }\n\n    if (toolCenterCanvas[1] < 0) {\n      visiblePointCanvas[1] = pan;\n    } else if (toolCenterCanvas[1] > clientHeight) {\n      visiblePointCanvas[1] = clientHeight - pan;\n    }\n\n    if (\n      visiblePointCanvas[0] === toolCenterCanvas[0] &&\n      visiblePointCanvas[1] === toolCenterCanvas[1]\n    ) {\n      return;\n    }\n\n    const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n\n    const deltaPointsWorld = [\n      visiblePointWorld[0] - this.toolCenter[0],\n      visiblePointWorld[1] - this.toolCenter[1],\n      visiblePointWorld[2] - this.toolCenter[2],\n    ];\n\n    const camera = viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    viewport.render();\n  }\n\n  _areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n    if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n      return false;\n    }\n\n    viewportIdArrayOne.forEach((id) => {\n      let itemFound = false;\n      for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n        if (id === viewportIdArrayTwo[i]) {\n          itemFound = true;\n          break;\n        }\n      }\n      if (itemFound === false) {\n        return false;\n      }\n    });\n\n    return true;\n  };\n\n  // It filters the viewports with crosshairs and only return viewports\n  // that have different camera.\n  _getAnnotationsForViewportsWithDifferentCameras = (\n    enabledElement,\n    annotations\n  ) => {\n    const { viewportId, renderingEngine, viewport } = enabledElement;\n\n    const otherViewportAnnotations = annotations.filter(\n      (annotation) => annotation.data.viewportId !== viewportId\n    );\n\n    if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, position } = camera;\n\n    const viewportsWithDifferentCameras = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { viewportId } = annotation.data;\n        const targetViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfTarget = targetViewport.getCamera();\n\n        return !(\n          csUtils.isEqual(\n            cameraOfTarget.viewPlaneNormal,\n            viewPlaneNormal,\n            1e-2\n          ) && csUtils.isEqual(cameraOfTarget.position, position, 1)\n        );\n      }\n    );\n\n    return viewportsWithDifferentCameras;\n  };\n\n  _filterViewportWithSameOrientation = (\n    enabledElement,\n    referenceAnnotation,\n    annotations\n  ) => {\n    const { renderingEngine } = enabledElement;\n    const { data } = referenceAnnotation;\n    const viewport = renderingEngine.getViewport(data.viewportId);\n\n    const linkedViewportAnnotations = annotations.filter((annotation) => {\n      const { data } = annotation;\n      const otherViewport = renderingEngine.getViewport(data.viewportId);\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n\n      return otherViewportControllable === true;\n    });\n\n    if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherViewportsAnnotationsWithSameCameraDirection =\n      linkedViewportAnnotations.filter((annotation) => {\n        const { viewportId } = annotation.data;\n        const otherViewport = renderingEngine.getViewport(viewportId);\n        const otherCamera = otherViewport.getCamera();\n        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n        vtkMath.normalize(otherViewPlaneNormal);\n\n        return (\n          csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n          csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2)\n        );\n      });\n\n    return otherViewportsAnnotationsWithSameCameraDirection;\n  };\n\n  _filterAnnotationsByUniqueViewportOrientations = (\n    enabledElement,\n    annotations\n  ) => {\n    const { renderingEngine, viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable === true\n        );\n      }\n    );\n\n    const otherViewportsAnnotationsWithUniqueCameras = [];\n    // Iterate first on other viewport from the same scene linked\n    for (\n      let i = 0;\n      i < otherLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable !== true\n        );\n      }\n    );\n\n    // Iterate second on other viewport from the same scene non linked\n    for (\n      let i = 0;\n      i < otherNonLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    // Iterate on all the viewport\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n      const annotation = otherViewportAnnotations[i];\n      if (\n        otherViewportsAnnotationsWithUniqueCameras.some(\n          (element) => element === annotation\n        )\n      ) {\n        continue;\n      }\n\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    return otherViewportsAnnotationsWithUniqueCameras;\n  };\n\n  _checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n    const actors = viewport.getActors();\n    const otherViewportActors = otherViewport.getActors();\n\n    let sameScene = true;\n\n    actors.forEach((actor) => {\n      if (\n        actors.length !== otherViewportActors.length ||\n        otherViewportActors.find(({ uid }) => uid === actor.uid) === undefined\n      ) {\n        sameScene = false;\n      }\n    });\n\n    return sameScene;\n  };\n\n  _jump = (enabledElement, jumpWorld) => {\n    state.isInteractingWithTool = true;\n    const { viewport, renderingEngine } = enabledElement;\n\n    const annotations = this._getAnnotations(enabledElement);\n\n    const delta: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n\n    // TRANSLATION\n    // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n\n        const sameScene = this._checkIfViewportsRenderingSameScene(\n          viewport,\n          otherViewport\n        );\n\n        return (\n          this._getReferenceLineControllable(otherViewport.id) &&\n          this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n          sameScene\n        );\n      }\n    );\n\n    if (viewportsAnnotationsToUpdate.length === 0) {\n      state.isInteractingWithTool = false;\n      return false;\n    }\n\n    this._applyDeltaShiftToSelectedViewportCameras(\n      renderingEngine,\n      viewportsAnnotationsToUpdate,\n      delta\n    );\n\n    state.isInteractingWithTool = false;\n\n    return true;\n  };\n\n  _activateModify = (element) => {\n    // mobile sometimes has lingering interaction even when touchEnd triggers\n    // this check allows for multiple handles to be active which doesn't affect\n    // tool usage.\n    state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    this.editData.annotation.data.handles.activeOperation = null;\n    this.editData.annotation.data.activeViewportIds = [];\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const delta = eventDetail.deltaPoints.world;\n\n    if (\n      Math.abs(delta[0]) < 1e-3 &&\n      Math.abs(delta[1]) < 1e-3 &&\n      Math.abs(delta[2]) < 1e-3\n    ) {\n      return;\n    }\n\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const annotations = this._getAnnotations(\n      enabledElement\n    ) as CrosshairsAnnotation[];\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    const { handles } = viewportAnnotation.data;\n    const { currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n\n    if (handles.activeOperation === OPERATION.DRAG) {\n      // TRANSLATION\n      // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      this._applyDeltaShiftToSelectedViewportCameras(\n        renderingEngine,\n        viewportsAnnotationsToUpdate,\n        delta\n      );\n    } else if (handles.activeOperation === OPERATION.ROTATE) {\n      // ROTATION\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true\n          );\n        }\n      );\n\n      const dir1 = vec2.create();\n      const dir2 = vec2.create();\n\n      const center: Types.Point3 = [\n        this.toolCenter[0],\n        this.toolCenter[1],\n        this.toolCenter[2],\n      ];\n\n      const centerCanvas = viewport.worldToCanvas(center);\n\n      const finalPointCanvas = eventDetail.currentPoints.canvas;\n      const originalPointCanvas = vec2.create();\n      vec2.sub(\n        originalPointCanvas,\n        finalPointCanvas,\n        eventDetail.deltaPoints.canvas\n      );\n      vec2.sub(dir1, originalPointCanvas, <vec2>centerCanvas);\n      vec2.sub(dir2, finalPointCanvas, <vec2>centerCanvas);\n\n      let angle = vec2.angle(dir1, dir2);\n\n      if (\n        this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)\n      ) {\n        angle *= -1;\n      }\n\n      // Rounding the angle to allow rotated handles to be undone\n      // If we don't round and rotate handles clockwise by 0.0131233 radians,\n      // there's no assurance that the counter-clockwise rotation occurs at\n      // precisely -0.0131233, resulting in the drawn annotations being lost.\n      angle = Math.round(angle * 100) / 100;\n\n      const rotationAxis = viewport.getCamera().viewPlaneNormal;\n      // @ts-ignore : vtkjs incorrect typing\n      const { matrix } = vtkMatrixBuilder\n        .buildFromRadian()\n        .translate(center[0], center[1], center[2])\n        // @ts-ignore\n        .rotate(angle, rotationAxis) //todo: why we are passing\n        .translate(-center[0], -center[1], -center[2]);\n\n      const otherViewportsIds = [];\n      // update camera for the other viewports.\n      // NOTE: The lines then are rendered by the onCameraModified\n      viewportsAnnotationsToUpdate.forEach((annotation) => {\n        const { data } = annotation;\n        data.handles.toolCenter = center;\n\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const camera = otherViewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n\n        viewUp[0] += position[0];\n        viewUp[1] += position[1];\n        viewUp[2] += position[2];\n\n        vec3.transformMat4(focalPoint, focalPoint, matrix);\n        vec3.transformMat4(position, position, matrix);\n        vec3.transformMat4(viewUp, viewUp, matrix);\n\n        viewUp[0] -= position[0];\n        viewUp[1] -= position[1];\n        viewUp[2] -= position[2];\n\n        otherViewport.setCamera({\n          position,\n          viewUp,\n          focalPoint,\n        });\n        otherViewportsIds.push(otherViewport.id);\n      });\n      renderingEngine.renderViewports(otherViewportsIds);\n    } else if (handles.activeOperation === OPERATION.SLAB) {\n      // SLAB THICKNESS\n      // this should be just the active one under the mouse,\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const referenceAnnotations = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportSlabThicknessControlsOn =\n            this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportSlabThicknessControlsOn === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      if (referenceAnnotations.length === 0) {\n        return;\n      }\n      const viewportsAnnotationsToUpdate =\n        this._filterViewportWithSameOrientation(\n          enabledElement,\n          referenceAnnotations[0],\n          annotations\n        );\n\n      const viewportsIds = [];\n      viewportsIds.push(viewport.id);\n      viewportsAnnotationsToUpdate.forEach(\n        (annotation: CrosshairsAnnotation) => {\n          const { data } = annotation;\n\n          const otherViewport = renderingEngine.getViewport(\n            data.viewportId\n          ) as Types.IVolumeViewport;\n          const camera = otherViewport.getCamera();\n          const normal = camera.viewPlaneNormal;\n\n          const dotProd = vtkMath.dot(delta, normal);\n          const projectedDelta: Types.Point3 = [...normal];\n          vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n          if (\n            Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3\n          ) {\n            const mod = Math.sqrt(\n              projectedDelta[0] * projectedDelta[0] +\n                projectedDelta[1] * projectedDelta[1] +\n                projectedDelta[2] * projectedDelta[2]\n            );\n\n            const currentPoint = eventDetail.lastPoints.world;\n            const direction: Types.Point3 = [0, 0, 0];\n\n            const currentCenter: Types.Point3 = [\n              this.toolCenter[0],\n              this.toolCenter[1],\n              this.toolCenter[2],\n            ];\n\n            // use this.toolCenter only if viewportDraggableRotatable\n            const viewportDraggableRotatable =\n              this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n              const { rotationPoints } = this.editData.annotation.data.handles;\n              // Todo: what is a point uid?\n              const otherViewportRotationPoints = rotationPoints.filter(\n                (point) => point[1].uid === otherViewport.id\n              );\n              if (otherViewportRotationPoints.length === 2) {\n                const point1 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[0][3]\n                );\n                const point2 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[1][3]\n                );\n                vtkMath.add(point1, point2, currentCenter);\n                vtkMath.multiplyScalar(<Types.Point3>currentCenter, 0.5);\n              }\n            }\n\n            vtkMath.subtract(currentPoint, currentCenter, direction);\n            const dotProdDirection = vtkMath.dot(direction, normal);\n            const projectedDirection: Types.Point3 = [...normal];\n            vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n            const normalizedProjectedDirection: Types.Point3 = [\n              projectedDirection[0],\n              projectedDirection[1],\n              projectedDirection[2],\n            ];\n            vec3.normalize(\n              normalizedProjectedDirection,\n              normalizedProjectedDirection\n            );\n            const normalizedProjectedDelta: Types.Point3 = [\n              projectedDelta[0],\n              projectedDelta[1],\n              projectedDelta[2],\n            ];\n            vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n\n            let slabThicknessValue = otherViewport.getSlabThickness();\n            if (\n              csUtils.isOpposite(\n                normalizedProjectedDirection,\n                normalizedProjectedDelta,\n                1e-3\n              )\n            ) {\n              slabThicknessValue -= mod;\n            } else {\n              slabThicknessValue += mod;\n            }\n\n            slabThicknessValue = Math.abs(slabThicknessValue);\n            slabThicknessValue = Math.max(\n              RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS,\n              slabThicknessValue\n            );\n\n            const near = this._pointNearReferenceLine(\n              viewportAnnotation,\n              canvasCoords,\n              6,\n              otherViewport\n            );\n\n            if (near) {\n              slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            }\n\n            // We want to set the slabThickness for the viewport's actors but\n            // since the crosshairs tool instance has configuration regarding which\n            // actorUIDs (in case of volume -> actorUID = volumeIds) to set the\n            // slabThickness for, we need to delegate the slabThickness setting\n            // to the crosshairs tool instance of the toolGroup since configurations\n            // exist on the toolInstance and each toolGroup has its own crosshairs\n            // tool instance (Otherwise, we would need to set this filterActorUIDsToSetSlabThickness at\n            // the viewport level which makes tool and viewport state convoluted).\n            const toolGroup = getToolGroupForViewport(\n              otherViewport.id,\n              renderingEngine.id\n            );\n            const crosshairsInstance = toolGroup.getToolInstance(\n              this.getToolName()\n            );\n            crosshairsInstance.setSlabThickness(\n              otherViewport,\n              slabThicknessValue\n            );\n\n            viewportsIds.push(otherViewport.id);\n          }\n        }\n      );\n      renderingEngine.renderViewports(viewportsIds);\n    }\n  };\n\n  setSlabThickness(viewport, slabThickness) {\n    let actorUIDs;\n    const { filterActorUIDsToSetSlabThickness } = this.configuration;\n    if (\n      filterActorUIDsToSetSlabThickness &&\n      filterActorUIDsToSetSlabThickness.length > 0\n    ) {\n      actorUIDs = filterActorUIDsToSetSlabThickness;\n    }\n\n    let blendModeToUse = this.configuration.slabThicknessBlendMode;\n    if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n      blendModeToUse = Enums.BlendModes.COMPOSITE;\n    }\n\n    const immediate = false;\n    viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n    viewport.setSlabThickness(slabThickness, actorUIDs);\n  }\n\n  _isClockWise(a, b, c) {\n    // return true if the rotation is clockwise\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n  }\n\n  _applyDeltaShiftToSelectedViewportCameras(\n    renderingEngine,\n    viewportsAnnotationsToUpdate,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    viewportsAnnotationsToUpdate.forEach((annotation) => {\n      this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n    });\n  }\n\n  _applyDeltaShiftToViewportCamera(\n    renderingEngine: Types.IRenderingEngine,\n    annotation,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    const { data } = annotation;\n\n    const viewport = renderingEngine.getViewport(data.viewportId);\n    const camera = viewport.getCamera();\n    const normal = camera.viewPlaneNormal;\n\n    // Project delta over camera normal\n    // (we don't need to pan, we need only to scroll the camera as in the wheel stack scroll tool)\n    const dotProd = vtkMath.dot(delta, normal);\n    const projectedDelta: Types.Point3 = [...normal];\n    vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n    if (\n      Math.abs(projectedDelta[0]) > 1e-3 ||\n      Math.abs(projectedDelta[1]) > 1e-3 ||\n      Math.abs(projectedDelta[2]) > 1e-3\n    ) {\n      const newFocalPoint: Types.Point3 = [0, 0, 0];\n      const newPosition: Types.Point3 = [0, 0, 0];\n\n      vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n      vtkMath.add(camera.position, projectedDelta, newPosition);\n\n      viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n      });\n      viewport.render();\n    }\n  }\n\n  _pointNearReferenceLine = (\n    annotation,\n    canvasCoords,\n    proximity,\n    lineViewport\n  ) => {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      if (otherViewport.id !== lineViewport.id) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        return true;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    return false;\n  };\n\n  _getRotationHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length; i++) {\n      const point = rotationPoints[i][0];\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportDraggableRotatable) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.ROTATE;\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _getSlabThicknessHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { slabThicknessPoints } = data.handles;\n\n    for (let i = 0; i < slabThicknessPoints.length; i++) {\n      const point = slabThicknessPoints[i][0];\n      const otherViewport = slabThicknessPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n      if (!viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.SLAB;\n\n        data.activeViewportIds = [otherViewport.id];\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _pointNearTool(element, annotation, canvasCoords, proximity) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const { data } = annotation;\n\n    const { rotationPoints } = data.handles;\n    const { slabThicknessPoints } = data.handles;\n    const viewportIdArray = [];\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id);\n        data.handles.activeOperation = OPERATION.DRAG;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n      const otherViewport = slabThicknessPoints[i][1];\n      if (viewportIdArray.find((id) => id === otherViewport.id)) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const stPointLineCanvas1 = slabThicknessPoints[i][2];\n      const stPointLineCanvas2 = slabThicknessPoints[i][3];\n\n      const centerCanvas = vec2.create();\n      vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n      vec2.scale(centerCanvas, centerCanvas, 0.5);\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        stPointLineCanvas1,\n        centerCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      const canvasVectorFromCenterStart = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 0.05\n      );\n\n      const stPointLineCanvas1Start = vec2.create();\n      const stPointLineCanvas2Start = vec2.create();\n      vec2.add(\n        stPointLineCanvas1Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        stPointLineCanvas2Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n\n      const lineSegment1 = {\n        start: {\n          x: stPointLineCanvas1Start[0],\n          y: stPointLineCanvas1Start[1],\n        },\n        end: {\n          x: stPointLineCanvas1[0],\n          y: stPointLineCanvas1[1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: stPointLineCanvas2Start[0],\n          y: stPointLineCanvas2Start[1],\n        },\n        end: {\n          x: stPointLineCanvas2[0],\n          y: stPointLineCanvas2[1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id); // we still need this to draw inactive slab thickness handles\n        data.handles.activeOperation = null; // no operation\n      }\n\n      // slab thickness handles are in couples\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n\n    this.editData = {\n      annotation,\n    };\n\n    return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n  }\n}\n\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { type Types, utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport jumpToWorld from '../utilities/viewport/jumpToWorld';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\n\n/**\n * On a Maximum Intensity Projection (MIP) viewport, MIPJumpToClickTool allows the\n * user to click on a point in the MIP and the targetViewportIdS (provided in the\n * tool configuration) will be scrolled (jumped) to the location of the point with\n * the highest intensity value in the MIP.\n */\nclass MIPJumpToClickTool extends BaseTool {\n  static toolName;\n\n  _bounds: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        targetViewportIds: [],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Handles the click event, and move the camera's focal point the brightest\n   * point that is in the line of sight of camera. This function 1) search for the\n   * brightest point in the line of sight, 2) move the camera to that point,\n   * this triggers a cameraModified event which then 4) moves all other synced\n   * viewports and their crosshairs.\n   *\n   * @param evt - click event\n   */\n  mouseClickCallback(evt): void {\n    const { element, currentPoints } = evt.detail;\n\n    // 1. Getting the enabled element\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    // 2. Getting the target volume that is clicked on\n    const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n\n    if (!targetId.startsWith('volumeId')) {\n      throw new Error(\n        `MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`\n      );\n    }\n\n    const volumeId = utilities.getVolumeId(targetId);\n\n    // 3. Criteria function to search for the point (maximum intensity)\n    let maxIntensity = -Infinity;\n    const maxFn = (intensity, point) => {\n      if (intensity > maxIntensity) {\n        maxIntensity = intensity;\n        return point;\n      }\n    };\n\n    // 4. Search for the brightest point location in the line of sight\n    const brightestPoint = getPointInLineOfSightWithCriteria(\n      viewport as Types.IVolumeViewport,\n      currentPoints.world,\n      volumeId,\n      maxFn\n    );\n\n    if (!brightestPoint || !brightestPoint.length) {\n      return;\n    }\n\n    const { targetViewportIds, toolGroupId } = this.configuration;\n    // TODO - consider making this a utility\n    const viewports = renderingEngine.getViewports().filter((vp) => {\n      if (targetViewportIds?.indexOf(vp.id) >= 0) {\n        return true;\n      }\n      const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n      if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n        return true;\n      }\n      return false;\n    });\n\n    // 6. Update all the targetedViewports to jump\n    viewports.forEach((viewport) => {\n      // Todo: current limitation is that we cannot jump in viewports\n      // that don't belong to the renderingEngine of the source clicked viewport\n      if (viewport instanceof VolumeViewport) {\n        jumpToWorld(viewport, brightestPoint);\n      } else {\n        console.warn(\n          'Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport'\n        );\n      }\n    });\n  }\n}\n\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\n\nimport { getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store';\nimport { Enums } from '@cornerstonejs/core';\n\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { IPoints } from '../types';\n\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\n\nclass MagnifyTool extends BaseTool {\n  static toolName;\n  _bounds: any;\n  editData: {\n    referencedImageId: string;\n    viewportIdsToRender: string[];\n    enabledElement: Types.IEnabledElement;\n    renderingEngine: Types.IRenderingEngine;\n    currentPoints: IPoints;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        magnifySize: 10, // parallel scale , higher more zoom\n        magnifyWidth: 250, //px\n        magnifyHeight: 250, //px\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  private _hasBeenRemoved = false;\n\n  _getReferencedImageId(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    }\n\n    return referencedImageId;\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (!(viewport instanceof StackViewport)) {\n      throw new Error('MagnifyTool only works on StackViewports');\n    }\n\n    const referencedImageId = this._getReferencedImageId(viewport);\n\n    if (!referencedImageId) {\n      throw new Error(\n        'MagnifyTool: No referenced image id found, reconstructed planes not supported yet'\n      );\n    }\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      referencedImageId,\n      viewportIdsToRender,\n      enabledElement,\n      renderingEngine,\n      currentPoints,\n    };\n\n    this._createMagnificationViewport();\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType) => {\n    this.preMouseDownCallback(evt);\n  };\n\n  _createMagnificationViewport = () => {\n    const {\n      enabledElement,\n      referencedImageId,\n      viewportIdsToRender,\n      renderingEngine,\n      currentPoints,\n    } = this.editData;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    const viewportProperties = viewport.getProperties();\n\n    const { canvas: canvasPos, world: worldPos } = currentPoints;\n\n    let magnifyToolElement: HTMLDivElement;\n\n    magnifyToolElement = element.querySelector('.magnifyTool');\n    if (magnifyToolElement === null) {\n      const magnifyElement = document.createElement('div');\n\n      magnifyElement.classList.add('magnifyTool');\n\n      magnifyElement.style.display = 'block';\n      magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n      magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n      magnifyElement.style.position = 'absolute';\n\n      magnifyToolElement = magnifyElement;\n\n      const viewportElement = element.querySelector('.viewport-element');\n      viewportElement.appendChild(magnifyElement);\n\n      const viewportInput = {\n        viewportId: MAGNIFY_VIEWPORT_ID,\n        type: Enums.ViewportType.STACK,\n        element: magnifyToolElement as HTMLDivElement,\n      };\n\n      renderingEngine.enableElement(viewportInput);\n    }\n\n    // Todo: use CSS transform instead of setting top and left for better performance\n    magnifyToolElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyToolElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const magnifyViewport = renderingEngine.getViewport(\n      MAGNIFY_VIEWPORT_ID\n    ) as Types.IStackViewport;\n    magnifyViewport.setStack([referencedImageId]).then(() => {\n      if (this._hasBeenRemoved) {\n        return;\n      }\n      // match the original viewport voi range\n      magnifyViewport.setProperties(viewportProperties);\n\n      // Use the original viewport for the base for parallelScale\n      const { parallelScale } = viewport.getCamera();\n\n      const { focalPoint, position, viewPlaneNormal } =\n        magnifyViewport.getCamera();\n\n      const distance = Math.sqrt(\n        Math.pow(focalPoint[0] - position[0], 2) +\n          Math.pow(focalPoint[1] - position[1], 2) +\n          Math.pow(focalPoint[2] - position[2], 2)\n      );\n\n      const updatedFocalPoint = <Types.Point3>[\n        worldPos[0],\n        worldPos[1],\n        worldPos[2],\n      ];\n\n      const updatedPosition = <Types.Point3>[\n        updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n        updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n        updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n      ];\n\n      magnifyViewport.setCamera({\n        parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n        focalPoint: updatedFocalPoint,\n        position: updatedPosition,\n      });\n      magnifyViewport.render();\n    });\n\n    magnifyToolElement.style.display = 'block';\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n\n    const { deltaPoints, element, currentPoints } = eventDetail;\n    const deltaPointsWorld = deltaPoints.world;\n    const canvasPos = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n\n    const magnifyElement = element.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    if (!magnifyElement) {\n      return;\n    }\n\n    magnifyElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const { focalPoint, position } = magnifyViewport.getCamera();\n\n    const updatedPosition = <Types.Point3>[\n      position[0] + deltaPointsWorld[0],\n      position[1] + deltaPointsWorld[1],\n      position[2] + deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] + deltaPointsWorld[0],\n      focalPoint[1] + deltaPointsWorld[1],\n      focalPoint[2] + deltaPointsWorld[2],\n    ];\n\n    magnifyViewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    magnifyViewport.render();\n  };\n\n  _dragEndCallback = (evt: EventTypes.InteractionEventType) => {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n\n    const viewportElement = element.querySelector('.viewport-element');\n\n    const magnifyToolElement = viewportElement.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    viewportElement.removeChild(magnifyToolElement);\n\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n    this._hasBeenRemoved = true;\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n    this._hasBeenRemoved = false;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n}\n\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\n\nimport { BaseTool } from './base';\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElementByIds,\n  getRenderingEngines,\n} from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\n\nconst OverlayMarkerType = {\n  ANNOTATED_CUBE: 1,\n  AXES: 2,\n  CUSTOM: 3,\n};\n\n/**\n * The OrientationMarker is a tool that includes an orientation marker in viewports\n * when activated\n */\nclass OrientationMarkerTool extends BaseTool {\n  static toolName;\n  static CUBE = 1;\n  static AXIS = 2;\n  static VTPFILE = 3;\n  orientationMarkers;\n  polyDataURL;\n  _resizeObservers = new Map();\n\n  static OVERLAY_MARKER_TYPES = OverlayMarkerType;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      configuration: {\n        orientationWidget: {\n          enabled: true,\n          viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n          viewportSize: 0.15,\n          minPixelSize: 100,\n          maxPixelSize: 300,\n        },\n        overlayMarkerType:\n          OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n        overlayConfiguration: {\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n            faceProperties: {\n              xPlus: { text: 'R', faceColor: '#ffff00', faceRotation: 90 },\n              xMinus: { text: 'L', faceColor: '#ffff00', faceRotation: 270 },\n              yPlus: {\n                text: 'P',\n                faceColor: '#00ffff',\n                fontColor: 'white',\n                faceRotation: 180,\n              },\n              yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n              zPlus: { text: 'S' },\n              zMinus: { text: 'I' },\n            },\n            defaultStyle: {\n              fontStyle: 'bold',\n              fontFamily: 'Arial',\n              fontColor: 'black',\n              fontSizeScale: (res) => res / 2,\n              faceColor: '#0000ff',\n              edgeThickness: 0.1,\n              edgeColor: 'black',\n              resolution: 400,\n            },\n          },\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n            polyDataURL:\n              'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.orientationMarkers = {};\n  }\n\n  onSetToolEnabled = (): void => {\n    this.initViewports();\n    this._subscribeToViewportEvents();\n  };\n\n  onSetToolActive = (): void => {\n    this.initViewports();\n\n    this._subscribeToViewportEvents();\n  };\n\n  onSetToolDisabled = (): void => {\n    this.cleanUpData();\n    this._unsubscribeToViewportNewVolumeSet();\n  };\n\n  _getViewportsInfo = () => {\n    const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    return viewports;\n  };\n\n  resize = (viewportId) => {\n    const orientationMarker = this.orientationMarkers[viewportId];\n    if (!orientationMarker) {\n      return;\n    }\n\n    const { orientationWidget } = orientationMarker;\n    orientationWidget.updateViewport();\n  };\n\n  _unsubscribeToViewportNewVolumeSet() {\n    const unsubscribe = () => {\n      const viewportsInfo = this._getViewportsInfo();\n      viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const { viewport } = getEnabledElementByIds(\n          viewportId,\n          renderingEngineId\n        );\n        const { element } = viewport;\n\n        element.removeEventListener(\n          Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n          this.initViewports.bind(this)\n        );\n\n        const resizeObserver = this._resizeObservers.get(viewportId);\n        resizeObserver.unobserve(element);\n      });\n    };\n\n    eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n      if (evt.detail.toolGroupId !== this.toolGroupId) {\n        return;\n      }\n      unsubscribe();\n      this.initViewports();\n    });\n  }\n\n  _subscribeToViewportEvents() {\n    const subscribeToElementResize = () => {\n      const viewportsInfo = this._getViewportsInfo();\n      viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const { viewport } = getEnabledElementByIds(\n          viewportId,\n          renderingEngineId\n        );\n        const { element } = viewport;\n        this.initViewports();\n\n        element.addEventListener(\n          Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n          this.initViewports.bind(this)\n        );\n\n        const resizeObserver = new ResizeObserver(() => {\n          // Todo: i wish there was a better way to do this\n          setTimeout(() => {\n            const { viewport } = getEnabledElementByIds(\n              viewportId,\n              renderingEngineId\n            );\n            this.resize(viewportId);\n            viewport.render();\n          }, 100);\n        });\n\n        resizeObserver.observe(element);\n\n        this._resizeObservers.set(viewportId, resizeObserver);\n      });\n    };\n\n    subscribeToElementResize();\n\n    eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n      if (evt.detail.toolGroupId !== this.toolGroupId) {\n        return;\n      }\n\n      subscribeToElementResize();\n      this.initViewports();\n    });\n  }\n\n  private cleanUpData() {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n    const viewports = renderingEngine.getViewports();\n\n    viewports.forEach((viewport) => {\n      const orientationMarker = this.orientationMarkers[viewport.id];\n      if (!orientationMarker) {\n        return;\n      }\n\n      const { actor, orientationWidget } = orientationMarker;\n      orientationWidget?.setEnabled(false);\n      orientationWidget?.delete();\n      actor?.delete();\n\n      const renderWindow = viewport\n        .getRenderingEngine()\n        .offscreenMultiRenderWindow.getRenderWindow();\n      renderWindow.render();\n      viewport.getRenderingEngine().render();\n\n      delete this.orientationMarkers[viewport.id];\n    });\n  }\n\n  private initViewports() {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    if (!renderingEngine) {\n      return;\n    }\n\n    let viewports = renderingEngine.getViewports();\n    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n\n    viewports.forEach((viewport) => {\n      if (!viewport.getWidget(this.getToolName())) {\n        this.addAxisActorInViewport(viewport);\n      }\n    });\n  }\n\n  async addAxisActorInViewport(viewport) {\n    const viewportId = viewport.id;\n    const type = this.configuration.overlayMarkerType;\n\n    const overlayConfiguration = this.configuration.overlayConfiguration[type];\n\n    if (this.orientationMarkers[viewportId]) {\n      const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n      // remove the previous one\n      viewport.getRenderer().removeActor(actor);\n      orientationWidget.setEnabled(false);\n    }\n\n    let actor;\n    if (type === 1) {\n      actor = this.createAnnotationCube(overlayConfiguration);\n    } else if (type === 2) {\n      actor = vtkAxesActor.newInstance();\n    } else if (type === 3) {\n      actor = await this.createCustomActor();\n    }\n\n    const renderer = viewport.getRenderer();\n    const renderWindow = viewport\n      .getRenderingEngine()\n      .offscreenMultiRenderWindow.getRenderWindow();\n\n    const {\n      enabled,\n      viewportCorner,\n      viewportSize,\n      minPixelSize,\n      maxPixelSize,\n    } = this.configuration.orientationWidget;\n\n    const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n      actor,\n      interactor: renderWindow.getInteractor(),\n      parentRenderer: renderer,\n    });\n\n    orientationWidget.setEnabled(enabled);\n    orientationWidget.setViewportCorner(viewportCorner);\n    orientationWidget.setViewportSize(viewportSize);\n    orientationWidget.setMinPixelSize(minPixelSize);\n    orientationWidget.setMaxPixelSize(maxPixelSize);\n\n    orientationWidget.updateMarkerOrientation();\n    this.orientationMarkers[viewportId] = {\n      orientationWidget,\n      actor,\n    };\n    viewport.addWidget(this.getToolName(), orientationWidget);\n    renderWindow.render();\n    viewport.getRenderingEngine().render();\n  }\n\n  private async createCustomActor() {\n    const url =\n      this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n        .polyDataURL;\n\n    const response = await fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    const vtpReader = vtkXMLPolyDataReader.newInstance();\n    vtpReader.parseAsArrayBuffer(arrayBuffer);\n    vtpReader.update();\n\n    const polyData = vtkPolyData.newInstance();\n    polyData.shallowCopy(vtpReader.getOutputData());\n    polyData.getPointData().setActiveScalars('Color');\n    const mapper = vtkMapper.newInstance();\n    mapper.setInputData(polyData);\n    mapper.setColorModeToDirectScalars();\n\n    const actor = vtkActor.newInstance();\n    actor.setMapper(mapper);\n    actor.rotateZ(180);\n    return actor;\n  }\n\n  private createAnnotationCube(overlayConfiguration: any) {\n    const actor = vtkAnnotatedCubeActor.newInstance();\n    actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n    actor.setXPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.xPlus,\n    });\n    actor.setXMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.xMinus,\n    });\n    actor.setYPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.yPlus,\n    });\n    actor.setYMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.yMinus,\n    });\n    actor.setZPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.zPlus,\n    });\n    actor.setZMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.zMinus,\n    });\n    return actor;\n  }\n\n  async createAnnotatedCubeActor() {\n    const axes = vtkAnnotatedCubeActor.newInstance();\n    const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n\n    axes.setDefaultStyle(defaultStyle);\n\n    Object.keys(faceProperties).forEach((key) => {\n      const methodName = `set${\n        key.charAt(0).toUpperCase() + key.slice(1)\n      }FaceProperty`;\n      axes[methodName](faceProperties[key]);\n    });\n\n    return axes;\n  }\n}\n\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { vec3 } from 'gl-matrix';\nimport {\n  metaData,\n  CONSTANTS,\n  getRenderingEngine,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\n\nimport { getToolGroup } from '../store/ToolGroupManager';\n\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n} from '../types';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\n\nconst { EPSILON } = CONSTANTS;\n\nexport interface OverlayGridAnnotation extends Annotation {\n  data: {\n    viewportData: Map<string, object>;\n    pointSets: Array<object>;\n  };\n}\n\n/**\n * @public\n */\nclass OverlayGridTool extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        sourceImageIds: [],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onSetToolActive = (): void => {\n    this._init();\n  };\n\n  _init = (): void => {\n    const sourceImageIds = this.configuration.sourceImageIds;\n    if (!sourceImageIds?.length) {\n      console.warn(\n        'OverlayGridTool: No sourceImageIds provided in configuration'\n      );\n      return;\n    }\n\n    const imagePlaneModule = metaData.get(\n      'imagePlaneModule',\n      sourceImageIds[0]\n    );\n\n    if (!imagePlaneModule) {\n      console.warn(\n        'OverlayGridTool: No imagePlaneModule found for sourceImageIds'\n      );\n      return;\n    }\n\n    const { frameOfReferenceUID } = imagePlaneModule;\n\n    const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportsInfo?.length) {\n      console.warn('OverlayGridTool: No viewports found');\n      return;\n    }\n\n    const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n\n    if (!annotations?.length) {\n      const pointSets = sourceImageIds.map((id) => {\n        // check if pointSets for the imageId was calculated. If not calculate and store\n        return this.calculateImageIdPointSets(id);\n      });\n\n      const newAnnotation: OverlayGridAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          FrameOfReferenceUID: frameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          viewportData: new Map(),\n          pointSets,\n        },\n      };\n\n      addAnnotation(newAnnotation, frameOfReferenceUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      getRenderingEngine(viewportsInfo[0].renderingEngineId),\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  /**\n   * Calculates the point sets based on the image corners relative to an imageId\n   * @param imageId - The imageId to calculate the point sets for\n   * @returns\n   */\n  calculateImageIdPointSets = (imageId: string) => {\n    const {\n      imagePositionPatient,\n      rows,\n      columns,\n      rowCosines,\n      columnCosines,\n      rowPixelSpacing,\n      columnPixelSpacing,\n    } = metaData.get('imagePlaneModule', imageId);\n\n    // top left world, top right world, bottom right world, bottom left world\n    const topLeft = <Types.Point3>[...imagePositionPatient];\n    const topRight = <Types.Point3>[...imagePositionPatient];\n    const bottomLeft = <Types.Point3>[...imagePositionPatient];\n    const bottomRight = <Types.Point3>[...imagePositionPatient];\n\n    vec3.scaleAndAdd(\n      topRight,\n      imagePositionPatient,\n      columnCosines,\n      columns * columnPixelSpacing\n    );\n    vec3.scaleAndAdd(\n      bottomLeft,\n      imagePositionPatient,\n      rowCosines,\n      rows * rowPixelSpacing\n    );\n\n    vec3.scaleAndAdd(\n      bottomRight,\n      bottomLeft,\n      columnCosines,\n      columns * columnPixelSpacing\n    );\n\n    // check if the topLeft and bottomLeft line is parallel to the viewUp\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n    const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n\n    return { pointSet1, pointSet2 };\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const sourceImageIds = this.configuration.sourceImageIds;\n\n    let renderStatus = false;\n    if (!sourceImageIds?.length) {\n      return renderStatus;\n    }\n\n    const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n    const targetImageIds = targetViewport.getImageIds();\n    if (targetImageIds.length < 2) {\n      return renderStatus;\n    }\n\n    const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n    const annotation = annotations[0];\n    const { annotationUID } = annotation;\n\n    const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n    const imageIdNormal = <Types.Point3>(\n      this.getImageIdNormal(sourceImageIds[0])\n    );\n\n    if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n      // If the source and target viewports are parallel, we don't need to render\n      return renderStatus;\n    }\n\n    const targetViewportPlane = csUtils.planar.planeEquation(\n      viewPlaneNormal,\n      focalPoint\n    );\n\n    const pointSets = annotation.data.pointSets;\n    const viewportData = annotation.data.viewportData;\n    for (let i = 0; i < sourceImageIds.length; i++) {\n      // check if pointSets for the imageId was calculated. If not calculate and store\n      const { pointSet1, pointSet2 } = pointSets[i];\n\n      const targetData =\n        viewportData.get(targetViewport.id) ||\n        this.initializeViewportData(viewportData, targetViewport.id);\n\n      // check if pointSetToUse was calculated. If not calculate and store\n      if (!targetData.pointSetsToUse[i]) {\n        let pointSetToUse = pointSet1;\n\n        let topBottomVec = vec3.subtract(\n          vec3.create(),\n          pointSet1[0],\n          pointSet1[1]\n        );\n        topBottomVec = vec3.normalize(\n          vec3.create(),\n          topBottomVec\n        ) as Types.Point3;\n\n        // check if it is perpendicular to the viewPlaneNormal which means\n        // the line does not intersect the viewPlaneNormal\n        if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n          // 'use pointSet2';\n          pointSetToUse = pointSet2;\n        }\n\n        targetData.pointSetsToUse[i] = pointSetToUse;\n\n        targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(\n          pointSetToUse[0],\n          pointSetToUse[1],\n          targetViewportPlane\n        );\n\n        targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(\n          pointSetToUse[2],\n          pointSetToUse[3],\n          targetViewportPlane\n        );\n      }\n\n      const lineStartWorld = targetData.lineStartsWorld[i];\n      const lineEndWorld = targetData.lineEndsWorld[i];\n\n      styleSpecifier.annotationUID = annotationUID;\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) =>\n        targetViewport.worldToCanvas(world)\n      );\n\n      const dataId = `${annotationUID}-line`;\n      const lineUID = `${i}`;\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        dataId\n      );\n    }\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n\n  private initializeViewportData = (viewportData, id) => {\n    viewportData.set(id, {\n      pointSetsToUse: [],\n      lineStartsWorld: [],\n      lineEndsWorld: [],\n    });\n\n    return viewportData.get(id);\n  };\n\n  private isPerpendicular = (\n    vec1: Types.Point3,\n    vec2: Types.Point3\n  ): boolean => {\n    const dot = vec3.dot(vec1, vec2);\n    return Math.abs(dot) < EPSILON;\n  };\n\n  private isParallel(vec1: Types.Point3, vec2: Types.Point3): boolean {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n\n  private getImageIdNormal(imageId: string): vec3 {\n    const { imageOrientationPatient } = metaData.get(\n      'imagePlaneModule',\n      imageId\n    );\n    const rowCosineVec = vec3.fromValues(\n      imageOrientationPatient[0],\n      imageOrientationPatient[1],\n      imageOrientationPatient[2]\n    );\n    const colCosineVec = vec3.fromValues(\n      imageOrientationPatient[3],\n      imageOrientationPatient[4],\n      imageOrientationPatient[5]\n    );\n    return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n  }\n}\n\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * Tool that pans the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass PanTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import {\n  BaseVolumeViewport,\n  getEnabledElement,\n  Types,\n} from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The PlanarRotateTool is a tool that allows the user to rotate\n * the image by pressing the mouse click and dragging\n */\nclass PlanarRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n  mouseDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  _dragCallback(evt: EventTypes.MouseDragEventType) {\n    const { element, currentPoints, startPoints } = evt.detail;\n    const currentPointWorld = currentPoints.world;\n    const startPointWorld = startPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const centerCanvas: Types.Point2 = [width * 0.5, height * 0.5];\n    const centerWorld = viewport.canvasToWorld(centerCanvas);\n\n    let angle = angleBetweenLines(\n      [startPointWorld, centerWorld],\n      [centerWorld, currentPointWorld]\n    );\n\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n    const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n    const cross = vec3.cross(vec3.create(), v1, v2);\n    if (vec3.dot(viewPlaneNormal, cross) > 0) {\n      angle = -angle;\n    }\n\n    if (Number.isNaN(angle)) {\n      return;\n    }\n\n    if (viewport instanceof BaseVolumeViewport) {\n      const rotAngle = (angle * Math.PI) / 180;\n      const rotMat = mat4.identity(new Float32Array(16));\n      mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n      const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n      viewport.setCamera({ viewUp: rotatedViewUp as Types.Point3 });\n    } else {\n      const { rotation } = (viewport as Types.IStackViewport).getProperties();\n      viewport.setProperties({ rotation: rotation + angle });\n    }\n\n    viewport.render();\n  }\n}\n\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n  Annotations,\n} from '../types';\nimport { ReferenceCursor } from '../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\n/**\n * ReferenceCursors is a tool that will show your cursors position in all other elements in the toolGroup if they have a matching FrameOfReference relative to its position in world space.\n * Also when positionSync is enabled, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n *\n * Configuration:\n * - positionSync: boolean, if true, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n * - disableCursor: boolean, if true, it will hide the cursor in all viewports. You need to disable and reactivate the tool for this to apply.\n * - displayThreshold: number, if the distance of the cursor in a viewport is bigger than this threshold the cursor will not be displayed.\n *\n * Only uses Active and Disabled state\n */\nclass ReferenceCursors extends AnnotationDisplayTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  isDrawing = false;\n  isHandleOutsideImage = false;\n  _elementWithCursor: null | HTMLDivElement = null;\n  _currentCursorWorldPosition: null | Types.Point3 = null;\n  _currentCanvasPosition: null | Types.Point2 = null;\n  //need to keep track if this was enabled when tool was enabled because we need to know if we should reset cursors\n  _disableCursorEnabled = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        displayThreshold: 5,\n        positionSync: true,\n        disableCursor: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this._disableCursorEnabled = this.configuration.disableCursor;\n  }\n\n  /**\n   * Overwritten mouseMoveCallback since we want to keep track of the current mouse position and redraw on mouseMove\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const { detail } = evt;\n    const { element, currentPoints } = detail;\n\n    //save current positions and current element the curser is hovering over\n    this._currentCursorWorldPosition = currentPoints.world;\n    this._currentCanvasPosition = currentPoints.canvas;\n    this._elementWithCursor = element;\n\n    const annotation = this.getActiveAnnotation(element);\n    if (annotation === null) {\n      this.createInitialAnnotation(currentPoints.world, element);\n      return false;\n    }\n    this.updateAnnotationPosition(element, annotation);\n    return false;\n  };\n\n  onSetToolActive(): void {\n    this._disableCursorEnabled = this.configuration.disableCursor;\n    if (!this._disableCursorEnabled) {\n      return;\n    }\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) {\n      return;\n    }\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    enabledElements.forEach((element) => {\n      if (element) {\n        hideElementCursor(element.viewport.element);\n      }\n    });\n  }\n  onSetToolDisabled(): void {\n    if (!this._disableCursorEnabled) {\n      return;\n    }\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) {\n      return;\n    }\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n    enabledElements.forEach((element) => {\n      if (element) {\n        resetElementCursor(element.viewport.element);\n      }\n    });\n  }\n\n  createInitialAnnotation = (\n    worldPos: Types.Point3,\n    element: HTMLDivElement\n  ): void => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n      throw new Error('No enabled element found');\n    }\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    if (!viewPlaneNormal || !viewUp) {\n      throw new Error('Camera not found');\n    }\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [[...worldPos]] as [Types.Point3],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n      },\n    };\n\n    const annotations = getAnnotations(this.getToolName(), element);\n\n    if (annotations.length > 0) {\n      return null;\n    }\n    const annotationId = addAnnotation(annotation, element);\n\n    if (annotationId === null) {\n      return;\n    }\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  getActiveAnnotation(element: HTMLDivElement): null | Annotation {\n    const annotations = getAnnotations(this.getToolName(), element);\n    if (!annotations.length) {\n      return null;\n    }\n    const targetAnnotation = annotations[0];\n    return targetAnnotation;\n  }\n\n  /**\n   * updates the position of the annotation to match the currently set world position\n   */\n  updateAnnotationPosition(\n    element: HTMLDivElement,\n    annotation: Annotation\n  ): void {\n    const worldPos = this._currentCursorWorldPosition;\n    if (!worldPos) {\n      return;\n    }\n    if (!annotation.data?.handles?.points) {\n      return;\n    }\n    annotation.data.handles.points = [[...worldPos]];\n    annotation.invalidated = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n      return;\n    }\n    const { renderingEngine } = enabledElement;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n\n  //checks if we need to update the annotation position due to camera changes\n  onCameraModified = (evt: any): void => {\n    const eventDetail = evt.detail;\n    const { element, previousCamera, camera } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const viewport = enabledElement.viewport as\n      | Types.IVolumeViewport\n      | Types.IStackViewport;\n\n    //only react to changes for element with cursor, otherwise would cause infinite loop\n    if (element !== this._elementWithCursor) {\n      return;\n    }\n    //check if camera moved along its normal\n    const oldFocalPoint = previousCamera.focalPoint;\n    const cameraNormal = camera.viewPlaneNormal;\n    const newFocalPoint = camera.focalPoint;\n\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n    //check if focal point changed\n    if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n      return;\n    }\n    //if nomrmal is perpendicular to focal point change, then we are not moving along the normal\n    const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n    //dot product is 0 -> perpendicular\n    if (Math.abs(dotProduct) < 1e-2) {\n      return;\n    }\n\n    //need to update the position of the annotation since camera changed\n    if (!this._currentCanvasPosition) {\n      return;\n    }\n\n    const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n    this._currentCursorWorldPosition = newWorldPos;\n    this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n  };\n\n  //display annotation if current viewing plane has a max distance of \"displayThreshold\" from the annotation\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations {\n    //calculate distance of current viewport to annotation\n    if (!(annotations instanceof Array) || annotations.length === 0) {\n      return [];\n    }\n    const annotation = annotations[0];\n    const viewport = getEnabledElement(element)?.viewport;\n    if (!viewport) {\n      return [];\n    }\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, focalPoint } = camera;\n    if (!viewPlaneNormal || !focalPoint) {\n      return [];\n    }\n    const points = annotation.data?.handles?.points;\n    if (!(points instanceof Array) || points.length !== 1) {\n      return [];\n    }\n    const worldPos = points[0];\n    const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n    const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n    return distance < this.configuration.displayThreshold ? [annotation] : [];\n  }\n\n  /**\n   * Draws the cursor representation on the enabledElement\n   * Checks if a stack change has happened and updates annotation in that case\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, FrameOfReferenceUID } = enabledElement;\n\n    const isElementWithCursor = this._elementWithCursor === viewport.element;\n\n    //update stack position if position sync is enabled\n    if (this.configuration.positionSync && !isElementWithCursor) {\n      this.updateViewportImage(viewport);\n    }\n\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    //the viewport change from updateStackPosition might not be applied yet, so sometimes the annotation might not be immediately visible\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as Annotations;\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ReferenceCursor;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points } = handles;\n\n      if (!annotationUID) {\n        return renderStatus;\n      }\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidthBase = parseFloat(\n        this.getStyle('lineWidth', styleSpecifier, annotation) as string\n      );\n\n      const lineWidth =\n        typeof lineWidthBase === 'number' && isElementWithCursor\n          ? lineWidthBase\n          : lineWidthBase;\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      if (points[0].some((e) => isNaN(e))) {\n        return renderStatus;\n      }\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2];\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      const crosshairUIDs = {\n        upper: 'upper',\n        right: 'right',\n        lower: 'lower',\n        left: 'left',\n      };\n      const [x, y] = canvasCoordinates[0];\n      const centerSpace = isElementWithCursor ? 20 : 7;\n      const lineLength = isElementWithCursor ? 5 : 7;\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.upper,\n        [x, y - (centerSpace / 2 + lineLength)],\n        [x, y - centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.lower,\n        [x, y + (centerSpace / 2 + lineLength)],\n        [x, y + centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.right,\n        [x + (centerSpace / 2 + lineLength), y],\n        [x + centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.left,\n        [x - (centerSpace / 2 + lineLength), y],\n        [x - centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  updateViewportImage(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): void {\n    const currentMousePosition = this._currentCursorWorldPosition;\n\n    if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n      return;\n    }\n\n    if (viewport instanceof StackViewport) {\n      const closestIndex = utilities.getClosestStackImageIndexForPoint(\n        currentMousePosition,\n        viewport\n      );\n\n      if (closestIndex === null) {\n        return;\n      }\n      if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n        viewport.setImageIdIndex(closestIndex);\n      }\n    } else if (viewport instanceof VolumeViewport) {\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n      if (!focalPoint || !viewPlaneNormal) {\n        return;\n      }\n      const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n      const currentDistance = utilities.planar.planeDistanceToPoint(\n        plane,\n        currentMousePosition,\n        true\n      );\n\n      if (Math.abs(currentDistance) < 0.5) {\n        return;\n      }\n      const normalizedViewPlane = vec3.normalize(\n        vec3.create(),\n        vec3.fromValues(...viewPlaneNormal)\n      );\n      const scaledPlaneNormal = vec3.scale(\n        vec3.create(),\n        normalizedViewPlane,\n        currentDistance\n      );\n      const newFocalPoint = vec3.add(\n        vec3.create(),\n        vec3.fromValues(...focalPoint),\n        scaledPlaneNormal\n      ) as Types.Point3;\n      //TODO: make check if new focal point is within bounds of volume\n      const isInBounds = true;\n      if (isInBounds) {\n        viewport.setCamera({ focalPoint: newFocalPoint });\n        const renderingEngine = viewport.getRenderingEngine();\n        if (renderingEngine) {\n          renderingEngine.renderViewport(viewport.id);\n        }\n      }\n    }\n  }\n}\n\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import { vec3 } from 'gl-matrix';\nimport {\n  getRenderingEngines,\n  CONSTANTS,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { type Types, getEnabledElementByViewportId } from '@cornerstonejs/core';\n\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\n\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { PublicToolProps, ToolProps, SVGDrawingHelper } from '../types';\nimport { ReferenceLineAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\n\nconst { EPSILON } = CONSTANTS;\n\n/**\n * @public\n */\nclass ReferenceLines extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    sourceViewportId: string;\n    annotation: ReferenceLineAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        sourceViewportId: '',\n        showFullDimension: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // this._throttledCalculateCachedStats = throttle(\n    //   this._calculateCachedStats,\n    //   100,\n    //   { trailing: true }\n    // );\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    // Todo: handle this case where it is too soon to get the rendering engine\n    if (!renderingEngine) {\n      return;\n    }\n\n    let viewports = renderingEngine.getViewports();\n    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n\n    const sourceViewport = renderingEngine.getViewport(\n      this.configuration.sourceViewportId\n    ) as Types.IVolumeViewport;\n\n    if (!sourceViewport?.getImageData()) {\n      return;\n    }\n\n    const { element } = sourceViewport;\n    const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n\n    const sourceViewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(sourceViewport);\n\n    let annotation = this.editData.annotation;\n    const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n\n    if (!annotation) {\n      const newAnnotation: ReferenceLineAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: sourceViewportCanvasCornersInWorld,\n          },\n        },\n      };\n\n      addAnnotation(newAnnotation, element);\n      annotation = newAnnotation;\n    } else {\n      this.editData.annotation.data.handles.points =\n        sourceViewportCanvasCornersInWorld;\n    }\n\n    this.editData = {\n      sourceViewportId: sourceViewport.id,\n      renderingEngine,\n      annotation,\n    };\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewports\n        .filter((viewport) => viewport.id !== sourceViewport.id)\n        .map((viewport) => viewport.id)\n    );\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onSetToolConfiguration = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the reference lines\n    // we really don't care which viewport triggered the\n    // camera modification, since we want to update all of them\n    // with respect to the targetViewport\n    this._init();\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const { viewport: targetViewport } = enabledElement;\n    const { annotation, sourceViewportId } = this.editData;\n\n    let renderStatus = false;\n\n    // we need to grab the viewport again since there might have been\n    // a change in the viewport state since the last time we cached it\n    const { viewport: sourceViewport } =\n      getEnabledElementByViewportId(sourceViewportId) || {};\n\n    if (!sourceViewport) {\n      return renderStatus;\n    }\n\n    if (sourceViewport.id === targetViewport.id) {\n      // If the source viewport is the same as the current viewport, we don't need to render\n      return renderStatus;\n    }\n\n    if (!annotation || !annotation?.data?.handles?.points) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // top left world, top right world, bottom right world, bottom left world\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n    const { viewPlaneNormal: sourceViewPlaneNormal } =\n      sourceViewport.getCamera();\n\n    if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n      // If the source and target viewports are parallel, we don't need to render\n      return renderStatus;\n    }\n\n    const targetViewportPlane = csUtils.planar.planeEquation(\n      viewPlaneNormal,\n      focalPoint\n    );\n\n    // check if the topLeft and bottomLeft line is parallel to the viewUp\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n    const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n\n    let pointSetToUse = pointSet1;\n\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const newNormal = vec3.cross(\n      vec3.create(),\n      topBottomVec,\n      topRightVec\n    ) as Types.Point3;\n\n    if (this.isParallel(newNormal, viewPlaneNormal)) {\n      return renderStatus;\n    }\n\n    // check if it is perpendicular to the viewPlaneNormal which means\n    // the line does not intersect the viewPlaneNormal\n    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n      // 'use pointSet2';\n      pointSetToUse = pointSet2;\n    }\n\n    const lineStartWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[0],\n      pointSetToUse[1],\n      targetViewportPlane\n    );\n\n    const lineEndWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[2],\n      pointSetToUse[3],\n      targetViewportPlane\n    );\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) =>\n      targetViewport.worldToCanvas(world)\n    );\n\n    if (this.configuration.showFullDimension) {\n      canvasCoordinates = this.handleFullDimension(\n        targetViewport,\n        lineStartWorld,\n        viewPlaneNormal,\n        viewUp,\n        lineEndWorld,\n        canvasCoordinates\n      );\n    }\n\n    if (canvasCoordinates.length < 2) {\n      return renderStatus;\n    }\n\n    const dataId = `${annotationUID}-line`;\n    const lineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      lineUID,\n      canvasCoordinates[0],\n      canvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      dataId\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n\n  isPerpendicular = (vec1: Types.Point3, vec2: Types.Point3): boolean => {\n    const dot = vec3.dot(vec1, vec2);\n    return Math.abs(dot) < EPSILON;\n  };\n\n  private handleFullDimension(\n    targetViewport: Types.IStackViewport | Types.IVolumeViewport,\n    lineStartWorld: Types.Point3,\n    viewPlaneNormal: Types.Point3,\n    viewUp: Types.Point3,\n    lineEndWorld: Types.Point3,\n    canvasCoordinates: Types.Point2[]\n  ) {\n    const renderingEngine = targetViewport.getRenderingEngine();\n    const targetId = this.getTargetId(targetViewport);\n    const targetImage = this.getTargetIdImage(targetId, renderingEngine);\n\n    const referencedImageId = this.getReferencedImageId(\n      targetViewport,\n      lineStartWorld,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    if (referencedImageId && targetImage) {\n      try {\n        const { imageData, dimensions } = targetImage;\n\n        // Calculate bound image coordinates\n        const [\n          topLeftImageCoord,\n          topRightImageCoord,\n          bottomRightImageCoord,\n          bottomLeftImageCoord,\n        ] = [\n          imageData.indexToWorld([0, 0, 0]) as Types.Point3,\n          imageData.indexToWorld([dimensions[0] - 1, 0, 0]) as Types.Point3,\n          imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n          ]) as Types.Point3,\n          imageData.indexToWorld([0, dimensions[1] - 1, 0]) as Types.Point3,\n        ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n\n        // Calculate line start and end image coordinates\n        const [lineStartImageCoord, lineEndImageCoord] = [\n          lineStartWorld,\n          lineEndWorld,\n        ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n\n        // Calculate intersection points between line and image bounds\n        canvasCoordinates = [\n          [topLeftImageCoord, topRightImageCoord],\n          [topRightImageCoord, bottomRightImageCoord],\n          [bottomLeftImageCoord, bottomRightImageCoord],\n          [topLeftImageCoord, bottomLeftImageCoord],\n        ]\n          .map(([start, end]) =>\n            this.intersectInfiniteLines(\n              start,\n              end,\n              lineStartImageCoord,\n              lineEndImageCoord\n            )\n          )\n          .filter((point) => point && this.isInBound(point, dimensions))\n          .map((point) => {\n            const world = csUtils.imageToWorldCoords(\n              referencedImageId,\n              point as Types.Point2\n            );\n            return targetViewport.worldToCanvas(world);\n          });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    return canvasCoordinates;\n  }\n\n  // get the intersection point between two infinite lines, not line segments\n  intersectInfiniteLines(\n    line1Start: Types.Point2,\n    line1End: Types.Point2,\n    line2Start: Types.Point2,\n    line2End: Types.Point2\n  ) {\n    const [x1, y1] = line1Start;\n    const [x2, y2] = line1End;\n    const [x3, y3] = line2Start;\n    const [x4, y4] = line2End;\n\n    // Compute a1, b1, c1, where line joining points 1 and 2 is \"a1 x  +  b1 y  +  c1  =  0\"\n    const a1 = y2 - y1;\n    const b1 = x1 - x2;\n    const c1 = x2 * y1 - x1 * y2;\n\n    // Compute a2, b2, c2\n    const a2 = y4 - y3;\n    const b2 = x3 - x4;\n    const c2 = x4 * y3 - x3 * y4;\n\n    if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n      return;\n    }\n\n    const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n    const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n\n    return [x, y];\n  }\n\n  isParallel(vec1: Types.Point3, vec2: Types.Point3): boolean {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n\n  isInBound(point: number[], dimensions: Types.Point3): boolean {\n    return (\n      point[0] >= 0 &&\n      point[0] <= dimensions[0] &&\n      point[1] >= 0 &&\n      point[1] <= dimensions[1]\n    );\n  }\n}\n\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport {\n  getEnabledElementByIds,\n  getRenderingEngines,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { ScaleOverlayAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport {\n  drawLine as drawLineSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../drawingSvg';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../types';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\nconst SCALEOVERLAYTOOL_ID = 'scaleoverlay-viewport';\nconst viewportsWithAnnotations = [];\n\n/**\n * @public\n * @class ScaleOverlayTool\n * @memberof Tools\n *\n * @classdesc Tool for displaying a scale overlay on the image.\n * @extends Tools.Base.BaseTool\n */\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    viewport: any;\n    annotation: ScaleOverlayAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        viewportId: '',\n        scaleLocation: 'bottom',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    if (!renderingEngine) {\n      return;\n    }\n\n    // get viewports with tool enabled\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportIds) {\n      return;\n    }\n\n    // get enabled elements\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    let { viewport } = enabledElements[0];\n    const { FrameOfReferenceUID } = enabledElements[0];\n\n    // onCameraModified, configuration.viewportId is set to the active\n    // viewport Id, here we are setting the viewport variable to the\n    // viewport with the matching Id\n    if (this.configuration.viewportId) {\n      enabledElements.forEach((element) => {\n        if (element.viewport.id == this.configuration.viewportId) {\n          viewport = element.viewport;\n        }\n      });\n    }\n\n    if (!viewport) {\n      return;\n    }\n\n    const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n    const viewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(viewport);\n\n    let annotation = this.editData.annotation;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    // if annotations have been created, get the annotation for the\n    // current viewport Id\n    if (annotations.length) {\n      annotation = annotations.filter(\n        (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n      )[0] as ScaleOverlayAnnotation;\n    }\n\n    // viewportsWithAnnotations stores which viewports have an annotation,\n    // if the viewport does not have an annotation, create a new one\n    if (!viewportsWithAnnotations.includes(viewport.id)) {\n      const newAnnotation: ScaleOverlayAnnotation = {\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: viewportCanvasCornersInWorld,\n          },\n          viewportId: viewport.id,\n        },\n      };\n\n      viewportsWithAnnotations.push(viewport.id);\n\n      addAnnotation(newAnnotation, viewport.element);\n      annotation = newAnnotation;\n    } else if (\n      this.editData.annotation &&\n      this.editData.annotation.data.viewportId == viewport.id\n    ) {\n      this.editData.annotation.data.handles.points =\n        viewportCanvasCornersInWorld;\n      this.editData.annotation.data.viewportId = viewport.id;\n    }\n\n    this.editData = {\n      viewport,\n      renderingEngine,\n      annotation,\n    };\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the viewport\n    // that the camera was modified on\n    this.configuration.viewportId = evt.detail.viewportId;\n    this._init();\n  };\n\n  /**\n   * Used to draw the scale annotation in each request animation\n   * frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   * @returns\n   */\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ) {\n    if (!this.editData.viewport) {\n      return;\n    }\n    const location = this.configuration.scaleLocation;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n    const annotation = annotations.filter(\n      (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n    )[0];\n    const canvas = enabledElement.viewport.canvas;\n\n    const renderStatus = false;\n\n    if (!viewport) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const canvasSize = {\n      width: canvas.width,\n      height: canvas.height,\n    };\n\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n\n    const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n    const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n\n    // hscaleBounds and vscaleBounds compute the max bound for scales on the image\n    const hscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    const vscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    // Computes which scale size to use, ex: 100mm, 50mm\n    const scaleSize = this.computeScaleSize(\n      worldWidthViewport,\n      worldHeightViewport,\n      location\n    );\n\n    // Applies the scale with the predetermined size to the image in\n    // world coordinates, then converts them to canvas coordinates\n    const canvasCoordinates = this.computeWorldScaleCoordinates(\n      scaleSize,\n      location,\n      pointSet1\n    ).map((world) => viewport.worldToCanvas(world));\n\n    // Uses the bounds and canvas size to center the scale\n    // based on the location\n    const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(\n      canvasSize,\n      canvasCoordinates,\n      vscaleBounds,\n      hscaleBounds,\n      location\n    );\n\n    // Computes the end scale ticks coordinates\n    const scaleTicks = this.computeEndScaleTicks(\n      scaleCanvasCoordinates,\n      location\n    );\n\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    const scaleId = `${annotationUID}-scaleline`;\n    const scaleLineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      scaleLineUID,\n      scaleCanvasCoordinates[0],\n      scaleCanvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      scaleId\n    );\n    const leftTickId = `${annotationUID}-left`;\n    const leftTickUID = '2';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      leftTickUID,\n      scaleTicks.endTick1[0] as Types.Point2,\n      scaleTicks.endTick1[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      leftTickId\n    );\n    const rightTickId = `${annotationUID}-right`;\n    const rightTickUID = '3';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rightTickUID,\n      scaleTicks.endTick2[0] as Types.Point2,\n      scaleTicks.endTick2[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      rightTickId\n    );\n\n    const locationTextOffest = {\n      bottom: [-10, -42],\n      top: [-12, -35],\n      left: [-40, -20],\n      right: [-50, -20],\n    };\n\n    const textCanvasCoordinates = [\n      scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n      scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n    ];\n    const textBoxLines = this._getTextLines(scaleSize);\n\n    const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(\n      scaleSize,\n      location,\n      annotationUID,\n      scaleTicks.endTick1,\n      scaleTicks.endTick2\n    );\n\n    // draws inner ticks for scale\n    for (let i = 0; i < tickUIDs.length; i++) {\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        tickUIDs[i],\n        tickCoordinates[i][0],\n        tickCoordinates[i][1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        tickIds[i]\n      );\n    }\n\n    const textUID = 'text0';\n    drawTextBoxSvg(\n      svgDrawingHelper,\n      annotationUID,\n      textUID,\n      textBoxLines,\n      [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n      {\n        fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        lineDash: '2,3',\n        lineWidth: '1',\n        shadow: true,\n        color: color,\n      }\n    );\n\n    return renderStatus;\n  }\n\n  _getTextLines(scaleSize: number): string[] | undefined {\n    let scaleSizeDisplayValue;\n    let scaleSizeUnits;\n    if (scaleSize >= 50) {\n      scaleSizeDisplayValue = scaleSize / 10; //convert to cm\n      scaleSizeUnits = ' cm';\n    } else {\n      scaleSizeDisplayValue = scaleSize; //convert to cm\n      scaleSizeUnits = ' mm';\n    }\n\n    const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n\n    return textLines;\n  }\n\n  /**\n   *\n   * @param worldWidthViewport\n   * @returns currentScaleSize\n   */\n  computeScaleSize = (\n    worldWidthViewport: number,\n    worldHeightViewport: number,\n    location: any\n  ) => {\n    const scaleSizes = [\n      16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n    ];\n    let currentScaleSize;\n    if (location == 'top' || location == 'bottom') {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldWidthViewport * 0.6 &&\n          scaleSize > worldWidthViewport * 0.2\n      );\n    } else {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldHeightViewport * 0.6 &&\n          scaleSize > worldHeightViewport * 0.2\n      );\n    }\n\n    return currentScaleSize[0];\n  };\n\n  /**\n   *  calculates scale ticks for ends of the scale\n   * @param canvasCoordinates\n   * @returns leftTick, rightTick\n   */\n  computeEndScaleTicks = (canvasCoordinates, location) => {\n    const locationTickOffset = {\n      bottom: [\n        [0, -10],\n        [0, -10],\n      ],\n      top: [\n        [0, 10],\n        [0, 10],\n      ],\n      left: [\n        [0, 0],\n        [10, 0],\n      ],\n      right: [\n        [0, 0],\n        [-10, 0],\n      ],\n    };\n\n    const endTick1 = [\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n    const endTick2 = [\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n\n    return {\n      endTick1: endTick1,\n      endTick2: endTick2,\n    };\n  };\n\n  computeInnerScaleTicks = (\n    scaleSize: number,\n    location: string,\n    annotationUID: string,\n    leftTick: any[][],\n    rightTick: any[][]\n  ) => {\n    let canvasScaleSize;\n    if (location == 'bottom' || location == 'top') {\n      canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n    } else if (location == 'left' || location == 'right') {\n      canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n    }\n    const tickIds = [];\n    const tickUIDs = [];\n    const tickCoordinates = [];\n    let numberSmallTicks = scaleSize;\n\n    if (scaleSize >= 50) {\n      numberSmallTicks = scaleSize / 10;\n    }\n\n    const tickSpacing = canvasScaleSize / numberSmallTicks;\n\n    for (let i = 0; i < numberSmallTicks - 1; i++) {\n      const locationOffset = {\n        bottom: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), 5],\n        ],\n        top: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), -5],\n        ],\n        left: [\n          [0, tickSpacing * (i + 1)],\n          [-5, tickSpacing * (i + 1)],\n        ],\n        right: [\n          [0, tickSpacing * (i + 1)],\n          [5, tickSpacing * (i + 1)],\n        ],\n      };\n      tickIds.push(`${annotationUID}-tick${i}`);\n      tickUIDs.push(`tick${i}`);\n      if ((i + 1) % 5 == 0) {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][0][0],\n            leftTick[1][1] + locationOffset[location][0][1],\n          ],\n        ]);\n      } else {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][1][0],\n            leftTick[1][1] + locationOffset[location][1][1],\n          ],\n        ]);\n      }\n    }\n\n    return { tickIds, tickUIDs, tickCoordinates };\n  };\n\n  computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n    let worldCoordinates;\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const midpointLocation = {\n      bottom: [pointSet[1], pointSet[2]],\n      top: [pointSet[0], pointSet[3]],\n      right: [pointSet[2], pointSet[3]],\n      left: [pointSet[0], pointSet[1]],\n    };\n\n    const midpoint = vec3\n      .add(\n        vec3.create(),\n        midpointLocation[location][0],\n        midpointLocation[location][0]\n      )\n      .map((i) => i / 2) as Types.Point3;\n\n    const offset =\n      scaleSize /\n      2 /\n      Math.sqrt(\n        Math.pow(topBottomVec[0], 2) +\n          Math.pow(topBottomVec[1], 2) +\n          Math.pow(topBottomVec[2], 2)\n      );\n\n    if (location == 'top' || location == 'bottom') {\n      worldCoordinates = [\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    } else if (location == 'left' || location == 'right') {\n      worldCoordinates = [\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    }\n\n    return worldCoordinates;\n  };\n\n  /**\n   * Computes the centered canvas coordinates for scale\n   * @param canvasSize\n   * @param canvasCoordinates\n   * @param vscaleBounds\n   * @returns scaleCanvasCoordinates\n   */\n  computeCanvasScaleCoordinates = (\n    canvasSize,\n    canvasCoordinates,\n    vscaleBounds,\n    hscaleBounds,\n    location\n  ) => {\n    let scaleCanvasCoordinates;\n    if (location == 'top' || location == 'bottom') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][0] - canvasCoordinates[1][0];\n      scaleCanvasCoordinates = [\n        [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n        [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n      ];\n    } else if (location == 'left' || location == 'right') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][1] - canvasCoordinates[1][1];\n      scaleCanvasCoordinates = [\n        [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n        [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n      ];\n    }\n\n    return scaleCanvasCoordinates;\n  };\n\n  /**\n   * Computes the max bound for scales on the image\n   * @param  {{width: number, height: number}} canvasSize\n   * @param  {number} horizontalReduction\n   * @param  {number} verticalReduction\n   * @returns {Object.<string, { x:number, y:number }>}\n   */\n  computeScaleBounds = (\n    canvasSize,\n    horizontalReduction,\n    verticalReduction,\n    location\n  ) => {\n    const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n    const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n    const locationBounds = {\n      bottom: [-vReduction, -hReduction],\n      top: [vReduction, hReduction],\n      left: [vReduction, hReduction],\n      right: [-vReduction, -hReduction],\n    };\n    const canvasBounds = {\n      bottom: [canvasSize.height, canvasSize.width],\n      top: [0, canvasSize.width],\n      left: [canvasSize.height, 0],\n      right: [canvasSize.height, canvasSize.width],\n    };\n\n    return {\n      height: canvasBounds[location][0] + locationBounds[location][0],\n      width: canvasBounds[location][1] + locationBounds[location][1],\n    };\n  };\n}\n\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { PublicToolProps, ToolProps, SVGDrawingHelper } from '../types';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { Annotation } from '../types';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\n\nexport interface SegmentationIntersectionAnnotation extends Annotation {\n  data: {\n    actorsWorldPointsMap: Map<string, Map<string, object>>;\n  };\n}\n\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n  static toolName;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        opacity: 0.5,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Initialize the annotation data and calculates surface intersections\n   * @returns\n   */\n  _init = (): void => {\n    const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportsInfo?.length) {\n      console.warn(this.getToolName() + 'Tool: No viewports found');\n      return;\n    }\n\n    const firstViewport = getRenderingEngine(\n      viewportsInfo[0].renderingEngineId\n    )?.getViewport(viewportsInfo[0].viewportId);\n\n    if (!firstViewport) {\n      return;\n    }\n    const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n    const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n\n    if (!annotations?.length) {\n      const actorsWorldPointsMap = new Map();\n      calculateSurfaceSegmentationIntersections(\n        actorsWorldPointsMap,\n        viewportsInfo\n      );\n      const newAnnotation: SegmentationIntersectionAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          FrameOfReferenceUID: frameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          actorsWorldPointsMap,\n        },\n      };\n\n      addAnnotation(newAnnotation, frameOfReferenceUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      getRenderingEngine(viewportsInfo[0].renderingEngineId),\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    this._init();\n  };\n\n  /**\n   * Renders the surface intersections\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const { viewport, FrameOfReferenceUID } = enabledElement;\n\n    let renderStatus = false;\n\n    const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n    const annotation = annotations[0];\n    const { annotationUID } = annotation;\n    const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n\n    calculateSurfaceSegmentationIntersectionsForViewport(\n      actorsWorldPointsMap,\n      viewport\n    );\n\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n\n    actorEntries.forEach((actorEntry) => {\n      if (!actorEntry?.clippingFilter) {\n        return;\n      }\n      const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n      if (!actorWorldPointMap) {\n        return;\n      }\n      if (!actorWorldPointMap.get(cacheId)) {\n        return;\n      }\n      let polyLineIdx = 1;\n      const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n      for (let i = 0; i < worldPointsSet.length; i++) {\n        const worldPoints = worldPointsSet[i];\n        const canvasPoints = worldPoints.map((point) =>\n          viewport.worldToCanvas(point)\n        );\n\n        const options = {\n          color: color,\n          fillColor: color,\n          fillOpacity: this.configuration.opacity,\n          closePath: true,\n          lineWidth: 2,\n        };\n\n        const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n        drawPath(\n          svgDrawingHelper,\n          annotationUID,\n          polyLineUID,\n          canvasPoints,\n          options\n        );\n        polyLineIdx++;\n      }\n    });\n\n    renderStatus = true;\n    return renderStatus;\n  };\n}\n\n/**\n * Calculates surface intersections points for all surface actors in a list of viewports\n * @param actorWorldPointsMap\n * @param viewportsInfo\n */\nfunction calculateSurfaceSegmentationIntersections(\n  actorsWorldPointsMap,\n  viewportsInfo\n) {\n  viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n    const viewport =\n      getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n    calculateSurfaceSegmentationIntersectionsForViewport(\n      actorsWorldPointsMap,\n      viewport\n    );\n  });\n}\n\n/**\n * Calculates surface intersections points for all surface actors in a viewport\n * generating a set of polyline points for each actor\n * @param actorWorldPointsMap\n * @param viewport\n */\nfunction calculateSurfaceSegmentationIntersectionsForViewport(\n  actorsWorldPointsMap,\n  viewport\n) {\n  const actorEntries = viewport.getActors();\n\n  // we should not use the focalPoint here, since the pan and zoom updates it,\n  // imageIndex is reliable enough\n  const cacheId = getCacheId(viewport);\n\n  actorEntries.forEach((actorEntry) => {\n    if (!actorEntry?.clippingFilter) {\n      return;\n    }\n\n    let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n    if (!actorWorldPointsMap) {\n      actorWorldPointsMap = new Map();\n      actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n    }\n    if (!actorWorldPointsMap.get(cacheId)) {\n      const polyData = actorEntry.clippingFilter.getOutputData();\n      const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n      if (!worldPointsSet) {\n        return;\n      }\n\n      // worldPointsSet = removeExtraPoints(viewport, worldPointsSet);\n      const colorArray = actorEntry.actor.getProperty().getColor();\n      const color = colorToString(colorArray);\n      actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n    }\n  });\n}\n\nfunction getCacheId(viewport) {\n  const { viewPlaneNormal } = viewport.getCamera();\n  const imageIndex = viewport.getCurrentImageIdIndex();\n  return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\n\n/**\n * Transform a color array into a string\n * @param colorArray\n * @returns\n */\nfunction colorToString(colorArray): string {\n  function colorComponentToString(component) {\n    let componentString = Math.floor(component * 255).toString(16);\n    if (componentString.length === 1) {\n      componentString = '0' + componentString;\n    }\n    return componentString;\n  }\n  return (\n    '#' +\n    colorComponentToString(colorArray[0]) +\n    colorComponentToString(colorArray[1]) +\n    colorComponentToString(colorArray[2])\n  );\n}\n\n/**\n * Remove duplicate and unnecessary points\n * @param worldPoints\n * @param canvasPoints\n * @returns\n */\nfunction removeExtraPoints(viewport, worldPointsSet) {\n  return worldPointsSet.map((worldPoints) => {\n    const canvasPoints = worldPoints.map((point) => {\n      const canvasPoint = viewport.worldToCanvas(point);\n      return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n    });\n\n    let lastPoint;\n    const newWorldPoints = [];\n    let newCanvasPoints = [];\n    // removing duplicate points\n    for (let i = 0; i < worldPoints.length; i++) {\n      if (lastPoint) {\n        if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n          newWorldPoints.push(worldPoints[i]);\n          newCanvasPoints.push(canvasPoints[i]);\n        }\n      }\n      lastPoint = canvasPoints[i];\n    }\n\n    // checking if a middle point is near the start\n    const firstPoint = newCanvasPoints[0];\n    for (\n      let j = Math.min(30, newCanvasPoints.length);\n      j < newCanvasPoints.length;\n      j++\n    ) {\n      if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n        newCanvasPoints = newCanvasPoints.slice(0, j);\n        return newWorldPoints.slice(0, j);\n      }\n    }\n    return newWorldPoints;\n  });\n}\n\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","import { getEnabledElementByIds, VolumeViewport } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { scroll } from '../utilities';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The StackScrollTool is a tool that allows the user to scroll through a\n * stack of images by pressing the mouse click and dragging\n */\nclass StackScrollTool extends BaseTool {\n  static toolName;\n  deltaY: number;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.deltaY = 1;\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n\n    const targetId = this.getTargetId(viewport);\n    const { debounceIfNotLoaded, invert, loop } = this.configuration;\n\n    const deltaPointY = deltaPoints.canvas[1];\n    let volumeId;\n    if (viewport instanceof VolumeViewport) {\n      volumeId = targetId.split(/volumeId:|\\?/)[1];\n    }\n\n    const pixelsPerImage = this._getPixelPerImage(viewport);\n    const deltaY = deltaPointY + this.deltaY;\n\n    if (!pixelsPerImage) {\n      return;\n    }\n\n    if (Math.abs(deltaY) >= pixelsPerImage) {\n      const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n\n      scroll(viewport, {\n        delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n        volumeId,\n        debounceLoading: debounceIfNotLoaded,\n        loop: loop,\n      });\n\n      this.deltaY = deltaY % pixelsPerImage;\n    } else {\n      this.deltaY = deltaY;\n    }\n  }\n\n  _getPixelPerImage(viewport) {\n    const { element } = viewport;\n    const numberOfSlices = viewport.getNumberOfSlices();\n\n    // The Math.max here makes it easier to mouseDrag-scroll small or really large image stacks\n    return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n  }\n}\n\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { MouseWheelEventType } from '../types/EventTypes';\nimport scroll from '../utilities/scroll';\n\n/**\n * The StackScrollMouseWheelTool is a tool that allows the user to scroll through a\n * stack of images using the mouse wheel\n */\nclass StackScrollMouseWheelTool extends BaseTool {\n  static toolName;\n\n  _configuration: any;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n        scrollSlabs: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType): void {\n    const { wheel, element } = evt.detail;\n    const { direction } = wheel;\n    const { invert } = this.configuration;\n    const { viewport } = getEnabledElement(element);\n    const delta = direction * (invert ? -1 : 1);\n\n    const targetId = this.getTargetId(viewport);\n    const volumeId = utilities.getVolumeId(targetId);\n\n    scroll(viewport, {\n      delta,\n      debounceLoading: this.configuration.debounceIfNotLoaded,\n      loop: this.configuration.loop,\n      volumeId,\n      scrollSlabs: this.configuration.scrollSlabs,\n    });\n  }\n}\n\nStackScrollMouseWheelTool.toolName = 'StackScrollMouseWheel';\nexport default StackScrollMouseWheelTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\n\nimport {\n  eventTarget,\n  getEnabledElement,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\n/**\n * Tool that rotates the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass TrackballRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  cleanUp: () => void;\n  _resizeObservers = new Map();\n  _viewportAddedListener: (evt: any) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        rotateIncrementDegrees: 2,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const actorEntry = viewport.getDefaultActor();\n    const actor = actorEntry.actor as Types.VolumeActor;\n    const mapper = actor.getMapper();\n    const originalSampleDistance = mapper.getSampleDistance();\n\n    mapper.setSampleDistance(originalSampleDistance * 2);\n\n    if (this.cleanUp !== null) {\n      // Clean up previous event listener\n      document.removeEventListener('mouseup', this.cleanUp);\n    }\n\n    this.cleanUp = () => {\n      mapper.setSampleDistance(originalSampleDistance);\n      viewport.render();\n    };\n\n    document.addEventListener('mouseup', this.cleanUp, { once: true });\n    return true;\n  };\n\n  _getViewportsInfo = () => {\n    const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    return viewports;\n  };\n\n  onSetToolActive = () => {\n    const subscribeToElementResize = () => {\n      const viewportsInfo = this._getViewportsInfo();\n      viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        if (!this._resizeObservers.has(viewportId)) {\n          const { viewport } = getEnabledElementByIds(\n            viewportId,\n            renderingEngineId\n          ) || { viewport: null };\n\n          if (!viewport) {\n            return;\n          }\n\n          const { element } = viewport;\n\n          const resizeObserver = new ResizeObserver(() => {\n            const element = getEnabledElementByIds(\n              viewportId,\n              renderingEngineId\n            );\n            if (!element) {\n              return;\n            }\n            const { viewport } = element;\n            viewport.resetCamera();\n            viewport.render();\n          });\n\n          resizeObserver.observe(element);\n          this._resizeObservers.set(viewportId, resizeObserver);\n        }\n      });\n    };\n\n    subscribeToElementResize();\n\n    this._viewportAddedListener = (evt) => {\n      if (evt.detail.toolGroupId === this.toolGroupId) {\n        subscribeToElementResize();\n      }\n    };\n\n    eventTarget.addEventListener(\n      Events.TOOLGROUP_VIEWPORT_ADDED,\n      this._viewportAddedListener\n    );\n  };\n\n  onSetToolDisabled = () => {\n    // Disconnect all resize observers\n    this._resizeObservers.forEach((resizeObserver, viewportId) => {\n      resizeObserver.disconnect();\n      this._resizeObservers.delete(viewportId);\n    });\n\n    if (this._viewportAddedListener) {\n      eventTarget.removeEventListener(\n        Events.TOOLGROUP_VIEWPORT_ADDED,\n        this._viewportAddedListener\n      );\n      this._viewportAddedListener = null; // Clear the reference to the listener\n    }\n  };\n\n  rotateCamera = (viewport, centerWorld, axis, angle) => {\n    const vtkCamera = viewport.getVtkActiveCamera();\n    const viewUp = vtkCamera.getViewUp();\n    const focalPoint = vtkCamera.getFocalPoint();\n    const position = vtkCamera.getPosition();\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, centerWorld);\n    mat4.rotate(transform, transform, angle, axis);\n    mat4.translate(transform, transform, [\n      -centerWorld[0],\n      -centerWorld[1],\n      -centerWorld[2],\n    ]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, axis);\n    vec3.transformMat4(newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n  };\n\n  // pseudocode inspired from\n  // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js\n  _dragCallback(evt: EventTypes.InteractionEventType): void {\n    const { element, currentPoints, lastPoints } = evt.detail;\n    const currentPointsCanvas = currentPoints.canvas;\n    const lastPointsCanvas = lastPoints.canvas;\n    const { rotateIncrementDegrees } = this.configuration;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const normalizedPosition = [\n      currentPointsCanvas[0] / width,\n      currentPointsCanvas[1] / height,\n    ];\n\n    const normalizedPreviousPosition = [\n      lastPointsCanvas[0] / width,\n      lastPointsCanvas[1] / height,\n    ];\n\n    const center: Types.Point2 = [width * 0.5, height * 0.5];\n    // NOTE: centerWorld corresponds to the focal point in cornerstone3D\n    const centerWorld = viewport.canvasToWorld(center);\n    const normalizedCenter = [0.5, 0.5];\n\n    const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n    const op = [normalizedPreviousPosition[0], 0, 0];\n    const oe = [normalizedPosition[0], 0, 0];\n\n    const opsq = op[0] ** 2;\n    const oesq = oe[0] ** 2;\n\n    const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n    const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n\n    const nop: Types.Point3 = [op[0], 0, lop];\n    vtkMath.normalize(nop);\n    const noe: Types.Point3 = [oe[0], 0, loe];\n    vtkMath.normalize(noe);\n\n    const dot = vtkMath.dot(nop, noe);\n    if (Math.abs(dot) > 0.0001) {\n      const angleX =\n        -2 *\n        Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n        Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n        rotateIncrementDegrees;\n\n      const upVec = camera.viewUp;\n      const atV = camera.viewPlaneNormal;\n      const rightV: Types.Point3 = [0, 0, 0];\n      const forwardV: Types.Point3 = [0, 0, 0];\n\n      vtkMath.cross(upVec, atV, rightV);\n      vtkMath.normalize(rightV);\n\n      vtkMath.cross(atV, rightV, forwardV);\n      vtkMath.normalize(forwardV);\n      vtkMath.normalize(upVec);\n\n      this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n\n      const angleY =\n        (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n        rotateIncrementDegrees;\n\n      this.rotateCamera(viewport, centerWorld, rightV, angleY);\n\n      viewport.render();\n    }\n  }\n}\n\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { mat4, vec3 } from 'gl-matrix';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { MouseWheelEventType } from '../types/EventTypes';\n\nconst DIRECTIONS = {\n  X: [1, 0, 0],\n  Y: [0, 1, 0],\n  Z: [0, 0, 1],\n  CUSTOM: [],\n};\n\n/**\n * Tool that rotates the camera on mouse wheel.\n * It rotates the camera around the focal point, and around a defined axis. Default\n * axis is set to be Z axis, but it can be configured to any custom normalized axis.\n *\n */\nclass VolumeRotateMouseWheelTool extends BaseTool {\n  static toolName;\n  _configuration: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        direction: DIRECTIONS.Z,\n        rotateIncrementDegrees: 30,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType) {\n    // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js#L73\n    const { element, wheel } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { direction, rotateIncrementDegrees } = this.configuration;\n\n    const camera = viewport.getCamera();\n    const { viewUp, position, focalPoint } = camera;\n\n    const { direction: deltaY } = wheel;\n\n    const [cx, cy, cz] = focalPoint;\n    const [ax, ay, az] = direction;\n\n    //Calculate angle in radian as glmatrix rotate is in radian\n    const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n\n    // position[3] = 1.0\n    // focalPoint[3] = 1.0\n    // viewUp[3] = 0.0\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, [cx, cy, cz]);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    mat4.translate(transform, transform, [-cx, -cy, -cz]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    vec3.transformMat4(<Types.Point3>newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n\n    viewport.render();\n  }\n}\n\nVolumeRotateMouseWheelTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateMouseWheelTool;\n","import { BaseTool } from './base';\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  cache,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\nimport { EventTypes } from '../types';\n\n// Todo: should move to configuration\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\n\n/**\n * WindowLevel tool manipulates the windowLevel applied to a viewport. It\n * provides a way to set the windowCenter and windowWidth of a viewport\n * by dragging mouse over the image.\n *\n */\nclass WindowLevelTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this.mouseDragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    let volumeId,\n      lower,\n      upper,\n      modality,\n      newRange,\n      viewportsContainingVolumeUID;\n    let isPreScaled = false;\n\n    const properties = viewport.getProperties();\n    if (viewport instanceof VolumeViewport) {\n      const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n      volumeId = utilities.getVolumeId(targetId);\n      viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n      ({ lower, upper } = properties.voiRange);\n      const volume = cache.getVolume(volumeId);\n      if (!volume) {\n        throw new Error('Volume not found ' + volumeId);\n      }\n      modality = volume.metadata.Modality;\n      isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n    } else if (properties.voiRange) {\n      modality = (viewport as any).modality;\n      ({ lower, upper } = properties.voiRange);\n      const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n      isPreScaled =\n        preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n    } else {\n      throw new Error('Viewport is not a valid type');\n    }\n\n    // If modality is PT an the viewport is pre-scaled (SUV),\n    // treat it special to not include the canvas delta in\n    // the x direction. For other modalities, use the canvas delta in both\n    // directions, and if the viewport is a volumeViewport, the multiplier\n    // is calculate using the volume min and max.\n    if (modality === PT && isPreScaled) {\n      newRange = this.getPTScaledNewRange({\n        deltaPointsCanvas: deltaPoints.canvas,\n        lower,\n        upper,\n        clientHeight: element.clientHeight,\n        isPreScaled,\n        viewport,\n        volumeId,\n      });\n    } else {\n      newRange = this.getNewRange({\n        viewport,\n        deltaPointsCanvas: deltaPoints.canvas,\n        volumeId,\n        lower,\n        upper,\n      });\n    }\n\n    // If the range is not valid. Do nothing\n    if (newRange.lower >= newRange.upper) {\n      return;\n    }\n\n    viewport.setProperties({\n      voiRange: newRange,\n    });\n\n    viewport.render();\n\n    if (viewport instanceof VolumeViewport) {\n      viewportsContainingVolumeUID.forEach((vp) => {\n        if (viewport !== vp) {\n          vp.render();\n        }\n      });\n      return;\n    }\n  }\n\n  getPTScaledNewRange({\n    deltaPointsCanvas,\n    lower,\n    upper,\n    clientHeight,\n    viewport,\n    volumeId,\n    isPreScaled,\n  }) {\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (isPreScaled) {\n      multiplier = 5 / clientHeight;\n    } else {\n      multiplier =\n        this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n        DEFAULT_MULTIPLIER;\n    }\n\n    const deltaY = deltaPointsCanvas[1];\n    const wcDelta = deltaY * multiplier;\n\n    upper -= wcDelta;\n    upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n\n    return { lower, upper };\n  }\n\n  getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n    const multiplier =\n      this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n      DEFAULT_MULTIPLIER;\n\n    const wwDelta = deltaPointsCanvas[0] * multiplier;\n    const wcDelta = deltaPointsCanvas[1] * multiplier;\n\n    let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(\n      lower,\n      upper\n    );\n\n    windowWidth += wwDelta;\n    windowCenter += wcDelta;\n\n    windowWidth = Math.max(windowWidth, 1);\n\n    // Convert back to range\n    return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter);\n  }\n\n  _getMultiplierFromDynamicRange(viewport, volumeId) {\n    let imageDynamicRange;\n\n    if (volumeId) {\n      const imageVolume = cache.getVolume(volumeId);\n      const { dimensions } = imageVolume;\n      const scalarData = imageVolume.getScalarData();\n      const calculatedDynamicRange = this._getImageDynamicRangeFromMiddleSlice(\n        scalarData,\n        dimensions\n      );\n      const BitsStored = imageVolume?.metadata?.BitsStored;\n      const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n      // Burned in Pixels often use pixel values above the BitsStored.\n      // This results in a multiplier which is way higher than what you would\n      // want in practice. Thus we take the min between the metadata dynamic\n      // range and actual middel slice dynamic range.\n      imageDynamicRange = Math.min(\n        calculatedDynamicRange,\n        metadataDynamicRange\n      );\n    } else {\n      imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n    }\n\n    const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n\n    return ratio > 1 ? Math.round(ratio) : ratio;\n  }\n\n  _getImageDynamicRangeFromViewport(viewport) {\n    const { imageData } = viewport.getImageData();\n    const dimensions = imageData.getDimensions();\n\n    if (imageData.getRange) {\n      const imageDataRange = imageData.getRange();\n      return imageDataRange[1] - imageDataRange[0];\n    }\n    let scalarData;\n    // if getScalarData is a method on imageData\n    if (imageData.getScalarData) {\n      scalarData = imageData.getScalarData();\n    } else {\n      scalarData = imageData.getPointData().getScalars();\n    }\n\n    if (dimensions[2] !== 1) {\n      return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n    }\n\n    let range;\n    if (scalarData.getRange) {\n      range = scalarData.getRange();\n    } else {\n      const { min, max } = this._getMinMax(scalarData, scalarData.length);\n      range = [min, max];\n    }\n\n    return range[1] - range[0];\n  }\n\n  _getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n    const middleSliceIndex = Math.floor(dimensions[2] / 2);\n\n    const frameLength = dimensions[0] * dimensions[1];\n    let bytesPerVoxel;\n    let TypedArrayConstructor;\n\n    if (scalarData instanceof Float32Array) {\n      bytesPerVoxel = 4;\n      TypedArrayConstructor = Float32Array;\n    } else if (scalarData instanceof Uint8Array) {\n      bytesPerVoxel = 1;\n      TypedArrayConstructor = Uint8Array;\n    } else if (scalarData instanceof Uint16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Uint16Array;\n    } else if (scalarData instanceof Int16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Int16Array;\n    }\n\n    const buffer = scalarData.buffer;\n    const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n    const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n\n    const { max, min } = this._getMinMax(frame, frameLength);\n\n    return max - min;\n  };\n\n  private _getMinMax(frame: Uint8Array | Float32Array, frameLength: number) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let i = 0; i < frameLength; i++) {\n      const voxel = frame[i];\n\n      if (voxel < min) {\n        min = voxel;\n      }\n\n      if (voxel > max) {\n        max = voxel;\n      }\n    }\n    return { max, min };\n  }\n}\n\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getEnabledElement, Types } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * ZoomTool tool manipulates the camera zoom applied to a viewport. It\n * provides a way to set the zoom of a viewport by dragging mouse over the image.\n *\n */\nclass ZoomTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  initialMousePosWorld: Types.Point3;\n  dirVec: Types.Point3;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        // whether zoom to the center of the image OR zoom to the mouse position\n        zoomToCenter: false,\n        minZoomScale: 0.1,\n        maxZoomScale: 30,\n        pinchToZoom: true,\n        pan: true,\n        invert: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.initialMousePosWorld = [0, 0, 0];\n    this.dirVec = [0, 0, 0];\n    if (this.configuration.pinchToZoom) {\n      this.touchDragCallback = this._pinchCallback.bind(this);\n    } else {\n      this.touchDragCallback = this._dragCallback.bind(this);\n    }\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventData = evt.detail;\n    const { element, currentPoints } = eventData;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint } = camera;\n\n    this.initialMousePosWorld = worldPos;\n\n    // The direction vector from the clicked location to the focal point\n    // which would act as the vector to translate the image (if zoomToCenter is false)\n    let dirVec = vec3.fromValues(\n      focalPoint[0] - worldPos[0],\n      focalPoint[1] - worldPos[1],\n      focalPoint[2] - worldPos[2]\n    );\n\n    dirVec = vec3.normalize(vec3.create(), dirVec);\n\n    this.dirVec = dirVec as Types.Point3;\n\n    // we should not return true here, returning true in the preMouseDownCallback\n    // means that the event is handled by the tool and no other methods\n    // can claim the event, which will result in a bug where having Zoom on primary\n    // and clicking on an annotation will not manipulate the annotation, but will\n    // instead zoom the image (which is not what we want), so we return false here\n    return false;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    if (!this.configuration.pinchToZoom) {\n      return this.preMouseDownCallback(evt);\n    }\n  };\n\n  _pinchCallback(evt: EventTypes.InteractionEventType) {\n    const pointsList = (evt as EventTypes.TouchStartEventType).detail\n      .currentPointsList;\n\n    if (pointsList.length > 1) {\n      const { element, currentPoints } = evt.detail;\n      const enabledElement = getEnabledElement(element);\n      const { viewport } = enabledElement;\n      const camera = viewport.getCamera();\n      const worldPos = currentPoints.world;\n      const { focalPoint } = camera;\n      this.initialMousePosWorld = worldPos;\n      // The direction vector from the clicked location to the focal point\n      // which would act as the vector to translate the image (if zoomToCenter is false)\n      let dirVec = vec3.fromValues(\n        focalPoint[0] - worldPos[0],\n        focalPoint[1] - worldPos[1],\n        focalPoint[2] - worldPos[2]\n      );\n      dirVec = vec3.normalize(vec3.create(), dirVec);\n\n      this.dirVec = dirVec as Types.Point3;\n      if (camera.parallelProjection) {\n        this._dragParallelProjection(evt, viewport, camera, true);\n      } else {\n        this._dragPerspectiveProjection(evt, viewport, camera, true);\n      }\n      viewport.render();\n    }\n\n    if (this.configuration.pan) {\n      this._panCallback(evt);\n    }\n  }\n\n  // Takes ICornerstoneEvent, Mouse or Touch\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n\n    if (camera.parallelProjection) {\n      this._dragParallelProjection(evt, viewport, camera);\n    } else {\n      this._dragPerspectiveProjection(evt, viewport, camera);\n    }\n\n    viewport.render();\n  }\n\n  _dragParallelProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { parallelScale, focalPoint, position } = camera;\n\n    const zoomScale = 5 / size[1];\n    const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n\n    const parallelScaleToSet = (1.0 - k) * parallelScale;\n\n    let focalPointToSet = focalPoint;\n    let positionToSet = position;\n\n    // if we're not zooming to the center, we need to adjust the focal point\n    // and position to set the focal point and position to the value that\n    // would simulate the zoom to the mouse position\n    if (!this.configuration.zoomToCenter) {\n      // Distance of the initial mouse position (world) to the focal point\n      // which is always the center of the canvas.\n      const distanceToCanvasCenter = vec3.distance(\n        focalPoint,\n        this.initialMousePosWorld\n      );\n\n      positionToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        position,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n\n      focalPointToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        focalPoint,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n    }\n\n    // If it is a regular GPU accelerated viewport, then parallel scale\n    // has a physical meaning and we can use that to determine the threshold\n    // Added spacing preset in case there is no imageData on viewport\n    const imageData = viewport.getImageData();\n    let spacing = [1, 1, 1];\n    if (imageData) {\n      spacing = imageData.spacing;\n    }\n\n    const { minZoomScale, maxZoomScale } = this.configuration;\n\n    const t = element.clientHeight * spacing[1] * 0.5;\n    const scale = t / parallelScaleToSet;\n\n    let cappedParallelScale = parallelScaleToSet;\n    let thresholdExceeded = false;\n\n    if (imageData) {\n      if (scale < minZoomScale) {\n        cappedParallelScale = t / minZoomScale;\n        thresholdExceeded = true;\n      } else if (scale >= maxZoomScale) {\n        cappedParallelScale = t / maxZoomScale;\n        thresholdExceeded = true;\n      }\n    }\n\n    viewport.setCamera({\n      parallelScale: cappedParallelScale,\n      focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n      position: thresholdExceeded ? position : positionToSet,\n    });\n  };\n\n  _dragPerspectiveProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { position, focalPoint, viewPlaneNormal } = camera;\n\n    const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n    const zoomScale = Math.sqrt(distance) / size[1];\n\n    const directionOfProjection = [\n      -viewPlaneNormal[0],\n      -viewPlaneNormal[1],\n      -viewPlaneNormal[2],\n    ];\n\n    const k = this.configuration.invert\n      ? deltaY / zoomScale\n      : deltaY * zoomScale;\n\n    let tmp = k * directionOfProjection[0];\n    position[0] += tmp;\n    focalPoint[0] += tmp;\n\n    tmp = k * directionOfProjection[1];\n    position[1] += tmp;\n    focalPoint[1] += tmp;\n\n    tmp = k * directionOfProjection[2];\n    position[2] += tmp;\n    focalPoint[2] += tmp;\n\n    viewport.setCamera({ position, focalPoint });\n  };\n\n  _panCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { roundNumber } from '../../utilities';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { AngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass AngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.InteractionEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): AngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2, point3] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n    if (!point3) {\n      return false;\n    }\n\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n\n    const line2 = {\n      start: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n      end: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n    };\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n      // adds the last point to the measurement\n      this.editData.handleIndex = 2;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      this.angleStartedNotYetCompleted = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].angle == null\n      ) {\n        data.cachedStats[targetId] = {\n          angle: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      let lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add textBox until annotation has 3 anchor points (actually 4 because of the center point)\n      if (canvasCoordinates.length !== 3) {\n        return renderStatus;\n      }\n\n      lineUID = '2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[1],\n        canvasCoordinates[2],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the vertex by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { element } = enabledElement.viewport;\n\n    // Until we have all three anchors bail out\n    if (data.handles.points.length !== 3) {\n      return;\n    }\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const angle = angleBetweenLines(\n        [worldPos1, worldPos2],\n        [worldPos2, worldPos3]\n      );\n      const { dimensions, imageData } = this.getTargetIdImage(\n        targetId,\n        renderingEngine\n      );\n\n      // Decide if there's at least one handle is outside of image\n      this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n        .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n        .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n      cachedStats[targetId] = {\n        angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n\n    return cachedStats;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { angle } = cachedVolumeStats;\n\n  if (angle === undefined) {\n    return;\n  }\n\n  if (isNaN(angle)) {\n    // The verbiage for incomplete angle is set in cachedStats\n    return [`${angle}`];\n  }\n\n  const textLines = [`${roundNumber(angle)} ${String.fromCharCode(176)}`];\n\n  return textLines;\n}\n\nAngleTool.toolName = 'Angle';\nexport default AngleTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawArrow as drawArrowSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ArrowAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass ArrowAnnotateTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        getTextCallback,\n        changeTextCallback,\n        preventHandleOutsideImage: false,\n        arrowFirst: true,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ArrowAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const { arrowFirst } = this.configuration;\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        text: '',\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          arrowFirst,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: ArrowAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const { renderingEngine } = getEnabledElement(element);\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    if (newAnnotation) {\n      this.configuration.getTextCallback((text) => {\n        if (!text) {\n          removeAnnotation(annotation.annotationUID);\n          triggerAnnotationRenderForViewportIds(\n            renderingEngine,\n            viewportIdsToRender\n          );\n          this.editData = null;\n          this.isDrawing = false;\n          return;\n        }\n        annotation.data.text = text;\n\n        triggerAnnotationCompleted(annotation);\n\n        triggerAnnotationRenderForViewportIds(\n          renderingEngine,\n          viewportIdsToRender\n        );\n      });\n    } else {\n      triggerAnnotationModified(annotation, element);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  touchTapCallback = (evt: EventTypes.TouchTapEventType) => {\n    if (evt.detail.taps == 2) {\n      this.doubleClickCallback(evt);\n    }\n  };\n\n  doubleClickCallback = (evt: EventTypes.TouchTapEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const clickedAnnotation = annotations.find((annotation) =>\n      this.isPointNearTool(\n        element,\n        annotation as ArrowAnnotation,\n        eventDetail.currentPoints.canvas,\n        6 // Todo: get from configuration\n      )\n    );\n\n    if (!clickedAnnotation) {\n      return;\n    }\n\n    const annotation = clickedAnnotation as ArrowAnnotation;\n\n    this.configuration.changeTextCallback(\n      clickedAnnotation,\n      evt.detail,\n      this._doneChangingTextCallback.bind(this, element, annotation)\n    );\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    // This double click was handled and the dialogue was displayed.\n    // No need for any other listener to handle it too - stopImmediatePropagation\n    // helps ensure this primarily so that no other listeners on the target element\n    // get called.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  };\n\n  _doneChangingTextCallback(element, annotation, updatedText): void {\n    annotation.data.text = updatedText;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n  }\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const { renderingEngine } = getEnabledElement(element);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ArrowAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles, text } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      const arrowUID = '1';\n      if (this.configuration.arrowFirst) {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[1],\n          canvasCoordinates[0],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      } else {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      }\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!text) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      // Need to update to sync w/ annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the point that doesn't have the arrowhead by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        [text],\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction getTextCallback(doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nArrowAnnotateTool.toolName = 'ArrowAnnotate';\nexport default ArrowAnnotateTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { roundNumber } from '../../utilities';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport {\n  drawLine as drawLineSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BidirectionalAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * BidirectionalTool let you draw annotations that measures the length and\n * width at the same time in `mm` unit. It is consisted of two perpendicular lines and\n * a text box. You can use the BidirectionalTool in all planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(BidirectionalTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(BidirectionalTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(BidirectionalTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass BidirectionalTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n  preventHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Bidirectional Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation(\n    evt: EventTypes.InteractionEventType\n  ): BidirectionalAnnotation {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: BidirectionalAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [\n            // long\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            // short\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  }\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: BidirectionalAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Check long axis\n    let canvasPoint1 = viewport.worldToCanvas(points[0]);\n    let canvasPoint2 = viewport.worldToCanvas(points[1]);\n\n    let line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    let distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    // Check short axis\n    canvasPoint1 = viewport.worldToCanvas(points[2]);\n    canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Handles the toolSelected callback for bidirectional tool\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Executes the callback for when mouse has selected a handle (anchor point) of\n   * the bidirectional tool or when the text box has been selected.\n   *\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param handle - Handle index or selected textBox information\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const data = annotation.data;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    hideElementCursor(element);\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Handles the mouse up action for the bidirectional tool. It can be at the end\n   * of the annotation drawing (MouseUpEventType) or when the user clicks and release\n   * the mouse button instantly which let to the annotation to draw without holding\n   * the mouse button (MouseClickEventType).\n   *\n   * @param evt - mouse up or mouse click event types\n   */\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const { renderingEngine } = getEnabledElement(element);\n\n    if (this.editData.handleIndex !== undefined) {\n      const { points } = data.handles;\n      const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n      const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n\n      if (secondLineSegmentLength > firstLineSegmentLength) {\n        // Switch points so [0,1] is the long axis and [2,3] is the short axis.\n\n        const longAxis = [[...points[2]], [...points[3]]];\n\n        const shortAxisPoint0 = [...points[0]];\n        const shortAxisPoint1 = [...points[1]];\n\n        // shortAxis[0->1] should be perpendicular (counter-clockwise) to longAxis[0->1]\n        const longAxisVector = vec2.create();\n\n        vec2.set(\n          longAxisVector,\n          longAxis[1][0] - longAxis[0][0],\n          longAxis[1][1] - longAxis[1][0]\n        );\n\n        const counterClockWisePerpendicularToLongAxis = vec2.create();\n\n        vec2.set(\n          counterClockWisePerpendicularToLongAxis,\n          -longAxisVector[1],\n          longAxisVector[0]\n        );\n\n        const currentShortAxisVector = vec2.create();\n\n        vec2.set(\n          currentShortAxisVector,\n          shortAxisPoint1[0] - shortAxisPoint0[0],\n          shortAxisPoint1[1] - shortAxisPoint0[0]\n        );\n\n        let shortAxis;\n\n        if (\n          vec2.dot(\n            currentShortAxisVector,\n            counterClockWisePerpendicularToLongAxis\n          ) > 0\n        ) {\n          shortAxis = [shortAxisPoint0, shortAxisPoint1];\n        } else {\n          shortAxis = [shortAxisPoint1, shortAxisPoint0];\n        }\n\n        data.handles.points = [\n          longAxis[0],\n          longAxis[1],\n          shortAxis[0],\n          shortAxis[1],\n        ];\n      }\n    }\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * @param evt - mouse move event type or mouse drag\n   */\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    const worldPos = currentPoints.world;\n\n    // Update first move handle\n    data.handles.points[handleIndex] = [...worldPos];\n\n    const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n\n    const canvasCoords = {\n      longLineSegment: {\n        start: {\n          x: canvasCoordPoints[0][0],\n          y: canvasCoordPoints[0][1],\n        },\n        end: {\n          x: canvasCoordPoints[1][0],\n          y: canvasCoordPoints[1][1],\n        },\n      },\n      shortLineSegment: {\n        start: {\n          x: canvasCoordPoints[2][0],\n          y: canvasCoordPoints[2][1],\n        },\n        end: {\n          x: canvasCoordPoints[3][0],\n          y: canvasCoordPoints[3][1],\n        },\n      },\n    };\n\n    // ~~ calculate worldPos of our short axis handles\n    // short axis is perpendicular to long axis, and we set its length to be 2/3 of long axis\n    // (meaning each)\n    const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n\n    const shortAxisDistFromCenter = dist / 3;\n    // Calculate long line's incline\n    const dx =\n      canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n    const dy =\n      canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const vectorX = dx / length;\n    const vectorY = dy / length;\n    // middle point between long line segment's points\n    const xMid =\n      (canvasCoords.longLineSegment.start.x +\n        canvasCoords.longLineSegment.end.x) /\n      2;\n    const yMid =\n      (canvasCoords.longLineSegment.start.y +\n        canvasCoords.longLineSegment.end.y) /\n      2;\n    // short points 1/3 distance from center of long points\n    const startX = xMid + shortAxisDistFromCenter * vectorY;\n    const startY = yMid - shortAxisDistFromCenter * vectorX;\n    const endX = xMid - shortAxisDistFromCenter * vectorY;\n    const endY = yMid + shortAxisDistFromCenter * vectorX;\n\n    // Update perpendicular line segment's points\n    data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n    data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData.hasMoved = true;\n  };\n\n  /**\n   * Mouse drag to edit annotation callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragModifyHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  /**\n   * Mouse dragging a handle callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { annotation, handleIndex: movingHandleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle\n    const worldPos = currentPoints.world;\n    const canvasCoordHandlesCurrent = [\n      viewport.worldToCanvas(data.handles.points[0]),\n      viewport.worldToCanvas(data.handles.points[1]),\n      viewport.worldToCanvas(data.handles.points[2]),\n      viewport.worldToCanvas(data.handles.points[3]),\n    ];\n\n    const firstLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[0][0],\n        y: canvasCoordHandlesCurrent[0][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[1][0],\n        y: canvasCoordHandlesCurrent[1][1],\n      },\n    };\n    const secondLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[2][0],\n        y: canvasCoordHandlesCurrent[2][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[3][0],\n        y: canvasCoordHandlesCurrent[3][1],\n      },\n    };\n\n    // Handle we've selected's proposed point\n    const proposedPoint = <Types.Point3>[...worldPos];\n    const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n\n    if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n      const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n\n      const fixedHandleCanvasCoord =\n        canvasCoordHandlesCurrent[fixedHandleIndex];\n\n      const fixedHandleToProposedCoordVec = vec2.set(\n        vec2.create(),\n        proposedCanvasCoord[0] - fixedHandleCanvasCoord[0],\n        proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]\n      );\n\n      const fixedHandleToOldCoordVec = vec2.set(\n        vec2.create(),\n        canvasCoordHandlesCurrent[movingHandleIndex][0] -\n          fixedHandleCanvasCoord[0],\n        canvasCoordHandlesCurrent[movingHandleIndex][1] -\n          fixedHandleCanvasCoord[1]\n      );\n\n      // normalize vector\n      vec2.normalize(\n        fixedHandleToProposedCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n      vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n\n      // Check whether this\n      const proposedFirstLineSegment = {\n        start: {\n          x: fixedHandleCanvasCoord[0],\n          y: fixedHandleCanvasCoord[1],\n        },\n        end: {\n          x: proposedCanvasCoord[0],\n          y: proposedCanvasCoord[1],\n        },\n      };\n\n      // Note: this is the case when we are modifying the long axis line segment\n      // and we make it shorter and shorter until its second half size becomes zero\n      // which basically means that any more modification would make the long axis\n      // second half disappear. In this case, we just bail out and do not update\n      // since we don't want to disrupt the bidirectional shape.\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          proposedFirstLineSegment,\n          secondLineSegment\n        )\n      ) {\n        return;\n      }\n\n      const centerOfRotation = fixedHandleCanvasCoord;\n\n      const angle = this._getSignedAngle(\n        fixedHandleToOldCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n\n      // rotate handles around the center of rotation, first translate to origin,\n      // then rotate, then translate back\n      let firstPointX = canvasCoordHandlesCurrent[2][0];\n      let firstPointY = canvasCoordHandlesCurrent[2][1];\n\n      let secondPointX = canvasCoordHandlesCurrent[3][0];\n      let secondPointY = canvasCoordHandlesCurrent[3][1];\n\n      // translate to origin\n      firstPointX -= centerOfRotation[0];\n      firstPointY -= centerOfRotation[1];\n\n      secondPointX -= centerOfRotation[0];\n      secondPointY -= centerOfRotation[1];\n\n      // rotate\n      const rotatedFirstPoint =\n        firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n      const rotatedFirstPointY =\n        firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n\n      const rotatedSecondPoint =\n        secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n      const rotatedSecondPointY =\n        secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n\n      // translate back\n      firstPointX = rotatedFirstPoint + centerOfRotation[0];\n      firstPointY = rotatedFirstPointY + centerOfRotation[1];\n\n      secondPointX = rotatedSecondPoint + centerOfRotation[0];\n      secondPointY = rotatedSecondPointY + centerOfRotation[1];\n\n      // update handles\n      const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n      const newSecondPoint = viewport.canvasToWorld([\n        secondPointX,\n        secondPointY,\n      ]);\n\n      // the fixed handle is the one that is not being moved so we\n      // don't need to update it\n      data.handles.points[movingHandleIndex] = proposedPoint;\n      data.handles.points[2] = newFirstPoint;\n      data.handles.points[3] = newSecondPoint;\n    } else {\n      // Translation manipulator\n      const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n\n      const canvasCoordsCurrent = {\n        longLineSegment: {\n          start: firstLineSegment.start,\n          end: firstLineSegment.end,\n        },\n        shortLineSegment: {\n          start: secondLineSegment.start,\n          end: secondLineSegment.end,\n        },\n      };\n\n      const longLineSegmentVec = vec2.subtract(\n        vec2.create(),\n        [\n          canvasCoordsCurrent.longLineSegment.end.x,\n          canvasCoordsCurrent.longLineSegment.end.y,\n        ],\n        [\n          canvasCoordsCurrent.longLineSegment.start.x,\n          canvasCoordsCurrent.longLineSegment.start.y,\n        ]\n      );\n\n      const longLineSegmentVecNormalized = vec2.normalize(\n        vec2.create(),\n        longLineSegmentVec\n      );\n\n      const proposedToCurrentVec = vec2.subtract(\n        vec2.create(),\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [\n          canvasCoordHandlesCurrent[movingHandleIndex][0],\n          canvasCoordHandlesCurrent[movingHandleIndex][1],\n        ]\n      );\n\n      const movementLength = vec2.length(proposedToCurrentVec);\n\n      const angle = this._getSignedAngle(\n        longLineSegmentVecNormalized,\n        proposedToCurrentVec\n      );\n\n      const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n\n      const newTranslatedPoint = vec2.scaleAndAdd(\n        vec2.create(),\n        [\n          canvasCoordHandlesCurrent[translateHandleIndex][0],\n          canvasCoordHandlesCurrent[translateHandleIndex][1],\n        ],\n        longLineSegmentVecNormalized,\n        movementAlongLineSegmentLength\n      );\n\n      // don't update if it passes through the other line segment\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          {\n            start: {\n              x: proposedCanvasCoord[0],\n              y: proposedCanvasCoord[1],\n            },\n            end: {\n              x: newTranslatedPoint[0],\n              y: newTranslatedPoint[1],\n            },\n          },\n          {\n            start: {\n              x: canvasCoordsCurrent.longLineSegment.start.x,\n              y: canvasCoordsCurrent.longLineSegment.start.y,\n            },\n            end: {\n              x: canvasCoordsCurrent.longLineSegment.end.x,\n              y: canvasCoordsCurrent.longLineSegment.end.y,\n            },\n          }\n        )\n      ) {\n        return;\n      }\n\n      const intersectionPoint = lineSegment.intersectLine(\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [newTranslatedPoint[0], newTranslatedPoint[1]],\n        [firstLineSegment.start.x, firstLineSegment.start.y],\n        [firstLineSegment.end.x, firstLineSegment.end.y]\n      );\n\n      // don't update if it doesn't intersect\n      if (!intersectionPoint) {\n        return;\n      }\n\n      data.handles.points[translateHandleIndex] = viewport.canvasToWorld(\n        newTranslatedPoint as Types.Point2\n      );\n      data.handles.points[movingHandleIndex] = proposedPoint;\n    }\n  };\n\n  /**\n   * Cancels an ongoing drawing of a bidirectional annotation\n   * @param element - HTML Element\n   */\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const { renderingEngine } = getEnabledElement(element);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the bidirectional annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = true;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as BidirectionalAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit == null\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          width: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId1 = `${annotationUID}-line-1`;\n      const dataId2 = `${annotationUID}-line-2`;\n\n      const lineUID = '0';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId1\n      );\n\n      const secondLineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        secondLineUID,\n        canvasCoordinates[2],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId2\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _movingLongAxisWouldPutItThroughShortAxis = (\n    firstLineSegment,\n    secondLineSegment\n  ) => {\n    const vectorInSecondLineDirection = vec2.create();\n\n    vec2.set(\n      vectorInSecondLineDirection,\n      secondLineSegment.end.x - secondLineSegment.start.x,\n      secondLineSegment.end.y - secondLineSegment.start.y\n    );\n\n    vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n\n    const extendedSecondLineSegment = {\n      start: {\n        x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n      },\n      end: {\n        x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n      },\n    };\n\n    // Add some buffer in the secondLineSegment when finding the proposedIntersectionPoint\n    // Of points to stop us getting stack when rotating quickly.\n\n    const proposedIntersectionPoint = lineSegment.intersectLine(\n      [extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y],\n      [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y],\n      [firstLineSegment.start.x, firstLineSegment.start.y],\n      [firstLineSegment.end.x, firstLineSegment.end.y]\n    );\n\n    const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n\n    return wouldPutThroughShortAxis;\n  };\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n    const { data } = annotation;\n    const { element } = enabledElement.viewport;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n    const worldPos4 = data.handles.points[3];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n      const index3 = transformWorldToIndex(imageData, worldPos3);\n      const index4 = transformWorldToIndex(imageData, worldPos4);\n\n      const handles1 = [index1, index2];\n      const handles2 = [index3, index4];\n\n      const { scale: scale1, units: units1 } = getCalibratedLengthUnitsAndScale(\n        image,\n        handles1\n      );\n\n      const { scale: scale2, units: units2 } = getCalibratedLengthUnitsAndScale(\n        image,\n        handles2\n      );\n\n      const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n      const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n      const length = dist1 > dist2 ? dist1 : dist2;\n      const width = dist1 > dist2 ? dist2 : dist1;\n\n      const lengthUnit = dist1 > dist2 ? units1 : units2;\n      const widthUnit = dist1 > dist2 ? units2 : units1;\n\n      this._isInsideVolume(index1, index2, index3, index4, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      cachedStats[targetId] = {\n        length,\n        width,\n        unit: units1,\n        lengthUnit,\n        widthUnit,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, index3, index4, dimensions): boolean => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions) &&\n      csUtils.indexWithinDimensions(index3, dimensions) &&\n      csUtils.indexWithinDimensions(index4, dimensions)\n    );\n  };\n\n  _getSignedAngle = (vector1, vector2) => {\n    return Math.atan2(\n      vector1[0] * vector2[1] - vector1[1] * vector2[0],\n      vector1[0] * vector2[0] + vector1[1] * vector2[1]\n    );\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const { cachedStats, label } = data;\n  const { length, width, unit, lengthUnit, widthUnit } = cachedStats[targetId];\n\n  const textLines = [];\n  if (label) {\n    textLines.push(label);\n  }\n  if (length === undefined) {\n    return textLines;\n  }\n\n  // spaceBetweenSlices & pixelSpacing &\n  // magnitude in each direction? Otherwise, this is \"px\"?\n  textLines.push(\n    `L: ${roundNumber(length)} ${lengthUnit || unit}`,\n    `W: ${roundNumber(width)} ${widthUnit || unit}`\n  );\n\n  return textLines;\n}\n\nBidirectionalTool.toolName = 'Bidirectional';\nexport default BidirectionalTool;\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getCalibratedAspect } from '../../utilities/getCalibratedUnits';\nimport { getCalibratedLengthUnitsAndScale, roundNumber } from '../../utilities';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CircleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  getCanvasCircleCorners,\n  getCanvasCircleRadius,\n} from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * CircleROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use CircleROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Circle tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(CircleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(CircleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(CircleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(CircleROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass CircleROITool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the circle.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CircleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [[...worldPos], [...worldPos]] as [\n            Types.Point3, // center\n            Types.Point3 // end\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CircleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const radius = getCanvasCircleRadius(canvasCoordinates);\n    const radiusPoint = getCanvasCircleRadius([\n      canvasCoordinates[0],\n      canvasCoords,\n    ]);\n\n    if (Math.abs(radiusPoint - radius) < proximity / 2) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n\n      handleIndex = points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Circle ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the circle,\n    // and they are by definition not in the circle on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const { renderingEngine } = getEnabledElement(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points = [\n      data.handles.points[0], // center stays\n      canvasToWorld(currentCanvasPoints), // end point moves (changing radius)\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n\n    const { annotation, handleIndex } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => worldToCanvas(p));\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0) {\n      // Dragging center, move the circle ROI\n      const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n      const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n\n      const canvasCenter = currentCanvasPoints as Types.Point2;\n      const canvasEnd = <Types.Point2>[\n        canvasCoordinates[1][0] + dXCanvas,\n        canvasCoordinates[1][1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasCenter);\n      points[1] = canvasToWorld(canvasEnd);\n    } else {\n      // Dragging end point, center stays\n      points[1] = canvasToWorld(currentCanvasPoints);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const { renderingEngine } = getEnabledElement(element);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CircleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2];\n      const center = canvasCoordinates[0];\n      const radius = getCanvasCircleRadius(canvasCoordinates);\n      const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n\n      const { centerPointRadius } = this.configuration;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n          radius: null,\n          radiusUnit: null,\n          perimeter: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-circle`;\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        if (radius > 3 * centerPointRadius) {\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${circleUID}-center`,\n            center,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const data = annotation.data;\n    const { element } = viewport;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasCircleCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const pos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      pos1Index[0] = Math.floor(pos1Index[0]);\n      pos1Index[1] = Math.floor(pos1Index[1]);\n      pos1Index[2] = Math.floor(pos1Index[2]);\n\n      const pos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      pos2Index[0] = Math.floor(pos2Index[0]);\n      pos2Index[1] = Math.floor(pos2Index[1]);\n      pos2Index[2] = Math.floor(pos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n        const iMin = Math.min(pos1Index[0], pos2Index[0]);\n        const iMax = Math.max(pos1Index[0], pos2Index[0]);\n\n        const jMin = Math.min(pos1Index[1], pos2Index[1]);\n        const jMax = Math.max(pos1Index[1], pos2Index[1]);\n\n        const kMin = Math.min(pos1Index[2], pos2Index[2]);\n        const kMax = Math.max(pos1Index[2], pos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const handles = [pos1Index, pos2Index];\n        const { scale, units, areaUnits } = getCalibratedLengthUnitsAndScale(\n          image,\n          handles\n        );\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(\n          Math.PI *\n            (worldWidth / scale / 2) *\n            (worldHeight / aspect / scale / 2)\n        );\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          (pointLPS) =>\n            pointInEllipse(ellipseObj, pointLPS, {\n              fast: true,\n            }),\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats.mean?.value,\n          max: stats.max?.value,\n          stdDev: stats.stdDev?.value,\n          statsArray: stats.array,\n          pointsInShape: pointsInShape,\n          isEmptyArea,\n          areaUnit: areaUnits,\n          radius: worldWidth / 2 / scale,\n          radiusUnit: units,\n          perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const {\n    radius,\n    radiusUnit,\n    area,\n    mean,\n    stdDev,\n    max,\n    isEmptyArea,\n    areaUnit,\n    modalityUnit,\n  } = cachedVolumeStats;\n  const textLines: string[] = [];\n\n  if (radius) {\n    const radiusLine = isEmptyArea\n      ? `Radius: Oblique not supported`\n      : `Radius: ${roundNumber(radius)} ${radiusUnit}`;\n    textLines.push(radiusLine);\n  }\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n    textLines.push(areaLine);\n  }\n\n  if (mean) {\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  }\n\n  if (max) {\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  }\n\n  if (stdDev) {\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nCircleROITool.toolName = 'CircleROI';\nexport default CircleROITool;\n","import { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CobbAngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass CobbAngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    isNearFirstLine?: boolean;\n    isNearSecondLine?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n        showArcLines: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      25,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): CobbAngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CobbAngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n\n    const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n      viewport,\n      points: data.handles.points,\n      canvasCoords,\n      proximity,\n    });\n\n    if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.MouseDownEventType,\n    annotation: CobbAngleAnnotation,\n    interactionType: InteractionTypes,\n    canvasCoords: Types.Point2,\n    proximity = 6\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n      viewport,\n      points: annotation.data.handles.points,\n      canvasCoords,\n      proximity,\n    });\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n      isNearFirstLine,\n      isNearSecondLine,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.MouseDownEventType,\n    annotation: CobbAngleAnnotation,\n    handle: ToolHandle,\n    interactionType = 'mouse'\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _mouseUpCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n      resetElementCursor(element);\n\n      // adds the first point of the second line\n      this.editData.handleIndex = data.handles.points.length;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * Handles the mouse down for all points that follow the very first mouse down.\n   * The very first mouse down is handled by addAnnotation.\n   * This method ensures that the state of the tool is correct for the drawing of the second line segment.\n   * In particular it ensures that the second segment can be created via a mouse down and drag.\n   */\n  _mouseDownCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const { annotation, handleIndex } = this.editData;\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const worldPos = currentPoints.world;\n    const { data } = annotation;\n\n    if (handleIndex === 1) {\n      // This is the mouse down for the second point of the first segment.\n      // The mouse up takes care of adding the first point of the second segment.\n      data.handles.points[1] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[1][0] !== data.handles.points[0][0] ||\n        data.handles.points[1][1] !== data.handles.points[0][0];\n      return;\n    }\n\n    if (handleIndex === 3) {\n      // This is the mouse down for the second point of the second segment (i.e. the last point)\n      data.handles.points[3] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[3][0] !== data.handles.points[2][0] ||\n        data.handles.points[3][1] !== data.handles.points[2][0];\n\n      this.angleStartedNotYetCompleted = false;\n      return;\n    }\n\n    // This is the first mouse down of the first point of the second line segment.\n    // It is as if we have not moved yet because Cobb Angle has two, disjoint sections, each with its own move.\n    this.editData.hasMoved = false;\n    hideElementCursor(element);\n\n    // Add the last segment points for the subsequent drag/mouse move.\n    data.handles.points[2] = data.handles.points[3] = worldPos;\n    this.editData.handleIndex = data.handles.points.length - 1;\n  };\n\n  _mouseDragCallback = (\n    evt: EventTypes.MouseDragEventType | EventTypes.MouseMoveEventType\n  ) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n      isNearFirstLine,\n      isNearSecondLine,\n    } = this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (\n      handleIndex === undefined &&\n      (isNearFirstLine || isNearSecondLine)\n    ) {\n      // select tool mode - moving annotation\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n      const points = data.handles.points;\n\n      // separate the logic for moving handles to move them separately\n      if (isNearFirstLine) {\n        const firstLinePoints = [points[0], points[1]];\n        firstLinePoints.forEach((point) => {\n          point[0] += worldPosDelta[0];\n          point[1] += worldPosDelta[1];\n          point[2] += worldPosDelta[2];\n        });\n      } else if (isNearSecondLine) {\n        const secondLinePoints = [points[2], points[3]];\n        secondLinePoints.forEach((point) => {\n          point[0] += worldPosDelta[0];\n          point[1] += worldPosDelta[1];\n          point[2] += worldPosDelta[2];\n        });\n      }\n\n      annotation.invalidated = true;\n    } else {\n      // Drag handle mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    if (data.handles.points.length < 4) {\n      // If it is mid-draw\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n\n    this.editData = null;\n    this.angleStartedNotYetCompleted = false;\n    return annotation.annotationUID;\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CobbAngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].angle == null\n      ) {\n        data.cachedStats[targetId] = {\n          angle: null,\n          arc1Angle: null,\n          arc2Angle: null,\n          points: {\n            world: {\n              arc1Start: null,\n              arc1End: null,\n              arc2Start: null,\n              arc2End: null,\n              arc1Angle: null,\n              arc2Angle: null,\n            },\n            canvas: {\n              arc1Start: null,\n              arc1End: null,\n              arc2Start: null,\n              arc2End: null,\n              arc1Angle: null,\n              arc2Angle: null,\n            },\n          },\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const firstLine = [canvasCoordinates[0], canvasCoordinates[1]] as [\n        Types.Point2,\n        Types.Point2\n      ];\n      const secondLine = [canvasCoordinates[2], canvasCoordinates[3]] as [\n        Types.Point2,\n        Types.Point2\n      ];\n\n      let lineUID = 'line1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        firstLine[0],\n        firstLine[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add the stats until annotation has 4 anchor points\n      if (canvasCoordinates.length < 4) {\n        return renderStatus;\n      }\n\n      lineUID = 'line2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        secondLine[0],\n        secondLine[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      lineUID = 'linkLine';\n      const mid1 = midPoint2(firstLine[0], firstLine[1]);\n      const mid2 = midPoint2(secondLine[0], secondLine[1]);\n      drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n        color,\n        lineWidth: '1',\n        lineDash: '1,4',\n      });\n\n      // Calculating the arcs\n\n      const { arc1Start, arc1End, arc2End, arc2Start } =\n        data.cachedStats[targetId].points.canvas;\n      const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n\n      if (this.configuration.showArcLines) {\n        lineUID = 'arc1';\n\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          arc1Start as Types.Point2,\n          arc1End as Types.Point2,\n          {\n            color,\n            lineWidth: '1',\n          }\n        );\n\n        lineUID = 'arc2';\n\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          arc2Start as Types.Point2,\n          arc2End as Types.Point2,\n          {\n            color,\n            lineWidth: '1',\n          }\n        );\n      }\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = 'cobbAngleText';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n\n      if (this.configuration.showArcLines) {\n        const arc1TextBoxUID = 'arcAngle1';\n\n        const arc1TextLine = [\n          `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n        ];\n\n        const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n\n        drawTextBoxSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arc1TextBoxUID,\n          arc1TextLine,\n          arch1TextPosCanvas,\n          {\n            ...options,\n            padding: 3,\n          }\n        );\n\n        const arc2TextBoxUID = 'arcAngle2';\n\n        const arc2TextLine = [\n          `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n        ];\n\n        const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n\n        drawTextBoxSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arc2TextBoxUID,\n          arc2TextLine,\n          arch2TextPosCanvas,\n          {\n            ...options,\n            padding: 3,\n          }\n        );\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n\n    // Until we have all four anchors bail out\n    if (data.handles.points.length !== 4) {\n      return;\n    }\n\n    const seg1: [Types.Point3, Types.Point3] = [null, null];\n    const seg2: [Types.Point3, Types.Point3] = [null, null];\n    let minDist = Number.MAX_VALUE;\n\n    // Order the endpoints of each line segment such that seg1[1] and seg2[0]\n    // are the closest (Euclidean distance-wise) to each other. Thus\n    // the angle formed between the vectors seg1[1]->seg1[0] and seg2[0]->seg[1]\n    // is calculated.\n    // The assumption here is that the Cobb angle line segments are drawn\n    // such that the segments intersect nearest the segment endpoints\n    // that are closest AND those closest endpoints are the tails of the\n    // vectors used to calculate the angle between the vectors/line segments.\n    for (let i = 0; i < 2; i += 1) {\n      for (let j = 2; j < 4; j += 1) {\n        const dist = vec3.distance(\n          data.handles.points[i],\n          data.handles.points[j]\n        );\n        if (dist < minDist) {\n          minDist = dist;\n          seg1[1] = data.handles.points[i];\n          seg1[0] = data.handles.points[(i + 1) % 2];\n          seg2[0] = data.handles.points[j];\n          seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n        }\n      }\n    }\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    const canvasPoints = data.handles.points.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n\n    const firstLine = [canvasPoints[0], canvasPoints[1]] as [\n      Types.Point2,\n      Types.Point2\n    ];\n    const secondLine = [canvasPoints[2], canvasPoints[3]] as [\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const mid1 = midPoint2(firstLine[0], firstLine[1]);\n    const mid2 = midPoint2(secondLine[0], secondLine[1]);\n\n    const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } =\n      this.getArcsStartEndPoints({\n        firstLine,\n        secondLine,\n        mid1,\n        mid2,\n      });\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      cachedStats[targetId] = {\n        angle: angleBetweenLines(seg1, seg2),\n        arc1Angle,\n        arc2Angle,\n        points: {\n          canvas: {\n            arc1Start,\n            arc1End,\n            arc2End,\n            arc2Start,\n          },\n          world: {\n            arc1Start: viewport.canvasToWorld(arc1Start),\n            arc1End: viewport.canvasToWorld(arc1End),\n            arc2End: viewport.canvasToWorld(arc2End),\n            arc2Start: viewport.canvasToWorld(arc2Start),\n          },\n        },\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n\n    return cachedStats;\n  }\n\n  distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n    const [point1, point2, point3, point4] = points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n    const canvasPoint4 = viewport.worldToCanvas(point4);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const line2 = {\n      start: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n      end: {\n        x: canvasPoint4[0],\n        y: canvasPoint4[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    let isNearFirstLine = false;\n    let isNearSecondLine = false;\n\n    if (distanceToPoint <= proximity) {\n      isNearFirstLine = true;\n    } else if (distanceToPoint2 <= proximity) {\n      isNearSecondLine = true;\n    }\n    return {\n      distanceToPoint,\n      distanceToPoint2,\n      isNearFirstLine,\n      isNearSecondLine,\n    };\n  };\n\n  getArcsStartEndPoints = ({\n    firstLine,\n    secondLine,\n    mid1,\n    mid2,\n  }): {\n    arc1Start: Types.Point2;\n    arc1End: Types.Point2;\n    arc2Start: Types.Point2;\n    arc2End: Types.Point2;\n    arc1Angle: number;\n    arc2Angle: number;\n  } => {\n    const linkLine = [mid1, mid2] as [Types.Point2, Types.Point2];\n\n    const arc1Angle = angleBetweenLines(firstLine, linkLine);\n    const arc2Angle = angleBetweenLines(secondLine, linkLine);\n\n    const arc1Side = arc1Angle > 90 ? 1 : 0;\n    const arc2Side = arc2Angle > 90 ? 0 : 1;\n\n    const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n\n    const linkLineLength = Math.sqrt(\n      (linkLine[1][0] - linkLine[0][0]) ** 2 +\n        (linkLine[1][1] - linkLine[0][1]) ** 2\n    );\n    const ratio = 0.1; // 10% of the line length\n\n    const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n    const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n\n    // For arc1Start\n    const directionVectorStartArc1 = [\n      firstLine[arc1Side][0] - midFirstLine[0],\n      firstLine[arc1Side][1] - midFirstLine[1],\n    ];\n    const magnitudeStartArc1 = Math.sqrt(\n      directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2\n    );\n    const normalizedDirectionStartArc1 = [\n      directionVectorStartArc1[0] / magnitudeStartArc1,\n      directionVectorStartArc1[1] / magnitudeStartArc1,\n    ];\n    const arc1Start = [\n      midFirstLine[0] +\n        normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n      midFirstLine[1] +\n        normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Existing logic for arc1End\n    const directionVectorEndArc1 = [\n      midLinkLine[0] - mid1[0],\n      midLinkLine[1] - mid1[1],\n    ];\n    const magnitudeEndArc1 = Math.sqrt(\n      directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2\n    );\n    const normalizedDirectionEndArc1 = [\n      directionVectorEndArc1[0] / magnitudeEndArc1,\n      directionVectorEndArc1[1] / magnitudeEndArc1,\n    ];\n    const arc1End = [\n      mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n      mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Similar logic for arc2Start\n    const directionVectorStartArc2 = [\n      secondLine[arc2Side][0] - midSecondLine[0],\n      secondLine[arc2Side][1] - midSecondLine[1],\n    ];\n    const magnitudeStartArc2 = Math.sqrt(\n      directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2\n    );\n    const normalizedDirectionStartArc2 = [\n      directionVectorStartArc2[0] / magnitudeStartArc2,\n      directionVectorStartArc2[1] / magnitudeStartArc2,\n    ];\n    const arc2Start = [\n      midSecondLine[0] +\n        normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n      midSecondLine[1] +\n        normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Similar logic for arc2End\n    const directionVectorEndArc2 = [\n      midLinkLine[0] - mid2[0],\n      midLinkLine[1] - mid2[1],\n    ];\n    const magnitudeEndArc2 = Math.sqrt(\n      directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2\n    );\n    const normalizedDirectionEndArc2 = [\n      directionVectorEndArc2[0] / magnitudeEndArc2,\n      directionVectorEndArc2[1] / magnitudeEndArc2,\n    ];\n    const arc2End = [\n      mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n      mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    return {\n      arc1Start,\n      arc1End,\n      arc2Start,\n      arc2End,\n      arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n      arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n    };\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { angle } = cachedVolumeStats;\n\n  if (angle === undefined) {\n    return;\n  }\n\n  const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n\n  return textLines;\n}\n\nCobbAngleTool.toolName = 'CobbAngle';\nexport default CobbAngleTool;\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  PublicToolProps,\n  SVGDrawingHelper,\n  ToolProps,\n} from '../../types';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nclass DragProbeTool extends ProbeTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  postMouseDownCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation: ProbeAnnotation = {\n      invalidated: true,\n      highlighted: true,\n      isVisible: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  postTouchStartCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    return this.postMouseDownCallback(evt);\n  };\n\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const annotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      [this.editData.annotation]\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const annotation = this.editData.annotation;\n    const annotationUID = annotation.annotationUID;\n    const data = annotation.data;\n    const point = data.handles.points[0];\n    const canvasCoordinates = viewport.worldToCanvas(point);\n\n    styleSpecifier.annotationUID = annotationUID;\n\n    const { color } = this.getAnnotationStyle({\n      annotation,\n      styleSpecifier,\n    });\n\n    const modalityUnitOptions = {\n      isPreScaled: isViewportPreScaled(viewport, targetId),\n\n      isSuvScaled: this.isSuvScaled(\n        viewport,\n        targetId,\n        annotation.metadata.referencedImageId\n      ),\n    };\n\n    if (\n      !data.cachedStats[targetId] ||\n      data.cachedStats[targetId].value == null\n    ) {\n      data.cachedStats[targetId] = {\n        Modality: null,\n        index: null,\n        value: null,\n      };\n\n      this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n    } else if (annotation.invalidated) {\n      this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n    }\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const handleGroupUID = '0';\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotationUID,\n      handleGroupUID,\n      [canvasCoordinates],\n      { color }\n    );\n\n    renderStatus = true;\n\n    const textLines = this.configuration.getTextLines(data, targetId);\n    if (textLines) {\n      const textCanvasCoordinates = [\n        canvasCoordinates[0] + 6,\n        canvasCoordinates[1] - 6,\n      ];\n\n      const textUID = '0';\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textUID,\n        textLines,\n        [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n    }\n\n    return renderStatus;\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { index, value, modalityUnit } = cachedVolumeStats;\n\n  if (value === undefined) {\n    return;\n  }\n\n  const textLines = [];\n\n  textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n\n  textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n\n  return textLines;\n}\n\nDragProbeTool.toolName = 'DragProbe';\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { roundNumber } from '../../utilities';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport {\n  drawCircle as drawCircleSvg,\n  drawEllipseByCoordinates as drawEllipseSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  pointInEllipse,\n  getCanvasEllipseCorners,\n} from '../../utilities/math/ellipse';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { EllipticalROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities/';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * EllipticalROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use EllipticalROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Elliptical tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(EllipticalROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(EllipticalROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(EllipticalROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(EllipticalROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass EllipticalROITool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    centerWorld?: Array<number>;\n    canvasWidth?: number;\n    canvasHeight?: number;\n    originalHandleCanvas?: Array<number>;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the ellipse.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a EllipticalROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): EllipticalROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n          ] as [Types.Point3, Types.Point3, Types.Point3, Types.Point3],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        initialRotation: viewport.getRotation(),\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      centerWorld: worldPos,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: EllipticalROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2,\n      Types.Point2,\n      Types.Point2\n    ];\n    const canvasCorners = getCanvasEllipseCorners(canvasCoordinates);\n\n    const [canvasPoint1, canvasPoint2] = canvasCorners;\n\n    const minorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) + proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) + proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) - proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) - proximity,\n    };\n\n    const majorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) - proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) - proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) + proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) + proximity,\n    };\n\n    const pointInMinorEllipse = this._pointInEllipseCanvas(\n      minorEllipse,\n      canvasCoords\n    );\n    const pointInMajorEllipse = this._pointInEllipseCanvas(\n      majorEllipse,\n      canvasCoords\n    );\n\n    if (pointInMajorEllipse && !pointInMinorEllipse) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    let centerCanvas;\n    let centerWorld;\n    let canvasWidth;\n    let canvasHeight;\n    let originalHandleCanvas;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n      const { viewport } = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = viewport;\n\n      handleIndex = points.findIndex((p) => p === handle);\n\n      const pointsCanvas = points.map(worldToCanvas);\n\n      originalHandleCanvas = pointsCanvas[handleIndex];\n\n      canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n      canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n\n      centerCanvas = [\n        (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n        (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n      ];\n\n      centerWorld = canvasToWorld(centerCanvas);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      canvasWidth,\n      canvasHeight,\n      centerWorld,\n      originalHandleCanvas,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Elliptical ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the ellipse,\n    // and they are by definition not in the ellipse on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const { renderingEngine } = getEnabledElement(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerWorld } = this.editData;\n    const centerCanvas = viewport.worldToCanvas(centerWorld as Types.Point3);\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n\n    // Todo: why bottom is -dY, it should be +dY\n    const bottomCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] - dY];\n    const topCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] + dY];\n    const leftCanvas = <Types.Point2>[centerCanvas[0] - dX, centerCanvas[1]];\n    const rightCanvas = <Types.Point2>[centerCanvas[0] + dX, centerCanvas[1]];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { viewport } = getEnabledElement(element);\n    const { canvasToWorld, worldToCanvas } = viewport;\n\n    const {\n      annotation,\n      canvasWidth,\n      canvasHeight,\n      handleIndex,\n      centerWorld,\n      originalHandleCanvas,\n    } = this.editData;\n    const centerCanvas = viewport.worldToCanvas(centerWorld as Types.Point3);\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0 || handleIndex === 1) {\n      // Dragging top or bottom point\n      const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - dYCanvas,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n\n      const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n      const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n    } else {\n      // Dragging left or right point\n      const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - dXCanvas,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + dXCanvas,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n\n      const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n      const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - newHalfCanvasHeight,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + newHalfCanvasHeight,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const { renderingEngine } = getEnabledElement(element);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the ellipticalROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as EllipticalROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2, Types.Point2, Types.Point2];\n\n      const rotation = Math.abs(\n        viewport.getRotation() - (data.initialRotation || 0)\n      );\n      const canvasCorners = <Array<Types.Point2>>(\n        getCanvasEllipseCorners(canvasCoordinates) // bottom, top, left, right, keep as is\n      );\n\n      const { centerPointRadius } = this.configuration;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(annotation, viewport, renderingEngine);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-ellipse`;\n      const ellipseUID = '0';\n      drawEllipseSvg(\n        svgDrawingHelper,\n        annotationUID,\n        ellipseUID,\n        canvasCoordinates,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        const minRadius = Math.min(\n          Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, // horizontal radius\n          Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2 // vertical radius\n        );\n        if (minRadius > 3 * centerPointRadius) {\n          const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${ellipseUID}-center`,\n            centerPoint,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (annotation, viewport, renderingEngine) => {\n    const data = annotation.data;\n    const { element } = viewport;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasEllipseCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n\n      const pos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      pos1Index[0] = Math.floor(pos1Index[0]);\n      pos1Index[1] = Math.floor(pos1Index[1]);\n      pos1Index[2] = Math.floor(pos1Index[2]);\n\n      const post2Index = transformWorldToIndex(imageData, worldPos2);\n\n      post2Index[0] = Math.floor(post2Index[0]);\n      post2Index[1] = Math.floor(post2Index[1]);\n      post2Index[2] = Math.floor(post2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(pos1Index, post2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        const iMin = Math.min(pos1Index[0], post2Index[0]);\n        const iMax = Math.max(pos1Index[0], post2Index[0]);\n\n        const jMin = Math.min(pos1Index[1], post2Index[1]);\n        const jMax = Math.max(pos1Index[1], post2Index[1]);\n\n        const kMin = Math.min(pos1Index[2], post2Index[2]);\n        const kMax = Math.max(pos1Index[2], post2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n\n        const handles = [pos1Index, post2Index];\n        const { scale, areaUnits } = getCalibratedLengthUnitsAndScale(\n          image,\n          handles\n        );\n\n        const area =\n          Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n          scale /\n          scale;\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats.mean?.value,\n          max: stats.max?.value,\n          stdDev: stats.stdDev?.value,\n          statsArray: stats.array,\n          pointsInShape,\n          isEmptyArea,\n          areaUnit: areaUnits,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n\n  /**\n   * This is a temporary function to use the old ellipse's canvas-based\n   * calculation for isPointNearTool, we should move the the world-based\n   * calculation to the tool's isPointNearTool function.\n   *\n   * @param ellipse - The ellipse object\n   * @param location - The location to check\n   * @returns True if the point is inside the ellipse\n   */\n  _pointInEllipseCanvas(ellipse, location: Types.Point2): boolean {\n    const xRadius = ellipse.width / 2;\n    const yRadius = ellipse.height / 2;\n\n    if (xRadius <= 0.0 || yRadius <= 0.0) {\n      return false;\n    }\n\n    const center = [ellipse.left + xRadius, ellipse.top + yRadius];\n    const normalized = [location[0] - center[0], location[1] - center[1]];\n\n    const inEllipse =\n      (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n        (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n      1.0;\n\n    return inEllipse;\n  }\n\n  /**\n   * It takes the canvas coordinates of the ellipse corners and returns the center point of it\n   *\n   * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n   * @returns center point.\n   */\n  _getCanvasEllipseCenter(ellipseCanvasPoints: Types.Point2[]): Types.Point2 {\n    const [bottom, top, left, right] = ellipseCanvasPoints;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    return [\n      (topLeft[0] + bottomRight[0]) / 2,\n      (topLeft[1] + bottomRight[1]) / 2,\n    ] as Types.Point2;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n    cachedVolumeStats;\n\n  const textLines: string[] = [];\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n    textLines.push(areaLine);\n  }\n\n  if (mean) {\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  }\n\n  if (max) {\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  }\n\n  if (stdDev) {\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nEllipticalROITool.toolName = 'EllipticalROI';\nexport default EllipticalROITool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\n\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg } from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport { resetElementCursor } from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { Annotation } from '../../types';\n\ntype Point2 = Types.Point2;\n\nclass KeyImageTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        getTextCallback,\n        changeTextCallback,\n        canvasPosition: [10, 10],\n        canvasSize: 10,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation = KeyImageTool.createAnnotation({\n      metadata: { ...viewport.getViewReference(), referencedImageId },\n    });\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.configuration.getTextCallback((text) => {\n      if (!text) {\n        removeAnnotation(annotation.annotationUID);\n        triggerAnnotationRenderForViewportIds(\n          renderingEngine,\n          viewportIdsToRender\n        );\n        this.isDrawing = false;\n        return;\n      }\n      annotation.data.text = text;\n\n      triggerAnnotationCompleted(annotation);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n    });\n\n    return annotation;\n  };\n\n  public cancel() {\n    // No op - the annotation can't be in a partial state\n  }\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n\n    const { canvasPosition, canvasSize } = this.configuration;\n    if (!canvasPosition?.length) {\n      return false;\n    }\n    if (\n      Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n        canvasSize / 2 &&\n      Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n        canvasSize / 2\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation\n  ): void => {\n    annotation.highlighted = true;\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    handle: ToolHandle\n  ): void {\n    // Nothing special to do here.\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    this._deactivateModify(element);\n    resetElementCursor(element);\n  };\n\n  doubleClickCallback = (evt: EventTypes.TouchTapEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const clickedAnnotation = annotations.find((annotation) =>\n      this.isPointNearTool(\n        element,\n        annotation as Annotation,\n        eventDetail.currentPoints.canvas,\n        6 // Todo: get from configuration\n      )\n    );\n\n    if (!clickedAnnotation) {\n      return;\n    }\n\n    const annotation = clickedAnnotation as Annotation;\n\n    this.configuration.changeTextCallback(\n      clickedAnnotation,\n      evt.detail,\n      this._doneChangingTextCallback.bind(this, element, annotation)\n    );\n\n    this.isDrawing = false;\n\n    // This double click was handled and the dialogue was displayed.\n    // No need for any other listener to handle it too - stopImmediatePropagation\n    // helps ensure this primarily so that no other listeners on the target element\n    // get called.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  };\n\n  _doneChangingTextCallback(element, annotation, updatedText): void {\n    annotation.data.text = updatedText;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n  }\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i];\n      const { annotationUID } = annotation;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      const { canvasPosition, canvasSize } = this.configuration;\n      if (canvasPosition?.length) {\n        const arrowUID = '1';\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasPosition.map((it) => it + canvasSize) as Point2,\n          canvasPosition as Point2,\n          {\n            color,\n            width: 1,\n          }\n        );\n      }\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction getTextCallback(doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nKeyImageTool.toolName = 'KeyImage';\n\nexport default KeyImageTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { roundNumber } from '../../utilities';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { LengthAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * LengthTool let you draw annotations that measures the length of two drawing\n * points on a slice. You can use the LengthTool in all imaging planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(LengthTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(LengthTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(LengthTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n\n */\n\nclass LengthTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): LengthAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const {\n      viewPlaneNormal,\n      viewUp,\n      position: cameraPosition,\n    } = viewport.getCamera();\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        ...viewport.getViewReference({ points: [worldPos] }),\n        toolName: this.getToolName(),\n        referencedImageId,\n        viewUp,\n        cameraPosition,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: LengthAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as LengthAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit == null\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-line`;\n      const lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      // Need to update to sync with annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { element } = enabledElement.viewport;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    // TODO clean up, this doesn't need a length per volume, it has no stats derived from volumes.\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n      const handles = [index1, index2];\n      const { scale, units } = getCalibratedLengthUnitsAndScale(image, handles);\n\n      const length = this._calculateLength(worldPos1, worldPos2) / scale;\n\n      this._isInsideVolume(index1, index2, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      // TODO -> Do we instead want to clip to the bounds of the volume and only include that portion?\n      // Seems like a lot of work for an unrealistic case. At the moment bail out of stat calculation if either\n      // corner is off the canvas.\n\n      // todo: add insideVolume calculation, for removing tool if outside\n      cachedStats[targetId] = {\n        length,\n        unit: units,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n\n    return cachedStats;\n  }\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { length, unit } = cachedVolumeStats;\n\n  // Can be null on load\n  if (length === undefined || length === null || isNaN(length)) {\n    return;\n  }\n\n  const textLines = [`${roundNumber(length)} ${unit}`];\n\n  return textLines;\n}\n\nLengthTool.toolName = 'Length';\nexport default LengthTool;\n","import type { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\n\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport type { ContourSegmentationAnnotation } from '../../types';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\n\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n  static toolName;\n\n  /**\n   * Updates the interpolated annotations with the currently displayed image data,\n   * performing hte livewire on the image data as generated.\n   * Note - this function is only called for interpolated livewire SEGMENTATION\n   * objects, and will return immediately otherwise.\n   *\n   * The work for the interpolation is performed in a microtask, enabling this\n   * method to return quickly for faster render speeds, but ensuring that the\n   * annotation data isn't updated before the changes are performed.  The removes\n   * some irritating flickering on navigation.\n   */\n  public updateInterpolatedAnnotation(\n    annotation: ContourSegmentationAnnotation,\n    enabledElement: Types.IEnabledElement\n  ) {\n    // The interpolation sources is used as a flag here - a true livewire\n    // behaviour would be to perform a livewire between the two planes\n    // closest to this plane for each point, and use that handle.  That is\n    // oblique, however, which is not currently supported.\n    if (\n      this.editData ||\n      !annotation.invalidated ||\n      !annotation.data.handles.interpolationSources\n    ) {\n      return;\n    }\n    annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n\n    // See docs above for why this is a microtask\n    queueMicrotask(() => {\n      if (!annotation.data.handles.interpolationSources) {\n        return;\n      }\n      const { points } = annotation.data.handles;\n\n      const { element } = enabledElement.viewport;\n      this.setupBaseEditData(points[0], element, annotation);\n      const { length: count } = points;\n      const { scissors } = this;\n      const { nearestEdge, repeatInterpolation } =\n        this.configuration.interpolation;\n      annotation.data.handles.originalPoints = points;\n      const { worldToSlice, sliceToWorld } = this.editData;\n      const handleSmoothing = [];\n\n      // New path generation - go through the handles and regenerate the polyline\n      if (nearestEdge) {\n        let lastPoint = worldToSlice(points[points.length - 1]);\n        // Nearest edge handling\n        points.forEach((point, hIndex) => {\n          const testPoint = worldToSlice(point);\n          lastPoint = testPoint;\n          handleSmoothing.push(testPoint);\n\n          // Fill the costs buffer and then find the minimum cost\n          // This is a little too aggressive about pulling the line in\n          scissors.startSearch(lastPoint);\n          scissors.findPathToPoint(testPoint);\n          // Fill the costs for a point a bit further along by searching for a\n          // point further along.\n          scissors.findPathToPoint(\n            worldToSlice(points[(hIndex + 3) % points.length])\n          );\n          const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n          if (!csUtils.isEqual(testPoint, minPoint)) {\n            handleSmoothing[hIndex] = minPoint;\n            lastPoint = minPoint;\n            points[hIndex] = sliceToWorld(minPoint);\n          }\n        });\n      }\n\n      // Regenerate the updated data based on the updated handles\n      const acceptedPath = new LivewirePath();\n      for (let i = 0; i < count; i++) {\n        scissors.startSearch(worldToSlice(points[i]));\n        const path = scissors.findPathToPoint(\n          worldToSlice(points[(i + 1) % count])\n        );\n        acceptedPath.addPoints(path);\n      }\n\n      // Now, update the rendering\n      this.updateAnnotation(acceptedPath);\n      this.scissors = null;\n      this.scissorsRight = null;\n      this.editData = null;\n      annotation.data.handles.interpolationSources = null;\n\n      if (repeatInterpolation) {\n        triggerAnnotationModified(\n          annotation,\n          enabledElement.viewport.element,\n          ChangeTypes.InterpolationUpdated\n        );\n      }\n    });\n  }\n\n  /**\n   * Adds the update to the interpolated annotaiton on render an instance,\n   * but otherwise just calls the parent render annotation instance.\n   */\n  protected renderAnnotationInstance(renderContext): boolean {\n    const { enabledElement, svgDrawingHelper } = renderContext;\n    const annotation =\n      renderContext.annotation as ContourSegmentationAnnotation;\n    const { annotationUID } = annotation;\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { showInterpolationPolyline } =\n      this.configuration.interpolation || {};\n\n    this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n    const { originalPolyline } = annotation.data.contour;\n\n    const rendered = super.renderAnnotationInstance(renderContext);\n\n    if (\n      showInterpolationPolyline &&\n      originalPolyline &&\n      annotation.autoGenerated\n    ) {\n      const polylineCanvasPoints = originalPolyline.map(\n        worldToCanvas\n      ) as Types.Point2[];\n      polylineCanvasPoints.push(polylineCanvasPoints[0]);\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        'interpolationContour-0',\n        polylineCanvasPoints,\n        {\n          color: '#70ffff',\n          lineWidth: 1,\n          fillOpacity: 0,\n        }\n      );\n    }\n\n    return rendered;\n  }\n\n  protected isContourSegmentationTool(): boolean {\n    // Re-enable contour segmentation behavior disabled by LivewireContourTool\n    return true;\n  }\n}\n\nLivewireContourSegmentationTool.toolName = 'LivewireContourSegmentationTool';\nexport default LivewireContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport {\n  getEnabledElement,\n  utilities as csUtils,\n  VolumeViewport,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg } from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport type {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { math, triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { LivewireContourAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport {\n  triggerAnnotationModified,\n  triggerContourAnnotationCompleted,\n} from '../../stateManagement/annotation/helpers/state';\n\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\n\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2; // px\n\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n  public static toolName: string;\n  protected scissors: LivewireScissors;\n  /** The scissors from the right handle, used for editing */\n  protected scissorsRight: LivewireScissors;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: LivewireContourAnnotation;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    lastCanvasPoint?: Types.Point2;\n    confirmedPath?: LivewirePath;\n    currentPath?: LivewirePath;\n    /** The next path segment, on the other side of the handle */\n    confirmedPathRight?: LivewirePath;\n    closed?: boolean;\n    worldToSlice?: (point: Types.Point3) => Types.Point2;\n    sliceToWorld?: (point: Types.Point2) => Types.Point3;\n    originalPath?: Types.Point3[];\n    contourHoleProcessingEnabled?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        /**\n         * Specify which modifier key is used to add a hole to a contour. The\n         * modifier must be pressed when the first point of a new contour is added.\n         */\n        contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n\n        /**\n         * Configuring this to a value larger than 0 will snap handles to nearby\n         * livewire points, within the given rectangle surrounding the clicked point.\n         * If set to 0, then the exact clicked point will be used instead, which may\n         * not be an edge and can result in jagged outlines.\n         * The unit is image pixels (index).\n         */\n        snapHandleNearby: 2,\n\n        /**\n         * Interpolation is only available for segmentation versions of these\n         * tools.  To use it on the segmentation tools, set enabled to true,\n         * and create two livewire contours in the same segment index, separated\n         * by at least one slice.\n         */\n        interpolation: {\n          enabled: false,\n\n          /**\n           * Set the nearestEdge to snap interpolated handles to an edge within\n           * the given number of pixels.  Setting to 0 disables snap to pixel\n           * for interpolation and the interpolated point will be used directly.\n           * Setting to too large a value may result in many points outside the contour\n           * being chosen.\n           */\n          nearestEdge: 2,\n          /**\n           * Set to true to show the interpolated polyline, which can be useful\n           * when understanding the nearest edge and\n           */\n          showInterpolationPolyline: false,\n        },\n\n        /**\n         * The polyline may get processed in order to reduce the number of points\n         * for better performance and storage.\n         */\n        decimate: {\n          enabled: false,\n          /** A maximum given distance 'epsilon' to decide if a point should or\n           * shouldn't be added the resulting polyline which will have a lower\n           * number of points for higher `epsilon` values.\n           */\n          epsilon: 0.1,\n        },\n\n        actions: {\n          undo: {\n            method: 'undo',\n            bindings: [\n              {\n                key: 'Escape',\n              },\n            ],\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  protected setupBaseEditData(\n    worldPos,\n    element,\n    annotation,\n    rightPos?,\n    contourHoleProcessingEnabled?\n  ) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.isDrawing = true;\n\n    const viewportImageData = viewport.getImageData();\n    const { imageData: vtkImageData } = viewportImageData;\n    let worldToSlice: (point: Types.Point3) => Types.Point2;\n    let sliceToWorld: (point: Types.Point2) => Types.Point3;\n    let { scalarData } = viewportImageData;\n    let width;\n    let height;\n\n    if (!(viewport instanceof VolumeViewport) && scalarData) {\n      width = viewportImageData.dimensions[0];\n      height = viewportImageData.dimensions[1];\n\n      // Method only to simplify the code making stack and volume viewports code\n      // similar and avoiding `if(stack)/else` whenever a coordinate needs to be\n      // transformed because `worldToSlice` in this case returns the same IJK\n      // coordinate from index space.\n      worldToSlice = (point: Types.Point3) => {\n        const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n        return [ijkPoint[0], ijkPoint[1]];\n      };\n\n      // Method only to simplify the code making stack and volume viewports code\n      // similar and avoiding `if(stack)/else` whenever a coordinate needs to be\n      // transformed because `sliceToWorld` in this case receives the same IJK\n      // coordinate from index space.\n      sliceToWorld = (point: Types.Point2) =>\n        csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n    } else if (viewport instanceof VolumeViewport) {\n      const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n      const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n\n      worldToSlice = (point: Types.Point3) => {\n        const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n        const slicePoint = vec3.transformMat4(\n          [0, 0, 0],\n          ijkPoint,\n          indexToSliceMatrix\n        );\n\n        return [slicePoint[0], slicePoint[1]];\n      };\n\n      sliceToWorld = (point: Types.Point2) => {\n        const ijkPoint = vec3.transformMat4(\n          [0, 0, 0],\n          [point[0], point[1], 0],\n          sliceToIndexMatrix\n        ) as Types.Point3;\n\n        return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n      };\n\n      scalarData = sliceImageData.scalarData;\n      width = sliceImageData.width;\n      height = sliceImageData.height;\n    } else {\n      throw new Error('Viewport not supported');\n    }\n    scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n    const { voiRange } = viewport.getProperties();\n    const startPos = worldToSlice(worldPos);\n\n    this.scissors = LivewireScissors.createInstanceFromRawPixelData(\n      scalarData as Float32Array,\n      width,\n      height,\n      voiRange\n    );\n    if (rightPos) {\n      this.scissorsRight = LivewireScissors.createInstanceFromRawPixelData(\n        scalarData as Float32Array,\n        width,\n        height,\n        voiRange\n      );\n      this.scissorsRight.startSearch(worldToSlice(rightPos));\n    }\n\n    // Scissors always start at the startPos for both editing handles and\n    // for initial rendering\n    this.scissors.startSearch(startPos);\n\n    const newAnnotation = !rightPos;\n\n    const confirmedPath = new LivewirePath();\n    const currentPath = new LivewirePath();\n    const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n\n    confirmedPath.addPoint(startPos);\n    confirmedPath.addControlPoint(startPos);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation,\n      hasMoved: false,\n      lastCanvasPoint,\n      confirmedPath,\n      currentPath,\n      confirmedPathRight: currentPathNext,\n      closed: false,\n      handleIndex:\n        this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n      worldToSlice,\n      sliceToWorld,\n      contourHoleProcessingEnabled,\n    };\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation(\n    evt: EventTypes.InteractionEventType\n  ): LivewireContourAnnotation {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const { world: worldPos } = currentPoints;\n    const { renderingEngine } = getEnabledElement(element);\n    const annotation = this.createAnnotation(evt);\n    const contourHoleProcessingEnabled =\n      getMouseModifierKey(evt.detail.event) ===\n      this.configuration.contourHoleAdditionModifierKey;\n\n    this.setupBaseEditData(\n      worldPos,\n      element,\n      annotation,\n      undefined,\n      contourHoleProcessingEnabled\n    );\n    this.addAnnotation(annotation, element);\n\n    this._activateDraw(element);\n    evt.preventDefault();\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      this.editData.viewportIdsToRender\n    );\n\n    return annotation;\n  }\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: LivewireContourAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const proximitySquared = proximity * proximity;\n    const canvasPoints = annotation.data.contour.polyline.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n\n    let startPoint = canvasPoints[canvasPoints.length - 1];\n\n    for (let i = 0; i < canvasPoints.length; i++) {\n      const endPoint = canvasPoints[i];\n      const distanceToPointSquared = math.lineSegment.distanceToPointSquared(\n        startPoint,\n        endPoint,\n        canvasCoords\n      );\n\n      if (distanceToPointSquared <= proximitySquared) {\n        return true;\n      }\n\n      startPoint = endPoint;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LivewireContourAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n    };\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this._activateModify(element);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LivewireContourAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    const { points } = data.handles;\n    const handleIndex = points.findIndex((p) => p === handle);\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (\n    evt: EventTypes.InteractionEventType,\n    clearAnnotation = false\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation,\n      contourHoleProcessingEnabled,\n    } = this.editData;\n    const { data } = annotation;\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      (this.isHandleOutsideImage &&\n        this.configuration.preventHandleOutsideImage) ||\n      clearAnnotation\n    ) {\n      removeAnnotation(annotation.annotationUID);\n      this.clearEditData();\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n      return;\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    const changeType = newAnnotation\n      ? ChangeTypes.Completed\n      : ChangeTypes.HandlesUpdated;\n\n    this.triggerChangeEvent(\n      annotation,\n      enabledElement,\n      changeType,\n      contourHoleProcessingEnabled\n    );\n    this.clearEditData();\n  };\n\n  protected clearEditData() {\n    this.editData = null;\n    this.scissors = null;\n    this.scissorsRight = null;\n    this.isDrawing = false;\n  }\n\n  /**\n   * Triggers an annotation complete or modified event based on changeType.\n   */\n  triggerChangeEvent = (\n    annotation: LivewireContourAnnotation,\n    enabledElement: Types.IEnabledElement,\n    changeType = ChangeTypes.StatsUpdated,\n    contourHoleProcessingEnabled = false\n  ): void => {\n    if (changeType === ChangeTypes.Completed) {\n      triggerContourAnnotationCompleted(\n        annotation,\n        contourHoleProcessingEnabled\n      );\n    } else {\n      triggerAnnotationModified(\n        annotation,\n        enabledElement.viewport.element,\n        changeType\n      );\n    }\n  };\n\n  private _mouseDownCallback = (evt: EventTypes.InteractionEventType): void => {\n    const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n    const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld } =\n      this.editData;\n\n    if (this.editData.closed) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n    let worldPos = worldPosOriginal;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const controlPoints = this.editData.currentPath.getControlPoints();\n    let closePath = controlPoints.length >= 2 && doubleClick;\n\n    // Check if user clicked on the first point to close the curve\n    if (controlPoints.length >= 2) {\n      const closestHandlePoint = {\n        index: -1,\n        distSquared: Infinity,\n      };\n\n      // Check if there is a control point close to the cursor\n      for (let i = 0, len = controlPoints.length; i < len; i++) {\n        const controlPoint = controlPoints[i];\n        const worldControlPoint = sliceToWorld(controlPoint);\n        const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n\n        const distSquared = math.point.distanceToPointSquared(\n          canvasPos,\n          canvasControlPoint\n        );\n\n        if (\n          distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n          distSquared < closestHandlePoint.distSquared\n        ) {\n          closestHandlePoint.distSquared = distSquared;\n          closestHandlePoint.index = i;\n        }\n      }\n\n      if (closestHandlePoint.index === 0) {\n        closePath = true;\n      }\n    }\n\n    const { snapHandleNearby } = this.configuration;\n    // Snap the handles as they get created, but not during edit\n    if (snapHandleNearby && !this.editData.closed) {\n      const currentPath = new LivewirePath();\n      const snapPoint = this.scissors.findMinNearby(\n        worldToSlice(worldPosOriginal),\n        1\n      );\n      const pathPoints = this.scissors.findPathToPoint(snapPoint);\n      currentPath.addPoints(pathPoints);\n      currentPath.prependPath(this.editData.confirmedPath);\n      worldPos = sliceToWorld(snapPoint);\n      this.editData.currentPath = currentPath;\n    }\n\n    this.editData.closed = this.editData.closed || closePath;\n    this.editData.confirmedPath = this.editData.currentPath;\n\n    // Add the current cursor position as a new control point after clicking\n    const lastPoint = this.editData.currentPath.getLastPoint();\n\n    this.editData.confirmedPath.addControlPoint(lastPoint);\n    annotation.data.handles.points.push(sliceToWorld(lastPoint));\n\n    // Start a new search starting at the last control point\n    this.scissors.startSearch(worldToSlice(worldPos));\n\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (this.editData.closed) {\n      // Update the annotation because `editData` will be set to null\n      this.updateAnnotation(this.editData.confirmedPath);\n      this._endCallback(evt);\n    }\n\n    evt.preventDefault();\n  };\n\n  private _mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    const { element, currentPoints } = evt.detail;\n    const { world: worldPos, canvas: canvasPos } = currentPoints;\n    const { renderingEngine } = getEnabledElement(element);\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData.lastCanvasPoint = canvasPos;\n\n    const { width: imgWidth, height: imgHeight } = this.scissors;\n    const { worldToSlice } = this.editData;\n    const slicePoint: Types.Point2 = worldToSlice(worldPos);\n\n    // Check if the point is inside the bounding box\n    if (\n      slicePoint[0] < 0 ||\n      slicePoint[1] < 0 ||\n      slicePoint[0] >= imgWidth ||\n      slicePoint[1] >= imgHeight\n    ) {\n      return;\n    }\n\n    const pathPoints = this.scissors.findPathToPoint(slicePoint);\n    const currentPath = new LivewirePath();\n    currentPath.addPoints(pathPoints);\n\n    // Merge the \"confirmed\" path that goes from the first control point to the\n    // last one with the current path that goes from the last control point to\n    // the cursor point\n    currentPath.prependPath(this.editData.confirmedPath);\n\n    // Store the new path\n    this.editData.currentPath = currentPath;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    evt.preventDefault();\n  };\n\n  public editHandle(\n    worldPos: Types.Point3,\n    element,\n    annotation,\n    handleIndex: number\n  ) {\n    const { data } = annotation;\n    const { points: handlePoints } = data.handles;\n    const { length: numHandles } = handlePoints;\n    const previousHandle =\n      handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n    const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n\n    if (!this.editData?.confirmedPathRight) {\n      this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n      const { polyline } = data.contour;\n      const confirmedPath = new LivewirePath();\n      const confirmedPathRight = new LivewirePath();\n      const { worldToSlice } = this.editData;\n      const previousIndex = findHandlePolylineIndex(\n        annotation,\n        handleIndex - 1\n      );\n      const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n      if (nextIndex === -1 || previousIndex === -1) {\n        throw new Error(\n          `Can't find handle index ${nextIndex === -1 && nextHandle} ${\n            previousIndex === -1 && previousHandle\n          }`\n        );\n      }\n      if (handleIndex === 0) {\n        // For this case, the next/previous indices are swapped, and the\n        // path data gets inserted in between the newly generated data, so\n        // handle this case specially\n        confirmedPathRight.addPoints(\n          polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice)\n        );\n      } else if (nextIndex < previousIndex) {\n        throw new Error(\n          `Expected right index after left index, but were: ${previousIndex} ${nextIndex}`\n        );\n      } else {\n        confirmedPath.addPoints(\n          polyline.slice(0, previousIndex + 1).map(worldToSlice)\n        );\n        confirmedPathRight.addPoints(\n          polyline.slice(nextIndex, polyline.length).map(worldToSlice)\n        );\n      }\n      this.editData.confirmedPath = confirmedPath;\n      this.editData.confirmedPathRight = confirmedPathRight;\n    }\n    const { editData, scissors } = this;\n    const { worldToSlice, sliceToWorld } = editData;\n\n    const { activeHandleIndex } = data.handles;\n    if (activeHandleIndex === null || activeHandleIndex === undefined) {\n      data.handles.activeHandleIndex = handleIndex;\n    } else if (activeHandleIndex !== handleIndex) {\n      throw new Error(\n        `Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`\n      );\n    }\n    const slicePos = worldToSlice(worldPos);\n    if (\n      slicePos[0] < 0 ||\n      slicePos[0] >= scissors.width ||\n      slicePos[1] < 0 ||\n      slicePos[1] >= scissors.height\n    ) {\n      // Find path to point hangs if the position is outside the image data\n      return;\n    }\n    handlePoints[handleIndex] = sliceToWorld(slicePos);\n\n    const pathPointsLeft = scissors.findPathToPoint(slicePos);\n    const pathPointsRight = this.scissorsRight.findPathToPoint(slicePos);\n    const currentPath = new LivewirePath();\n\n    // Merge the \"confirmed\" path that goes from the first control point to the\n    // last one with the current path that goes from the last control point to\n    // the cursor point\n    currentPath.prependPath(editData.confirmedPath);\n    if (handleIndex !== 0) {\n      currentPath.addPoints(pathPointsLeft);\n    }\n    currentPath.addPoints(pathPointsRight.reverse());\n    currentPath.appendPath(editData.confirmedPathRight);\n    if (handleIndex === 0) {\n      currentPath.addPoints(pathPointsLeft);\n    }\n\n    // Store the new path\n    editData.currentPath = currentPath;\n\n    annotation.invalidated = true;\n    editData.hasMoved = true;\n  }\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    if (handleIndex === undefined) {\n      // Drag mode - moving object\n      console.warn('No drag implemented for livewire');\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n      this.editHandle(worldPos, element, annotation, handleIndex);\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is not in mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    if (newAnnotation) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData = null;\n    this.scissors = null;\n    return annotation.annotationUID;\n  };\n\n  private _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  private _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  private _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n    element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n    element.addEventListener(\n      Events.MOUSE_DOUBLE_CLICK,\n      this._mouseDownCallback\n    );\n\n    element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n  };\n\n  private _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n    element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n    element.removeEventListener(\n      Events.MOUSE_DOUBLE_CLICK,\n      this._mouseDownCallback\n    );\n\n    element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n  };\n\n  public renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean {\n    // Update the annotation that is in editData (being edited)\n    this.updateAnnotation(this.editData?.currentPath);\n\n    return super.renderAnnotation(enabledElement, svgDrawingHelper);\n  }\n\n  protected isContourSegmentationTool(): boolean {\n    // Disable contour segmentation behavior because it shall be activated only\n    // for LivewireContourSegmentationTool\n    return false;\n  }\n\n  protected createAnnotation(evt: EventTypes.InteractionEventType) {\n    const contourSegmentationAnnotation = super.createAnnotation(evt);\n    const { world: worldPos } = evt.detail.currentPoints;\n\n    const annotation = <LivewireContourAnnotation>csUtils.deepMerge(\n      contourSegmentationAnnotation,\n      {\n        data: {\n          handles: {\n            points: [[...worldPos]],\n          },\n        },\n      }\n    );\n    return annotation;\n  }\n\n  /**\n   * Clears any in progress edits, mostly used to get rid of accidentally started\n   * contours that happen on clicking not quite the right handle point.\n   * Eventually this is to be replaced with a proper undo, once that framework\n   * is available.\n   */\n  public undo(element, config, evt) {\n    if (!this.editData) {\n      // TODO - proper undo\n      return;\n    }\n    this._endCallback(evt, true);\n  }\n\n  /**\n   * Render an annotation instance\n   * @param renderContext - Render context that contains the annotation, enabledElement, etc.\n   * @returns True if the annotation is rendered or false otherwise\n   */\n  protected renderAnnotationInstance(renderContext: {\n    enabledElement: Types.IEnabledElement;\n    targetId: string;\n    annotation: LivewireContourAnnotation;\n    annotationStyle: Record<string, any>;\n    svgDrawingHelper: SVGDrawingHelper;\n  }): boolean {\n    const { annotation, enabledElement, svgDrawingHelper, annotationStyle } =\n      renderContext;\n\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { annotationUID, data, highlighted } = annotation;\n    const { handles } = data;\n    const newAnnotation = this.editData?.newAnnotation;\n    const { lineWidth, lineDash, color } = annotationStyle;\n\n    // Render the first control point only when the annotation is drawn for the\n    // first time to make it easier to know where the user needs to click to\n    // to close the ROI.\n    if (\n      highlighted ||\n      (newAnnotation &&\n        annotation.annotationUID === this.editData?.annotation?.annotationUID)\n    ) {\n      const handleGroupUID = '0';\n      const canvasHandles = handles.points.map(worldToCanvas);\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        canvasHandles,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        }\n      );\n    }\n\n    // Let the base class render the contour\n    super.renderAnnotationInstance(renderContext);\n\n    return true;\n  }\n\n  protected updateAnnotation(livewirePath: LivewirePath) {\n    if (!this.editData || !livewirePath) {\n      return;\n    }\n\n    const { annotation, sliceToWorld } = this.editData;\n    let { pointArray: imagePoints } = livewirePath;\n\n    if (imagePoints.length > 1) {\n      imagePoints = [...imagePoints, imagePoints[0]];\n    }\n\n    this.updateContourPolyline(\n      annotation,\n      {\n        points: imagePoints,\n        closed: annotation.data.contour.closed,\n        targetWindingDirection: ContourWindingDirection.Clockwise,\n      },\n      {\n        canvasToWorld: sliceToWorld,\n      }\n    );\n  }\n}\n\nLivewireContourTool.toolName = 'LivewireContour';\nexport default LivewireContourTool;\n","import { utilities } from '@cornerstonejs/core';\nimport type { PublicToolProps } from '../../types';\nimport type { AnnotationRenderContext } from '../../types';\nimport { PlanarFreehandContourSegmentationAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport PlanarFreehandROITool from './PlanarFreehandROITool';\n\nclass PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool {\n  static toolName;\n\n  constructor(toolProps: PublicToolProps) {\n    const initialProps = utilities.deepMerge(\n      {\n        configuration: {\n          calculateStats: false,\n          /**\n           * Allow open contours false means to not allow a final/complete\n           * annotation to be done as an open contour.  This does not mean\n           * that the contour won't be open during creation.\n           */\n          allowOpenContours: false,\n        },\n      },\n      toolProps\n    );\n\n    super(initialProps);\n  }\n\n  protected isContourSegmentationTool(): boolean {\n    // Re-enable contour segmentation behavior disabled by PlanarFreehandROITool\n    return true;\n  }\n\n  protected renderAnnotationInstance(\n    renderContext: AnnotationRenderContext\n  ): boolean {\n    const annotation =\n      renderContext.annotation as PlanarFreehandContourSegmentationAnnotation;\n    const { invalidated } = annotation;\n\n    // Render the annotation before triggering events\n    const renderResult = super.renderAnnotationInstance(renderContext);\n\n    if (invalidated) {\n      const { segmentationId } = annotation.data.segmentation;\n\n      // This event is trigged by ContourSegmentationBaseTool but PlanarFreehandROITool\n      // is the only contour class that does not call `renderAnnotationInstace` from\n      // its base class.\n      triggerSegmentationDataModified(segmentationId);\n    }\n\n    return renderResult;\n  }\n}\n\nPlanarFreehandContourSegmentationTool.toolName =\n  'PlanarFreehandContourSegmentationTool';\n\nexport default PlanarFreehandContourSegmentationTool;\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { vec2 } from 'gl-matrix';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { roundNumber } from '../../utilities';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * ProbeTool let you get the underlying voxel value by putting a probe in that\n * location. It will give index of the location and value of the voxel.\n * You can use ProbeTool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Probe tool's text box are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * To use the ProbeTool, you first need to add it to cornerstoneTools, then create\n * a toolGroup and add the ProbeTool to it. Finally, setToolActive on the toolGroup\n *\n * ```js\n * cornerstoneTools.addTool(ProbeTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(ProbeTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(ProbeTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n *\n */\n\nclass ProbeTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  // Not necessary for this tool but needs to be defined since it's an abstract\n  // method from the parent class.\n  isPointNearTool(): boolean {\n    return false;\n  }\n\n  toolSelectedCallback() {}\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Probe Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It checks if the mouse click is near ProveTool, it overwrites the baseAnnotationTool\n   * getHandleNearImagePoint method.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: ProbeAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const point = data.handles.points[0];\n    const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n    const near =\n      vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n    if (near === true) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ProbeAnnotation\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    // Find viewports to render on drag.\n\n    this.editData = {\n      //handle, // This would be useful for other tools with more than one handle\n      annotation,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    const { viewportId, renderingEngine } = getEnabledElement(element);\n    this.eventDispatchDetail = {\n      viewportId,\n      renderingEngineId: renderingEngine.id,\n    };\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n  };\n\n  _dragCallback = (evt) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points[0] = [...worldPos];\n    annotation.invalidated = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const { renderingEngine } = getEnabledElement(element);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the probe annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ProbeAnnotation;\n      const annotationUID = annotation.annotationUID;\n      const data = annotation.data;\n      const point = data.handles.points[0];\n      const canvasCoordinates = viewport.worldToCanvas(point);\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color } = this.getAnnotationStyle({ annotation, styleSpecifier });\n\n      if (!data.cachedStats) {\n        data.cachedStats = {};\n      }\n\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].value == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          index: null,\n          value: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        [canvasCoordinates],\n        { color }\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (textLines) {\n        const textCanvasCoordinates = [\n          canvasCoordinates[0] + 6,\n          canvasCoordinates[1] - 6,\n        ];\n\n        const textUID = '0';\n        drawTextBoxSvg(\n          svgDrawingHelper,\n          annotationUID,\n          textUID,\n          textLines,\n          [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n          options\n        );\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { renderingEngineId, viewport } = enabledElement;\n    const { element } = viewport;\n\n    const worldPos = data.handles.points[0];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const modality = metadata.Modality;\n      const index = transformWorldToIndex(imageData, worldPos);\n\n      index[0] = Math.round(index[0]);\n      index[1] = Math.round(index[1]);\n      index[2] = Math.round(index[2]);\n\n      const samplesPerPixel =\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n\n      if (csUtils.indexWithinDimensions(index, dimensions)) {\n        this.isHandleOutsideImage = false;\n        const yMultiple = dimensions[0] * samplesPerPixel;\n        const zMultiple = dimensions[0] * dimensions[1] * samplesPerPixel;\n\n        const baseIndex =\n          index[2] * zMultiple +\n          index[1] * yMultiple +\n          index[0] * samplesPerPixel;\n        let value =\n          samplesPerPixel > 2\n            ? [\n                scalarData[baseIndex],\n                scalarData[baseIndex + 1],\n                scalarData[baseIndex + 2],\n              ]\n            : scalarData[baseIndex];\n\n        // Index[2] for stackViewport is always 0, but for visualization\n        // we reset it to be imageId index\n        if (targetId.startsWith('imageId:')) {\n          const imageId = targetId.split('imageId:')[1];\n          const imageURI = csUtils.imageIdToURI(imageId);\n          const viewports = csUtils.getViewportsWithImageURI(\n            imageURI,\n            renderingEngineId\n          );\n\n          const viewport = viewports[0];\n\n          index[2] = viewport.getCurrentImageIdIndex();\n        }\n\n        let modalityUnit;\n\n        if (modality === 'US') {\n          const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n            index,\n          ]);\n\n          const hasEnhancedRegionValues = calibratedResults.values.every(\n            (value) => value !== null\n          );\n\n          value = hasEnhancedRegionValues ? calibratedResults.values : value;\n          modalityUnit = hasEnhancedRegionValues\n            ? calibratedResults.units\n            : 'raw';\n        } else {\n          modalityUnit = getModalityUnit(\n            modality,\n            annotation.metadata.referencedImageId,\n            modalityUnitOptions\n          );\n        }\n\n        cachedStats[targetId] = {\n          index,\n          value,\n          Modality: modality,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          index,\n          Modality: modality,\n        };\n      }\n\n      annotation.invalidated = false;\n\n      // Dispatching annotation modified\n      triggerAnnotationModified(annotation, element);\n    }\n\n    return cachedStats;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { index, value, modalityUnit } = cachedVolumeStats;\n\n  if (value === undefined) {\n    return;\n  }\n\n  const textLines = [];\n\n  textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n\n  if (value instanceof Array && modalityUnit instanceof Array) {\n    for (let i = 0; i < value.length; i++) {\n      textLines.push(`${roundNumber(value[i])} ${modalityUnit[i]}`);\n    }\n  } else {\n    textLines.push(`${roundNumber(value)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nProbeTool.toolName = 'Probe';\nexport default ProbeTool;\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { roundNumber } from '../../utilities';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  ToolProps,\n  PublicToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInShapeCallback } from '../../utilities/';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * RectangleROIAnnotation let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of a Rectangular region of interest.\n * You can use RectangleROIAnnotation in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. RectangleROI tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(RectangleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(RectangleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(RectangleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass RectangleROITool extends AnnotationTool {\n  static toolName;\n\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a RectangleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): RectangleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: RectangleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasPoint1 = viewport.worldToCanvas(points[0]);\n    const canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    const rect = this._getRectangleImageCoordinates([\n      canvasPoint1,\n      canvasPoint2,\n    ]);\n\n    const point = [canvasCoords[0], canvasCoords[1]];\n    const { left, top, width, height } = rect;\n\n    const distanceToPoint = rectangle.distanceToPoint(\n      [left, top, width, height],\n      point as Types.Point2\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const { renderingEngine } = getEnabledElement(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - Move the text boxes world position\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - Moving tool, so move all points by the world points delta\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { points } = data.handles;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Moving handle.\n      const { currentPoints } = eventDetail;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n\n      const { points } = data.handles;\n\n      // Move this handle.\n      points[handleIndex] = [...worldPos];\n\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          // Moving bottomLeft or topRight\n\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n\n          break;\n        case 1:\n        case 2:\n          // Moving bottomRight or topLeft\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n\n          bottomLeftCanvas = <Types.Point2>[\n            topLeftCanvas[0],\n            bottomRightCanvas[1],\n          ];\n          topRightCanvas = <Types.Point2>[\n            bottomRightCanvas[0],\n            topLeftCanvas[1],\n          ];\n\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n\n          break;\n      }\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const { renderingEngine } = getEnabledElement(element);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Remove event handlers for the modify event loop, and enable default event propagation.\n   */\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n        annotation,\n        styleSpecifier,\n      });\n\n      const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement\n        );\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-rect`;\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getRectangleImageCoordinates = (\n    points: Array<Types.Point2>\n  ): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  } => {\n    const [point0, point1] = points;\n\n    return {\n      left: Math.min(point0[0], point1[0]),\n      top: Math.min(point0[1], point1[1]),\n      width: Math.abs(point0[0] - point1[0]),\n      height: Math.abs(point0[1] - point1[1]),\n    };\n  };\n\n  /**\n   * _calculateCachedStats - For each volume in the frame of reference that a\n   * tool instance in particular viewport defines as its target volume, find the\n   * volume coordinates (i,j,k) being probed by the two corners. One of i,j or k\n   * will be constant across the two points. In the other two directions iterate\n   * over the voxels and calculate the first and second-order statistics.\n   *\n   * @param data - The annotation tool-specific data.\n   * @param viewPlaneNormal - The normal vector of the camera.\n   * @param viewUp - The viewUp vector of the camera.\n   */\n  _calculateCachedStats = (\n    annotation,\n    viewPlaneNormal,\n    viewUp,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const { data } = annotation;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[3];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n\n      const pos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      pos1Index[0] = Math.floor(pos1Index[0]);\n      pos1Index[1] = Math.floor(pos1Index[1]);\n      pos1Index[2] = Math.floor(pos1Index[2]);\n\n      const pos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      pos2Index[0] = Math.floor(pos2Index[0]);\n      pos2Index[1] = Math.floor(pos2Index[1]);\n      pos2Index[2] = Math.floor(pos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        // Calculate index bounds to iterate over\n\n        const iMin = Math.min(pos1Index[0], pos2Index[0]);\n        const iMax = Math.max(pos1Index[0], pos2Index[0]);\n\n        const jMin = Math.min(pos1Index[1], pos2Index[1]);\n        const jMax = Math.max(pos1Index[1], pos2Index[1]);\n\n        const kMin = Math.min(pos1Index[2], pos2Index[2]);\n        const kMax = Math.max(pos1Index[2], pos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n\n        const handles = [pos1Index, pos2Index];\n        const { scale, areaUnits } = getCalibratedLengthUnitsAndScale(\n          image,\n          handles\n        );\n\n        const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          () => true,\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats.mean?.value,\n          stdDev: stats.stdDev?.value,\n          max: stats.max?.value,\n          statsArray: stats.array,\n          pointsInShape: pointsInShape,\n          areaUnit: areaUnits,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\n/**\n * _getTextLines - Returns the Area, mean and std deviation of the area of the\n * target volume enclosed by the rectangle.\n *\n * @param data - The annotation tool-specific data.\n * @param targetId - The volumeId of the volume to display the stats for.\n */\nfunction defaultGetTextLines(data, targetId: string): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n\n  if (mean === undefined) {\n    return;\n  }\n\n  const textLines: string[] = [];\n\n  textLines.push(`Area: ${roundNumber(area)} ${areaUnit}`);\n  textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n\n  return textLines;\n}\n\nRectangleROITool.toolName = 'RectangleROI';\nexport default RectangleROITool;\n","import { utilities } from '@cornerstonejs/core';\nimport { PublicToolProps } from '../../types';\nimport SplineROITool from './SplineROITool';\n\nclass SplineContourSegmentationTool extends SplineROITool {\n  static toolName;\n\n  constructor(toolProps: PublicToolProps) {\n    const initialProps = utilities.deepMerge(\n      {\n        configuration: {\n          calculateStats: false,\n        },\n      },\n      toolProps\n    );\n\n    super(initialProps);\n  }\n\n  protected isContourSegmentationTool(): boolean {\n    // Re-enable contour segmentation behavior disabled by SplineROITool\n    return true;\n  }\n}\n\nSplineContourSegmentationTool.toolName = 'SplineContourSegmentationTool';\nexport default SplineContourSegmentationTool;\n","import {\n  getEnabledElement,\n  eventTarget,\n  triggerEvent,\n  utilities,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport {\n  getChildAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawPolyline as drawPolylineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport {\n  Events,\n  MouseBindings,\n  KeyboardBindings,\n  ChangeTypes,\n} from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport type {\n  Annotation,\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  AnnotationRenderContext,\n} from '../../types';\nimport {\n  math,\n  throttle,\n  roundNumber,\n  triggerAnnotationRenderForViewportIds,\n  getCalibratedLengthUnitsAndScale,\n} from '../../utilities';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\n\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport type { SplineROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport type {\n  AnnotationModifiedEventDetail,\n  ContourAnnotationCompletedEventDetail,\n} from '../../types/EventTypes';\nimport { ISpline } from '../../types/ISpline';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\n\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\n\nconst DEFAULT_SPLINE_CONFIG = {\n  resolution: 20,\n  controlPointAdditionDistance: 6,\n  controlPointDeletionDistance: 6,\n  showControlPointsConnectors: false,\n  controlPointAdditionEnabled: true,\n  controlPointDeletionEnabled: true,\n};\n\nenum SplineTypesEnum {\n  Cardinal = 'CARDINAL',\n  Linear = 'LINEAR',\n  CatmullRom = 'CATMULLROM',\n  BSpline = 'BSPLINE',\n}\n\nenum SplineToolActions {\n  AddControlPoint = 'addControlPoint',\n  DeleteControlPoint = 'deleteControlPoint',\n}\n\nclass SplineROITool extends ContourSegmentationBaseTool {\n  static toolName;\n  static SplineTypes = SplineTypesEnum;\n  static Actions = SplineToolActions;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: SplineROIAnnotation;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    lastCanvasPoint?: Types.Point2;\n    contourHoleProcessingEnabled?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n  fireChangeOnUpdate: {\n    annotationUID: string;\n    changeType: ChangeTypes;\n    contourHoleProcessingEnabled: boolean;\n  } = null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        calculateStats: true,\n        getTextLines: defaultGetTextLines,\n        /**\n         * Specify which modifier key is used to add a hole to a contour. The\n         * modifier must be pressed when the first point of a new contour is added.\n         */\n        contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n        /**\n         * The polyline may get processed in order to reduce the number of points\n         * for better performance and storage.\n         */\n        decimate: {\n          enabled: false,\n          /** A maximum given distance 'epsilon' to decide if a point should or\n           * shouldn't be added the resulting polyline which will have a lower\n           * number of points for higher `epsilon` values.\n           */\n          epsilon: 0.1,\n        },\n        spline: {\n          configuration: {\n            [SplineTypesEnum.Cardinal]: {\n              Class: CardinalSpline,\n              scale: 0.5,\n            },\n            [SplineTypesEnum.CatmullRom]: {\n              Class: CatmullRomSpline,\n            },\n            [SplineTypesEnum.Linear]: {\n              Class: LinearSpline,\n            },\n            [SplineTypesEnum.BSpline]: {\n              Class: BSpline,\n              controlPointAdditionEnabled: false,\n              controlPointDeletionEnabled: false,\n              showControlPointsConnectors: true,\n            },\n          },\n          type: SplineTypesEnum.CatmullRom,\n          drawPreviewEnabled: true,\n          lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n        },\n        actions: {\n          [SplineToolActions.AddControlPoint]: {\n            method: 'addControlPointCallback',\n            bindings: [\n              {\n                mouseButton: MouseBindings.Primary,\n                modifierKey: KeyboardBindings.Shift,\n              },\n            ],\n          },\n          [SplineToolActions.DeleteControlPoint]: {\n            method: 'deleteControlPointCallback',\n            bindings: [\n              {\n                mouseButton: MouseBindings.Primary,\n                modifierKey: KeyboardBindings.Ctrl,\n              },\n            ],\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation(evt: EventTypes.InteractionEventType): SplineROIAnnotation {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const { canvas: canvasPos } = currentPoints;\n    const contourHoleProcessingEnabled =\n      getMouseModifierKey(evt.detail.event) ===\n      this.configuration.contourHoleAdditionModifierKey;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const annotation = this.createAnnotation(evt) as SplineROIAnnotation;\n\n    this.isDrawing = true;\n    this.addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n      lastCanvasPoint: canvasPos,\n      contourHoleProcessingEnabled,\n    };\n\n    this._activateDraw(element);\n    evt.preventDefault();\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  }\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: SplineROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const { instance: spline } = annotation.data.spline;\n\n    return spline.isPointNearCurve(canvasCoords, proximity);\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: SplineROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this._activateModify(element);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: SplineROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n\n      handleIndex = points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation,\n      contourHoleProcessingEnabled,\n    } = this.editData;\n    const { data } = annotation;\n    annotation.autoGenerated = false;\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    // Decide whether there's at least one point is outside image\n    const image = this.getTargetIdImage(\n      this.getTargetId(enabledElement.viewport),\n      enabledElement.renderingEngine\n    );\n    const { imageData, dimensions } = image;\n    this.isHandleOutsideImage = data.handles.points\n      .map((p) => utilities.transformWorldToIndex(imageData, p))\n      .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    const changeType = newAnnotation\n      ? ChangeTypes.Completed\n      : ChangeTypes.HandlesUpdated;\n    if (!this.fireChangeOnUpdate) {\n      this.fireChangeOnUpdate = {\n        annotationUID: annotation.annotationUID,\n        changeType,\n        contourHoleProcessingEnabled,\n      };\n    } else {\n      this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n      this.fireChangeOnUpdate.changeType = changeType;\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  private _keyDownCallback = (evt: EventTypes.KeyDownEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const key = eventDetail.key ?? '';\n    const { lastControlPointDeletionKeys } = this.configuration.spline;\n    const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n\n    if (!deleteLastPoint) {\n      return;\n    }\n\n    const { annotation } = this.editData;\n    const { data } = annotation;\n\n    if (data.handles.points.length === SPLINE_MIN_POINTS) {\n      this.cancel(element);\n      return;\n    } else {\n      const controlPointIndex = data.handles.points.length - 1;\n      this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n    }\n\n    evt.preventDefault();\n  };\n\n  private _mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    const { drawPreviewEnabled } = this.configuration.spline;\n\n    // Does not force a re-render if preview is not enabled\n    if (!drawPreviewEnabled) {\n      return;\n    }\n\n    const { element } = evt.detail;\n    const { renderingEngine } = getEnabledElement(element);\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n    evt.preventDefault();\n  };\n\n  private _mouseDownCallback = (evt: EventTypes.InteractionEventType): void => {\n    const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    if (data.contour.closed) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    let closeContour = data.handles.points.length >= 2 && doubleClick;\n    let addNewPoint = true;\n\n    // Check if user clicked on the first point to close the curve\n    if (data.handles.points.length >= 3) {\n      const { instance: spline } = data.spline;\n      const closestControlPoint = spline.getClosestControlPointWithinDistance(\n        canvasPoint,\n        SPLINE_CLICK_CLOSE_CURVE_DIST\n      );\n\n      if (closestControlPoint?.index === 0) {\n        addNewPoint = false;\n        closeContour = true;\n      }\n    }\n\n    if (addNewPoint) {\n      data.handles.points.push(worldPoint);\n    }\n\n    data.contour.closed = data.contour.closed || closeContour;\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (data.contour.closed) {\n      this._endCallback(evt);\n    }\n\n    evt.preventDefault();\n  };\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      this.moveAnnotation(annotation, worldPosDelta);\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel(element: HTMLDivElement) {\n    // If it is not in mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    if (newAnnotation) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    super.cancelAnnotation(annotation);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData = null;\n    return annotation.annotationUID;\n  }\n\n  /**\n   * Triggers an annotation completed event.\n   */\n  triggerAnnotationCompleted = (\n    annotation: SplineROIAnnotation,\n    contourHoleProcessingEnabled: boolean\n  ): void => {\n    const eventType = Events.ANNOTATION_COMPLETED;\n    const eventDetail: ContourAnnotationCompletedEventDetail = {\n      annotation,\n      changeType: ChangeTypes.Completed,\n      contourHoleProcessingEnabled,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * Triggers an annotation modified event.\n   */\n  triggerAnnotationModified = (\n    annotation: SplineROIAnnotation,\n    enabledElement: Types.IEnabledElement,\n    changeType = ChangeTypes.StatsUpdated\n  ): void => {\n    const { viewportId, renderingEngineId } = enabledElement;\n    const eventType = Events.ANNOTATION_MODIFIED;\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n      changeType,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * Triggers an annotation complete or modified event based on changeType.\n   */\n  triggerChangeEvent = (\n    annotation: SplineROIAnnotation,\n    enabledElement: Types.IEnabledElement,\n    changeType = ChangeTypes.StatsUpdated,\n    contourHoleProcessingEnabled\n  ): void => {\n    if (changeType === ChangeTypes.Completed) {\n      this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n    } else {\n      this.triggerAnnotationModified(annotation, enabledElement, changeType);\n    }\n  };\n\n  private _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  private _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  private _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n    element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n    element.addEventListener(\n      Events.MOUSE_DOUBLE_CLICK,\n      this._mouseDownCallback\n    );\n\n    element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n  };\n\n  private _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n    element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n    element.removeEventListener(\n      Events.MOUSE_DOUBLE_CLICK,\n      this._mouseDownCallback\n    );\n\n    element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n  };\n\n  protected isContourSegmentationTool(): boolean {\n    // Disable contour segmentation behavior because it shall be activated only\n    // for SplineContourSegmentationTool\n    return false;\n  }\n\n  /**\n   * Render an annotation instance\n   * @param renderContext - Render context that contains the annotation, enabledElement, etc.\n   * @returns True if the annotation is rendered or false otherwise\n   */\n  protected renderAnnotationInstance(\n    renderContext: AnnotationRenderContext\n  ): boolean {\n    const { enabledElement, targetId, svgDrawingHelper, annotationStyle } =\n      renderContext;\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { element } = viewport;\n    const annotation = renderContext.annotation as SplineROIAnnotation;\n    const { annotationUID, data, highlighted } = annotation;\n    const { handles } = data;\n    const { points: controlPoints, activeHandleIndex } = handles;\n    const newAnnotation = this.editData?.newAnnotation;\n\n    const {\n      lineWidth,\n      lineDash,\n      color,\n      locked: annotationLocked,\n    } = annotationStyle;\n\n    const canvasCoordinates = controlPoints.map((p) =>\n      worldToCanvas(p)\n    ) as Types.Point2[];\n\n    const { drawPreviewEnabled } = this.configuration.spline;\n    const splineType = annotation.data.spline.type;\n    const splineConfig = this._getSplineConfig(splineType);\n    const spline = annotation.data.spline.instance;\n\n    const childAnnotations = getChildAnnotations(annotation);\n    const missingAnnotation = childAnnotations.findIndex((it) => !it);\n    if (missingAnnotation !== -1) {\n      // Child annotations go AWOL for a variety of reasons, so report is specifically here\n      throw new Error(\n        `Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`\n      );\n    }\n    // Update current and all child annotations/splines\n    const splineAnnotationsGroup = [annotation, ...childAnnotations].filter(\n      (annotation) => this._isSplineROIAnnotation(annotation)\n    ) as SplineROIAnnotation[];\n\n    splineAnnotationsGroup.forEach((annotation) => {\n      const spline = this._updateSplineInstance(element, annotation);\n      const splinePolylineCanvas = spline.getPolylinePoints();\n\n      this.updateContourPolyline(\n        annotation,\n        {\n          points: splinePolylineCanvas,\n          closed: data.contour.closed,\n          targetWindingDirection: ContourWindingDirection.Clockwise,\n        },\n        viewport\n      );\n    });\n\n    // Let the base class render the contour\n    super.renderAnnotationInstance(renderContext);\n\n    // If cachedStats does not exist, or the areaUnit is missing (as part of\n    // import/hydration etc.), force to recalculate the stats from the points\n    if (\n      !data.cachedStats[targetId] ||\n      data.cachedStats[targetId].areaUnit == null\n    ) {\n      data.cachedStats[targetId] = {\n        Modality: null,\n        area: null,\n        areaUnit: null,\n      };\n\n      this._calculateCachedStats(annotation, element);\n    } else if (annotation.invalidated) {\n      this._throttledCalculateCachedStats(annotation, element);\n    }\n\n    let activeHandleCanvasCoords;\n\n    if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n      // Not locked or creating and hovering over handle, so render handle.\n      activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n    }\n\n    if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n      const handleGroupUID = '0';\n\n      // Move this call to the base class (contour seg) in the near future\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        canvasCoordinates,\n        {\n          color,\n          lineWidth: Math.max(1, lineWidth),\n          handleRadius: '3',\n        }\n      );\n    }\n\n    if (\n      drawPreviewEnabled &&\n      spline.numControlPoints > 1 &&\n      this.editData?.lastCanvasPoint &&\n      !spline.closed\n    ) {\n      const { lastCanvasPoint } = this.editData;\n      const previewPolylinePoints = spline.getPreviewPolylinePoints(\n        lastCanvasPoint,\n        SPLINE_CLICK_CLOSE_CURVE_DIST\n      );\n\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        'previewSplineChange',\n        previewPolylinePoints,\n        {\n          color: '#9EA0CA',\n          lineDash,\n          lineWidth: 1,\n        }\n      );\n    }\n\n    if (splineConfig.showControlPointsConnectors) {\n      const controlPointsConnectors = [...canvasCoordinates];\n\n      // Connect the last point to the first one when the spline is closed\n      if (spline.closed) {\n        controlPointsConnectors.push(canvasCoordinates[0]);\n      }\n\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        'controlPointsConnectors',\n        controlPointsConnectors,\n        {\n          color: 'rgba(255, 255, 255, 0.5)',\n          lineWidth: 1,\n        }\n      );\n    }\n\n    this._renderStats(\n      annotation,\n      viewport,\n      svgDrawingHelper,\n      annotationStyle.textbox\n    );\n\n    if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n      this.triggerChangeEvent(\n        annotation,\n        enabledElement,\n        this.fireChangeOnUpdate.changeType,\n        this.fireChangeOnUpdate.contourHoleProcessingEnabled\n      );\n      this.fireChangeOnUpdate = null;\n    }\n\n    annotation.invalidated = false;\n    return true;\n  }\n\n  /**\n   * Creates new interpolated handles for the spline control given the\n   * polyline data.  This allows creating the spline from polyline data\n   * directly.\n   */\n  protected createInterpolatedSplineControl(annotation) {\n    if (annotation.data.handles.points?.length) {\n      // The interpolation itself created the handles\n      return;\n    }\n    const { polyline } = annotation.data.contour;\n    if (!polyline || !polyline.length) {\n      return;\n    }\n    annotation.data.handles.points = [];\n    const { points } = annotation.data.handles;\n    const increment = Math.max(10, Math.floor(polyline.length / 20));\n    for (let i = 0; i < polyline.length - increment; i += increment) {\n      points.push(polyline[i]);\n    }\n    points.push(polyline[polyline.length - 1]);\n  }\n\n  protected createAnnotation(evt: EventTypes.InteractionEventType): Annotation {\n    const contourAnnotation = super.createAnnotation(evt);\n    const { world: worldPos } = evt.detail.currentPoints;\n    const { type: splineType } = this.configuration.spline;\n    const splineConfig = this._getSplineConfig(splineType);\n    const spline = new splineConfig.Class();\n    const createSpline = () => ({\n      type: splineConfig.type,\n      instance: spline,\n      resolution: splineConfig.resolution,\n    });\n\n    // Add an action to create a new spline data on creating an interpolated\n    // instance.\n    let onInterpolationComplete;\n    if (this.configuration.interpolation?.enabled) {\n      onInterpolationComplete = (annotation) => {\n        annotation.data.spline ||= createSpline();\n        this.createInterpolatedSplineControl(annotation);\n      };\n    }\n\n    return <SplineROIAnnotation>utilities.deepMerge(contourAnnotation, {\n      data: {\n        handles: {\n          points: [[...worldPos]],\n        },\n        spline: createSpline(),\n        cachedStats: {},\n      },\n      onInterpolationComplete,\n    });\n  }\n\n  private _renderStats = (\n    annotation,\n    viewport,\n    svgDrawingHelper,\n    textboxStyle\n  ) => {\n    const data = annotation.data;\n    const targetId = this.getTargetId(viewport);\n\n    if (!data.spline.instance.closed || !textboxStyle.visibility) {\n      return;\n    }\n\n    const textLines = this.configuration.getTextLines(data, targetId);\n    if (!textLines || textLines.length === 0) {\n      return;\n    }\n\n    const canvasCoordinates = data.handles.points.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n    if (!data.handles.textBox.hasMoved) {\n      const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n      data.handles.textBox.worldPosition =\n        viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(\n      data.handles.textBox.worldPosition\n    );\n\n    const textBoxUID = 'textBox';\n    const boundingBox = drawLinkedTextBoxSvg(\n      svgDrawingHelper,\n      annotation.annotationUID ?? '',\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      textboxStyle\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  };\n\n  addControlPointCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: SplineROIAnnotation\n  ) => {\n    const { data } = annotation;\n    const splineType = data.spline.type;\n    const splineConfig = this._getSplineConfig(splineType);\n    const maxDist = splineConfig.controlPointAdditionDistance;\n\n    if (splineConfig.controlPointAdditionEnabled === false) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    const { instance: spline } = data.spline;\n    const canvasPos = evt.detail.currentPoints.canvas;\n    const closestPointInfo = spline.getClosestPoint(canvasPos);\n\n    if (closestPointInfo.distance > maxDist) {\n      return;\n    }\n\n    // Add a point at the `u` position from Parameter Space\n    const { index, point: canvasPoint } = spline.addControlPointAtU(\n      closestPointInfo.uValue\n    );\n\n    data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n    annotation.invalidated = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  private _deleteControlPointByIndex(\n    element: HTMLDivElement,\n    annotation: SplineROIAnnotation,\n    controlPointIndex: number\n  ) {\n    const enabledElement = getEnabledElement(element);\n    const { points: controlPoints } = annotation.data.handles;\n\n    // There is no curve with only 2 points\n    if (controlPoints.length === 3) {\n      removeAnnotation(annotation.annotationUID);\n    } else {\n      controlPoints.splice(controlPointIndex, 1);\n    }\n\n    const { renderingEngine } = enabledElement;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    annotation.invalidated = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n\n  deleteControlPointCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: SplineROIAnnotation\n  ) => {\n    const splineType = annotation.data.spline.type;\n    const splineConfig = this._getSplineConfig(splineType);\n    const maxDist = splineConfig.controlPointDeletionDistance;\n\n    if (splineConfig.controlPointDeletionEnabled === false) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const { canvas: canvasPos } = currentPoints;\n    const { instance: spline } = annotation.data.spline;\n    const closestControlPoint = spline.getClosestControlPointWithinDistance(\n      canvasPos,\n      maxDist\n    );\n\n    if (!closestControlPoint) {\n      return;\n    }\n\n    this._deleteControlPointByIndex(\n      element,\n      annotation,\n      closestControlPoint.index\n    );\n  };\n\n  _isSplineROIAnnotation(\n    annotation: Annotation\n  ): annotation is SplineROIAnnotation {\n    return !!(<SplineROIAnnotation>annotation).data?.spline;\n  }\n\n  /**\n   * Get a spline config merged with the default settings.\n   * @param type - Spline type (CARDINAL, CATMULLROM, LINEAR or BSPLINE)\n   * @returns Spline configuration\n   */\n  private _getSplineConfig(type: string) {\n    const { configuration: config } = this;\n    const splineConfigs = config.spline.configuration;\n\n    return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n  }\n\n  private _updateSplineInstance(\n    element: HTMLDivElement,\n    annotation: SplineROIAnnotation\n  ): ISpline {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { data } = annotation;\n    const { type: splineType, instance: spline } = annotation.data.spline;\n    const splineConfig = this._getSplineConfig(splineType);\n    const worldPoints = data.handles.points;\n    const canvasPoints = worldPoints.map(worldToCanvas);\n    const resolution =\n      splineConfig.resolution !== undefined\n        ? parseInt(splineConfig.resolution)\n        : undefined;\n    const scale =\n      splineConfig.scale !== undefined\n        ? parseFloat(splineConfig.scale)\n        : undefined;\n\n    spline.setControlPoints(canvasPoints);\n    spline.closed = !!data.contour.closed;\n\n    // Update spline resolution in case it has changed\n    if (\n      !spline.fixedResolution &&\n      resolution !== undefined &&\n      spline.resolution !== resolution\n    ) {\n      spline.resolution = resolution;\n      annotation.invalidated = true;\n    }\n\n    // Update Cardinal spline scale in case it has changed\n    if (\n      spline instanceof CardinalSpline &&\n      !spline.fixedScale &&\n      scale !== undefined &&\n      spline.scale !== scale\n    ) {\n      spline.scale = scale;\n      annotation.invalidated = true;\n    }\n\n    return spline;\n  }\n\n  private _calculateCachedStats = (\n    annotation: SplineROIAnnotation,\n    element: HTMLDivElement\n  ) => {\n    if (!this.configuration.calculateStats) {\n      return;\n    }\n    const data = annotation.data;\n\n    if (!data.contour.closed) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const { cachedStats } = data;\n    const { polyline: points } = data.contour;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { metadata } = image;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // Using an arbitrary start point (canvasPoint), calculate the\n      // mm spacing for the canvas in the X and Y directions.\n      const canvasPoint = canvasCoordinates[0];\n      const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n      const deltaXPoint = viewport.canvasToWorld([\n        canvasPoint[0] + 1,\n        canvasPoint[1],\n      ]);\n      const deltaYPoint = viewport.canvasToWorld([\n        canvasPoint[0],\n        canvasPoint[1] + 1,\n      ]);\n\n      const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n      const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n\n      const { imageData } = image;\n      const { scale, areaUnits } = getCalibratedLengthUnitsAndScale(\n        image,\n        () => {\n          const {\n            maxX: canvasMaxX,\n            maxY: canvasMaxY,\n            minX: canvasMinX,\n            minY: canvasMinY,\n          } = math.polyline.getAABB(canvasCoordinates);\n\n          const topLeftBBWorld = viewport.canvasToWorld([\n            canvasMinX,\n            canvasMinY,\n          ]);\n\n          const topLeftBBIndex = utilities.transformWorldToIndex(\n            imageData,\n            topLeftBBWorld\n          );\n\n          const bottomRightBBWorld = viewport.canvasToWorld([\n            canvasMaxX,\n            canvasMaxY,\n          ]);\n\n          const bottomRightBBIndex = utilities.transformWorldToIndex(\n            imageData,\n            bottomRightBBWorld\n          );\n\n          return [topLeftBBIndex, bottomRightBBIndex];\n        }\n      );\n      let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n\n      // Convert from canvas_pixels ^2 to mm^2\n      area *= deltaInX * deltaInY;\n\n      cachedStats[targetId] = {\n        Modality: metadata.Modality,\n        area,\n        areaUnit: areaUnits,\n      };\n    }\n\n    this.triggerAnnotationModified(\n      annotation,\n      enabledElement,\n      ChangeTypes.StatsUpdated\n    );\n\n    return cachedStats;\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n  const textLines: string[] = [];\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n\n    textLines.push(areaLine);\n  }\n\n  return textLines;\n}\n\nSplineROITool.toolName = 'SplineROI';\nexport default SplineROITool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  utilities as csUtils,\n  StackViewport,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport {\n  triggerAnnotationCompleted,\n  triggerAnnotationModified,\n} from '../../stateManagement/annotation/helpers/state';\nimport { UltrasoundDirectionalAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  drawHandle as drawHandleSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { roundNumber } from '../../utilities';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n  InteractionTypes,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * The `UltrasoundDirectionalTool` class is a tool for creating directional ultrasound annotations.\n * It allows users to draw lines and measure distances between two points in the image.\n * It automatically calculates the distance based on the relevant unit of measurement.\n */\nclass UltrasoundDirectionalTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  startedDrawing: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n        /**\n         * Determines whether both horizontal and vertical distances should be displayed\n         * in the text lines when generating annotations' measurement information.\n         */\n        displayBothAxesDistances: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Ultrasound Directional Tool and store it in the annotationManager\n   *\n   * @param evt -  EventTypes.InteractionEventType\n   * @returns The annotation object.\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): UltrasoundDirectionalAnnotation => {\n    if (this.startedDrawing) {\n      return;\n    }\n\n    this.startedDrawing = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (!(viewport instanceof StackViewport)) {\n      throw new Error(\n        'UltrasoundDirectionalTool can only be used on a StackViewport'\n      );\n    }\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: UltrasoundDirectionalAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    return false;\n  };\n\n  toolSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes,\n    canvasCoords?: Types.Point2\n  ): void {\n    return;\n  }\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: UltrasoundDirectionalAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    let movingTextBox = false;\n    let handleIndex;\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n\n    this.editData = {\n      handleIndex,\n      annotation,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.startedDrawing && data.handles.points.length === 1) {\n      // adds the last point to the measurement\n      this.editData.handleIndex = 1;\n      return;\n    }\n\n    this.startedDrawing = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        triggerAnnotationCompleted(annotation);\n      }\n\n      this.editData = null;\n      this.startedDrawing = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as UltrasoundDirectionalAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].xValues == null\n      ) {\n        data.cachedStats[targetId] = {\n          xValues: [0, 0],\n          yValues: [0, 0],\n          isHorizontal: false,\n          units: [''],\n          isUnitless: false,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      // draw first point\n      let handleGroupUID = '0';\n      drawHandleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        canvasCoordinates[0],\n        {\n          color,\n        },\n        0\n      );\n\n      renderStatus = true;\n\n      if (canvasCoordinates.length !== 2) {\n        return renderStatus;\n      }\n\n      handleGroupUID = '1';\n      drawHandleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        canvasCoordinates[1],\n        {\n          color,\n        },\n        1\n      );\n\n      const isUnitless = data.cachedStats[targetId].isUnitless;\n\n      if (!isUnitless) {\n        const canvasPoint1 = canvasCoordinates[0];\n        const canvasPoint2 = canvasCoordinates[1];\n\n        const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n        const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n\n        const isHorizontal = data.cachedStats[targetId].isHorizontal;\n\n        // then for the third point we need to go from first point towards\n        // the second point (it can be left or right in the horizontal orientation)\n        // or up or down in the vertical orientation, and only add\n        // the delta y to the x or y coordinate of the first point\n        let projectedPointCanvas = [0, 0] as Types.Point2;\n        if (isHorizontal) {\n          projectedPointCanvas = [\n            canvasPoint1[0] + canvasDeltaX,\n            canvasPoint1[1],\n          ];\n        } else {\n          projectedPointCanvas = [\n            canvasPoint1[0],\n            canvasPoint1[1] + canvasDeltaY,\n          ];\n        }\n\n        // create a line from the first point to the third point\n        let dataId = `${annotationUID}-line-1`;\n        let lineUID = '1';\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates[0],\n          projectedPointCanvas,\n          {\n            color,\n            width: 1,\n            shadow: this.configuration.shadow,\n          },\n          dataId\n        );\n\n        // draw another line from first point to the projected one\n        dataId = `${annotationUID}-line-2`;\n        lineUID = '2';\n\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates[1],\n          projectedPointCanvas,\n          {\n            color,\n            width: 1,\n            lineDash: [1, 1],\n            shadow: this.configuration.shadow,\n          },\n          dataId\n        );\n      } else {\n        // draw straight line between the two points\n        const dataId = `${annotationUID}-line-1`;\n        const lineUID = '1';\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          {\n            color,\n            width: 1,\n            shadow: this.configuration.shadow,\n          },\n          dataId\n        );\n      }\n\n      // draw another line from first point to the\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(\n        data,\n        targetId,\n        this.configuration\n      );\n\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the vertex by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { element } = enabledElement.viewport;\n\n    // Until we have all two anchors bail out\n    if (data.handles.points.length !== 2) {\n      return;\n    }\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData } = image;\n\n      const worldPos1 = data.handles.points[0];\n      const worldPos2 = data.handles.points[1];\n\n      const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n      const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n\n      const { values: values1, units: units1 } =\n        getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n      const { values: values2, units: units2 } =\n        getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n\n      let xValues, yValues, units, isHorizontal;\n      let isUnitless = false;\n      if (\n        units1[0] !== units2[0] ||\n        units1[1] !== units2[1] ||\n        (units1[0] === 'raw' && units2[0] === 'raw')\n      ) {\n        // if units are not the same, we cannot calculate the diff\n        // so we just report the px distance\n        const value = distanceToPoint(worldPos1, worldPos2);\n\n        xValues = [value, 0];\n        yValues = [value, 0];\n        units = ['px'];\n        isUnitless = true;\n      } else {\n        const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n        const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n\n        const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n        const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n\n        isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n        xValues = [values1[0], values2[0]];\n        yValues = [values1[1], values2[1]];\n\n        units = [units1[0], units1[1]];\n      }\n\n      cachedStats[targetId] = {\n        xValues,\n        yValues,\n        isHorizontal,\n        units,\n        isUnitless,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, element);\n\n    return cachedStats;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId, configuration): string[] {\n  const cachedStats = data.cachedStats[targetId];\n  const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n\n  if (isUnitless) {\n    return [`${roundNumber(xValues[0])} px`];\n  }\n\n  if (configuration.displayBothAxesDistances) {\n    const dist1 = Math.abs(xValues[1] - xValues[0]);\n    const dist2 = Math.abs(yValues[1] - yValues[0]);\n    return [\n      `${roundNumber(dist1)} ${units[0]}`,\n      `${roundNumber(dist2)} ${units[1]}`,\n    ];\n  }\n\n  if (isHorizontal) {\n    const dist = Math.abs(xValues[1] - xValues[0]);\n    return [`${roundNumber(dist)} ${units[0]}`];\n  } else {\n    const dist = Math.abs(yValues[1] - yValues[0]);\n    return [`${roundNumber(dist)} ${units[1]}`];\n  }\n}\n\nUltrasoundDirectionalTool.toolName = 'UltrasoundDirectionalTool';\nexport default UltrasoundDirectionalTool;\n","import { vec3, vec2 } from 'gl-matrix';\n\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n  cache,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\n\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRedactionRect as drawRedactionRectSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport { EventTypes, SVGDrawingHelper } from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { VideoRedactionAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nclass VideoRedactionTool extends AnnotationTool {\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportUIDsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  _configuration: any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(toolConfiguration = {}) {\n    super(toolConfiguration, {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: { shadow: true, preventHandleOutsideImage: false },\n    });\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): VideoRedactionAnnotation => {\n    const eventData = evt.detail;\n    const { currentPoints, element } = eventData;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation = {\n      metadata: {\n        // We probably just want a different type of data here, hacking this\n        // together for now.\n        viewPlaneNormal: <Types.Point3>[0, 0, 1],\n        viewUp: <Types.Point3>[0, 1, 0],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId,\n        toolName: this.getToolName(),\n      },\n      data: {\n        invalidated: true,\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        active: true,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    return annotation;\n  };\n\n  getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n      const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n\n      const near =\n        vec2.distance(canvasCoords, <vec2>toolDataCanvasCoordinate) < proximity;\n\n      if (near === true) {\n        data.handles.activeHandleIndex = i;\n        return point;\n      }\n    }\n\n    data.handles.activeHandleIndex = null;\n  };\n\n  isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasPoint1 = viewport.worldToCanvas(points[0]);\n    const canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    const rect = this._getRectangleImageCoordinates([\n      canvasPoint1,\n      canvasPoint2,\n    ]);\n\n    const point = [canvasCoords[0], canvasCoords[1]] as Types.Point2;\n    const { left, top, width, height } = rect;\n\n    const distanceToPoint = rectangle.distanceToPoint(\n      [left, top, width, height],\n      point\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n  };\n\n  toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { data } = annotation;\n\n    data.active = true;\n\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt,\n    annotation,\n    handle,\n    interactionType = 'mouse'\n  ) => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const { data } = annotation;\n\n    data.active = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if (handle.worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n      handleIndex,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    evt.preventDefault();\n  };\n\n  _mouseUpCallback = (evt) => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.active = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n  };\n\n  _mouseDragCallback = (evt) => {\n    this.isDrawing = true;\n\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { annotation, viewportUIDsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    if (handleIndex === undefined) {\n      // Moving tool, so move all points by the world points delta\n      const { deltaPoints } = eventData;\n      const worldPosDelta = deltaPoints.world;\n\n      const { points } = data.handles;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      data.invalidated = true;\n    } else {\n      // Moving handle.\n      const { currentPoints } = eventData;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n\n      const { points } = data.handles;\n\n      // Move this handle.\n      points[handleIndex] = [...worldPos];\n\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          // Moving bottomLeft or topRight\n\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n\n          break;\n        case 1:\n        case 2:\n          // Moving bottomRight or topLeft\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n\n          bottomLeftCanvas = <Types.Point2>[\n            topLeftCanvas[0],\n            bottomRightCanvas[1],\n          ];\n          topRightCanvas = <Types.Point2>[\n            bottomRightCanvas[0],\n            topLeftCanvas[1],\n          ];\n\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n\n          break;\n      }\n      data.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n  };\n\n  cancel(element) {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportUIDsToRender } = this.editData;\n\n    const { data } = annotation;\n\n    data.active = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    this.editData = null;\n    return annotation.metadata.annotationUID;\n  }\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Remove event handlers for the modify event loop, and enable default event propagation.\n   */\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i];\n      const { annotationUID } = annotation;\n      const toolMetadata = annotation.metadata;\n\n      const data = annotation.data;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        // !isToolDataLocked(toolData) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const rectangleUID = '0';\n      drawRedactionRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color: 'black',\n          lineDash,\n          lineWidth,\n        }\n      );\n    }\n  };\n\n  _getRectangleImageCoordinates = (\n    points: Array<Types.Point2>\n  ): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  } => {\n    const [point0, point1] = points;\n\n    return {\n      left: Math.min(point0[0], point1[0]),\n      top: Math.min(point0[1], point1[1]),\n      width: Math.abs(point0[0] - point1[0]),\n      height: Math.abs(point0[1] - point1[1]),\n    };\n  };\n\n  _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n    let imageVolume, viewport;\n    if (targetUID.startsWith('stackTarget')) {\n      const coloneIndex = targetUID.indexOf(':');\n      const viewportUID = targetUID.substring(coloneIndex + 1);\n      const viewport = renderingEngine.getViewport(viewportUID);\n      imageVolume = viewport.getImageData();\n    } else {\n      imageVolume = cache.getVolume(targetUID);\n    }\n\n    return { imageVolume, viewport };\n  }\n\n  /**\n   * _calculateCachedStats - For each volume in the frame of reference that a\n   * tool instance in particular viewport defines as its target volume, find the\n   * volume coordinates (i,j,k) being probed by the two corners. One of i,j or k\n   * will be constant across the two points. In the other two directions iterate\n   * over the voxels and calculate the first and second-order statistics.\n   *\n   * @param {object} data - The toolData tool-specific data.\n   * @param {Array<number>} viewPlaneNormal The normal vector of the camera.\n   * @param {Array<number>} viewUp The viewUp vector of the camera.\n   */\n  _calculateCachedStats = (\n    annotation,\n    viewPlaneNormal,\n    viewUp,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const { data } = annotation;\n    const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[3];\n    const { cachedStats } = data;\n\n    const targetUIDs = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetUIDs.length; i++) {\n      const targetUID = targetUIDs[i];\n\n      const { imageVolume } = this._getImageVolumeFromTargetUID(\n        targetUID,\n        renderingEngine\n      );\n\n      const {\n        dimensions,\n        scalarData,\n        vtkImageData: imageData,\n        metadata,\n      } = imageVolume;\n      const worldPos1Index = vec3.fromValues(0, 0, 0);\n      const worldPos2Index = vec3.fromValues(0, 0, 0);\n\n      imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        // Calculate index bounds to iterate over\n\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n\n        const area = worldWidth * worldHeight;\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n\n        const yMultiple = dimensions[0];\n        const zMultiple = dimensions[0] * dimensions[1];\n\n        // This is a triple loop, but one of these 3 values will be constant\n        // In the planar view.\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              count++;\n              mean += value;\n            }\n          }\n        }\n\n        mean /= count;\n\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              const valueMinusMean = value - mean;\n\n              stdDev += valueMinusMean * valueMinusMean;\n            }\n          }\n        }\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        cachedStats[targetUID] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          stdDev,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetUID] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    data.invalidated = false;\n\n    // Dispatching measurement modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail = {\n      annotation,\n      viewportUID,\n      renderingEngineUID,\n      sceneUID: sceneUID,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n\n  _getTargetStackUID(viewport) {\n    return `stackTarget:${viewport.uid}`;\n  }\n\n  _getTargetVolumeUID = (scene) => {\n    if (this.configuration.volumeUID) {\n      return this.configuration.volumeUID;\n    }\n\n    const volumeActors = scene.getVolumeActors();\n\n    if (!volumeActors && !volumeActors.length) {\n      // No stack to scroll through\n      return;\n    }\n\n    return volumeActors[0].uid;\n  };\n}\n\nVideoRedactionTool.toolName = 'VideoRedaction';\nexport default VideoRedactionTool;\n","import {\n  utilities,\n  getEnabledElement,\n  StackViewport,\n  cache,\n  VideoViewport,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport { Annotation, Annotations, SVGDrawingHelper } from '../../types';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationDisplayTool extends BaseTool {\n  static toolName;\n\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  /**\n   * @abstract renderAnnotation it used to draw the tool's annotation in each\n   * request animation frame\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  abstract renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  );\n\n  /**\n   * @virtual Given the element and annotations which is an array of annotation, it\n   * filters the annotations array to only include the annotation based on the viewportType.\n   * If the viewport is StackViewport, it filters based on the current imageId of the viewport,\n   * if the viewport is volumeViewport, it only returns those that are within the\n   * same slice as the current rendered slice in the volume viewport.\n   * imageId as the enabledElement.\n   * @param element - The HTML element\n   * @param annotations - The annotations to filter (array of annotation)\n   * @returns The filtered annotations\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    return filterAnnotationsForDisplay(viewport, annotations);\n  }\n\n  /**\n   * On Image Calibration, take all the annotation from the AnnotationState manager,\n   * and invalidate them to force them to be re-rendered and their stats to be recalculated.\n   * Then use the old and new imageData (non-calibrated and calibrated) to calculate the\n   * new position for the annotations in the space of the new imageData.\n   *\n   * @param evt - The calibration event\n   *\n   */\n  public onImageSpacingCalibrated = (\n    evt: Types.EventTypes.ImageSpacingCalibratedEvent\n  ) => {\n    const { element, imageId } = evt.detail;\n\n    const imageURI = utilities.imageIdToURI(imageId);\n    const annotationManager = getAnnotationManager();\n    const framesOfReference = annotationManager.getFramesOfReference();\n\n    // For each frame Of Reference\n    framesOfReference.forEach((frameOfReference) => {\n      const frameOfReferenceSpecificAnnotations =\n        annotationManager.getAnnotations(frameOfReference);\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[this.getToolName()];\n\n      if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n        return;\n      }\n\n      // for this specific tool\n      toolSpecificAnnotations.forEach((annotation) => {\n        if (!annotation.metadata?.referencedImageId) {\n          return;\n        }\n\n        // if the annotation is drawn on the same imageId\n        const referencedImageURI = utilities.imageIdToURI(\n          annotation.metadata.referencedImageId\n        );\n\n        if (referencedImageURI === imageURI) {\n          // make them invalid since the image has been calibrated so that\n          // we can update the cachedStats and also rendering\n          annotation.invalidated = true;\n          annotation.data.cachedStats = {};\n        }\n      });\n      triggerAnnotationRender(element);\n    });\n  };\n\n  protected getReferencedImageId(\n    viewport: Types.IViewport,\n    worldPos: Types.Point3,\n    viewPlaneNormal: Types.Point3,\n    viewUp: Types.Point3\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else if (viewport instanceof VideoViewport) {\n      referencedImageId = targetId.split('videoId:')[1];\n    } else {\n      const volumeId = utilities.getVolumeId(targetId);\n      const imageVolume = cache.getVolume(volumeId);\n\n      referencedImageId = utilities.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    return referencedImageId;\n  }\n\n  /**\n   * It takes the property (color, lineDash, etc.) and based on the state of the\n   * annotation (selected, highlighted etc.) it returns the appropriate value\n   * based on the central toolStyle settings for each level of specification.\n   * @param property - The name of the style property to get.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns The value of the property.\n   */\n  public getStyle(\n    property: string,\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): unknown {\n    return getStyleProperty(\n      property,\n      specifications,\n      getState(annotation),\n      this.mode\n    );\n  }\n}\n\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import { utilities, BaseVolumeViewport } from '@cornerstonejs/core';\nimport { Types } from '@cornerstonejs/core';\nimport ToolModes from '../../enums/ToolModes';\nimport StrategyCallbacks from '../../enums/StrategyCallbacks';\nimport { InteractionTypes, ToolProps, PublicToolProps } from '../../types';\n\nexport interface IBaseTool {\n  /** ToolGroup ID the tool instance belongs to */\n  toolGroupId: string;\n  /** Tool supported interaction types */\n  supportedInteractionTypes: InteractionTypes[];\n  /** Tool Mode : Active, Passive, Enabled, Disabled */\n  mode: ToolModes;\n  /** Tool Configuration */\n  configuration: {\n    preventHandleOutsideImage?: boolean;\n    strategies?: Record<string, any>;\n    defaultStrategy?: string;\n    activeStrategy?: string;\n    strategyOptions?: Record<string, unknown>;\n  };\n}\n\n/**\n * Abstract base class from which all tools derive.\n * Deals with cleanly merging custom and default configuration, and strategy\n * application.\n */\nabstract class BaseTool implements IBaseTool {\n  static toolName;\n  /** Supported Interaction Types - currently only Mouse */\n  public supportedInteractionTypes: InteractionTypes[];\n  public configuration: Record<string, any>;\n  /** ToolGroup ID the tool instance belongs to */\n  public toolGroupId: string;\n  /** Tool Mode - Active/Passive/Enabled/Disabled/ */\n  public mode: ToolModes;\n\n  constructor(toolProps: PublicToolProps, defaultToolProps: ToolProps) {\n    const initialProps = utilities.deepMerge(defaultToolProps, toolProps);\n\n    const {\n      configuration = {},\n      supportedInteractionTypes,\n      toolGroupId,\n    } = initialProps;\n\n    // If strategies are not initialized in the tool config\n    if (!configuration.strategies) {\n      configuration.strategies = {};\n      configuration.defaultStrategy = undefined;\n      configuration.activeStrategy = undefined;\n      configuration.strategyOptions = {};\n    }\n\n    this.toolGroupId = toolGroupId;\n    this.supportedInteractionTypes = supportedInteractionTypes || [];\n    this.configuration = Object.assign({}, configuration);\n    this.mode = ToolModes.Disabled;\n  }\n\n  /**\n   * Returns the name of the tool\n   * @returns The name of the tool.\n   */\n  public getToolName(): string {\n    // Since toolName is static we get it from the class constructor\n    return (<typeof BaseTool>this.constructor).toolName;\n  }\n\n  /**\n   * Applies the active strategy function to the enabled element with the specified\n   * operation data.\n   * @param enabledElement - The element that is being operated on.\n   * @param operationData - The data that needs to be passed to the strategy.\n   * @returns The result of the strategy.\n   */\n  public applyActiveStrategy(\n    enabledElement: Types.IEnabledElement,\n    operationData: unknown\n  ): any {\n    const { strategies, activeStrategy } = this.configuration;\n    return strategies[activeStrategy]?.call(\n      this,\n      enabledElement,\n      operationData\n    );\n  }\n\n  /**\n   * Applies the active strategy, with a given event type being applied.\n   * The event type function is found by indexing it on the active strategy\n   * function.\n   *\n   * @param enabledElement - The element that is being operated on.\n   * @param operationData - The data that needs to be passed to the strategy.\n   * @param callbackType - the type of the callback\n   *\n   * @returns The result of the strategy.\n   */\n  public applyActiveStrategyCallback(\n    enabledElement: Types.IEnabledElement,\n    operationData: unknown,\n    callbackType: StrategyCallbacks | string\n  ): any {\n    const { strategies, activeStrategy } = this.configuration;\n\n    if (!strategies[activeStrategy]) {\n      throw new Error(\n        `applyActiveStrategyCallback: active strategy ${activeStrategy} not found, check tool configuration or spellings`\n      );\n    }\n\n    return strategies[activeStrategy][callbackType]?.call(\n      this,\n      enabledElement,\n      operationData\n    );\n  }\n\n  /**\n   * merges the new configuration with the tool configuration\n   * @param configuration - toolConfiguration\n   */\n  public setConfiguration(newConfiguration: Record<string, any>): void {\n    this.configuration = utilities.deepMerge(\n      this.configuration,\n      newConfiguration\n    );\n  }\n\n  /**\n   * Sets the active strategy for a tool. Strategies are\n   * multiple implementations of tool behavior that can be switched by tool\n   * configuration.\n   *\n   * @param strategyName - name of the strategy to be set as active\n   */\n  public setActiveStrategy(strategyName: string): void {\n    this.setConfiguration({ activeStrategy: strategyName });\n  }\n\n  /**\n   * Returns the volumeId for the volume viewport. It will grabbed the volumeId\n   * from the volumeId if particularly specified in the tool configuration, or if\n   * not, the first actorUID in the viewport is returned as the volumeId. NOTE: for\n   * segmentations, actorUID is not necessarily the volumeId since the segmentation\n   * can have multiple representations, use segmentation helpers to get the volumeId\n   * based on the actorUID.\n   *\n   * @param viewport - Volume viewport\n   * @returns the volumeId for the viewport if specified in the tool configuration,\n   * or the first actorUID in the viewport if not.\n   */\n  private getTargetVolumeId(viewport: Types.IViewport): string | undefined {\n    if (this.configuration.volumeId) {\n      return this.configuration.volumeId;\n    }\n\n    // If volume not specified, then return the actorUID for the\n    // default actor - first actor\n    const actorEntries = viewport.getActors();\n\n    if (!actorEntries) {\n      return;\n    }\n\n    // find the first image actor of instance type vtkVolume\n    return actorEntries.find(\n      (actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume'\n    )?.uid;\n  }\n\n  /**\n   * Get the image that is displayed for the targetId in the cachedStats\n   * which can be\n   * * imageId:<imageId>\n   * * volumeId:<volumeId>\n   * * videoId:<basePathForVideo>/frames/<frameSpecifier>\n   *\n   * @param targetId - annotation targetId stored in the cached stats\n   * @param renderingEngine - The rendering engine\n   * @returns The image data for the target.\n   */\n  protected getTargetIdImage(\n    targetId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): Types.IImageData | Types.CPUIImageData | Types.IImageVolume {\n    if (targetId.startsWith('imageId:')) {\n      const imageId = targetId.split('imageId:')[1];\n      const imageURI = utilities.imageIdToURI(imageId);\n      let viewports = utilities.getViewportsWithImageURI(\n        imageURI,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      viewports = viewports.filter((viewport) => {\n        return viewport.getCurrentImageId() === imageId;\n      });\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('volumeId:')) {\n      const volumeId = utilities.getVolumeId(targetId);\n      const viewports = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('videoId:')) {\n      // Video id can be multi-valued for the frame information\n      const imageURI = utilities.imageIdToURI(targetId);\n      const viewports = utilities.getViewportsWithImageURI(\n        imageURI,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else {\n      throw new Error(\n        'getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"'\n      );\n    }\n  }\n\n  /**\n   * Get the target Id for the viewport which will be used to store the cached\n   * statistics scoped to that target in the annotations.\n   * For StackViewport, targetId is the viewportId, but for the volume viewport,\n   * the targetId will be grabbed from the volumeId if particularly specified\n   * in the tool configuration, or if not, the first actorUID in the viewport.\n   *\n   * @param viewport - viewport to get the targetId for\n   * @returns targetId\n   */\n  protected getTargetId(viewport: Types.IViewport): string | undefined {\n    const targetId = viewport.getReferenceId?.();\n    if (targetId) {\n      return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n      return `volumeId:${this.getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n  }\n}\n\n// Note: this is a workaround since terser plugin does not support static blocks\n// yet and we can't easily say static toolName = \"BaseTool\" in the class definition.\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\n\nimport {\n  cache,\n  getEnabledElementByIds,\n  StackViewport,\n  Types,\n  VolumeViewport,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport type {\n  LabelmapConfig,\n  LabelmapRenderingConfig,\n  LabelmapSegmentationData,\n} from '../../../types/LabelmapTypes';\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\n\nimport addLabelmapToElement from './addLabelmapToElement';\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\nimport { isVolumeSegmentation } from '../../segmentation/strategies/utils/stackVolumeCheck';\nimport { polySeg } from '../../../stateManagement/segmentation';\n\nconst MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\n\nfunction getRepresentationRenderingConfig() {\n  const cfun = vtkColorTransferFunction.newInstance();\n  const ofun = vtkPiecewiseFunction.newInstance();\n  ofun.addPoint(0, 0);\n  return {\n    ofun,\n    cfun,\n  };\n}\n\nlet polySegConversionInProgress = false;\n\n/**\n * For each viewport, and for each segmentation, set the segmentation for the viewport's enabled element\n * Initializes the global and viewport specific state for the segmentation in the\n * SegmentationStateManager.\n * @param toolGroup - the tool group that contains the viewports\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param renderImmediate - If true, there will be a render call after the labelmap is removed\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeLabelmapFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * Checks if a segmentation data have the same frameOfReference as the series\n * displayed in a given viewport\n * @param viewport\n * @param referencedVolumeId volume id of the segmentation reference series\n * @returns\n */\nfunction isSameFrameOfReference(viewport, referencedVolumeId) {\n  // if the referencedVolumeId is not defined, we acted as before to not break\n  // applications as referencedVolumeId is inserted in this change\n  // Can modify that in the future commits\n  if (!referencedVolumeId) {\n    return true;\n  }\n  const defaultActor = viewport.getDefaultActor();\n  if (!defaultActor) {\n    return false;\n  }\n  const { uid: defaultActorUID } = defaultActor;\n  const volume = cache.getVolume(defaultActorUID);\n\n  if (volume) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (\n      referencedVolume &&\n      volume.metadata.FrameOfReferenceUID ===\n        referencedVolume.metadata.FrameOfReferenceUID\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * It takes the enabled element, the segmentation Id, and the configuration, and\n * it sets the segmentation for the enabled element as a labelmap\n * @param enabledElement - The cornerstone enabled element\n * @param segmentationId - The id of the segmentation to be rendered.\n * @param configuration - The configuration object for the labelmap.\n */\nasync function render(\n  viewport: Types.IVolumeViewport | Types.IStackViewport,\n  representation: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const {\n    colorLUTIndex,\n    active,\n    segmentationId,\n    segmentationRepresentationUID,\n    segmentsHidden,\n    config: renderingConfig,\n  } = representation;\n\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    console.warn('No segmentation found for segmentationId: ', segmentationId);\n    return;\n  }\n\n  let labelmapData = segmentation.representationData[Representations.Labelmap];\n\n  let actorEntry = viewport.getActor(segmentationRepresentationUID);\n\n  if (\n    !labelmapData &&\n    polySeg.canComputeRequestedRepresentation(segmentationRepresentationUID) &&\n    !polySegConversionInProgress\n  ) {\n    // meaning the requested segmentation representationUID does not have\n    // labelmap data, BUT we might be able to request a conversion from\n    // another representation to labelmap\n    // we need to check if we can request polySEG to convert the other\n    // underlying representations to Surface\n    polySegConversionInProgress = true;\n\n    labelmapData = await polySeg.computeAndAddLabelmapRepresentation(\n      segmentationId,\n      {\n        segmentationRepresentationUID,\n        viewport,\n      }\n    );\n\n    if (!labelmapData) {\n      throw new Error(\n        `No labelmap data found for segmentationId ${segmentationId}.`\n      );\n    }\n\n    polySegConversionInProgress = false;\n  }\n\n  if (!labelmapData) {\n    return;\n  }\n\n  if (isVolumeSegmentation(labelmapData, viewport)) {\n    if (viewport instanceof StackViewport) {\n      return;\n    }\n\n    const { volumeId: labelmapUID } = labelmapData;\n\n    const labelmap = cache.getVolume(labelmapUID);\n\n    if (!labelmap) {\n      throw new Error(`No Labelmap found for volumeId: ${labelmapUID}`);\n    }\n\n    if (!isSameFrameOfReference(viewport, labelmapData?.referencedVolumeId)) {\n      return;\n    }\n\n    if (!actorEntry) {\n      // only add the labelmap to ToolGroup viewports if it is not already added\n      await _addLabelmapToViewport(\n        viewport,\n        labelmapData,\n        segmentationRepresentationUID\n      );\n    }\n\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  } else {\n    if (viewport instanceof VolumeViewport) {\n      return;\n    }\n\n    // stack segmentation\n    const imageId = viewport.getCurrentImageId();\n    const { imageIdReferenceMap } = labelmapData;\n\n    // if the stack labelmap is not built for the current imageId that is\n    // rendered at the viewport then return\n    if (!imageIdReferenceMap.has(imageId)) {\n      return;\n    }\n\n    if (!actorEntry) {\n      // only add the labelmap to ToolGroup viewports if it is not already added\n      await _addLabelmapToViewport(\n        viewport,\n        labelmapData,\n        segmentationRepresentationUID\n      );\n    }\n\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  }\n\n  if (!actorEntry) {\n    return;\n  }\n\n  const { cfun, ofun } = renderingConfig as LabelmapRenderingConfig;\n\n  const renderInactiveSegmentations =\n    toolGroupConfig.renderInactiveSegmentations;\n\n  _setLabelmapColorAndOpacity(\n    viewport.id,\n    actorEntry,\n    cfun,\n    ofun,\n    colorLUTIndex,\n    toolGroupConfig.representations[Representations.Labelmap],\n    representation,\n    active,\n    renderInactiveSegmentations,\n    segmentsHidden\n  );\n}\n\nfunction _setLabelmapColorAndOpacity(\n  viewportId: string,\n  actorEntry: Types.ActorEntry,\n  cfun: vtkColorTransferFunction,\n  ofun: vtkPiecewiseFunction,\n  colorLUTIndex: number,\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  isActiveLabelmap: boolean,\n  renderInactiveSegmentations: boolean,\n  segmentsHidden: Set<number>\n): void {\n  const { segmentSpecificConfig, segmentationRepresentationSpecificConfig } =\n    segmentationRepresentation;\n\n  const segmentationRepresentationLabelmapConfig =\n    segmentationRepresentationSpecificConfig[Representations.Labelmap];\n\n  // Note: MAX_NUMBER_COLORS = 256 is needed because the current method to generate\n  // the default color table uses RGB.\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  const numColors = Math.min(256, colorLUT.length);\n  const { uid: actorUID } = actorEntry;\n\n  // Note: right now outlineWidth and renderOutline are not configurable\n  // at the segment level, so we don't need to check for segment specific\n  // configuration in the loop, Todo: make them configurable at the segment level\n  const { outlineWidth, renderOutline, outlineOpacity } = _getLabelmapConfig(\n    toolGroupLabelmapConfig,\n    segmentationRepresentationLabelmapConfig,\n    isActiveLabelmap\n  );\n\n  // Todo: the below loop probably can be optimized so that we don't hit it\n  // unless a config has changed. Right now we get into the following loop\n  // even for brush drawing which does not makes sense\n  for (let i = 0; i < numColors; i++) {\n    const segmentIndex = i;\n    const segmentColor = colorLUT[segmentIndex];\n\n    const segmentSpecificLabelmapConfig =\n      segmentSpecificConfig[segmentIndex]?.[Representations.Labelmap];\n\n    const { fillAlpha, outlineWidth, renderFill, renderOutline } =\n      _getLabelmapConfig(\n        toolGroupLabelmapConfig,\n        segmentationRepresentationLabelmapConfig,\n        isActiveLabelmap,\n        segmentSpecificLabelmapConfig\n      );\n\n    const { forceOpacityUpdate, forceColorUpdate } =\n      _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, {\n        fillAlpha,\n        renderFill,\n        renderOutline,\n        segmentColor,\n        outlineWidth,\n        segmentsHidden,\n      });\n\n    if (forceColorUpdate) {\n      cfun.addRGBPoint(\n        segmentIndex,\n        segmentColor[0] / MAX_NUMBER_COLORS,\n        segmentColor[1] / MAX_NUMBER_COLORS,\n        segmentColor[2] / MAX_NUMBER_COLORS\n      );\n    }\n\n    if (forceOpacityUpdate) {\n      if (renderFill) {\n        const segmentOpacity = segmentsHidden.has(segmentIndex)\n          ? 0\n          : (segmentColor[3] / 255) * fillAlpha;\n\n        ofun.removePoint(segmentIndex);\n        ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n      } else {\n        ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n      }\n    }\n  }\n\n  const actor = actorEntry.actor as Types.VolumeActor;\n\n  actor.getProperty().setRGBTransferFunction(0, cfun);\n\n  ofun.setClamping(false);\n\n  actor.getProperty().setScalarOpacity(0, ofun);\n  actor.getProperty().setInterpolationTypeToNearest();\n  actor.getProperty().setUseLabelOutline(renderOutline);\n\n  // @ts-ignore - fix type in vtk\n  actor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n\n  const { activeSegmentIndex } = SegmentationState.getSegmentation(\n    segmentationRepresentation.segmentationId\n  );\n\n  // create an array that contains all the segment indices and for the active\n  // segment index, use the activeSegmentOutlineWidthDelta, otherwise use the\n  // outlineWidth\n  // Pre-allocate the array with the required size to avoid dynamic resizing.\n  const outlineWidths = new Array(numColors - 1);\n\n  for (let i = 1; i < numColors; i++) {\n    // Start from 1 to skip the background segment index.\n    const isHidden = segmentsHidden.has(i);\n\n    if (isHidden) {\n      outlineWidths[i - 1] = 0;\n      continue;\n    }\n\n    outlineWidths[i - 1] =\n      i === activeSegmentIndex\n        ? outlineWidth + toolGroupLabelmapConfig.activeSegmentOutlineWidthDelta\n        : outlineWidth;\n  }\n\n  actor.getProperty().setLabelOutlineThickness(outlineWidths);\n\n  // Set visibility based on whether actor visibility is specifically asked\n  // to be turned on/off (on by default) AND whether is is in active but\n  // we are rendering inactive labelmap\n  const visible = isActiveLabelmap || renderInactiveSegmentations;\n  actor.setVisibility(visible);\n}\n\nfunction _getLabelmapConfig(\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentationLabelmapConfig: LabelmapConfig,\n  isActiveLabelmap: boolean,\n  segmentsLabelmapConfig?: LabelmapConfig\n) {\n  const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n\n  const configToUse = {\n    ...toolGroupLabelmapConfig,\n    ...segmentationRepresentationLabelmapConfig,\n    ...segmentLabelmapConfig,\n  };\n\n  const fillAlpha = isActiveLabelmap\n    ? configToUse.fillAlpha\n    : configToUse.fillAlphaInactive;\n  const outlineWidth = isActiveLabelmap\n    ? configToUse.outlineWidthActive\n    : configToUse.outlineWidthInactive;\n\n  const renderFill = isActiveLabelmap\n    ? configToUse.renderFill\n    : configToUse.renderFillInactive;\n\n  const renderOutline = configToUse.renderOutline;\n\n  const outlineOpacity = isActiveLabelmap\n    ? configToUse.outlineOpacity\n    : configToUse.outlineOpacityInactive;\n\n  return {\n    fillAlpha,\n    outlineWidth,\n    renderFill,\n    renderOutline,\n    outlineOpacity,\n  };\n}\n\nfunction _needsTransferFunctionUpdate(\n  viewportId: string,\n  actorUID: string,\n  segmentIndex: number,\n  {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    segmentColor,\n    outlineWidth,\n    segmentsHidden,\n  }: {\n    fillAlpha: number;\n    renderFill: boolean;\n    renderOutline: boolean;\n    outlineWidth: number;\n    segmentColor: number[];\n    segmentsHidden: Set<number>;\n  }\n) {\n  const cacheUID = `${viewportId}-${actorUID}-${segmentIndex}`;\n  const oldConfig = labelMapConfigCache.get(cacheUID);\n\n  if (!oldConfig) {\n    labelMapConfigCache.set(cacheUID, {\n      fillAlpha,\n      renderFill,\n      renderOutline,\n      outlineWidth,\n      segmentColor: segmentColor.slice(), // Create a copy\n      segmentsHidden: new Set(segmentsHidden), // Create a copy\n    });\n\n    return {\n      forceOpacityUpdate: true,\n      forceColorUpdate: true,\n    };\n  }\n\n  const {\n    fillAlpha: oldFillAlpha,\n    renderFill: oldRenderFill,\n    renderOutline: oldRenderOutline,\n    outlineWidth: oldOutlineWidth,\n    segmentColor: oldSegmentColor,\n    segmentsHidden: oldSegmentsHidden,\n  } = oldConfig;\n\n  const forceColorUpdate =\n    oldSegmentColor[0] !== segmentColor[0] ||\n    oldSegmentColor[1] !== segmentColor[1] ||\n    oldSegmentColor[2] !== segmentColor[2];\n\n  const forceOpacityUpdate =\n    oldSegmentColor[3] !== segmentColor[3] ||\n    oldFillAlpha !== fillAlpha ||\n    oldRenderFill !== renderFill ||\n    oldRenderOutline !== renderOutline ||\n    oldOutlineWidth !== outlineWidth ||\n    oldSegmentsHidden.has(segmentIndex) !== segmentsHidden.has(segmentIndex);\n\n  // update the cache\n  labelMapConfigCache.set(cacheUID, {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    outlineWidth,\n    segmentColor: segmentColor.slice(), // Create a copy\n    segmentsHidden: new Set(segmentsHidden), // Create a copy\n  });\n\n  return {\n    forceOpacityUpdate,\n    forceColorUpdate,\n  };\n}\n\nfunction _removeLabelmapFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeLabelmapFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nasync function _addLabelmapToViewport(\n  viewport: Types.IVolumeViewport | Types.IStackViewport,\n  labelmapData: LabelmapSegmentationData,\n  segmentationRepresentationUID\n): Promise<void> {\n  await addLabelmapToElement(\n    viewport.element,\n    labelmapData,\n    segmentationRepresentationUID\n  );\n}\n\nexport default {\n  getRepresentationRenderingConfig,\n  render,\n  removeSegmentationRepresentation,\n};\n\nexport {\n  getRepresentationRenderingConfig,\n  render,\n  removeSegmentationRepresentation,\n};\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * This tool is exactly the RectangleROITool but only draws a rectangle on the image,\n * and by using utility functions such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. This tool, however, does not calculate the statistics\n * as RectangleROITool does.\n */\nclass RectangleROIThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const targetId = this.getTargetId(viewport);\n    let referencedImageId, volumeId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else {\n      volumeId = csUtils.getVolumeId(targetId);\n      const imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    // Todo: how not to store enabledElement on the annotation, segmentationModule needs the element to\n    // decide on the active segmentIndex, active segmentationIndex etc.\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n      },\n      data: {\n        label: '',\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        segmentationId: null,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * it is used to draw the RectangleROI Threshold annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      // Todo: This is not correct way to add the event trigger,\n      // this will trigger on all mouse hover too. Problem is that we don't\n      // have a cached stats mechanism for this tool yet?\n      triggerAnnotationModified(annotation, element);\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n}\n\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  metaData,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\n\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIStartEndThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { pointInShapeCallback } from '../../utilities/';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * This tool is similar to the RectangleROIThresholdTool which\n * only draws a rectangle on the image, and by using utility functions\n * such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. The only difference is that it only acts on the\n * acquisition plane and not the 3D volume, and accepts a start and end\n * slice, and renders a dashed rectangle on the image between the start and end\n * but a solid rectangle on start and end slice. Utility functions should be used\n * to modify the start and end slice.\n * // Todo: right now only the first slice has grabbable handles, need to make\n * // it so that the handles are grabbable on all slices.\n */\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        numSlicesToPropagate: 10,\n        computePointsInsideVolume: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStatsTool,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    let referencedImageId, imageVolume, volumeId;\n    if (viewport instanceof StackViewport) {\n      throw new Error('Stack Viewport Not implemented');\n    } else {\n      const targetId = this.getTargetId(viewport);\n      volumeId = csUtils.getVolumeId(targetId);\n      imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    if (!referencedImageId) {\n      throw new Error('This tool does not work on non-acquisition planes');\n    }\n\n    const startIndex = viewport.getCurrentImageIdIndex();\n    const spacingInNormal = csUtils.getSpacingInNormalDirection(\n      imageVolume,\n      viewPlaneNormal\n    );\n\n    // We cannot simply add numSlicesToPropagate to startIndex because\n    // the order of imageIds can be from top to bottom or bottom to top and\n    // we want to make sure it is always propagated in the direction of the\n    // view and also to make sure we don't go out of bounds.\n    const endIndex = this._getEndSliceIndex(\n      imageVolume,\n      worldPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n        spacingInNormal,\n      },\n      data: {\n        label: '',\n        startSlice: startIndex,\n        endSlice: endIndex,\n        cachedStats: {\n          pointsInVolume: [],\n          projectionPoints: [],\n          projectionPointsImageIds: [referencedImageId],\n        },\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        labelmapUID: null,\n      },\n    };\n\n    // update the projection points in 3D space, since we are projecting\n    // the points to the slice plane, we need to make sure the points are\n    // computed for later export\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    const targetId = this.getTargetId(enabledElement.viewport);\n    const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n\n    if (this.configuration.calculatePointsInsideVolume) {\n      this._computePointsInsideVolume(annotation, imageVolume, enabledElement);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      enabledElement.renderingEngine,\n      viewportIdsToRender\n    );\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n  };\n\n  // Todo: make it work for planes other than acquisition planes\n  _computeProjectionPoints(\n    annotation: RectangleROIStartEndThresholdAnnotation,\n    imageVolume: Types.IImageVolume\n  ): void {\n    const { data, metadata } = annotation;\n    const { viewPlaneNormal, spacingInNormal } = metadata;\n    const { imageData } = imageVolume;\n    const { startSlice, endSlice } = data;\n    const { points } = data.handles;\n\n    const startIJK = transformWorldToIndex(imageData, points[0]);\n\n    if (startIJK[2] !== startSlice) {\n      throw new Error('Start slice does not match');\n    }\n\n    // substitute the end slice index 2 with startIJK index 2\n    const endIJK = vec3.fromValues(startIJK[0], startIJK[1], endSlice);\n\n    const startWorld = vec3.create();\n    imageData.indexToWorldVec3(startIJK, startWorld);\n\n    const endWorld = vec3.create();\n    imageData.indexToWorldVec3(endIJK, endWorld);\n\n    // distance between start and end slice in the world coordinate\n    const distance = vec3.distance(startWorld, endWorld);\n\n    // for each point inside points, navigate in the direction of the viewPlaneNormal\n    // with amount of spacingInNormal, and calculate the next slice until we reach the distance\n    const newProjectionPoints = [];\n    for (let dist = 0; dist < distance; dist += spacingInNormal) {\n      newProjectionPoints.push(\n        points.map((point) => {\n          const newPoint = vec3.create();\n          vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n          return Array.from(newPoint);\n        })\n      );\n    }\n\n    data.cachedStats.projectionPoints = newProjectionPoints;\n\n    // Find the imageIds for the projection points\n    const projectionPointsImageIds = [];\n    for (const RectanglePoints of newProjectionPoints) {\n      const imageId = csUtils.getClosestImageId(\n        imageVolume,\n        RectanglePoints[0],\n        viewPlaneNormal\n      );\n      projectionPointsImageIds.push(imageId);\n    }\n\n    data.cachedStats.projectionPointsImageIds = projectionPointsImageIds;\n  }\n\n  //This function return all the points inside the ROI for every slices between startSlice and endSlice\n  _computePointsInsideVolume(annotation, imageVolume, enabledElement) {\n    const { data } = annotation;\n    const projectionPoints = data.cachedStats.projectionPoints;\n\n    const pointsInsideVolume: Types.Point3[][] = [[]];\n\n    for (let i = 0; i < projectionPoints.length; i++) {\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!imageVolume) {\n        continue;\n      }\n\n      const projectionPoint = projectionPoints[i][0];\n\n      const worldPos1 = data.handles.points[0];\n      const worldPos2 = data.handles.points[3];\n\n      const { dimensions, imageData } = imageVolume;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n      //We only need to change the Z of our bounds so we are getting the Z from the current projection point\n      const worldProjectionPointIndex = transformWorldToIndex(\n        imageData,\n        projectionPoint\n      );\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldProjectionPointIndex[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldProjectionPointIndex[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          () => true,\n          null,\n          boundsIJK\n        );\n\n        //@ts-ignore\n        pointsInsideVolume.push(pointsInShape);\n      }\n    }\n    data.cachedStats.pointsInVolume = pointsInsideVolume;\n  }\n\n  _calculateCachedStatsTool(annotation, enabledElement) {\n    const data = annotation.data;\n    const { viewport } = enabledElement;\n\n    const { cachedStats } = data;\n    const targetId = this.getTargetId(viewport);\n    const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n\n    // Todo: this shouldn't be here, this is a performance issue\n    // Since we are extending the RectangleROI class, we need to\n    // bring the logic for handle to some cachedStats calculation\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    triggerAnnotationModified(annotation, viewport.element);\n\n    return cachedStats;\n  }\n\n  /**\n   * it is used to draw the rectangleROIStartEnd annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const sliceIndex = viewport.getCurrentImageIdIndex();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[\n        i\n      ] as RectangleROIStartEndThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { startSlice, endSlice } = data;\n      const { points, activeHandleIndex } = data.handles;\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      // range of slices to render based on the start and end slice, like\n      // np.arange\n\n      // if indexIJK is outside the start/end slice, we don't render\n      if (\n        sliceIndex < Math.min(startSlice, endSlice) ||\n        sliceIndex > Math.max(startSlice, endSlice)\n      ) {\n        continue;\n      }\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n\n      if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(annotation, enabledElement);\n      }\n\n      // if it is inside the start/end slice, but not exactly the first or\n      // last slice, we render the line in dash, but not the handles\n      let firstOrLastSlice = false;\n      if (sliceIndex === startSlice || sliceIndex === endSlice) {\n        firstOrLastSlice = true;\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null &&\n        firstOrLastSlice\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      let lineDashToUse = lineDash;\n\n      if (!firstOrLastSlice) {\n        lineDashToUse = 2;\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash: lineDashToUse,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  _getEndSliceIndex(\n    imageVolume: Types.IImageVolume,\n    worldPos: Types.Point3,\n    spacingInNormal: number,\n    viewPlaneNormal: Types.Point3\n  ): number | undefined {\n    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n\n    // get end position by moving from worldPos in the direction of viewplaneNormal\n    // with amount of numSlicesToPropagate * spacingInNormal\n    const endPos = vec3.create();\n    vec3.scaleAndAdd(\n      endPos,\n      worldPos,\n      viewPlaneNormal,\n      numSlicesToPropagate * spacingInNormal\n    );\n\n    const halfSpacingInNormalDirection = spacingInNormal / 2;\n    // Loop through imageIds of the imageVolume and find the one that is closest to endPos\n    const { imageIds } = imageVolume;\n    let imageIdIndex;\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n\n      const dir = vec3.create();\n      vec3.sub(dir, endPos, imagePositionPatient);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        imageIdIndex = i;\n      }\n    }\n\n    return imageIdIndex;\n  }\n}\n\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import {\n  utilities as csUtils,\n  cache,\n  getEnabledElement,\n  StackViewport,\n  eventTarget,\n  Enums,\n} from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\n\nimport type { Types } from '@cornerstonejs/core';\nimport type {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BaseTool } from '../base';\nimport {\n  fillInsideSphere,\n  thresholdInsideSphere,\n} from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport {\n  thresholdInsideCircle,\n  fillInsideCircle,\n} from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport {\n  Events,\n  ToolModes,\n  SegmentationRepresentations,\n  StrategyCallbacks,\n} from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  state as segmentationState,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\nimport {\n  LabelmapSegmentationDataVolume,\n  LabelmapSegmentationDataStack,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n\n/**\n * A type for preview data/information, used to setup previews on hover, or\n * maintain the preview information.\n */\nexport type PreviewData = {\n  /**\n   *  The preview data returned from the strategy\n   */\n  preview: unknown;\n  timer?: number;\n  timerStart: number;\n  startPoint: Types.Point2;\n  element: HTMLDivElement;\n  isDrag: boolean;\n};\n\n/**\n * @public\n */\nclass BrushTool extends BaseTool {\n  static toolName;\n  private _editData: {\n    segmentsLocked: number[]; //\n    segmentationRepresentationUID?: string;\n    imageIdReferenceMap?: Map<string, string>;\n    volumeId?: string;\n    referencedVolumeId?: string;\n  } | null;\n  private _hoverData?: {\n    brushCursor: any;\n    segmentationId: string;\n    segmentIndex: number;\n    segmentationRepresentationUID: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    centerCanvas?: Array<number>;\n  };\n\n  private _previewData?: PreviewData = {\n    preview: null,\n    element: null,\n    timerStart: 0,\n    timer: null,\n    startPoint: [NaN, NaN],\n    isDrag: false,\n  };\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE_CIRCLE: fillInsideCircle,\n          ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n          FILL_INSIDE_SPHERE: fillInsideSphere,\n          ERASE_INSIDE_SPHERE: eraseInsideSphere,\n          THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n          THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n        },\n        strategySpecificConfiguration: {\n          THRESHOLD: {\n            threshold: [-150, -70], // E.g. CT Fat // Only used during threshold strategies.\n          },\n        },\n        defaultStrategy: 'FILL_INSIDE_CIRCLE',\n        activeStrategy: 'FILL_INSIDE_CIRCLE',\n        thresholdVolumeId: null,\n        brushSize: 25,\n        preview: {\n          // Have to enable the preview to use this\n          enabled: false,\n          previewColors: {},\n          // The time before showing a preview\n          previewTimeMs: 250,\n          // The distance to move to show a preview before preview time expired\n          previewMoveDistance: 8,\n          // The distance to drag before being considered a drag rather than click\n          dragMoveDistance: 4,\n          // The time to consider a mouse click a drag when moved less than dragMoveDistance\n          dragTimeMs: 500,\n        },\n        actions: {\n          [StrategyCallbacks.AcceptPreview]: {\n            method: StrategyCallbacks.AcceptPreview,\n            bindings: [\n              {\n                key: 'Enter',\n              },\n            ],\n          },\n          [StrategyCallbacks.RejectPreview]: {\n            method: StrategyCallbacks.RejectPreview,\n            bindings: [\n              {\n                key: 'Escape',\n              },\n            ],\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolPassive = (evt) => {\n    this.disableCursor();\n  };\n\n  onSetToolEnabled = () => {\n    this.disableCursor();\n  };\n\n  onSetToolDisabled = (evt) => {\n    this.disableCursor();\n  };\n\n  private disableCursor() {\n    this._hoverData = undefined;\n    this.rejectPreview();\n  }\n\n  createEditData(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create a segmentation representation before using the brush tool'\n      );\n    }\n\n    const { segmentationId, type, segmentationRepresentationUID } =\n      activeSegmentationRepresentation;\n\n    if (type === SegmentationRepresentations.Contour) {\n      throw new Error('Not implemented yet');\n    }\n\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const { representationData } =\n      segmentationState.getSegmentation(segmentationId);\n\n    const labelmapData =\n      representationData[SegmentationRepresentations.Labelmap];\n\n    if (isVolumeSegmentation(labelmapData, viewport)) {\n      const { volumeId } = representationData[\n        type\n      ] as LabelmapSegmentationDataVolume;\n      const actors = viewport.getActors();\n\n      const isStackViewport = viewport instanceof StackViewport;\n\n      if (isStackViewport) {\n        const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n          detail: {\n            type: 'Segmentation',\n            message: 'Cannot perform brush operation on the selected viewport',\n          },\n          cancelable: true,\n        });\n        eventTarget.dispatchEvent(event);\n        return null;\n      }\n\n      // we used to take the first actor here but we should take the one that is\n      // probably the same size as the segmentation volume\n      const volumes = actors.map((actorEntry) =>\n        cache.getVolume(actorEntry.referenceId)\n      );\n\n      const segmentationVolume = cache.getVolume(volumeId);\n\n      const referencedVolumeIdToThreshold =\n        volumes.find((volume) =>\n          csUtils.isEqual(volume.dimensions, segmentationVolume.dimensions)\n        )?.volumeId || volumes[0]?.volumeId;\n\n      return {\n        volumeId,\n        referencedVolumeId:\n          this.configuration.thresholdVolumeId ?? referencedVolumeIdToThreshold,\n        segmentsLocked,\n        segmentationRepresentationUID,\n      };\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      const currentImageId = viewport.getCurrentImageId();\n\n      if (!imageIdReferenceMap.get(currentImageId)) {\n        // if there is no stack segmentation slice for the current image\n        // we should not allow the user to perform any operation\n        return;\n      }\n\n      // here we should identify if we can perform sphere manipulation\n      // for these stack of images, if the metadata is not present\n      // to create a volume or if there are inconsistencies between\n      // the image metadata we should not allow the sphere manipulation\n      // and should throw an error or maybe simply just allow circle manipulation\n      // and not sphere manipulation\n      if (this.configuration.activeStrategy.includes('SPHERE')) {\n        throw new Error(\n          'Sphere manipulation is not supported for stacks of image segmentations yet'\n        );\n        // Todo: add sphere (volumetric) manipulation support for stacks of images\n        // we should basically check if the stack constructs a valid volume\n        // meaning all the metadata is present and consistent\n        // then we use a VoxelManager mapping to map a volume like appearance\n        // for the stack data.\n        // csUtils.isValidVolume(referencedImageIds\n      }\n\n      return {\n        imageIdReferenceMap,\n        segmentsLocked,\n        segmentationRepresentationUID,\n      };\n    }\n  }\n\n  preMouseDownCallback = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): boolean => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this._editData = this.createEditData(element);\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    // This might be a mouse down\n    this._previewData.isDrag = false;\n    this._previewData.timerStart = Date.now();\n\n    const hoverData = this._hoverData || this.createHoverData(element);\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      hoverData.viewportIdsToRender\n    );\n\n    this.applyActiveStrategyCallback(\n      enabledElement,\n      this.getOperationData(element),\n      StrategyCallbacks.OnInteractionStart\n    );\n\n    return true;\n  };\n\n  /**\n   * This call will be made when the mouse moves and the tool is active, but\n   * not actually drawing at the moment.\n   * The behavior is:\n   *    1. Update the cursor\n   *    2. Call the active strategy event 'preview' and 'rejectPreview'\n   *       on the mouse cursor position on a periodic basis to create a preview\n   *       when configured to do so.\n   *\n   * The preview will be shown after the mouse has been stationary for 250 ms.\n   * Any preview will be cancelled (immediately) after moving outside the center\n   * distance.\n   * As well, if the mouse moves but stays inside the center area for 250 ms,\n   * then the cancel will happen with a new preview being added.\n   *\n   * See mouse up details for how the preview gets accepted.\n   *\n   * The preview also needs to be cancelled on changing tools.\n   */\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    if (this.mode === ToolModes.Active) {\n      this.updateCursor(evt);\n      if (!this.configuration.preview.enabled) {\n        return;\n      }\n      const { previewTimeMs, previewMoveDistance, dragMoveDistance } =\n        this.configuration.preview;\n      const { currentPoints, element } = evt.detail;\n      const { canvas } = currentPoints;\n\n      const { preview, startPoint, timer, timerStart, isDrag } =\n        this._previewData;\n      const delta = vec2.distance(canvas, startPoint);\n      const time = Date.now() - timerStart;\n      if (\n        delta > previewMoveDistance ||\n        (time > previewTimeMs && delta > dragMoveDistance)\n      ) {\n        if (timer) {\n          window.clearTimeout(timer);\n          this._previewData.timer = null;\n        }\n        if (preview && !isDrag) {\n          this.rejectPreview(element);\n        }\n      }\n      if (!this._previewData.timer) {\n        const timer = window.setTimeout(this.previewCallback, 250);\n        Object.assign(this._previewData, {\n          timerStart: Date.now(),\n          timer,\n          startPoint: canvas,\n          element,\n        });\n      }\n    }\n  };\n\n  previewCallback = () => {\n    if (this._previewData.preview) {\n      return;\n    }\n    this._previewData.timer = null;\n    this._previewData.preview = this.applyActiveStrategyCallback(\n      getEnabledElement(this._previewData.element),\n      this.getOperationData(this._previewData.element),\n      StrategyCallbacks.Preview\n    );\n  };\n\n  private createHoverData(element, centerCanvas?) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const viewportIdsToRender = [viewport.id];\n\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      segmentColor,\n    } = this.getActiveSegmentationData() || {};\n\n    // Center of circle in canvas Coordinates\n    const brushCursor = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {},\n    };\n\n    return {\n      brushCursor,\n      centerCanvas,\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      segmentColor,\n      viewportIdsToRender,\n    };\n  }\n\n  private getActiveSegmentationData() {\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      console.warn(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n      return;\n    }\n\n    const { segmentationRepresentationUID, segmentationId } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    return {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      segmentColor,\n    };\n  }\n\n  /**\n   * Updates the cursor position and whether it is showing or not.\n   * Can be over-ridden to add more cursor details or a preview.\n   */\n  protected updateCursor(evt: EventTypes.InteractionEventType) {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const { currentPoints } = eventData;\n    const centerCanvas = currentPoints.canvas;\n    this._hoverData = this.createHoverData(element, centerCanvas);\n\n    this._calculateCursor(element, centerCanvas);\n\n    if (!this._hoverData) {\n      return;\n    }\n\n    triggerAnnotationRenderForViewportUIDs(\n      getEnabledElement(element).renderingEngine,\n      this._hoverData.viewportIdsToRender\n    );\n  }\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element, currentPoints } = eventData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.updateCursor(evt);\n\n    const { viewportIdsToRender } = this._hoverData;\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n\n    const delta = vec2.distance(\n      currentPoints.canvas,\n      this._previewData.startPoint\n    );\n    const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n    if (\n      !this._previewData.isDrag &&\n      this._previewData.preview &&\n      Date.now() - this._previewData.timerStart < dragTimeMs &&\n      delta < dragMoveDistance\n    ) {\n      // If we are showing a preview, then don't start dragging quite immediately\n      // so that click up can accept the preview.\n      return;\n    }\n\n    this._previewData.preview = this.applyActiveStrategy(\n      enabledElement,\n      this.getOperationData(element)\n    );\n    this._previewData.element = element;\n    // Add a bit of time to the timer start so small accidental movements dont\n    // cause issues on clicking\n    this._previewData.timerStart = Date.now() + dragTimeMs;\n    this._previewData.isDrag = true;\n    this._previewData.startPoint = currentPoints.canvas;\n  };\n\n  protected getOperationData(element?) {\n    const editData = this._editData || this.createEditData(element);\n\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      brushCursor,\n    } = this._hoverData || this.createHoverData(element);\n    const { data, metadata = {} } = brushCursor || {};\n    const { viewPlaneNormal, viewUp } = metadata;\n    const operationData = {\n      ...editData,\n      points: data?.handles?.points,\n      segmentIndex,\n      previewColors: this.configuration.preview.enabled\n        ? this.configuration.preview.previewColors\n        : null,\n      viewPlaneNormal,\n      toolGroupId: this.toolGroupId,\n      segmentationId,\n      segmentationRepresentationUID,\n      viewUp,\n      strategySpecificConfiguration:\n        this.configuration.strategySpecificConfiguration,\n      // Provide the preview information so that data can be used directly\n      preview: this._previewData?.preview,\n    };\n    return operationData;\n  }\n\n  private _calculateCursor(element, centerCanvas) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n    const camera = viewport.getCamera();\n    const { brushSize } = this.configuration;\n\n    const viewUp = vec3.fromValues(\n      camera.viewUp[0],\n      camera.viewUp[1],\n      camera.viewUp[2]\n    );\n    const viewPlaneNormal = vec3.fromValues(\n      camera.viewPlaneNormal[0],\n      camera.viewPlaneNormal[1],\n      camera.viewPlaneNormal[2]\n    );\n    const viewRight = vec3.create();\n\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n    // in the world coordinate system, the brushSize is the radius of the circle\n    // in mm\n    const centerCursorInWorld: Types.Point3 = canvasToWorld([\n      centerCanvas[0],\n      centerCanvas[1],\n    ]);\n\n    const bottomCursorInWorld = vec3.create();\n    const topCursorInWorld = vec3.create();\n    const leftCursorInWorld = vec3.create();\n    const rightCursorInWorld = vec3.create();\n\n    // Calculate the bottom and top points of the circle in world coordinates\n    for (let i = 0; i <= 2; i++) {\n      bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n      topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n      leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n      rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n    }\n\n    if (!this._hoverData) {\n      return;\n    }\n\n    const { brushCursor } = this._hoverData;\n    const { data } = brushCursor;\n\n    if (data.handles === undefined) {\n      data.handles = {};\n    }\n\n    data.handles.points = [\n      bottomCursorInWorld,\n      topCursorInWorld,\n      leftCursorInWorld,\n      rightCursorInWorld,\n    ];\n\n    const activeStrategy = this.configuration.activeStrategy;\n    const strategy = this.configuration.strategies[activeStrategy];\n\n    // Note: i don't think this is the best way to implement this\n    // but don't think we have a better way to do it for now\n    if (typeof strategy.computeInnerCircleRadius === 'function') {\n      strategy.computeInnerCircleRadius({\n        configuration: this.configuration,\n        viewport,\n      });\n    }\n\n    data.invalidated = false;\n  }\n\n  /**\n   * The end callback call is made when the mouse is released.  This will\n   * perform another active strategy render event to render the final position.\n   * As well, the finish strategy callback will be made during this time.\n   */\n  private _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const enabledElement = getEnabledElement(element);\n\n    const operationData = this.getOperationData(element);\n    // Don't re-fill when the preview is showing and the user clicks again\n    // otherwise the new area of hover may get filled, which is unexpected\n    if (!this._previewData.preview && !this._previewData.isDrag) {\n      this.applyActiveStrategy(enabledElement, operationData);\n    }\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    this.updateCursor(evt);\n\n    this._editData = null;\n\n    this.applyActiveStrategyCallback(\n      enabledElement,\n      operationData,\n      StrategyCallbacks.OnInteractionEnd\n    );\n\n    if (!this._previewData.isDrag) {\n      this.acceptPreview(element);\n    }\n  };\n\n  /**\n   * Cancels any preview view being shown, resetting any segments being shown.\n   */\n  public rejectPreview(element = this._previewData.element) {\n    if (!element || !this._previewData.preview) {\n      return;\n    }\n    const enabledElement = getEnabledElement(element);\n    this.applyActiveStrategyCallback(\n      enabledElement,\n      this.getOperationData(element),\n      StrategyCallbacks.RejectPreview\n    );\n    this._previewData.preview = null;\n    this._previewData.isDrag = false;\n  }\n\n  /**\n   * Accepts a preview, marking it as the active segment.\n   */\n  public acceptPreview(element = this._previewData.element) {\n    if (!element) {\n      return;\n    }\n    const enabledElement = getEnabledElement(element);\n\n    this.applyActiveStrategyCallback(\n      enabledElement,\n      this.getOperationData(element),\n      StrategyCallbacks.AcceptPreview\n    );\n    this._previewData.isDrag = false;\n    this._previewData.preview = null;\n  }\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  private _activateDraw = (element: HTMLDivElement): void => {\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  private _deactivateDraw = (element: HTMLDivElement): void => {\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  public invalidateBrushCursor() {\n    if (this._hoverData === undefined) {\n      return;\n    }\n    const { data } = this._hoverData.brushCursor;\n\n    data.invalidated = true;\n\n    // Todo: figure out if other brush metadata (other than segment color) should get updated\n    // during the brush cursor invalidation\n    const { segmentColor } = this.getActiveSegmentationData() || {};\n    this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n  }\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): void {\n    if (!this._hoverData) {\n      return;\n    }\n\n    const { viewport } = enabledElement;\n\n    const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return;\n    }\n\n    const brushCursor = this._hoverData.brushCursor;\n\n    if (brushCursor.data.invalidated === true) {\n      const { centerCanvas } = this._hoverData;\n      const { element } = viewport;\n\n      // This can be set true when changing the brush size programmatically\n      // whilst the cursor is being rendered.\n      this._calculateCursor(element, centerCanvas);\n    }\n\n    const toolMetadata = brushCursor.metadata;\n    if (!toolMetadata) {\n      return;\n    }\n\n    const annotationUID = toolMetadata.brushCursorUID;\n\n    const data = brushCursor.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    const activeStrategy = this.configuration.activeStrategy;\n    const { dynamicRadiusInCanvas } = this.configuration\n      .strategySpecificConfiguration[activeStrategy] || {\n      dynamicRadiusInCanvas: 0,\n    };\n\n    if (dynamicRadiusInCanvas) {\n      const circleUID1 = '1';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID1,\n        center as Types.Point2,\n        dynamicRadiusInCanvas,\n        {\n          color,\n        }\n      );\n    }\n  }\n}\n\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import {\n  StackViewport,\n  Types,\n  cache,\n  getEnabledElement,\n  utilities as csUtils,\n  metaData,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport {\n  addAnnotation,\n  removeAnnotation,\n  getAnnotations,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CircleROIStartEndThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  getCanvasCircleCorners,\n  getCanvasCircleRadius,\n} from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { pointInShapeCallback } from '../../utilities';\n\nconst { transformWorldToIndex } = csUtils;\n\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        numSlicesToPropagate: 10,\n        calculatePointsInsideVolume: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStatsTool,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    let referencedImageId, imageVolume, volumeId;\n    if (viewport instanceof StackViewport) {\n      throw new Error('Stack Viewport Not implemented');\n    } else {\n      const targetId = this.getTargetId(viewport);\n      volumeId = csUtils.getVolumeId(targetId);\n      imageVolume = cache.getVolume(volumeId);\n\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    // if (!referencedImageId) {\n    //   throw new Error('This tool does not work on non-acquisition planes');\n    // }\n\n    const spacingInNormal = csUtils.getSpacingInNormalDirection(\n      imageVolume,\n      viewPlaneNormal\n    );\n\n    const newStartIndex = this._getStartSliceIndex(\n      imageVolume,\n      worldPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    // We cannot newStartIndex add numSlicesToPropagate to startIndex because\n    // the order of imageIds can be from top to bottom or bottom to top and\n    // we want to make sure it is always propagated in the direction of the\n    // view and also to make sure we don't go out of bounds.\n    const endIndex = this._getEndSliceIndex(\n      imageVolume,\n      worldPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        volumeId,\n        spacingInNormal,\n        enabledElement,\n      },\n      data: {\n        label: '',\n        startSlice: newStartIndex,\n        endSlice: endIndex,\n\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [[...worldPos], [...worldPos]] as [\n            Types.Point3, // center\n            Types.Point3 // end\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {\n          pointsInVolume: [],\n          projectionPoints: [],\n        },\n        labelmapUID: null,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Circle ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the circle,\n    // and they are by definition not in the circle on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    const targetId = this.getTargetId(enabledElement.viewport);\n    const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n\n    if (this.configuration.calculatePointsInsideVolume) {\n      this._computePointsInsideVolume(annotation, imageVolume, enabledElement);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      enabledElement.renderingEngine,\n      viewportIdsToRender\n    );\n\n    if (newAnnotation) {\n      triggerAnnotationCompleted(annotation);\n    }\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const sliceIndex = viewport.getCurrentImageIdIndex();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CircleROIStartEndThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { startSlice, endSlice } = data;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2];\n      const center = canvasCoordinates[0];\n\n      const radius = getCanvasCircleRadius(canvasCoordinates);\n      const { centerPointRadius } = this.configuration;\n\n      // range of slices to render based on the start and end slice, like\n      // np.arange\n\n      // if indexIJK is outside the start/end slice, we don't render\n      if (\n        sliceIndex < Math.min(startSlice, endSlice) ||\n        sliceIndex > Math.max(startSlice, endSlice)\n      ) {\n        continue;\n      }\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n\n      if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(annotation, enabledElement);\n      }\n\n      const middleSlice = Math.round((startSlice + endSlice) / 2);\n      // if it is inside the start/end slice, but not exactly the first or\n      // last slice, we render the line in dash, but not the handles\n\n      let isMiddleSlice = false;\n      if (sliceIndex === middleSlice) {\n        isMiddleSlice = true;\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null &&\n        isMiddleSlice\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      let lineWidthToUse = lineWidth;\n\n      if (isMiddleSlice) {\n        lineWidthToUse = 3;\n      }\n\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineDash,\n          lineWidth: lineWidthToUse,\n        }\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        if (radius > 3 * centerPointRadius) {\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${circleUID}-center`,\n            center,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  // Todo: make it work for planes other than acquisition planes\n  _computeProjectionPoints(\n    annotation: CircleROIStartEndThresholdAnnotation,\n    imageVolume: Types.IImageVolume\n  ): void {\n    const { data, metadata } = annotation;\n    const { viewPlaneNormal, spacingInNormal } = metadata;\n    const { imageData } = imageVolume;\n    const { startSlice, endSlice } = data;\n    const { points } = data.handles;\n\n    const startIJK = transformWorldToIndex(imageData, points[0]);\n    startIJK[2] = startSlice;\n\n    if (startIJK[2] !== startSlice) {\n      throw new Error('Start slice does not match');\n    }\n\n    // substitute the end slice index 2 with startIJK index 2\n    const endIJK = vec3.fromValues(startIJK[0], startIJK[1], endSlice);\n\n    const startWorld = vec3.create();\n    imageData.indexToWorldVec3(startIJK, startWorld);\n\n    const endWorld = vec3.create();\n    imageData.indexToWorldVec3(endIJK, endWorld);\n\n    // distance between start and end slice in the world coordinate\n    const distance = vec3.distance(startWorld, endWorld);\n\n    // for each point inside points, navigate in the direction of the viewPlaneNormal\n    // with amount of spacingInNormal, and calculate the next slice until we reach the distance\n    const newProjectionPoints = [];\n    for (let dist = 0; dist < distance; dist += spacingInNormal) {\n      newProjectionPoints.push(\n        points.map((point) => {\n          const newPoint = vec3.create();\n          //@ts-ignore\n          vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n          return Array.from(newPoint);\n        })\n      );\n    }\n\n    data.cachedStats.projectionPoints = newProjectionPoints;\n  }\n\n  _computePointsInsideVolume(annotation, imageVolume, enabledElement) {\n    const { data } = annotation;\n    const { viewport } = enabledElement;\n    const projectionPoints = data.cachedStats.projectionPoints;\n\n    const pointsInsideVolume: Types.Point3[][] = [[]];\n\n    for (let i = 0; i < projectionPoints.length; i++) {\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!imageVolume) {\n        continue;\n      }\n\n      const centerWorld = projectionPoints[i][0];\n      const canvasCoordinates = projectionPoints[i].map((p) =>\n        viewport.worldToCanvas(p)\n      );\n\n      const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n        getCanvasCircleCorners(canvasCoordinates)\n      );\n\n      const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n      const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n\n      const worldPos1 = topLeftWorld;\n      const worldPos2 = bottomRightWorld;\n\n      const { dimensions, imageData } = imageVolume;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n      const worldCenterIndex = transformWorldToIndex(imageData, centerWorld);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldCenterIndex[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldCenterIndex[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = centerWorld as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          //@ts-ignore\n          (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n          null,\n          boundsIJK\n        );\n\n        //@ts-ignore\n        pointsInsideVolume.push(pointsInShape);\n      }\n    }\n    data.cachedStats.pointsInVolume = pointsInsideVolume;\n  }\n\n  _calculateCachedStatsTool(annotation, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const { cachedStats } = data;\n    const targetId = this.getTargetId(viewport);\n    const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n\n    // Todo: this shouldn't be here, this is a performance issue\n    // Since we are extending the RectangleROI class, we need to\n    // bring the logic for handle to some cachedStats calculation\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  _getStartSliceIndex(\n    imageVolume: Types.IImageVolume,\n    worldPos: Types.Point3,\n    spacingInNormal: number,\n    viewPlaneNormal: Types.Point3\n  ): number | undefined {\n    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n\n    const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n    // get end position by moving from worldPos in the direction of viewplaneNormal\n    // with amount of numSlicesToPropagate * spacingInNormal\n    const startPos = vec3.create();\n    vec3.scaleAndAdd(\n      startPos,\n      worldPos,\n      viewPlaneNormal,\n      numSlicesToPropagateFromStart * -spacingInNormal\n    );\n\n    const imageIdIndex = this._getImageIdIndex(\n      imageVolume,\n      startPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    return imageIdIndex;\n  }\n\n  _getEndSliceIndex(\n    imageVolume: Types.IImageVolume,\n    worldPos: Types.Point3,\n    spacingInNormal: number,\n    viewPlaneNormal: Types.Point3\n  ): number | undefined {\n    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n    const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n\n    // get end position by moving from worldPos in the direction of viewplaneNormal\n    // with amount of numSlicesToPropagate * spacingInNormal\n    const endPos = vec3.create();\n    vec3.scaleAndAdd(\n      endPos,\n      worldPos,\n      viewPlaneNormal,\n      numSlicesToPropagateFromStart * spacingInNormal\n    );\n\n    const imageIdIndex = this._getImageIdIndex(\n      imageVolume,\n      endPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    return imageIdIndex;\n  }\n\n  _getImageIdIndex(\n    imageVolume: Types.IImageVolume,\n    pos: vec3,\n    spacingInNormal: number,\n    viewPlaneNormal: Types.Point3\n  ): number | undefined {\n    const halfSpacingInNormalDirection = spacingInNormal / 2;\n    // Loop through imageIds of the imageVolume and find the one that is closest to endPos\n    const { imageIds } = imageVolume;\n    let imageIdIndex;\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n\n      const dir = vec3.create();\n      vec3.sub(dir, pos, imagePositionPatient);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        imageIdIndex = i;\n      }\n    }\n\n    return imageIdIndex;\n  }\n}\n\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { cache, getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n  config as segmentationConfig,\n} from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n\n/**\n * Tool for manipulating segmentation data by drawing a circle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass CircleScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentIndex: number;\n    //\n    volumeId: string;\n    referencedVolumeId: string;\n    imageIdReferenceMap: Map<string, string>;\n    //\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n    segmentationRepresentationUID?: string;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideCircle,\n          ERASE_INSIDE: eraseInsideCircle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    // if we are already drawing, means we have started with a click, and now we\n    // are moving the mouse (not dragging) so the final click should not\n    // be handled by this preMouseDownCallback but rather the endCallback\n    if (this.isDrawing === true) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const labelmapData = representationData[type];\n\n    if (!labelmapData) {\n      throw new Error(\n        'No labelmap data found for the active segmentation, create one before using scissors tool'\n      );\n    }\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        isDrawing: true,\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      centerCanvas: canvasPos,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n      segmentationRepresentationUID,\n    } as any;\n\n    if (\n      isVolumeSegmentation(labelmapData as LabelmapSegmentationData, viewport)\n    ) {\n      const { volumeId } = labelmapData as LabelmapSegmentationDataVolume;\n      const segmentation = cache.getVolume(volumeId);\n\n      this.editData = {\n        ...this.editData,\n        volumeId,\n        referencedVolumeId: segmentation.referencedVolumeId,\n      };\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      this.editData = {\n        ...this.editData,\n        imageIdReferenceMap,\n      };\n    }\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    // Center of circle in canvas Coordinates\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, newAnnotation, hasMoved } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n\n    const operationData = {\n      ...this.editData,\n      points: data.handles.points,\n      viewPlaneNormal,\n      viewUp,\n      strategySpecificConfiguration: {},\n    };\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n    return renderStatus;\n  };\n}\n\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import {\n  cache,\n  getEnabledElement,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport { PublicToolProps, ToolProps, EventTypes } from '../../types';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n} from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { FloodFillResult, FloodFillGetter } from '../../types';\nimport {\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n\nconst { transformWorldToIndex, isEqual } = csUtils;\n\ntype PaintFillToolHelpers = {\n  getScalarDataPositionFromPlane: (x: number, y: number) => number;\n  getLabelValue: (x: number, y: number, z: number) => number;\n  floodFillGetter: FloodFillGetter;\n  inPlaneSeedPoint: Types.Point2;\n  fixedDimensionValue: number;\n};\n\n/**\n * Tool for manipulating segmentation data by filling in regions. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will fill a given labelled\n * or empty region with the the activeSegmentIndex label. You can use the\n * SegmentationModule to set the active segmentation and segmentIndex.\n */\nclass PaintFillTool extends BaseTool {\n  static toolName;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationId, type } = activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked: number[] =\n      segmentLocking.getLockedSegments(segmentationId);\n    const { representationData } = getSegmentation(segmentationId);\n\n    const labelmapData =\n      representationData[SegmentationRepresentations.Labelmap];\n\n    let dimensions: Types.Point3;\n    let direction: Types.Mat3;\n    let scalarData: Types.PixelDataTypedArray;\n    let index: Types.Point3;\n\n    if (isVolumeSegmentation(labelmapData, viewport)) {\n      const { volumeId } = representationData[\n        type\n      ] as LabelmapSegmentationDataVolume;\n\n      const segmentation = cache.getVolume(volumeId);\n      ({ dimensions, direction } = segmentation);\n      scalarData = segmentation.getScalarData();\n\n      index = transformWorldToIndex(segmentation.imageData, worldPos);\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      const currentImageId = enabledElement.viewport.getCurrentImageId();\n      const currentSegmentationImageId =\n        imageIdReferenceMap.get(currentImageId);\n\n      if (!currentSegmentationImageId) {\n        throw new Error(\n          'No active segmentation imageId detected, create one before using scissors tool'\n        );\n      }\n\n      const segmentationImage = cache.getImage(currentSegmentationImageId);\n      scalarData = segmentationImage.getPixelData();\n      const { imageData } = viewport.getImageData();\n      dimensions = imageData.getDimensions();\n      direction = imageData.getDirection();\n      index = transformWorldToIndex(imageData, worldPos);\n    }\n\n    const fixedDimension = this.getFixedDimension(\n      viewPlaneNormal,\n      direction as number[]\n    );\n\n    if (fixedDimension === undefined) {\n      console.warn('Oblique paint fill not yet supported');\n      return;\n    }\n\n    const {\n      floodFillGetter,\n      getLabelValue,\n      getScalarDataPositionFromPlane,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    } = this.generateHelpers(scalarData, dimensions, index, fixedDimension);\n\n    // Check if within volume\n    if (\n      index[0] < 0 ||\n      index[0] >= dimensions[0] ||\n      index[1] < 0 ||\n      index[1] >= dimensions[1] ||\n      index[2] < 0 ||\n      index[2] >= dimensions[2]\n    ) {\n      // Clicked outside segmentation volume, no good way to fill.\n      return;\n    }\n    //@ts-ignore // todo type\n    const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n\n    if (segmentsLocked.includes(clickedLabelValue)) {\n      // Label is locked, cannot fill.\n      return;\n    }\n\n    const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n\n    const { flooded } = floodFillResult;\n\n    flooded.forEach((index) => {\n      const scalarDataPosition = getScalarDataPositionFromPlane(\n        index[0],\n        index[1]\n      );\n\n      scalarData[scalarDataPosition] = segmentIndex;\n    });\n\n    const framesModified = this.getFramesModified(\n      fixedDimension,\n      fixedDimensionValue,\n      floodFillResult\n    );\n\n    triggerSegmentationDataModified(segmentationId, framesModified);\n\n    return true;\n  };\n\n  private getFramesModified = (\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    floodFillResult: FloodFillResult\n  ): number[] => {\n    const { boundaries } = floodFillResult;\n\n    if (fixedDimension === 2) {\n      return [fixedDimensionValue];\n    }\n\n    // For both the fixedDimensions being 0 and 1, the Z (stack) direction is j,\n    // so we don't need to find min/max i.\n\n    let minJ = Infinity;\n    let maxJ = -Infinity;\n\n    for (let b = 0; b < boundaries.length; b++) {\n      const j = boundaries[b][1];\n\n      if (j < minJ) {\n        minJ = j;\n      }\n      if (j > maxJ) {\n        maxJ = j;\n      }\n    }\n\n    const framesModified = [];\n\n    for (let frame = minJ; frame <= maxJ; frame++) {\n      framesModified.push(frame);\n    }\n\n    return framesModified;\n  };\n\n  private generateHelpers = (\n    scalarData: Types.PixelDataTypedArray,\n    dimensions: Types.Point3,\n    seedIndex3D: Types.Point3,\n    fixedDimension = 2\n  ): PaintFillToolHelpers => {\n    let fixedDimensionValue: number;\n    let inPlaneSeedPoint: Types.Point2;\n\n    switch (fixedDimension) {\n      case 0:\n        fixedDimensionValue = seedIndex3D[0]; // X\n        inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]]; // Y,Z\n        break;\n      case 1:\n        fixedDimensionValue = seedIndex3D[1]; // Y\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]]; // X,Z\n        break;\n      case 2:\n        fixedDimensionValue = seedIndex3D[2]; // Z\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]]; // X, Y\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    const getScalarDataPosition = (x: number, y: number, z: number): number => {\n      return z * dimensions[1] * dimensions[0] + y * dimensions[0] + x;\n    };\n\n    const getLabelValue = (x: number, y: number, z: number): number => {\n      return scalarData[getScalarDataPosition(x, y, z)];\n    };\n\n    const floodFillGetter = this.generateFloodFillGetter(\n      dimensions,\n      fixedDimension,\n      fixedDimensionValue,\n      getLabelValue\n    );\n\n    const getScalarDataPositionFromPlane =\n      this.generateGetScalarDataPositionFromPlane(\n        getScalarDataPosition,\n        fixedDimension,\n        fixedDimensionValue\n      );\n\n    return {\n      getScalarDataPositionFromPlane,\n      getLabelValue,\n      floodFillGetter,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    };\n  };\n\n  private getFixedDimension(\n    viewPlaneNormal: Types.Point3,\n    direction: number[]\n  ): number | undefined {\n    const xDirection = direction.slice(0, 3);\n    const yDirection = direction.slice(3, 6);\n    const zDirection = direction.slice(6, 9);\n\n    const absoluteOfViewPlaneNormal = [\n      Math.abs(viewPlaneNormal[0]),\n      Math.abs(viewPlaneNormal[1]),\n      Math.abs(viewPlaneNormal[2]),\n    ];\n\n    const absoluteOfXDirection = [\n      Math.abs(xDirection[0]),\n      Math.abs(xDirection[1]),\n      Math.abs(xDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n      return 0;\n    }\n\n    const absoluteOfYDirection = [\n      Math.abs(yDirection[0]),\n      Math.abs(yDirection[1]),\n      Math.abs(yDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n      return 1;\n    }\n\n    const absoluteOfZDirection = [\n      Math.abs(zDirection[0]),\n      Math.abs(zDirection[1]),\n      Math.abs(zDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n      return 2;\n    }\n  }\n\n  // Define a getter for the fill routine to access the working label map.\n  private generateFloodFillGetter = (\n    dimensions: Types.Point3,\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    getLabelValue: PaintFillToolHelpers['getLabelValue']\n  ): FloodFillGetter => {\n    let floodFillGetter;\n\n    // In each helper we first check if out of bounds, as the flood filler\n    // doesn't know about the dimensions of the data structure that sits on top\n    // of the scalarData. E.g. if cols is 10, (0,1) and (10, 0) would point to\n    // the same position in these getters.\n\n    switch (fixedDimension) {\n      case 0:\n        floodFillGetter = (y, z) => {\n          if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(fixedDimensionValue, y, z);\n        };\n        break;\n\n      case 1:\n        floodFillGetter = (x, z) => {\n          if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(x, fixedDimensionValue, z);\n        };\n        break;\n\n      case 2:\n        floodFillGetter = (x, y) => {\n          if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n            return;\n          }\n\n          return getLabelValue(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return floodFillGetter;\n  };\n\n  private generateGetScalarDataPositionFromPlane = (\n    getScalarDataPosition: (x: number, y: number, z: number) => number,\n    fixedDimension: number,\n    fixedDimensionValue: number\n  ): PaintFillToolHelpers['getScalarDataPositionFromPlane'] => {\n    let getScalarDataPositionFromPlane;\n\n    switch (fixedDimension) {\n      case 0:\n        getScalarDataPositionFromPlane = (y, z) => {\n          return getScalarDataPosition(fixedDimensionValue, y, z);\n        };\n        break;\n      case 1:\n        getScalarDataPositionFromPlane = (x, z) => {\n          return getScalarDataPosition(x, fixedDimensionValue, z);\n        };\n        break;\n      case 2:\n        getScalarDataPositionFromPlane = (x, y) => {\n          return getScalarDataPosition(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return getScalarDataPositionFromPlane;\n  };\n}\n\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\n\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  LabelmapSegmentationDataStack,\n  LabelmapSegmentationDataVolume,\n} from '../../types/LabelmapTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n\n/**\n * Tool for manipulating segmentation data by drawing a rectangle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass RectangleScissorsTool extends BaseTool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    //\n    imageIdReferenceMap: Map<string, string>;\n    volumeId: string;\n    referencedVolumeId: string;\n    //\n    annotation: any;\n    segmentationId: string;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideRectangle,\n          ERASE_INSIDE: eraseInsideRectangle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    // if we are already drawing, means we have started with a click, and now we\n    // are moving the mouse (not dragging) so the final click should not\n    // be handled by this preMouseDownCallback but rather the endCallback\n    if (this.isDrawing === true) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n    const labelmapData = representationData[\n      SegmentationRepresentations.Labelmap\n    ] as LabelmapSegmentationData;\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    this.editData = {\n      annotation,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n      segmentationRepresentationUID,\n    } as any;\n\n    if (\n      isVolumeSegmentation(labelmapData as LabelmapSegmentationData, viewport)\n    ) {\n      const { volumeId } = labelmapData as LabelmapSegmentationDataVolume;\n      const segmentation = cache.getVolume(volumeId);\n\n      this.editData = {\n        ...this.editData,\n        volumeId,\n        referencedVolumeId: segmentation.referencedVolumeId,\n      };\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      this.editData = {\n        ...this.editData,\n        imageIdReferenceMap,\n      };\n    }\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle.\n    const { currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n    const worldPos = currentPoints.world;\n\n    const { points } = data.handles;\n\n    // Move this handle.\n    points[handleIndex] = [...worldPos];\n\n    let bottomLeftCanvas;\n    let bottomRightCanvas;\n    let topLeftCanvas;\n    let topRightCanvas;\n\n    let bottomLeftWorld;\n    let bottomRightWorld;\n    let topLeftWorld;\n    let topRightWorld;\n\n    switch (handleIndex) {\n      case 0:\n      case 3:\n        // Moving bottomLeft or topRight\n\n        bottomLeftCanvas = worldToCanvas(points[0]);\n        topRightCanvas = worldToCanvas(points[3]);\n\n        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n        topLeftWorld = canvasToWorld(topLeftCanvas);\n\n        points[1] = bottomRightWorld;\n        points[2] = topLeftWorld;\n\n        break;\n      case 1:\n      case 2:\n        // Moving bottomRight or topLeft\n        bottomRightCanvas = worldToCanvas(points[1]);\n        topLeftCanvas = worldToCanvas(points[2]);\n\n        bottomLeftCanvas = <Types.Point2>[\n          topLeftCanvas[0],\n          bottomRightCanvas[1],\n        ];\n        topRightCanvas = <Types.Point2>[bottomRightCanvas[0], topLeftCanvas[1]];\n\n        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n        topRightWorld = canvasToWorld(topRightCanvas);\n\n        points[0] = bottomLeftWorld;\n        points[3] = topRightWorld;\n\n        break;\n    }\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, newAnnotation, hasMoved } = this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n\n    const operationData = {\n      ...this.editData,\n      points: data.handles.points,\n    };\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const rectangleUID = '0';\n    drawRectSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rectangleUID,\n      canvasCoordinates[0],\n      canvasCoordinates[3],\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  ToolGroupSpecificRepresentation,\n} from '../../types';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentationRepresentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport RepresentationTypes from '../../enums/SegmentationRepresentations';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport {\n  getHoveredContourSegmentationAnnotation,\n  getSegmentAtLabelmapBorder,\n  getSegmentAtWorldPoint,\n} from '../../utilities/segmentation';\nimport { state } from '../../store';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\n\n/**\n * Represents a tool used for segment selection. It is used to select a segment\n * by hovering over it.\n *\n */\nclass SegmentSelectTool extends BaseTool {\n  static toolName;\n  private hoverTimer: ReturnType<typeof setTimeout> | null;\n\n  static SelectMode = {\n    Inside: 'Inside',\n    Border: 'Border',\n  };\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        hoverTimeout: 100,\n        mode: SegmentSelectTool.SelectMode.Border,\n        searchRadius: 6, // search for border in a 6px radius\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.hoverTimer = null;\n  }\n\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    if (this.hoverTimer) {\n      clearTimeout(this.hoverTimer);\n    }\n\n    this.hoverTimer = setTimeout(() => {\n      this._setActiveSegment(evt);\n      this.hoverTimer = null;\n    }, this.configuration.hoverTimeout);\n\n    return true;\n  };\n\n  onSetToolEnabled = (): void => {\n    this.onSetToolActive();\n  };\n\n  onSetToolActive = (): void => {\n    this.hoverTimer = null;\n  };\n\n  onSetToolDisabled = (): void => {\n    this.hoverTimer = null;\n  };\n\n  _setActiveSegment(evt = {} as EventTypes.InteractionEventType): void {\n    if (state.isInteractingWithTool) {\n      return;\n    }\n\n    const { element, currentPoints } = evt.detail;\n\n    const worldPoint = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      return;\n    }\n\n    const { viewport } = enabledElement;\n\n    const activeSegmentationReps = getActiveSegmentationRepresentation(\n      this.toolGroupId\n    );\n\n    if (!activeSegmentationReps) {\n      return;\n    }\n\n    const supportedTypes = [\n      RepresentationTypes.Labelmap,\n      RepresentationTypes.Contour,\n    ];\n\n    if (supportedTypes.includes(activeSegmentationReps.type)) {\n      this._setActiveSegmentForType(\n        activeSegmentationReps,\n        worldPoint,\n        viewport\n      );\n    } else {\n      console.warn(\n        'SegmentSelectTool does not support the current segmentation type.'\n      );\n    }\n  }\n\n  _setActiveSegmentForType(\n    activeSegmentationReps: ToolGroupSpecificRepresentation,\n    worldPoint: Types.Point3,\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): void {\n    const imageDataInfo = viewport.getImageData();\n\n    if (!imageDataInfo) {\n      return;\n    }\n\n    const { segmentationId, type } = activeSegmentationReps;\n\n    let hoveredSegmentIndex;\n\n    if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n      hoveredSegmentIndex = getSegmentAtWorldPoint(segmentationId, worldPoint, {\n        viewport,\n      });\n    } else {\n      switch (type) {\n        case SegmentationRepresentations.Labelmap:\n          hoveredSegmentIndex = getSegmentAtLabelmapBorder(\n            segmentationId,\n            worldPoint,\n            {\n              viewport,\n              searchRadius: this.configuration.searchRadius,\n            }\n          );\n          break;\n\n        case SegmentationRepresentations.Contour:\n          hoveredSegmentIndex =\n            getHoveredContourSegmentationAnnotation(segmentationId);\n          break;\n      }\n    }\n\n    // No need to select background\n    if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n      return;\n    }\n\n    setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n\n    const renderingEngine = viewport.getRenderingEngine();\n    const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n\n    // update states\n    triggerSegmentationModified(segmentationId);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n  }\n}\n\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { cache, getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataVolume,\n  LabelmapSegmentationDataStack,\n} from '../../types/LabelmapTypes';\nimport { isVolumeSegmentation } from './strategies/utils/stackVolumeCheck';\n/**\n * Tool for manipulating segmentation data by drawing a sphere in 3d space. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex. Todo: sphere scissor has some memory problem which\n * lead to ui blocking behavior that needs to be fixed.\n */\nclass SphereScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentationRepresentationUID: string;\n    //\n    volumeId: string;\n    referencedVolumeId: string;\n    imageIdReferenceMap: Map<string, string>;\n    //\n    toolGroupId: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideSphere,\n          ERASE_INSIDE: eraseInsideSphere,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): true => {\n    // if we are already drawing, means we have started with a click, and now we\n    // are moving the mouse (not dragging) so the final click should not\n    // be handled by this preMouseDownCallback but rather the endCallback\n    if (this.isDrawing === true) {\n      return;\n    }\n\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    this.isDrawing = true;\n\n    // Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        invalidated: true,\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        highlighted: true,\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      centerCanvas: canvasPos,\n      segmentationRepresentationUID,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      toolGroupId,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    } as any;\n\n    const { representationData } = getSegmentation(segmentationId);\n    const labelmapData =\n      representationData[SegmentationRepresentations.Labelmap];\n\n    if (\n      isVolumeSegmentation(labelmapData as LabelmapSegmentationData, viewport)\n    ) {\n      const { volumeId } = labelmapData as LabelmapSegmentationDataVolume;\n      const segmentation = cache.getVolume(volumeId);\n\n      this.editData = {\n        ...this.editData,\n        volumeId,\n        referencedVolumeId: segmentation.referencedVolumeId,\n      };\n    } else {\n      const { imageIdReferenceMap } =\n        labelmapData as LabelmapSegmentationDataStack;\n\n      this.editData = {\n        ...this.editData,\n        imageIdReferenceMap,\n      };\n    }\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentIndex,\n      segmentationRepresentationUID,\n      segmentsLocked,\n    } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n\n    const operationData = {\n      ...this.editData,\n      points: data.handles.points,\n      segmentIndex,\n      segmentationRepresentationUID,\n      segmentsLocked,\n      viewPlaneNormal,\n      viewUp,\n    };\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the sphereScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import {\n  LabelmapSegmentationData,\n  LabelmapSegmentationDataVolume,\n} from '../../../../types/LabelmapTypes';\nimport {\n  LabelmapToolOperationData,\n  LabelmapToolOperationDataStack,\n  LabelmapToolOperationDataVolume,\n} from '../../../../types';\nimport { Types, VolumeViewport } from '@cornerstonejs/core';\n\nfunction isVolumeSegmentation(\n  operationData: LabelmapToolOperationData | LabelmapSegmentationData,\n  viewport?: Types.IViewport\n): operationData is\n  | LabelmapToolOperationDataVolume\n  | LabelmapSegmentationDataVolume {\n  const { imageIdReferenceMap } =\n    operationData as LabelmapToolOperationDataStack;\n  const { volumeId } = operationData as LabelmapToolOperationDataVolume;\n\n  if (volumeId && !imageIdReferenceMap) {\n    return true;\n  }\n\n  if (imageIdReferenceMap && !volumeId) {\n    return false;\n  }\n\n  if (volumeId && imageIdReferenceMap && !viewport) {\n    throw new Error(\n      'isVolumeSegmentation: viewport is required when both volumeId and imageIdReferenceMap are provided'\n    );\n  }\n\n  // we can get the viewport to decide\n  return viewport instanceof VolumeViewport;\n}\n\nexport { isVolumeSegmentation };\n","import type { Types } from '@cornerstonejs/core';\nimport { Annotation } from './AnnotationTypes';\n\n/**\n * Polyline winding direction\n *\n * It is defined as -1 and 1 to make it easier to change its direction multiplying\n * by -1 whenever polyline.reverse() is called instead of using IF/ELSE\n */\nexport enum ContourWindingDirection {\n  CounterClockwise = -1,\n  Unknown = 0,\n  Clockwise = 1,\n}\n\nexport type ContourAnnotationData = {\n  data: {\n    contour: {\n      polyline: Types.Point3[];\n      closed: boolean;\n      windingDirection?: ContourWindingDirection;\n    };\n  };\n  onInterpolationComplete?: () => void;\n};\n\nexport type ContourAnnotation = Annotation & ContourAnnotationData;\n","import { getEnabledElements, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Annotation } from '../types';\n\nconst { isEqual } = csUtils;\n\n/**\n * Finds a all matching viewports in terms of the orientation of the annotation data\n * and the frame of reference. This doesn't mean the annotation IS being displayed\n * on these viewports, just that it could be by navigating the slice, and/or pan/zoom,\n * without changing the orientation.\n *\n * @param annotation - Annotation to find the viewports that it could display in\n * @returns All viewports to display in\n */\nexport default function getViewportsForAnnotation(annotation: Annotation) {\n  const { metadata } = annotation;\n\n  return getEnabledElements()\n    .filter((enabledElement) => {\n      if (enabledElement.FrameOfReferenceUID === metadata.FrameOfReferenceUID) {\n        const viewport = enabledElement.viewport;\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        return (\n          isEqual(viewPlaneNormal, metadata.viewPlaneNormal) &&\n          (!metadata.viewUp || isEqual(viewUp, metadata.viewUp))\n        );\n      }\n      return;\n    })\n    .map((enabledElement) => enabledElement.viewport);\n}\n","import { utilities } from '@cornerstonejs/core';\n\nimport {\n  getAnnotationNearPoint,\n  getAnnotationNearPointOnEnabledElement,\n} from './getAnnotationNearPoint';\n\n// Lodash/common JS functionality\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport clip from './clip';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport {\n  getCalibratedLengthUnitsAndScale,\n  getCalibratedProbeUnitsAndValue,\n  getCalibratedAspect,\n} from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport jumpToSlice from './viewport/jumpToSlice';\n\nimport pointInShapeCallback from './pointInShapeCallback';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport scroll from './scroll';\nimport { pointToString } from './pointToString';\nimport annotationFrameRange from './annotationFrameRange';\nimport pointInSurroundingSphereCallback from './pointInSurroundingSphereCallback';\nimport getViewportForAnnotation from './getViewportForAnnotation';\n\n// name spaces\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\n\nconst roundNumber = utilities.roundNumber;\n\n// Events\nimport { triggerEvent } from '@cornerstonejs/core';\n\nexport {\n  math,\n  planar,\n  viewportFilters,\n  drawing,\n  debounce,\n  dynamicVolume,\n  throttle,\n  orientation,\n  isObject,\n  touch,\n  triggerEvent,\n  calibrateImageSpacing,\n  getCalibratedLengthUnitsAndScale,\n  getCalibratedProbeUnitsAndValue,\n  getCalibratedAspect,\n  segmentation,\n  contours,\n  triggerAnnotationRenderForViewportIds,\n  triggerAnnotationRenderForToolGroupIds,\n  triggerAnnotationRender,\n  pointInShapeCallback,\n  getSphereBoundsInfo,\n  getAnnotationNearPoint,\n  getViewportForAnnotation,\n  getAnnotationNearPointOnEnabledElement,\n  jumpToSlice,\n  pointInSurroundingSphereCallback,\n  viewport,\n  cine,\n  clip,\n  boundingBox,\n  rectangleROITool,\n  planarFreehandROITool,\n  stackPrefetch,\n  stackContextPrefetch,\n  scroll,\n  roundNumber,\n  pointToString,\n  polyDataUtils,\n  voi,\n  annotationFrameRange,\n  contourSegmentation,\n};\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Find the closest point to the target point\n *\n * @param sourcePoints - The potential source points.\n * @param targetPoint - The target point, used to find the closest source.\n * @returns The closest point in the array of point sources\n */\nexport default function findClosestPoint(\n  sourcePoints: Array<Types.Point2>,\n  targetPoint: Types.Point2\n): Types.Point2 {\n  let minPoint = [0, 0];\n  let minDistance = Number.MAX_SAFE_INTEGER;\n\n  sourcePoints.forEach(function (sourcePoint) {\n    const distance = _distanceBetween(targetPoint, sourcePoint);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      minPoint = [...sourcePoint];\n    }\n  });\n\n  return minPoint as Types.Point2;\n}\n\n/**\n *\n * @private\n * @param p1\n * @param p2\n */\nfunction _distanceBetween(p1: Types.Point2, p2: Types.Point2): number {\n  const [x1, y1] = p1;\n  const [x2, y2] = p2;\n\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import { Types, cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { isVolumeSegmentation } from '../../tools/segmentation/strategies/utils/stackVolumeCheck';\nimport { SegmentationRepresentations } from '../../enums';\n\nconst segmentIndicesCache = new Map<\n  string,\n  { indices: number[]; isDirty: boolean }\n>();\n\n/**\n * Sets the segmentation as dirty, indicating that it needs to be updated.\n * @param segmentationId - The ID of the segmentation.\n */\nexport const setSegmentationDirty = (segmentationId: string) => {\n  const cached = segmentIndicesCache.get(segmentationId);\n  if (cached) {\n    cached.isDirty = true;\n  }\n};\n\nexport const setSegmentationClean = (segmentationId: string) => {\n  const cached = segmentIndicesCache.get(segmentationId);\n  if (cached) {\n    cached.isDirty = false;\n  }\n};\n\nfunction getCachedSegmentIndices(segmentationId) {\n  const cached = segmentIndicesCache.get(segmentationId);\n  if (cached && !cached.isDirty) {\n    return cached.indices;\n  }\n  return null;\n}\n\n/**\n * Retrieves the unique segment indices from a given segmentation.\n *\n * @param segmentationId - The ID of the segmentation.\n * @returns An array of unique segment indices.\n * @throws If no geometryIds are found for the segmentationId.\n */\nfunction getUniqueSegmentIndices(segmentationId) {\n  // Attempt to fetch from cache first\n  const cachedResult = getCachedSegmentIndices(segmentationId);\n  if (cachedResult) {\n    return cachedResult;\n  }\n\n  const segmentation = getSegmentation(segmentationId);\n  if (!segmentation) {\n    throw new Error(\n      `No segmentation found for segmentationId ${segmentationId}`\n    );\n  }\n\n  let indices;\n  switch (segmentation.type) {\n    case SegmentationRepresentations.Labelmap:\n      indices = handleLabelmapSegmentation(segmentation, segmentationId);\n      break;\n    case SegmentationRepresentations.Contour:\n      indices = handleContourSegmentation(segmentation);\n      break;\n    case SegmentationRepresentations.Surface:\n      indices = handleSurfaceSegmentation(segmentation);\n      break;\n    default:\n      throw new Error(`Unsupported segmentation type: ${segmentation.type}`);\n  }\n\n  // Update cache\n  segmentIndicesCache.set(segmentationId, { indices, isDirty: false });\n  return indices;\n}\n\nfunction handleLabelmapSegmentation(segmentation, segmentationId) {\n  const labelmapData =\n    segmentation.representationData[SegmentationRepresentations.Labelmap];\n  const keySet = new Set();\n\n  if (isVolumeSegmentation(labelmapData)) {\n    addVolumeSegmentIndices(keySet, segmentationId);\n  } else {\n    addImageSegmentIndices(keySet, labelmapData.imageIdReferenceMap);\n  }\n\n  return Array.from(keySet)\n    .map(Number)\n    .sort((a, b) => a - b);\n}\n\nfunction addVolumeSegmentIndices(keySet, segmentationId) {\n  const volume = cache.getVolume(segmentationId);\n  const scalarData = volume.getScalarData();\n  scalarData.forEach((segmentIndex) => {\n    if (segmentIndex !== 0) {\n      keySet.add(segmentIndex);\n    }\n  });\n}\n\nfunction addImageSegmentIndices(keySet, imageIdReferenceMap) {\n  imageIdReferenceMap.forEach((segmentationImageId) => {\n    const image = cache.getImage(segmentationImageId);\n    const scalarData = image.getPixelData();\n    scalarData.forEach((segmentIndex) => {\n      if (segmentIndex !== 0) {\n        keySet.add(segmentIndex);\n      }\n    });\n  });\n}\n\nfunction handleContourSegmentation(segmentation) {\n  const { annotationUIDsMap, geometryIds } =\n    segmentation.representationData.CONTOUR || {};\n  if (!geometryIds) {\n    throw new Error(\n      `No geometryIds found for segmentationId ${segmentation.segmentationId}`\n    );\n  }\n\n  const indices = new Set([...annotationUIDsMap.keys()]);\n  geometryIds.forEach((geometryId) => {\n    const geometry = cache.getGeometry(geometryId);\n    indices.add((geometry.data as Types.IContourSet).getSegmentIndex());\n  });\n\n  return Array.from(indices).sort((a, b) => a - b);\n}\n\nfunction handleSurfaceSegmentation(segmentation) {\n  const geometryIds =\n    segmentation.representationData.SURFACE?.geometryIds ?? [];\n  return Array.from(geometryIds.keys())\n    .map(Number)\n    .sort((a, b) => a - b);\n}\n\nexport { getUniqueSegmentIndices };\n","import {\n  triggerEvent,\n  eventTarget,\n  getRenderingEngine,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\nimport { Events as csToolsEvents } from '../../enums';\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../../store/ToolGroupManager';\n\nimport { SegmentationDisplayTool } from '../../tools';\nimport { SegmentationRenderedEventDetail } from '../../types/EventTypes';\n\n/**\n * SegmentationRenderingEngine is a class that is responsible for rendering\n * segmentations for a toolGroup. It will call SegmentationDisplayTool to render the segmentation\n * based on the segmentation data and their configurations. Note: This is a Singleton class\n * and should not be instantiated directly. To trigger a render for all the\n * segmentations of a tool group you can use.\n *\n * ```\n * triggerSegmentationRender(toolGroupId)\n * ```\n */\nclass SegmentationRenderingEngine {\n  private _needsRender: Set<string> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  public hasBeenDestroyed: boolean;\n\n  public removeToolGroup(toolGroupId) {\n    this._needsRender.delete(toolGroupId);\n\n    if (this._needsRender.size === 0) {\n      this._reset();\n    }\n  }\n\n  public renderToolGroupSegmentations(toolGroupId): void {\n    this._setToolGroupSegmentationToBeRenderedNextFrame([toolGroupId]);\n  }\n\n  /**\n   *  _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _setToolGroupSegmentationToBeRenderedNextFrame(\n    toolGroupIds: string[]\n  ) {\n    // Add the viewports to the set of flagged viewports\n    toolGroupIds.forEach((toolGroupId) => {\n      this._needsRender.add(toolGroupId);\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   *  _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedToolGroups\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  private _renderFlaggedToolGroups = () => {\n    this._throwIfDestroyed();\n\n    // for each toolGroupId insides the _needsRender set, render the segmentation\n    const toolGroupIds = Array.from(this._needsRender.values());\n\n    for (const toolGroupId of toolGroupIds) {\n      this._triggerRender(toolGroupId);\n\n      // This viewport has been rendered, we can remove it from the set\n      this._needsRender.delete(toolGroupId);\n\n      // If there is nothing left that is flagged for rendering, stop here\n      // and allow RAF to be called again\n      if (this._needsRender.size === 0) {\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        return;\n      }\n    }\n  };\n  _triggerRender(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      console.warn(`No tool group found with toolGroupId: ${toolGroupId}`);\n      return;\n    }\n\n    const { viewportsInfo } = toolGroup;\n\n    const viewports = viewportsInfo\n      .map(({ viewportId, renderingEngineId }) => {\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n\n        if (!renderingEngine) {\n          console.warn('rendering Engine has been destroyed');\n          return;\n        }\n\n        const viewport = renderingEngine.getViewport(viewportId);\n\n        if (viewport) {\n          return viewport;\n        }\n      })\n      .filter(Boolean);\n\n    const segmentationDisplayToolInstance = toolGroup.getToolInstance(\n      SegmentationDisplayTool.toolName\n    ) as SegmentationDisplayTool;\n    if (!segmentationDisplayToolInstance) {\n      console.warn('No segmentation tool found inside', toolGroupId);\n      return;\n    }\n\n    function onSegmentationRender(evt: Types.EventTypes.ImageRenderedEvent) {\n      const { element, viewportId, renderingEngineId } = evt.detail;\n\n      element.removeEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender as EventListener\n      );\n\n      const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n      if (!toolGroup) {\n        console.warn('toolGroup has been destroyed');\n        return;\n      }\n\n      const eventDetail: SegmentationRenderedEventDetail = {\n        toolGroupId: toolGroup.id,\n        viewportId,\n      };\n\n      triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n        ...eventDetail,\n      });\n    }\n\n    // Todo: for other representations we probably need the drawSVG, but right now we are not using it\n    // drawSvg(element, (svgDrawingHelper) => {\n    //   const handleDrawSvg = (tool) => {\n    //     if (tool instanceof SegmentationDisplayTool && tool.renderAnnotation) {\n    //       tool.renderAnnotation({ detail: eventDetail })\n    //       triggerEvent(element, csToolsEvents.SEGMENTATION_RENDERED, { ...eventDetail })\n    //     }\n    //   }\n    //   enabledTools.forEach(handleDrawSvg)\n    // })\n\n    viewports.forEach(({ element }) => {\n      element.addEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender as EventListener\n      );\n    });\n\n    segmentationDisplayToolInstance.renderSegmentation(toolGroupId);\n  }\n\n  /**\n   *  _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n  }\n}\n\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\n\n/**\n * It triggers a render for all the segmentations of the tool group with the given Id.\n * @param toolGroupId - The Id of the tool group to render.\n */\nfunction triggerSegmentationRender(toolGroupId: string): void {\n  segmentationRenderingEngine.renderToolGroupSegmentations(toolGroupId);\n}\n\nexport { segmentationRenderingEngine, triggerSegmentationRender };\nexport default triggerSegmentationRender;\n","import {\n  getEnabledElement,\n  triggerEvent,\n  getRenderingEngine,\n} from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../enums';\nimport { draw as drawSvg } from '../drawingSvg';\nimport getToolsWithModesForElement from './getToolsWithModesForElement';\nimport { AnnotationRenderedEventDetail } from '../types/EventTypes';\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * AnnotationRenderingEngine is a class that is responsible for rendering\n * annotations defined in the renderAnnotation method of annotation tools on the page.\n * It mimics the RenderingEngine in the Cornerstone Core. Here it uses requestAnimationFrame\n * is used to render annotations by calling renderAnnotations() on each enabled tool. Note: This\n * is a Singleton class and should not be instantiated directly. To trigger\n * an annotation render for an HTML element containing a viewport you can use\n *\n * ```\n * triggerAnnotationRender(element)\n * ```\n */\nclass AnnotationRenderingEngine {\n  public hasBeenDestroyed: boolean;\n  private _needsRender: Set<HTMLDivElement> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  private _viewportElements: Map<string, HTMLDivElement>;\n\n  constructor() {\n    this._viewportElements = new Map();\n  }\n\n  /**\n   * Add the viewport's HTMLDivElement to the viewports for rendering. This method\n   * just informs the annotationRenderingEngine about the viewport and\n   * does not initiate a render.\n   * @param viewportId - Viewport Unique identifier\n   * @param element - HTMLDivElement\n   */\n  public addViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.set(viewportId, element);\n  }\n\n  /**\n   * Remove the viewport's HTMLDivElement from subsequent annotation renders\n   * @param viewportId - Viewport Unique identifier\n   */\n  public removeViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.delete(viewportId);\n\n    // delete element from needsRender if element exist\n    this._needsRender.delete(element);\n\n    // I don' think there is any disadvantage to canceling the animation frame\n    // and resetting the flags on viewport's element removal, since the removeVIewportElement\n    // might be as a result of reEnabling the element (in re-enable we disable first), hence the need to render the\n    // new one while removing the old one\n    this._reset();\n  }\n\n  /**\n   * It tells the AnnotationRenderingEngine to render the viewport element the next\n   * time it renders.\n   *\n   * @param element - The element to render.\n   */\n  public renderViewport(element: HTMLDivElement): void {\n    this._setViewportsToBeRenderedNextFrame([element]);\n  }\n\n  /**\n   * _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _renderFlaggedViewports = () => {\n    this._throwIfDestroyed();\n\n    const elements = Array.from(this._viewportElements.values());\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (this._needsRender.has(element)) {\n        this._triggerRender(element);\n\n        // This viewport has been rendered, we can remove it from the set\n        this._needsRender.delete(element);\n\n        // If there is nothing left that is flagged for rendering, stop here\n        // and allow RAF to be called again\n        if (this._needsRender.size === 0) {\n          break;\n        }\n      }\n    }\n\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n\n    // Call render again which will use RAF to call this function asynchronously\n    // if there is any viewport that needs to be rendered because when\n    // `triggerRender` is called inside the render loop a listener can flag new\n    // viewports that need to be rendered and some of the viewports that were\n    // already rendered can be added back to `_needsRender`.\n    this._render();\n  };\n\n  private _setAllViewportsToBeRenderedNextFrame() {\n    const elements = [...this._viewportElements.values()];\n\n    elements.forEach((element) => {\n      this._needsRender.add(element);\n    });\n\n    this._renderFlaggedViewports();\n  }\n\n  private _setViewportsToBeRenderedNextFrame(elements: HTMLDivElement[]) {\n    const elementsEnabled = [...this._viewportElements.values()];\n\n    // Add the viewports to the set of flagged viewports\n    elements.forEach((element) => {\n      // only enabledElement need to render\n      if (elementsEnabled.indexOf(element) !== -1) {\n        this._needsRender.add(element);\n      }\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   * _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedViewports\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  _triggerRender(element) {\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      // Happens during testing, and isn't an issue as it just means there\n      // is overlap between shutdown and re-render\n      // console.warn('Element has been disabled');\n      return;\n    }\n\n    const renderingEngine = getRenderingEngine(\n      enabledElement.renderingEngineId\n    );\n    if (!renderingEngine) {\n      console.warn('rendering Engine has been destroyed');\n      return;\n    }\n\n    const enabledTools = getToolsWithModesForElement(element, [\n      Active,\n      Passive,\n      Enabled,\n    ]);\n\n    const { renderingEngineId, viewportId } = enabledElement;\n    const eventDetail: AnnotationRenderedEventDetail = {\n      element,\n      renderingEngineId,\n      viewportId,\n    };\n\n    // const enabledToolsWithAnnotations = enabledTools.filter((tool) => {\n    //   const annotations = getAnnotations(tool.getToolName(), {FrameOfReferenceUID});\n    //   return annotations && annotations.length;\n    // });\n\n    drawSvg(element, (svgDrawingHelper) => {\n      let anyRendered = false;\n      const handleDrawSvg = (tool) => {\n        if (tool.renderAnnotation) {\n          const rendered = tool.renderAnnotation(\n            enabledElement,\n            svgDrawingHelper\n          );\n          anyRendered = anyRendered || rendered;\n        }\n      };\n\n      /**\n       * We should be able to filter tools that don't have annotations, but\n       * currently some of tools have renderAnnotation method BUT\n       * don't keep annotation in the state, so if we do so, the tool will not be\n       * rendered.\n       */\n      enabledTools.forEach(handleDrawSvg);\n\n      if (anyRendered) {\n        triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n      }\n    });\n  }\n\n  /**\n   * _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n\n    this._setAllViewportsToBeRenderedNextFrame();\n  }\n}\n\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\n\n/**\n * It triggers the rendering of the annotations for the given HTML element using\n * the `AnnotationRenderingEngine`\n * @param element - The element to render the annotation on.\n */\nfunction triggerAnnotationRender(element: HTMLDivElement): void {\n  annotationRenderingEngine.renderViewport(element);\n}\n\nexport { annotationRenderingEngine, triggerAnnotationRender };\n\nexport default triggerAnnotationRender;\n","import type { Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\n\nexport function triggerAnnotationRenderForViewportIds(\n  renderingEngine: Types.IRenderingEngine,\n  viewportIdsToRender: string[]\n): void {\n  if (!viewportIdsToRender.length || !renderingEngine) {\n    return;\n  }\n\n  viewportIdsToRender.forEach((viewportId) => {\n    const viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n      console.warn(`Viewport not available for ${viewportId}`);\n      return;\n    }\n    const { element } = viewport;\n    triggerAnnotationRender(element);\n  });\n}\n\nexport default triggerAnnotationRenderForViewportIds;\n"],"names":["ELEMENT_CURSORS_MAP","Symbol","initElementCursor","element","cursor","_getElementCursors","_setElementCursor","cursors","style","MouseCursor","getDefinedCursor","getStyleProperty","resetElementCursor","hideElementCursor","map","WeakMap","Object","defineProperty","value","get","set","DEFINED_CURSORS","STANDARD_CURSORS","Set","constructor","name","fallback","this","getName","addFallbackStyleProperty","definedCursors","getDefinedCursors","mouseCursor","has","setDefinedCursor","context","symbol","Map","standardCursorNames","values","ImageMouseCursor","url","x","y","super","getUniqueInstanceName","Number","prefix","utilities","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","extend","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Probe","RectangleROI","TextMarker","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","base","assign","create","registerCursor","toolName","svgCursorNames","keys","STATE","AnnotationStyleStates","Highlighted","MODE","ToolModes","Active","SVGMouseCursor","pointer","color","urn","type","getCursorURN","descriptor","getDefinedSVGCursorDescriptor","options","URL","createObjectURL","svgString","createSVGIconWithPointer","createSVGIcon","Blob","createSVGIconBlob","createSVGIconUrl","createSVGMouseCursor","format","template","dictionary","dict","defined","prototype","hasOwnProperty","bind","replace","match","key","svgSize","Math","max","cursorName","console","log","setElementCursor","CursorNames","annotationUID","drawingElementType","nodeUID","attributes","svgNode","forEach","currentValue","getAttribute","newValue","undefined","removeAttribute","setAttribute","svgDrawingHelper","circleUID","center","radius","dataId","fill","width","lineWidth","lineDash","fillOpacity","strokeOpacity","strokeWidth","svgNodeHash","existingCircleElement","getSvgNode","cx","cy","r","stroke","setNodeTouched","newCircleElement","document","createElementNS","appendNode","ellipseUID","canvasCoordinates","existingEllipse","bottom","top","left","right","w","hypot","h","angle","atan2","PI","rx","ry","transform","svgEllipseElement","corner1","corner2","handleGroupUID","handle","uniqueIndex","handleRadius","opacity","Error","side","parseFloat","height","existingHandleElement","newHandleElement","handlePoints","i","drawLine","lineUID","start","end","isNaN","shadow","existingLine","dropShadowStyle","svgLayerElement","id","x1","y1","x2","y2","newLine","drawPolyline","polylineUID","points","length","fillColor","closePath","existingPolyLine","pointsAttribute","point","toFixed","firstPoint","newPolyLine","drawPath","pathUID","pointsArrays","Array","isArray","existingNode","numArrays","numPoints","j","d","newNode","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","querySelector","removeChild","getBBox","insertBefore","firstChild","bBox","textUID","textLines","position","padding","fontFamily","fontSize","background","textGroupBoundingBox","svgns","existingTextGroup","textElement","textSpans","from","children","textSpan","appendChild","textGroupAttributes","textGroup","noSelectStyle","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","linkUID","annotationAnchorPoints","refPoint","boundingBox","findClosestPoint","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","textBoxUID","textBoxPosition","textBox","mergedOptions","centering","canvasBoundingBox","drawRect","rectangleUID","_width","existingRect","tlhc","min","abs","svgRectElement","drawArrow","arrowUID","firstLine","cos","sin","secondLine","drawRedactionRect","ChangeTypes","Events","SegmentationRepresentations","StrategyCallbacks","Swipe","MouseBindings","KeyboardBindings","onImageRendered","evt","triggerAnnotationRender","detail","enable","addEventListener","Enums","IMAGE_RENDERED","disable","removeEventListener","MOUSE_CLICK","MOUSE_DOWN","MOUSE_DOWN_ACTIVATE","MOUSE_DOUBLE_CLICK","MOUSE_DRAG","MOUSE_MOVE","MOUSE_UP","MOUSE_WHEEL","KEY_DOWN","KEY_UP","Passive","Enabled","onCameraModified","getToolsWithModesForMouseEvent","tool","CAMERA_MODIFIED","onImageSpacingCalibrated","IMAGE_SPACING_CALIBRATED","TOUCH_START","TOUCH_START_ACTIVATE","TOUCH_DRAG","TOUCH_END","TOUCH_TAP","TOUCH_PRESS","eventTarget","ANNOTATION_COMPLETED","InterpolationManager","handleAnnotationCompleted","ANNOTATION_MODIFIED","handleAnnotationUpdate","ANNOTATION_REMOVED","handleAnnotationDelete","DEFAULT_CONTOUR_SEG_TOOLNAME","async","contourSegmentationCompletedListener","sourceAnnotation","annotation","viewport","viewports","viewportWithToolRegistered","find","isFreehandContourSegToolRegisteredForViewport","getViewport","contourSegmentationAnnotations","sourceAnnotationUID","getAllAnnotations","filter","targetAnnotation","isReferenceViewable","metadata","getValidContourSegmentationAnnotations","sourcePolyline","convertContourPolylineToCanvasSpace","data","contour","polyline","targetAnnotationInfo","sourceAABB","math","targetPolyline","targetAABB","aabbIntersect","lineSegmentsIntersect","isContourHole","findIntersectingContour","contourHoleProcessingEnabled","createPolylineHole","PlanarFreehandContourSegmentationTool","warn","sourceStartPoint","mergePolylines","contourHolesData","getChildAnnotations","holeAnnotation","getContourHolesData","unassignedContourHolesSet","reassignedContourHolesMap","assignHoleToPolyline","parentPolyline","holeData","holes","push","delete","newPolylines","mergedPolyline","newPolyline","contourHolesDataArray","contourHoleData","clearParentAnnotation","enabledElement","getEnabledElement","handles","segmentation","removeAnnotation","startPoint","canvasToWorld","endPoint","newAnnotation","originalToolName","cachedStats","closed","spline","highlighted","invalidated","isLocked","isVisible","interpolationUID","interpolationCompleted","targetWindingDirection","Clockwise","addAnnotation","addChildAnnotation","renderingEngine","updatedTtoolNames","viewportIdsToRender","getViewportIdsWithToolToRender","triggerAnnotationRenderForViewportIds","Promise","resolve","window","requestAnimationFrame","updateViewports","combinePolylines","silent","toolGroup","renderingEngineId","errorMessage","hasTool","getToolOptions","projectedPolyline","worldToCanvas","windingDirection","holeWindingDirection","reverse","updatedToolNames","mouseDoubleClickListener","mouseDownListener","mouseMoveListener","capture","preventGhostClick","touchStartListener","passive","wheelListener","toolGroupId","triggerSegmentationRender","segmentationId","modifiedSlicesToUse","representationData","toolGroupIds","labelmapRepresentationData","segmentationVolume","cache","getVolume","volumeId","imageData","vtkOpenGLTexture","slicesToUpdate","numSlices","getDimensions","setUpdatedFrame","modified","performVolumeLabelmapUpdate","toolGroupSegmentationRepresentations","viewportsInfo","getToolGroup","getViewportsInfo","representation","viewportId","getEnabledElementByIds","VolumeViewport","actorEntry","getActor","segmentationRepresentationUID","currentImageId","getCurrentImageId","segImageData","actor","getMapper","getInputData","imageIdReferenceMap","currentSegmentationImageId","segmentationImage","getImage","performStackLabelmapUpdate","Labelmap","getToolGroupIdsWithSegmentation","getSegmentationRepresentations","triggerSegmentationRepresentationModified","perToolGroupManualTriggers","_imageChangeEventListener","eventData","getToolGroupForViewport","segmentationRepresentations","LABELMAP","labelmapData","representationList","actors","getActors","includes","uid","segmentationActor","derivedImageId","segmentationImageData","setDerivedImage","scalarArray","numberOfComponents","Uint8Array","getNumberOfPoints","getPointData","setScalars","setInputData","derivedImage","dimensions","spacing","direction","getImageDataMetadata","currentImage","imageId","origin","currentOrigin","originToUse","setOrigin","removeActors","addImages","actorUID","callback","imageActor","getPixelData","setDimensions","setSpacing","setDirection","render","BaseVolumeViewport","STACK_NEW_IMAGE","annotationCompletedListener","contourSegmentationCompleted","removed","getRenderingEngines","viewportIds","getViewports","vp","getRenderingEngine","annotationRemovedListener","removeContourSegmentationAnnotation","csToolsInitialized","init","defaultConfiguration","_removeCornerstoneEventListeners","elementEnabledEvent","ELEMENT_ENABLED","elementDisabledEvent","ELEMENT_DISABLED","_addCornerstoneEventListeners","_removeCornerstoneToolsEventListeners","ANNOTATION_SELECTION_CHANGE","SEGMENTATION_MODIFIED","SEGMENTATION_DATA_MODIFIED","SEGMENTATION_REPRESENTATION_MODIFIED","SEGMENTATION_REPRESENTATION_REMOVED","destroy","annotationManager","getAnnotationManager","segmentationStateManager","getDefaultSegmentationStateManager","restoreAnnotations","resetState","AnnotationGroup","annotationUIDs","_isVisible","visibleFilter","unboundVisibleFilter","setVisible","baseEvent","getAnnotation","eventDetail","triggerEvent","findNearby","uids","index","indexOf","add","remove","clear","FrameOfReferenceSpecificAnnotationManager","getGroupKey","annotationGroupSelector","FrameOfReferenceUID","_imageVolumeModifiedHandler","frameOfReferenceSpecificAnnotations","annotations","getFramesOfReference","getAnnotations","groupKey","frameOfReferenceUID","frameOfReferenceAnnotations","toolSpecificAnnotations","getNumberOfAnnotations","total","checkAndDefineIsLockedProperty","checkAndDefineIsVisibleProperty","groupAnnotations","toolAnnotations","findIndex","splice","removeAnnotations","saveAnnotations","state","flat","getNumberOfAllAnnotations","count","removeAllAnnotations","IMAGE_VOLUME_MODIFIED","defaultFrameOfReferenceSpecificAnnotationManager","globalLockedAnnotationsSet","setAnnotationLocked","locked","makeEventDetail","lockedAnnotationsSet","added","lock","unlock","publish","unlockAllAnnotations","clearLockedAnnotationsSet","getAnnotationsLocked","isAnnotationLocked","getAnnotationsLockedCount","size","getOwnPropertyDescriptor","configurable","setIsLocked","getIsLocked","isExtensible","shouldDefineIsLockedProperty","enumerable","freeze","item","ANNOTATION_LOCK_CHANGE","selectedAnnotationUIDs","setAnnotationSelected","selected","preserveSelected","clearSelectionSet","selectAnnotation","deselectAnnotation","getAnnotationsSelected","getAnnotationsSelectedByToolName","isAnnotationSelected","getAnnotationsSelectedCount","selection","selectionSet","defaultManager","setAnnotationManager","resetAnnotationManager","manager","childUID","parentAnnotationUID","parentAnnotation","childUIDIndex","childAnnotationUIDs","childAnnotation","parentUID","getParentAnnotation","childAnnotationUID","HTMLDivElement","eventType","annotationManagerUID","invalidateAnnotation","currAnnotation","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","visible","show","annotationUIDsSet","lastHidden","hide","showAllAnnotations","isAnnotationVisible","setIsVisible","getIsVisible","shouldDefineIsVisibleProperty","lastVisible","hidden","ANNOTATION_VISIBILITY_CHANGE","_initializeConfig","colorHighlighted","colorSelected","colorLocked","textBoxVisibility","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","getAnnotationToolStyles","config","getViewportToolStyles","getToolGroupToolStyles","toolGroups","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","toolStyle","specifications","_getToolStyle","property","annotationToolStyles","viewportToolStyles","global","toolGroupToolStyles","globalStyles","toolStyles","styleSpecifier","mode","Selected","Locked","autoGenerated","AutoGenerated","Default","alternatives","list","getHierarchalPropertyStyles","triggerAnnotationAddedForElement","ANNOTATION_ADDED","triggerAnnotationAddedForFOR","getToolGroupsWithToolName","viewportsToRender","viewportInfo","triggerAnnotationModified","changeType","HandlesUpdated","triggerAnnotationCompleted","_triggerAnnotationCompleted","triggerContourAnnotationCompleted","getActiveSegmentationRepresentation","active","getActiveSegmentation","activeRepresentation","getSegmentation","setActiveSegmentationRepresentation","setSegmentationVisibility","visibility","segmentsHidden","indices","getUniqueSegmentIndices","getSegmentationVisibility","indicesSet","segmentIndex","setSegmentsVisibility","segmentIndices","segRepresentation","setSegmentVisibility","getSegmentVisibility","workerManager","getWebWorkerManager","polyDataCache","surfacesAABBCache","triggerWorkerProgress","progress","WEB_WORKER_PROGRESS","WorkerTypes","SURFACE_CLIPPING","clipAndCacheSurfacesForViewport","surfacesInfo","planesInfo","getSlicesClippingPlanes","currentSliceIndex","getSliceIndex","sort","a","b","sliceIndex","surfacesWithoutAABB","surface","surfacesAABB","executeTask","callbacks","aabb","updateSurfacesAABBCache","camera","getCamera","polyDataResults","polyDataResult","surfaceId","cacheId","viewPlaneNormal","pointToString","generateCacheId","lines","numberOfCells","actorCache","updatePolyDataCache","catch","error","getSurfaceActorUID","segmentationRepresentationUIDs","immediate","toolGroupSegRepresentations","toolGroupSegRepresentationUIDs","segRepresentationUIDsToRemove","invalidSegRepresentationUIDs","segRepresentationUID","JSON","stringify","segmentationDataUID","segmentationRepresentation","getSegmentationRepresentationByUID","removeSegmentationRepresentation","Contour","_removeSegmentation","segmentationInputArray","segmentationInput","segInput","addSegmentation","getGlobalConfig","setGlobalConfig","segmentationConfig","getGlobalRepresentationConfig","representationType","representations","setGlobalRepresentationConfig","globalConfig","getToolGroupSpecificConfig","setToolGroupSpecificConfig","segmentationRepresentationConfig","getSegmentationRepresentationSpecificConfig","setSegmentationRepresentationSpecificConfig","getSegmentSpecificConfig","setSegmentSpecificConfig","getRepresentationSpecificConfig","representationInput","addSegmentationRepresentation","toolGroupSpecificConfig","colorLUTIndexToUse","colorLUTOrIndexInput","colorLUTOrIndex","nextIndex","getNextColorLUTIndex","colorLUTToAdd","addColorLUT","getColorLUTIndex","toolGroupSpecificRepresentation","colorLUTIndex","segmentationRepresentationSpecificConfig","segmentSpecificConfig","polySeg","currentToolGroupConfig","mergedConfig","renderInactiveSegmentations","representationInputArray","toolGroupSpecificRepresentationConfig","promises","all","Surface","computeVolumeSegmentationFromStack","segmentationImageIds","additionalDetails","volumeLoader","convertStackToVolumeSegmentation","removeOriginal","removeImageLoadObject","addEventListenerOnce","SEGMENTATION_RENDERED","triggerSegmentationDataModified","updateSegmentationState","computeStackSegmentationFromVolume","isAllImagesCached","imageCacheOffsetMap","imageIds","every","volumeUsedInOtherViewports","getVolumeViewports","hasVolumeId","decache","referencedImageIds","startsWith","createImageIdReferenceMap","referencedVolumeId","referencedVolume","segmentationImageIdsToUse","convertToImageSlicesAndCache","_getImageIdReferenceMapForStackSegmentation","convertVolumeToStackSegmentation","removeVolumeLoadObject","updateStackSegmentationState","isSegmentIndexLocked","segmentsLocked","setSegmentIndexLocked","triggerSegmentationModified","getLockedSegments","colorLUT","unshift","setColorLUT","getColorForSegmentIndex","colorValue","setColorForSegmentIndex","colorReference","computedRepresentations","computeAndAddRepresentation","computeFunction","updateFunction","registerPolySegWorker","debouncedUpdateFunction","event","_debouncedSegmentationModified","_debouncedUpdateFunction","subscribeToSegmentationChanges","debounce","POLYSEG_CONTOUR_TO_SURFACE","createAndCacheSurfacesFromRaw","rawSurfacesData","findSegmentationRepresentationByUID","geometryIds","rawSurfaceData","slice","closedSurface","polys","geometryId","geometryLoader","SURFACE","geometryData","POLYSEG_LABELMAP_TO_SURFACE","computeSurfaceData","CONTOUR","contourRepresentationData","annotationUIDsMap","polylines","numPointsArray","results","convertContourToSurface","computeSurfaceFromContourSegmentation","computeSurfaceFromLabelmapSegmentation","isVolume","volume","scalarData","getScalarData","convertLabelmapToSurface","surfaces","allSettled","errors","p","status","Boolean","computeAndAddSurfaceRepresentation","surfacesObj","getGeometry","setPoints","setPolys","geometry","updateSurfaceData","POLYSEG_CONTOUR_TO_LABELMAP","convertContourToVolumeLabelmap","segmentationVolumeId","volumeProps","annotationUIDsInSegmentMap","_getAnnotationMapFromSegmentation","newScalarData","getScalars","setData","convertContourToStackLabelmap","getImageIds","getImageLoadObject","imageLoader","segmentationsInfo","segImageId","segImage","imagePlaneModule","metaData","IMAGE_PLANE","columnCosines","rowCosines","rowPixelSpacing","columnPixelSpacing","imagePositionPatient","rowCosineVec","colCosineVec","scanAxisNormal","newSegmentationsScalarData","referencedImageId","segmentationInfo","imageFrame","pixelData","annotationMap","annotationUIDsInSegment","hasChildAnnotations","holesPolyline","POLYSEG_SURFACE_TO_LABELMAP","computeLabelmapData","rawLabelmapData","convertFunction","result","computeLabelmapFromContourSegmentation","segmentsGeometryIds","defaultActor","getDefaultActor","surfaceRepresentationData","segmentsInfo","getPoints","getPolys","convertSurfaceToVolumeLabelmap","computeLabelmapFromSurfaceSegmentation","computeAndAddLabelmapRepresentation","extractContourData","segmentIndexMap","rawResults","intersectionInfo","split","_","_extractLineSegments","contourData","lineSegments","linesNumberOfPoints","pointsInLine","computeContourData","rawContourData","segmentIndexToSurfaceId","surfaceIdToSegmentIndex","computeContourFromSurfaceSegmentation","pointsAndPolys","toString","computeContourFromLabelmapSegmentation","contoursData","line","pointIndex","contourSegmentationAnnotation","getViewReference","currentSet","createAndAddContourSegmentationsFromClippedSurfaces","fillAlpha","computeAndAddContourRepresentation","conversionPaths","canComputeRequestedRepresentation","representationInfo","enabled","existingRepresentationTypes","supportedTypes","representationTypeData","validateFn","getExistingRepresentationTypes","some","existingRepresentationType","fromRepresentationType","toRepresentationType","canConvertFromTo","registered","registerWorker","Worker","maxWorkerInstances","autoTerminateOnIdle","idleTimeThreshold","setActiveSegmentIndex","activeSegmentIndex","invalidateBrushCursor","getActiveSegmentIndex","defaultLabelmapConfig","defaultContourConfig","defaultSurfaceConfig","initialDefaultState","segmentations","defaultSegmentationStateManager","getState","getToolGroups","getColorLUT","lutIndex","toolGroupSegRepresentationsWithConfig","getAllSegmentationRepresentations","toolGroupSegReps","entries","_handleActiveSegmentation","segmentationData","removeSegmentation","segData","removedSegmentationRepresentation","toolGroupSegmentations","toolGroupStateWithConfig","setSegmentationRepresentationConfig","removeColorLUT","recentlyAddedOrRemovedSegmentationRepresentation","isContourRepresentation","segmentLabels","label","getSegmentations","suppressEvents","getSegmentationIdRepresentations","allRepresentations","foundRepresentations","foundRepresentation","allToolGroupRepresentations","foundToolGroupIds","getSegmentSpecificRepresentationConfig","setSegmentSpecificRepresentationConfig","getToolGroupIdFromSegmentationRepresentationUID","triggerSegmentationRemoved","triggerSegmentationRepresentationRemoved","removeSegmentationRepresentations","SEGMENTATION_REMOVED","segmentationIds","_getViewportIndex","arr","ar","_containsViewport","synchronizerId","eventName","eventHandler","_viewportOptions","_onEvent","_ignoreFiredEvents","_targetViewports","currentTarget","_sourceViewports","s","fireEvent","_enabled","_eventName","_eventHandler","_options","_auxiliaryEventNames","auxiliaryEventNames","isDisabled","_hasSourceElements","setOptions","setEnabled","getOptions","addTarget","addSource","_updateDisableHandlers","getSourceViewports","getTargetViewports","removeSource","t","removeTarget","_getViewportElement","hasSourceViewport","hasTargetViewport","sourceViewport","sourceEvent","targetViewport","ex","then","vp1","vp2","unique","vps","concat","u","_getUniqueViewports","_remove","disableHandler","vUid","synchronizersFilteredByIds","synchronizers","synchronizer","notDisabled","sync","Synchronizer","pop","synchronizerIndex","re","toolGroupFilteredByIds","tg","addTool","ToolClass","toolAlreadyAdded","tools","toolClass","removeTool","addEnabledElement","svgLayer","svgLayerId","classList","pointerEvents","defs","feOffset","feColorMatrix","feBlend","_createSvgAnnotationLayer","viewportUid","renderingEngineUid","dataset","elementHash","svgNodeCache","_setSvgNodeCache","addViewportElement","enabledElements","VIEWPORT_ELEMENT","_removeViewportFromSynchronizers","getSynchronizersForViewport","_removeViewportFromToolGroup","removeViewports","_removeEnabledElement","foundElementIndex","el","elementDisabledEvt","_resetSvgNodeCache","internalViewportNode","_removeSvgNode","removeViewportElement","cancelActiveManipulations","toolsWithData","cancel","defaultState","isInteractingWithTool","isMultiPartToolActive","resetCornerstoneToolsState","resetSvgNodeCache","cameraSyncCallback","synchronizerInstance","cameraModifiedEvent","tViewport","setCamera","createCameraPositionSynchronizer","synchronizerName","createSynchronizer","presentationViewSyncCallback","_synchronizerInstance","_sourceEvent","presentationView","getViewPresentation","setView","createPresentationViewSynchronizer","voiSyncCallback","modifiedEvent","range","invertStateChanged","invert","colormap","tProperties","voiRange","syncInvertState","syncColormap","_actors","setProperties","StackViewport","createVOISynchronizer","VOI_MODIFIED","COLORMAP_MODIFIED","zoomPanSyncCallback","sViewport","syncZoom","srcZoom","getZoom","setZoom","syncPan","srcPan","getPan","setPan","createZoomPanSynchronizer","getSpatialRegistration","targetId","sourceId","imageSliceSyncCallback","disabled","imageId1","sourceImagePositionPatient","targetImageIds","viewport1","viewport2","viewPlaneNormal1","viewPlaneNormal2","dotProducts","areViewportsCoplanar","registrationMatrixMat4","getFrameOfReferenceUID","useInitialPosition","targetImagePositionPatientWithRegistrationMatrix","closestImageIdIndex2","targetPoint","reduce","closestImageIdIndex","distance","Infinity","imageIndexToSet","getCurrentImageIdIndex","jumpToSlice","imageIndex","VOLUME_NEW_IMAGE","createImageSliceSynchronizer","slabThicknessSyncCallback","slabThickness","getSlabThickness","setSlabThickness","createStackImageSynchronizer","AdvancedMagnifyToolActions","AdvancedMagnifyTool","toolProps","defaultToolProps","supportedInteractionTypes","configuration","magnifyingGlass","zoomFactor","zoomFactorList","autoPan","actions","showZoomFactorsList","method","bindings","mouseButton","Secondary","modifierKey","Shift","addNewAnnotation","currentPoints","worldPos","world","canvasPos","canvas","canvasHandlePoints","_getCanvasHandlePoints","viewUp","getReferencedImageId","magnifyViewportId","getToolName","sourceViewportId","isCanvasAnnotation","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","delta","len","preventDefault","onSetToolDisabled","dispose","isPointNearTool","canvasCoords","proximity","canvasTop","canvasBottom","canvasLeft","radiusPoint","toolSelectedCallback","editData","_activateModify","handleSelectedCallback","handleIndex","_endCallback","_deactivateModify","isDrawing","_dragDrawCallback","deltaPoints","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","renderAnnotation","renderStatus","filteredAnnotations","filterInteractableAnnotationsForElement","getStyle","activeHandleCanvasCoords","drawHandles","drawCircle","magnifyViewport","update","canvasCenterPos","canvasRadius","A","getInstance","Actions","canvasPoint","viewportElement","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","focus","onChangeCallback","createElement","stopPropagation","keyCode","which","toLowerCase","option","title","defaultSelected","AnnotationEraserTool","preMouseDownCallback","_deleteNearbyAnnotations","preTouchStartCallback","interactionType","_toolInstances","annotationsToRemove","toolInstance","interactableAnnotations","RENDERING_DEFAULTS","CONSTANTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","viewportIndicators","panSize","referenceLinesCenterGapRadius","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","mobile","toolCenter","initializeViewport","focalPoint","_getAnnotations","cameraPosition","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","normal","clientWidth","clientHeight","_getViewportsInfo","resetCrosshairs","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","point1","normal2","point2","normal3","point3","firstPlane","secondPlane","thirdPlane","jumpWorld","_jump","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","_pointNearTool","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","getViewportIds","_autoPanViewportIfNecessary","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","previousActiveOperation","previousActiveViewportIds","near","getHandleNearImagePoint","_areViewportIdArraysEqual","canvasDiagonalLength","sqrt","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","buildFromDegree","rotate","worldUnitOrthoVectorFromCenter","slabThicknessValue","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","referenceColorCoordinates","circleRadius","_onNewVolume","e","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","otherViewportActors","sameScene","viewportsAnnotationsToUpdate","_applyDeltaShiftToSelectedViewportCameras","_dragCallback","dir1","dir2","centerCanvas","finalPointCanvas","originalPointCanvas","_isClockWise","round","rotationAxis","buildFromRadian","translate","otherViewportsIds","renderViewports","referenceAnnotations","viewportsIds","dotProd","projectedDelta","mod","currentPoint","lastPoints","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","getToolInstance","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","onSetToolActive","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","onSetToolPassive","onSetToolEnabled","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","VOLUME_VIEWPORT_NEW_VOLUME","toolCenterCanvas","pan","visiblePointCanvas","visiblePointWorld","deltaPointsWorld","updatedPosition","updatedFocalPoint","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","c","_applyDeltaShiftToViewportCamera","newFocalPoint","newPosition","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","getTargetId","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","_activateDraw","viewportProperties","getProperties","magnifyToolElement","magnifyElement","display","viewportInput","STACK","enableElement","setStack","parallelScale","pow","_dragEndCallback","disableElement","_deactivateDraw","OverlayMarkerType","ANNOTATED_CUBE","AXES","CUSTOM","OrientationMarkerTool","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","OVERLAY_MARKER_TYPES","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","resolution","polyDataURL","_resizeObservers","initViewports","_subscribeToViewportEvents","cleanUpData","resize","orientationMarker","orientationMarkers","updateViewport","CUBE","AXIS","VTPFILE","unsubscribe","unobserve","TOOLGROUP_VIEWPORT_ADDED","subscribeToElementResize","resizeObserver","ResizeObserver","setTimeout","observe","offscreenMultiRenderWindow","getRenderWindow","filterViewportsWithToolEnabled","getWidget","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","polyData","shallowCopy","getOutputData","setActiveScalars","mapper","setColorModeToDirectScalars","setMapper","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","toUpperCase","EPSILON","OverlayGridTool","sourceImageIds","_init","pointSets","calculateImageIdPointSets","viewportData","rows","columns","topLeft","topRight","bottomLeft","bottomRight","pointSet1","pointSet2","imageIdNormal","getImageIdNormal","isParallel","targetViewportPlane","targetData","initializeViewportData","pointSetsToUse","pointSetToUse","topBottomVec","isPerpendicular","lineStartsWorld","lineEndsWorld","lineStartWorld","lineEndWorld","vec1","vec2","dot","imageOrientationPatient","PanTool","touchDragCallback","mouseDragCallback","PlanarRotateTool","startPoints","currentPointWorld","startPointWorld","centerWorld","v1","v2","cross","rotAngle","rotMat","Float32Array","rotatedViewUp","rotation","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","dotProduct","newWorldPos","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","upper","lower","centerSpace","lineLength","plane","currentMousePosition","closestIndex","setImageIdIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","renderViewport","ReferenceLines","showFullDimension","getImageData","sourceViewportCanvasCornersInWorld","onSetToolConfiguration","getEnabledElementByViewportId","sourceViewPlaneNormal","topRightVec","newNormal","handleFullDimension","targetImage","getTargetIdImage","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","indexToWorld","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","offset","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","scaleSizeDisplayValue","scaleSizeUnits","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","actorEntries","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","canvasPoints","polyLineUID","actorWorldPointsMap","polyDataUtils","colorArray","colorComponentToString","component","componentString","floor","colorToString","getProperty","getColor","StackScrollTool","debounceIfNotLoaded","loop","deltaY","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","scroll","debounceLoading","numberOfSlices","getNumberOfSlices","offsetHeight","StackScrollMouseWheelTool","scrollSlabs","mouseWheelCallback","wheel","TrackballRotateTool","rotateIncrementDegrees","originalSampleDistance","getSampleDistance","setSampleDistance","cleanUp","once","resetCamera","_viewportAddedListener","disconnect","rotateCamera","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPointsCanvas","lastPointsCanvas","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","angleX","acos","sign","upVec","atV","rightV","forwardV","angleY","DIRECTIONS","VolumeRotateMouseWheelTool","cz","ax","ay","az","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","TypedArrayConstructor","Uint16Array","Int16Array","frame","buffer","_getMinMax","modality","newRange","viewportsContainingVolumeUID","isPreScaled","properties","Modality","scaling","preScale","scaled","scalingParameters","suvbw","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","windowWidth","windowCenter","imageDynamicRange","imageVolume","calculatedDynamicRange","BitsStored","metadataDynamicRange","_getImageDynamicRangeFromViewport","ratio","getRange","imageDataRange","voxel","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","initialMousePosWorld","dirVec","_dragParallelProjection","pinch","deltaDistance","k","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","scale","cappedParallelScale","thresholdExceeded","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","currentPointsList","parallelProjection","_panCallback","AngleTool","getTextLines","defaultGetTextLines","angleStartedNotYetCompleted","movingTextBox","canvasPoint1","canvasPoint2","line1","canvasPoint3","line2","worldPosDelta","getAnnotationStyle","_throttledCalculateCachedStats","_calculateCachedStats","getLinkedTextBoxStyle","canvasTextBoxCoords","drawLinkedTextBox","trailing","worldPos1","worldPos2","worldPos3","targetIds","cachedVolumeStats","roundNumber","String","fromCharCode","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","stopImmediatePropagation","updatedText","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","transformWorldToIndex","BidirectionalTool","distanceToPoint","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","dx","dy","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","unit","dataId1","dataId2","secondLineUID","getTextBoxCoordsCanvas","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","image","index3","index4","handles1","handles2","scale1","units","units1","scale2","units2","dist1","_calculateLength","dist2","lengthUnit","widthUnit","vector1","vector2","pos1","pos2","dz","CircleROITool","centerPointRadius","statsCalculator","BasicStatsCalculator","dXCanvas","dYCanvas","canvasEnd","canvasCorners","areaUnit","getStackViewports","referencedImageURI","hasImageURI","currentImageURI","area","mean","stdDev","radiusUnit","perimeter","topLeftCanvas","bottomRightCanvas","topLeftWorld","bottomRightWorld","hasPixelSpacing","pos1Index","pos2Index","boundsIJK","ellipseObj","xRadius","yRadius","zRadius","worldWidth","worldHeight","isEmptyArea","areaUnits","getCalibratedLengthUnitsAndScale","aspect","modalityUnitOptions","isSuvScaled","modalityUnit","pointsInShape","pointInShapeCallback","pointLPS","pointInEllipse","fast","statsCallback","stats","getStatistics","statsArray","array","radiusLine","areaLine","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","_mouseUpCallback","_mouseDownCallback","_mouseDragCallback","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","mid1","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","dist","DragProbeTool","postMouseDownCallback","postTouchStartCallback","EllipticalROITool","initialRotation","getRotation","getCanvasEllipseCorners","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","canvasWidth","canvasHeight","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","newHalfCanvasWidth","canvasRight","newHalfCanvasHeight","centerPoint","_getCanvasEllipseCenter","post2Index","ellipse","normalized","ellipseCanvasPoints","KeyImageTool","canvasPosition","createAnnotation","it","LengthTool","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","setupBaseEditData","scissors","nearestEdge","repeatInterpolation","interpolation","originalPoints","worldToSlice","sliceToWorld","handleSmoothing","lastPoint","hIndex","testPoint","startSearch","findPathToPoint","minPoint","findMinNearby","acceptedPath","path","addPoints","updateAnnotation","scissorsRight","InterpolationUpdated","renderAnnotationInstance","renderContext","showInterpolationPolyline","rendered","polylineCanvasPoints","isContourSegmentationTool","LivewireContourTool","contourHoleAdditionModifierKey","snapHandleNearby","decimate","epsilon","undo","proximitySquared","clearAnnotation","clearEditData","Completed","triggerChangeEvent","StatsUpdated","doubleClick","worldPosOriginal","controlPoints","currentPath","getControlPoints","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","pathPoints","prependPath","confirmedPath","getLastPoint","addControlPoint","_mouseMoveCallback","lastCanvasPoint","imgWidth","imgHeight","slicePoint","editHandle","rightPos","viewportImageData","vtkImageData","sliceImageData","sliceToIndexMatrix","indexToSliceMatrix","ijkPoint","startPos","createInstanceFromRawPixelData","currentPathNext","addPoint","confirmedPathRight","numHandles","previousHandle","nextHandle","previousIndex","slicePos","pathPointsLeft","pathPointsRight","appendPath","annotationStyle","canvasHandles","livewirePath","pointArray","imagePoints","updateContourPolyline","calculateStats","allowOpenContours","renderResult","ProbeTool","eventDispatchDetail","samplesPerPixel","yMultiple","zMultiple","baseIndex","imageURI","calibratedResults","hasEnhancedRegionValues","RectangleROITool","rect","_getRectangleImageCoordinates","bottomLeftCanvas","topRightCanvas","bottomLeftWorld","topRightWorld","point0","SplineContourSegmentationTool","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","SplineROITool","Cardinal","Class","CatmullRom","Linear","BSpline","drawPreviewEnabled","lastControlPointDeletionKeys","AddControlPoint","Primary","DeleteControlPoint","Ctrl","fireChangeOnUpdate","instance","isPointNearCurve","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","worldPoint","closeContour","addNewPoint","closestControlPoint","getClosestControlPointWithinDistance","moveAnnotation","_renderStats","textboxStyle","addControlPointCallback","splineType","splineConfig","_getSplineConfig","maxDist","closestPointInfo","getClosestPoint","addControlPointAtU","uValue","deleteControlPointCallback","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","maxX","canvasMaxX","maxY","canvasMaxY","minX","canvasMinX","minY","canvasMinY","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","throttle","SplineTypes","cancelAnnotation","annotationLocked","childAnnotations","join","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","getPolylinePoints","numControlPoints","previewPolylinePoints","getPreviewPolylinePoints","controlPointsConnectors","textbox","createInterpolatedSplineControl","increment","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","parseInt","setControlPoints","fixedResolution","fixedScale","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","values2","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldPos1Index","worldPos2Index","worldToIndexVec3","iMin","iMax","jMin","jMax","kMin","kMax","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","volumeActors","getVolumeActors","coloneIndex","substring","_getTargetStackUID","AnnotationDisplayTool","frameOfReference","VideoViewport","BaseTool","initialProps","strategies","defaultStrategy","activeStrategy","strategyOptions","Disabled","applyActiveStrategy","operationData","call","applyActiveStrategyCallback","callbackType","setConfiguration","newConfiguration","setActiveStrategy","strategyName","getTargetVolumeId","getClassName","getReferenceId","MAX_NUMBER_COLORS","labelMapConfigCache","getRepresentationRenderingConfig","cfun","ofun","polySegConversionInProgress","_getLabelmapConfig","toolGroupLabelmapConfig","segmentationRepresentationLabelmapConfig","isActiveLabelmap","segmentsLabelmapConfig","configToUse","fillAlphaInactive","outlineWidth","outlineWidthActive","outlineWidthInactive","renderFill","renderFillInactive","renderOutline","outlineOpacity","outlineOpacityInactive","_needsTransferFunctionUpdate","segmentColor","cacheUID","oldConfig","forceOpacityUpdate","forceColorUpdate","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","_addLabelmapToViewport","toolGroupConfig","renderingConfig","labelmapUID","defaultActorUID","isSameFrameOfReference","numColors","segmentSpecificLabelmapConfig","addRGBPoint","segmentOpacity","removePoint","addPointLong","setRGBTransferFunction","setClamping","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","outlineWidths","activeSegmentOutlineWidthDelta","setLabelOutlineThickness","setVisibility","_setLabelmapColorAndOpacity","renderImmediate","_removeLabelmapFromToolGroupViewports","RectangleROIThresholdTool","RectangleROIStartEndThresholdTool","numSlicesToPropagate","computePointsInsideVolume","startIndex","spacingInNormal","endIndex","_getEndSliceIndex","startSlice","endSlice","pointsInVolume","projectionPoints","projectionPointsImageIds","_computeProjectionPoints","calculatePointsInsideVolume","_computePointsInsideVolume","firstOrLastSlice","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","startWorld","indexToWorldVec3","endWorld","newProjectionPoints","newPoint","RectanglePoints","pointsInsideVolume","projectionPoint","worldProjectionPointIndex","endPos","halfSpacingInNormalDirection","imageIdIndex","dir","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","strategySpecificConfiguration","THRESHOLD","threshold","thresholdVolumeId","brushSize","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","AcceptPreview","RejectPreview","_previewData","timerStart","timer","NaN","isDrag","_editData","createEditData","Date","now","hoverData","_hoverData","createHoverData","getOperationData","OnInteractionStart","updateCursor","time","clearTimeout","rejectPreview","previewCallback","Preview","OnInteractionEnd","acceptPreview","activeSegmentationRepresentation","activeSegmentation","segmentLocking","CustomEvent","ERROR_EVENT","message","cancelable","dispatchEvent","volumes","referenceId","referencedVolumeIdToThreshold","getActiveSegmentationData","brushCursor","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","strategy","computeInnerCircleRadius","toolMetadata","brushCursorUID","dynamicRadiusInCanvas","circleUID1","CircleROIStartEndThresholdTool","newStartIndex","_getStartSliceIndex","isMiddleSlice","lineWidthToUse","worldCenterIndex","numSlicesToPropagateFromStart","_getImageIdIndex","pos","CircleScissorsTool","FILL_INSIDE","ERASE_INSIDE","isEqual","PaintFillTool","getDirection","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataPosition","framesModified","getFramesModified","boundaries","minJ","maxJ","seedIndex3D","getScalarDataPosition","z","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","RectangleScissorsTool","SegmentSelectTool","hoverTimeout","SelectMode","Border","searchRadius","hoverTimer","_setActiveSegment","Inside","activeSegmentationReps","_setActiveSegmentForType","hoveredSegmentIndex","getSegmentAtWorldPoint","getSegmentAtLabelmapBorder","getHoveredContourSegmentationAnnotation","v","SphereScissorsTool","isVolumeSegmentation","ContourWindingDirection","getViewportsForAnnotation","getEnabledElements","sourcePoints","minDistance","MAX_SAFE_INTEGER","sourcePoint","p1","p2","_distanceBetween","segmentIndicesCache","setSegmentationDirty","cached","isDirty","cachedResult","getCachedSegmentIndices","keySet","addVolumeSegmentIndices","segmentationImageId","addImageSegmentIndices","handleLabelmapSegmentation","getSegmentIndex","handleContourSegmentation","handleSurfaceSegmentation","segmentationRenderingEngine","_needsRender","_animationFrameSet","_animationFrameHandle","_renderFlaggedToolGroups","_throwIfDestroyed","_triggerRender","removeToolGroup","_reset","renderToolGroupSegmentations","_setToolGroupSegmentationToBeRenderedNextFrame","hasBeenDestroyed","_render","segmentationDisplayToolInstance","onSegmentationRender","renderSegmentation","cancelAnimationFrame","annotationRenderingEngine","_renderFlaggedViewports","elements","_viewportElements","_setViewportsToBeRenderedNextFrame","_setAllViewportsToBeRenderedNextFrame","elementsEnabled","enabledTools","draw","anyRendered","ANNOTATION_RENDERED"],"sourceRoot":""}