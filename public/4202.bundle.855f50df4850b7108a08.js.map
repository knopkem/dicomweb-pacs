{"version":3,"file":"4202.bundle.855f50df4850b7108a08.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-pmap/src/viewports/OHIFCornerstonePMAPViewport.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\n\r\nfunction OHIFCornerstonePMAPViewport(props: withAppTypes) {\r\n  const {\r\n    displaySets,\r\n    children,\r\n    viewportOptions,\r\n    displaySetOptions,\r\n    servicesManager,\r\n    extensionManager,\r\n  } = props;\r\n  const viewportId = viewportOptions.viewportId;\r\n  const { displaySetService, segmentationService, uiNotificationService, customizationService } =\r\n    servicesManager.services;\r\n\r\n  // PMAP viewport will always have a single display set\r\n  if (displaySets.length !== 1) {\r\n    throw new Error('PMAP viewport must have a single display set');\r\n  }\r\n\r\n  const LoadingIndicatorTotalPercent = customizationService.getCustomization(\r\n    'ui.loadingIndicatorTotalPercent'\r\n  );\r\n\r\n  const pmapDisplaySet = displaySets[0];\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const referencedDisplaySetRef = useRef(null);\r\n  const { viewports, activeViewportId } = viewportGrid;\r\n  const referencedDisplaySet = pmapDisplaySet.getReferenceDisplaySet();\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\r\n    referencedDisplaySet,\r\n    pmapDisplaySet\r\n  );\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n\r\n  const [pmapIsLoading, setPmapIsLoading] = useState(!pmapDisplaySet.isLoaded);\r\n\r\n  // Add effect to listen for loading complete\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n      evt => {\r\n        if (evt.pmapDisplaySet?.displaySetInstanceUID === pmapDisplaySet.displaySetInstanceUID) {\r\n          setPmapIsLoading(false);\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [pmapDisplaySet]);\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    displaySetOptions.unshift({});\r\n    const [pmapDisplaySetOptions] = displaySetOptions;\r\n\r\n    // Make sure `options` exists\r\n    pmapDisplaySetOptions.options = pmapDisplaySetOptions.options ?? {};\r\n\r\n    Object.assign(pmapDisplaySetOptions.options, {\r\n      colormap: {\r\n        name: 'rainbow_2',\r\n        opacity: [\r\n          { value: 0, opacity: 0 },\r\n          { value: 0.25, opacity: 0.25 },\r\n          { value: 0.5, opacity: 0.5 },\r\n          { value: 0.75, opacity: 0.75 },\r\n          { value: 0.9, opacity: 0.99 },\r\n        ],\r\n      },\r\n      voi: {\r\n        windowCenter: 50,\r\n        windowWidth: 100,\r\n      },\r\n    });\r\n\r\n    uiNotificationService.show({\r\n      title: 'Parametric Map',\r\n      type: 'warning',\r\n      message: 'The values are multiplied by 100 in the viewport for better visibility',\r\n    });\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        // Referenced + PMAP displaySets must be passed as parameter in this order\r\n        displaySets={[referencedDisplaySet, pmapDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: 'volume',\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n          presentationIds: viewportOptions.presentationIds,\r\n        }}\r\n        displaySetOptions={[{}, pmapDisplaySetOptions]}\r\n      ></Component>\r\n    );\r\n  }, [\r\n    extensionManager,\r\n    displaySetOptions,\r\n    props,\r\n    pmapDisplaySet,\r\n    viewportOptions.orientation,\r\n    viewportOptions.viewportId,\r\n  ]);\r\n\r\n  // Cleanup the PMAP viewport when the viewport is destroyed\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportId: activeViewportId,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, [activeViewportId, displaySetService, viewportGridService, viewports]);\r\n\r\n  let childrenWithProps = null;\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportId,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n        {pmapIsLoading && (\r\n          <LoadingIndicatorTotalPercent\r\n            className=\"h-full w-full\"\r\n            totalNumbers={null}\r\n            percentComplete={null}\r\n            loadingText=\"Loading Parametric Map...\"\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstonePMAPViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportId: PropTypes.string.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, pmapDisplaySet) {\r\n  const { SharedFunctionalGroupsSequence } = pmapDisplaySet.instance;\r\n\r\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\r\n    ? SharedFunctionalGroupsSequence[0]\r\n    : SharedFunctionalGroupsSequence;\r\n\r\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\r\n\r\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\r\n    ? PixelMeasuresSequence[0]\r\n    : PixelMeasuresSequence;\r\n\r\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness || SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstonePMAPViewport;\r\n"],"names":["OHIFCornerstonePMAPViewport","props","displaySets","children","viewportOptions","displaySetOptions","servicesManager","extensionManager","viewportId","displaySetService","segmentationService","uiNotificationService","customizationService","services","length","Error","LoadingIndicatorTotalPercent","getCustomization","pmapDisplaySet","viewportGrid","viewportGridService","useViewportGrid","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","pmapIsLoading","setPmapIsLoading","useState","isLoaded","useEffect","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","evt","displaySetInstanceUID","getCornerstoneViewport","useCallback","component","Component","getModuleEntry","unshift","pmapDisplaySetOptions","options","Object","assign","colormap","name","opacity","value","voi","windowCenter","windowWidth","show","title","type","message","React","_extends","viewportType","orientation","presentationIds","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","get","includes","setDisplaySetsForViewport","childrenWithProps","map","child","index","key","className","totalNumbers","percentComplete","loadingText","propTypes","PropTypes","isRequired","dataSource"],"sourceRoot":""}