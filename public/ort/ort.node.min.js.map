{
  "version": 3,
  "sources": ["../lib/wasm/binding/ort-wasm.js", "../lib/wasm/wasm-factory.ts", "../lib/wasm/wasm-utils.ts", "../lib/wasm/run-options.ts", "../lib/wasm/session-options.ts", "../lib/wasm/wasm-common.ts", "../lib/wasm/wasm-utils-load-file.ts", "../lib/wasm/wasm-core-impl.ts", "../lib/wasm/proxy-wrapper.ts", "../lib/wasm/session-handler-inference.ts", "../lib/backend-wasm.ts", "../lib/backend-wasm-inference.ts", "../lib/index.ts", "../lib/version.ts"],
  "sourcesContent": ["\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar f=moduleArg,k,l;f.ready=new Promise((a,b)=>{k=a;l=b});var aa=Object.assign({},f),ba=\"./this.program\",ca=\"object\"==typeof window,q=\"function\"==typeof importScripts,da=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=\"\",x,z,A;\nif(da){var fs=require(\"fs\"),B=require(\"path\");v=q?B.dirname(v)+\"/\":__dirname+\"/\";x=(a,b)=>{a=C(a)?new URL(a):B.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};A=a=>{a=x(a,!0);a.buffer||(a=new Uint8Array(a));return a};z=(a,b,c,e=!0)=>{a=C(a)?new URL(a):B.normalize(a);fs.readFile(a,e?void 0:\"utf8\",(g,h)=>{g?c(g):b(e?h.buffer:h)})};!f.thisProgram&&1<process.argv.length&&(ba=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);f.inspect=()=>\"[Emscripten Module object]\"}else if(ca||q)q?v=\nself.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),0!==v.indexOf(\"blob:\")?v=v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):v=\"\",x=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},q&&(A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),z=(a,b,c)=>{var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\n\"arraybuffer\";e.onload=()=>{200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)};var ea=console.log.bind(console),D=console.error.bind(console);Object.assign(f,aa);aa=null;\"object\"!=typeof WebAssembly&&E(\"no native wasm support detected\");var F,fa=!1,G,H,I,J,ha;\nfunction ia(){var a=F.buffer;f.HEAP8=G=new Int8Array(a);f.HEAP16=new Int16Array(a);f.HEAPU8=H=new Uint8Array(a);f.HEAPU16=new Uint16Array(a);f.HEAP32=I=new Int32Array(a);f.HEAPU32=J=new Uint32Array(a);f.HEAPF32=new Float32Array(a);f.HEAPF64=ha=new Float64Array(a)}var K=[],L=[],ja=[],M=0,N=null,O=null;function E(a){a=\"Aborted(\"+a+\")\";D(a);fa=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");l(a);throw a;}\nvar ka=a=>a.startsWith(\"data:application/octet-stream;base64,\"),C=a=>a.startsWith(\"file://\"),P;P=\"ort-wasm.wasm\";if(!ka(P)){var la=P;P=f.locateFile?f.locateFile(la,v):v+la}function ma(a){if(A)return A(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction na(a){if(ca||q){if(\"function\"==typeof fetch&&!C(a))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ma(a));if(z)return new Promise((b,c)=>{z(a,e=>b(new Uint8Array(e)),c)})}return Promise.resolve().then(()=>ma(a))}function oa(a,b,c){return na(a).then(e=>WebAssembly.instantiate(e,b)).then(e=>e).then(c,e=>{D(`failed to asynchronously prepare wasm: ${e}`);E(e)})}\nfunction pa(a,b){var c=P;return\"function\"!=typeof WebAssembly.instantiateStreaming||ka(c)||C(c)||da||\"function\"!=typeof fetch?oa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(e=>WebAssembly.instantiateStreaming(e,a).then(b,function(g){D(`wasm streaming compile failed: ${g}`);D(\"falling back to ArrayBuffer instantiation\");return oa(c,a,b)}))}\nvar Q,qa={919888:(a,b,c,e)=>{if(\"undefined\"==typeof f||!f.za)return 1;a=R(a>>>0);a.startsWith(\"./\")&&(a=a.substring(2));a=f.za.get(a);if(!a)return 2;b>>>=0;c>>>=0;if(b+c>a.byteLength)return 3;try{return H.set(a.subarray(b,b+c),e>>>0>>>0),0}catch{return 4}}};function ra(a){this.xa=a-24;this.Ha=function(b){J[this.xa+4>>>2>>>0]=b};this.Ga=function(b){J[this.xa+8>>>2>>>0]=b};this.Aa=function(b,c){this.Fa();this.Ha(b);this.Ga(c)};this.Fa=function(){J[this.xa+16>>>2>>>0]=0}}\nvar sa=0,ta=0,ua=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,va=(a,b,c)=>{b>>>=0;var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.buffer&&ua)return ua.decode(a.subarray(b,c));for(e=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))e+=String.fromCharCode((g&31)<<6|h);else{var m=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|m:(g&7)<<18|h<<12|m<<6|a[b++]&63;65536>g?e+=String.fromCharCode(g):(g-=65536,e+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else e+=String.fromCharCode(g)}return e},\nR=(a,b)=>(a>>>=0)?va(H,a,b):\"\",S=a=>{for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);127>=e?b++:2047>=e?b+=2:55296<=e&&57343>=e?(b+=4,++c):b+=3}return b},T=(a,b,c,e)=>{c>>>=0;if(!(0<e))return 0;var g=c;e=c+e-1;for(var h=0;h<a.length;++h){var m=a.charCodeAt(h);if(55296<=m&&57343>=m){var r=a.charCodeAt(++h);m=65536+((m&1023)<<10)|r&1023}if(127>=m){if(c>=e)break;b[c++>>>0]=m}else{if(2047>=m){if(c+1>=e)break;b[c++>>>0]=192|m>>6}else{if(65535>=m){if(c+2>=e)break;b[c++>>>0]=224|m>>12}else{if(c+3>=\ne)break;b[c++>>>0]=240|m>>18;b[c++>>>0]=128|m>>12&63}b[c++>>>0]=128|m>>6&63}b[c++>>>0]=128|m&63}}b[c>>>0]=0;return c-g},U=a=>0===a%4&&(0!==a%100||0===a%400),wa=[0,31,60,91,121,152,182,213,244,274,305,335],xa=[0,31,59,90,120,151,181,212,243,273,304,334],Ca=a=>{var b=S(a)+1,c=Ba(b);c&&T(a,H,c,b);return c},V=[],W={},Da=()=>{if(!X){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\n\"_\")+\".UTF-8\",_:ba||\"./this.program\"},b;for(b in W)void 0===W[b]?delete a[b]:a[b]=W[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);X=c}return X},X,Ea=[null,[],[]],Fa=[31,29,31,30,31,30,31,31,30,31,30,31],Ga=[31,28,31,30,31,30,31,31,30,31,30,31];function Ha(a){var b=Array(S(a)+1);T(a,b,0,b.length);return b}\nfunction Ia(a,b,c,e){function g(d,n,p){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<n;)d=p[0]+d;return d}function h(d,n){return g(d,n,\"0\")}function m(d,n){function p(ya){return 0>ya?-1:0<ya?1:0}var y;0===(y=p(d.getFullYear()-n.getFullYear()))&&0===(y=p(d.getMonth()-n.getMonth()))&&(y=p(d.getDate()-n.getDate()));return y}function r(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var n=d.ta;for(d=new Date((new Date(d.ua+1900,0,1)).getTime());0<n;){var p=d.getMonth(),y=(U(d.getFullYear())?Fa:Ga)[p];if(n>y-d.getDate())n-=y-d.getDate()+1,d.setDate(1),11>p?d.setMonth(p+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+n);break}}p=new Date(d.getFullYear()+1,0,4);n=r(new Date(d.getFullYear(),\n0,4));p=r(p);return 0>=m(n,d)?0>=m(p,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;e>>>=0;var t=J[e+40>>>2>>>0];e={Da:I[e>>>2>>>0],Ca:I[e+4>>>2>>>0],va:I[e+8>>>2>>>0],ya:I[e+12>>>2>>>0],wa:I[e+16>>>2>>>0],ua:I[e+20>>>2>>>0],oa:I[e+24>>>2>>>0],ta:I[e+28>>>2>>>0],Ia:I[e+32>>>2>>>0],Ba:I[e+36>>>2>>>0],Ea:t?R(t):\"\"};c=R(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\n\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in t)c=c.replace(new RegExp(u,\"g\"),t[u]);var za=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),Aa=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":d=>za[d.oa].substring(0,3),\"%A\":d=>za[d.oa],\n\"%b\":d=>Aa[d.wa].substring(0,3),\"%B\":d=>Aa[d.wa],\"%C\":d=>h((d.ua+1900)/100|0,2),\"%d\":d=>h(d.ya,2),\"%e\":d=>g(d.ya,2,\" \"),\"%g\":d=>w(d).toString().substring(2),\"%G\":d=>w(d),\"%H\":d=>h(d.va,2),\"%I\":d=>{d=d.va;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":d=>{for(var n=0,p=0;p<=d.wa-1;n+=(U(d.ua+1900)?Fa:Ga)[p++]);return h(d.ya+n,3)},\"%m\":d=>h(d.wa+1,2),\"%M\":d=>h(d.Ca,2),\"%n\":()=>\"\\n\",\"%p\":d=>0<=d.va&&12>d.va?\"AM\":\"PM\",\"%S\":d=>h(d.Da,2),\"%t\":()=>\"\\t\",\"%u\":d=>d.oa||7,\"%U\":d=>h(Math.floor((d.ta+7-d.oa)/7),\n2),\"%V\":d=>{var n=Math.floor((d.ta+7-(d.oa+6)%7)/7);2>=(d.oa+371-d.ta-2)%7&&n++;if(n)53==n&&(p=(d.oa+371-d.ta)%7,4==p||3==p&&U(d.ua)||(n=1));else{n=52;var p=(d.oa+7-d.ta-1)%7;(4==p||5==p&&U(d.ua%400-1))&&n++}return h(n,2)},\"%w\":d=>d.oa,\"%W\":d=>h(Math.floor((d.ta+7-(d.oa+6)%7)/7),2),\"%y\":d=>(d.ua+1900).toString().substring(2),\"%Y\":d=>d.ua+1900,\"%z\":d=>{d=d.Ba;var n=0<=d;d=Math.abs(d)/60;return(n?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":d=>d.Ea,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");\nfor(u in t)c.includes(u)&&(c=c.replace(new RegExp(u,\"g\"),t[u](e)));c=c.replace(/\\0\\0/g,\"%\");u=Ha(c);if(u.length>b)return 0;G.set(u,a>>>0);return u.length-1}\nvar La={a:function(a,b,c){a>>>=0;(new ra(a)).Aa(b>>>0,c>>>0);sa=a;ta++;throw sa;},e:function(){return 0},H:function(){},x:function(){},z:function(){},J:function(){return 0},F:function(){},A:function(){},E:function(){},g:function(){},y:function(){},v:function(){},G:function(){},w:function(){},k:()=>1,n:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);I[c>>>2>>>0]=a.getUTCSeconds();I[c+4>>>2>>>0]=a.getUTCMinutes();I[c+8>>>2>>>0]=a.getUTCHours();I[c+12>>>\n2>>>0]=a.getUTCDate();I[c+16>>>2>>>0]=a.getUTCMonth();I[c+20>>>2>>>0]=a.getUTCFullYear()-1900;I[c+24>>>2>>>0]=a.getUTCDay();I[c+28>>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},o:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);I[c>>>2>>>0]=a.getSeconds();I[c+4>>>2>>>0]=a.getMinutes();I[c+8>>>2>>>0]=a.getHours();I[c+12>>>2>>>0]=a.getDate();I[c+16>>>2>>>0]=a.getMonth();I[c+20>>>2>>>0]=a.getFullYear()-1900;I[c+24>>>2>>>0]=a.getDay();\nI[c+28>>>2>>>0]=(U(a.getFullYear())?wa:xa)[a.getMonth()]+a.getDate()-1|0;I[c+36>>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var e=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();I[c+32>>>2>>>0]=(b!=e&&a.getTimezoneOffset()==Math.min(e,b))|0},p:function(a){a>>>=0;var b=new Date(I[a+20>>>2>>>0]+1900,I[a+16>>>2>>>0],I[a+12>>>2>>>0],I[a+8>>>2>>>0],I[a+4>>>2>>>0],I[a>>>2>>>0],0),c=I[a+32>>>2>>>0],e=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),\nh=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),m=Math.min(h,g);0>c?I[a+32>>>2>>>0]=Number(g!=h&&m==e):0<c!=(m==e)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?m:g)-e)));I[a+24>>>2>>>0]=b.getDay();I[a+28>>>2>>>0]=(U(b.getFullYear())?wa:xa)[b.getMonth()]+b.getDate()-1|0;I[a>>>2>>>0]=b.getSeconds();I[a+4>>>2>>>0]=b.getMinutes();I[a+8>>>2>>>0]=b.getHours();I[a+12>>>2>>>0]=b.getDate();I[a+16>>>2>>>0]=b.getMonth();I[a+20>>>2>>>0]=b.getYear();a=b.getTime();isNaN(a)?(I[Ja()>>>2>>>0]=61,a=-1):\na/=1E3;return Ka((Q=a,1<=+Math.abs(Q)?0<Q?+Math.floor(Q/4294967296)>>>0:~~+Math.ceil((Q-+(~~Q>>>0))/4294967296)>>>0:0)),a>>>0},l:function(){return-52},m:function(){},t:function(a,b,c){function e(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}c>>>=0;var g=(new Date).getFullYear(),h=new Date(g,0,1),m=new Date(g,6,1);g=h.getTimezoneOffset();var r=m.getTimezoneOffset();J[a>>>0>>>2>>>0]=60*Math.max(g,r);I[b>>>0>>>2>>>0]=Number(g!=r);a=e(h);b=e(m);a=Ca(a);b=Ca(b);r<g?(J[c>>>2>>>0]=\na,J[c+4>>>2>>>0]=b):(J[c>>>2>>>0]=b,J[c+4>>>2>>>0]=a)},d:()=>{E(\"\")},B:function(a,b,c){a>>>=0;b>>>=0;c>>>=0;V.length=0;for(var e;e=H[b++>>>0];){var g=105!=e;g&=112!=e;c+=g&&c%8?4:0;V.push(112==e?J[c>>>2>>>0]:105==e?I[c>>>2>>>0]:ha[c>>>3>>>0]);c+=g?8:4}return qa[a].apply(null,V)},h:()=>Date.now(),u:function(){return 4294901760},b:()=>performance.now(),I:function(a,b,c){b>>>=0;return H.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},s:function(a){a>>>=0;var b=H.length;if(4294901760<a)return!1;for(var c=\n1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);var g=Math;e=Math.max(a,e);a:{g=(g.min.call(g,4294901760,e+(65536-e%65536)%65536)-F.buffer.byteLength+65535)/65536;try{F.grow(g);ia();var h=1;break a}catch(m){}h=void 0}if(h)return!0}return!1},C:function(a,b){a>>>=0;b>>>=0;var c=0;Da().forEach((e,g)=>{var h=b+c;g=J[a+4*g>>>2>>>0]=h;for(h=0;h<e.length;++h)G[g++>>>0>>>0]=e.charCodeAt(h);G[g>>>0>>>0]=0;c+=e.length+1});return 0},D:function(a,b){a>>>=0;b>>>=0;var c=Da();J[a>>>2>>>0]=c.length;var e=\n0;c.forEach(g=>e+=g.length+1);J[b>>>2>>>0]=e;return 0},f:()=>52,j:function(){return 52},q:function(){return 70},i:function(a,b,c,e){b>>>=0;c>>>=0;e>>>=0;for(var g=0,h=0;h<c;h++){var m=J[b>>>2>>>0],r=J[b+4>>>2>>>0];b+=8;for(var w=0;w<r;w++){var t=H[m+w>>>0],u=Ea[a];0===t||10===t?((1===a?ea:D)(va(u,0)),u.length=0):u.push(t)}g+=r}J[e>>>2>>>0]=g;return 0},r:Ia,c:function(a,b,c,e){return Ia(a>>>0,b>>>0,c>>>0,e>>>0)}},Y=function(){function a(c){Y=c.exports;Y=Ma();F=Y.K;ia();L.unshift(Y.L);M--;0==M&&(null!==\nN&&(clearInterval(N),N=null),O&&(c=O,O=null,c()));return Y}var b={a:La};M++;if(f.instantiateWasm)try{return f.instantiateWasm(b,a)}catch(c){D(`Module.instantiateWasm callback failed with error: ${c}`),l(c)}pa(b,function(c){a(c.instance)}).catch(l);return{}}();f._OrtInit=(a,b)=>(f._OrtInit=Y.M)(a,b);f._OrtGetLastError=(a,b)=>(f._OrtGetLastError=Y.N)(a,b);f._OrtCreateSessionOptions=(a,b,c,e,g,h,m,r,w,t)=>(f._OrtCreateSessionOptions=Y.O)(a,b,c,e,g,h,m,r,w,t);\nf._OrtAppendExecutionProvider=(a,b)=>(f._OrtAppendExecutionProvider=Y.P)(a,b);f._OrtAddFreeDimensionOverride=(a,b,c)=>(f._OrtAddFreeDimensionOverride=Y.Q)(a,b,c);f._OrtAddSessionConfigEntry=(a,b,c)=>(f._OrtAddSessionConfigEntry=Y.R)(a,b,c);f._OrtReleaseSessionOptions=a=>(f._OrtReleaseSessionOptions=Y.S)(a);f._OrtCreateSession=(a,b,c)=>(f._OrtCreateSession=Y.T)(a,b,c);f._OrtReleaseSession=a=>(f._OrtReleaseSession=Y.U)(a);f._OrtGetInputOutputCount=(a,b,c)=>(f._OrtGetInputOutputCount=Y.V)(a,b,c);\nf._OrtGetInputName=(a,b)=>(f._OrtGetInputName=Y.W)(a,b);f._OrtGetOutputName=(a,b)=>(f._OrtGetOutputName=Y.X)(a,b);f._OrtFree=a=>(f._OrtFree=Y.Y)(a);f._OrtCreateTensor=(a,b,c,e,g,h)=>(f._OrtCreateTensor=Y.Z)(a,b,c,e,g,h);f._OrtGetTensorData=(a,b,c,e,g)=>(f._OrtGetTensorData=Y._)(a,b,c,e,g);f._OrtReleaseTensor=a=>(f._OrtReleaseTensor=Y.$)(a);f._OrtCreateRunOptions=(a,b,c,e)=>(f._OrtCreateRunOptions=Y.aa)(a,b,c,e);f._OrtAddRunConfigEntry=(a,b,c)=>(f._OrtAddRunConfigEntry=Y.ba)(a,b,c);\nf._OrtReleaseRunOptions=a=>(f._OrtReleaseRunOptions=Y.ca)(a);f._OrtCreateBinding=a=>(f._OrtCreateBinding=Y.da)(a);f._OrtBindInput=(a,b,c)=>(f._OrtBindInput=Y.ea)(a,b,c);f._OrtBindOutput=(a,b,c,e)=>(f._OrtBindOutput=Y.fa)(a,b,c,e);f._OrtClearBoundOutputs=a=>(f._OrtClearBoundOutputs=Y.ga)(a);f._OrtReleaseBinding=a=>(f._OrtReleaseBinding=Y.ha)(a);f._OrtRunWithBinding=(a,b,c,e,g)=>(f._OrtRunWithBinding=Y.ia)(a,b,c,e,g);f._OrtRun=(a,b,c,e,g,h,m,r)=>(f._OrtRun=Y.ja)(a,b,c,e,g,h,m,r);\nf._OrtEndProfiling=a=>(f._OrtEndProfiling=Y.ka)(a);var Ja=()=>(Ja=Y.la)(),Ba=f._malloc=a=>(Ba=f._malloc=Y.ma)(a);f._free=a=>(f._free=Y.na)(a);var Ka=a=>(Ka=Y.pa)(a),Na=()=>(Na=Y.qa)(),Oa=a=>(Oa=Y.ra)(a),Pa=a=>(Pa=Y.sa)(a);function Ma(){var a=Y;a=Object.assign({},a);var b=e=>()=>e()>>>0,c=e=>g=>e(g)>>>0;a.la=b(a.la);a.ma=c(a.ma);a.qa=b(a.qa);a.sa=c(a.sa);return a}f.stackAlloc=Pa;f.stackSave=Na;f.stackRestore=Oa;f.UTF8ToString=R;f.stringToUTF8=(a,b,c)=>T(a,H,b,c);f.lengthBytesUTF8=S;var Z;\nO=function Qa(){Z||Ra();Z||(O=Qa)};function Ra(){if(!(0<M)){if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;){var a=f.preRun.shift();K.unshift(a)}for(;0<K.length;)K.shift()(f);if(!(0<M||Z||(Z=!0,f.calledRun=!0,fa))){for(;0<L.length;)L.shift()(f);for(k(f);0<ja.length;)ja.shift()(f)}}}Ra();\n\n\n  return moduleArg.ready\n}\n);\n})();\n;\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasm);\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as path from 'node:path';\nimport {Env} from 'onnxruntime-common';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nlet ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule>;\n\nif (!BUILD_DEFS.DISABLE_TRAINING) {\n  ortWasmFactory = require('./binding/ort-training-wasm-simd.js');\n} else {\n  ortWasmFactory =\n      BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n}\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (numThreads: number): boolean => {\n  // WebAssembly threads are set to 1 (single thread).\n  if (numThreads === 1) {\n    return false;\n  }\n\n  // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n  if (typeof SharedArrayBuffer === 'undefined') {\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      // eslint-disable-next-line no-console\n      console.warn(\n          'env.wasm.numThreads is set to ' + numThreads +\n          ', but this will not work unless you enable crossOriginIsolated mode. ' +\n          'See https://web.dev/cross-origin-isolation-guide/ for more info.');\n    }\n    return false;\n  }\n\n  // onnxruntime-web does not support multi-threads in Node.js.\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    // eslint-disable-next-line no-console\n    console.warn(\n        'env.wasm.numThreads is set to ' + numThreads +\n        ', however, currently onnxruntime-web does not support multi-threads in Node.js. ' +\n        'Please consider using onnxruntime-node for performance critical scenarios.');\n  }\n\n  try {\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useSimd) {\n    if (!BUILD_DEFS.DISABLE_TRAINING) {\n      return 'ort-training-wasm-simd.wasm';\n    }\n    return useThreads ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-simd.wasm';\n  } else {\n    return useThreads ? 'ort-wasm-threaded.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = isMultiThreadSupported(numThreads);\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      config.numThreads = numThreads;\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.numThreads) {\n                let numThreads = webnnOptions.numThreads;\n                // Just ignore invalid webnnOptions.numThreads.\n                if (typeof numThreads != 'number' || !Number.isInteger(numThreads) || numThreads < 0) {\n                  numThreads = 0;\n                }\n                const keyDataOffset = allocWasmString('numThreads', allocs);\n                const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            if (typeof ep !== 'string') {\n              const webgpuOptions = ep as InferenceSession.WebGpuExecutionProviderOption;\n              if (webgpuOptions?.preferredLayout) {\n                if (webgpuOptions.preferredLayout !== 'NCHW' && webgpuOptions.preferredLayout !== 'NHWC') {\n                  throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);\n                }\n                const keyDataOffset = allocWasmString('preferredLayout', allocs);\n                const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`);\n                }\n              }\n            }\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n/**\n * Check whether the given tensor type is supported by GPU buffer\n */\nexport const isGpuBufferSupportedType = (type: Tensor.Type): type is Tensor.GpuBufferDataTypes => type === 'float32' ||\n    type === 'int32' || type === 'int64' || type === 'bool' || type === 'float16' || type === 'uint32';\n\n/**\n * Map string data location to integer value\n */\nexport const dataLocationStringToEnum = (location: Tensor.DataLocation): number => {\n  switch (location) {\n    case 'none':\n      return 0;\n    case 'cpu':\n      return 1;\n    case 'cpu-pinned':\n      return 2;\n    case 'texture':\n      return 3;\n    case 'gpu-buffer':\n      return 4;\n    default:\n      throw new Error(`unsupported data location: ${location}`);\n  }\n};\n\n/**\n * Map integer data location to string value\n */\nexport const dataLocationEnumToString = (location: number): Tensor.DataLocation|undefined =>\n    (['none', 'cpu', 'cpu-pinned', 'texture', 'gpu-buffer'] as const)[location];\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as fs from 'fs';\nimport {readFile} from 'node:fs/promises';\n\n/**\n * Load a file into a Uint8Array.\n *\n * @param file - the file to load. Can be a URL/path, a Blob, an ArrayBuffer, or a Uint8Array.\n * @returns a Uint8Array containing the file data.\n */\nexport const loadFile = async(file: string|Blob|ArrayBufferLike|Uint8Array): Promise<Uint8Array> => {\n  if (typeof file === 'string') {\n    if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n      // load file into ArrayBuffer in Node.js\n      try {\n        return new Uint8Array(await readFile(file));\n      } catch (e) {\n        if (e.code === 'ERR_FS_FILE_TOO_LARGE') {\n          // file is too large, use fs.createReadStream instead\n          const stream = fs.createReadStream(file);\n          const chunks: Uint8Array[] = [];\n          for await (const chunk of stream) {\n            chunks.push(chunk);\n          }\n          return new Uint8Array(Buffer.concat(chunks));\n        }\n        throw e;\n      }\n    } else {\n      // load file into ArrayBuffer in browsers\n      const response = await fetch(file);\n      if (!response.ok) {\n        throw new Error(`failed to load external data file: ${file}`);\n      }\n      const contentLengthHeader = response.headers.get('Content-Length');\n      const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n      if (fileSize < 1073741824 /* 1GB */) {\n        // when Content-Length header is not set, we cannot determine the file size. We assume it is small enough to\n        // load into memory.\n        return new Uint8Array(await response.arrayBuffer());\n      } else {\n        // file is too large, use stream instead\n        if (!response.body) {\n          throw new Error(`failed to load external data file: ${file}, no response body.`);\n        }\n        const reader = response.body.getReader();\n\n        let buffer;\n        try {\n          // try to create ArrayBuffer directly\n          buffer = new ArrayBuffer(fileSize);\n        } catch (e) {\n          if (e instanceof RangeError) {\n            // use WebAssembly Memory to allocate larger ArrayBuffer\n            const pages = Math.ceil(fileSize / 65536);\n            buffer = new WebAssembly.Memory({initial: pages, maximum: pages}).buffer;\n          } else {\n            throw e;\n          }\n        }\n\n        let offset = 0;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const {done, value} = await reader.read();\n          if (done) {\n            break;\n          }\n          const chunkSize = value.byteLength;\n          const chunk = new Uint8Array(buffer, offset, chunkSize);\n          chunk.set(value);\n          offset += chunkSize;\n        }\n        return new Uint8Array(buffer, 0, fileSize);\n      }\n    }\n\n  } else if (file instanceof Blob) {\n    return new Uint8Array(await file.arrayBuffer());\n  } else if (file instanceof Uint8Array) {\n    return file;\n  } else {\n    return new Uint8Array(file);\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableInternalBuffer, SerializableSessionMetadata, SerializableTensorMetadata, TensorMetadata} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {dataLocationStringToEnum, getTensorElementSize, isGpuBufferSupportedType, logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\nimport {loadFile} from './wasm-utils-load-file';\n\n// #region Initializations\n\n/**\n * There are 4 different \"initialization\" steps for ORT. They happen in different places and different time.\n *\n * 1. JavaScript initialization for onnxruntime-common and onnxruntime-web.\n *    This is the first initialization step. In this step, onnxruntime-web calls onnxruntime-common's registerBackend()\n * function multiple times to register all the available backends. The backend registration is very fast. It only\n * registers the backend name with the uninitialized backend object. No heavy initialization is done in this step.\n *    Refer to web/lib/index.ts for the backend registration.\n *\n * 2. WebAssembly artifact initialization.\n *    This happens when any registered wasm backend is used for the first time (ie. `ort.InferenceSession.create()` or\n * `ort.TrainingSession.create()` is called). In this step, onnxruntime-web does the followings:\n *     - create a proxy worker and make sure the proxy worker is ready to receive messages, if proxy is enabled.\n *     - perform feature detection, locate correct WebAssembly artifact path and call the Emscripten generated\n * JavaScript code to initialize the WebAssembly runtime.\n *         - if proxy is enabled, this step happens in the proxy worker using message 'init-wasm'.\n *         - downloading the 'ort-wasm{...}.wasm' file is done in this step.\n *         - if multi-thread is enabled, one or more webworker will be created to initialize the PThread threadpool.\n *\n * 3. ORT environment initialization.\n *    This happens after step 2. In this step, onnxruntime-web performs ONNX Runtime environment initialization.\n * Function `_OrtInit()` is called in this step.\n *     - if proxy is enabled, this step happens in the proxy worker using message 'init-ort'.\n *     - logging level (ort.env.logLevel) and thread number (ort.env.wasm.numThreads) are set in this step.\n *\n * 4. Session initialization.\n *    This happens when `ort.InferenceSession.create()` or `ort.TrainingSession.create()` is called. Unlike the first 3\n * steps (they only called once), this step will be done for each session. In this step, onnxruntime-web does the\n * followings:\n *    If the parameter is a URL:\n *    - download the model data from the URL.\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - dereference the model buffer. This step allows the original ArrayBuffer to be garbage collected.\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *    If the parameter is a Uint8Array object:\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *\n */\n\n/**\n * initialize ORT environment.\n *\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n};\n\n/**\n * perform EP specific initialization.\n *\n * @param env\n * @param epName\n */\nexport const initEp = async(env: Env, epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WEBGPU && epName === 'webgpu') {\n    // perform WebGPU availability check\n    if (typeof navigator === 'undefined' || !navigator.gpu) {\n      throw new Error('WebGPU is not supported in current environment');\n    }\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error(\n          'Failed to get GPU adapter. You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.');\n    }\n\n    if (!env.wasm.simd) {\n      throw new Error(\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP');\n    }\n\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env, adapter);\n  }\n};\n\n// #endregion Initializations\n\n/**\n * valid data locations for input/output tensors.\n */\ntype SupportedTensorDataLocationForInputOutput = 'cpu'|'cpu-pinned'|'gpu-buffer';\n\ntype IOBindingState = {\n  /**\n   * the handle of IO binding.\n   */\n  readonly handle: number;\n\n  /**\n   * the preferred location for each output tensor.\n   *\n   * value is one of 'cpu', 'cpu-pinned', 'gpu-buffer'.\n   */\n  readonly outputPreferredLocations: readonly SupportedTensorDataLocationForInputOutput[];\n\n  /**\n   * enum value of the preferred location for each output tensor.\n   */\n  readonly outputPreferredLocationsEncoded: readonly number[];\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded; bindingState\n */\ntype SessionMetadata = [\n  inferenceSessionId: number, inputNamesUTF8Encoded: number[], outputNamesUTF8Encoded: number[],\n  bindingState: IOBindingState|null\n];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * allocate the memory and memcpy the external buffer.\n *\n * @param model - the external buffer containing the model data. Must not be the same buffer as the WASM heap.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const copyFromExternalBuffer = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session from a model data buffer.\n *\n * @param modelData - either a Uint8Array object representing the model data, or a 2-elements tuple containing the\n *     pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSession = async(\n    modelData: Uint8Array|SerializableInternalBuffer,\n    options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  let modelDataOffset: number, modelDataLength: number;\n  const wasm = getInstance();\n\n  if (Array.isArray(modelData)) {\n    // if model data is an array, it must be a 2-elements tuple containing the pointer and size of the model data\n    [modelDataOffset, modelDataLength] = modelData;\n  } else if (modelData.buffer === wasm.HEAPU8.buffer) {\n    // if model data uses the same buffer as the WASM heap, we don't need to copy it.\n    [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n  } else {\n    // otherwise, copy the model data to the WASM heap.\n    [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n  }\n\n  let sessionHandle = 0;\n  let sessionOptionsHandle = 0;\n  let ioBindingHandle = 0;\n  let allocs: number[] = [];\n  const inputNamesUTF8Encoded = [];\n  const outputNamesUTF8Encoded = [];\n\n  try {\n    [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n    if (options?.externalData && wasm.mountExternalData) {\n      const loadingPromises = [];\n      for (const file of options.externalData) {\n        const path = typeof file === 'string' ? file : file.path;\n        loadingPromises.push(loadFile(typeof file === 'string' ? file : file.data).then(data => {\n          wasm.mountExternalData!(path, data);\n        }));\n      }\n\n      // wait for all external data files to be loaded\n      await Promise.all(loadingPromises);\n    }\n\n    sessionHandle = wasm._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n    if (sessionHandle === 0) {\n      checkLastError('Can\\'t create a session.');\n    }\n\n    const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n    const inputNames = [];\n    const outputNames = [];\n    const outputPreferredLocations: SupportedTensorDataLocationForInputOutput[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError('Can\\'t get an input name.');\n      }\n      inputNamesUTF8Encoded.push(name);\n      inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError('Can\\'t get an output name.');\n      }\n      outputNamesUTF8Encoded.push(name);\n      const nameString = wasm.UTF8ToString(name);\n      outputNames.push(nameString);\n\n      if (!BUILD_DEFS.DISABLE_WEBGPU) {\n        const location = typeof options?.preferredOutputLocation === 'string' ?\n            options.preferredOutputLocation :\n            options?.preferredOutputLocation?.[nameString] ?? 'cpu';\n        if (location !== 'cpu' && location !== 'cpu-pinned' && location !== 'gpu-buffer') {\n          throw new Error(`Not supported preferred output location: ${location}.`);\n        }\n        outputPreferredLocations.push(location);\n      }\n    }\n\n    // use IO binding only when at least one output is preffered to be on GPU.\n    let bindingState: IOBindingState|null = null;\n    if (!BUILD_DEFS.DISABLE_WEBGPU && outputPreferredLocations.some(l => l === 'gpu-buffer')) {\n      ioBindingHandle = wasm._OrtCreateBinding(sessionHandle);\n      if (ioBindingHandle === 0) {\n        checkLastError('Can\\'t create IO binding.');\n      }\n\n      bindingState = {\n        handle: ioBindingHandle,\n        outputPreferredLocations,\n        outputPreferredLocationsEncoded: outputPreferredLocations.map(l => dataLocationStringToEnum(l)),\n      };\n    }\n\n    activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n    return [sessionHandle, inputNames, outputNames];\n  } catch (e) {\n    inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n    if (ioBindingHandle !== 0) {\n      wasm._OrtReleaseBinding(ioBindingHandle);\n    }\n\n    if (sessionHandle !== 0) {\n      wasm._OrtReleaseSession(sessionHandle);\n    }\n    throw e;\n  } finally {\n    wasm._free(modelDataOffset);\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n\n    // unmount external data if necessary\n    wasm.unmountExternalData?.();\n  }\n};\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n\n  if (ioBindingState) {\n    wasm._OrtReleaseBinding(ioBindingState.handle);\n  }\n\n  wasm.jsepUnregisterBuffers?.(sessionId);\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\nexport const prepareInputOutputTensor =\n    (tensor: TensorMetadata|null, tensorHandles: number[], allocs: number[], sessionId: number, index: number):\n        void => {\n          if (!tensor) {\n            tensorHandles.push(0);\n            return;\n          }\n\n          const wasm = getInstance();\n\n          const dataType = tensor[0];\n          const dims = tensor[1];\n          const location = tensor[3];\n\n          let rawData: number;\n          let dataByteLength: number;\n\n          if (dataType === 'string' && location === 'gpu-buffer') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n\n          if (location === 'gpu-buffer') {\n            const gpuBuffer = tensor[2].gpuBuffer as GPUBuffer;\n            const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType))!;\n            dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n            rawData = wasm.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n          } else {\n            const data = tensor[2];\n\n            if (Array.isArray(data)) {\n              // string tensor\n              dataByteLength = 4 * data.length;\n              rawData = wasm._malloc(dataByteLength);\n              allocs.push(rawData);\n              let dataIndex = rawData / 4;\n              for (let i = 0; i < data.length; i++) {\n                if (typeof data[i] !== 'string') {\n                  throw new TypeError(`tensor data at index ${i} is not a string`);\n                }\n                wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n              }\n            } else {\n              dataByteLength = data.byteLength;\n              rawData = wasm._malloc(dataByteLength);\n              allocs.push(rawData);\n              wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n            }\n          }\n\n          const stack = wasm.stackSave();\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\n          try {\n            let dimIndex = dimsOffset / 4;\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n            const tensor = wasm._OrtCreateTensor(\n                tensorDataTypeStringToEnum(dataType), rawData, dataByteLength, dimsOffset, dims.length,\n                dataLocationStringToEnum(location));\n            if (tensor === 0) {\n              checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);\n            }\n            tensorHandles.push(tensor);\n          } finally {\n            wasm.stackRestore(stack);\n          }\n        };\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputTensors: TensorMetadata[], outputIndices: number[],\n    outputTensors: Array<TensorMetadata|null>, options: InferenceSession.RunOptions): Promise<TensorMetadata[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputTensorHandles: number[] = [];\n  const outputTensorHandles: number[] = [];\n  const inputOutputAllocs: number[] = [];\n\n  const beforeRunStack = wasm.stackSave();\n  const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n  const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n  const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n  const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n    }\n\n    // create output tensors\n    for (let i = 0; i < outputCount; i++) {\n      prepareInputOutputTensor(\n          outputTensors[i], outputTensorHandles, inputOutputAllocs, sessionId, inputCount + outputIndices[i]);\n    }\n\n    let inputValuesIndex = inputValuesOffset / 4;\n    let inputNamesIndex = inputNamesOffset / 4;\n    let outputValuesIndex = outputValuesOffset / 4;\n    let outputNamesIndex = outputNamesOffset / 4;\n    for (let i = 0; i < inputCount; i++) {\n      wasm.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n      wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n    }\n    for (let i = 0; i < outputCount; i++) {\n      wasm.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n      wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n    }\n\n    if (!BUILD_DEFS.DISABLE_WEBGPU && ioBindingState) {\n      const {handle, outputPreferredLocations, outputPreferredLocationsEncoded} = ioBindingState;\n\n      if (inputNamesUTF8Encoded.length !== inputCount) {\n        throw new Error(`input count from feeds (${\n            inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);\n      }\n\n      // process inputs\n      for (let i = 0; i < inputCount; i++) {\n        const index = inputIndices[i];\n        const errorCode = await wasm._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n        if (errorCode !== 0) {\n          checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);\n        }\n      }\n\n      // process pre-allocated outputs\n      for (let i = 0; i < outputCount; i++) {\n        const index = outputIndices[i];\n        const location = outputTensors[i]?.[3];  // undefined means output is not pre-allocated.\n\n        if (location) {\n          // output is pre-allocated. bind the tensor.\n          const errorCode = wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);\n          }\n        } else {\n          // output is not pre-allocated. reset preferred location.\n          const errorCode =\n              wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n          }\n        }\n      }\n    }\n\n    let errorCode: number;\n\n    if (!BUILD_DEFS.DISABLE_WEBGPU && ioBindingState) {\n      errorCode = await wasm._OrtRunWithBinding(\n          sessionHandle, ioBindingState.handle, outputCount, outputValuesOffset, runOptionsHandle);\n    } else {\n      errorCode = await wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n    }\n\n    if (errorCode !== 0) {\n      checkLastError('failed to call OrtRun().');\n    }\n\n    const output: TensorMetadata[] = [];\n\n    for (let i = 0; i < outputCount; i++) {\n      const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n      if (tensor === outputTensorHandles[i]) {\n        // output tensor is pre-allocated. no need to copy data.\n        output.push(outputTensors[i]!);\n        continue;\n      }\n\n      const beforeGetTensorDataStack = wasm.stackSave();\n      // stack allocate 4 pointer value\n      const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n      let keepOutputTensor = false;\n      let type: Tensor.Type|undefined, dataOffset = 0;\n      try {\n        const errorCode = wasm._OrtGetTensorData(\n            tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n        if (errorCode !== 0) {\n          checkLastError(`Can't access output tensor data on index ${i}.`);\n        }\n        let tensorDataIndex = tensorDataOffset / 4;\n        const dataType = wasm.HEAPU32[tensorDataIndex++];\n        dataOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n        const dims = [];\n        for (let i = 0; i < dimsLength; i++) {\n          dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n        }\n        wasm._OrtFree(dimsOffset);\n\n        const size = dims.reduce((a, b) => a * b, 1);\n        type = tensorDataTypeEnumToString(dataType);\n\n        const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n\n        if (type === 'string') {\n          if (preferredLocation === 'gpu-buffer') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n          const stringData: string[] = [];\n          let dataIndex = dataOffset / 4;\n          for (let i = 0; i < size; i++) {\n            const offset = wasm.HEAPU32[dataIndex++];\n            const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n            stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n          }\n          output.push([type, dims, stringData, 'cpu']);\n        } else {\n          // If a certain output's preferred location is GPU but the tensor is empty, we still need to create a CPU\n          // tensor for it. There is no mapping GPU buffer for an empty tensor.\n          if (preferredLocation === 'gpu-buffer' && size > 0) {\n            const gpuBuffer = wasm.jsepGetBuffer(dataOffset);\n            const elementSize = getTensorElementSize(dataType);\n            if (elementSize === undefined || !isGpuBufferSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type, dims, {\n                gpuBuffer,\n                download: wasm.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                dispose: () => {\n                  wasm._OrtReleaseTensor(tensor);\n                }\n              },\n              'gpu-buffer'\n            ]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data, 'cpu']);\n          }\n        }\n      } finally {\n        wasm.stackRestore(beforeGetTensorDataStack);\n        if (type === 'string' && dataOffset) {\n          wasm._free(dataOffset);\n        }\n        if (!keepOutputTensor) {\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n    }\n\n    if (ioBindingState) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n    }\n\n    return output;\n  } finally {\n    wasm.stackRestore(beforeRunStack);\n\n    inputTensorHandles.forEach(v => wasm._OrtReleaseTensor(v));\n    outputTensorHandles.forEach(v => wasm._OrtReleaseTensor(v));\n    inputOutputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensorMetadata[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && 'buffer' in data) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableInternalBuffer, SerializableSessionMetadata, SerializableTensorMetadata, TensorMetadata} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\ntype PromiseCallbacks<T = void> = [resolve: (result: T) => void, reject: (reason: unknown) => void];\nlet initWasmCallbacks: PromiseCallbacks;\nconst queuedCallbacks: Map<OrtWasmMessage['type'], Array<PromiseCallbacks<unknown>>> = new Map();\n\nconst enqueueCallbacks = (type: OrtWasmMessage['type'], callbacks: PromiseCallbacks<unknown>): void => {\n  const queue = queuedCallbacks.get(type);\n  if (queue) {\n    queue.push(callbacks);\n  } else {\n    queuedCallbacks.set(type, [callbacks]);\n  }\n};\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ep':\n    case 'copy-from':\n    case 'create':\n    case 'release':\n    case 'run':\n    case 'end-profiling': {\n      const callbacks = queuedCallbacks.get(ev.data.type)!;\n      if (ev.data.err) {\n        callbacks.shift()![1](ev.data.err);\n      } else {\n        callbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    }\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyAndOrtRuntime = async(): Promise<void> => {\n  if (initialized) {\n    return;\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initWasm()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initWasm()\\' failed.');\n  }\n\n  initializing = true;\n\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n\n      const workerUrl = URL.createObjectURL(new Blob(\n          [\n            // This require() function is handled by esbuild plugin to load file content as string.\n            // eslint-disable-next-line @typescript-eslint/no-require-imports\n            require('./proxy-worker/main')\n          ],\n          {type: 'text/javascript'}));\n      proxyWorker = new Worker(workerUrl, {name: 'ort-wasm-proxy-worker'});\n      proxyWorker.onerror = (ev: ErrorEvent) => reject(ev);\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      URL.revokeObjectURL(workerUrl);\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    try {\n      await initializeWebAssembly(env.wasm);\n      await core.initRuntime(env);\n      initialized = true;\n    } catch (e) {\n      aborted = true;\n      throw e;\n    } finally {\n      initializing = false;\n    }\n  }\n};\n\nexport const initializeOrtEp = async(epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('init-ep', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'init-ep', in : {epName, env}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initEp(env, epName);\n  }\n};\n\nexport const copyFromExternalBuffer = async(buffer: Uint8Array): Promise<SerializableInternalBuffer> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableInternalBuffer>((resolve, reject) => {\n      enqueueCallbacks('copy-from', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'copy-from', in : {buffer}};\n      proxyWorker!.postMessage(message, [buffer.buffer]);\n    });\n  } else {\n    return core.copyFromExternalBuffer(buffer);\n  }\n};\n\nexport const createSession =\n    async(model: SerializableInternalBuffer|Uint8Array, options?: InferenceSession.SessionOptions):\n        Promise<SerializableSessionMetadata> => {\n          if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n            // check unsupported options\n            if (options?.preferredOutputLocation) {\n              throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n            }\n            ensureWorker();\n            return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n              enqueueCallbacks('create', [resolve, reject]);\n              const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n              const transferable: Transferable[] = [];\n              if (model instanceof Uint8Array) {\n                transferable.push(model.buffer);\n              }\n              proxyWorker!.postMessage(message, transferable);\n            });\n          } else {\n            return core.createSession(model, options);\n          }\n        };\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('release', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: TensorMetadata[], outputIndices: number[],\n    outputs: Array<TensorMetadata|null>, options: InferenceSession.RunOptions): Promise<TensorMetadata[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check inputs location\n    if (inputs.some(t => t[3] !== 'cpu')) {\n      throw new Error('input tensor on GPU is not supported for proxy.');\n    }\n    // check outputs location\n    if (outputs.some(t => t)) {\n      throw new Error('pre-allocated output tensor is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableTensorMetadata[]>((resolve, reject) => {\n      enqueueCallbacks('run', [resolve, reject]);\n      const serializableInputs = inputs as SerializableTensorMetadata[];  // every input is on CPU.\n      const message: OrtWasmMessage =\n          {type: 'run', in : {sessionId, inputIndices, inputs: serializableInputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(serializableInputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, outputs, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('end-profiling', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, InferenceSessionHandler, SessionHandler, Tensor, TRACE_FUNC_BEGIN, TRACE_FUNC_END} from 'onnxruntime-common';\n\nimport {SerializableInternalBuffer, TensorMetadata} from './proxy-messages';\nimport {copyFromExternalBuffer, createSession, endProfiling, releaseSession, run} from './proxy-wrapper';\nimport {isGpuBufferSupportedType} from './wasm-common';\nimport {loadFile} from './wasm-utils-load-file';\n\nexport const encodeTensorMetadata = (tensor: Tensor, getName: () => string): TensorMetadata => {\n  switch (tensor.location) {\n    case 'cpu':\n      return [tensor.type, tensor.dims, tensor.data, 'cpu'];\n    case 'gpu-buffer':\n      return [tensor.type, tensor.dims, {gpuBuffer: tensor.gpuBuffer}, 'gpu-buffer'];\n    default:\n      throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);\n  }\n};\n\nexport const decodeTensorMetadata = (tensor: TensorMetadata): Tensor => {\n  switch (tensor[3]) {\n    case 'cpu':\n      return new Tensor(tensor[0], tensor[2], tensor[1]);\n    case 'gpu-buffer': {\n      const dataType = tensor[0];\n      if (!isGpuBufferSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);\n      }\n      const {gpuBuffer, download, dispose} = tensor[2];\n      return Tensor.fromGpuBuffer(gpuBuffer, {dataType, dims: tensor[1], download, dispose});\n    }\n    default:\n      throw new Error(`invalid data location: ${tensor[3]}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements InferenceSessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async fetchModelAndCopyToWasmMemory(path: string): Promise<SerializableInternalBuffer> {\n    // fetch model from url and move to wasm heap.\n    return copyFromExternalBuffer(await loadFile(path));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    TRACE_FUNC_BEGIN();\n    let model: Parameters<typeof createSession>[0];\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        model = await loadFile(pathOrBuffer);\n      } else {\n        // browser\n        // fetch model and copy to wasm heap.\n        model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);\n      }\n    } else {\n      model = pathOrBuffer;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n    TRACE_FUNC_END();\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputArray: Array<Tensor|null> = [];\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputArray.push(tensor);\n      outputIndices.push(index);\n    });\n\n    const inputs =\n        inputArray.map((t, i) => encodeTensorMetadata(t, () => `input \"${this.inputNames[inputIndices[i]]}\"`));\n    const outputs = outputArray.map(\n        (t, i) => t ? encodeTensorMetadata(t, () => `output \"${this.outputNames[outputIndices[i]]}\"`) : null);\n\n    const results = await run(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);\n\n    const resultMap: SessionHandler.ReturnType = {};\n    for (let i = 0; i < results.length; i++) {\n      resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);\n    }\n    TRACE_FUNC_END();\n    return resultMap;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {cpus} from 'node:os';\nimport {Backend, env, InferenceSession, InferenceSessionHandler} from 'onnxruntime-common';\n\nimport {initializeOrtEp, initializeWebAssemblyAndOrtRuntime} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler-inference';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.trace !== 'boolean') {\n    env.wasm.trace = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    // Web: when crossOriginIsolated is false, SharedArrayBuffer is not available so WebAssembly threads will not work.\n    // Node.js: onnxruntime-web does not support multi-threads in Node.js.\n    if ((typeof self !== 'undefined' && !self.crossOriginIsolated) ||\n        (typeof process !== 'undefined' && process.versions && process.versions.node)) {\n      env.wasm.numThreads = 1;\n    }\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nexport class OnnxruntimeWebAssemblyBackend implements Backend {\n  /**\n   * This function initializes the WebAssembly backend.\n   *\n   * This function will be called only once for each backend name. It will be called the first time when\n   * `ort.InferenceSession.create()` is called with a registered backend name.\n   *\n   * @param backendName - the registered backend name.\n   */\n  async init(backendName: string): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyAndOrtRuntime();\n\n    // performe EP specific initialization\n    await initializeOrtEp(backendName);\n  }\n  createInferenceSessionHandler(path: string, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n  createInferenceSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n  async createInferenceSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OnnxruntimeWebAssemblyBackend} from './backend-wasm';\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow bundler to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow bundler remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport * as ort from 'onnxruntime-common';\nexport default ort;\n\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = BUILD_DEFS.DISABLE_TRAINING ? require('./backend-wasm-inference').wasmBackend :\n                                                    require('./backend-wasm-training').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  if (!BUILD_DEFS.DISABLE_WEBNN) {\n    registerBackend('webnn', wasmBackend, 9);\n  }\n}\n\nObject.defineProperty(env.versions, 'web', {value: version, enumerable: true});\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.17.1';\n"],
  "mappings": "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",
  "names": ["require_ort_wasm", "__commonJSMin", "exports", "module", "ortWasm", "_scriptDir", "moduleArg", "f", "k", "l", "a", "b", "aa", "ba", "ca", "q", "da", "v", "x", "z", "A", "fs", "B", "C", "c", "e", "g", "h", "ea", "D", "E", "F", "fa", "G", "H", "I", "J", "ha", "ia", "K", "L", "ja", "M", "N", "O", "ka", "P", "la", "ma", "na", "oa", "pa", "Q", "qa", "R", "ra", "sa", "ta", "ua", "va", "m", "S", "T", "r", "U", "wa", "xa", "Ca", "Ba", "V", "W", "Da", "X", "Ea", "Fa", "Ga", "Ha", "Ia", "d", "n", "p", "ya", "y", "w", "t", "u", "za", "Aa", "La", "Ja", "Ka", "Y", "Ma", "Na", "Oa", "Pa", "Z", "Qa", "Ra", "ortWasmFactory", "ortWasmFactoryThreaded", "wasm", "initialized", "initializing", "aborted", "isMultiThreadSupported", "isSimdSupported", "getWasmFileName", "initializeWebAssembly", "getInstance", "init_wasm_factory", "__esmMin", "numThreads", "useSimd", "useThreads", "flags", "timeout", "simd", "wasmPaths", "wasmPrefixOverride", "wasmFileName", "wasmPathOverride", "isTimeout", "tasks", "resolve", "reject", "fileName", "scriptDirectory", "module", "what", "allocWasmString", "iterateExtraOptions", "checkLastError", "init_wasm_utils", "__esmMin", "init_wasm_factory", "data", "allocs", "wasm", "getInstance", "dataLength", "dataOffset", "options", "prefix", "seen", "handler", "key", "value", "name", "message", "stack", "paramsOffset", "errorCode", "errorMessagePointer", "errorMessage", "setRunOptions", "init_run_options", "__esmMin", "init_wasm_factory", "init_wasm_utils", "options", "wasm", "getInstance", "runOptionsHandle", "allocs", "runOptions", "tagDataOffset", "allocWasmString", "checkLastError", "iterateExtraOptions", "key", "value", "keyDataOffset", "valueDataOffset", "e", "alloc", "getGraphOptimzationLevel", "getExecutionMode", "appendDefaultOptions", "setExecutionProviders", "setSessionOptions", "init_session_options", "__esmMin", "init_wasm_factory", "init_wasm_utils", "graphOptimizationLevel", "executionMode", "options", "session", "ep", "sessionOptionsHandle", "executionProviders", "allocs", "epName", "webnnOptions", "keyDataOffset", "allocWasmString", "valueDataOffset", "getInstance", "checkLastError", "numThreads", "webgpuOptions", "epNameDataOffset", "wasm", "sessionOptions", "logIdDataOffset", "logSeverityLevel", "logVerbosityLevel", "optimizedModelFilePathOffset", "name", "value", "nameOffset", "iterateExtraOptions", "key", "e", "alloc", "tensorDataTypeStringToEnum", "tensorDataTypeEnumToString", "getTensorElementSize", "tensorTypeToTypedArrayConstructor", "logLevelStringToEnum", "isGpuBufferSupportedType", "dataLocationStringToEnum", "init_wasm_common", "__esmMin", "type", "typeProto", "dateType", "logLevel", "location", "fs", "import_promises", "loadFile", "init_wasm_utils_load_file", "__esmMin", "file", "e", "stream", "chunks", "chunk", "response", "contentLengthHeader", "fileSize", "reader", "buffer", "pages", "offset", "done", "value", "chunkSize", "initOrt", "initRuntime", "initEp", "activeSessions", "getSessionInputOutputCount", "copyFromExternalBuffer", "createSession", "releaseSession", "prepareInputOutputTensor", "run", "endProfiling", "init_wasm_core_impl", "__esmMin", "init_run_options", "init_session_options", "init_wasm_common", "init_wasm_factory", "init_wasm_utils", "init_wasm_utils_load_file", "numThreads", "loggingLevel", "getInstance", "checkLastError", "env", "logLevelStringToEnum", "epName", "sessionHandle", "wasm", "stack", "dataOffset", "model", "modelDataOffset", "modelData", "options", "modelDataLength", "sessionOptionsHandle", "ioBindingHandle", "allocs", "inputNamesUTF8Encoded", "outputNamesUTF8Encoded", "setSessionOptions", "loadingPromises", "file", "path", "loadFile", "data", "inputCount", "outputCount", "inputNames", "outputNames", "outputPreferredLocations", "i", "name", "nameString", "bindingState", "e", "buf", "alloc", "sessionId", "session", "ioBindingState", "tensor", "tensorHandles", "index", "dataType", "dims", "location", "rawData", "dataByteLength", "gpuBuffer", "elementSizeInBytes", "getTensorElementSize", "tensorDataTypeStringToEnum", "a", "b", "dataIndex", "allocWasmString", "dimsOffset", "dimIndex", "d", "dataLocationStringToEnum", "inputIndices", "inputTensors", "outputIndices", "outputTensors", "runOptionsHandle", "runOptionsAllocs", "inputTensorHandles", "outputTensorHandles", "inputOutputAllocs", "beforeRunStack", "inputValuesOffset", "inputNamesOffset", "outputValuesOffset", "outputNamesOffset", "setRunOptions", "inputValuesIndex", "inputNamesIndex", "outputValuesIndex", "outputNamesIndex", "errorCode", "output", "beforeGetTensorDataStack", "tensorDataOffset", "keepOutputTensor", "type", "tensorDataIndex", "dimsLength", "size", "tensorDataTypeEnumToString", "preferredLocation", "stringData", "offset", "maxBytesToRead", "elementSize", "isGpuBufferSupportedType", "typedArrayConstructor", "tensorTypeToTypedArrayConstructor", "v", "p", "profileFileName", "import_onnxruntime_common", "initializing", "initialized", "aborted", "scriptSrc", "initializeWebAssemblyAndOrtRuntime", "initializeOrtEp", "copyFromExternalBuffer", "createSession", "releaseSession", "run", "endProfiling", "init_proxy_wrapper", "__esmMin", "init_wasm_core_impl", "init_wasm_factory", "initializeWebAssembly", "initRuntime", "e", "epName", "initEp", "buffer", "model", "options", "sessionId", "inputIndices", "inputs", "outputIndices", "outputs", "import_onnxruntime_common", "encodeTensorMetadata", "decodeTensorMetadata", "OnnxruntimeWebAssemblySessionHandler", "init_session_handler_inference", "__esmMin", "init_proxy_wrapper", "init_wasm_common", "init_wasm_utils_load_file", "tensor", "getName", "dataType", "isGpuBufferSupportedType", "gpuBuffer", "download", "dispose", "path", "copyFromExternalBuffer", "loadFile", "pathOrBuffer", "options", "model", "createSession", "releaseSession", "feeds", "fetches", "inputArray", "inputIndices", "kvp", "name", "index", "outputArray", "outputIndices", "inputs", "t", "i", "outputs", "results", "run", "resultMap", "endProfiling", "import_node_os", "import_onnxruntime_common", "initializeFlags", "OnnxruntimeWebAssemblyBackend", "init_backend_wasm", "__esmMin", "init_proxy_wrapper", "init_session_handler_inference", "numCpuLogicalCores", "backendName", "initializeWebAssemblyAndOrtRuntime", "initializeOrtEp", "pathOrBuffer", "options", "handler", "OnnxruntimeWebAssemblySessionHandler", "backend_wasm_inference_exports", "__export", "wasmBackend", "init_backend_wasm_inference", "__esmMin", "init_backend_wasm", "OnnxruntimeWebAssemblyBackend", "lib_exports", "__export", "lib_default", "__toCommonJS", "__reExport", "ort", "import_onnxruntime_common", "version", "lib_default", "ort", "wasmBackend", "version"]
}
