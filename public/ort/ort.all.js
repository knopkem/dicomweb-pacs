/*! For license information please see ort.all.js.LICENSE.txt */
"use strict";var ort=(()=>{var __create=Object.create,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty,__esm=(t,e)=>function(){return t&&(e=(0,t[__getOwnPropNames(t)[0]])(t=0)),e},__commonJS=(t,e)=>function(){return e||(0,t[__getOwnPropNames(t)[0]])((e={exports:{}}).exports,e),e.exports},__export=(t,e)=>{for(var n in e)__defProp(t,n,{get:e[n],enumerable:!0})},__copyProps=(t,e,n,B)=>{if(e&&"object"==typeof e||"function"==typeof e)for(let s of __getOwnPropNames(e))__hasOwnProp.call(t,s)||s===n||__defProp(t,s,{get:()=>e[s],enumerable:!(B=__getOwnPropDesc(e,s))||B.enumerable});return t},__toESM=(t,e,n)=>(n=null!=t?__create(__getProtoOf(t)):{},__copyProps(!e&&t&&t.__esModule?n:__defProp(n,"default",{value:t,enumerable:!0}),t)),__toCommonJS=t=>__copyProps(__defProp({},"__esModule",{value:!0}),t),backends,backendsSortedByPriority,registerBackend,resolveBackend,init_backend_impl=__esm({"common/dist/esm/backend-impl.js"(){backends=new Map,backendsSortedByPriority=[],registerBackend=(t,e,n)=>{if(!e||"function"!=typeof e.init||"function"!=typeof e.createInferenceSessionHandler)throw new TypeError("not a valid backend");{const B=backends.get(t);if(void 0===B)backends.set(t,{backend:e,priority:n});else{if(B.priority>n)return;if(B.priority===n&&B.backend!==e)throw new Error(`cannot register backend "${t}" using priority ${n}`)}if(n>=0){const e=backendsSortedByPriority.indexOf(t);-1!==e&&backendsSortedByPriority.splice(e,1);for(let e=0;e<backendsSortedByPriority.length;e++)if(backends.get(backendsSortedByPriority[e]).priority<=n)return void backendsSortedByPriority.splice(e,0,t);backendsSortedByPriority.push(t)}}},resolveBackend=async t=>{const e=0===t.length?backendsSortedByPriority:t,n=[];for(const t of e){const e=backends.get(t);if(e){if(e.initialized)return e.backend;if(e.aborted)continue;const B=!!e.initPromise;try{return B||(e.initPromise=e.backend.init(t)),await e.initPromise,e.initialized=!0,e.backend}catch(s){B||n.push({name:t,err:s}),e.aborted=!0}finally{delete e.initPromise}}}throw new Error(`no available backend found. ERR: ${n.map((t=>`[${t.name}] ${t.err}`)).join(", ")}`)}}}),init_backend=__esm({"common/dist/esm/backend.js"(){init_backend_impl()}}),version,init_version=__esm({"common/dist/esm/version.js"(){version="1.17.1"}}),logLevelValue,env,init_env_impl=__esm({"common/dist/esm/env-impl.js"(){init_version(),logLevelValue="warning",env={wasm:{},webgl:{},webgpu:{},versions:{common:version},set logLevel(t){if(void 0!==t){if("string"!=typeof t||-1===["verbose","info","warning","error","fatal"].indexOf(t))throw new Error(`Unsupported logging level: ${t}`);logLevelValue=t}},get logLevel(){return logLevelValue}},Object.defineProperty(env,"logLevel",{enumerable:!0})}}),env2,init_env=__esm({"common/dist/esm/env.js"(){init_env_impl(),env2=env}}),tensorToDataURL,tensorToImageData,init_tensor_conversion_impl=__esm({"common/dist/esm/tensor-conversion-impl.js"(){tensorToDataURL=(t,e)=>{const n="undefined"!=typeof document?document.createElement("canvas"):new OffscreenCanvas(1,1);n.width=t.dims[3],n.height=t.dims[2];const B=n.getContext("2d");if(null!=B){let s,F;void 0!==e?.tensorLayout&&"NHWC"===e.tensorLayout?(s=t.dims[2],F=t.dims[3]):(s=t.dims[3],F=t.dims[2]);const Q=void 0!==e?.format?e.format:"RGB",U=e?.norm;let i,a;void 0===U||void 0===U.mean?i=[255,255,255,255]:"number"==typeof U.mean?i=[U.mean,U.mean,U.mean,U.mean]:(i=[U.mean[0],U.mean[1],U.mean[2],0],void 0!==U.mean[3]&&(i[3]=U.mean[3])),void 0===U||void 0===U.bias?a=[0,0,0,0]:"number"==typeof U.bias?a=[U.bias,U.bias,U.bias,U.bias]:(a=[U.bias[0],U.bias[1],U.bias[2],0],void 0!==U.bias[3]&&(a[3]=U.bias[3]));const l=F*s;let c=0,g=l,d=2*l,I=-1;"RGBA"===Q?(c=0,g=l,d=2*l,I=3*l):"RGB"===Q?(c=0,g=l,d=2*l):"RBG"===Q&&(c=0,d=l,g=2*l);for(let e=0;e<F;e++)for(let n=0;n<s;n++){const s=(t.data[c++]-a[0])*i[0],F=(t.data[g++]-a[1])*i[1],Q=(t.data[d++]-a[2])*i[2],U=-1===I?255:(t.data[I++]-a[3])*i[3];B.fillStyle="rgba("+s+","+F+","+Q+","+U+")",B.fillRect(n,e,1,1)}if("toDataURL"in n)return n.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},tensorToImageData=(t,e)=>{const n="undefined"!=typeof document?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let B;if(null==n)throw new Error("Can not access image data");{let s,F,Q;void 0!==e?.tensorLayout&&"NHWC"===e.tensorLayout?(s=t.dims[2],F=t.dims[1],Q=t.dims[3]):(s=t.dims[3],F=t.dims[2],Q=t.dims[1]);const U=void 0!==e&&void 0!==e.format?e.format:"RGB",i=e?.norm;let a,l;void 0===i||void 0===i.mean?a=[255,255,255,255]:"number"==typeof i.mean?a=[i.mean,i.mean,i.mean,i.mean]:(a=[i.mean[0],i.mean[1],i.mean[2],255],void 0!==i.mean[3]&&(a[3]=i.mean[3])),void 0===i||void 0===i.bias?l=[0,0,0,0]:"number"==typeof i.bias?l=[i.bias,i.bias,i.bias,i.bias]:(l=[i.bias[0],i.bias[1],i.bias[2],0],void 0!==i.bias[3]&&(l[3]=i.bias[3]));const c=F*s;if(void 0!==e&&(void 0!==e.format&&4===Q&&"RGBA"!==e.format||3===Q&&"RGB"!==e.format&&"BGR"!==e.format))throw new Error("Tensor format doesn't match input tensor dims");const g=4;let d=0,I=1,o=2,r=3,u=0,b=c,C=2*c,p=-1;"RGBA"===U?(u=0,b=c,C=2*c,p=3*c):"RGB"===U?(u=0,b=c,C=2*c):"RBG"===U&&(u=0,C=c,b=2*c),B=n.createImageData(s,F);for(let e=0;e<F*s;d+=g,I+=g,o+=g,r+=g,e++)B.data[d]=(t.data[u++]-l[0])*a[0],B.data[I]=(t.data[b++]-l[1])*a[1],B.data[o]=(t.data[C++]-l[2])*a[2],B.data[r]=-1===p?255:(t.data[p++]-l[3])*a[3]}return B}}}),bufferToTensor,tensorFromImage,tensorFromTexture,tensorFromGpuBuffer,tensorFromPinnedBuffer,init_tensor_factory_impl=__esm({"common/dist/esm/tensor-factory-impl.js"(){init_tensor_impl(),bufferToTensor=(t,e)=>{if(void 0===t)throw new Error("Image buffer must be defined");if(void 0===e.height||void 0===e.width)throw new Error("Image height and width must be defined");if("NHWC"===e.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");const{height:n,width:B}=e,s=e.norm??{mean:255,bias:0};let F,Q;F="number"==typeof s.mean?[s.mean,s.mean,s.mean,s.mean]:[s.mean[0],s.mean[1],s.mean[2],s.mean[3]??255],Q="number"==typeof s.bias?[s.bias,s.bias,s.bias,s.bias]:[s.bias[0],s.bias[1],s.bias[2],s.bias[3]??0];const U=void 0!==e.format?e.format:"RGBA",i=void 0!==e.tensorFormat&&void 0!==e.tensorFormat?e.tensorFormat:"RGB",a=n*B,l="RGBA"===i?new Float32Array(4*a):new Float32Array(3*a);let c=4,g=0,d=1,I=2,o=3,r=0,u=a,b=2*a,C=-1;"RGB"===U&&(c=3,g=0,d=1,I=2,o=-1),"RGBA"===i?C=3*a:"RBG"===i?(r=0,b=a,u=2*a):"BGR"===i&&(b=0,u=a,r=2*a);for(let e=0;e<a;e++,g+=c,I+=c,d+=c,o+=c)l[r++]=(t[g]+Q[0])/F[0],l[u++]=(t[d]+Q[1])/F[1],l[b++]=(t[I]+Q[2])/F[2],-1!==C&&-1!==o&&(l[C++]=(t[o]+Q[3])/F[3]);return new Tensor("float32",l,"RGBA"===i?[1,4,n,B]:[1,3,n,B])},tensorFromImage=async(t,e)=>{const n="undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement,B="undefined"!=typeof ImageData&&t instanceof ImageData,s="undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap,F="string"==typeof t;let Q,U=e??{};const i=()=>{if("undefined"!=typeof document)return document.createElement("canvas");if("undefined"!=typeof OffscreenCanvas)return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},a=t=>t instanceof HTMLCanvasElement||t instanceof OffscreenCanvas?t.getContext("2d"):null;if(n){const n=i();n.width=t.width,n.height=t.height;const B=a(n);if(null==B)throw new Error("Can not access image data");{let n=t.height,s=t.width;if(void 0!==e&&void 0!==e.resizedHeight&&void 0!==e.resizedWidth&&(n=e.resizedHeight,s=e.resizedWidth),void 0!==e){if(U=e,void 0!==e.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");U.tensorFormat="RGBA",U.height=n,U.width=s}else U.tensorFormat="RGBA",U.height=n,U.width=s;B.drawImage(t,0,0),Q=B.getImageData(0,0,s,n).data}}else{if(!B){if(s){if(void 0===e)throw new Error("Please provide image config with format for Imagebitmap");const n=i();n.width=t.width,n.height=t.height;const B=a(n);if(null!=B){const e=t.height,n=t.width;return B.drawImage(t,0,0,n,e),Q=B.getImageData(0,0,n,e).data,U.height=e,U.width=n,bufferToTensor(Q,U)}throw new Error("Can not access image data")}if(F)return new Promise(((e,n)=>{const B=i(),s=a(B);if(!t||!s)return n();const F=new Image;F.crossOrigin="Anonymous",F.src=t,F.onload=()=>{B.width=F.width,B.height=F.height,s.drawImage(F,0,0,B.width,B.height);const t=s.getImageData(0,0,B.width,B.height);U.height=B.height,U.width=B.width,e(bufferToTensor(t.data,U))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let n,B;if(void 0!==e&&void 0!==e.resizedWidth&&void 0!==e.resizedHeight?(n=e.resizedHeight,B=e.resizedWidth):(n=t.height,B=t.width),void 0!==e&&(U=e),U.format="RGBA",U.height=n,U.width=B,void 0!==e){const e=i();e.width=B,e.height=n;const s=a(e);if(null==s)throw new Error("Can not access image data");s.putImageData(t,0,0),Q=s.getImageData(0,0,B,n).data}else Q=t.data}}if(void 0!==Q)return bufferToTensor(Q,U);throw new Error("Input data provided is not supported - aborted tensor creation")},tensorFromTexture=(t,e)=>{const{width:n,height:B,download:s,dispose:F}=e;return new Tensor({location:"texture",type:"float32",texture:t,dims:[1,B,n,4],download:s,dispose:F})},tensorFromGpuBuffer=(t,e)=>{const{dataType:n,dims:B,download:s,dispose:F}=e;return new Tensor({location:"gpu-buffer",type:n??"float32",gpuBuffer:t,dims:B,download:s,dispose:F})},tensorFromPinnedBuffer=(t,e,n)=>new Tensor({location:"cpu-pinned",type:t,data:e,dims:n??[e.length]})}}),NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP,NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP,isBigIntChecked,checkBigInt,init_tensor_impl_type_mapping=__esm({"common/dist/esm/tensor-impl-type-mapping.js"(){NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),isBigIntChecked=!1,checkBigInt=()=>{if(!isBigIntChecked){isBigIntChecked=!0;const t="undefined"!=typeof BigInt64Array&&"function"==typeof BigInt64Array.from,e="undefined"!=typeof BigUint64Array&&"function"==typeof BigUint64Array.from;t&&(NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64",BigInt64Array),NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array,"int64")),e&&(NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64",BigUint64Array),NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array,"uint64"))}}}}),calculateSize,tensorReshape,init_tensor_utils_impl=__esm({"common/dist/esm/tensor-utils-impl.js"(){init_tensor_impl(),calculateSize=t=>{let e=1;for(let n=0;n<t.length;n++){const B=t[n];if("number"!=typeof B||!Number.isSafeInteger(B))throw new TypeError(`dims[${n}] must be an integer, got: ${B}`);if(B<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${B}`);e*=B}return e},tensorReshape=(t,e)=>{switch(t.location){case"cpu":return new Tensor(t.type,t.data,e);case"cpu-pinned":return new Tensor({location:"cpu-pinned",data:t.data,type:t.type,dims:e});case"texture":return new Tensor({location:"texture",texture:t.texture,type:t.type,dims:e});case"gpu-buffer":return new Tensor({location:"gpu-buffer",gpuBuffer:t.gpuBuffer,type:t.type,dims:e});default:throw new Error(`tensorReshape: tensor location ${t.location} is not supported`)}}}}),Tensor,init_tensor_impl=__esm({"common/dist/esm/tensor-impl.js"(){init_tensor_conversion_impl(),init_tensor_factory_impl(),init_tensor_impl_type_mapping(),init_tensor_utils_impl(),Tensor=class{constructor(t,e,n){let B,s;if(checkBigInt(),"object"==typeof t&&"location"in t)switch(this.dataLocation=t.location,B=t.type,s=t.dims,t.location){case"cpu-pinned":{const e=NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(B);if(!e)throw new TypeError(`unsupported type "${B}" to create tensor from pinned buffer`);if(!(t.data instanceof e))throw new TypeError(`buffer should be of type ${e.name}`);this.cpuData=t.data;break}case"texture":if("float32"!==B)throw new TypeError(`unsupported type "${B}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break;case"gpu-buffer":if("float32"!==B&&"float16"!==B&&"int32"!==B&&"int64"!==B&&"uint32"!==B&&"bool"!==B)throw new TypeError(`unsupported type "${B}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let F,Q;if("string"==typeof t)if(B=t,Q=n,"string"===t){if(!Array.isArray(e))throw new TypeError("A string tensor's data must be a string array.");F=e}else{const n=NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(t);if(void 0===n)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(e)){if("float16"===t)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");F="uint64"===t||"int64"===t?n.from(e,BigInt):n.from(e)}else{if(!(e instanceof n))throw new TypeError(`A ${B} tensor's data must be type of ${n}`);F=e}}else if(Q=e,Array.isArray(t)){if(0===t.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");const e=typeof t[0];if("string"===e)B="string",F=t;else{if("boolean"!==e)throw new TypeError(`Invalid element type of data array: ${e}.`);B="bool",F=Uint8Array.from(t)}}else{const e=NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(t.constructor);if(void 0===e)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);B=e,F=t}if(void 0===Q)Q=[F.length];else if(!Array.isArray(Q))throw new TypeError("A tensor's dims must be a number array");s=Q,this.cpuData=F,this.dataLocation="cpu"}const F=calculateSize(s);if(this.cpuData&&F!==this.cpuData.length)throw new Error(`Tensor's size(${F}) does not match data length(${this.cpuData.length}).`);this.type=B,this.dims=s,this.size=F}static async fromImage(t,e){return tensorFromImage(t,e)}static fromTexture(t,e){return tensorFromTexture(t,e)}static fromGpuBuffer(t,e){return tensorFromGpuBuffer(t,e)}static fromPinnedBuffer(t,e,n){return tensorFromPinnedBuffer(t,e,n)}toDataURL(t){return tensorToDataURL(this,t)}toImageData(t){return tensorToImageData(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const e=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=e,t&&this.disposer&&(this.disposer(),this.disposer=void 0),e}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return tensorReshape(this,t)}}}}),Tensor2,init_tensor=__esm({"common/dist/esm/tensor.js"(){init_tensor_impl(),Tensor2=Tensor}}),TRACE,TRACE_FUNC,TRACE_FUNC_BEGIN,TRACE_FUNC_END,init_trace=__esm({"common/dist/esm/trace.js"(){init_env_impl(),TRACE=(t,e)=>{env.wasm.trace&&console.timeStamp(`${t}::ORT::${e}`)},TRACE_FUNC=(t,e)=>{const n=(new Error).stack?.split(/\r\n|\r|\n/g)||[];let B=!1;for(let s=0;s<n.length;s++){if(B&&!n[s].includes("TRACE_FUNC")){let B=`FUNC_${t}::${n[s].trim().split(" ")[1]}`;return e&&(B+=`::${e}`),void TRACE("CPU",B)}n[s].includes("TRACE_FUNC")&&(B=!0)}},TRACE_FUNC_BEGIN=t=>{env.wasm.trace&&TRACE_FUNC("BEGIN",t)},TRACE_FUNC_END=t=>{env.wasm.trace&&TRACE_FUNC("END",t)}}}),InferenceSession,init_inference_session_impl=__esm({"common/dist/esm/inference-session-impl.js"(){init_backend_impl(),init_tensor(),init_trace(),InferenceSession=class t{constructor(t){this.handler=t}async run(t,e,n){TRACE_FUNC_BEGIN();const B={};let s={};if("object"!=typeof t||null===t||t instanceof Tensor2||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let F=!0;if("object"==typeof e){if(null===e)throw new TypeError("Unexpected argument[1]: cannot be null.");if(e instanceof Tensor2)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(e)){if(0===e.length)throw new TypeError("'fetches' cannot be an empty array.");F=!1;for(const t of e){if("string"!=typeof t)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(t))throw new RangeError(`'fetches' contains invalid output name: ${t}.`);B[t]=null}if("object"==typeof n&&null!==n)s=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else{let t=!1;const Q=Object.getOwnPropertyNames(e);for(const n of this.outputNames)if(-1!==Q.indexOf(n)){const s=e[n];(null===s||s instanceof Tensor2)&&(t=!0,F=!1,B[n]=s)}if(t){if("object"==typeof n&&null!==n)s=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else s=e}}else if(void 0!==e)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const e of this.inputNames)if(void 0===t[e])throw new Error(`input '${e}' is missing in 'feeds'.`);if(F)for(const t of this.outputNames)B[t]=null;const Q=await this.handler.run(t,B,s),U={};for(const t in Q)if(Object.hasOwnProperty.call(Q,t)){const e=Q[t];U[t]=e instanceof Tensor2?e:new Tensor2(e.type,e.data,e.dims)}return TRACE_FUNC_END(),U}async release(){return this.handler.dispose()}static async create(e,n,B,s){let F;TRACE_FUNC_BEGIN();let Q={};if("string"==typeof e){if(F=e,"object"==typeof n&&null!==n)Q=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else if(e instanceof Uint8Array){if(F=e,"object"==typeof n&&null!==n)Q=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else{if(!(e instanceof ArrayBuffer||"undefined"!=typeof SharedArrayBuffer&&e instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{const t=e;let U=0,i=e.byteLength;if("object"==typeof n&&null!==n)Q=n;else if("number"==typeof n){if(U=n,!Number.isSafeInteger(U))throw new RangeError("'byteOffset' must be an integer.");if(U<0||U>=t.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${t.byteLength}).`);if(i=e.byteLength-U,"number"==typeof B){if(i=B,!Number.isSafeInteger(i))throw new RangeError("'byteLength' must be an integer.");if(i<=0||U+i>t.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${t.byteLength-U}].`);if("object"==typeof s&&null!==s)Q=s;else if(void 0!==s)throw new TypeError("'options' must be an object.")}else if(void 0!==B)throw new TypeError("'byteLength' must be a number.")}else if(void 0!==n)throw new TypeError("'options' must be an object.");F=new Uint8Array(t,U,i)}}const U=(Q.executionProviders||[]).map((t=>"string"==typeof t?t:t.name)),i=await resolveBackend(U),a=await i.createInferenceSessionHandler(F,Q);return TRACE_FUNC_END(),new t(a)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}}),InferenceSession2,init_inference_session=__esm({"common/dist/esm/inference-session.js"(){init_inference_session_impl(),InferenceSession2=InferenceSession}}),init_onnx_value=__esm({"common/dist/esm/onnx-value.js"(){}}),noBackendErrMsg,TrainingSession,init_training_session_impl=__esm({"common/dist/esm/training-session-impl.js"(){init_backend_impl(),init_tensor(),noBackendErrMsg="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",TrainingSession=class t{constructor(t,e,n){this.handler=t,this.hasOptimizerModel=e,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(e,n){const B=e.evalModel||"",s=e.optimizerModel||"",F=n||{},Q=(F.executionProviders||[]).map((t=>"string"==typeof t?t:t.name)),U=await resolveBackend(Q);if(U.createTrainingSessionHandler){const n=await U.createTrainingSessionHandler(e.checkpointState,e.trainModel,B,s,F);return new t(n,!!e.optimizerModel,!!e.evalModel)}throw new Error(noBackendErrMsg)}typeNarrowingForRunStep(t,e,n,B,s){const F={};let Q={};if("object"!=typeof n||null===n||n instanceof Tensor2||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let U=!0;if("object"==typeof B){if(null===B)throw new TypeError("Unexpected argument[1]: cannot be null.");if(B instanceof Tensor2)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(B)){if(0===B.length)throw new TypeError("'fetches' cannot be an empty array.");U=!1;for(const t of B){if("string"!=typeof t)throw new TypeError("'fetches' must be a string array or an object.");if(-1===e.indexOf(t))throw new RangeError(`'fetches' contains invalid output name: ${t}.`);F[t]=null}if("object"==typeof s&&null!==s)Q=s;else if(void 0!==s)throw new TypeError("'options' must be an object.")}else{let t=!1;const n=Object.getOwnPropertyNames(B);for(const s of e)if(-1!==n.indexOf(s)){const e=B[s];(null===e||e instanceof Tensor2)&&(t=!0,U=!1,F[s]=e)}if(t){if("object"==typeof s&&null!==s)Q=s;else if(void 0!==s)throw new TypeError("'options' must be an object.")}else Q=B}}else if(void 0!==B)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const e of t)if(void 0===n[e])throw new Error(`input '${e}' is missing in 'feeds'.`);if(U)for(const t of e)F[t]=null;return[F,Q]}convertHandlerReturnTypeToMapOfTensors(t){const e={};for(const n in t)if(Object.hasOwnProperty.call(t,n)){const B=t[n];e[n]=B instanceof Tensor2?B:new Tensor2(B.type,B.data,B.dims)}return e}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,e,n){const[B,s]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,e,n),F=await this.handler.runTrainStep(t,B,s);return this.convertHandlerReturnTypeToMapOfTensors(F)}async runOptimizerStep(t){if(!this.hasOptimizerModel)throw new Error("This TrainingSession has no OptimizerModel loaded.");await this.handler.runOptimizerStep(t||{})}async runEvalStep(t,e,n){if(this.hasEvalModel){const[B,s]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,e,n),F=await this.handler.runEvalStep(t,B,s);return this.convertHandlerReturnTypeToMapOfTensors(F)}throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,e=!0){const n=await this.getParametersSize(e);if(t.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,e)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}}}),TrainingSession2,init_training_session=__esm({"common/dist/esm/training-session.js"(){init_training_session_impl(),TrainingSession2=TrainingSession}}),esm_exports={};__export(esm_exports,{InferenceSession:()=>InferenceSession2,TRACE:()=>TRACE,TRACE_FUNC_BEGIN:()=>TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>TRACE_FUNC_END,Tensor:()=>Tensor2,TrainingSession:()=>TrainingSession2,env:()=>env2,registerBackend:()=>registerBackend});var init_esm=__esm({"common/dist/esm/index.js"(){init_backend(),init_env(),init_inference_session(),init_tensor(),init_trace(),init_onnx_value(),init_training_session()}}),readFile,init_promises=__esm({"nodejs-ignore:node:fs/promises"(){readFile=void 0}}),NoOpLoggerProvider,ConsoleLoggerProvider,SEVERITY_VALUE,LOGGER_PROVIDER_MAP,LOGGER_DEFAULT_CONFIG,LOGGER_CONFIG_MAP,Logger,Event,EventRecord,Profiler,now;function log(t,e,n,B){if(void 0===e)return createCategorizedLogger(t);if(void 0===n)logInternal(t,e,1);else if("number"==typeof n&&void 0===B)logInternal(t,e,n);else if("string"==typeof n&&void 0===B)logInternal(t,n,1,e);else{if("string"!=typeof n||"number"!=typeof B)throw new TypeError("input is valid");logInternal(t,n,B,e)}}function createCategorizedLogger(t){return{verbose:log.verbose.bind(null,t),info:log.info.bind(null,t),warning:log.warning.bind(null,t),error:log.error.bind(null,t),fatal:log.fatal.bind(null,t)}}function logInternal(t,e,n,B){const s=LOGGER_CONFIG_MAP[B||""]||LOGGER_CONFIG_MAP[""];SEVERITY_VALUE[t]<SEVERITY_VALUE[s.minimalSeverity]||(s.logDateTime&&(e=`${(new Date).toISOString()}|${e}`),s.logSourceLocation,LOGGER_PROVIDER_MAP[s.provider].log(t,e,B))}var init_instrument=__esm({"web/lib/onnxjs/instrument.ts"(){NoOpLoggerProvider=class{log(t,e,n){}},ConsoleLoggerProvider=class{log(t,e,n){console.log(`${this.color(t)} ${n?"[35m"+n+"[0m ":""}${e}`)}color(t){switch(t){case"verbose":return"[34;40mv[0m";case"info":return"[32mi[0m";case"warning":return"[30;43mw[0m";case"error":return"[31;40me[0m";case"fatal":return"[101mf[0m";default:throw new Error(`unsupported severity: ${t}`)}}},SEVERITY_VALUE={verbose:1e3,info:2e3,warning:4e3,error:5e3,fatal:6e3},LOGGER_PROVIDER_MAP={none:new NoOpLoggerProvider,console:new ConsoleLoggerProvider},LOGGER_CONFIG_MAP={"":LOGGER_DEFAULT_CONFIG={provider:"console",minimalSeverity:"warning",logDateTime:!0,logSourceLocation:!1}},(t=>{function e(t){LOGGER_CONFIG_MAP={},n("",t||{})}function n(t,n){if("*"===t)e(n);else{const e=LOGGER_CONFIG_MAP[t]||LOGGER_DEFAULT_CONFIG;LOGGER_CONFIG_MAP[t]={provider:n.provider||e.provider,minimalSeverity:n.minimalSeverity||e.minimalSeverity,logDateTime:void 0===n.logDateTime?e.logDateTime:n.logDateTime,logSourceLocation:void 0===n.logSourceLocation?e.logSourceLocation:n.logSourceLocation}}}t.verbose=function(e,n){t("verbose",e,n)},t.info=function(e,n){t("info",e,n)},t.warning=function(e,n){t("warning",e,n)},t.error=function(e,n){t("error",e,n)},t.fatal=function(e,n){t("fatal",e,n)},t.reset=e,t.set=n,t.setWithEnv=function(t){const e={};t.logLevel&&(e.minimalSeverity=t.logLevel),n("",e)}})(log||(log={})),Logger=log,Event=class{constructor(t,e,n,B,s,F){this.category=t,this.name=e,this.startTime=n,this.endCallback=B,this.timer=s,this.ctx=F}async end(){return this.endCallback(this)}async checkTimer(){if(void 0===this.ctx||void 0===this.timer)throw new Error("No webgl timer found");return this.ctx.endTimer(),this.ctx.waitForQueryAndGetTime(this.timer)}},EventRecord=class{constructor(t,e,n,B){this.category=t,this.name=e,this.startTime=n,this.endTime=B}},Profiler=class{constructor(t,e,n){this._started=!1,this._flushPointer=0,this._started=!1,this._maxNumberEvents=void 0===t?1e4:t,this._flushBatchSize=void 0===e?10:e,this._flushIntervalInMilliseconds=void 0===n?5e3:n}static create(t){return void 0===t?new this:new this(t.maxNumberEvents,t.flushBatchSize,t.flushIntervalInMilliseconds)}start(){this._started=!0,this._timingEvents=[],this._flushTime=now(),this._flushPointer=0}stop(){for(this._started=!1;this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer])}event(t,e,n,B){const s=this._started?this.begin(t,e,B):void 0;let F=!1;const Q=n();if(Q&&"function"==typeof Q.then)return F=!0,new Promise(((t,e)=>{Q.then((async e=>{s&&await s.end(),t(e)}),(async t=>{s&&await s.end(),e(t)}))}));if(!F&&s){const t=s.end();if(t&&"function"==typeof t.then)return new Promise(((e,n)=>{t.then((()=>{e(Q)}),(t=>{n(t)}))}))}return Q}begin(t,e,n){if(!this._started)throw new Error("profiler is not started yet");if(void 0===n){const n=now();return this.flush(n),new Event(t,e,n,(t=>this.endSync(t)))}{const B=n.beginTimer();return new Event(t,e,0,(async t=>this.end(t)),B,n)}}async end(t){const e=await t.checkTimer();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new EventRecord(t.category,t.name,t.startTime,e)),this.flush(e))}endSync(t){const e=now();this._timingEvents.length<this._maxNumberEvents&&(this._timingEvents.push(new EventRecord(t.category,t.name,t.startTime,e)),this.flush(e))}logOneEvent(t){Logger.verbose(`Profiler.${t.category}`,`${(t.endTime-t.startTime).toFixed(2)}ms on event '${t.name}' at ${t.endTime.toFixed(2)}`)}flush(t){if(this._timingEvents.length-this._flushPointer>=this._flushBatchSize||t-this._flushTime>=this._flushIntervalInMilliseconds){for(const t=this._flushPointer;this._flushPointer<t+this._flushBatchSize&&this._flushPointer<this._timingEvents.length;this._flushPointer++)this.logOneEvent(this._timingEvents[this._flushPointer]);this._flushTime=now()}}get started(){return this._started}},now="undefined"!=typeof performance&&performance.now?()=>performance.now():Date.now}});function resolveOperator(t,e,n){for(const B of n){const n=B[0],s=B[1],F=B[2],Q=B[3],U=B[4];if(t.opType===n)for(const t of e)if((t.domain===s||"ai.onnx"===t.domain&&""===s)&&matchSelector(t.version,F))return{opImpl:Q,opInit:U}}throw new TypeError(`cannot resolve operator '${t.opType}' with opsets: ${e.map((t=>`${t.domain||"ai.onnx"} v${t.version}`)).join(", ")}`)}function matchSelector(t,e){if(e.endsWith("+")){const n=Number.parseInt(e.substring(0,e.length-1),10);return!isNaN(n)&&n<=t}if(2===e.split("-").length){const n=e.split("-"),B=Number.parseInt(n[0],10),s=Number.parseInt(n[1],10);return!isNaN(B)&&!isNaN(s)&&B<=t&&t<=s}return Number.parseInt(e,10)===t}var init_opset=__esm({"web/lib/onnxjs/opset.ts"(){}}),require_guid=__commonJS({"web/node_modules/guid-typescript/dist/guid.js"(t){t.__esModule=!0;var e=function(){function t(e){if(!e)throw new TypeError("Invalid argument; `value` has no value.");this.value=t.EMPTY,e&&t.isGuid(e)&&(this.value=e)}return t.isGuid=function(e){var n=e.toString();return e&&(e instanceof t||t.validator.test(n))},t.create=function(){return new t([t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-"))},t.createEmpty=function(){return new t("emptyguid")},t.parse=function(e){return new t(e)},t.raw=function(){return[t.gen(2),t.gen(1),t.gen(1),t.gen(1),t.gen(3)].join("-")},t.gen=function(t){for(var e="",n=0;n<t;n++)e+=(65536*(1+Math.random())|0).toString(16).substring(1);return e},t.prototype.equals=function(e){return t.isGuid(e)&&this.value===e.toString()},t.prototype.isEmpty=function(){return this.value===t.EMPTY},t.prototype.toString=function(){return this.value},t.prototype.toJSON=function(){return{value:this.value}},t.validator=new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$","i"),t.EMPTY="00000000-0000-0000-0000-000000000000",t}();t.Guid=e}}),wasm,INT_CACHE,UINT_CACHE,pow_dbl,TWO_PWR_16_DBL,TWO_PWR_24_DBL,TWO_PWR_32_DBL,TWO_PWR_64_DBL,TWO_PWR_63_DBL,TWO_PWR_24,ZERO,UZERO,ONE,UONE,NEG_ONE,MAX_VALUE,MAX_UNSIGNED_VALUE,MIN_VALUE,LongPrototype,long_default;function Long(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function isLong(t){return!0===(t&&t.__isLong__)}function ctz32(t){var e=Math.clz32(t&-t);return t?31-e:e}function fromInt(t,e){var n,B,s;return e?(s=0<=(t>>>=0)&&t<256)&&(B=UINT_CACHE[t])?B:(n=fromBits(t,0,!0),s&&(UINT_CACHE[t]=n),n):(s=-128<=(t|=0)&&t<128)&&(B=INT_CACHE[t])?B:(n=fromBits(t,t<0?-1:0,!1),s&&(INT_CACHE[t]=n),n)}function fromNumber(t,e){if(isNaN(t))return e?UZERO:ZERO;if(e){if(t<0)return UZERO;if(t>=TWO_PWR_64_DBL)return MAX_UNSIGNED_VALUE}else{if(t<=-TWO_PWR_63_DBL)return MIN_VALUE;if(t+1>=TWO_PWR_63_DBL)return MAX_VALUE}return t<0?fromNumber(-t,e).neg():fromBits(t%TWO_PWR_32_DBL|0,t/TWO_PWR_32_DBL|0,e)}function fromBits(t,e,n){return new Long(t,e,n)}function fromString(t,e,n){if(0===t.length)throw Error("empty string");if("number"==typeof e?(n=e,e=!1):e=!!e,"NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return e?UZERO:ZERO;if((n=n||10)<2||36<n)throw RangeError("radix");var B;if((B=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===B)return fromString(t.substring(1),e,n).neg();for(var s=fromNumber(pow_dbl(n,8)),F=ZERO,Q=0;Q<t.length;Q+=8){var U=Math.min(8,t.length-Q),i=parseInt(t.substring(Q,Q+U),n);if(U<8){var a=fromNumber(pow_dbl(n,U));F=F.mul(a).add(fromNumber(i))}else F=(F=F.mul(s)).add(fromNumber(i))}return F.unsigned=e,F}function fromValue(t,e){return"number"==typeof t?fromNumber(t,e):"string"==typeof t?fromString(t,e):fromBits(t.low,t.high,"boolean"==typeof e?e:t.unsigned)}var init_long=__esm({"web/node_modules/long/index.js"(){wasm=null;try{wasm=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}Long.prototype.__isLong__,Object.defineProperty(Long.prototype,"__isLong__",{value:!0}),Long.isLong=isLong,INT_CACHE={},UINT_CACHE={},Long.fromInt=fromInt,Long.fromNumber=fromNumber,Long.fromBits=fromBits,pow_dbl=Math.pow,Long.fromString=fromString,Long.fromValue=fromValue,TWO_PWR_63_DBL=(TWO_PWR_64_DBL=(TWO_PWR_32_DBL=(TWO_PWR_16_DBL=65536)*TWO_PWR_16_DBL)*TWO_PWR_32_DBL)/2,TWO_PWR_24=fromInt(TWO_PWR_24_DBL=1<<24),ZERO=fromInt(0),Long.ZERO=ZERO,UZERO=fromInt(0,!0),Long.UZERO=UZERO,ONE=fromInt(1),Long.ONE=ONE,UONE=fromInt(1,!0),Long.UONE=UONE,NEG_ONE=fromInt(-1),Long.NEG_ONE=NEG_ONE,MAX_VALUE=fromBits(-1,2147483647,!1),Long.MAX_VALUE=MAX_VALUE,MAX_UNSIGNED_VALUE=fromBits(-1,-1,!0),Long.MAX_UNSIGNED_VALUE=MAX_UNSIGNED_VALUE,MIN_VALUE=fromBits(0,-2147483648,!1),Long.MIN_VALUE=MIN_VALUE,(LongPrototype=Long.prototype).toInt=function(){return this.unsigned?this.low>>>0:this.low},LongPrototype.toNumber=function(){return this.unsigned?(this.high>>>0)*TWO_PWR_32_DBL+(this.low>>>0):this.high*TWO_PWR_32_DBL+(this.low>>>0)},LongPrototype.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(MIN_VALUE)){var e=fromNumber(t),n=this.div(e),B=n.mul(e).sub(this);return n.toString(t)+B.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var s=fromNumber(pow_dbl(t,6),this.unsigned),F=this,Q="";;){var U=F.div(s),i=(F.sub(U.mul(s)).toInt()>>>0).toString(t);if((F=U).isZero())return i+Q;for(;i.length<6;)i="0"+i;Q=""+i+Q}},LongPrototype.getHighBits=function(){return this.high},LongPrototype.getHighBitsUnsigned=function(){return this.high>>>0},LongPrototype.getLowBits=function(){return this.low},LongPrototype.getLowBitsUnsigned=function(){return this.low>>>0},LongPrototype.getNumBitsAbs=function(){if(this.isNegative())return this.eq(MIN_VALUE)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&!(t&1<<e);e--);return 0!=this.high?e+33:e+1},LongPrototype.isZero=function(){return 0===this.high&&0===this.low},LongPrototype.eqz=LongPrototype.isZero,LongPrototype.isNegative=function(){return!this.unsigned&&this.high<0},LongPrototype.isPositive=function(){return this.unsigned||this.high>=0},LongPrototype.isOdd=function(){return!(1&~this.low)},LongPrototype.isEven=function(){return!(1&this.low)},LongPrototype.equals=function(t){return isLong(t)||(t=fromValue(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},LongPrototype.eq=LongPrototype.equals,LongPrototype.notEquals=function(t){return!this.eq(t)},LongPrototype.neq=LongPrototype.notEquals,LongPrototype.ne=LongPrototype.notEquals,LongPrototype.lessThan=function(t){return this.comp(t)<0},LongPrototype.lt=LongPrototype.lessThan,LongPrototype.lessThanOrEqual=function(t){return this.comp(t)<=0},LongPrototype.lte=LongPrototype.lessThanOrEqual,LongPrototype.le=LongPrototype.lessThanOrEqual,LongPrototype.greaterThan=function(t){return this.comp(t)>0},LongPrototype.gt=LongPrototype.greaterThan,LongPrototype.greaterThanOrEqual=function(t){return this.comp(t)>=0},LongPrototype.gte=LongPrototype.greaterThanOrEqual,LongPrototype.ge=LongPrototype.greaterThanOrEqual,LongPrototype.compare=function(t){if(isLong(t)||(t=fromValue(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},LongPrototype.comp=LongPrototype.compare,LongPrototype.negate=function(){return!this.unsigned&&this.eq(MIN_VALUE)?MIN_VALUE:this.not().add(ONE)},LongPrototype.neg=LongPrototype.negate,LongPrototype.add=function(t){isLong(t)||(t=fromValue(t));var e=this.high>>>16,n=65535&this.high,B=this.low>>>16,s=65535&this.low,F=t.high>>>16,Q=65535&t.high,U=t.low>>>16,i=0,a=0,l=0,c=0;return l+=(c+=s+(65535&t.low))>>>16,a+=(l+=B+U)>>>16,i+=(a+=n+Q)>>>16,i+=e+F,fromBits((l&=65535)<<16|(c&=65535),(i&=65535)<<16|(a&=65535),this.unsigned)},LongPrototype.subtract=function(t){return isLong(t)||(t=fromValue(t)),this.add(t.neg())},LongPrototype.sub=LongPrototype.subtract,LongPrototype.multiply=function(t){if(this.isZero())return this;if(isLong(t)||(t=fromValue(t)),wasm)return fromBits(wasm.mul(this.low,this.high,t.low,t.high),wasm.get_high(),this.unsigned);if(t.isZero())return this.unsigned?UZERO:ZERO;if(this.eq(MIN_VALUE))return t.isOdd()?MIN_VALUE:ZERO;if(t.eq(MIN_VALUE))return this.isOdd()?MIN_VALUE:ZERO;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(TWO_PWR_24)&&t.lt(TWO_PWR_24))return fromNumber(this.toNumber()*t.toNumber(),this.unsigned);var e=this.high>>>16,n=65535&this.high,B=this.low>>>16,s=65535&this.low,F=t.high>>>16,Q=65535&t.high,U=t.low>>>16,i=65535&t.low,a=0,l=0,c=0,g=0;return c+=(g+=s*i)>>>16,l+=(c+=B*i)>>>16,c&=65535,l+=(c+=s*U)>>>16,a+=(l+=n*i)>>>16,l&=65535,a+=(l+=B*U)>>>16,l&=65535,a+=(l+=s*Q)>>>16,a+=e*i+n*U+B*Q+s*F,fromBits((c&=65535)<<16|(g&=65535),(a&=65535)<<16|(l&=65535),this.unsigned)},LongPrototype.mul=LongPrototype.multiply,LongPrototype.divide=function(t){if(isLong(t)||(t=fromValue(t)),t.isZero())throw Error("division by zero");var e,n,B;if(wasm)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?fromBits((this.unsigned?wasm.div_u:wasm.div_s)(this.low,this.high,t.low,t.high),wasm.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?UZERO:ZERO;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return UZERO;if(t.gt(this.shru(1)))return UONE;B=UZERO}else{if(this.eq(MIN_VALUE))return t.eq(ONE)||t.eq(NEG_ONE)?MIN_VALUE:t.eq(MIN_VALUE)?ONE:(e=this.shr(1).div(t).shl(1)).eq(ZERO)?t.isNegative()?ONE:NEG_ONE:(n=this.sub(t.mul(e)),B=e.add(n.div(t)));if(t.eq(MIN_VALUE))return this.unsigned?UZERO:ZERO;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();B=ZERO}for(n=this;n.gte(t);){e=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var s=Math.ceil(Math.log(e)/Math.LN2),F=s<=48?1:pow_dbl(2,s-48),Q=fromNumber(e),U=Q.mul(t);U.isNegative()||U.gt(n);)U=(Q=fromNumber(e-=F,this.unsigned)).mul(t);Q.isZero()&&(Q=ONE),B=B.add(Q),n=n.sub(U)}return B},LongPrototype.div=LongPrototype.divide,LongPrototype.modulo=function(t){return isLong(t)||(t=fromValue(t)),wasm?fromBits((this.unsigned?wasm.rem_u:wasm.rem_s)(this.low,this.high,t.low,t.high),wasm.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},LongPrototype.mod=LongPrototype.modulo,LongPrototype.rem=LongPrototype.modulo,LongPrototype.not=function(){return fromBits(~this.low,~this.high,this.unsigned)},LongPrototype.countLeadingZeros=function(){return this.high?Math.clz32(this.high):Math.clz32(this.low)+32},LongPrototype.clz=LongPrototype.countLeadingZeros,LongPrototype.countTrailingZeros=function(){return this.low?ctz32(this.low):ctz32(this.high)+32},LongPrototype.ctz=LongPrototype.countTrailingZeros,LongPrototype.and=function(t){return isLong(t)||(t=fromValue(t)),fromBits(this.low&t.low,this.high&t.high,this.unsigned)},LongPrototype.or=function(t){return isLong(t)||(t=fromValue(t)),fromBits(this.low|t.low,this.high|t.high,this.unsigned)},LongPrototype.xor=function(t){return isLong(t)||(t=fromValue(t)),fromBits(this.low^t.low,this.high^t.high,this.unsigned)},LongPrototype.shiftLeft=function(t){return isLong(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?fromBits(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):fromBits(0,this.low<<t-32,this.unsigned)},LongPrototype.shl=LongPrototype.shiftLeft,LongPrototype.shiftRight=function(t){return isLong(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?fromBits(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):fromBits(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},LongPrototype.shr=LongPrototype.shiftRight,LongPrototype.shiftRightUnsigned=function(t){return isLong(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?fromBits(this.low>>>t|this.high<<32-t,this.high>>>t,this.unsigned):fromBits(32===t?this.high:this.high>>>t-32,0,this.unsigned)},LongPrototype.shru=LongPrototype.shiftRightUnsigned,LongPrototype.shr_u=LongPrototype.shiftRightUnsigned,LongPrototype.rotateLeft=function(t){var e;return isLong(t)&&(t=t.toInt()),0==(t&=63)?this:32===t?fromBits(this.high,this.low,this.unsigned):t<32?(e=32-t,fromBits(this.low<<t|this.high>>>e,this.high<<t|this.low>>>e,this.unsigned)):(e=32-(t-=32),fromBits(this.high<<t|this.low>>>e,this.low<<t|this.high>>>e,this.unsigned))},LongPrototype.rotl=LongPrototype.rotateLeft,LongPrototype.rotateRight=function(t){var e;return isLong(t)&&(t=t.toInt()),0==(t&=63)?this:32===t?fromBits(this.high,this.low,this.unsigned):t<32?(e=32-t,fromBits(this.high<<e|this.low>>>t,this.low<<e|this.high>>>t,this.unsigned)):(e=32-(t-=32),fromBits(this.low<<e|this.high>>>t,this.high<<e|this.low>>>t,this.unsigned))},LongPrototype.rotr=LongPrototype.rotateRight,LongPrototype.toSigned=function(){return this.unsigned?fromBits(this.low,this.high,!1):this},LongPrototype.toUnsigned=function(){return this.unsigned?this:fromBits(this.low,this.high,!0)},LongPrototype.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},LongPrototype.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},LongPrototype.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},Long.fromBytes=function(t,e,n){return n?Long.fromBytesLE(t,e):Long.fromBytesBE(t,e)},Long.fromBytesLE=function(t,e){return new Long(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},Long.fromBytesBE=function(t,e){return new Long(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)},long_default=Long}}),flatbuffers,init_flatbuffers=__esm({"web/node_modules/flatbuffers/js/flatbuffers.mjs"(){flatbuffers={},flatbuffers.Table,flatbuffers.SIZEOF_SHORT=2,flatbuffers.SIZEOF_INT=4,flatbuffers.FILE_IDENTIFIER_LENGTH=4,flatbuffers.SIZE_PREFIX_LENGTH=4,flatbuffers.Encoding={UTF8_BYTES:1,UTF16_STRING:2},flatbuffers.int32=new Int32Array(2),flatbuffers.float32=new Float32Array(flatbuffers.int32.buffer),flatbuffers.float64=new Float64Array(flatbuffers.int32.buffer),flatbuffers.isLittleEndian=1===new Uint16Array(new Uint8Array([1,0]).buffer)[0],flatbuffers.Long=function(t,e){this.low=0|t,this.high=0|e},flatbuffers.Long.create=function(t,e){return 0==t&&0==e?flatbuffers.Long.ZERO:new flatbuffers.Long(t,e)},flatbuffers.Long.prototype.toFloat64=function(){return(this.low>>>0)+4294967296*this.high},flatbuffers.Long.prototype.equals=function(t){return this.low==t.low&&this.high==t.high},flatbuffers.Long.ZERO=new flatbuffers.Long(0,0),flatbuffers.Builder=function(t){if(t)e=t;else var e=1024;this.bb=flatbuffers.ByteBuffer.allocate(e),this.space=e,this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1},flatbuffers.Builder.prototype.clear=function(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1},flatbuffers.Builder.prototype.forceDefaults=function(t){this.force_defaults=t},flatbuffers.Builder.prototype.dataBuffer=function(){return this.bb},flatbuffers.Builder.prototype.asUint8Array=function(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())},flatbuffers.Builder.prototype.prep=function(t,e){t>this.minalign&&(this.minalign=t);for(var n=1+~(this.bb.capacity()-this.space+e)&t-1;this.space<n+t+e;){var B=this.bb.capacity();this.bb=flatbuffers.Builder.growByteBuffer(this.bb),this.space+=this.bb.capacity()-B}this.pad(n)},flatbuffers.Builder.prototype.pad=function(t){for(var e=0;e<t;e++)this.bb.writeInt8(--this.space,0)},flatbuffers.Builder.prototype.writeInt8=function(t){this.bb.writeInt8(this.space-=1,t)},flatbuffers.Builder.prototype.writeInt16=function(t){this.bb.writeInt16(this.space-=2,t)},flatbuffers.Builder.prototype.writeInt32=function(t){this.bb.writeInt32(this.space-=4,t)},flatbuffers.Builder.prototype.writeInt64=function(t){this.bb.writeInt64(this.space-=8,t)},flatbuffers.Builder.prototype.writeFloat32=function(t){this.bb.writeFloat32(this.space-=4,t)},flatbuffers.Builder.prototype.writeFloat64=function(t){this.bb.writeFloat64(this.space-=8,t)},flatbuffers.Builder.prototype.addInt8=function(t){this.prep(1,0),this.writeInt8(t)},flatbuffers.Builder.prototype.addInt16=function(t){this.prep(2,0),this.writeInt16(t)},flatbuffers.Builder.prototype.addInt32=function(t){this.prep(4,0),this.writeInt32(t)},flatbuffers.Builder.prototype.addInt64=function(t){this.prep(8,0),this.writeInt64(t)},flatbuffers.Builder.prototype.addFloat32=function(t){this.prep(4,0),this.writeFloat32(t)},flatbuffers.Builder.prototype.addFloat64=function(t){this.prep(8,0),this.writeFloat64(t)},flatbuffers.Builder.prototype.addFieldInt8=function(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))},flatbuffers.Builder.prototype.addFieldInt16=function(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))},flatbuffers.Builder.prototype.addFieldInt32=function(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))},flatbuffers.Builder.prototype.addFieldInt64=function(t,e,n){!this.force_defaults&&e.equals(n)||(this.addInt64(e),this.slot(t))},flatbuffers.Builder.prototype.addFieldFloat32=function(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))},flatbuffers.Builder.prototype.addFieldFloat64=function(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))},flatbuffers.Builder.prototype.addFieldOffset=function(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))},flatbuffers.Builder.prototype.addFieldStruct=function(t,e,n){e!=n&&(this.nested(e),this.slot(t))},flatbuffers.Builder.prototype.nested=function(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")},flatbuffers.Builder.prototype.notNested=function(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")},flatbuffers.Builder.prototype.slot=function(t){this.vtable[t]=this.offset()},flatbuffers.Builder.prototype.offset=function(){return this.bb.capacity()-this.space},flatbuffers.Builder.growByteBuffer=function(t){var e=t.capacity();if(3221225472&e)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");var n=e<<1,B=flatbuffers.ByteBuffer.allocate(n);return B.setPosition(n-e),B.bytes().set(t.bytes(),n-e),B},flatbuffers.Builder.prototype.addOffset=function(t){this.prep(flatbuffers.SIZEOF_INT,0),this.writeInt32(this.offset()-t+flatbuffers.SIZEOF_INT)},flatbuffers.Builder.prototype.startObject=function(t){this.notNested(),null==this.vtable&&(this.vtable=[]),this.vtable_in_use=t;for(var e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()},flatbuffers.Builder.prototype.endObject=function(){if(null==this.vtable||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);for(var t=this.offset(),e=this.vtable_in_use-1;e>=0&&0==this.vtable[e];e--);for(var n=e+1;e>=0;e--)this.addInt16(0!=this.vtable[e]?t-this.vtable[e]:0);this.addInt16(t-this.object_start);var B=(n+2)*flatbuffers.SIZEOF_SHORT;this.addInt16(B);var s=0,F=this.space;t:for(e=0;e<this.vtables.length;e++){var Q=this.bb.capacity()-this.vtables[e];if(B==this.bb.readInt16(Q)){for(var U=flatbuffers.SIZEOF_SHORT;U<B;U+=flatbuffers.SIZEOF_SHORT)if(this.bb.readInt16(F+U)!=this.bb.readInt16(Q+U))continue t;s=this.vtables[e];break}}return s?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,s-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t},flatbuffers.Builder.prototype.finish=function(t,e,n){var B=n?flatbuffers.SIZE_PREFIX_LENGTH:0;if(e){var s=e;if(this.prep(this.minalign,flatbuffers.SIZEOF_INT+flatbuffers.FILE_IDENTIFIER_LENGTH+B),s.length!=flatbuffers.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: file identifier must be length "+flatbuffers.FILE_IDENTIFIER_LENGTH);for(var F=flatbuffers.FILE_IDENTIFIER_LENGTH-1;F>=0;F--)this.writeInt8(s.charCodeAt(F))}this.prep(this.minalign,flatbuffers.SIZEOF_INT+B),this.addOffset(t),B&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)},flatbuffers.Builder.prototype.finishSizePrefixed=function(t,e){this.finish(t,e,!0)},flatbuffers.Builder.prototype.requiredField=function(t,e){var n=this.bb.capacity()-t,B=n-this.bb.readInt32(n);if(!(0!=this.bb.readInt16(B+e)))throw new Error("FlatBuffers: field "+e+" must be set")},flatbuffers.Builder.prototype.startVector=function(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(flatbuffers.SIZEOF_INT,t*e),this.prep(n,t*e)},flatbuffers.Builder.prototype.endVector=function(){return this.writeInt32(this.vector_num_elems),this.offset()},flatbuffers.Builder.prototype.createString=function(t){if(t instanceof Uint8Array)var e=t;else{e=[];for(var n=0;n<t.length;){var B,s=t.charCodeAt(n++);if(s<55296||s>=56320)B=s;else B=(s<<10)+t.charCodeAt(n++)+-56613888;B<128?e.push(B):(B<2048?e.push(B>>6&31|192):(B<65536?e.push(B>>12&15|224):e.push(B>>18&7|240,B>>12&63|128),e.push(B>>6&63|128)),e.push(63&B|128))}}this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length);n=0;for(var F=this.space,Q=this.bb.bytes();n<e.length;n++)Q[F++]=e[n];return this.endVector()},flatbuffers.Builder.prototype.createLong=function(t,e){return flatbuffers.Long.create(t,e)},flatbuffers.ByteBuffer=function(t){this.bytes_=t,this.position_=0},flatbuffers.ByteBuffer.allocate=function(t){return new flatbuffers.ByteBuffer(new Uint8Array(t))},flatbuffers.ByteBuffer.prototype.clear=function(){this.position_=0},flatbuffers.ByteBuffer.prototype.bytes=function(){return this.bytes_},flatbuffers.ByteBuffer.prototype.position=function(){return this.position_},flatbuffers.ByteBuffer.prototype.setPosition=function(t){this.position_=t},flatbuffers.ByteBuffer.prototype.capacity=function(){return this.bytes_.length},flatbuffers.ByteBuffer.prototype.readInt8=function(t){return this.readUint8(t)<<24>>24},flatbuffers.ByteBuffer.prototype.readUint8=function(t){return this.bytes_[t]},flatbuffers.ByteBuffer.prototype.readInt16=function(t){return this.readUint16(t)<<16>>16},flatbuffers.ByteBuffer.prototype.readUint16=function(t){return this.bytes_[t]|this.bytes_[t+1]<<8},flatbuffers.ByteBuffer.prototype.readInt32=function(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24},flatbuffers.ByteBuffer.prototype.readUint32=function(t){return this.readInt32(t)>>>0},flatbuffers.ByteBuffer.prototype.readInt64=function(t){return new flatbuffers.Long(this.readInt32(t),this.readInt32(t+4))},flatbuffers.ByteBuffer.prototype.readUint64=function(t){return new flatbuffers.Long(this.readUint32(t),this.readUint32(t+4))},flatbuffers.ByteBuffer.prototype.readFloat32=function(t){return flatbuffers.int32[0]=this.readInt32(t),flatbuffers.float32[0]},flatbuffers.ByteBuffer.prototype.readFloat64=function(t){return flatbuffers.int32[flatbuffers.isLittleEndian?0:1]=this.readInt32(t),flatbuffers.int32[flatbuffers.isLittleEndian?1:0]=this.readInt32(t+4),flatbuffers.float64[0]},flatbuffers.ByteBuffer.prototype.writeInt8=function(t,e){this.bytes_[t]=e},flatbuffers.ByteBuffer.prototype.writeUint8=function(t,e){this.bytes_[t]=e},flatbuffers.ByteBuffer.prototype.writeInt16=function(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8},flatbuffers.ByteBuffer.prototype.writeUint16=function(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8},flatbuffers.ByteBuffer.prototype.writeInt32=function(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24},flatbuffers.ByteBuffer.prototype.writeUint32=function(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24},flatbuffers.ByteBuffer.prototype.writeInt64=function(t,e){this.writeInt32(t,e.low),this.writeInt32(t+4,e.high)},flatbuffers.ByteBuffer.prototype.writeUint64=function(t,e){this.writeUint32(t,e.low),this.writeUint32(t+4,e.high)},flatbuffers.ByteBuffer.prototype.writeFloat32=function(t,e){flatbuffers.float32[0]=e,this.writeInt32(t,flatbuffers.int32[0])},flatbuffers.ByteBuffer.prototype.writeFloat64=function(t,e){flatbuffers.float64[0]=e,this.writeInt32(t,flatbuffers.int32[flatbuffers.isLittleEndian?0:1]),this.writeInt32(t+4,flatbuffers.int32[flatbuffers.isLittleEndian?1:0])},flatbuffers.ByteBuffer.prototype.getBufferIdentifier=function(){if(this.bytes_.length<this.position_+flatbuffers.SIZEOF_INT+flatbuffers.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");for(var t="",e=0;e<flatbuffers.FILE_IDENTIFIER_LENGTH;e++)t+=String.fromCharCode(this.readInt8(this.position_+flatbuffers.SIZEOF_INT+e));return t},flatbuffers.ByteBuffer.prototype.__offset=function(t,e){var n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0},flatbuffers.ByteBuffer.prototype.__union=function(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t},flatbuffers.ByteBuffer.prototype.__string=function(t,e){t+=this.readInt32(t);var n=this.readInt32(t),B="",s=0;if(t+=flatbuffers.SIZEOF_INT,e===flatbuffers.Encoding.UTF8_BYTES)return this.bytes_.subarray(t,t+n);for(;s<n;){var F,Q=this.readUint8(t+s++);if(Q<192)F=Q;else{var U=this.readUint8(t+s++);if(Q<224)F=(31&Q)<<6|63&U;else{var i=this.readUint8(t+s++);if(Q<240)F=(15&Q)<<12|(63&U)<<6|63&i;else F=(7&Q)<<18|(63&U)<<12|(63&i)<<6|63&this.readUint8(t+s++)}}F<65536?B+=String.fromCharCode(F):(F-=65536,B+=String.fromCharCode(55296+(F>>10),56320+(1023&F)))}return B},flatbuffers.ByteBuffer.prototype.__indirect=function(t){return t+this.readInt32(t)},flatbuffers.ByteBuffer.prototype.__vector=function(t){return t+this.readInt32(t)+flatbuffers.SIZEOF_INT},flatbuffers.ByteBuffer.prototype.__vector_len=function(t){return this.readInt32(t+this.readInt32(t))},flatbuffers.ByteBuffer.prototype.__has_identifier=function(t){if(t.length!=flatbuffers.FILE_IDENTIFIER_LENGTH)throw new Error("FlatBuffers: file identifier must be length "+flatbuffers.FILE_IDENTIFIER_LENGTH);for(var e=0;e<flatbuffers.FILE_IDENTIFIER_LENGTH;e++)if(t.charCodeAt(e)!=this.readInt8(this.position_+flatbuffers.SIZEOF_INT+e))return!1;return!0},flatbuffers.ByteBuffer.prototype.createLong=function(t,e){return flatbuffers.Long.create(t,e)}}}),onnxruntime,init_ort_generated=__esm({"web/lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts"(){init_flatbuffers(),(t=>{let e;(t=>{let e;(t=>{let e;var n;(n=e=t.AttributeType||(t.AttributeType={}))[n.UNDEFINED=0]="UNDEFINED",n[n.FLOAT=1]="FLOAT",n[n.INT=2]="INT",n[n.STRING=3]="STRING",n[n.TENSOR=4]="TENSOR",n[n.GRAPH=5]="GRAPH",n[n.FLOATS=6]="FLOATS",n[n.INTS=7]="INTS",n[n.STRINGS=8]="STRINGS",n[n.TENSORS=9]="TENSORS",n[n.GRAPHS=10]="GRAPHS",n[n.SPARSE_TENSOR=11]="SPARSE_TENSOR",n[n.SPARSE_TENSORS=12]="SPARSE_TENSORS"})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{let e;var n;(n=e=t.DimensionValueType||(t.DimensionValueType={}))[n.UNKNOWN=0]="UNKNOWN",n[n.VALUE=1]="VALUE",n[n.PARAM=2]="PARAM"})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{let e;var n;(n=e=t.TensorDataType||(t.TensorDataType={}))[n.UNDEFINED=0]="UNDEFINED",n[n.FLOAT=1]="FLOAT",n[n.UINT8=2]="UINT8",n[n.INT8=3]="INT8",n[n.UINT16=4]="UINT16",n[n.INT16=5]="INT16",n[n.INT32=6]="INT32",n[n.INT64=7]="INT64",n[n.STRING=8]="STRING",n[n.BOOL=9]="BOOL",n[n.FLOAT16=10]="FLOAT16",n[n.DOUBLE=11]="DOUBLE",n[n.UINT32=12]="UINT32",n[n.UINT64=13]="UINT64",n[n.COMPLEX64=14]="COMPLEX64",n[n.COMPLEX128=15]="COMPLEX128",n[n.BFLOAT16=16]="BFLOAT16",n[n.FLOAT8E4M3FN=17]="FLOAT8E4M3FN",n[n.FLOAT8E4M3FNUZ=18]="FLOAT8E4M3FNUZ",n[n.FLOAT8E5M2=19]="FLOAT8E5M2",n[n.FLOAT8E5M2FNUZ=20]="FLOAT8E5M2FNUZ"})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{let e;var n;(n=e=t.NodeType||(t.NodeType={}))[n.Primitive=0]="Primitive",n[n.Fused=1]="Fused"})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{let e;var n;(n=e=t.TypeInfoValue||(t.TypeInfoValue={}))[n.NONE=0]="NONE",n[n.tensor_type=1]="tensor_type",n[n.sequence_type=2]="sequence_type",n[n.map_type=3]="map_type"})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsShape(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsShape(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}dim(e,n){let B=this.bb.__offset(this.bb_pos,4);return B?(n||new t.experimental.fbs.Dimension).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}dimLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}static startShape(t){t.startObject(1)}static addDim(t,e){t.addFieldOffset(0,e,0)}static createDimVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startDimVector(t,e){t.startVector(4,e,4)}static endShape(t){return t.endObject()}static createShape(t,e){return n.startShape(t),n.addDim(t,e),n.endShape(t)}}e.Shape=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDimension(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDimension(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}value(e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.DimensionValue).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}denotation(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startDimension(t){t.startObject(2)}static addValue(t,e){t.addFieldOffset(0,e,0)}static addDenotation(t,e){t.addFieldOffset(1,e,0)}static endDimension(t){return t.endObject()}static createDimension(t,e,B){return n.startDimension(t),n.addValue(t,e),n.addDenotation(t,B),n.endDimension(t)}}e.Dimension=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDimensionValue(t,n){return(n||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDimensionValue(t,n){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(n||new e).__init(t.readInt32(t.position())+t.position(),t)}dimType(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):0}dimValue(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}dimParam(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__string(this.bb_pos+e,t):null}static startDimensionValue(t){t.startObject(3)}static addDimType(t,e){t.addFieldInt8(0,e,0)}static addDimValue(t,e){t.addFieldInt64(1,e,t.createLong(0,0))}static addDimParam(t,e){t.addFieldOffset(2,e,0)}static endDimensionValue(t){return t.endObject()}static createDimensionValue(t,n,B,s){return e.startDimensionValue(t),e.addDimType(t,n),e.addDimValue(t,B),e.addDimParam(t,s),e.endDimensionValue(t)}}t.DimensionValue=e})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTensorTypeAndShape(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTensorTypeAndShape(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}elemType(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}shape(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.Shape).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startTensorTypeAndShape(t){t.startObject(2)}static addElemType(t,e){t.addFieldInt32(0,e,0)}static addShape(t,e){t.addFieldOffset(1,e,0)}static endTensorTypeAndShape(t){return t.endObject()}static createTensorTypeAndShape(t,e,B){return n.startTensorTypeAndShape(t),n.addElemType(t,e),n.addShape(t,B),n.endTensorTypeAndShape(t)}}e.TensorTypeAndShape=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMapType(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMapType(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}keyType(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}valueType(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startMapType(t){t.startObject(2)}static addKeyType(t,e){t.addFieldInt32(0,e,0)}static addValueType(t,e){t.addFieldOffset(1,e,0)}static endMapType(t){return t.endObject()}static createMapType(t,e,B){return n.startMapType(t),n.addKeyType(t,e),n.addValueType(t,B),n.endMapType(t)}}e.MapType=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSequenceType(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSequenceType(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}elemType(e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startSequenceType(t){t.startObject(1)}static addElemType(t,e){t.addFieldOffset(0,e,0)}static endSequenceType(t){return t.endObject()}static createSequenceType(t,e){return n.startSequenceType(t),n.addElemType(t,e),n.endSequenceType(t)}}e.SequenceType=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(e=t.fbs||(t.fbs={})).EdgeEnd=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}nodeIndex(){return this.bb.readUint32(this.bb_pos)}srcArgIndex(){return this.bb.readInt32(this.bb_pos+4)}dstArgIndex(){return this.bb.readInt32(this.bb_pos+8)}static createEdgeEnd(t,e,n,B){return t.prep(4,12),t.writeInt32(B),t.writeInt32(n),t.writeInt32(e),t.offset()}}})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNodeEdge(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNodeEdge(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}nodeIndex(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readUint32(this.bb_pos+t):0}inputEdges(e,n){let B=this.bb.__offset(this.bb_pos,6);return B?(n||new t.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos+B)+12*e,this.bb):null}inputEdgesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}outputEdges(e,n){let B=this.bb.__offset(this.bb_pos,8);return B?(n||new t.experimental.fbs.EdgeEnd).__init(this.bb.__vector(this.bb_pos+B)+12*e,this.bb):null}outputEdgesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startNodeEdge(t){t.startObject(3)}static addNodeIndex(t,e){t.addFieldInt32(0,e,0)}static addInputEdges(t,e){t.addFieldOffset(1,e,0)}static startInputEdgesVector(t,e){t.startVector(12,e,4)}static addOutputEdges(t,e){t.addFieldOffset(2,e,0)}static startOutputEdgesVector(t,e){t.startVector(12,e,4)}static endNodeEdge(t){return t.endObject()}static createNodeEdge(t,e,B,s){return n.startNodeEdge(t),n.addNodeIndex(t,e),n.addInputEdges(t,B),n.addOutputEdges(t,s),n.endNodeEdge(t)}}e.NodeEdge=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNode(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNode(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}docString(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}domain(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__string(this.bb_pos+e,t):null}sinceVersion(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt32(this.bb_pos+t):0}index(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.readUint32(this.bb_pos+t):0}opType(t){let e=this.bb.__offset(this.bb_pos,14);return e?this.bb.__string(this.bb_pos+e,t):null}type(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.readInt32(this.bb_pos+t):0}executionProviderType(t){let e=this.bb.__offset(this.bb_pos,18);return e?this.bb.__string(this.bb_pos+e,t):null}inputs(t,e){let n=this.bb.__offset(this.bb_pos,20);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}inputsLength(){let t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__vector_len(this.bb_pos+t):0}outputs(t,e){let n=this.bb.__offset(this.bb_pos,22);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}outputsLength(){let t=this.bb.__offset(this.bb_pos,22);return t?this.bb.__vector_len(this.bb_pos+t):0}attributes(e,n){let B=this.bb.__offset(this.bb_pos,24);return B?(n||new t.experimental.fbs.Attribute).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}attributesLength(){let t=this.bb.__offset(this.bb_pos,24);return t?this.bb.__vector_len(this.bb_pos+t):0}inputArgCounts(t){let e=this.bb.__offset(this.bb_pos,26);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+4*t):0}inputArgCountsLength(){let t=this.bb.__offset(this.bb_pos,26);return t?this.bb.__vector_len(this.bb_pos+t):0}inputArgCountsArray(){let t=this.bb.__offset(this.bb_pos,26);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}implicitInputs(t,e){let n=this.bb.__offset(this.bb_pos,28);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}implicitInputsLength(){let t=this.bb.__offset(this.bb_pos,28);return t?this.bb.__vector_len(this.bb_pos+t):0}static startNode(t){t.startObject(13)}static addName(t,e){t.addFieldOffset(0,e,0)}static addDocString(t,e){t.addFieldOffset(1,e,0)}static addDomain(t,e){t.addFieldOffset(2,e,0)}static addSinceVersion(t,e){t.addFieldInt32(3,e,0)}static addIndex(t,e){t.addFieldInt32(4,e,0)}static addOpType(t,e){t.addFieldOffset(5,e,0)}static addType(t,e){t.addFieldInt32(6,e,0)}static addExecutionProviderType(t,e){t.addFieldOffset(7,e,0)}static addInputs(t,e){t.addFieldOffset(8,e,0)}static createInputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startInputsVector(t,e){t.startVector(4,e,4)}static addOutputs(t,e){t.addFieldOffset(9,e,0)}static createOutputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startOutputsVector(t,e){t.startVector(4,e,4)}static addAttributes(t,e){t.addFieldOffset(10,e,0)}static createAttributesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startAttributesVector(t,e){t.startVector(4,e,4)}static addInputArgCounts(t,e){t.addFieldOffset(11,e,0)}static createInputArgCountsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startInputArgCountsVector(t,e){t.startVector(4,e,4)}static addImplicitInputs(t,e){t.addFieldOffset(12,e,0)}static createImplicitInputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startImplicitInputsVector(t,e){t.startVector(4,e,4)}static endNode(t){return t.endObject()}static createNode(t,e,B,s,F,Q,U,i,a,l,c,g,d,I){return n.startNode(t),n.addName(t,e),n.addDocString(t,B),n.addDomain(t,s),n.addSinceVersion(t,F),n.addIndex(t,Q),n.addOpType(t,U),n.addType(t,i),n.addExecutionProviderType(t,a),n.addInputs(t,l),n.addOutputs(t,c),n.addAttributes(t,g),n.addInputArgCounts(t,d),n.addImplicitInputs(t,I),n.endNode(t)}}e.Node=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsValueInfo(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsValueInfo(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}docString(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}type(e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new t.experimental.fbs.TypeInfo).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startValueInfo(t){t.startObject(3)}static addName(t,e){t.addFieldOffset(0,e,0)}static addDocString(t,e){t.addFieldOffset(1,e,0)}static addType(t,e){t.addFieldOffset(2,e,0)}static endValueInfo(t){return t.endObject()}static createValueInfo(t,e,B,s){return n.startValueInfo(t),n.addName(t,e),n.addDocString(t,B),n.addType(t,s),n.endValueInfo(t)}}e.ValueInfo=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTypeInfo(t,n){return(n||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTypeInfo(t,n){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(n||new e).__init(t.readInt32(t.position())+t.position(),t)}denotation(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}valueType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):0}value(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}static startTypeInfo(t){t.startObject(3)}static addDenotation(t,e){t.addFieldOffset(0,e,0)}static addValueType(t,e){t.addFieldInt8(1,e,0)}static addValue(t,e){t.addFieldOffset(2,e,0)}static endTypeInfo(t){return t.endObject()}static createTypeInfo(t,n,B,s){return e.startTypeInfo(t),e.addDenotation(t,n),e.addValueType(t,B),e.addValue(t,s),e.endTypeInfo(t)}}t.TypeInfo=e})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsOperatorSetId(t,n){return(n||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsOperatorSetId(t,n){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(n||new e).__init(t.readInt32(t.position())+t.position(),t)}domain(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}version(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}static startOperatorSetId(t){t.startObject(2)}static addDomain(t,e){t.addFieldOffset(0,e,0)}static addVersion(t,e){t.addFieldInt64(1,e,t.createLong(0,0))}static endOperatorSetId(t){return t.endObject()}static createOperatorSetId(t,n,B){return e.startOperatorSetId(t),e.addDomain(t,n),e.addVersion(t,B),e.endOperatorSetId(t)}}t.OperatorSetId=e})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTensor(t,n){return(n||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTensor(t,n){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(n||new e).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}docString(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}dims(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+8*t):this.bb.createLong(0,0)}dimsLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}dataType(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt32(this.bb_pos+t):0}rawData(t){let e=this.bb.__offset(this.bb_pos,12);return e?this.bb.readUint8(this.bb.__vector(this.bb_pos+e)+t):0}rawDataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}rawDataArray(){let t=this.bb.__offset(this.bb_pos,12);return t?new Uint8Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}stringData(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}stringDataLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}static startTensor(t){t.startObject(6)}static addName(t,e){t.addFieldOffset(0,e,0)}static addDocString(t,e){t.addFieldOffset(1,e,0)}static addDims(t,e){t.addFieldOffset(2,e,0)}static createDimsVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startDimsVector(t,e){t.startVector(8,e,8)}static addDataType(t,e){t.addFieldInt32(3,e,0)}static addRawData(t,e){t.addFieldOffset(4,e,0)}static createRawDataVector(t,e){t.startVector(1,e.length,1);for(let n=e.length-1;n>=0;n--)t.addInt8(e[n]);return t.endVector()}static startRawDataVector(t,e){t.startVector(1,e,1)}static addStringData(t,e){t.addFieldOffset(5,e,0)}static createStringDataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startStringDataVector(t,e){t.startVector(4,e,4)}static endTensor(t){return t.endObject()}static createTensor(t,n,B,s,F,Q,U){return e.startTensor(t),e.addName(t,n),e.addDocString(t,B),e.addDims(t,s),e.addDataType(t,F),e.addRawData(t,Q),e.addStringData(t,U),e.endTensor(t)}}t.Tensor=e})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSparseTensor(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSparseTensor(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}values(e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}indices(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}dims(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+8*t):this.bb.createLong(0,0)}dimsLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSparseTensor(t){t.startObject(3)}static addValues(t,e){t.addFieldOffset(0,e,0)}static addIndices(t,e){t.addFieldOffset(1,e,0)}static addDims(t,e){t.addFieldOffset(2,e,0)}static createDimsVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startDimsVector(t,e){t.startVector(8,e,8)}static endSparseTensor(t){return t.endObject()}static createSparseTensor(t,e,B,s){return n.startSparseTensor(t),n.addValues(t,e),n.addIndices(t,B),n.addDims(t,s),n.endSparseTensor(t)}}e.SparseTensor=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsAttribute(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsAttribute(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}docString(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}type(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):0}f(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readFloat32(this.bb_pos+t):0}i(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}s(t){let e=this.bb.__offset(this.bb_pos,14);return e?this.bb.__string(this.bb_pos+e,t):null}t(e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}g(e){let n=this.bb.__offset(this.bb_pos,18);return n?(e||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}floats(t){let e=this.bb.__offset(this.bb_pos,20);return e?this.bb.readFloat32(this.bb.__vector(this.bb_pos+e)+4*t):0}floatsLength(){let t=this.bb.__offset(this.bb_pos,20);return t?this.bb.__vector_len(this.bb_pos+t):0}floatsArray(){let t=this.bb.__offset(this.bb_pos,20);return t?new Float32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}ints(t){let e=this.bb.__offset(this.bb_pos,22);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+8*t):this.bb.createLong(0,0)}intsLength(){let t=this.bb.__offset(this.bb_pos,22);return t?this.bb.__vector_len(this.bb_pos+t):0}strings(t,e){let n=this.bb.__offset(this.bb_pos,24);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}stringsLength(){let t=this.bb.__offset(this.bb_pos,24);return t?this.bb.__vector_len(this.bb_pos+t):0}tensors(e,n){let B=this.bb.__offset(this.bb_pos,26);return B?(n||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}tensorsLength(){let t=this.bb.__offset(this.bb_pos,26);return t?this.bb.__vector_len(this.bb_pos+t):0}graphs(e,n){let B=this.bb.__offset(this.bb_pos,28);return B?(n||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}graphsLength(){let t=this.bb.__offset(this.bb_pos,28);return t?this.bb.__vector_len(this.bb_pos+t):0}static startAttribute(t){t.startObject(13)}static addName(t,e){t.addFieldOffset(0,e,0)}static addDocString(t,e){t.addFieldOffset(1,e,0)}static addType(t,e){t.addFieldInt32(2,e,0)}static addF(t,e){t.addFieldFloat32(3,e,0)}static addI(t,e){t.addFieldInt64(4,e,t.createLong(0,0))}static addS(t,e){t.addFieldOffset(5,e,0)}static addT(t,e){t.addFieldOffset(6,e,0)}static addG(t,e){t.addFieldOffset(7,e,0)}static addFloats(t,e){t.addFieldOffset(8,e,0)}static createFloatsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addFloat32(e[n]);return t.endVector()}static startFloatsVector(t,e){t.startVector(4,e,4)}static addInts(t,e){t.addFieldOffset(9,e,0)}static createIntsVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startIntsVector(t,e){t.startVector(8,e,8)}static addStrings(t,e){t.addFieldOffset(10,e,0)}static createStringsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startStringsVector(t,e){t.startVector(4,e,4)}static addTensors(t,e){t.addFieldOffset(11,e,0)}static createTensorsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startTensorsVector(t,e){t.startVector(4,e,4)}static addGraphs(t,e){t.addFieldOffset(12,e,0)}static createGraphsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startGraphsVector(t,e){t.startVector(4,e,4)}static endAttribute(t){return t.endObject()}static createAttribute(t,e,B,s,F,Q,U,i,a,l,c,g,d,I){return n.startAttribute(t),n.addName(t,e),n.addDocString(t,B),n.addType(t,s),n.addF(t,F),n.addI(t,Q),n.addS(t,U),n.addT(t,i),n.addG(t,a),n.addFloats(t,l),n.addInts(t,c),n.addStrings(t,g),n.addTensors(t,d),n.addGraphs(t,I),n.endAttribute(t)}}e.Attribute=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsGraph(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsGraph(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}initializers(e,n){let B=this.bb.__offset(this.bb_pos,4);return B?(n||new t.experimental.fbs.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}initializersLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}nodeArgs(e,n){let B=this.bb.__offset(this.bb_pos,6);return B?(n||new t.experimental.fbs.ValueInfo).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}nodeArgsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}nodes(e,n){let B=this.bb.__offset(this.bb_pos,8);return B?(n||new t.experimental.fbs.Node).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}maxNodeIndex(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readUint32(this.bb_pos+t):0}nodeEdges(e,n){let B=this.bb.__offset(this.bb_pos,12);return B?(n||new t.experimental.fbs.NodeEdge).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}nodeEdgesLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}inputs(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}inputsLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}outputs(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?this.bb.__string(this.bb.__vector(this.bb_pos+n)+4*t,e):null}outputsLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}sparseInitializers(e,n){let B=this.bb.__offset(this.bb_pos,18);return B?(n||new t.experimental.fbs.SparseTensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}sparseInitializersLength(){let t=this.bb.__offset(this.bb_pos,18);return t?this.bb.__vector_len(this.bb_pos+t):0}static startGraph(t){t.startObject(8)}static addInitializers(t,e){t.addFieldOffset(0,e,0)}static createInitializersVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startInitializersVector(t,e){t.startVector(4,e,4)}static addNodeArgs(t,e){t.addFieldOffset(1,e,0)}static createNodeArgsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startNodeArgsVector(t,e){t.startVector(4,e,4)}static addNodes(t,e){t.addFieldOffset(2,e,0)}static createNodesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startNodesVector(t,e){t.startVector(4,e,4)}static addMaxNodeIndex(t,e){t.addFieldInt32(3,e,0)}static addNodeEdges(t,e){t.addFieldOffset(4,e,0)}static createNodeEdgesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startNodeEdgesVector(t,e){t.startVector(4,e,4)}static addInputs(t,e){t.addFieldOffset(5,e,0)}static createInputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startInputsVector(t,e){t.startVector(4,e,4)}static addOutputs(t,e){t.addFieldOffset(6,e,0)}static createOutputsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startOutputsVector(t,e){t.startVector(4,e,4)}static addSparseInitializers(t,e){t.addFieldOffset(7,e,0)}static createSparseInitializersVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startSparseInitializersVector(t,e){t.startVector(4,e,4)}static endGraph(t){return t.endObject()}static createGraph(t,e,B,s,F,Q,U,i,a){return n.startGraph(t),n.addInitializers(t,e),n.addNodeArgs(t,B),n.addNodes(t,s),n.addMaxNodeIndex(t,F),n.addNodeEdges(t,Q),n.addInputs(t,U),n.addOutputs(t,i),n.addSparseInitializers(t,a),n.endGraph(t)}}e.Graph=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsModel(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsModel(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}irVersion(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}opsetImport(e,n){let B=this.bb.__offset(this.bb_pos,6);return B?(n||new t.experimental.fbs.OperatorSetId).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}opsetImportLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}producerName(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__string(this.bb_pos+e,t):null}producerVersion(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__string(this.bb_pos+e,t):null}domain(t){let e=this.bb.__offset(this.bb_pos,12);return e?this.bb.__string(this.bb_pos+e,t):null}modelVersion(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}docString(t){let e=this.bb.__offset(this.bb_pos,16);return e?this.bb.__string(this.bb_pos+e,t):null}graph(e){let n=this.bb.__offset(this.bb_pos,18);return n?(e||new t.experimental.fbs.Graph).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}graphDocString(t){let e=this.bb.__offset(this.bb_pos,20);return e?this.bb.__string(this.bb_pos+e,t):null}static startModel(t){t.startObject(9)}static addIrVersion(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addOpsetImport(t,e){t.addFieldOffset(1,e,0)}static createOpsetImportVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startOpsetImportVector(t,e){t.startVector(4,e,4)}static addProducerName(t,e){t.addFieldOffset(2,e,0)}static addProducerVersion(t,e){t.addFieldOffset(3,e,0)}static addDomain(t,e){t.addFieldOffset(4,e,0)}static addModelVersion(t,e){t.addFieldInt64(5,e,t.createLong(0,0))}static addDocString(t,e){t.addFieldOffset(6,e,0)}static addGraph(t,e){t.addFieldOffset(7,e,0)}static addGraphDocString(t,e){t.addFieldOffset(8,e,0)}static endModel(t){return t.endObject()}static createModel(t,e,B,s,F,Q,U,i,a,l){return n.startModel(t),n.addIrVersion(t,e),n.addOpsetImport(t,B),n.addProducerName(t,s),n.addProducerVersion(t,F),n.addDomain(t,Q),n.addModelVersion(t,U),n.addDocString(t,i),n.addGraph(t,a),n.addGraphDocString(t,l),n.endModel(t)}}e.Model=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(t=>{let e;(t=>{class e{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKernelCreateInfos(t,n){return(n||new e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKernelCreateInfos(t,n){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(n||new e).__init(t.readInt32(t.position())+t.position(),t)}nodeIndices(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.readUint32(this.bb.__vector(this.bb_pos+e)+4*t):0}nodeIndicesLength(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.__vector_len(this.bb_pos+t):0}nodeIndicesArray(){let t=this.bb.__offset(this.bb_pos,4);return t?new Uint32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}kernelDefHashes(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readUint64(this.bb.__vector(this.bb_pos+e)+8*t):this.bb.createLong(0,0)}kernelDefHashesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}static startKernelCreateInfos(t){t.startObject(2)}static addNodeIndices(t,e){t.addFieldOffset(0,e,0)}static createNodeIndicesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startNodeIndicesVector(t,e){t.startVector(4,e,4)}static addKernelDefHashes(t,e){t.addFieldOffset(1,e,0)}static createKernelDefHashesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startKernelDefHashesVector(t,e){t.startVector(8,e,8)}static endKernelCreateInfos(t){return t.endObject()}static createKernelCreateInfos(t,n,B){return e.startKernelCreateInfos(t),e.addNodeIndices(t,n),e.addKernelDefHashes(t,B),e.endKernelCreateInfos(t)}}t.KernelCreateInfos=e})(e=t.fbs||(t.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSubGraphSessionState(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSubGraphSessionState(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}graphId(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}sessionState(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startSubGraphSessionState(t){t.startObject(2)}static addGraphId(t,e){t.addFieldOffset(0,e,0)}static addSessionState(t,e){t.addFieldOffset(1,e,0)}static endSubGraphSessionState(t){let e=t.endObject();return t.requiredField(e,4),e}static createSubGraphSessionState(t,e,B){return n.startSubGraphSessionState(t),n.addGraphId(t,e),n.addSessionState(t,B),n.endSubGraphSessionState(t)}}e.SubGraphSessionState=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSessionState(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSessionState(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}kernels(e){let n=this.bb.__offset(this.bb_pos,4);return n?(e||new t.experimental.fbs.KernelCreateInfos).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}subGraphSessionStates(e,n){let B=this.bb.__offset(this.bb_pos,6);return B?(n||new t.experimental.fbs.SubGraphSessionState).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+B)+4*e),this.bb):null}subGraphSessionStatesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSessionState(t){t.startObject(2)}static addKernels(t,e){t.addFieldOffset(0,e,0)}static addSubGraphSessionStates(t,e){t.addFieldOffset(1,e,0)}static createSubGraphSessionStatesVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startSubGraphSessionStatesVector(t,e){t.startVector(4,e,4)}static endSessionState(t){return t.endObject()}static createSessionState(t,e,B){return n.startSessionState(t),n.addKernels(t,e),n.addSubGraphSessionStates(t,B),n.endSessionState(t)}}e.SessionState=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={})),(t=>{let e;(e=>{let n;(e=>{class n{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInferenceSession(t,e){return(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInferenceSession(t,e){return t.setPosition(t.position()+flatbuffers.SIZE_PREFIX_LENGTH),(e||new n).__init(t.readInt32(t.position())+t.position(),t)}static bufferHasIdentifier(t){return t.__has_identifier("ORTM")}ortVersion(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}model(e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new t.experimental.fbs.Model).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}sessionState(e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new t.experimental.fbs.SessionState).__init(this.bb.__indirect(this.bb_pos+n),this.bb):null}static startInferenceSession(t){t.startObject(3)}static addOrtVersion(t,e){t.addFieldOffset(0,e,0)}static addModel(t,e){t.addFieldOffset(1,e,0)}static addSessionState(t,e){t.addFieldOffset(2,e,0)}static endInferenceSession(t){return t.endObject()}static finishInferenceSessionBuffer(t,e){t.finish(e,"ORTM")}static finishSizePrefixedInferenceSessionBuffer(t,e){t.finish(e,"ORTM",!0)}static createInferenceSession(t,e,B,s){return n.startInferenceSession(t),n.addOrtVersion(t,e),n.addModel(t,B),n.addSessionState(t,s),n.endInferenceSession(t)}}e.InferenceSession=n})(n=e.fbs||(e.fbs={}))})(e=t.experimental||(t.experimental={}))})(onnxruntime||(onnxruntime={}))}}),require_aspromise=__commonJS({"web/node_modules/@protobufjs/aspromise/index.js"(t,e){e.exports=function(t,e){var n=new Array(arguments.length-1),B=0,s=2,F=!0;for(;s<arguments.length;)n[B++]=arguments[s++];return new Promise((function(s,Q){n[B]=function(t){if(F)if(F=!1,t)Q(t);else{for(var e=new Array(arguments.length-1),n=0;n<e.length;)e[n++]=arguments[n];s.apply(null,e)}};try{t.apply(e||null,n)}catch(t){F&&(F=!1,Q(t))}}))}}}),require_base64=__commonJS({"web/node_modules/@protobufjs/base64/index.js"(t){var e=t;e.length=function(t){var e=t.length;if(!e)return 0;for(var n=0;--e%4>1&&"="===t.charAt(e);)++n;return Math.ceil(3*t.length)/4-n};var n,B=new Array(64),s=new Array(123);for(n=0;n<64;)s[B[n]=n<26?n+65:n<52?n+71:n<62?n-4:n-59|43]=n++;e.encode=function(t,e,n){for(var s,F=null,Q=[],U=0,i=0;e<n;){var a=t[e++];switch(i){case 0:Q[U++]=B[a>>2],s=(3&a)<<4,i=1;break;case 1:Q[U++]=B[s|a>>4],s=(15&a)<<2,i=2;break;case 2:Q[U++]=B[s|a>>6],Q[U++]=B[63&a],i=0}U>8191&&((F||(F=[])).push(String.fromCharCode.apply(String,Q)),U=0)}return i&&(Q[U++]=B[s],Q[U++]=61,1===i&&(Q[U++]=61)),F?(U&&F.push(String.fromCharCode.apply(String,Q.slice(0,U))),F.join("")):String.fromCharCode.apply(String,Q.slice(0,U))};var F="invalid encoding";e.decode=function(t,e,n){for(var B,Q=n,U=0,i=0;i<t.length;){var a=t.charCodeAt(i++);if(61===a&&U>1)break;if(void 0===(a=s[a]))throw Error(F);switch(U){case 0:B=a,U=1;break;case 1:e[n++]=B<<2|(48&a)>>4,B=a,U=2;break;case 2:e[n++]=(15&B)<<4|(60&a)>>2,B=a,U=3;break;case 3:e[n++]=(3&B)<<6|a,U=0}}if(1===U)throw Error(F);return n-Q},e.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)}}}),require_eventemitter=__commonJS({"web/node_modules/@protobufjs/eventemitter/index.js"(t,e){function n(){this._listeners={}}e.exports=n,n.prototype.on=function(t,e,n){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:n||this}),this},n.prototype.off=function(t,e){if(void 0===t)this._listeners={};else if(void 0===e)this._listeners[t]=[];else for(var n=this._listeners[t],B=0;B<n.length;)n[B].fn===e?n.splice(B,1):++B;return this},n.prototype.emit=function(t){var e=this._listeners[t];if(e){for(var n=[],B=1;B<arguments.length;)n.push(arguments[B++]);for(B=0;B<e.length;)e[B].fn.apply(e[B++].ctx,n)}return this}}}),require_float=__commonJS({"web/node_modules/@protobufjs/float/index.js"(t,e){function n(t){return"undefined"!=typeof Float32Array?function(){var e=new Float32Array([-0]),n=new Uint8Array(e.buffer),B=128===n[3];function s(t,B,s){e[0]=t,B[s]=n[0],B[s+1]=n[1],B[s+2]=n[2],B[s+3]=n[3]}function F(t,B,s){e[0]=t,B[s]=n[3],B[s+1]=n[2],B[s+2]=n[1],B[s+3]=n[0]}function Q(t,B){return n[0]=t[B],n[1]=t[B+1],n[2]=t[B+2],n[3]=t[B+3],e[0]}function U(t,B){return n[3]=t[B],n[2]=t[B+1],n[1]=t[B+2],n[0]=t[B+3],e[0]}t.writeFloatLE=B?s:F,t.writeFloatBE=B?F:s,t.readFloatLE=B?Q:U,t.readFloatBE=B?U:Q}():function(){function e(t,e,n,B){var s=e<0?1:0;if(s&&(e=-e),0===e)t(1/e>0?0:2147483648,n,B);else if(isNaN(e))t(2143289344,n,B);else if(e>34028234663852886e22)t((s<<31|2139095040)>>>0,n,B);else if(e<11754943508222875e-54)t((s<<31|Math.round(e/1401298464324817e-60))>>>0,n,B);else{var F=Math.floor(Math.log(e)/Math.LN2);t((s<<31|F+127<<23|8388607&Math.round(e*Math.pow(2,-F)*8388608))>>>0,n,B)}}function n(t,e,n){var B=t(e,n),s=2*(B>>31)+1,F=B>>>23&255,Q=8388607&B;return 255===F?Q?NaN:s*(1/0):0===F?1401298464324817e-60*s*Q:s*Math.pow(2,F-150)*(Q+8388608)}t.writeFloatLE=e.bind(null,B),t.writeFloatBE=e.bind(null,s),t.readFloatLE=n.bind(null,F),t.readFloatBE=n.bind(null,Q)}(),"undefined"!=typeof Float64Array?function(){var e=new Float64Array([-0]),n=new Uint8Array(e.buffer),B=128===n[7];function s(t,B,s){e[0]=t,B[s]=n[0],B[s+1]=n[1],B[s+2]=n[2],B[s+3]=n[3],B[s+4]=n[4],B[s+5]=n[5],B[s+6]=n[6],B[s+7]=n[7]}function F(t,B,s){e[0]=t,B[s]=n[7],B[s+1]=n[6],B[s+2]=n[5],B[s+3]=n[4],B[s+4]=n[3],B[s+5]=n[2],B[s+6]=n[1],B[s+7]=n[0]}function Q(t,B){return n[0]=t[B],n[1]=t[B+1],n[2]=t[B+2],n[3]=t[B+3],n[4]=t[B+4],n[5]=t[B+5],n[6]=t[B+6],n[7]=t[B+7],e[0]}function U(t,B){return n[7]=t[B],n[6]=t[B+1],n[5]=t[B+2],n[4]=t[B+3],n[3]=t[B+4],n[2]=t[B+5],n[1]=t[B+6],n[0]=t[B+7],e[0]}t.writeDoubleLE=B?s:F,t.writeDoubleBE=B?F:s,t.readDoubleLE=B?Q:U,t.readDoubleBE=B?U:Q}():function(){function e(t,e,n,B,s,F){var Q=B<0?1:0;if(Q&&(B=-B),0===B)t(0,s,F+e),t(1/B>0?0:2147483648,s,F+n);else if(isNaN(B))t(0,s,F+e),t(2146959360,s,F+n);else if(B>17976931348623157e292)t(0,s,F+e),t((Q<<31|2146435072)>>>0,s,F+n);else{var U;if(B<22250738585072014e-324)t((U=B/5e-324)>>>0,s,F+e),t((Q<<31|U/4294967296)>>>0,s,F+n);else{var i=Math.floor(Math.log(B)/Math.LN2);1024===i&&(i=1023),t(4503599627370496*(U=B*Math.pow(2,-i))>>>0,s,F+e),t((Q<<31|i+1023<<20|1048576*U&1048575)>>>0,s,F+n)}}}function n(t,e,n,B,s){var F=t(B,s+e),Q=t(B,s+n),U=2*(Q>>31)+1,i=Q>>>20&2047,a=4294967296*(1048575&Q)+F;return 2047===i?a?NaN:U*(1/0):0===i?5e-324*U*a:U*Math.pow(2,i-1075)*(a+4503599627370496)}t.writeDoubleLE=e.bind(null,B,0,4),t.writeDoubleBE=e.bind(null,s,4,0),t.readDoubleLE=n.bind(null,F,0,4),t.readDoubleBE=n.bind(null,Q,4,0)}(),t}function B(t,e,n){e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24}function s(t,e,n){e[n]=t>>>24,e[n+1]=t>>>16&255,e[n+2]=t>>>8&255,e[n+3]=255&t}function F(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}function Q(t,e){return(t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3])>>>0}e.exports=n(n)}}),require_inquire=__commonJS({"web/node_modules/@protobufjs/inquire/index.js"(exports,module){function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(t){}return null}module.exports=inquire}}),require_utf8=__commonJS({"web/node_modules/@protobufjs/utf8/index.js"(t){var e=t;e.length=function(t){for(var e=0,n=0,B=0;B<t.length;++B)(n=t.charCodeAt(B))<128?e+=1:n<2048?e+=2:55296==(64512&n)&&56320==(64512&t.charCodeAt(B+1))?(++B,e+=4):e+=3;return e},e.read=function(t,e,n){if(n-e<1)return"";for(var B,s=null,F=[],Q=0;e<n;)(B=t[e++])<128?F[Q++]=B:B>191&&B<224?F[Q++]=(31&B)<<6|63&t[e++]:B>239&&B<365?(B=((7&B)<<18|(63&t[e++])<<12|(63&t[e++])<<6|63&t[e++])-65536,F[Q++]=55296+(B>>10),F[Q++]=56320+(1023&B)):F[Q++]=(15&B)<<12|(63&t[e++])<<6|63&t[e++],Q>8191&&((s||(s=[])).push(String.fromCharCode.apply(String,F)),Q=0);return s?(Q&&s.push(String.fromCharCode.apply(String,F.slice(0,Q))),s.join("")):String.fromCharCode.apply(String,F.slice(0,Q))},e.write=function(t,e,n){for(var B,s,F=n,Q=0;Q<t.length;++Q)(B=t.charCodeAt(Q))<128?e[n++]=B:B<2048?(e[n++]=B>>6|192,e[n++]=63&B|128):55296==(64512&B)&&56320==(64512&(s=t.charCodeAt(Q+1)))?(B=65536+((1023&B)<<10)+(1023&s),++Q,e[n++]=B>>18|240,e[n++]=B>>12&63|128,e[n++]=B>>6&63|128,e[n++]=63&B|128):(e[n++]=B>>12|224,e[n++]=B>>6&63|128,e[n++]=63&B|128);return n-F}}}),require_pool=__commonJS({"web/node_modules/@protobufjs/pool/index.js"(t,e){e.exports=function(t,e,n){var B=n||8192,s=B>>>1,F=null,Q=B;return function(n){if(n<1||n>s)return t(n);Q+n>B&&(F=t(B),Q=0);var U=e.call(F,Q,Q+=n);return 7&Q&&(Q=1+(7|Q)),U}}}}),require_longbits=__commonJS({"web/node_modules/protobufjs/src/util/longbits.js"(t,e){e.exports=B;var n=require_minimal();function B(t,e){this.lo=t>>>0,this.hi=e>>>0}var s=B.zero=new B(0,0);s.toNumber=function(){return 0},s.zzEncode=s.zzDecode=function(){return this},s.length=function(){return 1};var F=B.zeroHash="\0\0\0\0\0\0\0\0";B.fromNumber=function(t){if(0===t)return s;var e=t<0;e&&(t=-t);var n=t>>>0,F=(t-n)/4294967296>>>0;return e&&(F=~F>>>0,n=~n>>>0,++n>4294967295&&(n=0,++F>4294967295&&(F=0))),new B(n,F)},B.from=function(t){if("number"==typeof t)return B.fromNumber(t);if(n.isString(t)){if(!n.Long)return B.fromNumber(parseInt(t,10));t=n.Long.fromString(t)}return t.low||t.high?new B(t.low>>>0,t.high>>>0):s},B.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var e=1+~this.lo>>>0,n=~this.hi>>>0;return e||(n=n+1>>>0),-(e+4294967296*n)}return this.lo+4294967296*this.hi},B.prototype.toLong=function(t){return n.Long?new n.Long(0|this.lo,0|this.hi,Boolean(t)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(t)}};var Q=String.prototype.charCodeAt;B.fromHash=function(t){return t===F?s:new B((Q.call(t,0)|Q.call(t,1)<<8|Q.call(t,2)<<16|Q.call(t,3)<<24)>>>0,(Q.call(t,4)|Q.call(t,5)<<8|Q.call(t,6)<<16|Q.call(t,7)<<24)>>>0)},B.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},B.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this},B.prototype.zzDecode=function(){var t=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this},B.prototype.length=function(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return 0===n?0===e?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:n<128?9:10}}}),require_minimal=__commonJS({"web/node_modules/protobufjs/src/util/minimal.js"(t){var e=t;function n(t,e,n){for(var B=Object.keys(e),s=0;s<B.length;++s)void 0!==t[B[s]]&&n||(t[B[s]]=e[B[s]]);return t}function B(t){function e(t,B){if(!(this instanceof e))return new e(t,B);Object.defineProperty(this,"message",{get:function(){return t}}),Error.captureStackTrace?Error.captureStackTrace(this,e):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),B&&n(this,B)}return e.prototype=Object.create(Error.prototype,{constructor:{value:e,writable:!0,enumerable:!1,configurable:!0},name:{get:function(){return t},set:void 0,enumerable:!1,configurable:!0},toString:{value:function(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),e}e.asPromise=require_aspromise(),e.base64=require_base64(),e.EventEmitter=require_eventemitter(),e.float=require_float(),e.inquire=require_inquire(),e.utf8=require_utf8(),e.pool=require_pool(),e.LongBits=require_longbits(),e.isNode=Boolean("undefined"!=typeof global&&global&&global.process&&global.process.versions&&global.process.versions.node),e.global=e.isNode&&global||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||t,e.emptyArray=Object.freeze?Object.freeze([]):[],e.emptyObject=Object.freeze?Object.freeze({}):{},e.isInteger=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},e.isString=function(t){return"string"==typeof t||t instanceof String},e.isObject=function(t){return t&&"object"==typeof t},e.isset=e.isSet=function(t,e){var n=t[e];return!(null==n||!t.hasOwnProperty(e))&&("object"!=typeof n||(Array.isArray(n)?n.length:Object.keys(n).length)>0)},e.Buffer=function(){try{var t=e.inquire("buffer").Buffer;return t.prototype.utf8Write?t:null}catch(t){return null}}(),e._Buffer_from=null,e._Buffer_allocUnsafe=null,e.newBuffer=function(t){return"number"==typeof t?e.Buffer?e._Buffer_allocUnsafe(t):new e.Array(t):e.Buffer?e._Buffer_from(t):"undefined"==typeof Uint8Array?t:new Uint8Array(t)},e.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,e.Long=e.global.dcodeIO&&e.global.dcodeIO.Long||e.global.Long||e.inquire("long"),e.key2Re=/^true|false|0|1$/,e.key32Re=/^-?(?:0|[1-9][0-9]*)$/,e.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,e.longToHash=function(t){return t?e.LongBits.from(t).toHash():e.LongBits.zeroHash},e.longFromHash=function(t,n){var B=e.LongBits.fromHash(t);return e.Long?e.Long.fromBits(B.lo,B.hi,n):B.toNumber(Boolean(n))},e.merge=n,e.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)},e.newError=B,e.ProtocolError=B("ProtocolError"),e.oneOfGetter=function(t){for(var e={},n=0;n<t.length;++n)e[t[n]]=1;return function(){for(var t=Object.keys(this),n=t.length-1;n>-1;--n)if(1===e[t[n]]&&void 0!==this[t[n]]&&null!==this[t[n]])return t[n]}},e.oneOfSetter=function(t){return function(e){for(var n=0;n<t.length;++n)t[n]!==e&&delete this[t[n]]}},e.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},e._configure=function(){var t=e.Buffer;t?(e._Buffer_from=t.from!==Uint8Array.from&&t.from||function(e,n){return new t(e,n)},e._Buffer_allocUnsafe=t.allocUnsafe||function(e){return new t(e)}):e._Buffer_from=e._Buffer_allocUnsafe=null}}}),require_writer=__commonJS({"web/node_modules/protobufjs/src/writer.js"(t,e){e.exports=l;var n,B=require_minimal(),s=B.LongBits,F=B.base64,Q=B.utf8;function U(t,e,n){this.fn=t,this.len=e,this.next=void 0,this.val=n}function i(){}function a(t){this.head=t.head,this.tail=t.tail,this.len=t.len,this.next=t.states}function l(){this.len=0,this.head=new U(i,0,0),this.tail=this.head,this.states=null}var c=function(){return B.Buffer?function(){return(l.create=function(){return new n})()}:function(){return new l}};function g(t,e,n){e[n]=255&t}function d(t,e){this.len=t,this.next=void 0,this.val=e}function I(t,e,n){for(;t.hi;)e[n++]=127&t.lo|128,t.lo=(t.lo>>>7|t.hi<<25)>>>0,t.hi>>>=7;for(;t.lo>127;)e[n++]=127&t.lo|128,t.lo=t.lo>>>7;e[n++]=t.lo}function o(t,e,n){e[n]=255&t,e[n+1]=t>>>8&255,e[n+2]=t>>>16&255,e[n+3]=t>>>24}l.create=c(),l.alloc=function(t){return new B.Array(t)},B.Array!==Array&&(l.alloc=B.pool(l.alloc,B.Array.prototype.subarray)),l.prototype._push=function(t,e,n){return this.tail=this.tail.next=new U(t,e,n),this.len+=e,this},d.prototype=Object.create(U.prototype),d.prototype.fn=function(t,e,n){for(;t>127;)e[n++]=127&t|128,t>>>=7;e[n]=t},l.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new d((t>>>=0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this},l.prototype.int32=function(t){return t<0?this._push(I,10,s.fromNumber(t)):this.uint32(t)},l.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)},l.prototype.uint64=function(t){var e=s.from(t);return this._push(I,e.length(),e)},l.prototype.int64=l.prototype.uint64,l.prototype.sint64=function(t){var e=s.from(t).zzEncode();return this._push(I,e.length(),e)},l.prototype.bool=function(t){return this._push(g,1,t?1:0)},l.prototype.fixed32=function(t){return this._push(o,4,t>>>0)},l.prototype.sfixed32=l.prototype.fixed32,l.prototype.fixed64=function(t){var e=s.from(t);return this._push(o,4,e.lo)._push(o,4,e.hi)},l.prototype.sfixed64=l.prototype.fixed64,l.prototype.float=function(t){return this._push(B.float.writeFloatLE,4,t)},l.prototype.double=function(t){return this._push(B.float.writeDoubleLE,8,t)};var r=B.Array.prototype.set?function(t,e,n){e.set(t,n)}:function(t,e,n){for(var B=0;B<t.length;++B)e[n+B]=t[B]};l.prototype.bytes=function(t){var e=t.length>>>0;if(!e)return this._push(g,1,0);if(B.isString(t)){var n=l.alloc(e=F.length(t));F.decode(t,n,0),t=n}return this.uint32(e)._push(r,e,t)},l.prototype.string=function(t){var e=Q.length(t);return e?this.uint32(e)._push(Q.write,e,t):this._push(g,1,0)},l.prototype.fork=function(){return this.states=new a(this),this.head=this.tail=new U(i,0,0),this.len=0,this},l.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new U(i,0,0),this.len=0),this},l.prototype.ldelim=function(){var t=this.head,e=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=t.next,this.tail=e,this.len+=n),this},l.prototype.finish=function(){for(var t=this.head.next,e=this.constructor.alloc(this.len),n=0;t;)t.fn(t.val,e,n),n+=t.len,t=t.next;return e},l._configure=function(t){n=t,l.create=c(),n._configure()}}}),require_writer_buffer=__commonJS({"web/node_modules/protobufjs/src/writer_buffer.js"(t,e){e.exports=s;var n=require_writer();(s.prototype=Object.create(n.prototype)).constructor=s;var B=require_minimal();function s(){n.call(this)}function F(t,e,n){t.length<40?B.utf8.write(t,e,n):e.utf8Write?e.utf8Write(t,n):e.write(t,n)}s._configure=function(){s.alloc=B._Buffer_allocUnsafe,s.writeBytesBuffer=B.Buffer&&B.Buffer.prototype instanceof Uint8Array&&"set"===B.Buffer.prototype.set.name?function(t,e,n){e.set(t,n)}:function(t,e,n){if(t.copy)t.copy(e,n,0,t.length);else for(var B=0;B<t.length;)e[n++]=t[B++]}},s.prototype.bytes=function(t){B.isString(t)&&(t=B._Buffer_from(t,"base64"));var e=t.length>>>0;return this.uint32(e),e&&this._push(s.writeBytesBuffer,e,t),this},s.prototype.string=function(t){var e=B.Buffer.byteLength(t);return this.uint32(e),e&&this._push(F,e,t),this},s._configure()}}),require_reader=__commonJS({"web/node_modules/protobufjs/src/reader.js"(t,e){e.exports=U;var n,B=require_minimal(),s=B.LongBits,F=B.utf8;function Q(t,e){return RangeError("index out of range: "+t.pos+" + "+(e||1)+" > "+t.len)}function U(t){this.buf=t,this.pos=0,this.len=t.length}var i,a="undefined"!=typeof Uint8Array?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new U(t);throw Error("illegal buffer")}:function(t){if(Array.isArray(t))return new U(t);throw Error("illegal buffer")},l=function(){return B.Buffer?function(t){return(U.create=function(t){return B.Buffer.isBuffer(t)?new n(t):a(t)})(t)}:a};function c(){var t=new s(0,0),e=0;if(!(this.len-this.pos>4)){for(;e<3;++e){if(this.pos>=this.len)throw Q(this);if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t}return t.lo=(t.lo|(127&this.buf[this.pos++])<<7*e)>>>0,t}for(;e<4;++e)if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t;if(t.lo=(t.lo|(127&this.buf[this.pos])<<28)>>>0,t.hi=(t.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return t;if(e=0,this.len-this.pos>4){for(;e<5;++e)if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}else for(;e<5;++e){if(this.pos>=this.len)throw Q(this);if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}throw Error("invalid varint encoding")}function g(t,e){return(t[e-4]|t[e-3]<<8|t[e-2]<<16|t[e-1]<<24)>>>0}function d(){if(this.pos+8>this.len)throw Q(this,8);return new s(g(this.buf,this.pos+=4),g(this.buf,this.pos+=4))}U.create=l(),U.prototype._slice=B.Array.prototype.subarray||B.Array.prototype.slice,U.prototype.uint32=(i=4294967295,function(){if(i=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return i;if(i=(i|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return i;if(i=(i|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return i;if(i=(i|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return i;if(i=(i|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return i;if((this.pos+=5)>this.len)throw this.pos=this.len,Q(this,10);return i}),U.prototype.int32=function(){return 0|this.uint32()},U.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(1&t)},U.prototype.bool=function(){return 0!==this.uint32()},U.prototype.fixed32=function(){if(this.pos+4>this.len)throw Q(this,4);return g(this.buf,this.pos+=4)},U.prototype.sfixed32=function(){if(this.pos+4>this.len)throw Q(this,4);return 0|g(this.buf,this.pos+=4)},U.prototype.float=function(){if(this.pos+4>this.len)throw Q(this,4);var t=B.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t},U.prototype.double=function(){if(this.pos+8>this.len)throw Q(this,4);var t=B.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t},U.prototype.bytes=function(){var t=this.uint32(),e=this.pos,n=this.pos+t;if(n>this.len)throw Q(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(e,n):e===n?new this.buf.constructor(0):this._slice.call(this.buf,e,n)},U.prototype.string=function(){var t=this.bytes();return F.read(t,0,t.length)},U.prototype.skip=function(t){if("number"==typeof t){if(this.pos+t>this.len)throw Q(this,t);this.pos+=t}else do{if(this.pos>=this.len)throw Q(this)}while(128&this.buf[this.pos++]);return this},U.prototype.skipType=function(t){switch(t){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(t=7&this.uint32());)this.skipType(t);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+t+" at offset "+this.pos)}return this},U._configure=function(t){n=t,U.create=l(),n._configure();var e=B.Long?"toLong":"toNumber";B.merge(U.prototype,{int64:function(){return c.call(this)[e](!1)},uint64:function(){return c.call(this)[e](!0)},sint64:function(){return c.call(this).zzDecode()[e](!1)},fixed64:function(){return d.call(this)[e](!0)},sfixed64:function(){return d.call(this)[e](!1)}})}}}),require_reader_buffer=__commonJS({"web/node_modules/protobufjs/src/reader_buffer.js"(t,e){e.exports=s;var n=require_reader();(s.prototype=Object.create(n.prototype)).constructor=s;var B=require_minimal();function s(t){n.call(this,t)}s._configure=function(){B.Buffer&&(s.prototype._slice=B.Buffer.prototype.slice)},s.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+t,this.len))},s._configure()}}),require_service=__commonJS({"web/node_modules/protobufjs/src/rpc/service.js"(t,e){e.exports=B;var n=require_minimal();function B(t,e,B){if("function"!=typeof t)throw TypeError("rpcImpl must be a function");n.EventEmitter.call(this),this.rpcImpl=t,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(B)}(B.prototype=Object.create(n.EventEmitter.prototype)).constructor=B,B.prototype.rpcCall=function t(e,B,s,F,Q){if(!F)throw TypeError("request must be specified");var U=this;if(!Q)return n.asPromise(t,U,e,B,s,F);if(U.rpcImpl)try{return U.rpcImpl(e,B[U.requestDelimited?"encodeDelimited":"encode"](F).finish(),(function(t,n){if(t)return U.emit("error",t,e),Q(t);if(null!==n){if(!(n instanceof s))try{n=s[U.responseDelimited?"decodeDelimited":"decode"](n)}catch(t){return U.emit("error",t,e),Q(t)}return U.emit("data",n,e),Q(null,n)}U.end(!0)}))}catch(t){return U.emit("error",t,e),void setTimeout((function(){Q(t)}),0)}else setTimeout((function(){Q(Error("already ended"))}),0)},B.prototype.end=function(t){return this.rpcImpl&&(t||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}}}),require_rpc=__commonJS({"web/node_modules/protobufjs/src/rpc.js"(t){t.Service=require_service()}}),require_roots=__commonJS({"web/node_modules/protobufjs/src/roots.js"(t,e){e.exports={}}}),require_index_minimal=__commonJS({"web/node_modules/protobufjs/src/index-minimal.js"(t){var e=t;function n(){e.util._configure(),e.Writer._configure(e.BufferWriter),e.Reader._configure(e.BufferReader)}e.build="minimal",e.Writer=require_writer(),e.BufferWriter=require_writer_buffer(),e.Reader=require_reader(),e.BufferReader=require_reader_buffer(),e.util=require_minimal(),e.rpc=require_rpc(),e.roots=require_roots(),e.configure=n,n()}}),require_minimal2=__commonJS({"web/node_modules/protobufjs/minimal.js"(t,e){e.exports=require_index_minimal()}}),require_onnx=__commonJS({"web/lib/onnxjs/ort-schema/protobuf/onnx.js"(t,e){var n,B,s,F=require_minimal2(),Q=F.Reader,U=F.Writer,i=F.util,a=F.roots.default||(F.roots.default={});a.onnx=((s={}).Version=(n={},(B=Object.create(n))[n[0]="_START_VERSION"]=0,B[n[1]="IR_VERSION_2017_10_10"]=1,B[n[2]="IR_VERSION_2017_10_30"]=2,B[n[3]="IR_VERSION_2017_11_3"]=3,B[n[4]="IR_VERSION_2019_1_22"]=4,B[n[5]="IR_VERSION_2019_3_18"]=5,B[n[6]="IR_VERSION_2019_9_19"]=6,B[n[7]="IR_VERSION_2020_5_8"]=7,B[n[8]="IR_VERSION_2021_7_30"]=8,B[n[9]="IR_VERSION"]=9,B),s.AttributeProto=function(){function t(t){if(this.floats=[],this.ints=[],this.strings=[],this.tensors=[],this.graphs=[],this.sparseTensors=[],this.typeProtos=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.refAttrName="",t.prototype.docString="",t.prototype.type=0,t.prototype.f=0,t.prototype.i=i.Long?i.Long.fromBits(0,0,!1):0,t.prototype.s=i.newBuffer([]),t.prototype.t=null,t.prototype.g=null,t.prototype.sparseTensor=null,t.prototype.tp=null,t.prototype.floats=i.emptyArray,t.prototype.ints=i.emptyArray,t.prototype.strings=i.emptyArray,t.prototype.tensors=i.emptyArray,t.prototype.graphs=i.emptyArray,t.prototype.sparseTensors=i.emptyArray,t.prototype.typeProtos=i.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.name&&Object.hasOwnProperty.call(t,"name")&&e.uint32(10).string(t.name),null!=t.f&&Object.hasOwnProperty.call(t,"f")&&e.uint32(21).float(t.f),null!=t.i&&Object.hasOwnProperty.call(t,"i")&&e.uint32(24).int64(t.i),null!=t.s&&Object.hasOwnProperty.call(t,"s")&&e.uint32(34).bytes(t.s),null!=t.t&&Object.hasOwnProperty.call(t,"t")&&a.onnx.TensorProto.encode(t.t,e.uint32(42).fork()).ldelim(),null!=t.g&&Object.hasOwnProperty.call(t,"g")&&a.onnx.GraphProto.encode(t.g,e.uint32(50).fork()).ldelim(),null!=t.floats&&t.floats.length){e.uint32(58).fork();for(var n=0;n<t.floats.length;++n)e.float(t.floats[n]);e.ldelim()}if(null!=t.ints&&t.ints.length){for(e.uint32(66).fork(),n=0;n<t.ints.length;++n)e.int64(t.ints[n]);e.ldelim()}if(null!=t.strings&&t.strings.length)for(n=0;n<t.strings.length;++n)e.uint32(74).bytes(t.strings[n]);if(null!=t.tensors&&t.tensors.length)for(n=0;n<t.tensors.length;++n)a.onnx.TensorProto.encode(t.tensors[n],e.uint32(82).fork()).ldelim();if(null!=t.graphs&&t.graphs.length)for(n=0;n<t.graphs.length;++n)a.onnx.GraphProto.encode(t.graphs[n],e.uint32(90).fork()).ldelim();if(null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&e.uint32(106).string(t.docString),null!=t.tp&&Object.hasOwnProperty.call(t,"tp")&&a.onnx.TypeProto.encode(t.tp,e.uint32(114).fork()).ldelim(),null!=t.typeProtos&&t.typeProtos.length)for(n=0;n<t.typeProtos.length;++n)a.onnx.TypeProto.encode(t.typeProtos[n],e.uint32(122).fork()).ldelim();if(null!=t.type&&Object.hasOwnProperty.call(t,"type")&&e.uint32(160).int32(t.type),null!=t.refAttrName&&Object.hasOwnProperty.call(t,"refAttrName")&&e.uint32(170).string(t.refAttrName),null!=t.sparseTensor&&Object.hasOwnProperty.call(t,"sparseTensor")&&a.onnx.SparseTensorProto.encode(t.sparseTensor,e.uint32(178).fork()).ldelim(),null!=t.sparseTensors&&t.sparseTensors.length)for(n=0;n<t.sparseTensors.length;++n)a.onnx.SparseTensorProto.encode(t.sparseTensors[n],e.uint32(186).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.AttributeProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.name=t.string();break;case 21:B.refAttrName=t.string();break;case 13:B.docString=t.string();break;case 20:B.type=t.int32();break;case 2:B.f=t.float();break;case 3:B.i=t.int64();break;case 4:B.s=t.bytes();break;case 5:B.t=a.onnx.TensorProto.decode(t,t.uint32());break;case 6:B.g=a.onnx.GraphProto.decode(t,t.uint32());break;case 22:B.sparseTensor=a.onnx.SparseTensorProto.decode(t,t.uint32());break;case 14:B.tp=a.onnx.TypeProto.decode(t,t.uint32());break;case 7:if(B.floats&&B.floats.length||(B.floats=[]),2==(7&s))for(var F=t.uint32()+t.pos;t.pos<F;)B.floats.push(t.float());else B.floats.push(t.float());break;case 8:if(B.ints&&B.ints.length||(B.ints=[]),2==(7&s))for(F=t.uint32()+t.pos;t.pos<F;)B.ints.push(t.int64());else B.ints.push(t.int64());break;case 9:B.strings&&B.strings.length||(B.strings=[]),B.strings.push(t.bytes());break;case 10:B.tensors&&B.tensors.length||(B.tensors=[]),B.tensors.push(a.onnx.TensorProto.decode(t,t.uint32()));break;case 11:B.graphs&&B.graphs.length||(B.graphs=[]),B.graphs.push(a.onnx.GraphProto.decode(t,t.uint32()));break;case 23:B.sparseTensors&&B.sparseTensors.length||(B.sparseTensors=[]),B.sparseTensors.push(a.onnx.SparseTensorProto.decode(t,t.uint32()));break;case 15:B.typeProtos&&B.typeProtos.length||(B.typeProtos=[]),B.typeProtos.push(a.onnx.TypeProto.decode(t,t.uint32()));break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.name&&t.hasOwnProperty("name")&&!i.isString(t.name))return"name: string expected";if(null!=t.refAttrName&&t.hasOwnProperty("refAttrName")&&!i.isString(t.refAttrName))return"refAttrName: string expected";if(null!=t.docString&&t.hasOwnProperty("docString")&&!i.isString(t.docString))return"docString: string expected";if(null!=t.type&&t.hasOwnProperty("type"))switch(t.type){default:return"type: enum value expected";case 0:case 1:case 2:case 3:case 4:case 5:case 11:case 13:case 6:case 7:case 8:case 9:case 10:case 12:case 14:}if(null!=t.f&&t.hasOwnProperty("f")&&"number"!=typeof t.f)return"f: number expected";if(null!=t.i&&t.hasOwnProperty("i")&&!(i.isInteger(t.i)||t.i&&i.isInteger(t.i.low)&&i.isInteger(t.i.high)))return"i: integer|Long expected";if(null!=t.s&&t.hasOwnProperty("s")&&!(t.s&&"number"==typeof t.s.length||i.isString(t.s)))return"s: buffer expected";if(null!=t.t&&t.hasOwnProperty("t")&&(n=a.onnx.TensorProto.verify(t.t)))return"t."+n;if(null!=t.g&&t.hasOwnProperty("g")&&(n=a.onnx.GraphProto.verify(t.g)))return"g."+n;if(null!=t.sparseTensor&&t.hasOwnProperty("sparseTensor")&&(n=a.onnx.SparseTensorProto.verify(t.sparseTensor)))return"sparseTensor."+n;if(null!=t.tp&&t.hasOwnProperty("tp")&&(n=a.onnx.TypeProto.verify(t.tp)))return"tp."+n;if(null!=t.floats&&t.hasOwnProperty("floats")){if(!Array.isArray(t.floats))return"floats: array expected";for(var e=0;e<t.floats.length;++e)if("number"!=typeof t.floats[e])return"floats: number[] expected"}if(null!=t.ints&&t.hasOwnProperty("ints")){if(!Array.isArray(t.ints))return"ints: array expected";for(e=0;e<t.ints.length;++e)if(!(i.isInteger(t.ints[e])||t.ints[e]&&i.isInteger(t.ints[e].low)&&i.isInteger(t.ints[e].high)))return"ints: integer|Long[] expected"}if(null!=t.strings&&t.hasOwnProperty("strings")){if(!Array.isArray(t.strings))return"strings: array expected";for(e=0;e<t.strings.length;++e)if(!(t.strings[e]&&"number"==typeof t.strings[e].length||i.isString(t.strings[e])))return"strings: buffer[] expected"}if(null!=t.tensors&&t.hasOwnProperty("tensors")){if(!Array.isArray(t.tensors))return"tensors: array expected";for(e=0;e<t.tensors.length;++e)if(n=a.onnx.TensorProto.verify(t.tensors[e]))return"tensors."+n}if(null!=t.graphs&&t.hasOwnProperty("graphs")){if(!Array.isArray(t.graphs))return"graphs: array expected";for(e=0;e<t.graphs.length;++e)if(n=a.onnx.GraphProto.verify(t.graphs[e]))return"graphs."+n}if(null!=t.sparseTensors&&t.hasOwnProperty("sparseTensors")){if(!Array.isArray(t.sparseTensors))return"sparseTensors: array expected";for(e=0;e<t.sparseTensors.length;++e)if(n=a.onnx.SparseTensorProto.verify(t.sparseTensors[e]))return"sparseTensors."+n}if(null!=t.typeProtos&&t.hasOwnProperty("typeProtos")){if(!Array.isArray(t.typeProtos))return"typeProtos: array expected";for(e=0;e<t.typeProtos.length;++e){var n;if(n=a.onnx.TypeProto.verify(t.typeProtos[e]))return"typeProtos."+n}}return null},t.fromObject=function(t){if(t instanceof a.onnx.AttributeProto)return t;var e=new a.onnx.AttributeProto;switch(null!=t.name&&(e.name=String(t.name)),null!=t.refAttrName&&(e.refAttrName=String(t.refAttrName)),null!=t.docString&&(e.docString=String(t.docString)),t.type){default:if("number"==typeof t.type){e.type=t.type;break}break;case"UNDEFINED":case 0:e.type=0;break;case"FLOAT":case 1:e.type=1;break;case"INT":case 2:e.type=2;break;case"STRING":case 3:e.type=3;break;case"TENSOR":case 4:e.type=4;break;case"GRAPH":case 5:e.type=5;break;case"SPARSE_TENSOR":case 11:e.type=11;break;case"TYPE_PROTO":case 13:e.type=13;break;case"FLOATS":case 6:e.type=6;break;case"INTS":case 7:e.type=7;break;case"STRINGS":case 8:e.type=8;break;case"TENSORS":case 9:e.type=9;break;case"GRAPHS":case 10:e.type=10;break;case"SPARSE_TENSORS":case 12:e.type=12;break;case"TYPE_PROTOS":case 14:e.type=14}if(null!=t.f&&(e.f=Number(t.f)),null!=t.i&&(i.Long?(e.i=i.Long.fromValue(t.i)).unsigned=!1:"string"==typeof t.i?e.i=parseInt(t.i,10):"number"==typeof t.i?e.i=t.i:"object"==typeof t.i&&(e.i=new i.LongBits(t.i.low>>>0,t.i.high>>>0).toNumber())),null!=t.s&&("string"==typeof t.s?i.base64.decode(t.s,e.s=i.newBuffer(i.base64.length(t.s)),0):t.s.length>=0&&(e.s=t.s)),null!=t.t){if("object"!=typeof t.t)throw TypeError(".onnx.AttributeProto.t: object expected");e.t=a.onnx.TensorProto.fromObject(t.t)}if(null!=t.g){if("object"!=typeof t.g)throw TypeError(".onnx.AttributeProto.g: object expected");e.g=a.onnx.GraphProto.fromObject(t.g)}if(null!=t.sparseTensor){if("object"!=typeof t.sparseTensor)throw TypeError(".onnx.AttributeProto.sparseTensor: object expected");e.sparseTensor=a.onnx.SparseTensorProto.fromObject(t.sparseTensor)}if(null!=t.tp){if("object"!=typeof t.tp)throw TypeError(".onnx.AttributeProto.tp: object expected");e.tp=a.onnx.TypeProto.fromObject(t.tp)}if(t.floats){if(!Array.isArray(t.floats))throw TypeError(".onnx.AttributeProto.floats: array expected");e.floats=[];for(var n=0;n<t.floats.length;++n)e.floats[n]=Number(t.floats[n])}if(t.ints){if(!Array.isArray(t.ints))throw TypeError(".onnx.AttributeProto.ints: array expected");for(e.ints=[],n=0;n<t.ints.length;++n)i.Long?(e.ints[n]=i.Long.fromValue(t.ints[n])).unsigned=!1:"string"==typeof t.ints[n]?e.ints[n]=parseInt(t.ints[n],10):"number"==typeof t.ints[n]?e.ints[n]=t.ints[n]:"object"==typeof t.ints[n]&&(e.ints[n]=new i.LongBits(t.ints[n].low>>>0,t.ints[n].high>>>0).toNumber())}if(t.strings){if(!Array.isArray(t.strings))throw TypeError(".onnx.AttributeProto.strings: array expected");for(e.strings=[],n=0;n<t.strings.length;++n)"string"==typeof t.strings[n]?i.base64.decode(t.strings[n],e.strings[n]=i.newBuffer(i.base64.length(t.strings[n])),0):t.strings[n].length>=0&&(e.strings[n]=t.strings[n])}if(t.tensors){if(!Array.isArray(t.tensors))throw TypeError(".onnx.AttributeProto.tensors: array expected");for(e.tensors=[],n=0;n<t.tensors.length;++n){if("object"!=typeof t.tensors[n])throw TypeError(".onnx.AttributeProto.tensors: object expected");e.tensors[n]=a.onnx.TensorProto.fromObject(t.tensors[n])}}if(t.graphs){if(!Array.isArray(t.graphs))throw TypeError(".onnx.AttributeProto.graphs: array expected");for(e.graphs=[],n=0;n<t.graphs.length;++n){if("object"!=typeof t.graphs[n])throw TypeError(".onnx.AttributeProto.graphs: object expected");e.graphs[n]=a.onnx.GraphProto.fromObject(t.graphs[n])}}if(t.sparseTensors){if(!Array.isArray(t.sparseTensors))throw TypeError(".onnx.AttributeProto.sparseTensors: array expected");for(e.sparseTensors=[],n=0;n<t.sparseTensors.length;++n){if("object"!=typeof t.sparseTensors[n])throw TypeError(".onnx.AttributeProto.sparseTensors: object expected");e.sparseTensors[n]=a.onnx.SparseTensorProto.fromObject(t.sparseTensors[n])}}if(t.typeProtos){if(!Array.isArray(t.typeProtos))throw TypeError(".onnx.AttributeProto.typeProtos: array expected");for(e.typeProtos=[],n=0;n<t.typeProtos.length;++n){if("object"!=typeof t.typeProtos[n])throw TypeError(".onnx.AttributeProto.typeProtos: object expected");e.typeProtos[n]=a.onnx.TypeProto.fromObject(t.typeProtos[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.floats=[],n.ints=[],n.strings=[],n.tensors=[],n.graphs=[],n.typeProtos=[],n.sparseTensors=[]),e.defaults){if(n.name="",n.f=0,i.Long){var B=new i.Long(0,0,!1);n.i=e.longs===String?B.toString():e.longs===Number?B.toNumber():B}else n.i=e.longs===String?"0":0;e.bytes===String?n.s="":(n.s=[],e.bytes!==Array&&(n.s=i.newBuffer(n.s))),n.t=null,n.g=null,n.docString="",n.tp=null,n.type=e.enums===String?"UNDEFINED":0,n.refAttrName="",n.sparseTensor=null}if(null!=t.name&&t.hasOwnProperty("name")&&(n.name=t.name),null!=t.f&&t.hasOwnProperty("f")&&(n.f=e.json&&!isFinite(t.f)?String(t.f):t.f),null!=t.i&&t.hasOwnProperty("i")&&("number"==typeof t.i?n.i=e.longs===String?String(t.i):t.i:n.i=e.longs===String?i.Long.prototype.toString.call(t.i):e.longs===Number?new i.LongBits(t.i.low>>>0,t.i.high>>>0).toNumber():t.i),null!=t.s&&t.hasOwnProperty("s")&&(n.s=e.bytes===String?i.base64.encode(t.s,0,t.s.length):e.bytes===Array?Array.prototype.slice.call(t.s):t.s),null!=t.t&&t.hasOwnProperty("t")&&(n.t=a.onnx.TensorProto.toObject(t.t,e)),null!=t.g&&t.hasOwnProperty("g")&&(n.g=a.onnx.GraphProto.toObject(t.g,e)),t.floats&&t.floats.length){n.floats=[];for(var s=0;s<t.floats.length;++s)n.floats[s]=e.json&&!isFinite(t.floats[s])?String(t.floats[s]):t.floats[s]}if(t.ints&&t.ints.length)for(n.ints=[],s=0;s<t.ints.length;++s)"number"==typeof t.ints[s]?n.ints[s]=e.longs===String?String(t.ints[s]):t.ints[s]:n.ints[s]=e.longs===String?i.Long.prototype.toString.call(t.ints[s]):e.longs===Number?new i.LongBits(t.ints[s].low>>>0,t.ints[s].high>>>0).toNumber():t.ints[s];if(t.strings&&t.strings.length)for(n.strings=[],s=0;s<t.strings.length;++s)n.strings[s]=e.bytes===String?i.base64.encode(t.strings[s],0,t.strings[s].length):e.bytes===Array?Array.prototype.slice.call(t.strings[s]):t.strings[s];if(t.tensors&&t.tensors.length)for(n.tensors=[],s=0;s<t.tensors.length;++s)n.tensors[s]=a.onnx.TensorProto.toObject(t.tensors[s],e);if(t.graphs&&t.graphs.length)for(n.graphs=[],s=0;s<t.graphs.length;++s)n.graphs[s]=a.onnx.GraphProto.toObject(t.graphs[s],e);if(null!=t.docString&&t.hasOwnProperty("docString")&&(n.docString=t.docString),null!=t.tp&&t.hasOwnProperty("tp")&&(n.tp=a.onnx.TypeProto.toObject(t.tp,e)),t.typeProtos&&t.typeProtos.length)for(n.typeProtos=[],s=0;s<t.typeProtos.length;++s)n.typeProtos[s]=a.onnx.TypeProto.toObject(t.typeProtos[s],e);if(null!=t.type&&t.hasOwnProperty("type")&&(n.type=e.enums===String?void 0===a.onnx.AttributeProto.AttributeType[t.type]?t.type:a.onnx.AttributeProto.AttributeType[t.type]:t.type),null!=t.refAttrName&&t.hasOwnProperty("refAttrName")&&(n.refAttrName=t.refAttrName),null!=t.sparseTensor&&t.hasOwnProperty("sparseTensor")&&(n.sparseTensor=a.onnx.SparseTensorProto.toObject(t.sparseTensor,e)),t.sparseTensors&&t.sparseTensors.length)for(n.sparseTensors=[],s=0;s<t.sparseTensors.length;++s)n.sparseTensors[s]=a.onnx.SparseTensorProto.toObject(t.sparseTensors[s],e);return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.AttributeProto"},t.AttributeType=function(){var t={},e=Object.create(t);return e[t[0]="UNDEFINED"]=0,e[t[1]="FLOAT"]=1,e[t[2]="INT"]=2,e[t[3]="STRING"]=3,e[t[4]="TENSOR"]=4,e[t[5]="GRAPH"]=5,e[t[11]="SPARSE_TENSOR"]=11,e[t[13]="TYPE_PROTO"]=13,e[t[6]="FLOATS"]=6,e[t[7]="INTS"]=7,e[t[8]="STRINGS"]=8,e[t[9]="TENSORS"]=9,e[t[10]="GRAPHS"]=10,e[t[12]="SPARSE_TENSORS"]=12,e[t[14]="TYPE_PROTOS"]=14,e}(),t}(),s.ValueInfoProto=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.type=null,t.prototype.docString="",t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.name&&Object.hasOwnProperty.call(t,"name")&&e.uint32(10).string(t.name),null!=t.type&&Object.hasOwnProperty.call(t,"type")&&a.onnx.TypeProto.encode(t.type,e.uint32(18).fork()).ldelim(),null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&e.uint32(26).string(t.docString),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.ValueInfoProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.name=t.string();break;case 2:B.type=a.onnx.TypeProto.decode(t,t.uint32());break;case 3:B.docString=t.string();break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.name&&t.hasOwnProperty("name")&&!i.isString(t.name))return"name: string expected";if(null!=t.type&&t.hasOwnProperty("type")){var e=a.onnx.TypeProto.verify(t.type);if(e)return"type."+e}return null!=t.docString&&t.hasOwnProperty("docString")&&!i.isString(t.docString)?"docString: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.ValueInfoProto)return t;var e=new a.onnx.ValueInfoProto;if(null!=t.name&&(e.name=String(t.name)),null!=t.type){if("object"!=typeof t.type)throw TypeError(".onnx.ValueInfoProto.type: object expected");e.type=a.onnx.TypeProto.fromObject(t.type)}return null!=t.docString&&(e.docString=String(t.docString)),e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.name="",n.type=null,n.docString=""),null!=t.name&&t.hasOwnProperty("name")&&(n.name=t.name),null!=t.type&&t.hasOwnProperty("type")&&(n.type=a.onnx.TypeProto.toObject(t.type,e)),null!=t.docString&&t.hasOwnProperty("docString")&&(n.docString=t.docString),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.ValueInfoProto"},t}(),s.NodeProto=function(){function t(t){if(this.input=[],this.output=[],this.attribute=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.input=i.emptyArray,t.prototype.output=i.emptyArray,t.prototype.name="",t.prototype.opType="",t.prototype.domain="",t.prototype.attribute=i.emptyArray,t.prototype.docString="",t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.input&&t.input.length)for(var n=0;n<t.input.length;++n)e.uint32(10).string(t.input[n]);if(null!=t.output&&t.output.length)for(n=0;n<t.output.length;++n)e.uint32(18).string(t.output[n]);if(null!=t.name&&Object.hasOwnProperty.call(t,"name")&&e.uint32(26).string(t.name),null!=t.opType&&Object.hasOwnProperty.call(t,"opType")&&e.uint32(34).string(t.opType),null!=t.attribute&&t.attribute.length)for(n=0;n<t.attribute.length;++n)a.onnx.AttributeProto.encode(t.attribute[n],e.uint32(42).fork()).ldelim();return null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&e.uint32(50).string(t.docString),null!=t.domain&&Object.hasOwnProperty.call(t,"domain")&&e.uint32(58).string(t.domain),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.NodeProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.input&&B.input.length||(B.input=[]),B.input.push(t.string());break;case 2:B.output&&B.output.length||(B.output=[]),B.output.push(t.string());break;case 3:B.name=t.string();break;case 4:B.opType=t.string();break;case 7:B.domain=t.string();break;case 5:B.attribute&&B.attribute.length||(B.attribute=[]),B.attribute.push(a.onnx.AttributeProto.decode(t,t.uint32()));break;case 6:B.docString=t.string();break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.input&&t.hasOwnProperty("input")){if(!Array.isArray(t.input))return"input: array expected";for(var e=0;e<t.input.length;++e)if(!i.isString(t.input[e]))return"input: string[] expected"}if(null!=t.output&&t.hasOwnProperty("output")){if(!Array.isArray(t.output))return"output: array expected";for(e=0;e<t.output.length;++e)if(!i.isString(t.output[e]))return"output: string[] expected"}if(null!=t.name&&t.hasOwnProperty("name")&&!i.isString(t.name))return"name: string expected";if(null!=t.opType&&t.hasOwnProperty("opType")&&!i.isString(t.opType))return"opType: string expected";if(null!=t.domain&&t.hasOwnProperty("domain")&&!i.isString(t.domain))return"domain: string expected";if(null!=t.attribute&&t.hasOwnProperty("attribute")){if(!Array.isArray(t.attribute))return"attribute: array expected";for(e=0;e<t.attribute.length;++e){var n=a.onnx.AttributeProto.verify(t.attribute[e]);if(n)return"attribute."+n}}return null!=t.docString&&t.hasOwnProperty("docString")&&!i.isString(t.docString)?"docString: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.NodeProto)return t;var e=new a.onnx.NodeProto;if(t.input){if(!Array.isArray(t.input))throw TypeError(".onnx.NodeProto.input: array expected");e.input=[];for(var n=0;n<t.input.length;++n)e.input[n]=String(t.input[n])}if(t.output){if(!Array.isArray(t.output))throw TypeError(".onnx.NodeProto.output: array expected");for(e.output=[],n=0;n<t.output.length;++n)e.output[n]=String(t.output[n])}if(null!=t.name&&(e.name=String(t.name)),null!=t.opType&&(e.opType=String(t.opType)),null!=t.domain&&(e.domain=String(t.domain)),t.attribute){if(!Array.isArray(t.attribute))throw TypeError(".onnx.NodeProto.attribute: array expected");for(e.attribute=[],n=0;n<t.attribute.length;++n){if("object"!=typeof t.attribute[n])throw TypeError(".onnx.NodeProto.attribute: object expected");e.attribute[n]=a.onnx.AttributeProto.fromObject(t.attribute[n])}}return null!=t.docString&&(e.docString=String(t.docString)),e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.input=[],n.output=[],n.attribute=[]),e.defaults&&(n.name="",n.opType="",n.docString="",n.domain=""),t.input&&t.input.length){n.input=[];for(var B=0;B<t.input.length;++B)n.input[B]=t.input[B]}if(t.output&&t.output.length)for(n.output=[],B=0;B<t.output.length;++B)n.output[B]=t.output[B];if(null!=t.name&&t.hasOwnProperty("name")&&(n.name=t.name),null!=t.opType&&t.hasOwnProperty("opType")&&(n.opType=t.opType),t.attribute&&t.attribute.length)for(n.attribute=[],B=0;B<t.attribute.length;++B)n.attribute[B]=a.onnx.AttributeProto.toObject(t.attribute[B],e);return null!=t.docString&&t.hasOwnProperty("docString")&&(n.docString=t.docString),null!=t.domain&&t.hasOwnProperty("domain")&&(n.domain=t.domain),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.NodeProto"},t}(),s.TrainingInfoProto=function(){function t(t){if(this.initializationBinding=[],this.updateBinding=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.initialization=null,t.prototype.algorithm=null,t.prototype.initializationBinding=i.emptyArray,t.prototype.updateBinding=i.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.initialization&&Object.hasOwnProperty.call(t,"initialization")&&a.onnx.GraphProto.encode(t.initialization,e.uint32(10).fork()).ldelim(),null!=t.algorithm&&Object.hasOwnProperty.call(t,"algorithm")&&a.onnx.GraphProto.encode(t.algorithm,e.uint32(18).fork()).ldelim(),null!=t.initializationBinding&&t.initializationBinding.length)for(var n=0;n<t.initializationBinding.length;++n)a.onnx.StringStringEntryProto.encode(t.initializationBinding[n],e.uint32(26).fork()).ldelim();if(null!=t.updateBinding&&t.updateBinding.length)for(n=0;n<t.updateBinding.length;++n)a.onnx.StringStringEntryProto.encode(t.updateBinding[n],e.uint32(34).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TrainingInfoProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.initialization=a.onnx.GraphProto.decode(t,t.uint32());break;case 2:B.algorithm=a.onnx.GraphProto.decode(t,t.uint32());break;case 3:B.initializationBinding&&B.initializationBinding.length||(B.initializationBinding=[]),B.initializationBinding.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;case 4:B.updateBinding&&B.updateBinding.length||(B.updateBinding=[]),B.updateBinding.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.initialization&&t.hasOwnProperty("initialization")&&(n=a.onnx.GraphProto.verify(t.initialization)))return"initialization."+n;if(null!=t.algorithm&&t.hasOwnProperty("algorithm")&&(n=a.onnx.GraphProto.verify(t.algorithm)))return"algorithm."+n;if(null!=t.initializationBinding&&t.hasOwnProperty("initializationBinding")){if(!Array.isArray(t.initializationBinding))return"initializationBinding: array expected";for(var e=0;e<t.initializationBinding.length;++e)if(n=a.onnx.StringStringEntryProto.verify(t.initializationBinding[e]))return"initializationBinding."+n}if(null!=t.updateBinding&&t.hasOwnProperty("updateBinding")){if(!Array.isArray(t.updateBinding))return"updateBinding: array expected";for(e=0;e<t.updateBinding.length;++e){var n;if(n=a.onnx.StringStringEntryProto.verify(t.updateBinding[e]))return"updateBinding."+n}}return null},t.fromObject=function(t){if(t instanceof a.onnx.TrainingInfoProto)return t;var e=new a.onnx.TrainingInfoProto;if(null!=t.initialization){if("object"!=typeof t.initialization)throw TypeError(".onnx.TrainingInfoProto.initialization: object expected");e.initialization=a.onnx.GraphProto.fromObject(t.initialization)}if(null!=t.algorithm){if("object"!=typeof t.algorithm)throw TypeError(".onnx.TrainingInfoProto.algorithm: object expected");e.algorithm=a.onnx.GraphProto.fromObject(t.algorithm)}if(t.initializationBinding){if(!Array.isArray(t.initializationBinding))throw TypeError(".onnx.TrainingInfoProto.initializationBinding: array expected");e.initializationBinding=[];for(var n=0;n<t.initializationBinding.length;++n){if("object"!=typeof t.initializationBinding[n])throw TypeError(".onnx.TrainingInfoProto.initializationBinding: object expected");e.initializationBinding[n]=a.onnx.StringStringEntryProto.fromObject(t.initializationBinding[n])}}if(t.updateBinding){if(!Array.isArray(t.updateBinding))throw TypeError(".onnx.TrainingInfoProto.updateBinding: array expected");for(e.updateBinding=[],n=0;n<t.updateBinding.length;++n){if("object"!=typeof t.updateBinding[n])throw TypeError(".onnx.TrainingInfoProto.updateBinding: object expected");e.updateBinding[n]=a.onnx.StringStringEntryProto.fromObject(t.updateBinding[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.initializationBinding=[],n.updateBinding=[]),e.defaults&&(n.initialization=null,n.algorithm=null),null!=t.initialization&&t.hasOwnProperty("initialization")&&(n.initialization=a.onnx.GraphProto.toObject(t.initialization,e)),null!=t.algorithm&&t.hasOwnProperty("algorithm")&&(n.algorithm=a.onnx.GraphProto.toObject(t.algorithm,e)),t.initializationBinding&&t.initializationBinding.length){n.initializationBinding=[];for(var B=0;B<t.initializationBinding.length;++B)n.initializationBinding[B]=a.onnx.StringStringEntryProto.toObject(t.initializationBinding[B],e)}if(t.updateBinding&&t.updateBinding.length)for(n.updateBinding=[],B=0;B<t.updateBinding.length;++B)n.updateBinding[B]=a.onnx.StringStringEntryProto.toObject(t.updateBinding[B],e);return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TrainingInfoProto"},t}(),s.ModelProto=function(){function t(t){if(this.opsetImport=[],this.metadataProps=[],this.trainingInfo=[],this.functions=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.irVersion=i.Long?i.Long.fromBits(0,0,!1):0,t.prototype.opsetImport=i.emptyArray,t.prototype.producerName="",t.prototype.producerVersion="",t.prototype.domain="",t.prototype.modelVersion=i.Long?i.Long.fromBits(0,0,!1):0,t.prototype.docString="",t.prototype.graph=null,t.prototype.metadataProps=i.emptyArray,t.prototype.trainingInfo=i.emptyArray,t.prototype.functions=i.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.irVersion&&Object.hasOwnProperty.call(t,"irVersion")&&e.uint32(8).int64(t.irVersion),null!=t.producerName&&Object.hasOwnProperty.call(t,"producerName")&&e.uint32(18).string(t.producerName),null!=t.producerVersion&&Object.hasOwnProperty.call(t,"producerVersion")&&e.uint32(26).string(t.producerVersion),null!=t.domain&&Object.hasOwnProperty.call(t,"domain")&&e.uint32(34).string(t.domain),null!=t.modelVersion&&Object.hasOwnProperty.call(t,"modelVersion")&&e.uint32(40).int64(t.modelVersion),null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&e.uint32(50).string(t.docString),null!=t.graph&&Object.hasOwnProperty.call(t,"graph")&&a.onnx.GraphProto.encode(t.graph,e.uint32(58).fork()).ldelim(),null!=t.opsetImport&&t.opsetImport.length)for(var n=0;n<t.opsetImport.length;++n)a.onnx.OperatorSetIdProto.encode(t.opsetImport[n],e.uint32(66).fork()).ldelim();if(null!=t.metadataProps&&t.metadataProps.length)for(n=0;n<t.metadataProps.length;++n)a.onnx.StringStringEntryProto.encode(t.metadataProps[n],e.uint32(114).fork()).ldelim();if(null!=t.trainingInfo&&t.trainingInfo.length)for(n=0;n<t.trainingInfo.length;++n)a.onnx.TrainingInfoProto.encode(t.trainingInfo[n],e.uint32(162).fork()).ldelim();if(null!=t.functions&&t.functions.length)for(n=0;n<t.functions.length;++n)a.onnx.FunctionProto.encode(t.functions[n],e.uint32(202).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.ModelProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.irVersion=t.int64();break;case 8:B.opsetImport&&B.opsetImport.length||(B.opsetImport=[]),B.opsetImport.push(a.onnx.OperatorSetIdProto.decode(t,t.uint32()));break;case 2:B.producerName=t.string();break;case 3:B.producerVersion=t.string();break;case 4:B.domain=t.string();break;case 5:B.modelVersion=t.int64();break;case 6:B.docString=t.string();break;case 7:B.graph=a.onnx.GraphProto.decode(t,t.uint32());break;case 14:B.metadataProps&&B.metadataProps.length||(B.metadataProps=[]),B.metadataProps.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;case 20:B.trainingInfo&&B.trainingInfo.length||(B.trainingInfo=[]),B.trainingInfo.push(a.onnx.TrainingInfoProto.decode(t,t.uint32()));break;case 25:B.functions&&B.functions.length||(B.functions=[]),B.functions.push(a.onnx.FunctionProto.decode(t,t.uint32()));break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.irVersion&&t.hasOwnProperty("irVersion")&&!(i.isInteger(t.irVersion)||t.irVersion&&i.isInteger(t.irVersion.low)&&i.isInteger(t.irVersion.high)))return"irVersion: integer|Long expected";if(null!=t.opsetImport&&t.hasOwnProperty("opsetImport")){if(!Array.isArray(t.opsetImport))return"opsetImport: array expected";for(var e=0;e<t.opsetImport.length;++e)if(n=a.onnx.OperatorSetIdProto.verify(t.opsetImport[e]))return"opsetImport."+n}if(null!=t.producerName&&t.hasOwnProperty("producerName")&&!i.isString(t.producerName))return"producerName: string expected";if(null!=t.producerVersion&&t.hasOwnProperty("producerVersion")&&!i.isString(t.producerVersion))return"producerVersion: string expected";if(null!=t.domain&&t.hasOwnProperty("domain")&&!i.isString(t.domain))return"domain: string expected";if(null!=t.modelVersion&&t.hasOwnProperty("modelVersion")&&!(i.isInteger(t.modelVersion)||t.modelVersion&&i.isInteger(t.modelVersion.low)&&i.isInteger(t.modelVersion.high)))return"modelVersion: integer|Long expected";if(null!=t.docString&&t.hasOwnProperty("docString")&&!i.isString(t.docString))return"docString: string expected";if(null!=t.graph&&t.hasOwnProperty("graph")&&(n=a.onnx.GraphProto.verify(t.graph)))return"graph."+n;if(null!=t.metadataProps&&t.hasOwnProperty("metadataProps")){if(!Array.isArray(t.metadataProps))return"metadataProps: array expected";for(e=0;e<t.metadataProps.length;++e)if(n=a.onnx.StringStringEntryProto.verify(t.metadataProps[e]))return"metadataProps."+n}if(null!=t.trainingInfo&&t.hasOwnProperty("trainingInfo")){if(!Array.isArray(t.trainingInfo))return"trainingInfo: array expected";for(e=0;e<t.trainingInfo.length;++e)if(n=a.onnx.TrainingInfoProto.verify(t.trainingInfo[e]))return"trainingInfo."+n}if(null!=t.functions&&t.hasOwnProperty("functions")){if(!Array.isArray(t.functions))return"functions: array expected";for(e=0;e<t.functions.length;++e){var n;if(n=a.onnx.FunctionProto.verify(t.functions[e]))return"functions."+n}}return null},t.fromObject=function(t){if(t instanceof a.onnx.ModelProto)return t;var e=new a.onnx.ModelProto;if(null!=t.irVersion&&(i.Long?(e.irVersion=i.Long.fromValue(t.irVersion)).unsigned=!1:"string"==typeof t.irVersion?e.irVersion=parseInt(t.irVersion,10):"number"==typeof t.irVersion?e.irVersion=t.irVersion:"object"==typeof t.irVersion&&(e.irVersion=new i.LongBits(t.irVersion.low>>>0,t.irVersion.high>>>0).toNumber())),t.opsetImport){if(!Array.isArray(t.opsetImport))throw TypeError(".onnx.ModelProto.opsetImport: array expected");e.opsetImport=[];for(var n=0;n<t.opsetImport.length;++n){if("object"!=typeof t.opsetImport[n])throw TypeError(".onnx.ModelProto.opsetImport: object expected");e.opsetImport[n]=a.onnx.OperatorSetIdProto.fromObject(t.opsetImport[n])}}if(null!=t.producerName&&(e.producerName=String(t.producerName)),null!=t.producerVersion&&(e.producerVersion=String(t.producerVersion)),null!=t.domain&&(e.domain=String(t.domain)),null!=t.modelVersion&&(i.Long?(e.modelVersion=i.Long.fromValue(t.modelVersion)).unsigned=!1:"string"==typeof t.modelVersion?e.modelVersion=parseInt(t.modelVersion,10):"number"==typeof t.modelVersion?e.modelVersion=t.modelVersion:"object"==typeof t.modelVersion&&(e.modelVersion=new i.LongBits(t.modelVersion.low>>>0,t.modelVersion.high>>>0).toNumber())),null!=t.docString&&(e.docString=String(t.docString)),null!=t.graph){if("object"!=typeof t.graph)throw TypeError(".onnx.ModelProto.graph: object expected");e.graph=a.onnx.GraphProto.fromObject(t.graph)}if(t.metadataProps){if(!Array.isArray(t.metadataProps))throw TypeError(".onnx.ModelProto.metadataProps: array expected");for(e.metadataProps=[],n=0;n<t.metadataProps.length;++n){if("object"!=typeof t.metadataProps[n])throw TypeError(".onnx.ModelProto.metadataProps: object expected");e.metadataProps[n]=a.onnx.StringStringEntryProto.fromObject(t.metadataProps[n])}}if(t.trainingInfo){if(!Array.isArray(t.trainingInfo))throw TypeError(".onnx.ModelProto.trainingInfo: array expected");for(e.trainingInfo=[],n=0;n<t.trainingInfo.length;++n){if("object"!=typeof t.trainingInfo[n])throw TypeError(".onnx.ModelProto.trainingInfo: object expected");e.trainingInfo[n]=a.onnx.TrainingInfoProto.fromObject(t.trainingInfo[n])}}if(t.functions){if(!Array.isArray(t.functions))throw TypeError(".onnx.ModelProto.functions: array expected");for(e.functions=[],n=0;n<t.functions.length;++n){if("object"!=typeof t.functions[n])throw TypeError(".onnx.ModelProto.functions: object expected");e.functions[n]=a.onnx.FunctionProto.fromObject(t.functions[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.opsetImport=[],n.metadataProps=[],n.trainingInfo=[],n.functions=[]),e.defaults){if(i.Long){var B=new i.Long(0,0,!1);n.irVersion=e.longs===String?B.toString():e.longs===Number?B.toNumber():B}else n.irVersion=e.longs===String?"0":0;n.producerName="",n.producerVersion="",n.domain="",i.Long?(B=new i.Long(0,0,!1),n.modelVersion=e.longs===String?B.toString():e.longs===Number?B.toNumber():B):n.modelVersion=e.longs===String?"0":0,n.docString="",n.graph=null}if(null!=t.irVersion&&t.hasOwnProperty("irVersion")&&("number"==typeof t.irVersion?n.irVersion=e.longs===String?String(t.irVersion):t.irVersion:n.irVersion=e.longs===String?i.Long.prototype.toString.call(t.irVersion):e.longs===Number?new i.LongBits(t.irVersion.low>>>0,t.irVersion.high>>>0).toNumber():t.irVersion),null!=t.producerName&&t.hasOwnProperty("producerName")&&(n.producerName=t.producerName),null!=t.producerVersion&&t.hasOwnProperty("producerVersion")&&(n.producerVersion=t.producerVersion),null!=t.domain&&t.hasOwnProperty("domain")&&(n.domain=t.domain),null!=t.modelVersion&&t.hasOwnProperty("modelVersion")&&("number"==typeof t.modelVersion?n.modelVersion=e.longs===String?String(t.modelVersion):t.modelVersion:n.modelVersion=e.longs===String?i.Long.prototype.toString.call(t.modelVersion):e.longs===Number?new i.LongBits(t.modelVersion.low>>>0,t.modelVersion.high>>>0).toNumber():t.modelVersion),null!=t.docString&&t.hasOwnProperty("docString")&&(n.docString=t.docString),null!=t.graph&&t.hasOwnProperty("graph")&&(n.graph=a.onnx.GraphProto.toObject(t.graph,e)),t.opsetImport&&t.opsetImport.length){n.opsetImport=[];for(var s=0;s<t.opsetImport.length;++s)n.opsetImport[s]=a.onnx.OperatorSetIdProto.toObject(t.opsetImport[s],e)}if(t.metadataProps&&t.metadataProps.length)for(n.metadataProps=[],s=0;s<t.metadataProps.length;++s)n.metadataProps[s]=a.onnx.StringStringEntryProto.toObject(t.metadataProps[s],e);if(t.trainingInfo&&t.trainingInfo.length)for(n.trainingInfo=[],s=0;s<t.trainingInfo.length;++s)n.trainingInfo[s]=a.onnx.TrainingInfoProto.toObject(t.trainingInfo[s],e);if(t.functions&&t.functions.length)for(n.functions=[],s=0;s<t.functions.length;++s)n.functions[s]=a.onnx.FunctionProto.toObject(t.functions[s],e);return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.ModelProto"},t}(),s.StringStringEntryProto=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.key="",t.prototype.value="",t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.key&&Object.hasOwnProperty.call(t,"key")&&e.uint32(10).string(t.key),null!=t.value&&Object.hasOwnProperty.call(t,"value")&&e.uint32(18).string(t.value),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.StringStringEntryProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.key=t.string();break;case 2:B.value=t.string();break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){return"object"!=typeof t||null===t?"object expected":null!=t.key&&t.hasOwnProperty("key")&&!i.isString(t.key)?"key: string expected":null!=t.value&&t.hasOwnProperty("value")&&!i.isString(t.value)?"value: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.StringStringEntryProto)return t;var e=new a.onnx.StringStringEntryProto;return null!=t.key&&(e.key=String(t.key)),null!=t.value&&(e.value=String(t.value)),e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.key="",n.value=""),null!=t.key&&t.hasOwnProperty("key")&&(n.key=t.key),null!=t.value&&t.hasOwnProperty("value")&&(n.value=t.value),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.StringStringEntryProto"},t}(),s.TensorAnnotation=function(){function t(t){if(this.quantParameterTensorNames=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.tensorName="",t.prototype.quantParameterTensorNames=i.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.tensorName&&Object.hasOwnProperty.call(t,"tensorName")&&e.uint32(10).string(t.tensorName),null!=t.quantParameterTensorNames&&t.quantParameterTensorNames.length)for(var n=0;n<t.quantParameterTensorNames.length;++n)a.onnx.StringStringEntryProto.encode(t.quantParameterTensorNames[n],e.uint32(18).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TensorAnnotation;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.tensorName=t.string();break;case 2:B.quantParameterTensorNames&&B.quantParameterTensorNames.length||(B.quantParameterTensorNames=[]),B.quantParameterTensorNames.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.tensorName&&t.hasOwnProperty("tensorName")&&!i.isString(t.tensorName))return"tensorName: string expected";if(null!=t.quantParameterTensorNames&&t.hasOwnProperty("quantParameterTensorNames")){if(!Array.isArray(t.quantParameterTensorNames))return"quantParameterTensorNames: array expected";for(var e=0;e<t.quantParameterTensorNames.length;++e){var n=a.onnx.StringStringEntryProto.verify(t.quantParameterTensorNames[e]);if(n)return"quantParameterTensorNames."+n}}return null},t.fromObject=function(t){if(t instanceof a.onnx.TensorAnnotation)return t;var e=new a.onnx.TensorAnnotation;if(null!=t.tensorName&&(e.tensorName=String(t.tensorName)),t.quantParameterTensorNames){if(!Array.isArray(t.quantParameterTensorNames))throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: array expected");e.quantParameterTensorNames=[];for(var n=0;n<t.quantParameterTensorNames.length;++n){if("object"!=typeof t.quantParameterTensorNames[n])throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: object expected");e.quantParameterTensorNames[n]=a.onnx.StringStringEntryProto.fromObject(t.quantParameterTensorNames[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.quantParameterTensorNames=[]),e.defaults&&(n.tensorName=""),null!=t.tensorName&&t.hasOwnProperty("tensorName")&&(n.tensorName=t.tensorName),t.quantParameterTensorNames&&t.quantParameterTensorNames.length){n.quantParameterTensorNames=[];for(var B=0;B<t.quantParameterTensorNames.length;++B)n.quantParameterTensorNames[B]=a.onnx.StringStringEntryProto.toObject(t.quantParameterTensorNames[B],e)}return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorAnnotation"},t}(),s.GraphProto=function(){function t(t){if(this.node=[],this.initializer=[],this.sparseInitializer=[],this.input=[],this.output=[],this.valueInfo=[],this.quantizationAnnotation=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.node=i.emptyArray,t.prototype.name="",t.prototype.initializer=i.emptyArray,t.prototype.sparseInitializer=i.emptyArray,t.prototype.docString="",t.prototype.input=i.emptyArray,t.prototype.output=i.emptyArray,t.prototype.valueInfo=i.emptyArray,t.prototype.quantizationAnnotation=i.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.node&&t.node.length)for(var n=0;n<t.node.length;++n)a.onnx.NodeProto.encode(t.node[n],e.uint32(10).fork()).ldelim();if(null!=t.name&&Object.hasOwnProperty.call(t,"name")&&e.uint32(18).string(t.name),null!=t.initializer&&t.initializer.length)for(n=0;n<t.initializer.length;++n)a.onnx.TensorProto.encode(t.initializer[n],e.uint32(42).fork()).ldelim();if(null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&e.uint32(82).string(t.docString),null!=t.input&&t.input.length)for(n=0;n<t.input.length;++n)a.onnx.ValueInfoProto.encode(t.input[n],e.uint32(90).fork()).ldelim();if(null!=t.output&&t.output.length)for(n=0;n<t.output.length;++n)a.onnx.ValueInfoProto.encode(t.output[n],e.uint32(98).fork()).ldelim();if(null!=t.valueInfo&&t.valueInfo.length)for(n=0;n<t.valueInfo.length;++n)a.onnx.ValueInfoProto.encode(t.valueInfo[n],e.uint32(106).fork()).ldelim();if(null!=t.quantizationAnnotation&&t.quantizationAnnotation.length)for(n=0;n<t.quantizationAnnotation.length;++n)a.onnx.TensorAnnotation.encode(t.quantizationAnnotation[n],e.uint32(114).fork()).ldelim();if(null!=t.sparseInitializer&&t.sparseInitializer.length)for(n=0;n<t.sparseInitializer.length;++n)a.onnx.SparseTensorProto.encode(t.sparseInitializer[n],e.uint32(122).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.GraphProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.node&&B.node.length||(B.node=[]),B.node.push(a.onnx.NodeProto.decode(t,t.uint32()));break;case 2:B.name=t.string();break;case 5:B.initializer&&B.initializer.length||(B.initializer=[]),B.initializer.push(a.onnx.TensorProto.decode(t,t.uint32()));break;case 15:B.sparseInitializer&&B.sparseInitializer.length||(B.sparseInitializer=[]),B.sparseInitializer.push(a.onnx.SparseTensorProto.decode(t,t.uint32()));break;case 10:B.docString=t.string();break;case 11:B.input&&B.input.length||(B.input=[]),B.input.push(a.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 12:B.output&&B.output.length||(B.output=[]),B.output.push(a.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 13:B.valueInfo&&B.valueInfo.length||(B.valueInfo=[]),B.valueInfo.push(a.onnx.ValueInfoProto.decode(t,t.uint32()));break;case 14:B.quantizationAnnotation&&B.quantizationAnnotation.length||(B.quantizationAnnotation=[]),B.quantizationAnnotation.push(a.onnx.TensorAnnotation.decode(t,t.uint32()));break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.node&&t.hasOwnProperty("node")){if(!Array.isArray(t.node))return"node: array expected";for(var e=0;e<t.node.length;++e)if(n=a.onnx.NodeProto.verify(t.node[e]))return"node."+n}if(null!=t.name&&t.hasOwnProperty("name")&&!i.isString(t.name))return"name: string expected";if(null!=t.initializer&&t.hasOwnProperty("initializer")){if(!Array.isArray(t.initializer))return"initializer: array expected";for(e=0;e<t.initializer.length;++e)if(n=a.onnx.TensorProto.verify(t.initializer[e]))return"initializer."+n}if(null!=t.sparseInitializer&&t.hasOwnProperty("sparseInitializer")){if(!Array.isArray(t.sparseInitializer))return"sparseInitializer: array expected";for(e=0;e<t.sparseInitializer.length;++e)if(n=a.onnx.SparseTensorProto.verify(t.sparseInitializer[e]))return"sparseInitializer."+n}if(null!=t.docString&&t.hasOwnProperty("docString")&&!i.isString(t.docString))return"docString: string expected";if(null!=t.input&&t.hasOwnProperty("input")){if(!Array.isArray(t.input))return"input: array expected";for(e=0;e<t.input.length;++e)if(n=a.onnx.ValueInfoProto.verify(t.input[e]))return"input."+n}if(null!=t.output&&t.hasOwnProperty("output")){if(!Array.isArray(t.output))return"output: array expected";for(e=0;e<t.output.length;++e)if(n=a.onnx.ValueInfoProto.verify(t.output[e]))return"output."+n}if(null!=t.valueInfo&&t.hasOwnProperty("valueInfo")){if(!Array.isArray(t.valueInfo))return"valueInfo: array expected";for(e=0;e<t.valueInfo.length;++e)if(n=a.onnx.ValueInfoProto.verify(t.valueInfo[e]))return"valueInfo."+n}if(null!=t.quantizationAnnotation&&t.hasOwnProperty("quantizationAnnotation")){if(!Array.isArray(t.quantizationAnnotation))return"quantizationAnnotation: array expected";for(e=0;e<t.quantizationAnnotation.length;++e){var n;if(n=a.onnx.TensorAnnotation.verify(t.quantizationAnnotation[e]))return"quantizationAnnotation."+n}}return null},t.fromObject=function(t){if(t instanceof a.onnx.GraphProto)return t;var e=new a.onnx.GraphProto;if(t.node){if(!Array.isArray(t.node))throw TypeError(".onnx.GraphProto.node: array expected");e.node=[];for(var n=0;n<t.node.length;++n){if("object"!=typeof t.node[n])throw TypeError(".onnx.GraphProto.node: object expected");e.node[n]=a.onnx.NodeProto.fromObject(t.node[n])}}if(null!=t.name&&(e.name=String(t.name)),t.initializer){if(!Array.isArray(t.initializer))throw TypeError(".onnx.GraphProto.initializer: array expected");for(e.initializer=[],n=0;n<t.initializer.length;++n){if("object"!=typeof t.initializer[n])throw TypeError(".onnx.GraphProto.initializer: object expected");e.initializer[n]=a.onnx.TensorProto.fromObject(t.initializer[n])}}if(t.sparseInitializer){if(!Array.isArray(t.sparseInitializer))throw TypeError(".onnx.GraphProto.sparseInitializer: array expected");for(e.sparseInitializer=[],n=0;n<t.sparseInitializer.length;++n){if("object"!=typeof t.sparseInitializer[n])throw TypeError(".onnx.GraphProto.sparseInitializer: object expected");e.sparseInitializer[n]=a.onnx.SparseTensorProto.fromObject(t.sparseInitializer[n])}}if(null!=t.docString&&(e.docString=String(t.docString)),t.input){if(!Array.isArray(t.input))throw TypeError(".onnx.GraphProto.input: array expected");for(e.input=[],n=0;n<t.input.length;++n){if("object"!=typeof t.input[n])throw TypeError(".onnx.GraphProto.input: object expected");e.input[n]=a.onnx.ValueInfoProto.fromObject(t.input[n])}}if(t.output){if(!Array.isArray(t.output))throw TypeError(".onnx.GraphProto.output: array expected");for(e.output=[],n=0;n<t.output.length;++n){if("object"!=typeof t.output[n])throw TypeError(".onnx.GraphProto.output: object expected");e.output[n]=a.onnx.ValueInfoProto.fromObject(t.output[n])}}if(t.valueInfo){if(!Array.isArray(t.valueInfo))throw TypeError(".onnx.GraphProto.valueInfo: array expected");for(e.valueInfo=[],n=0;n<t.valueInfo.length;++n){if("object"!=typeof t.valueInfo[n])throw TypeError(".onnx.GraphProto.valueInfo: object expected");e.valueInfo[n]=a.onnx.ValueInfoProto.fromObject(t.valueInfo[n])}}if(t.quantizationAnnotation){if(!Array.isArray(t.quantizationAnnotation))throw TypeError(".onnx.GraphProto.quantizationAnnotation: array expected");for(e.quantizationAnnotation=[],n=0;n<t.quantizationAnnotation.length;++n){if("object"!=typeof t.quantizationAnnotation[n])throw TypeError(".onnx.GraphProto.quantizationAnnotation: object expected");e.quantizationAnnotation[n]=a.onnx.TensorAnnotation.fromObject(t.quantizationAnnotation[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.node=[],n.initializer=[],n.input=[],n.output=[],n.valueInfo=[],n.quantizationAnnotation=[],n.sparseInitializer=[]),e.defaults&&(n.name="",n.docString=""),t.node&&t.node.length){n.node=[];for(var B=0;B<t.node.length;++B)n.node[B]=a.onnx.NodeProto.toObject(t.node[B],e)}if(null!=t.name&&t.hasOwnProperty("name")&&(n.name=t.name),t.initializer&&t.initializer.length)for(n.initializer=[],B=0;B<t.initializer.length;++B)n.initializer[B]=a.onnx.TensorProto.toObject(t.initializer[B],e);if(null!=t.docString&&t.hasOwnProperty("docString")&&(n.docString=t.docString),t.input&&t.input.length)for(n.input=[],B=0;B<t.input.length;++B)n.input[B]=a.onnx.ValueInfoProto.toObject(t.input[B],e);if(t.output&&t.output.length)for(n.output=[],B=0;B<t.output.length;++B)n.output[B]=a.onnx.ValueInfoProto.toObject(t.output[B],e);if(t.valueInfo&&t.valueInfo.length)for(n.valueInfo=[],B=0;B<t.valueInfo.length;++B)n.valueInfo[B]=a.onnx.ValueInfoProto.toObject(t.valueInfo[B],e);if(t.quantizationAnnotation&&t.quantizationAnnotation.length)for(n.quantizationAnnotation=[],B=0;B<t.quantizationAnnotation.length;++B)n.quantizationAnnotation[B]=a.onnx.TensorAnnotation.toObject(t.quantizationAnnotation[B],e);if(t.sparseInitializer&&t.sparseInitializer.length)for(n.sparseInitializer=[],B=0;B<t.sparseInitializer.length;++B)n.sparseInitializer[B]=a.onnx.SparseTensorProto.toObject(t.sparseInitializer[B],e);return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.GraphProto"},t}(),s.TensorProto=function(){function t(t){if(this.dims=[],this.floatData=[],this.int32Data=[],this.stringData=[],this.int64Data=[],this.externalData=[],this.doubleData=[],this.uint64Data=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.dims=i.emptyArray,t.prototype.dataType=0,t.prototype.segment=null,t.prototype.floatData=i.emptyArray,t.prototype.int32Data=i.emptyArray,t.prototype.stringData=i.emptyArray,t.prototype.int64Data=i.emptyArray,t.prototype.name="",t.prototype.docString="",t.prototype.rawData=i.newBuffer([]),t.prototype.externalData=i.emptyArray,t.prototype.dataLocation=0,t.prototype.doubleData=i.emptyArray,t.prototype.uint64Data=i.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.dims&&t.dims.length){e.uint32(10).fork();for(var n=0;n<t.dims.length;++n)e.int64(t.dims[n]);e.ldelim()}if(null!=t.dataType&&Object.hasOwnProperty.call(t,"dataType")&&e.uint32(16).int32(t.dataType),null!=t.segment&&Object.hasOwnProperty.call(t,"segment")&&a.onnx.TensorProto.Segment.encode(t.segment,e.uint32(26).fork()).ldelim(),null!=t.floatData&&t.floatData.length){for(e.uint32(34).fork(),n=0;n<t.floatData.length;++n)e.float(t.floatData[n]);e.ldelim()}if(null!=t.int32Data&&t.int32Data.length){for(e.uint32(42).fork(),n=0;n<t.int32Data.length;++n)e.int32(t.int32Data[n]);e.ldelim()}if(null!=t.stringData&&t.stringData.length)for(n=0;n<t.stringData.length;++n)e.uint32(50).bytes(t.stringData[n]);if(null!=t.int64Data&&t.int64Data.length){for(e.uint32(58).fork(),n=0;n<t.int64Data.length;++n)e.int64(t.int64Data[n]);e.ldelim()}if(null!=t.name&&Object.hasOwnProperty.call(t,"name")&&e.uint32(66).string(t.name),null!=t.rawData&&Object.hasOwnProperty.call(t,"rawData")&&e.uint32(74).bytes(t.rawData),null!=t.doubleData&&t.doubleData.length){for(e.uint32(82).fork(),n=0;n<t.doubleData.length;++n)e.double(t.doubleData[n]);e.ldelim()}if(null!=t.uint64Data&&t.uint64Data.length){for(e.uint32(90).fork(),n=0;n<t.uint64Data.length;++n)e.uint64(t.uint64Data[n]);e.ldelim()}if(null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&e.uint32(98).string(t.docString),null!=t.externalData&&t.externalData.length)for(n=0;n<t.externalData.length;++n)a.onnx.StringStringEntryProto.encode(t.externalData[n],e.uint32(106).fork()).ldelim();return null!=t.dataLocation&&Object.hasOwnProperty.call(t,"dataLocation")&&e.uint32(112).int32(t.dataLocation),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TensorProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:if(B.dims&&B.dims.length||(B.dims=[]),2==(7&s))for(var F=t.uint32()+t.pos;t.pos<F;)B.dims.push(t.int64());else B.dims.push(t.int64());break;case 2:B.dataType=t.int32();break;case 3:B.segment=a.onnx.TensorProto.Segment.decode(t,t.uint32());break;case 4:if(B.floatData&&B.floatData.length||(B.floatData=[]),2==(7&s))for(F=t.uint32()+t.pos;t.pos<F;)B.floatData.push(t.float());else B.floatData.push(t.float());break;case 5:if(B.int32Data&&B.int32Data.length||(B.int32Data=[]),2==(7&s))for(F=t.uint32()+t.pos;t.pos<F;)B.int32Data.push(t.int32());else B.int32Data.push(t.int32());break;case 6:B.stringData&&B.stringData.length||(B.stringData=[]),B.stringData.push(t.bytes());break;case 7:if(B.int64Data&&B.int64Data.length||(B.int64Data=[]),2==(7&s))for(F=t.uint32()+t.pos;t.pos<F;)B.int64Data.push(t.int64());else B.int64Data.push(t.int64());break;case 8:B.name=t.string();break;case 12:B.docString=t.string();break;case 9:B.rawData=t.bytes();break;case 13:B.externalData&&B.externalData.length||(B.externalData=[]),B.externalData.push(a.onnx.StringStringEntryProto.decode(t,t.uint32()));break;case 14:B.dataLocation=t.int32();break;case 10:if(B.doubleData&&B.doubleData.length||(B.doubleData=[]),2==(7&s))for(F=t.uint32()+t.pos;t.pos<F;)B.doubleData.push(t.double());else B.doubleData.push(t.double());break;case 11:if(B.uint64Data&&B.uint64Data.length||(B.uint64Data=[]),2==(7&s))for(F=t.uint32()+t.pos;t.pos<F;)B.uint64Data.push(t.uint64());else B.uint64Data.push(t.uint64());break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.dims&&t.hasOwnProperty("dims")){if(!Array.isArray(t.dims))return"dims: array expected";for(var e=0;e<t.dims.length;++e)if(!(i.isInteger(t.dims[e])||t.dims[e]&&i.isInteger(t.dims[e].low)&&i.isInteger(t.dims[e].high)))return"dims: integer|Long[] expected"}if(null!=t.dataType&&t.hasOwnProperty("dataType")&&!i.isInteger(t.dataType))return"dataType: integer expected";if(null!=t.segment&&t.hasOwnProperty("segment")&&(n=a.onnx.TensorProto.Segment.verify(t.segment)))return"segment."+n;if(null!=t.floatData&&t.hasOwnProperty("floatData")){if(!Array.isArray(t.floatData))return"floatData: array expected";for(e=0;e<t.floatData.length;++e)if("number"!=typeof t.floatData[e])return"floatData: number[] expected"}if(null!=t.int32Data&&t.hasOwnProperty("int32Data")){if(!Array.isArray(t.int32Data))return"int32Data: array expected";for(e=0;e<t.int32Data.length;++e)if(!i.isInteger(t.int32Data[e]))return"int32Data: integer[] expected"}if(null!=t.stringData&&t.hasOwnProperty("stringData")){if(!Array.isArray(t.stringData))return"stringData: array expected";for(e=0;e<t.stringData.length;++e)if(!(t.stringData[e]&&"number"==typeof t.stringData[e].length||i.isString(t.stringData[e])))return"stringData: buffer[] expected"}if(null!=t.int64Data&&t.hasOwnProperty("int64Data")){if(!Array.isArray(t.int64Data))return"int64Data: array expected";for(e=0;e<t.int64Data.length;++e)if(!(i.isInteger(t.int64Data[e])||t.int64Data[e]&&i.isInteger(t.int64Data[e].low)&&i.isInteger(t.int64Data[e].high)))return"int64Data: integer|Long[] expected"}if(null!=t.name&&t.hasOwnProperty("name")&&!i.isString(t.name))return"name: string expected";if(null!=t.docString&&t.hasOwnProperty("docString")&&!i.isString(t.docString))return"docString: string expected";if(null!=t.rawData&&t.hasOwnProperty("rawData")&&!(t.rawData&&"number"==typeof t.rawData.length||i.isString(t.rawData)))return"rawData: buffer expected";if(null!=t.externalData&&t.hasOwnProperty("externalData")){if(!Array.isArray(t.externalData))return"externalData: array expected";for(e=0;e<t.externalData.length;++e){var n;if(n=a.onnx.StringStringEntryProto.verify(t.externalData[e]))return"externalData."+n}}if(null!=t.dataLocation&&t.hasOwnProperty("dataLocation"))switch(t.dataLocation){default:return"dataLocation: enum value expected";case 0:case 1:}if(null!=t.doubleData&&t.hasOwnProperty("doubleData")){if(!Array.isArray(t.doubleData))return"doubleData: array expected";for(e=0;e<t.doubleData.length;++e)if("number"!=typeof t.doubleData[e])return"doubleData: number[] expected"}if(null!=t.uint64Data&&t.hasOwnProperty("uint64Data")){if(!Array.isArray(t.uint64Data))return"uint64Data: array expected";for(e=0;e<t.uint64Data.length;++e)if(!(i.isInteger(t.uint64Data[e])||t.uint64Data[e]&&i.isInteger(t.uint64Data[e].low)&&i.isInteger(t.uint64Data[e].high)))return"uint64Data: integer|Long[] expected"}return null},t.fromObject=function(t){if(t instanceof a.onnx.TensorProto)return t;var e=new a.onnx.TensorProto;if(t.dims){if(!Array.isArray(t.dims))throw TypeError(".onnx.TensorProto.dims: array expected");e.dims=[];for(var n=0;n<t.dims.length;++n)i.Long?(e.dims[n]=i.Long.fromValue(t.dims[n])).unsigned=!1:"string"==typeof t.dims[n]?e.dims[n]=parseInt(t.dims[n],10):"number"==typeof t.dims[n]?e.dims[n]=t.dims[n]:"object"==typeof t.dims[n]&&(e.dims[n]=new i.LongBits(t.dims[n].low>>>0,t.dims[n].high>>>0).toNumber())}if(null!=t.dataType&&(e.dataType=0|t.dataType),null!=t.segment){if("object"!=typeof t.segment)throw TypeError(".onnx.TensorProto.segment: object expected");e.segment=a.onnx.TensorProto.Segment.fromObject(t.segment)}if(t.floatData){if(!Array.isArray(t.floatData))throw TypeError(".onnx.TensorProto.floatData: array expected");for(e.floatData=[],n=0;n<t.floatData.length;++n)e.floatData[n]=Number(t.floatData[n])}if(t.int32Data){if(!Array.isArray(t.int32Data))throw TypeError(".onnx.TensorProto.int32Data: array expected");for(e.int32Data=[],n=0;n<t.int32Data.length;++n)e.int32Data[n]=0|t.int32Data[n]}if(t.stringData){if(!Array.isArray(t.stringData))throw TypeError(".onnx.TensorProto.stringData: array expected");for(e.stringData=[],n=0;n<t.stringData.length;++n)"string"==typeof t.stringData[n]?i.base64.decode(t.stringData[n],e.stringData[n]=i.newBuffer(i.base64.length(t.stringData[n])),0):t.stringData[n].length>=0&&(e.stringData[n]=t.stringData[n])}if(t.int64Data){if(!Array.isArray(t.int64Data))throw TypeError(".onnx.TensorProto.int64Data: array expected");for(e.int64Data=[],n=0;n<t.int64Data.length;++n)i.Long?(e.int64Data[n]=i.Long.fromValue(t.int64Data[n])).unsigned=!1:"string"==typeof t.int64Data[n]?e.int64Data[n]=parseInt(t.int64Data[n],10):"number"==typeof t.int64Data[n]?e.int64Data[n]=t.int64Data[n]:"object"==typeof t.int64Data[n]&&(e.int64Data[n]=new i.LongBits(t.int64Data[n].low>>>0,t.int64Data[n].high>>>0).toNumber())}if(null!=t.name&&(e.name=String(t.name)),null!=t.docString&&(e.docString=String(t.docString)),null!=t.rawData&&("string"==typeof t.rawData?i.base64.decode(t.rawData,e.rawData=i.newBuffer(i.base64.length(t.rawData)),0):t.rawData.length>=0&&(e.rawData=t.rawData)),t.externalData){if(!Array.isArray(t.externalData))throw TypeError(".onnx.TensorProto.externalData: array expected");for(e.externalData=[],n=0;n<t.externalData.length;++n){if("object"!=typeof t.externalData[n])throw TypeError(".onnx.TensorProto.externalData: object expected");e.externalData[n]=a.onnx.StringStringEntryProto.fromObject(t.externalData[n])}}switch(t.dataLocation){default:if("number"==typeof t.dataLocation){e.dataLocation=t.dataLocation;break}break;case"DEFAULT":case 0:e.dataLocation=0;break;case"EXTERNAL":case 1:e.dataLocation=1}if(t.doubleData){if(!Array.isArray(t.doubleData))throw TypeError(".onnx.TensorProto.doubleData: array expected");for(e.doubleData=[],n=0;n<t.doubleData.length;++n)e.doubleData[n]=Number(t.doubleData[n])}if(t.uint64Data){if(!Array.isArray(t.uint64Data))throw TypeError(".onnx.TensorProto.uint64Data: array expected");for(e.uint64Data=[],n=0;n<t.uint64Data.length;++n)i.Long?(e.uint64Data[n]=i.Long.fromValue(t.uint64Data[n])).unsigned=!0:"string"==typeof t.uint64Data[n]?e.uint64Data[n]=parseInt(t.uint64Data[n],10):"number"==typeof t.uint64Data[n]?e.uint64Data[n]=t.uint64Data[n]:"object"==typeof t.uint64Data[n]&&(e.uint64Data[n]=new i.LongBits(t.uint64Data[n].low>>>0,t.uint64Data[n].high>>>0).toNumber(!0))}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.dims=[],n.floatData=[],n.int32Data=[],n.stringData=[],n.int64Data=[],n.doubleData=[],n.uint64Data=[],n.externalData=[]),e.defaults&&(n.dataType=0,n.segment=null,n.name="",e.bytes===String?n.rawData="":(n.rawData=[],e.bytes!==Array&&(n.rawData=i.newBuffer(n.rawData))),n.docString="",n.dataLocation=e.enums===String?"DEFAULT":0),t.dims&&t.dims.length){n.dims=[];for(var B=0;B<t.dims.length;++B)"number"==typeof t.dims[B]?n.dims[B]=e.longs===String?String(t.dims[B]):t.dims[B]:n.dims[B]=e.longs===String?i.Long.prototype.toString.call(t.dims[B]):e.longs===Number?new i.LongBits(t.dims[B].low>>>0,t.dims[B].high>>>0).toNumber():t.dims[B]}if(null!=t.dataType&&t.hasOwnProperty("dataType")&&(n.dataType=t.dataType),null!=t.segment&&t.hasOwnProperty("segment")&&(n.segment=a.onnx.TensorProto.Segment.toObject(t.segment,e)),t.floatData&&t.floatData.length)for(n.floatData=[],B=0;B<t.floatData.length;++B)n.floatData[B]=e.json&&!isFinite(t.floatData[B])?String(t.floatData[B]):t.floatData[B];if(t.int32Data&&t.int32Data.length)for(n.int32Data=[],B=0;B<t.int32Data.length;++B)n.int32Data[B]=t.int32Data[B];if(t.stringData&&t.stringData.length)for(n.stringData=[],B=0;B<t.stringData.length;++B)n.stringData[B]=e.bytes===String?i.base64.encode(t.stringData[B],0,t.stringData[B].length):e.bytes===Array?Array.prototype.slice.call(t.stringData[B]):t.stringData[B];if(t.int64Data&&t.int64Data.length)for(n.int64Data=[],B=0;B<t.int64Data.length;++B)"number"==typeof t.int64Data[B]?n.int64Data[B]=e.longs===String?String(t.int64Data[B]):t.int64Data[B]:n.int64Data[B]=e.longs===String?i.Long.prototype.toString.call(t.int64Data[B]):e.longs===Number?new i.LongBits(t.int64Data[B].low>>>0,t.int64Data[B].high>>>0).toNumber():t.int64Data[B];if(null!=t.name&&t.hasOwnProperty("name")&&(n.name=t.name),null!=t.rawData&&t.hasOwnProperty("rawData")&&(n.rawData=e.bytes===String?i.base64.encode(t.rawData,0,t.rawData.length):e.bytes===Array?Array.prototype.slice.call(t.rawData):t.rawData),t.doubleData&&t.doubleData.length)for(n.doubleData=[],B=0;B<t.doubleData.length;++B)n.doubleData[B]=e.json&&!isFinite(t.doubleData[B])?String(t.doubleData[B]):t.doubleData[B];if(t.uint64Data&&t.uint64Data.length)for(n.uint64Data=[],B=0;B<t.uint64Data.length;++B)"number"==typeof t.uint64Data[B]?n.uint64Data[B]=e.longs===String?String(t.uint64Data[B]):t.uint64Data[B]:n.uint64Data[B]=e.longs===String?i.Long.prototype.toString.call(t.uint64Data[B]):e.longs===Number?new i.LongBits(t.uint64Data[B].low>>>0,t.uint64Data[B].high>>>0).toNumber(!0):t.uint64Data[B];if(null!=t.docString&&t.hasOwnProperty("docString")&&(n.docString=t.docString),t.externalData&&t.externalData.length)for(n.externalData=[],B=0;B<t.externalData.length;++B)n.externalData[B]=a.onnx.StringStringEntryProto.toObject(t.externalData[B],e);return null!=t.dataLocation&&t.hasOwnProperty("dataLocation")&&(n.dataLocation=e.enums===String?void 0===a.onnx.TensorProto.DataLocation[t.dataLocation]?t.dataLocation:a.onnx.TensorProto.DataLocation[t.dataLocation]:t.dataLocation),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorProto"},t.DataType=function(){var t={},e=Object.create(t);return e[t[0]="UNDEFINED"]=0,e[t[1]="FLOAT"]=1,e[t[2]="UINT8"]=2,e[t[3]="INT8"]=3,e[t[4]="UINT16"]=4,e[t[5]="INT16"]=5,e[t[6]="INT32"]=6,e[t[7]="INT64"]=7,e[t[8]="STRING"]=8,e[t[9]="BOOL"]=9,e[t[10]="FLOAT16"]=10,e[t[11]="DOUBLE"]=11,e[t[12]="UINT32"]=12,e[t[13]="UINT64"]=13,e[t[14]="COMPLEX64"]=14,e[t[15]="COMPLEX128"]=15,e[t[16]="BFLOAT16"]=16,e[t[17]="FLOAT8E4M3FN"]=17,e[t[18]="FLOAT8E4M3FNUZ"]=18,e[t[19]="FLOAT8E5M2"]=19,e[t[20]="FLOAT8E5M2FNUZ"]=20,e}(),t.Segment=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.begin=i.Long?i.Long.fromBits(0,0,!1):0,t.prototype.end=i.Long?i.Long.fromBits(0,0,!1):0,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.begin&&Object.hasOwnProperty.call(t,"begin")&&e.uint32(8).int64(t.begin),null!=t.end&&Object.hasOwnProperty.call(t,"end")&&e.uint32(16).int64(t.end),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TensorProto.Segment;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.begin=t.int64();break;case 2:B.end=t.int64();break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){return"object"!=typeof t||null===t?"object expected":null!=t.begin&&t.hasOwnProperty("begin")&&!(i.isInteger(t.begin)||t.begin&&i.isInteger(t.begin.low)&&i.isInteger(t.begin.high))?"begin: integer|Long expected":null!=t.end&&t.hasOwnProperty("end")&&!(i.isInteger(t.end)||t.end&&i.isInteger(t.end.low)&&i.isInteger(t.end.high))?"end: integer|Long expected":null},t.fromObject=function(t){if(t instanceof a.onnx.TensorProto.Segment)return t;var e=new a.onnx.TensorProto.Segment;return null!=t.begin&&(i.Long?(e.begin=i.Long.fromValue(t.begin)).unsigned=!1:"string"==typeof t.begin?e.begin=parseInt(t.begin,10):"number"==typeof t.begin?e.begin=t.begin:"object"==typeof t.begin&&(e.begin=new i.LongBits(t.begin.low>>>0,t.begin.high>>>0).toNumber())),null!=t.end&&(i.Long?(e.end=i.Long.fromValue(t.end)).unsigned=!1:"string"==typeof t.end?e.end=parseInt(t.end,10):"number"==typeof t.end?e.end=t.end:"object"==typeof t.end&&(e.end=new i.LongBits(t.end.low>>>0,t.end.high>>>0).toNumber())),e},t.toObject=function(t,e){e||(e={});var n={};if(e.defaults){if(i.Long){var B=new i.Long(0,0,!1);n.begin=e.longs===String?B.toString():e.longs===Number?B.toNumber():B}else n.begin=e.longs===String?"0":0;i.Long?(B=new i.Long(0,0,!1),n.end=e.longs===String?B.toString():e.longs===Number?B.toNumber():B):n.end=e.longs===String?"0":0}return null!=t.begin&&t.hasOwnProperty("begin")&&("number"==typeof t.begin?n.begin=e.longs===String?String(t.begin):t.begin:n.begin=e.longs===String?i.Long.prototype.toString.call(t.begin):e.longs===Number?new i.LongBits(t.begin.low>>>0,t.begin.high>>>0).toNumber():t.begin),null!=t.end&&t.hasOwnProperty("end")&&("number"==typeof t.end?n.end=e.longs===String?String(t.end):t.end:n.end=e.longs===String?i.Long.prototype.toString.call(t.end):e.longs===Number?new i.LongBits(t.end.low>>>0,t.end.high>>>0).toNumber():t.end),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorProto.Segment"},t}(),t.DataLocation=function(){var t={},e=Object.create(t);return e[t[0]="DEFAULT"]=0,e[t[1]="EXTERNAL"]=1,e}(),t}(),s.SparseTensorProto=function(){function t(t){if(this.dims=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.values=null,t.prototype.indices=null,t.prototype.dims=i.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.values&&Object.hasOwnProperty.call(t,"values")&&a.onnx.TensorProto.encode(t.values,e.uint32(10).fork()).ldelim(),null!=t.indices&&Object.hasOwnProperty.call(t,"indices")&&a.onnx.TensorProto.encode(t.indices,e.uint32(18).fork()).ldelim(),null!=t.dims&&t.dims.length){e.uint32(26).fork();for(var n=0;n<t.dims.length;++n)e.int64(t.dims[n]);e.ldelim()}return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.SparseTensorProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.values=a.onnx.TensorProto.decode(t,t.uint32());break;case 2:B.indices=a.onnx.TensorProto.decode(t,t.uint32());break;case 3:if(B.dims&&B.dims.length||(B.dims=[]),2==(7&s))for(var F=t.uint32()+t.pos;t.pos<F;)B.dims.push(t.int64());else B.dims.push(t.int64());break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";var e;if(null!=t.values&&t.hasOwnProperty("values")&&(e=a.onnx.TensorProto.verify(t.values)))return"values."+e;if(null!=t.indices&&t.hasOwnProperty("indices")&&(e=a.onnx.TensorProto.verify(t.indices)))return"indices."+e;if(null!=t.dims&&t.hasOwnProperty("dims")){if(!Array.isArray(t.dims))return"dims: array expected";for(var n=0;n<t.dims.length;++n)if(!(i.isInteger(t.dims[n])||t.dims[n]&&i.isInteger(t.dims[n].low)&&i.isInteger(t.dims[n].high)))return"dims: integer|Long[] expected"}return null},t.fromObject=function(t){if(t instanceof a.onnx.SparseTensorProto)return t;var e=new a.onnx.SparseTensorProto;if(null!=t.values){if("object"!=typeof t.values)throw TypeError(".onnx.SparseTensorProto.values: object expected");e.values=a.onnx.TensorProto.fromObject(t.values)}if(null!=t.indices){if("object"!=typeof t.indices)throw TypeError(".onnx.SparseTensorProto.indices: object expected");e.indices=a.onnx.TensorProto.fromObject(t.indices)}if(t.dims){if(!Array.isArray(t.dims))throw TypeError(".onnx.SparseTensorProto.dims: array expected");e.dims=[];for(var n=0;n<t.dims.length;++n)i.Long?(e.dims[n]=i.Long.fromValue(t.dims[n])).unsigned=!1:"string"==typeof t.dims[n]?e.dims[n]=parseInt(t.dims[n],10):"number"==typeof t.dims[n]?e.dims[n]=t.dims[n]:"object"==typeof t.dims[n]&&(e.dims[n]=new i.LongBits(t.dims[n].low>>>0,t.dims[n].high>>>0).toNumber())}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.dims=[]),e.defaults&&(n.values=null,n.indices=null),null!=t.values&&t.hasOwnProperty("values")&&(n.values=a.onnx.TensorProto.toObject(t.values,e)),null!=t.indices&&t.hasOwnProperty("indices")&&(n.indices=a.onnx.TensorProto.toObject(t.indices,e)),t.dims&&t.dims.length){n.dims=[];for(var B=0;B<t.dims.length;++B)"number"==typeof t.dims[B]?n.dims[B]=e.longs===String?String(t.dims[B]):t.dims[B]:n.dims[B]=e.longs===String?i.Long.prototype.toString.call(t.dims[B]):e.longs===Number?new i.LongBits(t.dims[B].low>>>0,t.dims[B].high>>>0).toNumber():t.dims[B]}return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.SparseTensorProto"},t}(),s.TensorShapeProto=function(){function t(t){if(this.dim=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.dim=i.emptyArray,t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.dim&&t.dim.length)for(var n=0;n<t.dim.length;++n)a.onnx.TensorShapeProto.Dimension.encode(t.dim[n],e.uint32(10).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TensorShapeProto;t.pos<n;){var s=t.uint32();s>>>3==1?(B.dim&&B.dim.length||(B.dim=[]),B.dim.push(a.onnx.TensorShapeProto.Dimension.decode(t,t.uint32()))):t.skipType(7&s)}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.dim&&t.hasOwnProperty("dim")){if(!Array.isArray(t.dim))return"dim: array expected";for(var e=0;e<t.dim.length;++e){var n=a.onnx.TensorShapeProto.Dimension.verify(t.dim[e]);if(n)return"dim."+n}}return null},t.fromObject=function(t){if(t instanceof a.onnx.TensorShapeProto)return t;var e=new a.onnx.TensorShapeProto;if(t.dim){if(!Array.isArray(t.dim))throw TypeError(".onnx.TensorShapeProto.dim: array expected");e.dim=[];for(var n=0;n<t.dim.length;++n){if("object"!=typeof t.dim[n])throw TypeError(".onnx.TensorShapeProto.dim: object expected");e.dim[n]=a.onnx.TensorShapeProto.Dimension.fromObject(t.dim[n])}}return e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.dim=[]),t.dim&&t.dim.length){n.dim=[];for(var B=0;B<t.dim.length;++B)n.dim[B]=a.onnx.TensorShapeProto.Dimension.toObject(t.dim[B],e)}return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorShapeProto"},t.Dimension=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.dimValue=null,t.prototype.dimParam=null,t.prototype.denotation="",Object.defineProperty(t.prototype,"value",{get:i.oneOfGetter(e=["dimValue","dimParam"]),set:i.oneOfSetter(e)}),t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.dimValue&&Object.hasOwnProperty.call(t,"dimValue")&&e.uint32(8).int64(t.dimValue),null!=t.dimParam&&Object.hasOwnProperty.call(t,"dimParam")&&e.uint32(18).string(t.dimParam),null!=t.denotation&&Object.hasOwnProperty.call(t,"denotation")&&e.uint32(26).string(t.denotation),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TensorShapeProto.Dimension;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.dimValue=t.int64();break;case 2:B.dimParam=t.string();break;case 3:B.denotation=t.string();break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";var e={};if(null!=t.dimValue&&t.hasOwnProperty("dimValue")&&(e.value=1,!(i.isInteger(t.dimValue)||t.dimValue&&i.isInteger(t.dimValue.low)&&i.isInteger(t.dimValue.high))))return"dimValue: integer|Long expected";if(null!=t.dimParam&&t.hasOwnProperty("dimParam")){if(1===e.value)return"value: multiple values";if(e.value=1,!i.isString(t.dimParam))return"dimParam: string expected"}return null!=t.denotation&&t.hasOwnProperty("denotation")&&!i.isString(t.denotation)?"denotation: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.TensorShapeProto.Dimension)return t;var e=new a.onnx.TensorShapeProto.Dimension;return null!=t.dimValue&&(i.Long?(e.dimValue=i.Long.fromValue(t.dimValue)).unsigned=!1:"string"==typeof t.dimValue?e.dimValue=parseInt(t.dimValue,10):"number"==typeof t.dimValue?e.dimValue=t.dimValue:"object"==typeof t.dimValue&&(e.dimValue=new i.LongBits(t.dimValue.low>>>0,t.dimValue.high>>>0).toNumber())),null!=t.dimParam&&(e.dimParam=String(t.dimParam)),null!=t.denotation&&(e.denotation=String(t.denotation)),e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.denotation=""),null!=t.dimValue&&t.hasOwnProperty("dimValue")&&("number"==typeof t.dimValue?n.dimValue=e.longs===String?String(t.dimValue):t.dimValue:n.dimValue=e.longs===String?i.Long.prototype.toString.call(t.dimValue):e.longs===Number?new i.LongBits(t.dimValue.low>>>0,t.dimValue.high>>>0).toNumber():t.dimValue,e.oneofs&&(n.value="dimValue")),null!=t.dimParam&&t.hasOwnProperty("dimParam")&&(n.dimParam=t.dimParam,e.oneofs&&(n.value="dimParam")),null!=t.denotation&&t.hasOwnProperty("denotation")&&(n.denotation=t.denotation),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TensorShapeProto.Dimension"},t}(),t}(),s.TypeProto=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}var e;return t.prototype.tensorType=null,t.prototype.sequenceType=null,t.prototype.mapType=null,t.prototype.optionalType=null,t.prototype.sparseTensorType=null,t.prototype.denotation="",Object.defineProperty(t.prototype,"value",{get:i.oneOfGetter(e=["tensorType","sequenceType","mapType","optionalType","sparseTensorType"]),set:i.oneOfSetter(e)}),t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.tensorType&&Object.hasOwnProperty.call(t,"tensorType")&&a.onnx.TypeProto.Tensor.encode(t.tensorType,e.uint32(10).fork()).ldelim(),null!=t.sequenceType&&Object.hasOwnProperty.call(t,"sequenceType")&&a.onnx.TypeProto.Sequence.encode(t.sequenceType,e.uint32(34).fork()).ldelim(),null!=t.mapType&&Object.hasOwnProperty.call(t,"mapType")&&a.onnx.TypeProto.Map.encode(t.mapType,e.uint32(42).fork()).ldelim(),null!=t.denotation&&Object.hasOwnProperty.call(t,"denotation")&&e.uint32(50).string(t.denotation),null!=t.sparseTensorType&&Object.hasOwnProperty.call(t,"sparseTensorType")&&a.onnx.TypeProto.SparseTensor.encode(t.sparseTensorType,e.uint32(66).fork()).ldelim(),null!=t.optionalType&&Object.hasOwnProperty.call(t,"optionalType")&&a.onnx.TypeProto.Optional.encode(t.optionalType,e.uint32(74).fork()).ldelim(),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TypeProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.tensorType=a.onnx.TypeProto.Tensor.decode(t,t.uint32());break;case 4:B.sequenceType=a.onnx.TypeProto.Sequence.decode(t,t.uint32());break;case 5:B.mapType=a.onnx.TypeProto.Map.decode(t,t.uint32());break;case 9:B.optionalType=a.onnx.TypeProto.Optional.decode(t,t.uint32());break;case 8:B.sparseTensorType=a.onnx.TypeProto.SparseTensor.decode(t,t.uint32());break;case 6:B.denotation=t.string();break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";var e={};if(null!=t.tensorType&&t.hasOwnProperty("tensorType")&&(e.value=1,n=a.onnx.TypeProto.Tensor.verify(t.tensorType)))return"tensorType."+n;if(null!=t.sequenceType&&t.hasOwnProperty("sequenceType")){if(1===e.value)return"value: multiple values";if(e.value=1,n=a.onnx.TypeProto.Sequence.verify(t.sequenceType))return"sequenceType."+n}if(null!=t.mapType&&t.hasOwnProperty("mapType")){if(1===e.value)return"value: multiple values";if(e.value=1,n=a.onnx.TypeProto.Map.verify(t.mapType))return"mapType."+n}if(null!=t.optionalType&&t.hasOwnProperty("optionalType")){if(1===e.value)return"value: multiple values";if(e.value=1,n=a.onnx.TypeProto.Optional.verify(t.optionalType))return"optionalType."+n}if(null!=t.sparseTensorType&&t.hasOwnProperty("sparseTensorType")){if(1===e.value)return"value: multiple values";var n;if(e.value=1,n=a.onnx.TypeProto.SparseTensor.verify(t.sparseTensorType))return"sparseTensorType."+n}return null!=t.denotation&&t.hasOwnProperty("denotation")&&!i.isString(t.denotation)?"denotation: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto)return t;var e=new a.onnx.TypeProto;if(null!=t.tensorType){if("object"!=typeof t.tensorType)throw TypeError(".onnx.TypeProto.tensorType: object expected");e.tensorType=a.onnx.TypeProto.Tensor.fromObject(t.tensorType)}if(null!=t.sequenceType){if("object"!=typeof t.sequenceType)throw TypeError(".onnx.TypeProto.sequenceType: object expected");e.sequenceType=a.onnx.TypeProto.Sequence.fromObject(t.sequenceType)}if(null!=t.mapType){if("object"!=typeof t.mapType)throw TypeError(".onnx.TypeProto.mapType: object expected");e.mapType=a.onnx.TypeProto.Map.fromObject(t.mapType)}if(null!=t.optionalType){if("object"!=typeof t.optionalType)throw TypeError(".onnx.TypeProto.optionalType: object expected");e.optionalType=a.onnx.TypeProto.Optional.fromObject(t.optionalType)}if(null!=t.sparseTensorType){if("object"!=typeof t.sparseTensorType)throw TypeError(".onnx.TypeProto.sparseTensorType: object expected");e.sparseTensorType=a.onnx.TypeProto.SparseTensor.fromObject(t.sparseTensorType)}return null!=t.denotation&&(e.denotation=String(t.denotation)),e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.denotation=""),null!=t.tensorType&&t.hasOwnProperty("tensorType")&&(n.tensorType=a.onnx.TypeProto.Tensor.toObject(t.tensorType,e),e.oneofs&&(n.value="tensorType")),null!=t.sequenceType&&t.hasOwnProperty("sequenceType")&&(n.sequenceType=a.onnx.TypeProto.Sequence.toObject(t.sequenceType,e),e.oneofs&&(n.value="sequenceType")),null!=t.mapType&&t.hasOwnProperty("mapType")&&(n.mapType=a.onnx.TypeProto.Map.toObject(t.mapType,e),e.oneofs&&(n.value="mapType")),null!=t.denotation&&t.hasOwnProperty("denotation")&&(n.denotation=t.denotation),null!=t.sparseTensorType&&t.hasOwnProperty("sparseTensorType")&&(n.sparseTensorType=a.onnx.TypeProto.SparseTensor.toObject(t.sparseTensorType,e),e.oneofs&&(n.value="sparseTensorType")),null!=t.optionalType&&t.hasOwnProperty("optionalType")&&(n.optionalType=a.onnx.TypeProto.Optional.toObject(t.optionalType,e),e.oneofs&&(n.value="optionalType")),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto"},t.Tensor=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.elemType=0,t.prototype.shape=null,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.elemType&&Object.hasOwnProperty.call(t,"elemType")&&e.uint32(8).int32(t.elemType),null!=t.shape&&Object.hasOwnProperty.call(t,"shape")&&a.onnx.TensorShapeProto.encode(t.shape,e.uint32(18).fork()).ldelim(),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TypeProto.Tensor;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.elemType=t.int32();break;case 2:B.shape=a.onnx.TensorShapeProto.decode(t,t.uint32());break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.elemType&&t.hasOwnProperty("elemType")&&!i.isInteger(t.elemType))return"elemType: integer expected";if(null!=t.shape&&t.hasOwnProperty("shape")){var e=a.onnx.TensorShapeProto.verify(t.shape);if(e)return"shape."+e}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.Tensor)return t;var e=new a.onnx.TypeProto.Tensor;if(null!=t.elemType&&(e.elemType=0|t.elemType),null!=t.shape){if("object"!=typeof t.shape)throw TypeError(".onnx.TypeProto.Tensor.shape: object expected");e.shape=a.onnx.TensorShapeProto.fromObject(t.shape)}return e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.elemType=0,n.shape=null),null!=t.elemType&&t.hasOwnProperty("elemType")&&(n.elemType=t.elemType),null!=t.shape&&t.hasOwnProperty("shape")&&(n.shape=a.onnx.TensorShapeProto.toObject(t.shape,e)),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.Tensor"},t}(),t.Sequence=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.elemType=null,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.elemType&&Object.hasOwnProperty.call(t,"elemType")&&a.onnx.TypeProto.encode(t.elemType,e.uint32(10).fork()).ldelim(),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TypeProto.Sequence;t.pos<n;){var s=t.uint32();s>>>3==1?B.elemType=a.onnx.TypeProto.decode(t,t.uint32()):t.skipType(7&s)}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.elemType&&t.hasOwnProperty("elemType")){var e=a.onnx.TypeProto.verify(t.elemType);if(e)return"elemType."+e}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.Sequence)return t;var e=new a.onnx.TypeProto.Sequence;if(null!=t.elemType){if("object"!=typeof t.elemType)throw TypeError(".onnx.TypeProto.Sequence.elemType: object expected");e.elemType=a.onnx.TypeProto.fromObject(t.elemType)}return e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.elemType=null),null!=t.elemType&&t.hasOwnProperty("elemType")&&(n.elemType=a.onnx.TypeProto.toObject(t.elemType,e)),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.Sequence"},t}(),t.Map=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.keyType=0,t.prototype.valueType=null,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.keyType&&Object.hasOwnProperty.call(t,"keyType")&&e.uint32(8).int32(t.keyType),null!=t.valueType&&Object.hasOwnProperty.call(t,"valueType")&&a.onnx.TypeProto.encode(t.valueType,e.uint32(18).fork()).ldelim(),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TypeProto.Map;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.keyType=t.int32();break;case 2:B.valueType=a.onnx.TypeProto.decode(t,t.uint32());break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.keyType&&t.hasOwnProperty("keyType")&&!i.isInteger(t.keyType))return"keyType: integer expected";if(null!=t.valueType&&t.hasOwnProperty("valueType")){var e=a.onnx.TypeProto.verify(t.valueType);if(e)return"valueType."+e}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.Map)return t;var e=new a.onnx.TypeProto.Map;if(null!=t.keyType&&(e.keyType=0|t.keyType),null!=t.valueType){if("object"!=typeof t.valueType)throw TypeError(".onnx.TypeProto.Map.valueType: object expected");e.valueType=a.onnx.TypeProto.fromObject(t.valueType)}return e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.keyType=0,n.valueType=null),null!=t.keyType&&t.hasOwnProperty("keyType")&&(n.keyType=t.keyType),null!=t.valueType&&t.hasOwnProperty("valueType")&&(n.valueType=a.onnx.TypeProto.toObject(t.valueType,e)),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.Map"},t}(),t.Optional=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.elemType=null,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.elemType&&Object.hasOwnProperty.call(t,"elemType")&&a.onnx.TypeProto.encode(t.elemType,e.uint32(10).fork()).ldelim(),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TypeProto.Optional;t.pos<n;){var s=t.uint32();s>>>3==1?B.elemType=a.onnx.TypeProto.decode(t,t.uint32()):t.skipType(7&s)}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.elemType&&t.hasOwnProperty("elemType")){var e=a.onnx.TypeProto.verify(t.elemType);if(e)return"elemType."+e}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.Optional)return t;var e=new a.onnx.TypeProto.Optional;if(null!=t.elemType){if("object"!=typeof t.elemType)throw TypeError(".onnx.TypeProto.Optional.elemType: object expected");e.elemType=a.onnx.TypeProto.fromObject(t.elemType)}return e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.elemType=null),null!=t.elemType&&t.hasOwnProperty("elemType")&&(n.elemType=a.onnx.TypeProto.toObject(t.elemType,e)),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.Optional"},t}(),t.SparseTensor=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.elemType=0,t.prototype.shape=null,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.elemType&&Object.hasOwnProperty.call(t,"elemType")&&e.uint32(8).int32(t.elemType),null!=t.shape&&Object.hasOwnProperty.call(t,"shape")&&a.onnx.TensorShapeProto.encode(t.shape,e.uint32(18).fork()).ldelim(),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.TypeProto.SparseTensor;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.elemType=t.int32();break;case 2:B.shape=a.onnx.TensorShapeProto.decode(t,t.uint32());break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.elemType&&t.hasOwnProperty("elemType")&&!i.isInteger(t.elemType))return"elemType: integer expected";if(null!=t.shape&&t.hasOwnProperty("shape")){var e=a.onnx.TensorShapeProto.verify(t.shape);if(e)return"shape."+e}return null},t.fromObject=function(t){if(t instanceof a.onnx.TypeProto.SparseTensor)return t;var e=new a.onnx.TypeProto.SparseTensor;if(null!=t.elemType&&(e.elemType=0|t.elemType),null!=t.shape){if("object"!=typeof t.shape)throw TypeError(".onnx.TypeProto.SparseTensor.shape: object expected");e.shape=a.onnx.TensorShapeProto.fromObject(t.shape)}return e},t.toObject=function(t,e){e||(e={});var n={};return e.defaults&&(n.elemType=0,n.shape=null),null!=t.elemType&&t.hasOwnProperty("elemType")&&(n.elemType=t.elemType),null!=t.shape&&t.hasOwnProperty("shape")&&(n.shape=a.onnx.TensorShapeProto.toObject(t.shape,e)),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.TypeProto.SparseTensor"},t}(),t}(),s.OperatorSetIdProto=function(){function t(t){if(t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.domain="",t.prototype.version=i.Long?i.Long.fromBits(0,0,!1):0,t.create=function(e){return new t(e)},t.encode=function(t,e){return e||(e=U.create()),null!=t.domain&&Object.hasOwnProperty.call(t,"domain")&&e.uint32(10).string(t.domain),null!=t.version&&Object.hasOwnProperty.call(t,"version")&&e.uint32(16).int64(t.version),e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.OperatorSetIdProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.domain=t.string();break;case 2:B.version=t.int64();break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){return"object"!=typeof t||null===t?"object expected":null!=t.domain&&t.hasOwnProperty("domain")&&!i.isString(t.domain)?"domain: string expected":null!=t.version&&t.hasOwnProperty("version")&&!(i.isInteger(t.version)||t.version&&i.isInteger(t.version.low)&&i.isInteger(t.version.high))?"version: integer|Long expected":null},t.fromObject=function(t){if(t instanceof a.onnx.OperatorSetIdProto)return t;var e=new a.onnx.OperatorSetIdProto;return null!=t.domain&&(e.domain=String(t.domain)),null!=t.version&&(i.Long?(e.version=i.Long.fromValue(t.version)).unsigned=!1:"string"==typeof t.version?e.version=parseInt(t.version,10):"number"==typeof t.version?e.version=t.version:"object"==typeof t.version&&(e.version=new i.LongBits(t.version.low>>>0,t.version.high>>>0).toNumber())),e},t.toObject=function(t,e){e||(e={});var n={};if(e.defaults)if(n.domain="",i.Long){var B=new i.Long(0,0,!1);n.version=e.longs===String?B.toString():e.longs===Number?B.toNumber():B}else n.version=e.longs===String?"0":0;return null!=t.domain&&t.hasOwnProperty("domain")&&(n.domain=t.domain),null!=t.version&&t.hasOwnProperty("version")&&("number"==typeof t.version?n.version=e.longs===String?String(t.version):t.version:n.version=e.longs===String?i.Long.prototype.toString.call(t.version):e.longs===Number?new i.LongBits(t.version.low>>>0,t.version.high>>>0).toNumber():t.version),n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.OperatorSetIdProto"},t}(),s.OperatorStatus=function(){var t={},e=Object.create(t);return e[t[0]="EXPERIMENTAL"]=0,e[t[1]="STABLE"]=1,e}(),s.FunctionProto=function(){function t(t){if(this.input=[],this.output=[],this.attribute=[],this.attributeProto=[],this.node=[],this.opsetImport=[],t)for(var e=Object.keys(t),n=0;n<e.length;++n)null!=t[e[n]]&&(this[e[n]]=t[e[n]])}return t.prototype.name="",t.prototype.input=i.emptyArray,t.prototype.output=i.emptyArray,t.prototype.attribute=i.emptyArray,t.prototype.attributeProto=i.emptyArray,t.prototype.node=i.emptyArray,t.prototype.docString="",t.prototype.opsetImport=i.emptyArray,t.prototype.domain="",t.create=function(e){return new t(e)},t.encode=function(t,e){if(e||(e=U.create()),null!=t.name&&Object.hasOwnProperty.call(t,"name")&&e.uint32(10).string(t.name),null!=t.input&&t.input.length)for(var n=0;n<t.input.length;++n)e.uint32(34).string(t.input[n]);if(null!=t.output&&t.output.length)for(n=0;n<t.output.length;++n)e.uint32(42).string(t.output[n]);if(null!=t.attribute&&t.attribute.length)for(n=0;n<t.attribute.length;++n)e.uint32(50).string(t.attribute[n]);if(null!=t.node&&t.node.length)for(n=0;n<t.node.length;++n)a.onnx.NodeProto.encode(t.node[n],e.uint32(58).fork()).ldelim();if(null!=t.docString&&Object.hasOwnProperty.call(t,"docString")&&e.uint32(66).string(t.docString),null!=t.opsetImport&&t.opsetImport.length)for(n=0;n<t.opsetImport.length;++n)a.onnx.OperatorSetIdProto.encode(t.opsetImport[n],e.uint32(74).fork()).ldelim();if(null!=t.domain&&Object.hasOwnProperty.call(t,"domain")&&e.uint32(82).string(t.domain),null!=t.attributeProto&&t.attributeProto.length)for(n=0;n<t.attributeProto.length;++n)a.onnx.AttributeProto.encode(t.attributeProto[n],e.uint32(90).fork()).ldelim();return e},t.encodeDelimited=function(t,e){return this.encode(t,e).ldelim()},t.decode=function(t,e){t instanceof Q||(t=Q.create(t));for(var n=void 0===e?t.len:t.pos+e,B=new a.onnx.FunctionProto;t.pos<n;){var s=t.uint32();switch(s>>>3){case 1:B.name=t.string();break;case 4:B.input&&B.input.length||(B.input=[]),B.input.push(t.string());break;case 5:B.output&&B.output.length||(B.output=[]),B.output.push(t.string());break;case 6:B.attribute&&B.attribute.length||(B.attribute=[]),B.attribute.push(t.string());break;case 11:B.attributeProto&&B.attributeProto.length||(B.attributeProto=[]),B.attributeProto.push(a.onnx.AttributeProto.decode(t,t.uint32()));break;case 7:B.node&&B.node.length||(B.node=[]),B.node.push(a.onnx.NodeProto.decode(t,t.uint32()));break;case 8:B.docString=t.string();break;case 9:B.opsetImport&&B.opsetImport.length||(B.opsetImport=[]),B.opsetImport.push(a.onnx.OperatorSetIdProto.decode(t,t.uint32()));break;case 10:B.domain=t.string();break;default:t.skipType(7&s)}}return B},t.decodeDelimited=function(t){return t instanceof Q||(t=new Q(t)),this.decode(t,t.uint32())},t.verify=function(t){if("object"!=typeof t||null===t)return"object expected";if(null!=t.name&&t.hasOwnProperty("name")&&!i.isString(t.name))return"name: string expected";if(null!=t.input&&t.hasOwnProperty("input")){if(!Array.isArray(t.input))return"input: array expected";for(var e=0;e<t.input.length;++e)if(!i.isString(t.input[e]))return"input: string[] expected"}if(null!=t.output&&t.hasOwnProperty("output")){if(!Array.isArray(t.output))return"output: array expected";for(e=0;e<t.output.length;++e)if(!i.isString(t.output[e]))return"output: string[] expected"}if(null!=t.attribute&&t.hasOwnProperty("attribute")){if(!Array.isArray(t.attribute))return"attribute: array expected";for(e=0;e<t.attribute.length;++e)if(!i.isString(t.attribute[e]))return"attribute: string[] expected"}if(null!=t.attributeProto&&t.hasOwnProperty("attributeProto")){if(!Array.isArray(t.attributeProto))return"attributeProto: array expected";for(e=0;e<t.attributeProto.length;++e)if(n=a.onnx.AttributeProto.verify(t.attributeProto[e]))return"attributeProto."+n}if(null!=t.node&&t.hasOwnProperty("node")){if(!Array.isArray(t.node))return"node: array expected";for(e=0;e<t.node.length;++e)if(n=a.onnx.NodeProto.verify(t.node[e]))return"node."+n}if(null!=t.docString&&t.hasOwnProperty("docString")&&!i.isString(t.docString))return"docString: string expected";if(null!=t.opsetImport&&t.hasOwnProperty("opsetImport")){if(!Array.isArray(t.opsetImport))return"opsetImport: array expected";for(e=0;e<t.opsetImport.length;++e){var n;if(n=a.onnx.OperatorSetIdProto.verify(t.opsetImport[e]))return"opsetImport."+n}}return null!=t.domain&&t.hasOwnProperty("domain")&&!i.isString(t.domain)?"domain: string expected":null},t.fromObject=function(t){if(t instanceof a.onnx.FunctionProto)return t;var e=new a.onnx.FunctionProto;if(null!=t.name&&(e.name=String(t.name)),t.input){if(!Array.isArray(t.input))throw TypeError(".onnx.FunctionProto.input: array expected");e.input=[];for(var n=0;n<t.input.length;++n)e.input[n]=String(t.input[n])}if(t.output){if(!Array.isArray(t.output))throw TypeError(".onnx.FunctionProto.output: array expected");for(e.output=[],n=0;n<t.output.length;++n)e.output[n]=String(t.output[n])}if(t.attribute){if(!Array.isArray(t.attribute))throw TypeError(".onnx.FunctionProto.attribute: array expected");for(e.attribute=[],n=0;n<t.attribute.length;++n)e.attribute[n]=String(t.attribute[n])}if(t.attributeProto){if(!Array.isArray(t.attributeProto))throw TypeError(".onnx.FunctionProto.attributeProto: array expected");for(e.attributeProto=[],n=0;n<t.attributeProto.length;++n){if("object"!=typeof t.attributeProto[n])throw TypeError(".onnx.FunctionProto.attributeProto: object expected");e.attributeProto[n]=a.onnx.AttributeProto.fromObject(t.attributeProto[n])}}if(t.node){if(!Array.isArray(t.node))throw TypeError(".onnx.FunctionProto.node: array expected");for(e.node=[],n=0;n<t.node.length;++n){if("object"!=typeof t.node[n])throw TypeError(".onnx.FunctionProto.node: object expected");e.node[n]=a.onnx.NodeProto.fromObject(t.node[n])}}if(null!=t.docString&&(e.docString=String(t.docString)),t.opsetImport){if(!Array.isArray(t.opsetImport))throw TypeError(".onnx.FunctionProto.opsetImport: array expected");for(e.opsetImport=[],n=0;n<t.opsetImport.length;++n){if("object"!=typeof t.opsetImport[n])throw TypeError(".onnx.FunctionProto.opsetImport: object expected");e.opsetImport[n]=a.onnx.OperatorSetIdProto.fromObject(t.opsetImport[n])}}return null!=t.domain&&(e.domain=String(t.domain)),e},t.toObject=function(t,e){e||(e={});var n={};if((e.arrays||e.defaults)&&(n.input=[],n.output=[],n.attribute=[],n.node=[],n.opsetImport=[],n.attributeProto=[]),e.defaults&&(n.name="",n.docString="",n.domain=""),null!=t.name&&t.hasOwnProperty("name")&&(n.name=t.name),t.input&&t.input.length){n.input=[];for(var B=0;B<t.input.length;++B)n.input[B]=t.input[B]}if(t.output&&t.output.length)for(n.output=[],B=0;B<t.output.length;++B)n.output[B]=t.output[B];if(t.attribute&&t.attribute.length)for(n.attribute=[],B=0;B<t.attribute.length;++B)n.attribute[B]=t.attribute[B];if(t.node&&t.node.length)for(n.node=[],B=0;B<t.node.length;++B)n.node[B]=a.onnx.NodeProto.toObject(t.node[B],e);if(null!=t.docString&&t.hasOwnProperty("docString")&&(n.docString=t.docString),t.opsetImport&&t.opsetImport.length)for(n.opsetImport=[],B=0;B<t.opsetImport.length;++B)n.opsetImport[B]=a.onnx.OperatorSetIdProto.toObject(t.opsetImport[B],e);if(null!=t.domain&&t.hasOwnProperty("domain")&&(n.domain=t.domain),t.attributeProto&&t.attributeProto.length)for(n.attributeProto=[],B=0;B<t.attributeProto.length;++B)n.attributeProto[B]=a.onnx.AttributeProto.toObject(t.attributeProto[B],e);return n},t.prototype.toJSON=function(){return this.constructor.toObject(this,F.util.toJSONOptions)},t.getTypeUrl=function(t){return void 0===t&&(t="type.googleapis.com"),t+"/onnx.FunctionProto"},t}(),s),e.exports=a}}),import_onnx,ArrayUtil,MatMulUtil,BroadcastUtil,GemmUtil,ProtoUtil,LongUtil,ShapeUtil,SplitUtil,PoolConvUtil,MIN_CLIP,MAX_CLIP;function assert(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function decodeUtf8String(t){return(new TextDecoder).decode(t)}var init_util=__esm({"web/lib/onnxjs/util.ts"(){init_flatbuffers(),init_long(),import_onnx=__toESM(require_onnx()),init_tensor2(),ArrayUtil=class{static arraysEqual(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}},MatMulUtil=class{static preprocessInputShapes(t,e){return[1===t.length?[1,t[0]]:t,1===e.length?[e[0],1]:e]}static postprocessOutputShape(t,e,n){1===e&&t.splice(t.length-2,1),1===n&&t.pop()}static calcMatMulShape(t,e){return t[1]!==e[0]?void 0:[t[0],e[1]]}},BroadcastUtil=class t{static calcShape(t,e,n=!1){const B=t.length,s=e.length;if(0===B)return e;if(0===s)return t;const F=Math.max(t.length,e.length),Q=new Array(F);if(n){if(B<2||s<2)return;const n=MatMulUtil.calcMatMulShape([t[B-2],t[B-1]],[e[s-2],e[s-1]]);if(void 0===n)return;[Q[F-2],Q[F-1]]=n}for(let U=n?3:1;U<=F;U++){const n=B-U<0?1:t[B-U],i=s-U<0?1:e[s-U];if(n!==i&&n>1&&i>1)return;Q[F-U]=Math.max(n,i)}return Q}static index(e,n){const B=new Array(n.length);return t.fillIndex(e,n,B),B}static fillIndex(t,e,n){const B=t.length-e.length;for(let s=0;s<e.length;s++)n[s]=t[B+s]%e[s]}static calc(e,n,B,s,F){const Q=t.calcShape(e.dims,n.dims);if(Q){if(s&&!ShapeUtil.areEqual(Q,e.dims))return;const U=ShapeUtil.size(Q),i=s?e:new Tensor3(Q,F||e.type);if(0===Q.length)i.set([],B(e.get([]),n.get([])));else{const s=new Array(Q.length),F=new Array(e.dims.length),a=new Array(n.dims.length);let l,c=0,g=0,d=!1,I=!1;0===e.dims.length&&(c=e.get([]),d=!0),0===n.dims.length&&(g=n.get([]),I=!0);for(let o=0;o<U;o++){l=o;for(let t=Q.length-1;t>=0;t--)s[t]=l%Q[t],l=Math.floor(l/Q[t]);d||(t.fillIndex(s,e.dims,F),c=e.get(F)),I||(t.fillIndex(s,n.dims,a),g=n.get(a)),i.set(s,B(c,g))}}return i}}static isValidBroadcast(t,e){const n=t.length,B=e.length;if(n>B)return!1;for(let s=1;s<=n;s++)if(1!==t[n-s]&&t[n-s]!==e[B-s])return!1;return!0}static getBroadcastDims(t,e){const n=t.length,B=[];for(let s=0;s<n;s++){const F=n-1-s,Q=t[F]||1;(e[e.length-1-s]||1)>1&&1===Q&&B.unshift(F)}return B}},GemmUtil=class{static getShapeOfGemmResult(t,e,n,B,s){if(2!==t.length||2!==n.length)throw new Error("shape need to be of size 2");let F,Q,U;e?(F=t[1],Q=t[0]):(F=t[0],Q=t[1]);let i=-1;if(B?(U=n[0],i=1):(U=n[1],i=0),n[i]!==Q)throw new Error("dimension mismatch");if(F<=0||U<=0||Q<=0)throw new Error("invalid shape specified");if(s&&!BroadcastUtil.isValidBroadcast(s,[F,U]))throw new Error("gemm: invalid bias shape for broadcast");return[F,U,Q]}},ProtoUtil=class t{static tensorDataTypeFromProto(t){switch(t){case import_onnx.onnx.TensorProto.DataType.INT8:return"int8";case import_onnx.onnx.TensorProto.DataType.UINT8:return"uint8";case import_onnx.onnx.TensorProto.DataType.BOOL:return"bool";case import_onnx.onnx.TensorProto.DataType.INT16:return"int16";case import_onnx.onnx.TensorProto.DataType.UINT16:return"uint16";case import_onnx.onnx.TensorProto.DataType.INT32:return"int32";case import_onnx.onnx.TensorProto.DataType.UINT32:return"uint32";case import_onnx.onnx.TensorProto.DataType.FLOAT:return"float32";case import_onnx.onnx.TensorProto.DataType.DOUBLE:return"float64";case import_onnx.onnx.TensorProto.DataType.STRING:return"string";case import_onnx.onnx.TensorProto.DataType.INT64:return"int32";case import_onnx.onnx.TensorProto.DataType.UINT64:return"uint32";default:throw new Error(`unsupported data type: ${import_onnx.onnx.TensorProto.DataType[t]}`)}}static tensorDataTypeStringToEnum(t){switch(t){case"int8":return import_onnx.onnx.TensorProto.DataType.INT8;case"uint8":return import_onnx.onnx.TensorProto.DataType.UINT8;case"bool":return import_onnx.onnx.TensorProto.DataType.BOOL;case"int16":return import_onnx.onnx.TensorProto.DataType.INT16;case"uint16":return import_onnx.onnx.TensorProto.DataType.UINT16;case"int32":return import_onnx.onnx.TensorProto.DataType.INT32;case"uint32":return import_onnx.onnx.TensorProto.DataType.UINT32;case"float32":return import_onnx.onnx.TensorProto.DataType.FLOAT;case"float64":return import_onnx.onnx.TensorProto.DataType.DOUBLE;case"string":return import_onnx.onnx.TensorProto.DataType.STRING;case"int64":return import_onnx.onnx.TensorProto.DataType.INT64;case"uint64":return import_onnx.onnx.TensorProto.DataType.UINT64;default:throw new Error(`unsupported data type: ${t}`)}}static tensorDimsFromProto(t){return t.map((t=>long_default.isLong(t)?t.toNumber():t))}static tensorValueTypeFromProto(e){return{tensorType:t.tensorDataTypeFromProto(e.elemType),shape:{dims:t.tensorDimsFromProto(e.shape.dim.map((t=>t.dimValue)))}}}static tensorDimsFromORTFormat(t){const e=[];for(let n=0;n<t.dimsLength();n++)e.push(LongUtil.longToNumber(t.dims(n)));return e}static tensorAttributesFromORTFormat(t){const e=[];for(let n=0;n<t.attributesLength();n++)e.push(t.attributes(n));return e}},LongUtil=class{static longToNumber(t,e){return long_default.isLong(t)?t.toNumber():t instanceof flatbuffers.Long?long_default.fromValue({low:t.low,high:t.high,unsigned:e??!1}).toNumber():t}static isLong(t){return long_default.isLong(t)||t instanceof flatbuffers.Long}},ShapeUtil=class t{static size(e){return t.getSizeFromDimensionRange(e,0,e.length)}static sizeFromDimension(e,n){if(n<0||n>e.length)throw new Error(`invalid dimension of ${n} for sizeFromDimension as Tensor has ${e.length} dimensions.`);return t.getSizeFromDimensionRange(e,n,e.length)}static sizeToDimension(e,n){if(n<0||n>e.length)throw new Error(`invalid dimension of ${n} for sizeToDimension as Tensor has ${e.length} dimensions.`);return t.getSizeFromDimensionRange(e,0,n)}static getSizeFromDimensionRange(t,e,n){let B=1;for(let s=e;s<n;s++){if(t[s]<=0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.");B*=t[s]}return B}static computeStrides(t){const e=t.length;if(0===e)return[];if(1===e)return[1];const n=new Array(e);n[e-1]=1,n[e-2]=t[e-1];for(let B=e-3;B>=0;--B)n[B]=n[B+1]*t[B+1];return n}static transpose(t){return t.slice().reverse()}static indicesToOffset(t,e,n){void 0===n&&(n=t.length);let B=0;for(let s=0;s<n;++s)B+=e[s]*t[s];return B}static offsetToIndices(t,e){const n=e.length;if(0===n)return[];if(1===n)return[t*e[0]];const B=new Array(e.length);for(let n=0;n<B.length-1;++n)B[n]=Math.floor(t/e[n]),t-=B[n]*e[n];return B[B.length-1]=t,B}static normalizeAxis(t,e){if(t<-e&&t>=e)throw new Error("unsupported axis for this operation.");return t<0?t+e:t}static normalizeAxes(t,e){return t.map((t=>this.normalizeAxis(t,e)))}static incrementIndex(t,e,n){if(0===e.length||0===t.length)throw new Error("Index incrementing unsupported for scalar Tensor");if(void 0===n)n=e.length;else if(n<=0||n>e.length)throw new Error("Incorrect axis to increment on");for(let B=n-1;B>=0&&(t[B]++,!(t[B]<e[B]));--B)t[B]=0}static calculateReshapedDims(e,n){if(0===n.length){if(0===e.length||1===t.size(e))return[];throw new Error("cannot reshape to a scalar Tensor")}const B=n.length,s=new Array(B);let F=-1,Q=1;for(let t=0;t<B;t++){if(n[t]<-1)throw new Error("a dimension in shape hints cannot be less than -1");if(-1===n[t]){if(-1!==F)throw new Error("at most one dimension in shape hints can be -1");F=t}else{if(0===n[t]){if(t>=e.length)throw new Error("the dimension with value zero exceeds the dimension size of the input tensor");s[t]=e[t]}else s[t]=n[t];Q*=s[t]}}const U=t.size(e);if(-1!==F){if(U%Q!=0)throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${e}] Output shape: [${n}]`);s[F]=U/Q}else if(Q!==U)throw new Error("reshapedDims and originalDims don't have matching sizes");return s}static sortBasedOnPerm(t,e){return e?e.map((e=>t[e])):t.slice().reverse()}static padShape(t,e){const n=t.length;return t.map(((t,B)=>t+e[B]+e[B+n]))}static areEqual(t,e){return t.length===e.length&&t.every(((t,n)=>t===e[n]))}static validateDimsAndCalcSize(t){if(t.length>6)throw new TypeError("Only rank 0 to 6 is supported for tensor shape.");let e=1;for(const n of t){if(!Number.isInteger(n))throw new TypeError(`Invalid shape: ${n} is not an integer`);if(n<0||n>2147483647)throw new TypeError(`Invalid shape: length ${n} is not allowed`);e*=n}return e}static flattenShape(t,e){e<0&&(e+=t.length);const n=t.reduce(((t,e)=>t*e),1),B=t.slice(e).reduce(((t,e)=>t*e),1);return[n/B,B]}static squeezeShape(e,n){const B=new Array;n=t.normalizeAxes(n,e.length);for(let t=0;t<e.length;t++){const s=n.indexOf(t)>=0;if(s&&1!==e[t])throw new Error("squeeze an axis of size different than 1");(0===n.length&&e[t]>1||n.length>0&&!s)&&B.push(e[t])}return B}static unsqueezeShape(e,n){const B=new Array(e.length+n.length);B.fill(0);for(let e=0;e<n.length;e++){const s=t.normalizeAxis(n[e],B.length);if(s>=B.length)throw new Error("'axes' has an out of range axis");if(0!==B[s])throw new Error("'axes' has a duplicate axis");B[s]=1}let s=0;for(let t=0;t<B.length;t++)0===B[t]&&(B[t]=e[s++]);if(s!==e.length)throw new Error("the unsqueezed dimension could not be established");return B}},SplitUtil=class t{static splitShape(e,n,B,s){if(0===B.length){if(!s)throw new Error("need to know number of outputs when the 'split' attribute is not specified");t.determineSplit(e[n],s,B)}const F=[],Q=[0];for(let t=0;t<B.length;++t){0!==t&&Q.push(Q[t-1]+B[t-1]);const s=e.slice();s[n]=B[t],F.push(s)}return[F,Q]}static determineSplit(t,e,n){if(t%e!=0)throw new Error("cannot split tensor to equal sized parts");for(let B=0;B<e;++B)n.push(t/e)}},PoolConvUtil=class t{static adjustPoolAttributes(t,e,n,B,s,F){if(!t&&n.length!==e.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let t=0;t<e.length-2;t++)t>=n.length?n.push(e[t+2]):n[t]=e[t+2];for(let t=0;t<n.length;t++)if(t<B.length){if(B[t]<0)throw new Error("strides should be greater than or equal to 1")}else B.push(1);for(let t=0;t<n.length;t++)if(t<s.length){if(s[t]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let t=0;t<2*n.length;t++)if(t<F.length){if(F[t]<0)throw new Error("pad should be greater than or equal to 1")}else F.push(0);for(let t=0;t<n.length;t++){if(n[t]<=0)throw new Error("kernel shapes need to be greater than 0");if(F[t]>=n[t]||F[t+n.length]>=n[t])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(e,n,B,s,F,Q){if(Q){if(F.length!==2*(e.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(n.length!==e.length-2)throw new Error("length of strides should be the length of data dimensions");if(s.length!==e.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let U=0;U<e.length-2;U++)t.adjustPadAndReturnShape(e[U+2],n[U],B[U],s[U],F,U,U+e.length-2,Q)}}static computePoolOutputShape(e,n,B,s,F,Q,U){if(n.length<=0)throw new Error("input shape must be of size greater than 0");const i=[n[0],n[1]];return t.computeShapeHelper(e,n,i,B,s,F,Q,U),i}static computeConvOutputShape(e,n,B,s,F,Q,U){if(e.length<=0||n.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");const i=[e[0],n[0]];return t.computeShapeHelper(!1,e,i,B,s,F,Q,U),i}static computeShapeHelper(e,n,B,s,F,Q,U,i){if(e)for(let t=0;t<n.length-2;t++)B.push(1);else for(let e=0;e<n.length-2;e++)B.push(t.adjustPadAndReturnShape(n[e+2],s[e],F[e],Q[e],U,e,e+n.length-2,i))}static adjustPadAndReturnShape(t,e,n,B,s,F,Q,U){const i=n*(B-1)+1;if(!U||"NOTSET"===U)return Math.floor((t+s[F]+s[Q]-i)/e+1);switch(U){case"VALID":return s[F]=0,s[Q]=0,Math.floor((t-i)/e+1);case"SAME_LOWER":case"SAME_UPPER":if(1!==n)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{const n=((t+e-1)/e-1)*e+B-t;return s[F]="SAME_LOWER"===U?Math.floor((n+1)/2):Math.floor(n/2),s[Q]=n-s[F],Math.floor((t+n-B)/e+1)}default:throw new Error("Unsupported AutoPad type")}}},MIN_CLIP=-34028234663852886e22,MAX_CLIP=34028234663852886e22}}),import_guid_typescript,import_onnx2,ortFbs,Tensor3;function sizeof(t){switch(t){case"bool":case"int8":case"uint8":return 1;case"int16":case"uint16":return 2;case"int32":case"uint32":case"float32":return 4;case"float64":return 8;default:throw new Error(`cannot calculate sizeof() on type ${t}`)}}function sizeofProto(t){switch(t){case import_onnx2.onnx.TensorProto.DataType.UINT8:case import_onnx2.onnx.TensorProto.DataType.INT8:case import_onnx2.onnx.TensorProto.DataType.BOOL:return 1;case import_onnx2.onnx.TensorProto.DataType.UINT16:case import_onnx2.onnx.TensorProto.DataType.INT16:return 2;case import_onnx2.onnx.TensorProto.DataType.FLOAT:case import_onnx2.onnx.TensorProto.DataType.INT32:case import_onnx2.onnx.TensorProto.DataType.UINT32:return 4;case import_onnx2.onnx.TensorProto.DataType.INT64:case import_onnx2.onnx.TensorProto.DataType.DOUBLE:case import_onnx2.onnx.TensorProto.DataType.UINT64:return 8;default:throw new Error(`cannot calculate sizeof() on type ${import_onnx2.onnx.TensorProto.DataType[t]}`)}}function createView(t,e){return new(dataviewConstructor(e))(t)}function dataviewConstructor(t){switch(t){case"bool":case"uint8":return Uint8Array;case"int8":return Int8Array;case"int16":return Int16Array;case"uint16":return Uint16Array;case"int32":return Int32Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"float32":return Float32Array;case"float64":return Float64Array;default:throw new Error("unspecified error")}}function longToNumber(t,e){if(e===import_onnx2.onnx.TensorProto.DataType.INT64||e===ortFbs.TensorDataType.INT64){if(t.greaterThanOrEqual(2147483648)||t.lessThan(-2147483648))throw new TypeError("int64 is not supported")}else{if(e!==import_onnx2.onnx.TensorProto.DataType.UINT32&&e!==ortFbs.TensorDataType.UINT32&&e!==import_onnx2.onnx.TensorProto.DataType.UINT64&&e!==ortFbs.TensorDataType.UINT64)throw new TypeError(`not a LONG type: ${import_onnx2.onnx.TensorProto.DataType[e]}`);if(t.greaterThanOrEqual(4294967296)||t.lessThan(0))throw new TypeError("uint64 is not supported")}return t.toNumber()}function readProto(t,e,n){switch(e){case import_onnx2.onnx.TensorProto.DataType.BOOL:case import_onnx2.onnx.TensorProto.DataType.UINT8:return t.getUint8(n);case import_onnx2.onnx.TensorProto.DataType.INT8:return t.getInt8(n);case import_onnx2.onnx.TensorProto.DataType.UINT16:return t.getUint16(n,!0);case import_onnx2.onnx.TensorProto.DataType.INT16:return t.getInt16(n,!0);case import_onnx2.onnx.TensorProto.DataType.FLOAT:return t.getFloat32(n,!0);case import_onnx2.onnx.TensorProto.DataType.INT32:return t.getInt32(n,!0);case import_onnx2.onnx.TensorProto.DataType.UINT32:return t.getUint32(n,!0);case import_onnx2.onnx.TensorProto.DataType.INT64:return longToNumber(long_default.fromBits(t.getUint32(n,!0),t.getUint32(n+4,!0),!1),e);case import_onnx2.onnx.TensorProto.DataType.DOUBLE:return t.getFloat64(n,!0);case import_onnx2.onnx.TensorProto.DataType.UINT64:return longToNumber(long_default.fromBits(t.getUint32(n,!0),t.getUint32(n+4,!0),!0),e);default:throw new Error(`cannot read from DataView for type ${import_onnx2.onnx.TensorProto.DataType[e]}`)}}var init_tensor2=__esm({"web/lib/onnxjs/tensor.ts"(){import_guid_typescript=__toESM(require_guid()),init_long(),init_ort_generated(),import_onnx2=__toESM(require_onnx()),init_util(),ortFbs=onnxruntime.experimental.fbs,Tensor3=class t{constructor(t,e,n,B,s,F=import_guid_typescript.Guid.create()){this.dims=t,this.type=e,this.dataProvider=n,this.asyncDataProvider=B,this.cache=s,this.dataId=F,this.size=ShapeUtil.validateDimsAndCalcSize(t);const Q=this.size,U=void 0===n&&void 0===B&&void 0===s;if(void 0!==s&&s.length!==Q)throw new RangeError("Input dims doesn't match data length.");if("string"===e){if(!(void 0===s||Array.isArray(s)&&s.every((t=>"string"==typeof t))))throw new TypeError("cache should be a string array");U&&(this.cache=new Array(Q))}else{if(void 0!==s){const t=dataviewConstructor(e);if(!(s instanceof t))throw new TypeError(`cache should be type ${t.name}`)}if(U){const t=new ArrayBuffer(Q*sizeof(e));this.cache=createView(t,e)}}}get data(){if(void 0===this.cache){const t=this.dataProvider(this.dataId);if(t.length!==this.size)throw new Error("Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.");this.cache=t}return this.cache}get stringData(){if("string"!==this.type)throw new TypeError("data type is not string");return this.data}get integerData(){switch(this.type){case"uint8":case"int8":case"uint16":case"int16":case"int32":case"uint32":case"bool":return this.data;default:throw new TypeError("data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)")}}get floatData(){switch(this.type){case"float32":case"float64":return this.data;default:throw new TypeError("data type is not float (float32, float64)")}}get numberData(){if("string"!==this.type)return this.data;throw new TypeError("type cannot be non-number (string)")}get(t){return this.data[ShapeUtil.indicesToOffset(t,this.strides)]}set(t,e){this.data[ShapeUtil.indicesToOffset(t,this.strides)]=e}async getData(){return void 0===this.cache&&(this.cache=await this.asyncDataProvider(this.dataId)),this.cache}get strides(){return this._strides||(this._strides=ShapeUtil.computeStrides(this.dims)),this._strides}static fromProto(e){if(!e)throw new Error("cannot construct Value from an empty tensor");const n=ProtoUtil.tensorDataTypeFromProto(e.dataType),B=ProtoUtil.tensorDimsFromProto(e.dims),s=new t(B,n);if("string"===n)e.stringData.forEach(((t,e)=>{s.data[e]=decodeUtf8String(t)}));else if(e.rawData&&"number"==typeof e.rawData.byteLength&&e.rawData.byteLength>0){const t=s.data,n=new DataView(e.rawData.buffer,e.rawData.byteOffset,e.rawData.byteLength),B=sizeofProto(e.dataType),F=e.rawData.byteLength/B;if(e.rawData.byteLength%B!=0)throw new Error("invalid buffer length");if(t.length!==F)throw new Error("buffer length mismatch");for(let s=0;s<F;s++){const F=readProto(n,e.dataType,s*B);t[s]=F}}else{let t;switch(e.dataType){case import_onnx2.onnx.TensorProto.DataType.FLOAT:t=e.floatData;break;case import_onnx2.onnx.TensorProto.DataType.INT32:case import_onnx2.onnx.TensorProto.DataType.INT16:case import_onnx2.onnx.TensorProto.DataType.UINT16:case import_onnx2.onnx.TensorProto.DataType.INT8:case import_onnx2.onnx.TensorProto.DataType.UINT8:case import_onnx2.onnx.TensorProto.DataType.BOOL:t=e.int32Data;break;case import_onnx2.onnx.TensorProto.DataType.INT64:t=e.int64Data;break;case import_onnx2.onnx.TensorProto.DataType.DOUBLE:t=e.doubleData;break;case import_onnx2.onnx.TensorProto.DataType.UINT32:case import_onnx2.onnx.TensorProto.DataType.UINT64:t=e.uint64Data;break;default:throw new Error("unspecific error")}if(null==t)throw new Error("failed to populate data from a tensorproto value");const n=s.data;if(n.length!==t.length)throw new Error("array length mismatch");for(let B=0;B<t.length;B++){const s=t[B];long_default.isLong(s)?n[B]=longToNumber(s,e.dataType):n[B]=s}}return s}static fromData(e,n,B){return new t(n,B,void 0,void 0,e)}static fromOrtTensor(e){if(!e)throw new Error("cannot construct Value from an empty tensor");const n=ProtoUtil.tensorDimsFromORTFormat(e),B=ProtoUtil.tensorDataTypeFromProto(e.dataType()),s=new t(n,B);if("string"===B)for(let t=0;t<e.stringDataLength();t++)s.data[t]=e.stringData(t);else if(e.rawDataArray()&&"number"==typeof e.rawDataLength()&&e.rawDataLength()>0){const t=s.data,n=new DataView(e.rawDataArray().buffer,e.rawDataArray().byteOffset,e.rawDataLength()),B=sizeofProto(e.dataType()),F=e.rawDataLength()/B;if(e.rawDataLength()%B!=0)throw new Error("invalid buffer length");if(t.length!==F)throw new Error("buffer length mismatch");for(let s=0;s<F;s++){const F=readProto(n,e.dataType(),s*B);t[s]=F}}return s}}}}),GLSL_ES_2_0,GLSL_ES_3_0;function getGlsl(t){return 1===t?GLSL_ES_2_0:GLSL_ES_3_0}function getVertexShaderSource(t){const e=getGlsl(t);return`${e.version}\n      precision highp float;\n      ${e.attribute} vec3 position;\n      ${e.attribute} vec2 textureCoord;\n\n      ${e.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`}function getFragShaderPreamble(t){const e=getGlsl(t);return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFrag} vec2 TexCoords;\n    ${e.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `}function getDefaultFragShaderMain(t,e){return`\n  void main() {\n    int indices[${e}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${getGlsl(t).output} = result;\n  }\n  `}var init_glsl_source=__esm({"web/lib/onnxjs/backends/webgl/glsl-source.ts"(){GLSL_ES_2_0={version:"",attribute:"attribute",varyingVertex:"varying",varyingFrag:"varying",texture2D:"texture2D",output:"gl_FragColor",outputDeclaration:""},GLSL_ES_3_0={version:"#version 300 es",attribute:"in",varyingVertex:"out",varyingFrag:"in",texture2D:"texture",output:"outputColor",outputDeclaration:"out vec4 outputColor;"}}}),init_types=__esm({"web/lib/onnxjs/backends/webgl/types.ts"(){}});async function repeatedTry(t,e=(t=>0),n){return new Promise(((B,s)=>{let F=0;const Q=()=>{if(t())return void B();F++;const U=e(F);null!=n&&F>=n?s():setTimeout(Q,U)};Q()}))}function generateShaderFuncNameFromInputSamplerName(t){return assert(void 0!==t&&0!==t.length,(()=>"empty string found for sampler name")),"get"+t.charAt(0).toUpperCase()+t.slice(1)}function generateShaderFuncNameFromInputSamplerNameAtOutCoords(t){return assert(void 0!==t&&0!==t.length,(()=>"empty string found for sampler name")),"get"+t.charAt(0).toUpperCase()+t.slice(1)+"AtOutCoords"}function squeezeInputShape(t,e){let n=JSON.parse(JSON.stringify(t));return n=e,n}function getSqueezedParams(t,e){return e.map((e=>t[e])).join(", ")}function getCoordsDataType(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function getGlChannels(t=6){return["x","y","z","w","u","v"].slice(0,t)}var init_utils=__esm({"web/lib/onnxjs/backends/webgl/utils.ts"(){init_util()}});function getVecChannels(t,e){return getGlChannels(e).map((e=>`${t}.${e}`))}function getChannels(t,e){return 1===e?[t]:getVecChannels(t,e)}function unpackFromChannel(){return"\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  "}var init_packing_utils=__esm({"web/lib/onnxjs/backends/webgl/ops/packing-utils.ts"(){init_utils()}}),packProgramMetadata,createPackProgramInfo,createPackProgramInfoLoader;function getOutOfBoundsCondition(t,e,n){if(0===t)return"false";if(1===t)return`rc > ${e[0]}`;let B="";for(let s=t-2;s<t;s++)B+=`${n[s]} >= ${e[s-t+2]}`,s<t-1&&(B+="||");return B}function getOutput(t,e){const n=t.length;if(0===n)return"getA(), 0, 0, 0";if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;let B="";if(n>2)for(let t=0;t<n-2;++t)B+=`${e[t]},`;return`getA(${B}r, c),\n          rEdge ? 0. : getA(${B}rp1, c),\n          cEdge ? 0. : getA(${B}r, cp1),\n          rEdge || cEdge ? 0. : getA(${B}rp1, cp1)`}function getSetup(t,e,n,B){if(0===t||1===t)return"";return`\n    int r = ${e[t-2]};\n    int c = ${e[t-1]};\n    int rp1 = ${e[t-2]} + 1;\n    int cp1 = ${e[t-1]} + 1;\n    bool rEdge = rp1 >= ${B};\n    bool cEdge = cp1 >= ${n};\n    `}var init_pack=__esm({"web/lib/onnxjs/backends/webgl/ops/pack.ts"(){init_glsl_source(),init_types(),init_utils(),init_packing_utils(),packProgramMetadata={name:"pack",inputNames:["A"],inputTypes:[1]},createPackProgramInfo=(t,e)=>{const n=getGlsl(t.session.backend.glContext.version),B=e.dims,s=B.length,F=e.dims.length,Q=getCoordsDataType(F),U=getChannels("rc",F),i=getSetup(F,U,B[B.length-2],B[B.length-1]);let a;a=0===s?[1,1]:1===s?[B[0],1]:[B[F-1],B[F-2]];const l=getOutOfBoundsCondition(F,a,U),c=getOutput(B,U),g=`\n        void main() {\n          ${Q} rc = getOutputCoords();\n\n          if(${l}) {\n            ${n.output} = vec4(0);\n          } else {\n            ${i}\n\n            ${n.output} = vec4(${c});\n          }\n        }\n      `;return{...packProgramMetadata,hasMain:!0,output:{dims:e.dims,type:e.type,textureType:2},shaderSource:g}},createPackProgramInfoLoader=(t,e)=>({...packProgramMetadata,get:()=>createPackProgramInfo(t,e)})}}),createPackedReshape3DProgramMetadata,createPackedReshape3DProgramInfo,createPackedReshape3DProgramInfoLoader;function processDims3D(t){if(0===t.length)return[1,1,1];let e=1;for(let n=0;n<t.length-2;++n)e*=t[n];return[e,t.length>1?t[t.length-2]:1,t[t.length-1]]}function isReshapeCheap(t,e){let n=!1;return n=0===t.length||0===e.length||(t.length<2||e.length<2?t[t.length-1]===e[e.length-1]:t[t.length-1]===e[e.length-1]&&t[t.length-2]===e[e.length-2]),n}function getReshapedInputCoords(t){const e=ShapeUtil.computeStrides(t),n=["b","r","c"],B="index";return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${e.map(((t,s)=>`${`int ${n[s]} = ${B} / ${t}`}; ${s===e.length-1?`int ${n[s+1]} = ${B} - ${n[s]} * ${t}`:`index -= ${n[s]} * ${t}`};`)).join("")}\n      return ivec3(b, r, c);\n    }\n  `}function getFlattenedIndexFrom3D(t){const e=ShapeUtil.computeStrides(t);return`\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${e[0]} + coords.z * ${e[1]} + coords.y;\n  }\n`}var init_reshape_packed=__esm({"web/lib/onnxjs/backends/webgl/ops/reshape-packed.ts"(){init_util(),init_glsl_source(),init_types(),init_packing_utils(),createPackedReshape3DProgramMetadata=t=>({name:"Reshape (packed)",inputTypes:[2],inputNames:["A"],cacheHint:`${t}`}),createPackedReshape3DProgramInfo=(t,e,n,B)=>{const s=e.dims,F=B;let Q="";for(let t=0;t<4;t++){let e="";switch(t){case 0:e="outputCoords = rc;";break;case 1:e="outputCoords = ivec3(rc.x, rc.y+1, rc.z);";break;case 2:e="outputCoords = ivec3(rc.x, rc.y, rc.z+1);";break;case 3:e="outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);";break;default:throw new Error}Q+=`\n        ${e}\n        ${t>0?"if(outputCoords.y < rows && outputCoords.z < cols){":""}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${t>0?"}":""}\n      `}const U=getGlsl(t.session.backend.glContext.version),i=`\n      ${getReshapedInputCoords(s)}\n      ${getFlattenedIndexFrom3D(F)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${F[2]};\n        int cols = ${F[1]};\n\n        ${Q}\n        ${U.output} = result;\n      }\n    `;return{...n,output:{dims:F,type:e.type,textureType:2},shaderSource:i,hasMain:!0}},createPackedReshape3DProgramInfoLoader=(t,e,n)=>{const B=createPackedReshape3DProgramMetadata(n);return{...B,get:()=>createPackedReshape3DProgramInfo(t,e,B,n)}}}}),encodeAsUint8,init_uint8_encode=__esm({"web/lib/onnxjs/backends/webgl/ops/uint8-encode.ts"(){init_glsl_source(),init_types(),encodeAsUint8=(t,e)=>{const n=e.shape,B=getGlsl(t.session.backend.glContext.version),s=`\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${B.texture2D}(X,TexCoords).r;\n      ${B.output} = encodeAsUint8(value);\n    }`,F={name:"Uint8Encode",inputTypes:[0],inputNames:["X"],output:{dims:n,type:e.tensor.type,textureType:3},shaderSource:s,hasMain:!0};return t.executeProgram(F,[e.tensor])}}}),unpackProgramMetadata,createUnpackProgramInfo,createUnpackProgramInfoLoader;function getSourceCoords(t,e){if(1===t)return"rc";let n="";for(let B=0;B<t;B++)n+=e[B],B<t-1&&(n+=",");return n}var init_unpack=__esm({"web/lib/onnxjs/backends/webgl/ops/unpack.ts"(){init_glsl_source(),init_types(),init_utils(),init_packing_utils(),unpackProgramMetadata={name:"unpack",inputNames:["A"],inputTypes:[2]},createUnpackProgramInfo=(t,e)=>{const n=e.dims.length,B=getChannels("rc",n),s=B.slice(-2),F=getCoordsDataType(n),Q=unpackFromChannel(),U=0===e.dims.length?"":getSourceCoords(n,B),i=n<=1?"rc":`vec2(${s.join(",")})`,a=`\n    ${Q}\n    void main() {\n      ${F} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${U});\n\n       ${getGlsl(t.session.backend.glContext.version).output} = vec4(getChannel(packedInput, ${i}), 0, 0, 0);\n     }\n   `;return{...unpackProgramMetadata,hasMain:!0,output:{dims:e.dims,type:e.type,textureType:0},shaderSource:a}},createUnpackProgramInfoLoader=(t,e)=>({...unpackProgramMetadata,get:()=>createUnpackProgramInfo(t,e)})}}),RedFloat32DataEncoder,RGBAFloatDataEncoder,Uint8DataEncoder,init_texture_data_encoder=__esm({"web/lib/onnxjs/backends/webgl/texture-data-encoder.ts"(){init_instrument(),RedFloat32DataEncoder=class{constructor(t,e=1){if(1===e)this.internalFormat=t.R32F,this.format=t.RED,this.textureType=t.FLOAT,this.channelSize=e;else{if(4!==e)throw new Error(`Invalid number of channels: ${e}`);this.internalFormat=t.RGBA32F,this.format=t.RGBA,this.textureType=t.FLOAT,this.channelSize=e}}encode(t,e){let n,B;return t.constructor!==Float32Array&&(Logger.warning("Encoder","data was not of type Float32; creating new Float32Array"),B=new Float32Array(t)),e*this.channelSize>t.length?(Logger.warning("Encoder","Source data too small. Allocating larger array"),B=t,n=this.allocate(e*this.channelSize),B.forEach(((t,e)=>n[e]=t))):(B=t,n=B),n}allocate(t){return new Float32Array(4*t)}decode(t,e){if(1===this.channelSize){return t.filter(((t,e)=>e%4==0)).subarray(0,e)}return t.subarray(0,e)}},RGBAFloatDataEncoder=class{constructor(t,e=1,n){if(1!==e&&4!==e)throw new Error(`Invalid number of channels: ${e}`);this.internalFormat=t.RGBA,this.format=t.RGBA,this.channelSize=e,this.textureType=n||t.FLOAT}encode(t,e){let n=t;return 1===this.channelSize&&(Logger.verbose("Encoder","Exploding into a larger array"),n=this.allocate(e),t.forEach(((t,e)=>n[4*e]=t))),n}allocate(t){return new Float32Array(4*t)}decode(t,e){if(1===this.channelSize){return t.filter(((t,e)=>e%4==0)).subarray(0,e)}return t.subarray(0,e)}},Uint8DataEncoder=class{constructor(t,e=1){if(this.channelSize=4,1===e)this.internalFormat=t.ALPHA,this.format=t.ALPHA,this.textureType=t.UNSIGNED_BYTE,this.channelSize=e;else{if(4!==e)throw new Error(`Invalid number of channels: ${e}`);this.internalFormat=t.RGBA,this.format=t.RGBA,this.textureType=t.UNSIGNED_BYTE,this.channelSize=e}}encode(t,e){return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}allocate(t){return new Uint8Array(t*this.channelSize)}decode(t,e){if(t instanceof Uint8Array)return t.subarray(0,e);throw new Error(`Invalid array type: ${t.constructor}`)}}}}),createTextureLayoutFromTextureType,calculateTextureWidthAndHeight,createTextureLayoutFromShape,init_texture_layout=__esm({"web/lib/onnxjs/backends/webgl/texture-layout.ts"(){init_util(),init_types(),createTextureLayoutFromTextureType=(t,e,n)=>{const B=0===n||1===n?1:4,s=2===n,F=1===n||2===n,Q=4===n?e.length-1:void 0,U=4===n?e.map(((t,n)=>n===e.length-1?4*t:t)):void 0;return createTextureLayoutFromShape(t,e,B,U,{isPacked:s,reverseWH:F,breakAxis:Q})},calculateTextureWidthAndHeight=(t,e,n)=>{const B=createTextureLayoutFromTextureType(t,e,n);return[B.width,B.height]},createTextureLayoutFromShape=(t,e,n=1,B,s)=>{const F=!(!s||!s.isPacked),[Q,U]=t.computeTextureWH(F&&B||e,s),i=e.length;let a=e.slice(0);if(0===i&&(a=[1]),1===n)B=e;else if(F){if(4!==n)throw new Error("a packed texture must be 4-channel");B=e,i>0&&(a[i-1]=Math.ceil(a[i-1]/2)),i>1&&(a[i-2]=Math.ceil(a[i-2]/2))}else if(!B)throw new Error("Unpacked shape is needed when using channels > 1");return{width:Q,height:U,channels:n,isPacked:F,shape:a,strides:ShapeUtil.computeStrides(a),unpackedShape:B,reversedWH:s&&s.reverseWH}}}}),getProgramInfoUniqueKey,WebGLInferenceHandler,init_inference_handler=__esm({"web/lib/onnxjs/backends/webgl/inference-handler.ts"(){init_instrument(),init_tensor2(),init_util(),init_pack(),init_reshape_packed(),init_uint8_encode(),init_unpack(),init_texture_data_encoder(),init_texture_layout(),init_types(),getProgramInfoUniqueKey=(t,e)=>{const n=e.map((t=>`${t.unpackedShape.join(",")};${t.width}x${t.height}`)).join("_");let B=t.name;return t.cacheHint&&(B+="["+t.cacheHint+"]"),B+=":"+n,B},WebGLInferenceHandler=class{constructor(t){this.session=t,this.packedTextureDataCache=new Map,this.unpackedTextureDataCache=new Map}calculateTextureWidthAndHeight(t,e){return calculateTextureWidthAndHeight(this.session.layoutStrategy,t,e)}executeProgram(t,e){if(e.length<t.inputNames.length)throw new Error(`Input size mustn't be less than ${t.inputNames.length}.`);if(t.inputNames.length!==t.inputTypes.length)throw new Error("input names size does not match input types");const n=[];for(let B=0;B<t.inputNames.length;++B)n[B]=this.getOrCreateTextureData(e[B],t.inputTypes[B]);const B=getProgramInfoUniqueKey(t,n);let s=this.session.programManager.getArtifact(B);const F=s?s.programInfo:"function"==typeof t.get?t.get():t,Q=createTextureLayoutFromTextureType(this.session.layoutStrategy,F.output.dims,F.output.textureType),U=this.createTextureData(Q,F.output.type);return s||(s=this.session.programManager.build(F,n,U),this.session.programManager.setArtifact(B,s)),this.runProgram(s,n,U),U}run(t,e){return this.executeProgram(t,e).tensor}runProgram(t,e,n){for(let n=0;n<e.length;++n)if(!!e[n].isPacked!=(2===t.programInfo.inputTypes[n]))throw new Error(`input[${n}] property packed inconsistent`);if(!!n.isPacked!=(2===t.programInfo.output.textureType))throw new Error("output property packed inconsistent");this.session.programManager.run(t,e,n)}getOrCreateTextureData(t,e){let n=this.getTextureData(t.dataId,2===e);if(!n&&(n=this.getTextureData(t.dataId,2!==e),n))return 2===e?this.pack(n):this.unpack(n);if(!n){const B=createTextureLayoutFromTextureType(this.session.layoutStrategy,t.dims,e);if(4===e){const n=1,B=4,s=t.dims;if(4===s.length){const F=[s[0],Math.ceil(s[1]*s[2]*s[3]/B)],Q=createTextureLayoutFromTextureType(this.session.layoutStrategy,F,e);let U=t.numberData;if(s[1]*s[2]*s[3]%B!=0){const e=s[0],F=s[1]*s[2]*s[3],Q=Math.ceil(F*n/B)*B;U=new Float32Array(e*Q);for(let B=0;B<e;++B){const e=B*F,s=B*Q+B%n*F;U.set(t.numberData.subarray(e,e+F),s)}}return this.createTextureData(Q,t.type,U,t,1)}}if(2===e){const e=createTextureLayoutFromShape(this.session.layoutStrategy,t.dims,1,[],{reverseWH:!0}),B=this.createTextureData(e,t.type,t.numberData,t,1);n=this.pack(B)}else n=this.createTextureData(B,t.type,t.numberData,t,1)}return n}createTextureDataFromLayoutBindTensor(t,e,n,B){return this.createTextureData(t,e,n,B,1)}createTextureData(t,e,n,B,s){Logger.verbose("InferenceHandler",`Creating TextureData: layout:[${JSON.stringify(t)}]`);const F=this.session.textureManager.createTextureFromLayout(e,t,n,s);return this.createTextureDataFromTexture(t,e,F,B)}reshapeUnpacked(t,e){const n=this.getOrCreateTextureData(t,0),B={channels:n.channels,height:n.height,width:n.width,shape:0!==e.length?e:[1],strides:ShapeUtil.computeStrides(e),unpackedShape:e};return this.createTextureDataFromTexture(B,t.type,n.texture).tensor}reshapePacked(t,e){const n=this.getOrCreateTextureData(t,2);if(isReshapeCheap(t.dims,e)){const B={channels:n.channels,height:n.height,width:n.width,shape:0!==e.length?e:[1],strides:ShapeUtil.computeStrides(e),unpackedShape:e,isPacked:!0};return this.createTextureDataFromTexture(B,t.type,n.texture).tensor}const B=processDims3D(t.dims),s=processDims3D(e),F=this.reshapePacked(t,B),Q=this.run(createPackedReshape3DProgramInfoLoader(this,F,s),[F]);return this.reshapePacked(Q,e)}cast(t,e){const n=this.getOrCreateTextureData(t,0);return this.createTextureDataFromTexture(n,e,n.texture).tensor}createTextureDataFromTexture(t,e,n,B,s){const F={...t,tensor:B||new Tensor3(t.unpackedShape,e,(t=>this.readTexture(F)),(async t=>this.readTextureAsync(F)),void 0,s),texture:n};return this.setTextureData(F.tensor.dataId,F,t.isPacked),F}getTextureData(t,e=!1){return this.session.isInitializer(t)?this.session.getTextureData(t,e):e?this.packedTextureDataCache.get(t):this.unpackedTextureDataCache.get(t)}setTextureData(t,e,n=!1){this.session.isInitializer(t)?this.session.setTextureData(t,e,n):(n?this.packedTextureDataCache:this.unpackedTextureDataCache).set(t,e)}isTextureLayoutCached(t,e=!1){return!!this.getTextureData(t.dataId,e)}dispose(){this.session.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach((t=>this.session.textureManager.releaseTexture(t))),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache.forEach((t=>this.session.textureManager.releaseTexture(t))),this.unpackedTextureDataCache=new Map}readTexture(t){return t.isPacked?this.readTexture(this.unpack(t)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTexture(t,t.tensor.type,t.channels):this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this,t))}async readTextureAsync(t){return t.isPacked?this.readTextureAsync(this.unpack(t)):this.session.backend.glContext.isFloat32DownloadSupported?this.session.textureManager.readTextureAsync(t,t.tensor.type,t.channels):this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this,t))}pack(t){return this.executeProgram(createPackProgramInfoLoader(this,t.tensor),[t.tensor])}unpack(t){return this.executeProgram(createUnpackProgramInfoLoader(this,t.tensor),[t.tensor])}}}}),AttributeWithCacheKeyImpl,createAttributeWithCacheKey,init_attribute_with_cache_key=__esm({"web/lib/onnxjs/attribute-with-cache-key.ts"(){AttributeWithCacheKeyImpl=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map((t=>`${this[t]}`)).join(";")),this.key}},createAttributeWithCacheKey=t=>new AttributeWithCacheKeyImpl(t)}}),batchNormalizationProgramMetadata,batchNormalization,parseBatchNormalizationAttributes,createBatchNormalizationProgramInfo,validateInputs,init_batch_normalization=__esm({"web/lib/onnxjs/backends/webgl/ops/batch-normalization.ts"(){init_attribute_with_cache_key(),init_glsl_source(),init_types(),batchNormalizationProgramMetadata={name:"BatchNormalization",inputNames:["A","Scale","B","Mean","Variance"],inputTypes:[0,0,0,0,0]},batchNormalization=(t,e,n)=>{validateInputs(e);return[t.run({...batchNormalizationProgramMetadata,cacheHint:n.cacheKey,get:()=>createBatchNormalizationProgramInfo(t,e,n)},e)]},parseBatchNormalizationAttributes=t=>{const e=t.attributes.getFloat("epsilon",1e-5),n=t.attributes.getFloat("momentum",.9),B=t.attributes.getInt("spatial",1);return createAttributeWithCacheKey({epsilon:e,momentum:n,spatial:B})},createBatchNormalizationProgramInfo=(t,e,n)=>{const B=getGlsl(t.session.backend.glContext.version),s=e[0].dims.length,[F,Q]=t.calculateTextureWidthAndHeight(e[1].dims,0),U=`\n  float process(int[${s}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${F}, ${Q});\n    float scale = getColorAsFloat(${B.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${B.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${B.texture2D}(Variance, position));\n    float b = getColorAsFloat(${B.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${n.epsilon})) ) + b;\n  }`;return{...batchNormalizationProgramMetadata,output:{dims:e[0].dims,type:e[0].type,textureType:0},shaderSource:U}},validateInputs=t=>{if(!t||5!==t.length)throw new Error("BatchNormalization requires 5 inputs.");const e=t[0],n=t[1],B=t[2],s=t[3],F=t[4];if(e.dims.length<3||1!==n.dims.length||1!==B.dims.length||1!==s.dims.length||1!==F.dims.length)throw new Error("invalid input shape.");if(n.dims[0]!==e.dims[1]||B.dims[0]!==e.dims[1]||s.dims[0]!==e.dims[1]||F.dims[0]!==e.dims[1])throw new Error("invalid input shape.");if("float32"!==e.type&&"float64"!==e.type||"float32"!==n.type&&"float64"!==n.type||"float32"!==B.type&&"float64"!==B.type||"float32"!==s.type&&"float64"!==s.type||"float32"!==F.type&&"float64"!==F.type)throw new Error("invalid input tensor types.")}}}),GlslContext,GlslLib,GlslLibRoutine,GlslLibRoutineNode,TopologicalSortGlslRoutines,init_glsl_definitions=__esm({"web/lib/onnxjs/backends/webgl/glsl-definitions.ts"(){GlslContext=class{constructor(t,e,n,B){this.glContext=t,this.programInfo=e,this.inputTextureLayouts=n,this.outputTextureLayout=B}},GlslLib=class{constructor(t){this.context=t}},GlslLibRoutine=class{constructor(t,e){this.routineBody=t,this.dependencies=e}},GlslLibRoutineNode=class{constructor(t,e,n){this.name=t,this.dependencies=n||[],e&&(this.routineBody=e)}addDependency(t){t&&this.dependencies.push(t)}},TopologicalSortGlslRoutines=class{static returnOrderedNodes(t){if(!t||0===t.length)return[];if(1===t.length)return t;const e=new Set,n=new Set,B=new Array;return this.createOrderedNodes(t,e,n,B),B}static createOrderedNodes(t,e,n,B){for(let s=0;s<t.length;++s)this.dfsTraverse(t[s],e,n,B)}static dfsTraverse(t,e,n,B){if(!t||n.has(t.name))return;if(e.has(t.name))throw new Error("Cyclic dependency detected. Can't topologically sort routines needed for shader.");e.add(t.name);const s=t.dependencies;if(s&&s.length>0)for(let t=0;t<s.length;++t)this.dfsTraverse(s[t],e,n,B);B.push(t),n.add(t.name),e.delete(t.name)}}}}),createBinaryProgramInfoLoader,createBinaryProgramInfo,add2,and2,div,equal,greater,less,mul,or2,pow,pRelu,sub,xor2;function glslAdd(){const t="add_";return{body:`\n  float ${t}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `,name:t,type:0}}function glslDiv(){const t="div_";return{body:`\n  float ${t}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `,name:t,type:0}}function glslMul(){const t="mul_";return{body:`\n  float ${t}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `,name:t,type:0}}function glslSub(){const t="sub_";return{body:`\n  float ${t}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `,name:t,type:0}}function glslEqual(){const t="equal_";return{body:`\n  float ${t}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `,name:t,type:0}}function glslGreater(){const t="greater_";return{body:`\n  float ${t}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `,name:t,type:0}}function glslLess(){const t="less_";return{body:`\n  float ${t}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `,name:t,type:0}}function glslAnd(){const t="and_";return{body:`\n  float ${t}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `,name:t,type:0}}function glslOr(){const t="or_";return{body:`\n  float ${t}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `,name:t,type:0}}function glslXor(){const t="xor_";return{body:`\n  float ${t}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `,name:t,type:0}}function glslPow(){return glslBuiltinBinary("pow")}function glslPRelu(){const t="prelu_";return{body:`\n  float ${t}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${t}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `,name:t,type:0}}function glslBuiltinBinary(t){const e=`${t}_`;return{body:`\n  float ${e}(float a, float b) {\n    return ${t}(a, b);\n  }\n  vec4 ${e}(vec4 v1, vec4 v2) {\n    return ${t}(v1, v2);\n  }\n  `,name:e,type:0}}var init_binary_op=__esm({"web/lib/onnxjs/backends/webgl/ops/binary-op.ts"(){init_util(),init_glsl_definitions(),init_glsl_source(),init_types(),createBinaryProgramInfoLoader=(t,e,n,B=e[0].type,s)=>{const F=t.session.pack?2:0;return{name:n.name,inputNames:["A","B"],inputTypes:[F,F],cacheHint:s,get:()=>createBinaryProgramInfo(t,e,n,B)}},createBinaryProgramInfo=(t,e,n,B=e[0].type)=>{const s=t.session.pack?2:0,F=!ShapeUtil.areEqual(e[0].dims,e[1].dims);let Q=e[0].dims;const U=t.session.pack;if(F){const F=BroadcastUtil.calcShape(e[0].dims,e[1].dims,!1);if(!F)throw new Error("Can't perform binary op on the given tensors");Q=F;const i=Q.length,a=0!==e[0].dims.length?e[0].dims.length:1,l=0!==e[1].dims.length?e[1].dims.length:1,c=0!==e[0].dims.length?"bcastIndices_A(indices, aindices);":"aindices[0] = 0;",g=0!==e[1].dims.length?"bcastIndices_B(indices, bindices);":"bindices[0] = 0;",d=getGlsl(t.session.backend.glContext.version),I=U?`\n      ${n.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${n.name}(a, b);\n        ${d.output} = result;\n      }`:`\n      ${n.body}\n      float process(int indices[${i}]) {\n        int aindices[${a}];\n        int bindices[${l}];\n        ${c}\n        ${g}\n        return ${n.name}(_A(aindices), _B(bindices));\n      }`;return{name:n.name,inputNames:["A","B"],inputTypes:[s,s],output:{dims:Q,type:B,textureType:s},shaderSource:I,hasMain:U}}const i=getGlsl(t.session.backend.glContext.version),a=`\n    ${n.body}\n    void main() {\n      vec4 v1 = ${i.texture2D}(A, TexCoords);\n      vec4 v2 = ${i.texture2D}(B, TexCoords);\n      vec4 result = ${n.name}(v1, v2);\n      ${i.output} = result;\n    }\n    `;return{name:n.name,inputNames:["A","B"],inputTypes:[s,s],output:{dims:e[0].dims,type:B,textureType:s},shaderSource:a,hasMain:!0}},add2=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslAdd()),e)],and2=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslAnd(),"bool"),e)],div=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslDiv()),e)],equal=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslEqual(),"bool"),e)],greater=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslGreater(),"bool"),e)],less=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslLess(),"bool"),e)],mul=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslMul()),e)],or2=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslOr(),"bool"),e)],pow=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslPow()),e)],pRelu=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslPRelu()),e)],sub=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslSub()),e)],xor2=(t,e)=>[t.run(createBinaryProgramInfoLoader(t,e,glslXor(),"bool"),e)]}}),cast,parseCastAttributes,validateInputs2,init_cast=__esm({"web/lib/onnxjs/backends/webgl/ops/cast.ts"(){init_util(),cast=(t,e,n)=>(validateInputs2(e),[t.cast(e[0],n)]),parseCastAttributes=t=>ProtoUtil.tensorDataTypeFromProto(t.attributes.getInt("to")),validateInputs2=t=>{if(!t||1!==t.length)throw new Error("Cast requires 1 input.");if("string"===t[0].type)throw new Error("Invalid input type.")}}}),createPackedConcatProgramMetadata,createPackedConcatProgramInfo,createPackedConcatProgramInfoLoader,getShiftedChannelsSnippet,init_concat_packed=__esm({"web/lib/onnxjs/backends/webgl/ops/concat-packed.ts"(){init_glsl_source(),init_types(),init_utils(),init_packing_utils(),createPackedConcatProgramMetadata=(t,e)=>({name:"Concat (packed)",inputNames:Array.from({length:t},((t,e)=>`X${e}`)),inputTypes:Array(t).fill(2),cacheHint:e}),createPackedConcatProgramInfo=(t,e,n,B)=>{const s=n[0].dims.slice();if(B>=s.length||B<-1*s.length)throw new Error("axis specified for concat doesn't match input dimensionality");B<0&&(B=s.length+B);const F=s.slice(0);for(let t=1;t<n.length;t++){const e=n[t].dims.slice();for(let t=0;t<s.length;t++)if(t===B)F[B]+=e[t];else if(s[t]!==e[t])throw new Error("non concat dimensions must match")}const Q=F.length,U=getChannels("coords",Q),i=getCoordsDataType(Q),a=unpackFromChannel(),l=n.map((t=>t.dims)),c=getGlChannels(Q),g=new Array(l.length-1);g[0]=l[0][B];for(let t=1;t<g.length;t++)g[t]=g[t-1]+l[t][B];const d=c[B],I=c.slice(-2),o=c.join();let r=`if (${d} < ${g[0]}) {\n        return getChannel(\n            getX0(${o}), vec2(${I.join()}));\n        }`;for(let t=1;t<g.length;t++){const e=g[t-1];r+=`\n            if (${d} < ${g[t]}  && ${d} >= ${g[t-1]}) {\n              return getChannel(\n                getX${t}(${getShiftedChannelsSnippet(c,d,e)}),\n                vec2(${getShiftedChannelsSnippet(I,d,e)}));\n            }`}const u=g.length,b=g[g.length-1];r+=`\n            return getChannel(\n              getX${u}(${getShiftedChannelsSnippet(c,d,b)}),\n              vec2(${getShiftedChannelsSnippet(I,d,b)}));`;const C=getGlsl(t.session.backend.glContext.version),p=`\n          ${a}\n          float getValue(${c.map((t=>"int "+t))}) {\n            ${r}\n          }\n\n          void main() {\n            ${i} coords = getOutputCoords();\n            int lastDim = coords.${c[Q-1]};\n            coords.${c[Q-1]} = coords.${c[Q-2]};\n            coords.${c[Q-2]} = lastDim;\n\n            vec4 result = vec4(getValue(${U}), 0., 0., 0.);\n\n            ${U[Q-1]} = ${U[Q-1]} + 1;\n            if (${U[Q-1]} < ${F[Q-1]}) {\n              result.g = getValue(${U});\n            }\n\n            ${U[Q-2]} = ${U[Q-2]} + 1;\n            if (${U[Q-2]} < ${F[Q-2]}) {\n              result.a = getValue(${U});\n            }\n\n            ${U[Q-1]} = ${U[Q-1]} - 1;\n            if (${U[Q-2]} < ${F[Q-2]} &&\n                ${U[Q-1]} < ${F[Q-1]}) {\n              result.b = getValue(${U});\n            }\n            ${C.output} = result;\n          }\n        `;return{...e,output:{dims:F,type:n[0].type,textureType:2},shaderSource:p,hasMain:!0}},createPackedConcatProgramInfoLoader=(t,e,n)=>{const B=createPackedConcatProgramMetadata(e.length,n.cacheKey);return{...B,get:()=>createPackedConcatProgramInfo(t,B,e,n.axis)}},getShiftedChannelsSnippet=(t,e,n)=>{const B=t.indexOf(e);return t.map(((t,e)=>e===B?`${t} - ${n}`:t)).join()}}}),concat,createUnpackedConcatProgramMetadata,createUnpackedConcatProgramInfo,createUnpackedConcatProgramInfoLoader,getTextureIndexWhereDataResidesLinearSearch,getTextureIndexWhereDataResidesBinarySearch,getFetchDataFromCorrectTextureMethod,getGetSizeInConcatAxisValueFromIndexMethod,parseConcatAttributes,validateInputs3,init_concat=__esm({"web/lib/onnxjs/backends/webgl/ops/concat.ts"(){init_attribute_with_cache_key(),init_types(),init_concat_packed(),concat=(t,e,n)=>{if(validateInputs3(e),t.session.pack&&e[0].dims.length>1){return[t.run(createPackedConcatProgramInfoLoader(t,e,n),e)]}return[t.run(createUnpackedConcatProgramInfoLoader(t,e,n),e)]},createUnpackedConcatProgramMetadata=(t,e)=>({name:"Concat",inputNames:Array.from({length:t},((t,e)=>`X${e}`)),inputTypes:Array(t).fill(0),cacheHint:e}),createUnpackedConcatProgramInfo=(t,e,n,B)=>{const s=n[0].dims.slice();if(B>=s.length||B<-1*s.length)throw new Error("axis specified for concat doesn't match input dimensionality");B<0&&(B=s.length+B);const F=s.slice(0);for(let t=1;t<n.length;t++){const e=n[t].dims.slice();for(let t=0;t<s.length;t++)if(t===B)F[B]+=e[t];else if(s[t]!==e[t])throw new Error("non concat dimensions must match")}const Q=F.length,U=new Array(n.length);let i=0;for(let t=0;t<U.length;++t)i+=n[t].dims[B],U[t]=i;let a="";a=n.length<5?getTextureIndexWhereDataResidesLinearSearch(U):getTextureIndexWhereDataResidesBinarySearch(U);const l=`\n        ${getFetchDataFromCorrectTextureMethod(n.length,Q)}\n        ${getGetSizeInConcatAxisValueFromIndexMethod(U)}\n        ${a}\n        float process(int indices[${Q}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${B}]);\n\n          if(textureIndex != 0) {\n            indices[${B}] = indices[${B}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;return{...e,output:{dims:F,type:n[0].type,textureType:0},shaderSource:l}},createUnpackedConcatProgramInfoLoader=(t,e,n)=>{const B=createUnpackedConcatProgramMetadata(e.length,n.cacheKey);return{...B,get:()=>createUnpackedConcatProgramInfo(t,B,e,n.axis)}},getTextureIndexWhereDataResidesLinearSearch=t=>`int getTextureWhereDataResides(int index) {\n      ${t.map(((t,e)=>`if(index<${t}) {return ${e};}\n`)).join("")}\n    }`,getTextureIndexWhereDataResidesBinarySearch=t=>getTextureIndexWhereDataResidesLinearSearch(t),getFetchDataFromCorrectTextureMethod=(t,e)=>{const n=[`float fetchDataFromCorrectTexture(int textureIndex, int indices[${e}]) {`];for(let e=0;e<t;++e)0===e?n.push(`\tif (textureIndex == ${e}) { return _X${e}(indices); }`):e===t-1?n.push(`\telse { return _X${e}(indices); }`):n.push(`\telse if (textureIndex == ${e}) { return _X${e}(indices); }`);return n.push("\t}"),n.join("\n")},getGetSizeInConcatAxisValueFromIndexMethod=t=>{const e=["int getSizeInConcatAxisValueFromIndex(int index) {"];for(let n=0;n<t.length;++n)0===n?e.push(`\tif (index == ${n}) { return ${t[n]}; }`):n===t.length-1?e.push(`\telse { return ${t[n]}; }`):e.push(`\telse if (index == ${n}) { return ${t[n]}; }`);return e.push("\t}"),e.join("\n")},parseConcatAttributes=t=>createAttributeWithCacheKey({axis:t.attributes.getInt("axis")}),validateInputs3=t=>{if(!t||t.length<1)throw new Error("too few inputs");const e=t[0].type,n=t[0].dims.length;if("string"===e)throw new Error("string tensor is not supported yet");for(const B of t){if(B.type!==e)throw new Error("input tensors should be one type");if(B.dims.length!==n)throw new Error("input tensors should have the same shape")}}}}),createElementwiseProgramInfo,createElementwiseProgramInfoLoader,abs,acos,asin,atan,clip,parseClipAttributes,clipV11,generateClipAttributesFromInputs,ceil,cos,elu,parseEluAttributes,exp,floor,identity,leakyRelu,parseLeakyReluAttributes,log2,neg,not2,relu,sigmoid,sin,sqrt,tan,tanh;function glslAbs(){return glslBuiltinUnary("abs")}function glslAcos(){return glslBuiltinUnary("acos")}function glslAsin(){return glslBuiltinUnary("asin")}function glslAtan(){return glslBuiltinUnary("atan")}function glslCeil(){return glslBuiltinUnary("ceil")}function glslCos(){return glslBuiltinUnary("cos")}function glslElu(t){const e="elu";return{body:`\n  const float alpha = float(${t});\n\n  float ${e}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${e}_(vec4 v) {\n    return vec4(${e}_(v.x), ${e}_(v.y), ${e}_(v.z), ${e}_(v.w));\n  }\n  `,name:e,type:0}}function glslExp(){return glslBuiltinUnary("exp")}function glslFloor(){return glslBuiltinUnary("floor")}function glslClip(t,e){const n="clip";return{body:`\n  const float min = float(${t});\n  const float max = float(${e});\n\n  float ${n}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${n}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `,name:n,type:0}}function glslIdentity(){const t="indentity";return{body:`\n  float ${t}_(float a) {\n    return a;\n  }\n  vec4 ${t}_(vec4 v) {\n    return v;\n  }\n  `,name:t,type:0}}function glslLeakyRelu(t){const e="leakyRelu";return{body:`\n  const float alpha = float(${t});\n\n  float ${e}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${e}_(vec4 v) {\n    return vec4(${e}_(v.x), ${e}_(v.y), ${e}_(v.z), ${e}_(v.w));\n  }\n  `,name:e,type:0}}function glslLog(){return glslBuiltinUnary("log")}function glslNeg(){const t="neg";return{body:`\n  float ${t}_(float a) {\n    return -a;\n  }\n  vec4 ${t}_(vec4 v) {\n    return -v;\n  }\n  `,name:t,type:0}}function glslNot(){const t="not";return{body:`\n  float ${t}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${t}_(bool a) {\n    return !a;\n  }\n  vec4 ${t}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${t}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `,name:t,type:0}}function glslSin(){return glslBuiltinUnary("sin")}function glslRelu(){const t="relu";return{body:`\n  float ${t}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${t}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `,name:t,type:0}}function glslSigmoid(){const t="sigmoid";return{body:`\n  float ${t}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${t}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `,name:t,type:0}}function glslSqrt(){return glslBuiltinUnary("sqrt")}function glslTan(){return glslBuiltinUnary("tan")}function glslTanh(){const t="tanh";return{body:`\n  float ${t}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${t}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `,name:t,type:0}}function glslBuiltinUnary(t){return{body:`\n  float ${t}_(float a) {\n    return ${t}(a);\n  }\n  vec4 ${t}_(vec4 v) {\n    return ${t}(v);\n  }\n  `,name:t,type:0}}var init_unary_op=__esm({"web/lib/onnxjs/backends/webgl/ops/unary-op.ts"(){init_attribute_with_cache_key(),init_util(),init_glsl_definitions(),init_glsl_source(),init_types(),createElementwiseProgramInfo=(t,e,n,B)=>{const s=t.session.pack?2:0,F=getGlsl(t.session.backend.glContext.version);return{...e,output:{dims:n.dims,type:n.type,textureType:s},shaderSource:`\n     ${B.body}\n     void main() {\n       vec4 v = ${F.texture2D}(A, TexCoords);\n       v = ${B.name}_(v);\n       ${F.output} = v;\n     }\n     `,hasMain:!0}},createElementwiseProgramInfoLoader=(t,e,n,B)=>{const s=t.session.pack?2:0,F={name:n.name,inputTypes:[s],inputNames:["A"],cacheHint:B};return{...F,get:()=>createElementwiseProgramInfo(t,F,e,n)}},abs=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslAbs()),e)],acos=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslAcos()),e)],asin=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslAsin()),e)],atan=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslAtan()),e)],clip=(t,e,n)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslClip(n.min,n.max),n.cacheKey),e)],parseClipAttributes=t=>createAttributeWithCacheKey({min:t.attributes.getFloat("min",MIN_CLIP),max:t.attributes.getFloat("max",MAX_CLIP)}),clipV11=(t,e)=>{const n=generateClipAttributesFromInputs(t,e);return clip(t,[e[0]],n)},generateClipAttributesFromInputs=(t,e)=>{if(e.length>=3&&(!t.session.isInitializer(e[1].dataId)||!t.session.isInitializer(e[2].dataId)))throw new Error("dynamic clip attributes are not allowed");const n=e.length>=3?e[1].numberData[0]:MIN_CLIP,B=e.length>=3?e[2].numberData[0]:MAX_CLIP;return createAttributeWithCacheKey({min:n,max:B})},ceil=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslCeil()),e)],cos=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslCos()),e)],elu=(t,e,n)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslElu(n.alpha),n.cacheKey),e)],parseEluAttributes=t=>createAttributeWithCacheKey({alpha:t.attributes.getFloat("alpha",1)}),exp=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslExp()),e)],floor=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslFloor()),e)],identity=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslIdentity()),e)],leakyRelu=(t,e,n)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslLeakyRelu(n.alpha),n.cacheKey),e)],parseLeakyReluAttributes=t=>createAttributeWithCacheKey({alpha:t.attributes.getFloat("alpha",.01)}),log2=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslLog()),e)],neg=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslNeg()),e)],not2=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslNot()),e)],relu=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslRelu()),e)],sigmoid=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslSigmoid()),e)],sin=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslSin()),e)],sqrt=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslSqrt()),e)],tan=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslTan()),e)],tanh=(t,e)=>[t.run(createElementwiseProgramInfoLoader(t,e[0],glslTanh()),e)]}}),parseInternalActivationAttributes;function getActivationSnippet(t){let e;switch(t.activation){case"Relu":e=glslRelu();break;case"Sigmoid":e=glslSigmoid();break;case"Clip":e=glslClip(t.clipMin,t.clipMax);break;default:return{activationFunction:"",applyActivation:""}}const n=e.name;return{activationFunction:e.body,applyActivation:`value = ${n}_(value);`}}var init_fuse_utils=__esm({"web/lib/onnxjs/backends/webgl/ops/fuse-utils.ts"(){init_util(),init_unary_op(),parseInternalActivationAttributes=t=>{const e=t.getString("activation","");if("Clip"===e){const[n,B]=t.getFloats("activation_params",[MIN_CLIP,MAX_CLIP]);return{activation:e,clipMax:B,clipMin:n,activationCacheKey:`${e}:${n},${B}`}}return{activation:e,activationCacheKey:e}}}}),createUnpackedGroupedConvProgramMetadata,createUnpackedGroupedConvProgramInfo,createUnpackedGroupedConvProgramInfoLoader,init_conv_grouped=__esm({"web/lib/onnxjs/backends/webgl/ops/conv-grouped.ts"(){init_instrument(),init_glsl_source(),init_types(),init_conv(),init_fuse_utils(),createUnpackedGroupedConvProgramMetadata=(t,e)=>({name:"GroupedConv",inputNames:t?["X","W","Bias"]:["X","W"],inputTypes:t?[0,0,0]:[0,0],cacheHint:e}),createUnpackedGroupedConvProgramInfo=(t,e,n,B)=>{const s=e.length>2?"value += getBias(output_channel);":"",F=e[0].dims.slice(),Q=e[1].dims.slice(),U=Q[0]/B.group;Logger.verbose("GroupedConv",`autpPad:${B.autoPad}, dilations:${B.dilations}, group:${B.group}, kernelShape:${B.kernelShape}, pads:${B.pads}, strides:${B.strides}`);const i=calculateOutputShape(F,Q,B.dilations,B.pads,B.strides),a=getGlsl(t.session.backend.glContext.version),{activationFunction:l,applyActivation:c}=getActivationSnippet(B),g=`\n  const ivec2 strides = ivec2(${B.strides[0]}, ${B.strides[1]});\n  const ivec2 pads = ivec2(${B.pads[0]}, ${B.pads[1]});\n  ${l}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${U};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${Q[1]}; wInChannel++) {\n      int input_channel = group_id * ${Q[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${Q[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${B.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${F[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${Q[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${B.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${F[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${s}\n    ${c}\n    ${a.output} = vec4(value, .0, .0, .0);\n  }\n`;return{...n,output:{dims:i,type:e[0].type,textureType:0},shaderSource:g,hasMain:!0}},createUnpackedGroupedConvProgramInfoLoader=(t,e,n)=>{const B=createUnpackedGroupedConvProgramMetadata(e.length>2,n.cacheKey);return{...B,get:()=>createUnpackedGroupedConvProgramInfo(t,e,B,n)}}}}),createPackedIm2ColProgramMetadata,createPackedIm2ColProgramInfo,createPackedIm2ColProgramInfoLoader,init_im2col_pack=__esm({"web/lib/onnxjs/backends/webgl/ops/im2col-pack.ts"(){init_glsl_source(),init_types(),init_packing_utils(),createPackedIm2ColProgramMetadata=t=>({name:"Im2Col (packed)",inputNames:["A"],inputTypes:[2],cacheHint:t}),createPackedIm2ColProgramInfo=(t,e,n,B,s,F)=>{const Q=n.dims,U=B.dims,i=s.length,a=[U[1]*U[2]*U[3],s[2]*s[3]],l=U[2]*U[3],c=unpackFromChannel(),g=getGlsl(t.session.backend.glContext.version);let d="";for(let t=0;t<=1;t++)for(let e=0;e<=1;e++)d+=`\n            blockIndex = rc.x + ${e};\n            pos = rc.y + ${t};\n\n            if(blockIndex < ${a[1]} && pos < ${a[0]}) {\n              offsetY = int(blockIndex / (${s[i-1]})) * ${F.strides[0]} -\n                ${F.pads[0]};\n              d0 = offsetY + ${F.dilations[0]} * (imod(pos, ${l}) / ${U[2]});\n\n              if(d0 < ${Q[2]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${s[i-1]}) * ${F.strides[1]} -\n                  ${F.pads[1]};\n                d1 = offsetX + ${F.dilations[1]} * imod(imod(pos, ${l}), ${U[2]});\n\n                if(d1 < ${Q[3]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${l}.);\n                    innerDims = vec2(d0, d1);\n                    result[${2*t+e}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;const I=`\n      ${c}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${d}\n          ${g.output} = result;\n      }\n            `;return{...e,output:{dims:a,type:n.type,textureType:2},shaderSource:I,hasMain:!0}},createPackedIm2ColProgramInfoLoader=(t,e,n,B,s)=>{const F=createPackedIm2ColProgramMetadata(s.cacheKey);return{...F,get:()=>createPackedIm2ColProgramInfo(t,F,e,n,B,s)}}}}),matMul,parseMatMulAttributes,createMatmulProgramMetadata,validateInputs4;function createMatmulProgramInfo(t,e,n){const B=e[0].dims,s=e[1].dims,F=BroadcastUtil.calcShape(B,s,!0);if(!F)throw new Error("Can't use matmul on the given tensors");const Q=getCoordsDataType(F.length),U=getGlChannels(),{activationFunction:i,applyActivation:a}=getActivationSnippet(n),l=e.length>2,c=l?"value += getBiasForMatmul();":"",g=l?`${getBiasForMatmul(Q,U,e[2].dims,F,!1)}`:"",d=F.length,I=B.length,o=s.length,r=`\n    ${i}\n    ${g}\n    float process(int indices[${d}]) {\n        int a[${I}];\n        int b[${o}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${B[B.length-1]}; ++k) {\n            a[${I-1}] = k;\n            b[${o-2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${c}\n        ${a}\n        return value;\n    }`;return{...t,output:{dims:F,type:e[0].type,textureType:0},shaderSource:r}}function createMatmulProgramInfoLoader(t,e){const n=createMatmulProgramMetadata(t.length>2,e.activationCacheKey);return{...n,get:()=>createMatmulProgramInfo(n,t,e)}}function getBiasForMatmul(t,e,n,B,s){let F="";const Q=n.length,U=B.length,i=U-Q;F=U<2&&Q>0?"coords":n.map(((t,n)=>`coords.${e[n+i]}`)).join(", ");const a=BroadcastUtil.getBroadcastDims(n,B).map((t=>`coords.${e[t+i]} = 0;`)).join("\n");let l="vec4(outputValue.xx, outputValue.yy)";1===ShapeUtil.size(n)&&(l="vec4(outputValue.x)");return s?`\nvec4 getBiasForMatmul() {\n  ${t} coords = getOutputCoords();\n  ${a}\n  vec4 outputValue = getBias(${F});\n  return ${l};\n}`:`\nfloat getBiasForMatmul() {\n  ${t} coords = getOutputCoords();\n  ${a}\n  return getBias(coords.x);\n}`}var init_matmul=__esm({"web/lib/onnxjs/backends/webgl/ops/matmul.ts"(){init_util(),init_types(),init_utils(),init_fuse_utils(),init_matmul_pack(),matMul=(t,e,n)=>(validateInputs4(e),t.session.pack?[t.run(createPackedMatmulProgramInfoLoader(t,e,n),e)]:[t.run(createMatmulProgramInfoLoader(e,n),e)]),parseMatMulAttributes=t=>parseInternalActivationAttributes(t.attributes),createMatmulProgramMetadata=(t,e)=>({name:"MatMul",inputNames:t?["A","B","Bias"]:["A","B"],inputTypes:t?[0,0,0]:[0,0],cacheHint:e}),validateInputs4=t=>{if(!t||2!==t.length)throw new Error("MatMul requires 2 inputs.");if(t[0].dims[t[0].dims.length-1]!==t[1].dims[t[1].dims.length-2])throw new Error("shared dimension does not match.");if("float32"!==t[0].type&&"float64"!==t[0].type||"float32"!==t[1].type&&"float64"!==t[1].type)throw new Error("inputs should be float type");if(t[0].type!==t[1].type)throw new Error("inputs types should match")}}}),createPackedMatmulProgramMetadata,createPackedMatmulProgramInfo,createPackedMatmulProgramInfoLoader;function getBcastSamplerForMatmul(t,e,n,B){let s=[],F=[];const Q=n[0].dims,U=n[1].dims,i=Q.length,a=U.length,l=B.length,c=l-i,g=l-a;s=Q.map(((t,n)=>`coords.${e[n+c]}`)),s[i-1]="i*2",s.join(", "),F=U.map(((t,n)=>`coords.${e[n+g]}`)),F[a-2]="i*2",F.join(", ");const d=BroadcastUtil.getBroadcastDims(Q,B),I=BroadcastUtil.getBroadcastDims(U,B),o=d.map((t=>`coords.${e[t+c]} = 0;`)).join("\n"),r=I.map((t=>`coords.${e[t+g]} = 0;`)).join("\n"),u=`int lastDim = coords.${e[l-1]};\n  coords.${e[l-1]} = coords.${e[l-2]};\n  coords.${e[l-2]} = lastDim;`;return`\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${t} coords = getOutputCoords();\n  ${u}\n  ${o}\n  vec4 outputValue = getA(${s});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${t} coords = getOutputCoords();\n  ${u}\n  ${r}\n  vec4 outputValue = getB(${F});\n  return outputValue;\n}`}function getA(t,e){let n="";for(let B=0;B<e-2;B++)n+=`rc.${t[B]}, `;return n+=`rc.${t[e-2]}, i*2`,n}function getB(t,e){let n="";for(let B=0;B<e-2;B++)n+=`rc.${t[B]}, `;return n+=`i*2, rc.${t[e-1]}`,n}var init_matmul_pack=__esm({"web/lib/onnxjs/backends/webgl/ops/matmul-pack.ts"(){init_util(),init_glsl_source(),init_types(),init_utils(),init_fuse_utils(),init_matmul(),createPackedMatmulProgramMetadata=(t,e)=>({name:"MatMul (packed)",inputNames:t?["A","B","Bias"]:["A","B"],inputTypes:t?[2,2,2]:[2,2],cacheHint:e}),createPackedMatmulProgramInfo=(t,e,n,B)=>{const s=n.length>2,F=s?"value += getBiasForMatmul();":"",Q=n[0].dims,U=n[1].dims,i=BroadcastUtil.calcShape(Q,U,!0),a=!ShapeUtil.areEqual(n[0].dims,n[1].dims);if(!i)throw new Error("Can't use matmul on the given tensors");const l=Q[Q.length-1],c=Math.ceil(l/2),g=Q.length,d=U.length,I=getGlsl(t.session.backend.glContext.version),o=getCoordsDataType(i.length),r=i.length,u=getGlChannels(),{activationFunction:b,applyActivation:C}=getActivationSnippet(B),p=s?`${getBiasForMatmul(o,u,n[2].dims,i,!0)}`:"",m=a?`${getBcastSamplerForMatmul(o,u,n,i)}`:"",G=a?"getAAtOutCoordsMatmul(i)":`getA(${getA(u,g)})`,V=a?"getBAtOutCoordsMatmul(i)":`getB(${getB(u,d)})`,x=`\n            ${m}\n            ${p}\n            ${b}\n            void main() {\n              ${a?"":`${o} rc =\n          getOutputCoords(); int lastDim = rc.${u[r-1]}; rc.${u[r-1]} =\n          rc.${u[r-2]}; rc.${u[r-2]} = lastDim;\n      `}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${c}; i++) {\n                vec4 a = ${G};\n                vec4 b = ${V};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${F}\n              ${C}\n              ${I.output} = value;\n            }`;return{...e,output:{dims:i,type:n[0].type,textureType:2},shaderSource:x,hasMain:!0}},createPackedMatmulProgramInfoLoader=(t,e,n)=>{const B=createPackedMatmulProgramMetadata(e.length>2,n.activationCacheKey);return{...B,get:()=>createPackedMatmulProgramInfo(t,B,e,n)}}}}),conv2DPacked,init_conv_pack=__esm({"web/lib/onnxjs/backends/webgl/ops/conv-pack.ts"(){init_conv(),init_im2col_pack(),init_matmul_pack(),conv2DPacked=(t,e,n)=>{const B=e[0].dims,s=e[1].dims,F=calculateOutputShape(B,s,n.dilations,n.pads,n.strides),Q=t.run(createPackedIm2ColProgramInfoLoader(t,e[0],e[1],F,n),[e[0]]),U=t.reshapePacked(e[1],[s[0],s[1]*s[2]*s[3]]),i=3===e.length?[U,Q,e[2]]:[U,Q],a=t.run(createPackedMatmulProgramInfoLoader(t,i,n),i);return t.reshapePacked(a,F)}}}),createIm2ColProgramMetadata,createIm2ColProgramInfo,createIm2ColProgramInfoLoader,calculateIm2ColDims,init_im2col=__esm({"web/lib/onnxjs/backends/webgl/ops/im2col.ts"(){init_types(),createIm2ColProgramMetadata=t=>({name:"Im2Col",inputNames:["X"],inputTypes:[0],cacheHint:t}),createIm2ColProgramInfo=(t,e,n,B,s,F)=>{const Q=n.dims,U=B.dims,i=s.length,a=calculateIm2ColDims(Q,U,s,4),l=`\n        const int XC = ${Q[1]};\n        const int XH = ${Q[2]};\n        const int XW = ${Q[3]};\n        const int KH = ${F.kernelShape[0]};\n        const int KW = ${F.kernelShape[1]};\n        const int dilationH = ${F.dilations[0]};\n        const int dilationW = ${F.dilations[1]};\n        const int strideH = ${F.strides[0]};\n        const int strideW = ${F.strides[1]};\n        const int padH = ${F.pads[0]};\n        const int padW = ${F.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${i}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${Q.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;return{...e,output:{dims:a,type:n.type,textureType:4},shaderSource:l}},createIm2ColProgramInfoLoader=(t,e,n,B,s)=>{const F=createIm2ColProgramMetadata(s.cacheKey);return{...F,get:()=>createIm2ColProgramInfo(t,F,e,n,B,s)}},calculateIm2ColDims=(t,e,n,B=4)=>[n[0],n[2],n[3],Math.ceil(t[1]*e[2]*e[3]/B)]}}),createDotProductProgramMetadata,createDotProductProgramInfo,createDotProductProgramInfoLoader,init_dot_product=__esm({"web/lib/onnxjs/backends/webgl/ops/dot-product.ts"(){init_util(),init_glsl_source(),init_types(),init_fuse_utils(),init_im2col(),createDotProductProgramMetadata=(t,e)=>({name:"ConvDotProduct",inputNames:t?["Im2Col","K","B"]:["Im2Col","K"],inputTypes:t?[0,4,0]:[0,4],cacheKey:e.activationCacheKey}),createDotProductProgramInfo=(t,e,n,B,s)=>{const F=n[0].dims,Q=n[1].dims,U=[Q[0],Math.ceil(F[1]*Q[2]*Q[3]/4)],i=calculateIm2ColDims(F,Q,B),[a,l]=t.calculateTextureWidthAndHeight(U,4),c=ShapeUtil.computeStrides(i),[g,d]=t.calculateTextureWidthAndHeight(i,4),I=B.length,o=n.length<3?"0.0":"_B(b)",r=Math.ceil(F[1]*Q[2]*Q[3]/4),{activationFunction:u,applyActivation:b}=getActivationSnippet(s),C=getGlsl(t.session.backend.glContext.version),p=`\n${u}\nfloat process(int indices[${I}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${c[0]} + im2col[1] * ${c[1]} + im2col[2] * ${c[2]};\n  int kernelOffset = indices[1] * ${U[1]};\n  float value = ${o};\n  for (int i = 0; i < ${r}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${g}, ${d});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${a}, ${l});\n    value += dot(${C.texture2D}(Im2Col, im2colCoords), ${C.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${b}\n  return value;\n}`;return{...e,output:{dims:B,type:n[0].type,textureType:0},shaderSource:p}},createDotProductProgramInfoLoader=(t,e,n,B)=>{const s=createDotProductProgramMetadata(e.length>2,B);return{...s,get:()=>createDotProductProgramInfo(t,s,e,n,B)}}}}),calculateOutputShape,conv,conv2d,conv2DUnpackedPointwise,conv2DUnpacked,getAdjustedConvAttributes,parseConvAttributes,validateInputs5,init_conv=__esm({"web/lib/onnxjs/backends/webgl/ops/conv.ts"(){init_attribute_with_cache_key(),init_util(),init_conv_grouped(),init_conv_pack(),init_dot_product(),init_fuse_utils(),init_im2col(),init_matmul(),calculateOutputShape=(t,e,n,B,s)=>{const F=t[0],Q=t.slice(2),U=Q.length,i=e[0],a=e.slice(2).map(((t,e)=>t+(t-1)*(n[e]-1))),l=Q.map(((t,e)=>t+B[e]+B[e+U])).map(((t,e)=>Math.floor((t-a[e]+s[e])/s[e])));return[F,i].concat(...l)},conv=(t,e,n)=>(validateInputs5(e,n),conv2d(t,e,n)),conv2d=(t,e,n)=>{const B=getAdjustedConvAttributes(n,e),s=t.session.pack,F=1===B.kernelShape[0]&&1===B.kernelShape[1];if(B.group>1){return[t.run(createUnpackedGroupedConvProgramInfoLoader(t,e,B),e)]}return F&&s?[conv2DUnpackedPointwise(t,e,B)]:s&&4===e[0].dims.length&&1===e[0].dims[0]&&!F?[conv2DPacked(t,e,B)]:[conv2DUnpacked(t,e,B)]},conv2DUnpackedPointwise=(t,e,n)=>{const B=e[0].dims,s=e[1].dims,F=calculateOutputShape(B,s,n.dilations,n.pads,n.strides),Q=t.reshapeUnpacked(e[0],[B[1],B[2]*B[3]]),U=t.reshapeUnpacked(e[1],[s[0],s[1]]),i=e.length>2?[U,Q,e[2]]:[U,Q],a=t.run(createMatmulProgramInfoLoader(i,n),i);return t.reshapeUnpacked(a,F)},conv2DUnpacked=(t,e,n)=>{const B=e[0].dims,s=e[1].dims,F=calculateOutputShape(B,s,n.dilations,n.pads,n.strides),Q=t.run(createIm2ColProgramInfoLoader(t,e[0],e[1],F,n),[e[0]]),U=3===e.length?[Q,e[1],e[2]]:[Q,e[1]];return t.run(createDotProductProgramInfoLoader(t,e,F,n),U)},getAdjustedConvAttributes=(t,e)=>{const n=t.kernelShape.slice();if(0===t.kernelShape.length)for(let t=2;t<e[1].dims.length;++t)n.push(e[1].dims[t]);const B=t.pads.slice();PoolConvUtil.adjustPadsBasedOnAutoPad(e[0].dims,t.strides,t.dilations,n,B,t.autoPad);const s=Object.assign({},t);return Object.assign(s,{kernelShape:n,pads:B,cacheKey:t.cacheKey}),s},parseConvAttributes=t=>{const e=t.attributes,n=parseInternalActivationAttributes(e),B=e.getString("auto_pad","NOTSET"),s=e.getInts("dilations",[1,1]),F=e.getInt("group",1),Q=e.getInts("kernel_shape",[]),U=e.getInts("pads",[0,0,0,0]),i=e.getInts("strides",[1,1]);return createAttributeWithCacheKey({autoPad:B,dilations:s,group:F,kernelShape:Q,pads:U,strides:i,...n})},validateInputs5=(t,e)=>{if(!t||2!==t.length&&3!==t.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==t[0].dims.length||4!==t[1].dims.length)throw new Error("currently only support 2-dimensional conv");if(t[0].dims[1]!==t[1].dims[1]*e.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(3===t.length&&(1!==t[2].dims.length||t[1].dims[0]!==t[2].dims[0]))throw new Error("invalid bias");const n=t[0].dims.length-2;if(e.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(e.strides.length!==n)throw new Error(`strides should be ${n}D`);if(e.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==e.kernelShape.length&&e.kernelShape.length!==t[1].dims.length-2)throw new Error("invalid kernel shape");if("float32"!==t[0].type||"float32"!==t[1].type)throw new Error("Conv input(X,W) should be float tensor");if(3===t.length&&"float32"!==t[2].type)throw new Error("Conv input(bias) should be float tensor")}}}),computeTotalPad,distributePadding,calculateOutputShapeAndPads,convTranspose,convTranspose2d,createConvTransposeProgramMetadata,createUnpackedConvTransposeProgramInfo,createUnpackedConvTransposeProgramInfoLoader,convTranspose2DUnpacked,getAdjustedConvTransposeAttributes,parseConvTransposeAttributes,validateInputs6,init_conv_transpose=__esm({"web/lib/onnxjs/backends/webgl/ops/conv-transpose.ts"(){init_attribute_with_cache_key(),init_glsl_source(),init_types(),init_fuse_utils(),computeTotalPad=(t,e,n,B,s,F)=>(t-1)*e+n+(B-1)*s+1-F,distributePadding=(t,e,n,B,s)=>{const F=Math.floor(t/2);"SAME_UPPER"===e?(n[B]=F,n[s]=t-F):"SAME_LOWER"===e&&(n[B]=t-F,n[s]=F)},calculateOutputShapeAndPads=(t,e,n,B,s,F,Q,U)=>{const i=t.length-2,a=0===U.length;for(let l=0;l<i;++l){const c=a?t[l+2]*F[l]:U[l],g=computeTotalPad(t[l+2],F[l],s[l],e[l],n[l],c);distributePadding(g,B,s,l,l+i),a&&U.push(F[l]*(t[l+2]-1)+Q[l]+(e[l]-1)*n[l]+1-s[l]-s[l+i])}},convTranspose=(t,e,n)=>(validateInputs6(e,n),convTranspose2d(t,e,n)),convTranspose2d=(t,e,n)=>{const B=getAdjustedConvTransposeAttributes(n,e);return[convTranspose2DUnpacked(t,e,B)]},createConvTransposeProgramMetadata=(t,e)=>({name:"ConvTranspose",inputNames:t?["X","W","B"]:["X","W"],inputTypes:t?[0,0,0]:[0,0],cacheHint:e}),createUnpackedConvTransposeProgramInfo=(t,e,n,B)=>{const s=e.length>2?"getB(output_channel)":"0.0",F=e[0].dims,Q=e[1].dims,U=Q[1],i=Q[0]/B.group,a=[e[0].dims[0],e[1].dims[1]*B.group,...B.outputShape],l=getGlsl(t.session.backend.glContext.version),{activationFunction:c,applyActivation:g}=getActivationSnippet(B),d=`\n  const ivec2 strides = ivec2(${B.strides[0]}, ${B.strides[1]});\n  const ivec2 pads = ivec2(${B.pads[0]}, ${B.pads[1]});\n  ${c}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${U};\n    int wOutChannel = output_channel - group_id * ${U};\n\n    float value = ${s};\n    for (int inChannelOffset = 0; inChannelOffset < ${i}; inChannelOffset++) {\n      int input_channel = group_id * ${i} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${Q[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${Q[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${B.dilations[0]}, wHOff * ${B.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${F[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${F[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${g}\n    ${l.output} = vec4(value, .0, .0, .0);\n  }\n`;return{...n,output:{dims:a,type:e[0].type,textureType:0},shaderSource:d,hasMain:!0}},createUnpackedConvTransposeProgramInfoLoader=(t,e,n)=>{const B=createConvTransposeProgramMetadata(e.length>2,n.cacheKey);return{...B,get:()=>createUnpackedConvTransposeProgramInfo(t,e,B,n)}},convTranspose2DUnpacked=(t,e,n)=>t.run(createUnpackedConvTransposeProgramInfoLoader(t,e,n),e),getAdjustedConvTransposeAttributes=(t,e)=>{const n=t.kernelShape.slice();if(0===t.kernelShape.length)for(let t=2;t<e[1].dims.length;++t)n.push(e[1].dims[t]);const B=t.pads.slice(),s=t.outputShape.slice(),F=e[0].dims;calculateOutputShapeAndPads(F,n,t.dilations,t.autoPad,B,t.strides,t.outputPadding,s);const Q=Object.assign({},t);return Object.assign(Q,{kernelShape:n,pads:B,outputShape:s,cacheKey:t.cacheKey}),Q},parseConvTransposeAttributes=t=>{const e=t.attributes,n=parseInternalActivationAttributes(e),B=e.getString("auto_pad","NOTSET"),s=e.getInts("dilations",[1,1]),F=e.getInt("group",1),Q=e.getInts("kernel_shape",[]),U=e.getInts("output_padding",[0,0]),i=e.getInts("output_shape",[]),a=e.getInts("pads",[0,0,0,0]),l=e.getInts("strides",[1,1]);return createAttributeWithCacheKey({autoPad:B,dilations:s,group:F,kernelShape:Q,outputPadding:U,outputShape:i,pads:a,strides:l,...n})},validateInputs6=(t,e)=>{if(!t||2!==t.length&&3!==t.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==t[0].dims.length||4!==t[1].dims.length)throw new Error("currently only support 2-dimensional conv");if(t[0].dims[1]!==t[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");const n=t[1].dims[1]*e.group;if(3===t.length&&(1!==t[2].dims.length||t[2].dims[0]!==n))throw new Error("invalid bias");const B=t[0].dims.length-2;if(e.dilations.length!==B)throw new Error(`dilations should be ${B}D`);if(e.strides.length!==B)throw new Error(`strides should be ${B}D`);if(e.pads.length!==2*B)throw new Error(`pads should be ${2*B}D`);if(e.outputPadding.length!==B)throw new Error(`output_padding should be ${B}D`);if(0!==e.kernelShape.length&&e.kernelShape.length!==t[1].dims.length-2)throw new Error("invalid kernel shape");if(0!==e.outputShape.length&&e.outputShape.length!==t[0].dims.length-2)throw new Error("invalid output shape");if("float32"!==t[0].type||"float32"!==t[1].type)throw new Error("ConvTranspose input(X,W) should be float tensor");if(3===t.length&&"float32"!==t[2].type)throw new Error("ConvTranspose input(bias) should be float tensor")}}}),transposeProgramMetadata,transpose,parseTransposeAttributes,createTransposeProgramInfo,getAdjustedPerm,getOutputShape,getPermFunctionBody,validateInputs7,init_transpose=__esm({"web/lib/onnxjs/backends/webgl/ops/transpose.ts"(){init_attribute_with_cache_key(),init_util(),init_types(),transposeProgramMetadata={name:"Transpose",inputNames:["A"],inputTypes:[0]},transpose=(t,e,n)=>{validateInputs7(e);return[t.run({...transposeProgramMetadata,cacheHint:n.cacheKey,get:()=>createTransposeProgramInfo(t,e[0],n.perm)},e)]},parseTransposeAttributes=t=>createAttributeWithCacheKey({perm:t.attributes.getInts("perm",[])}),createTransposeProgramInfo=(t,e,n)=>{const B=e.dims;n=getAdjustedPerm(B,n);const s=getOutputShape(B,n),F=B.length,Q=`\n      ${getPermFunctionBody("perm",n,F)}\n      float process(int indices[${F}]) {\n        int a[${F}];\n        perm(a, indices);\n        return _A(a);\n      }`;return{...transposeProgramMetadata,output:{dims:s,type:e.type,textureType:0},shaderSource:Q}},getAdjustedPerm=(t,e)=>(e&&e.length!==t.length&&(e=[...t.keys()].reverse()),e),getOutputShape=(t,e)=>(e=getAdjustedPerm(t,e),ShapeUtil.sortBasedOnPerm(t,e)),getPermFunctionBody=(t,e,n)=>{const B=[];B.push(`void ${t}(out int a[${n}], int src[${n}]) {`);for(let t=0;t<n;++t)B.push(`\ta[${e[t]}]=src[${t}];`);return B.push("\t}"),B.join("\n")},validateInputs7=t=>{if(!t||1!==t.length)throw new Error("Transpose requires 1 input.");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("input should be float tensor")}}}),depthToSpace,parseDepthToSpaceAttributes,validateInputs8,init_depth_to_space=__esm({"web/lib/onnxjs/backends/webgl/ops/depth-to-space.ts"(){init_transpose(),depthToSpace=(t,e,n)=>{validateInputs8(e);const B=n.blocksize,s=B*B,F="DCR"===n.mode?[0,3,4,1,5,2]:[0,1,4,2,5,3],Q="DCR"===n.mode?[e[0].dims[0],B,B,e[0].dims[1]/s,e[0].dims[2],e[0].dims[3]]:[e[0].dims[0],e[0].dims[1]/s,B,B,e[0].dims[2],e[0].dims[3]],U=t.reshapeUnpacked(e[0],Q),i={perm:F,cacheKey:`${F}`},[a]=transpose(t,[U],i),l=[e[0].dims[0],e[0].dims[1]/s,e[0].dims[2]*B,e[0].dims[3]*B];return[t.reshapeUnpacked(a,l)]},parseDepthToSpaceAttributes=t=>{const e=t.attributes.getInt("blocksize");if(e<1)throw new Error(`blocksize must be >= 1, but got : ${e} for DepthToSpace`);const n=t.attributes.getString("mode","DCR");if("DCR"!==n&&"CRD"!==n)throw new Error(`unrecognized mode: ${n} for DepthToSpace`);return{mode:n,blocksize:e}},validateInputs8=t=>{if(1!==t.length)throw new Error(`DepthToSpace expect 1 inputs, but got ${t.length}`);if("string"===t[0].type||4!==t[0].dims.length)throw new TypeError("DepthToSpace input should be a 4-D numeric tensor")}}}),flatten,parseFlattenAttributes,validateInputs9,init_flatten=__esm({"web/lib/onnxjs/backends/webgl/ops/flatten.ts"(){init_util(),flatten=(t,e,n)=>{validateInputs9(e,n);const B=ShapeUtil.flattenShape(e[0].dims,n);return[t.reshapeUnpacked(e[0],B)]},parseFlattenAttributes=t=>t.attributes.getInt("axis",1),validateInputs9=(t,e)=>{if(!t||1!==t.length)throw new Error("Flatten requires 1 input.");const n=t[0].dims.length;if(0===n)throw new Error("scalar tensor is not supported.");if(e<-n||e>n)throw new Error("Invalid axis");if("string"===t[0].type)throw new Error("string tensor is not supported.")}}}),NUMBER_TYPES,init_operators=__esm({"web/lib/onnxjs/operators.ts"(){NUMBER_TYPES=["float32","float64","int32","int16","int8","uint16","uint32","uint8"]}}),gather,parseGatherAttributes,gatherProgramMetadata,createGatherProgramInfo,createGatherProgramInfoLoader,validateInputs10,init_gather=__esm({"web/lib/onnxjs/backends/webgl/ops/gather.ts"(){init_attribute_with_cache_key(),init_operators(),init_util(),init_types(),gather=(t,e,n)=>{validateInputs10(e,n.axis);return[t.run(createGatherProgramInfoLoader(t,e,n),e)]},parseGatherAttributes=t=>createAttributeWithCacheKey({axis:t.attributes.getInt("axis",0)}),gatherProgramMetadata={name:"Gather",inputNames:["A","B"],inputTypes:[0,0]},createGatherProgramInfo=(t,e,n,B)=>{const s=n[0].dims.slice(),F=n[1].dims.slice(),Q=new Array(s.length+F.length-1);B=ShapeUtil.normalizeAxis(B,s.length);const U=[];for(let t=0;t<Q.length;t++)t<B?(Q[t]=s[t],U.push(`inputIdx[${t}] = outputIdx[${t}];`)):t<B+F.length?(Q[t]=F[t-B],U.push(`indexDataIdx[${t-B}] = outputIdx[${t}];`)):(Q[t]=s[t-F.length+1],U.push(`inputIdx[${t-F.length+1}] = outputIdx[${t}];`));const i=`\n      float process(int outputIdx[${Q.length||1}]) {\n        int inputIdx[${s.length}];\n        int indexDataIdx[${F.length||1}];\n        indexDataIdx[0] = 0;\n        ${U.join("\n        ")}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${B}] = idx < 0 ? idx + ${s[B]} : idx;\n        return _A(inputIdx);\n      }`;return{...e,output:{dims:Q,type:n[0].type,textureType:0},shaderSource:i}},createGatherProgramInfoLoader=(t,e,n)=>{const B={...gatherProgramMetadata,cacheHint:n.cacheKey};return{...B,get:()=>createGatherProgramInfo(t,B,e,n.axis)}},validateInputs10=(t,e)=>{if(!t||2!==t.length)throw new Error("Gather requires 2 inputs.");const n=t[0].dims.length;if(n<1)throw new Error("Invalid input shape.");if(e<-n||e>n-1)throw new Error("Invalid axis.");if(-1===NUMBER_TYPES.indexOf(t[0].type))throw new Error("Invaid input type.");if("int32"!==t[1].type&&"int16"!==t[1].type)throw new Error("Invaid input type.")}}}),gemm,parseGemmAttributes,parseGemmAttributesV7,parseGemmAttributesV11,createGemmProgramInfoLoader,createGemmProgramInfo,validateInputs11,init_gemm=__esm({"web/lib/onnxjs/backends/webgl/ops/gemm.ts"(){init_attribute_with_cache_key(),init_util(),init_types(),gemm=(t,e,n)=>{validateInputs11(e,n);return[t.run(createGemmProgramInfoLoader(e,n),e)]},parseGemmAttributes=(t,e)=>{const n=0!==t.attributes.getInt("transA",0),B=0!==t.attributes.getInt("transB",0),s=t.attributes.getFloat("alpha",1),F=t.attributes.getFloat("beta",1);return createAttributeWithCacheKey({transA:n,transB:B,alpha:s,beta:F,isOptionalC:e})},parseGemmAttributesV7=t=>parseGemmAttributes(t,!1),parseGemmAttributesV11=t=>parseGemmAttributes(t,!0),createGemmProgramInfoLoader=(t,e)=>{const n={name:"Gemm",inputNames:3===t.length?["A","B","C"]:["A","B"],inputTypes:3===t.length?[0,0,0]:[0,0],key:e.cacheKey};return{...n,get:()=>createGemmProgramInfo(n,t,e)}},createGemmProgramInfo=(t,e,n)=>{const B=e[0].dims.slice(),s=e[1].dims.slice(),[F,Q]=GemmUtil.getShapeOfGemmResult(B,n.transA,s,n.transB,3===e.length?e[2].dims:void 0),U=[F,Q];if(!U)throw new Error("Can't use gemm on the given tensors");let i=B[B.length-1],a="";n.transA&&(i=B[0]),n.transA&&n.transB?a="value += _A_T(a) * _B_T(b);":n.transA&&!n.transB?a="value += _A_T(a) * _B(b);":!n.transA&&n.transB?a="value += _A(a) * _B_T(b);":n.transA||n.transB||(a="value += _A(a) * _B(b);");const l=U.length,c=`\n      float process(int indices[${l}]) {\n          int a[${l}];\n          int b[${l}];\n          ${3===e.length?`int c[${e[2].dims.length}];`:""}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${3===e.length?"bcastIndices_C(indices, c);":""}\n\n          float value = 0.0;\n          for (int k=0; k<${i}; ++k) {\n              a[${l-1}] = k;\n              b[${l-2}] = k;\n              ${a}\n          }\n\n          value = value * alpha;\n          ${3===e.length?"value += beta * _C(c);":""}\n          return value;\n      }`;return{...t,output:{dims:U,type:e[0].type,textureType:0},variables:[{name:"alpha",type:"float",data:n.alpha},{name:"beta",type:"float",data:n.beta}],shaderSource:c}},validateInputs11=(t,e)=>{if(!t)throw new Error("Input is missing");if(e.isOptionalC&&(t.length<2||t.length>3))throw new Error("Invaid input shape.");if(!e.isOptionalC&&3!==t.length)throw new Error("Gemm requires 3 inputs");if(3===t.length&&1!==t[2].dims.length&&2!==t[2].dims.length)throw new Error("Invalid input shape of C");if("float32"!==t[0].type&&"float64"!==t[0].type||"float32"!==t[1].type&&"float64"!==t[1].type||3===t.length&&"float32"!==t[2].type&&"float64"!==t[2].type)throw new Error("Invalid input type.");if(t[0].type!==t[1].type||3===t.length&&t[0].type!==t[2].type)throw new Error("Input types are mismatched")}}}),imageScaler,parseImageScalerAttributes,imageScalerProgramMetadata,createImageScalerProgramInfo,createImageScalerProgramInfoLoader,createGetBiasMethod,validateInputs12,init_image_scaler=__esm({"web/lib/onnxjs/backends/webgl/ops/image-scaler.ts"(){init_attribute_with_cache_key(),init_types(),imageScaler=(t,e,n)=>{validateInputs12(e);return[t.run(createImageScalerProgramInfoLoader(t,e,n),e)]},parseImageScalerAttributes=t=>{const e=t.attributes.getFloat("scale"),n=t.attributes.getFloats("bias");return createAttributeWithCacheKey({scale:e,bias:n})},imageScalerProgramMetadata={name:"ImageScaler",inputNames:["X"],inputTypes:[0]},createImageScalerProgramInfo=(t,e,n,B)=>{const s=n[0].dims.slice(),F=s.length,Q=`\n      ${createGetBiasMethod(B.bias.length)}\n      float process(int indices[${F}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;return{...e,output:{dims:s,type:n[0].type,textureType:0},variables:[{name:"bias",type:"float",arrayLength:B.bias.length,data:B.bias},{name:"scale",type:"float",data:B.scale}],shaderSource:Q}},createImageScalerProgramInfoLoader=(t,e,n)=>{const B={...imageScalerProgramMetadata,cacheHint:n.cacheKey};return{...B,get:()=>createImageScalerProgramInfo(t,B,e,n)}},createGetBiasMethod=t=>{const e=[`float getBias(float bias[${t}], int channel) {`];for(let n=0;n<t;++n)0===n?e.push(`\tif (channel == ${n}) { return bias[${n}]; }`):n===t-1?e.push(`\telse { return bias[${n}]; }`):e.push(`\telse if (channel == ${n}) { return bias[${n}]; }`);return e.push("\t}"),e.join("\n")},validateInputs12=t=>{if(!t||1!==t.length)throw new Error("ImageScaler requires 1 input.");if(4!==t[0].dims.length)throw new Error("Invalid input shape.");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type.")}}}),instanceNormalization,parseInstanceNormalizationAttributes,meanAndVarianceProgramMetadata,createMeanAndVarianceProgramInfo,createMeanAndVarianceProgramInfoLoader,computeOutputProgramMetadata,createComputeOutputProgramInfo,createComputeOutputProgramInfoLoader,validateInputs13,init_instance_normalization=__esm({"web/lib/onnxjs/backends/webgl/ops/instance-normalization.ts"(){init_glsl_source(),init_types(),instanceNormalization=(t,e,n)=>{validateInputs13(e);const B=t.run(createMeanAndVarianceProgramInfoLoader(e[0]),e);return[t.run(createComputeOutputProgramInfoLoader(t,e[0],n,B.dims),[e[0],B,e[1],e[2]])]},parseInstanceNormalizationAttributes=t=>t.attributes.getFloat("epsilon",1e-5),meanAndVarianceProgramMetadata={name:"InstanceNormalization_MeanAndVariance",inputNames:["X"],inputTypes:[0]},createMeanAndVarianceProgramInfo=(t,e)=>{const n=e.dims.slice(),B=n[1],s=n[2]*n[3],F=[n[0],B],Q=`\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${n[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${n[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${s});\n        temp = 0.0;\n        for(int a2=0; a2<${n[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${n[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${s});\n\n        return v;\n      }`;return{...t,output:{dims:F,type:e.type,textureType:4},shaderSource:Q}},createMeanAndVarianceProgramInfoLoader=t=>({...meanAndVarianceProgramMetadata,get:()=>createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata,t)}),computeOutputProgramMetadata={name:"InstanceNormalization_ComputeOutput",inputNames:["X","MeanAndVariance","Scale","B"],inputTypes:[0,4,0,0]},createComputeOutputProgramInfo=(t,e,n,B,s)=>{const F=getGlsl(t.session.backend.glContext.version),[Q,U]=t.calculateTextureWidthAndHeight(s,4),[i,a]=[Q/4,U],l=`\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${i}, ${a});\n        return ${F.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;return{...e,output:{dims:n.dims,type:n.type,textureType:0},variables:[{name:"epsilon",type:"float",data:B}],shaderSource:l}},createComputeOutputProgramInfoLoader=(t,e,n,B)=>{const s={...computeOutputProgramMetadata,cacheHint:`${n}`};return{...s,get:()=>createComputeOutputProgramInfo(t,s,e,n,B)}},validateInputs13=t=>{if(!t||3!==t.length)throw new Error("InstanceNormalization requires 3 inputs.");const e=t[0],n=t[1],B=t[2];if(e.dims.length<3||1!==n.dims.length||1!==B.dims.length)throw new Error("Invalid input shape.");if(n.dims[0]!==e.dims[1]||B.dims[0]!==e.dims[1])throw new Error("Input shapes are mismatched.");if("float32"!==e.type&&"float64"!==e.type||"float32"!==n.type&&"float64"!==n.type||"float32"!==B.type&&"float64"!==B.type)throw new Error("Invalid input type.");if(4!==t[0].dims.length)throw new Error("Only support 4-D input shape.")}}}),lrn,parseLrnAttributes,lrnProgramMetadata,validateInputs14;function createLrnProgramInfo(t,e){const n=t[0].dims[1],B=t[0].dims.length,s=-Math.floor((e.size-1)/2),F=Math.ceil((e.size-1)/2),Q=`float(${e.alpha}) / float(${e.size})`,U=`\n    float process(int indices[${B}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${s}; i <= ${F}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${n}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${`float(${e.bias})`} + ${Q} * square_sum, ${`float(${e.beta})`});\n    }`;return{...lrnProgramMetadata,cacheHint:e.cacheKey,output:{dims:t[0].dims,type:t[0].type,textureType:0},shaderSource:U}}function createLrnProgramInfoLoader(t,e){return{...lrnProgramMetadata,cacheHint:e.cacheKey,get:()=>createLrnProgramInfo(t,e)}}var init_lrn=__esm({"web/lib/onnxjs/backends/webgl/ops/lrn.ts"(){init_attribute_with_cache_key(),init_types(),lrn=(t,e,n)=>(validateInputs14(e),[t.run(createLrnProgramInfoLoader(e,n),e)]),parseLrnAttributes=t=>{const e=t.attributes.getFloat("alpha",1e-4),n=t.attributes.getFloat("beta",.75),B=t.attributes.getFloat("bias",1),s=t.attributes.getInt("size");return createAttributeWithCacheKey({alpha:e,beta:n,bias:B,size:s})},lrnProgramMetadata={name:"LRN",inputNames:["X"],inputTypes:[0]},validateInputs14=t=>{if(!t||1!==t.length)throw new Error("LRN requires 1 input.");if(4!==t[0].dims.length)throw new Error('currently only support LRN for input with "NCHW" format');if("float32"!==t[0].type)throw new Error("input should be float type")}}}),padProgramMetadata,padV2,parsePadAttributesV2,padV11,parsePadAttributesV11,generatePadAttributesFromInputs,createPadProgramInfo,validateInputsV2,validateInputsV11,getPadFunction,getPadConstant,getPadReflect,getPadEdge,init_pad=__esm({"web/lib/onnxjs/backends/webgl/ops/pad.ts"(){init_attribute_with_cache_key(),init_util(),init_glsl_source(),init_types(),padProgramMetadata={name:"Pad",inputNames:["A"],inputTypes:[0]},padV2=(t,e,n)=>{validateInputsV2(e);return[t.run({...padProgramMetadata,cacheHint:n.cacheKey,get:()=>createPadProgramInfo(t,e[0],n)},e)]},parsePadAttributesV2=t=>{const e=t.attributes.getString("mode","constant"),n=t.attributes.getFloat("value",0),B=t.attributes.getInts("pads");return createAttributeWithCacheKey({mode:e,value:n,pads:B})},padV11=(t,e,n)=>{validateInputsV11(e);const B=generatePadAttributesFromInputs(t,e,n);return padV2(t,[e[0]],B)},parsePadAttributesV11=t=>t.attributes.getString("mode","constant"),generatePadAttributesFromInputs=(t,e,n)=>{if(!t.session.isInitializer(e[1].dataId)||e.length>=3&&!t.session.isInitializer(e[2].dataId))throw new Error("dynamic pad attributes are not allowed");const B=Array.from(e[1].integerData),s=e.length>=3?e[2].floatData[0]:0;return createAttributeWithCacheKey({mode:n,pads:B,value:s})},createPadProgramInfo=(t,e,n)=>{const B=ShapeUtil.padShape(e.dims.slice(),n.pads),s=B.length,F=`\n      ${getPadFunction(t,e,n)}\n      float process(int[${s}] indices) {\n          return padA(indices);\n      }`;return{name:"Pad",inputNames:["A"],inputTypes:[0],output:{dims:B,type:e.type,textureType:0},shaderSource:F}},validateInputsV2=t=>{if(!t||1!==t.length)throw new Error("Pad requires 1 input");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type.")},validateInputsV11=t=>{if(!t||2!==t.length&&3!==t.length)throw new Error("Pad requires 2 or 3 inputs");if("int32"!==t[1].type)throw new Error("Invalid input type.");if(t.length>=3&&"string"===t[2].type)throw new Error("Invalid input type.")},getPadFunction=(t,e,n)=>{const B=getGlsl(t.session.backend.glContext.version),[s,F]=t.calculateTextureWidthAndHeight(e.dims,0),Q=ShapeUtil.computeStrides(e.dims);switch(n.mode){case"constant":return getPadConstant(B,e.dims,Q,s,F,n.pads,n.value);case"reflect":return getPadReflect(B,e.dims,Q,s,F,n.pads);case"edge":return getPadEdge(B,e.dims,Q,s,F,n.pads);default:throw new Error("Invalid mode")}},getPadConstant=(t,e,n,B,s,F,Q)=>{const U=e.length;let i="";for(let t=U-1;t>=0;--t)i+=`\n        k = m[${t}] - ${F[t]};\n        if (k < 0)  return constant;\n        if (k >= ${e[t]}) return constant;\n        offset += k * ${n[t]};\n        `;return`\n      float padA(int m[${U}]) {\n        const float constant = float(${Q});\n        int offset = 0;\n        int k = 0;\n        ${i}\n        vec2 coords = offsetToCoords(offset, ${B}, ${s});\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\n        return value;\n      }\n      `},getPadReflect=(t,e,n,B,s,F)=>{const Q=e.length;let U="";for(let t=Q-1;t>=0;--t)U+=`\n        k = m[${t}] - ${F[t]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2*(e[t]-1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${e[t]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${n[t]};\n        `;return`\n      float padA(int m[${Q}]) {\n        int offset = 0;\n        int k = 0;\n        ${U}\n        vec2 coords = offsetToCoords(offset, ${B}, ${s});\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\n        return value;\n      }\n      `},getPadEdge=(t,e,n,B,s,F)=>{const Q=e.length;let U="";for(let t=Q-1;t>=0;--t)U+=`\n        k = m[${t}] - ${F[t]};\n        if (k < 0)  k = 0;\n        if (k >= ${e[t]}) k = ${e[t]-1};\n        offset += k * ${n[t]};\n      `;return`\n      float padA(int m[${Q}]) {\n        int offset = 0;\n        int k = 0;\n        ${U}\n        vec2 coords = offsetToCoords(offset, ${B}, ${s});\n        float value = getColorAsFloat(${t.texture2D}(A, coords));\n        return value;\n      }\n      `}}}),averagePool,parseAveragePoolAttributes,createAveragePoolProgramInfo,globalAveragePool,parseGlobalAveragePoolAttributes,maxPool,parseMaxPoolAttributes,createMaxPoolProgramInfo,getAdjustedPoolAttributesAndOutputShape,globalMaxPoolAttributes,globalMaxPoolMetadata,globalMaxPool,validateInputs15,generatePoolingCode,copyArray,offsetToIndices,init_pool=__esm({"web/lib/onnxjs/backends/webgl/ops/pool.ts"(){init_attribute_with_cache_key(),init_util(),init_types(),averagePool=(t,e,n)=>{validateInputs15(e);const B={name:"AveragePool",inputNames:["X"],inputTypes:[0],cacheHint:n.cacheKey};return[t.run({...B,get:()=>createAveragePoolProgramInfo(e,B,!1,n)},e)]},parseAveragePoolAttributes=t=>{const e=t.attributes.getString("auto_pad","NOTSET"),n=t.attributes.getInt("ceil_mode",0),B=0!==t.attributes.getInt("count_include_pad",0),s=t.attributes.getInts("kernel_shape"),F=t.attributes.getInts("strides",[]),Q=t.attributes.getInts("pads",[]);if(0!==n)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return createAttributeWithCacheKey({autoPad:e,ceilMode:n,countIncludePad:B,kernelShape:s,strides:F,pads:Q})},createAveragePoolProgramInfo=(t,e,n,B)=>{const[s,F]=getAdjustedPoolAttributesAndOutputShape(t,B,n),Q=ShapeUtil.size(s.kernelShape);let U="";s.countIncludePad?U+=`value /= float(${Q});`:U+=`value /= float(${Q} - pad);`;const i=`\n        ${generatePoolingCode(t[0].dims,s,"value += _X(x);",U,"0.0")}\n      `;return{...e,output:{dims:F,type:t[0].type,textureType:0},shaderSource:i}},globalAveragePool=(t,e,n)=>{validateInputs15(e);const B={name:"GlobalAveragePool",inputNames:["X"],inputTypes:[0],cacheHint:`${n.countIncludePad}`};return[t.run({...B,get:()=>createAveragePoolProgramInfo(e,B,!0,n)},e)]},parseGlobalAveragePoolAttributes=t=>{const e=0!==t.attributes.getInt("count_include_pad",0);return createAttributeWithCacheKey({autoPad:"",ceilMode:0,countIncludePad:e,kernelShape:[],strides:[],pads:[]})},maxPool=(t,e,n)=>{validateInputs15(e);const B={name:"MaxPool",inputNames:["X"],inputTypes:[0],cacheHint:n.cacheKey};return[t.run({...B,get:()=>createMaxPoolProgramInfo(e,B,!1,n)},e)]},parseMaxPoolAttributes=t=>{const e=t.attributes.getString("auto_pad","NOTSET"),n=t.attributes.getInt("ceil_mode",0),B=t.attributes.getInts("kernel_shape"),s=t.attributes.getInts("strides",[]),F=t.attributes.getInts("pads",[]),Q=t.attributes.getInt("storage_order",0),U=t.attributes.getInts("dilations",[]);if(0!==Q)throw new Error("column major storage order is not yet supported for MaxPool");if(0!==n)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return createAttributeWithCacheKey({autoPad:e,ceilMode:n,countIncludePad:!1,kernelShape:B,strides:s,pads:F,storageOrder:Q,dilations:U})},createMaxPoolProgramInfo=(t,e,n,B)=>{const[s,F]=getAdjustedPoolAttributesAndOutputShape(t,B,n),Q=`\n      ${generatePoolingCode(t[0].dims,s,"\n      value = max(_X(x), value);\n    ","","-1e5")}\n    `;return{...e,output:{dims:F,type:t[0].type,textureType:0},shaderSource:Q}},getAdjustedPoolAttributesAndOutputShape=(t,e,n)=>{const B=t[0].dims.slice(),s=Object.hasOwnProperty.call(e,"dilations"),F=e.kernelShape.slice(),Q=e.strides.slice(),U=s?e.dilations.slice():[],i=e.pads.slice();PoolConvUtil.adjustPoolAttributes(n,B,F,Q,U,i);const a=PoolConvUtil.computePoolOutputShape(n,B,Q,U,F,i,e.autoPad),l=Object.assign({},e);return s?Object.assign(l,{kernelShape:F,strides:Q,pads:i,dilations:U,cacheKey:e.cacheKey}):Object.assign(l,{kernelShape:F,strides:Q,pads:i,cacheKey:e.cacheKey}),[l,a]},globalMaxPoolAttributes={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},globalMaxPoolMetadata={name:"GlobalMaxPool",inputNames:["X"],inputTypes:[0]},globalMaxPool=(t,e)=>{validateInputs15(e);return[t.run({...globalMaxPoolMetadata,get:()=>createMaxPoolProgramInfo(e,globalMaxPoolMetadata,!0,globalMaxPoolAttributes)},e)]},validateInputs15=t=>{if(!t||1!==t.length)throw new Error("Pool ops requires 1 input.");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type.")},generatePoolingCode=(t,e,n,B,s)=>{const F=t.length;if(e.kernelShape.length<=2){const Q=e.kernelShape[e.kernelShape.length-1],U=e.strides[e.strides.length-1],i=e.pads[e.pads.length/2-1],a=e.pads[e.pads.length-1],l=t[F-1];let c="",g="",d="";if(c=i+a!==0?`\n          for (int i = 0; i < ${Q}; i++) {\n            x[${F} - 1] = indices[${F} - 1] * ${U} - ${i} + i;\n            if (x[${F} - 1] < 0 || x[${F} - 1] >= ${l}) {\n              pad++;\n              continue;\n            }\n            ${n}\n          }`:`\n          for (int i = 0; i < ${Q}; i++) {\n            x[${F} - 1] = indices[${F} - 1] * ${U} - ${i} + i;\n            ${n}\n          }`,2===e.kernelShape.length){const n=e.kernelShape[e.kernelShape.length-2],B=e.strides[e.strides.length-2],s=e.pads[e.pads.length/2-2],U=e.pads[e.pads.length-2],i=t[F-2];g=s+U!==0?`\n            for (int j = 0; j < ${n}; j++) {\n              x[${F} - 2] = indices[${F} - 2] * ${B} - ${s} + j;\n              if (x[${F} - 2] < 0 || x[${F} - 2] >= ${i}) {\n                pad+= ${Q};\n                continue;\n              }\n          `:`\n            for (int j = 0; j < ${n}; j++) {\n              x[${F} - 2] = indices[${F} - 2] * ${B} - ${s} + j;\n            `,d="\n          }\n        "}return`\n        float process(int indices[${F}]) {\n          int x[${F}];\n          copyVec(indices, x);\n\n          float value = ${s};\n          int pad = 0;\n          ${g}\n          ${c}\n          ${d}\n          ${B}\n          return value;\n        }\n      `}{const Q=ShapeUtil.size(e.kernelShape),U=ShapeUtil.computeStrides(e.kernelShape),i=U.length,a=e.pads.length,l=offsetToIndices(i),c=copyArray(t,"inputDims"),g=copyArray(e.pads,"pads"),d=copyArray(U,"kernelStrides"),I=copyArray(e.strides,"strides");let o="";o=e.pads.reduce(((t,e)=>t+e))?`\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${n}\n          }`:`\n          }\n          ${n}\n        `;return`\n        ${l}\n        float process(int indices[${F}]) {\n          int x[${F}];\n          copyVec(indices, x);\n          int offset[${i}];\n          int pads[${a}];\n          int inputDims[${F}];\n          int kernelStrides[${i}];\n          int strides[${i}];\n          ${g}\n          ${c}\n          ${I}\n          ${d}\n\n          float value = ${s};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${Q}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${F} - ${i}; j < ${F}; j++) {\n              x[j] = indices[j] * strides[j - ${F} + ${i}]\n                + offset[j - ${F} + ${i}] - pads[j - 2];\n              ${o}\n          }\n          ${B}\n\n          return value;\n        }\n      `}},copyArray=(t,e)=>{let n="";for(let B=0;B<t.length;B++)n+=`\n      ${e}[${B}] = ${t[B]};\n    `;return n},offsetToIndices=t=>`\n  void offsetToIndices(int offset, int[${t}] strides, out int[${t}] indices) {\n    if (${t} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${t} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${t} - 1] = offset;\n  }`}}),reduce,parseReduceAttributes,createReduceProgramInfo,validateInputs16,reduceSum,reduceMean,reduceMax,reduceMin,reduceProd,reduceLogSum,reduceLogSumSquare,init_reduce=__esm({"web/lib/onnxjs/backends/webgl/ops/reduce.ts"(){init_attribute_with_cache_key(),init_operators(),init_util(),init_types(),reduce=(t,e,n,B,s)=>{validateInputs16(e);const F={name:B,inputNames:["A"],inputTypes:[0]};return[t.run({...F,cacheHint:n.cacheKey,get:()=>createReduceProgramInfo(t,e,n,B,s,F)},e)]},parseReduceAttributes=t=>{const e=t.attributes.getInts("axes",[]),n=1===t.attributes.getInt("keepdims",1);return createAttributeWithCacheKey({axes:e,keepDims:n})},createReduceProgramInfo=(t,e,n,B,s,F)=>{const Q=[],U=e[0].dims.length||1,i=[],a=ShapeUtil.normalizeAxes(n.axes,e[0].dims.length),l=s(e,a);let c=l[1];for(let t=0;t<e[0].dims.length;t++)a.indexOf(t)>=0||0===a.length?(n.keepDims&&Q.push(1),c=`\n          for(int j${t} = 0; j${t} < ${e[0].dims[t]}; j${t}++) {\n            inputIdx[${t}] = j${t};\n            ${c}\n          }`):(i.push(`inputIdx[${t}] = outputIdx[${Q.length}];`),Q.push(e[0].dims[t]));const g=`\n      float process(int outputIdx[${Q.length||1}]) {\n        float value;                 // final result\n        int inputIdx[${U}];      // addressing input data\n        ${i.join("\n")}\n        ${l[0]}       // init ops for reduce max/min\n        ${c}\n        ${l[2]}       // final computation for reduce mean\n        return value;\n      }`;return{...F,output:{dims:Q,type:e[0].type,textureType:0},shaderSource:g}},validateInputs16=t=>{if(!t||1!==t.length)throw new Error("Reduce op requires 1 input.");if(-1===NUMBER_TYPES.indexOf(t[0].type))throw new Error("Invalid input type.")},reduceSum=(t,e,n)=>reduce(t,e,n,"ReduceSum",(()=>["value = 0.0;","value += _A(inputIdx);",""])),reduceMean=(t,e,n)=>reduce(t,e,n,"ReduceMean",((t,e)=>{let n=1;for(let B=0;B<t[0].dims.length;B++)(e.indexOf(B)>=0||0===e.length)&&(n*=t[0].dims[B]);return["value = 0.0;","value += _A(inputIdx);",`value /= ${n}.;`]})),reduceMax=(t,e,n)=>reduce(t,e,n,"ReduceMax",((t,e)=>{const n=[];for(let B=0;B<t[0].dims.length;B++)(e.indexOf(B)>=0||0===e.length)&&n.push(`inputIdx[${B}] = 0;`);return[`${n.join("\n")}\nvalue = _A(inputIdx);`,"value = max(value, _A(inputIdx));",""]})),reduceMin=(t,e,n)=>reduce(t,e,n,"ReduceMin",((t,e)=>{const n=[];for(let B=0;B<t[0].dims.length;B++)(e.indexOf(B)>=0||0===e.length)&&n.push(`inputIdx[${B}] = 0;`);return[`${n.join("\n")}\nvalue = _A(inputIdx);`,"value = min(value, _A(inputIdx));",""]})),reduceProd=(t,e,n)=>reduce(t,e,n,"ReduceProd",(()=>["value = 1.0;","value *= _A(inputIdx);",""])),reduceLogSum=(t,e,n)=>reduce(t,e,n,"ReduceLogSum",(()=>["value = 0.0;","value += _A(inputIdx);","value = log(value);"])),reduceLogSumSquare=(t,e,n)=>reduce(t,e,n,"ReduceLogSumSquare",(()=>["float t; value = 0.0;","t = _A(inputIdx); value += t * t;",""]))}}),reshape,init_reshape=__esm({"web/lib/onnxjs/backends/webgl/ops/reshape.ts"(){init_util(),reshape=(t,e)=>{const n=ShapeUtil.calculateReshapedDims(e[0].dims,e[1].integerData);return t.session.pack?[t.reshapePacked(e[0],n)]:[t.reshapeUnpacked(e[0],n)]}}}),upsampleProgramMetadata,upsample,parseUpsampleAttributesV7,parseUpsampleAttributesV9,parseUpsampleAttributes,createUpsampleProgramInfo,validateInputs17,scalesValidation,init_upsample=__esm({"web/lib/onnxjs/backends/webgl/ops/upsample.ts"(){init_attribute_with_cache_key(),init_glsl_source(),init_types(),upsampleProgramMetadata={name:"Upsample",inputNames:["X"],inputTypes:[0]},upsample=(t,e,n)=>{validateInputs17(e,n);return[t.run({...upsampleProgramMetadata,cacheHint:n.cacheKey,get:()=>createUpsampleProgramInfo(t,e,n)},e)]},parseUpsampleAttributesV7=t=>parseUpsampleAttributes(t,7),parseUpsampleAttributesV9=t=>parseUpsampleAttributes(t,9),parseUpsampleAttributes=(t,e)=>{const n=e>=10,B=t.attributes.getString("mode","nearest");if("nearest"!==B&&"linear"!==B&&(e<11||"cubic"!==B))throw new Error(`unrecognized mode: ${B}`);let s=[];e<9&&(s=t.attributes.getFloats("scales"),scalesValidation(s,B,n));const F=t.attributes.getFloat("extrapolation_value",0),Q=e>10?t.attributes.getString("coordinate_transformation_mode","half_pixel"):"asymmetric";if(-1===["asymmetric","pytorch_half_pixel","tf_half_pixel_for_nn","align_corners","tf_crop_and_resize","half_pixel"].indexOf(Q))throw new Error(`coordinate_transform_mode '${Q}' is not supported`);const U="tf_crop_and_resize"===Q,i=U,a="nearest"===B&&e>=11?t.attributes.getString("nearest_mode","round_prefer_floor"):"";if(-1===["round_prefer_floor","round_prefer_ceil","floor","ceil",""].indexOf(a))throw new Error(`nearest_mode '${a}' is not supported`);const l=t.attributes.getFloat("cubic_coeff_a",-.75),c=0!==t.attributes.getInt("exclude_outside",0);if(c&&"cubic"!==B)throw new Error("exclude_outside can be set to 1 only when mode is CUBIC.");const g=e<11||"nearest"===B&&"asymmetric"===Q&&"floor"===a;let d=0,I=0,o=0;return e>10?t.inputs.length>2?(d=1,I=2,o=3):(I=1,o=2):9===e&&(I=1),createAttributeWithCacheKey({opset:e,isResize:n,mode:B,scales:s,extrapolationValue:F,coordinateTransformMode:Q,useExtrapolation:i,needRoiInput:U,nearestMode:a,cubicCoefficientA:l,excludeOutside:c,useNearest2xOptimization:g,roiInputIdx:d,scalesInputIdx:I,sizesInputIdx:o})},createUpsampleProgramInfo=(t,e,n)=>{const B=getGlsl(t.session.backend.glContext.version),[s,F]=t.calculateTextureWidthAndHeight(e[0].dims,0),Q=e[0].dims.map(((t,e)=>Math.floor(t*n.scales[e]))),[U,i]=t.calculateTextureWidthAndHeight(Q,0),a=Q.length,l=new Array(a),c=new Array(a);let g=`\n      int output_pitches[${a}];\n      int input_pitches[${a}];\n      `;for(let t=a-1;t>=0;t--)l[t]=t===a-1?1:l[t+1]*Q[t+1],c[t]=t===a-1?1:c[t+1]*e[0].dims[t+1],g+=`\n        output_pitches[${t}] = ${l[t]};\n        input_pitches[${t}] = ${c[t]};\n        `;const d=`\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${s}, ${F});\n        float value = getColorAsFloat(${B.texture2D}(X, coords));\n        return value;\n      }\n      `,I="nearest"===n.mode?`\n    ${d}\n    float process(int indices[${a}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${U}, ${i});\n\n      ${g}\n\n      int d, m;\n      for (int dim = 0; dim < ${a}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }`:4===a?`\n    ${d}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${U}, ${i});\n\n      ${g}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${e[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }`:`\n    ${d}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${U}, ${i});\n\n      ${g}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${e[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;return{...upsampleProgramMetadata,output:{dims:Q,type:e[0].type,textureType:0},shaderSource:I,variables:[{name:"scales",type:"int",arrayLength:n.scales.length,data:n.scales.map((t=>Math.ceil(t)))}]}},validateInputs17=(t,e)=>{if(!t||e.opset<9&&1!==t.length||e.opset>=9&&e.opset<11&&2!==t.length||e.opset>=11&&t.length<2)throw new Error("invalid inputs.");if(e.scales.length>0&&t[0].dims.length!==e.scales.length)throw new Error("Invalid input shape.");if("string"===t[0].type)throw new Error("Invalid input tensor types.")},scalesValidation=(t,e,n)=>{if(n){for(const e of t)if(e<=0)throw new Error("Scale value should be greater than 0.")}else for(const e of t)if(e<1)throw new Error("Scale value should be greater than or equal to 1.");if(!("linear"!==e&&"cubic"!==e||2===t.length||4===t.length&&1===t[0]&&1===t[1]))throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${n?"Resize":"Upsample"} opeartor.`)}}}),resizeProgramMetadata,resize,parseResizeAttributesV10,parseResizeAttributesV11,createPackedResizeProgramInfo,prepareInputs,parseScalesData,parseScalesDataFromOutputSize,init_resize_packed=__esm({"web/lib/onnxjs/backends/webgl/ops/resize-packed.ts"(){init_glsl_source(),init_types(),init_utils(),init_packing_utils(),init_upsample(),resizeProgramMetadata={name:"Resize",inputNames:["A"],inputTypes:[2]},resize=(t,e,n)=>{validateInputs17(e,n);return[t.run({...resizeProgramMetadata,cacheHint:n.cacheKey,get:()=>createPackedResizeProgramInfo(t,e,n)},e)]},parseResizeAttributesV10=t=>parseUpsampleAttributes(t,10),parseResizeAttributesV11=t=>parseUpsampleAttributes(t,11),createPackedResizeProgramInfo=(t,e,n)=>{const B=getGlsl(t.session.backend.glContext.version),[s,F]=prepareInputs(e,n);if(s.every((t=>1===t))&&"tf_crop_and_resize"!==n.coordinateTransformMode)return{...resizeProgramMetadata,output:{dims:F,type:e[0].type,textureType:2},hasMain:!0,shaderSource:`void main() {\n                    vec4 v = ${B.texture2D}(X, TexCoords);\n                    ${B.output} = v;\n                }`};const Q=F.length;if(Q<2)throw new Error(`output dimension should be at least 2, but got ${Q}`);const U=F[Q-2],i=F[Q-1],a=e[0].dims;if(Q!==a.length)throw new Error(`output dimension should match input ${a.length}, but got ${Q}`);const l=a[Q-2],c=a[Q-1],g=s[Q-2],d=s[Q-1];let I="";if("linear"!==n.mode)throw new Error(`resize (packed) does not support mode: '${n.mode}'`);switch(n.coordinateTransformMode){case"asymmetric":I="\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                ";break;case"half_pixel":I="\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                ";break;case"pytorch_half_pixel":I=`\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${i}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${U}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${i}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${U}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;break;case"align_corners":I=`\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${i}.0 - 1.0, ${U}.0 - 1.0, ${i}.0 - 1.0,\n                            ${U}.0 - 1.0);\n                        vec4 original = vec4(${c}.0 - 1.0, ${l}.0 - 1.0, ${c}.0 - 1.0,\n                            ${l}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;break;default:throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${n.coordinateTransformMode}'`)}const o=getCoordsDataType(Q),r=`\n            const vec2 inputWH = vec2(${l}.0, ${c}.0);\n            const vec4 scaleWHWH = vec4(float(${g}), float(${d}), float(${g}), float(${d}));\n            ${unpackFromChannel()}\n            ${I}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${o} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${U-1};\n                bool hasNextCol = rc.z < ${i-1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${B.output} = vec4(newValue);\n            }\n        `;return{...resizeProgramMetadata,output:{dims:F,type:e[0].type,textureType:2},hasMain:!0,shaderSource:r}},prepareInputs=(t,e)=>{const n=t[0].dims;let B,s=e.scales;if(0===s.length){const F=t[e.scalesInputIdx];if(F&&0!==F.size){if(t[e.sizesInputIdx])throw new Error("Only one of scales or sizes must be provided as input.");s=parseScalesData(F,e.mode,e.isResize)}else{const F=t[e.sizesInputIdx];if(!F||0===F.size)throw new Error("Either scales or sizes MUST be provided as input.");B=Array.from(F.integerData),s=parseScalesDataFromOutputSize(B,n,e.mode,e.isResize)}}else if(t[e.sizesInputIdx])throw new Error("Only one of scales or sizes must be provided as input.");const F=B||n.map(((t,e)=>Math.floor(t*s[e])));return[s,F]},parseScalesData=(t,e,n)=>{const B=Array.from(t.floatData);return scalesValidation(B,e,n),B},parseScalesDataFromOutputSize=(t,e,n,B)=>{const s=e.length,F=new Array(s);for(let n=0,B=s;n<B;n++)if(0===e[n]){if(0!==t[n])throw new Error("Input dim is zero but required output dim is non-zero.");F[n]=1}else F[n]=t[n]/e[n];return scalesValidation(F,n,B),F}}}),shape,validateInputs18,init_shape=__esm({"web/lib/onnxjs/backends/webgl/ops/shape.ts"(){init_tensor2(),shape=(t,e)=>(validateInputs18(e),[new Tensor3([e[0].dims.length],"int32",void 0,void 0,new Int32Array(e[0].dims))]),validateInputs18=t=>{if(!t||1!==t.length)throw new Error("Shape requires 1 input.")}}}),sliceProgramMetadata,slice,parseSliceAttributes,createSliceProgramInfo,validateInputs19,sliceV10,generateSliceAttributesFromInputs,validateInputsV10,init_slice=__esm({"web/lib/onnxjs/backends/webgl/ops/slice.ts"(){init_attribute_with_cache_key(),init_operators(),init_util(),init_types(),sliceProgramMetadata={name:"Slice",inputNames:["A"],inputTypes:[0]},slice=(t,e,n)=>{validateInputs19(e);return[t.run({...sliceProgramMetadata,cacheHint:n.cacheKey,get:()=>createSliceProgramInfo(t,e[0],n)},e)]},parseSliceAttributes=t=>{const e=t.attributes.getInts("starts"),n=t.attributes.getInts("ends"),B=t.attributes.getInts("axes",[]);return createAttributeWithCacheKey({starts:e,ends:n,axes:B})},createSliceProgramInfo=(t,e,n)=>{const B=0===n.axes.length?e.dims.slice(0).map(((t,e)=>e)):n.axes,s=ShapeUtil.normalizeAxes(B,e.dims.length),F=n.starts.map(((t,n)=>t>e.dims[s[n]]-1?e.dims[s[n]]:ShapeUtil.normalizeAxis(t,e.dims[s[n]]))),Q=n.ends.map(((t,n)=>t>e.dims[s[n]]-1?e.dims[s[n]]:ShapeUtil.normalizeAxis(t,e.dims[s[n]]))),U=e.dims.slice(),i=[];for(let t=0;t<s.length;t++)U[s[t]]=Q[t]-F[t],F[t]>0&&i.push(`outputIdx[${s[t]}] += ${F[t]};`);const a=`\n      float process(int outputIdx[${U.length}]) {\n        ${i.join("\n      ")}\n        return _A(outputIdx);\n      }`;return{...sliceProgramMetadata,output:{dims:U,type:e.type,textureType:0},shaderSource:a}},validateInputs19=t=>{if(!t||1!==t.length)throw new Error("Slice requires 1 input.");if(-1===NUMBER_TYPES.indexOf(t[0].type))throw new Error("Invalid input type.")},sliceV10=(t,e)=>{validateInputsV10(e);const n=generateSliceAttributesFromInputs(t,e);return[t.run({...sliceProgramMetadata,cacheHint:n.cacheKey,get:()=>createSliceProgramInfo(t,e[0],n)},[e[0]])]},generateSliceAttributesFromInputs=(t,e)=>{if(!t.session.isInitializer(e[1].dataId)||!t.session.isInitializer(e[2].dataId)||e.length>=4&&!t.session.isInitializer(e[3].dataId)||e.length>=5&&!t.session.isInitializer(e[4].dataId))throw new Error("dynamic slice attributes are not allowed");if(e.length>=5&&e[4].integerData.some((t=>1!==t)))throw new Error("currently non-1 steps is not supported for Slice");const n=Array.from(e[1].integerData),B=Array.from(e[2].integerData),s=e.length>=4?Array.from(e[3].integerData):[];return{starts:n,ends:B,axes:s,cacheKey:`${s};${n};${B}`}},validateInputsV10=t=>{if(!t||t.length<3||t.length>5)throw new Error("Invalid input number.");if("int32"!==t[1].type||1!==t[1].dims.length)throw new Error("Invalid input type.");if("int32"!==t[2].type||1!==t[2].dims.length)throw new Error("Invalid input type.");if(t.length>=4&&("int32"!==t[3].type||1!==t[3].dims.length))throw new Error("Invalid input type.");if(t.length>=5&&("int32"!==t[4].type||1!==t[4].dims.length))throw new Error("Invalid input type.")}}}),softmaxComputeMaxProgramMetadata,softmaxComputeScaleProgramMetadata,softmaxProgramMetadata,softmax,parseSoftmaxAttributes,parseSoftmaxAttributesV13,softmaxV13,computeSoftmax,createComputeMaxProgramInfo,createComputScaleProgramInfo,createSoftMaxProgramInfo,validateInputs20,init_softmax=__esm({"web/lib/onnxjs/backends/webgl/ops/softmax.ts"(){init_attribute_with_cache_key(),init_util(),init_glsl_source(),init_types(),init_transpose(),softmaxComputeMaxProgramMetadata={name:"SoftmaxComputeMax",inputNames:["A"],inputTypes:[0]},softmaxComputeScaleProgramMetadata={name:"SoftmaxComputeScale",inputNames:["A","Max"],inputTypes:[0,0]},softmaxProgramMetadata={name:"SoftMax",inputNames:["A","Max","Norm"],inputTypes:[0,0,0]},softmax=(t,e,n)=>{validateInputs20(e);const B=e[0].dims.slice(),s=ShapeUtil.normalizeAxis(n.axis,B.length),F=ShapeUtil.sizeToDimension(B,s),Q=ShapeUtil.sizeFromDimension(B,s);return computeSoftmax(t,e,n,F,Q)},parseSoftmaxAttributes=t=>createAttributeWithCacheKey({axis:t.attributes.getInt("axis",1)}),parseSoftmaxAttributesV13=t=>createAttributeWithCacheKey({axis:t.attributes.getInt("axis",-1)}),softmaxV13=(t,e,n)=>{validateInputs20(e);const B=e[0].dims.slice(),s=ShapeUtil.normalizeAxis(n.axis,B.length),F=B.length,Q=s!==F-1,U=[];let i,a=[],l=[];Q&&(a=Array.from({length:F}).map(((t,e)=>e)),a[s]=F-1,a[F-1]=s,a.map((t=>U.push(B[t]))),i=createAttributeWithCacheKey({perm:a}),l=transpose(t,e,i));const c=Q?ShapeUtil.sizeToDimension(U,F-1):ShapeUtil.sizeToDimension(B,F-1),g=Q?ShapeUtil.sizeFromDimension(U,F-1):ShapeUtil.sizeFromDimension(B,F-1),d=computeSoftmax(t,Q?l:e,n,c,g);if(Q){return transpose(t,d,i)}return d},computeSoftmax=(t,e,n,B,s)=>{const F=createComputeMaxProgramInfo(t,e[0],B,s,[B]),Q=t.run({...softmaxComputeMaxProgramMetadata,cacheHint:n.cacheKey,get:()=>F},e),U=createComputScaleProgramInfo(t,e[0],B,s,F.output.dims,[B]),i=t.run({...softmaxComputeScaleProgramMetadata,cacheHint:n.cacheKey,get:()=>U},[e[0],Q]),a=createSoftMaxProgramInfo(t,e[0],B,s,F.output.dims,U.output.dims);return[t.run({...softmaxProgramMetadata,cacheHint:n.cacheKey,get:()=>a},[e[0],Q,i])]},createComputeMaxProgramInfo=(t,e,n,B,s)=>{const[F,Q]=t.calculateTextureWidthAndHeight(e.dims,0),U=s.length;if(n<1||B<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(1!==s.length)throw new Error("Dimensionality of the output should be 1");if(s[0]!==n)throw new Error("Shape of the output should be equal to logical row count");const i=getGlsl(t.session.backend.glContext.version),a=`\n      float process(int[${U}] indices) {\n        int logical_row_start_offset = indices[0] * ${B};\n\n        float max = getColorAsFloat(${i.texture2D}(A, offsetToCoords(logical_row_start_offset, ${F},\n        ${Q} )));\n        for(int i=1; i<${B}; ++i)\n        {\n          float current = getColorAsFloat(${i.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${F}, ${Q})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;return{...softmaxComputeMaxProgramMetadata,output:{dims:s,type:e.type,textureType:0},shaderSource:a}},createComputScaleProgramInfo=(t,e,n,B,s,F)=>{const[Q,U]=t.calculateTextureWidthAndHeight(e.dims,0),i=F.length;if(n<1||B<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(1!==F.length)throw new Error("Dimensionality of the output should be 1");if(F[0]!==n)throw new Error("Shape of the output should be equal to logical row count");if(1!==s.length)throw new Error("Dimensionality of the intermediate results should be 1");if(s[0]!==n)throw new Error("Shape of the intermediate results should be equal to logical row count");const a=`\n      float process(int[${i}] indices) {\n        int logical_row_start_offset = indices[0] * ${B};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${B}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${getGlsl(t.session.backend.glContext.version).texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${Q}, ${U}))) - max);\n        }\n\n        return norm_factor;\n      }`;return{...softmaxComputeScaleProgramMetadata,output:{dims:F,type:e.type,textureType:0},shaderSource:a}},createSoftMaxProgramInfo=(t,e,n,B,s,F)=>{const[Q,U]=t.calculateTextureWidthAndHeight(e.dims,0),i=e.dims.length;if(n<1||B<1)throw new Error("Logical row count N and feature count D must be greater than or equal to 1");if(1!==s.length||1!==F.length)throw new Error("Dimensionality of the intermediate results should be 1");if(s[0]!==n||F[0]!==n)throw new Error("Shape of the intermediate results should be equal to logical row count");const a=`\n      float process(int[${i}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${Q}, ${U});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${B};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;return{...softmaxProgramMetadata,output:{dims:e.dims,type:e.type,textureType:0},shaderSource:a}},validateInputs20=t=>{if(!t||1!==t.length)throw new Error("Softmax requires 1 input.");if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type")}}}),splitProgramMetadata,split,parseSplitAttributes,getProgramCount,createSplitProgramInfo,validateInputs21,init_split=__esm({"web/lib/onnxjs/backends/webgl/ops/split.ts"(){init_attribute_with_cache_key(),init_util(),init_types(),splitProgramMetadata={name:"Split",inputNames:["A"],inputTypes:[0]},split=(t,e,n)=>{validateInputs21(e);const B=ShapeUtil.normalizeAxis(n.axis,e[0].dims.length),s=getProgramCount(t,e,B,n),F=[];for(let Q=0;Q<s;++Q)F.push(t.run({...splitProgramMetadata,cacheHint:`${n.cacheKey};${Q}`,get:()=>createSplitProgramInfo(t,e[0],n,B,Q)},e));return F},parseSplitAttributes=t=>{const e=t.attributes.getInt("axis",0),n=t.attributes.getInts("split",[]),B=t.outputs.length;return createAttributeWithCacheKey({axis:e,split:n,numOutputs:B})},getProgramCount=(t,e,n,B)=>{const[,s]=SplitUtil.splitShape(e[0].dims,n,B.split,B.numOutputs);return s.length},createSplitProgramInfo=(t,e,n,B,s)=>{const[F,Q]=SplitUtil.splitShape(e.dims,B,n.split,n.numOutputs),U=Q[s],i=F[s],a=`\n      float process(int indices[${i.length}]) {\n        indices[${B}] += ${U};\n        return _A(indices);\n      }\n    `;return{...splitProgramMetadata,cacheHint:`${n.cacheKey}:${s}`,output:{dims:i,type:e.type,textureType:0},shaderSource:a}},validateInputs21=t=>{if(!t||1!==t.length)throw new Error("Split requires one input.");if("int8"!==t[0].type&&"uint8"!==t[0].type&&"int16"!==t[0].type&&"uint16"!==t[0].type&&"int32"!==t[0].type&&"uint32"!==t[0].type&&"float32"!==t[0].type&&"float64"!==t[0].type&&"bool"!==t[0].type)throw new Error("Invalid input type.")}}}),squeeze,squeezeV13,parseSqueezeAttributes,validateInputs22,validateInputsV13,init_squeeze=__esm({"web/lib/onnxjs/backends/webgl/ops/squeeze.ts"(){init_util(),squeeze=(t,e,n)=>{validateInputs22(e);const B=ShapeUtil.squeezeShape(e[0].dims,n);return[t.reshapeUnpacked(e[0],B)]},squeezeV13=(t,e)=>(validateInputsV13(e),squeeze(t,[e[0]],Array.from(e[1].integerData))),parseSqueezeAttributes=t=>t.attributes.getInts("axes"),validateInputs22=t=>{if(!t||1!==t.length)throw new Error("Squeeze requires 1 input.");if("string"===t[0].type)throw new Error("invalid input tensor types.")},validateInputsV13=t=>{if(!t||2!==t.length)throw new Error("Squeeze requires 2 inputs.");if("int32"!==t[1].type)throw new Error("Invalid input type.")}}}),sum,createSumProgramInfo,validateInputs23,init_sum=__esm({"web/lib/onnxjs/backends/webgl/ops/sum.ts"(){init_glsl_source(),init_types(),sum=(t,e)=>{validateInputs23(e);const n={name:"Sum",inputNames:e.map(((t,e)=>`X${e}`)),inputTypes:new Array(e.length).fill(0)};return[t.run({...n,get:()=>createSumProgramInfo(t,e,n)},e)]},createSumProgramInfo=(t,e,n)=>{const B=getGlsl(t.session.backend.glContext.version),s=e[0].dims.slice(),F=`\n      void main() {\n        vec4 result = ${e.map(((t,e)=>`${B.texture2D}(X${e},TexCoords)`)).join(" + ")};\n        ${B.output} = result;\n      }\n    `;return{...n,output:{dims:s,type:e[0].type,textureType:0},hasMain:!0,shaderSource:F}},validateInputs23=t=>{if(!t||0===t.length)throw new Error("Sum requires inputs.");const e=t[0].dims.length;for(let n=1;n<t.length;n++){if(e!==t[n].dims.length)throw new Error("Input shapes are mismatched.");for(let B=0;B<e;B++)if(t[0].dims[B]!==t[n].dims[B])throw new Error("Input shapes are not matched.")}if("float32"!==t[0].type&&"float64"!==t[0].type)throw new Error("Invalid input type.");for(let e=1;e<t.length;e++)if(t[0].type!==t[e].type)throw new Error("Input types are not matched.")}}}),tile,createTileProgramInfo,validateInputs24,init_tile=__esm({"web/lib/onnxjs/backends/webgl/ops/tile.ts"(){init_operators(),init_types(),tile=(t,e)=>{validateInputs24(e);const n={name:"Tile",inputNames:["A"],inputTypes:[0]};return[t.run({...n,get:()=>createTileProgramInfo(t,e,n)},e)]},createTileProgramInfo=(t,e,n)=>{const B=e[0].dims.slice(),s=new Array(B.length),F=[];for(let t=0;t<B.length;t++)s[t]=B[t]*e[1].numberData[t],F.push(`inputIdx[${t}] = int(mod(float(outputIdx[${t}]), ${B[t]}.));`);const Q=s.length,U=`\n      float process(int outputIdx[${Q}]) {\n        int inputIdx[${Q}];\n        ${F.join("\n")}\n        return _A(inputIdx);\n      }\n    `;return{...n,output:{dims:s,type:e[0].type,textureType:0},shaderSource:U}},validateInputs24=t=>{if(!t||2!==t.length)throw new Error("Tile requires 2 input.");if(1!==t[1].dims.length)throw new Error("The second input shape must 1 dimension.");if(t[1].dims[0]!==t[0].dims.length)throw new Error("Invalid input shape.");if(-1===NUMBER_TYPES.indexOf(t[0].type))throw new Error("Invalid input type.");if("int32"!==t[1].type&&"int16"!==t[1].type)throw new Error("Invalid repeat type.")}}}),unsqueeze,unsqueezeV13,parseUnsqueezeAttributes,validateInputs25,validateInputsV132,init_unsqueeze=__esm({"web/lib/onnxjs/backends/webgl/ops/unsqueeze.ts"(){init_util(),unsqueeze=(t,e,n)=>{validateInputs25(e);const B=ShapeUtil.unsqueezeShape(e[0].dims,n);return[t.reshapeUnpacked(e[0],B)]},unsqueezeV13=(t,e)=>(validateInputsV132(e),unsqueeze(t,[e[0]],Array.from(e[1].integerData))),parseUnsqueezeAttributes=t=>t.attributes.getInts("axes"),validateInputs25=t=>{if(!t||1!==t.length)throw new Error("Unsqueeze requires 1 input.");if("string"===t[0].type)throw new Error("invalid input tensor types.")},validateInputsV132=t=>{if(!t||2!==t.length)throw new Error("Unsqueeze requires 2 inputs.");if("int32"!==t[1].type)throw new Error("Invalid input type.")}}}),WEBGL_OP_RESOLVE_RULES,init_op_resolve_rules=__esm({"web/lib/onnxjs/backends/webgl/op-resolve-rules.ts"(){init_batch_normalization(),init_binary_op(),init_cast(),init_concat(),init_conv(),init_conv_transpose(),init_depth_to_space(),init_flatten(),init_gather(),init_gemm(),init_image_scaler(),init_instance_normalization(),init_lrn(),init_matmul(),init_pad(),init_pool(),init_reduce(),init_reshape(),init_resize_packed(),init_shape(),init_slice(),init_softmax(),init_split(),init_squeeze(),init_sum(),init_tile(),init_transpose(),init_unary_op(),init_unsqueeze(),init_upsample(),WEBGL_OP_RESOLVE_RULES=[["Abs","","6+",abs],["Acos","","7+",acos],["Add","","7+",add2],["And","","7+",and2],["Asin","","7+",asin],["Atan","","7+",atan],["AveragePool","","7+",averagePool,parseAveragePoolAttributes],["BatchNormalization","","7+",batchNormalization,parseBatchNormalizationAttributes],["Cast","","6+",cast,parseCastAttributes],["Ceil","","6+",ceil],["Clip","","6-10",clip,parseClipAttributes],["Clip","","11+",clipV11],["Concat","","4+",concat,parseConcatAttributes],["Conv","","1+",conv,parseConvAttributes],["ConvTranspose","","1+",convTranspose,parseConvTransposeAttributes],["Cos","","7+",cos],["Div","","7+",div],["Dropout","","7+",identity],["DepthToSpace","","1+",depthToSpace,parseDepthToSpaceAttributes],["Equal","","7+",equal],["Elu","","6+",elu,parseEluAttributes],["Exp","","6+",exp],["Flatten","","1+",flatten,parseFlattenAttributes],["Floor","","6+",floor],["FusedConv","com.microsoft","1+",conv,parseConvAttributes],["Gather","","1+",gather,parseGatherAttributes],["Gemm","","7-10",gemm,parseGemmAttributesV7],["Gemm","","11+",gemm,parseGemmAttributesV11],["GlobalAveragePool","","1+",globalAveragePool,parseGlobalAveragePoolAttributes],["GlobalMaxPool","","1+",globalMaxPool],["Greater","","7+",greater],["Identity","","1+",identity],["ImageScaler","","1+",imageScaler,parseImageScalerAttributes],["InstanceNormalization","","6+",instanceNormalization,parseInstanceNormalizationAttributes],["LeakyRelu","","6+",leakyRelu,parseLeakyReluAttributes],["Less","","7+",less],["LRN","","1+",lrn,parseLrnAttributes],["Log","","6+",log2],["MatMul","","1+",matMul,parseMatMulAttributes],["MaxPool","","1+",maxPool,parseMaxPoolAttributes],["Mul","","7+",mul],["Neg","","6+",neg],["Not","","1+",not2],["Or","","7+",or2],["Pad","","2-10",padV2,parsePadAttributesV2],["Pad","","11+",padV11,parsePadAttributesV11],["Pow","","7+",pow],["PRelu","","7+",pRelu],["ReduceLogSum","","1+",reduceLogSum,parseReduceAttributes],["ReduceMax","","1+",reduceMax,parseReduceAttributes],["ReduceMean","","1+",reduceMean,parseReduceAttributes],["ReduceMin","","1+",reduceMin,parseReduceAttributes],["ReduceProd","","1+",reduceProd,parseReduceAttributes],["ReduceSum","","1-12",reduceSum,parseReduceAttributes],["ReduceSumSquare","","1+",reduceLogSumSquare,parseReduceAttributes],["Relu","","6+",relu],["Reshape","","5+",reshape],["Resize","","10",resize,parseResizeAttributesV10],["Resize","","11+",resize,parseResizeAttributesV11],["Shape","","1+",shape],["Sigmoid","","6+",sigmoid],["Sin","","7+",sin],["Slice","","10+",sliceV10],["Slice","","1-9",slice,parseSliceAttributes],["Softmax","","1-12",softmax,parseSoftmaxAttributes],["Softmax","","13+",softmaxV13,parseSoftmaxAttributesV13],["Split","","2-12",split,parseSplitAttributes],["Sqrt","","6+",sqrt],["Squeeze","","1-12",squeeze,parseSqueezeAttributes],["Squeeze","","13+",squeezeV13],["Sub","","7+",sub],["Sum","","6+",sum],["Tan","","7+",tan],["Tanh","","6+",tanh],["Tile","","6+",tile],["Transpose","","1+",transpose,parseTransposeAttributes],["Upsample","","7-8",upsample,parseUpsampleAttributesV7],["Upsample","","9",upsample,parseUpsampleAttributesV9],["Unsqueeze","","1-12",unsqueeze,parseUnsqueezeAttributes],["Unsqueeze","","13+",unsqueezeV13],["Xor","","7+",xor2]]}}),INLINE_FUNC_DEF_REGEX,FUNC_CALL_REGEX;function replaceInlines(t){const e={};let n;for(;null!==(n=INLINE_FUNC_DEF_REGEX.exec(t));){const t=n[3].split(",").map((t=>{const e=t.trim().split(" ");return e&&2===e.length?{type:e[0],name:e[1]}:null})).filter((t=>null!==t));e[n[2]]={params:t,body:n[4]}}for(const B in e){const s=FUNC_CALL_REGEX.replace("__FUNC__",B),F=new RegExp(s,"gm");for(;null!==(n=F.exec(t));){const s=n[1],F=n[2],Q=n[3].split(","),U=s?`${s} ${F};`:"";let i=e[B].body,a="";e[B].params.forEach(((t,e)=>{t&&(a+=`${t.type} ${t.name} = ${Q[e]};\n`)})),i=`${a}\n ${i}`,i=i.replace("return",`${F} = `);const l=`\n      ${U}\n      {\n        ${i}\n      }\n      `;t=t.replace(n[0],l)}}return t=t.replace(INLINE_FUNC_DEF_REGEX,"")}var init_glsl_function_inliner=__esm({"web/lib/onnxjs/backends/webgl/glsl-function-inliner.ts"(){INLINE_FUNC_DEF_REGEX=/@inline[\s\n\r]+(\w+)[\s\n\r]+([0-9a-zA-Z_]+)\s*\(([^)]*)\)\s*{(([^}]|[\n\r])*)}/gm,FUNC_CALL_REGEX="(\\w+)?\\s+([_0-9a-zA-Z]+)\\s+=\\s+__FUNC__\\((.*)\\)\\s*;"}}),PreferLogicalStrategy;function squeezeShape(t,e){const n=[],B=[],s=null!=e&&Array.isArray(e)&&0===e.length,F=null==e||s?null:parseAxisParam(e,t).sort();let Q=0;for(let e=0;e<t.length;++e){if(null!=F){if(F[Q]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==F[Q]||F[Q]>e)&&1===t[e]&&(n.push(t[e]),B.push(e)),F[Q]<=e&&Q++}1!==t[e]&&(n.push(t[e]),B.push(e))}return{newShape:n,keptDims:B}}function parseAxisParam(t,e){const n=e.length;return assert((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),assert(t.every(isInt),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((t=>t<0?n+t:t))}function isInt(t){return t%1==0}function sizeFromShape(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function sizeToSquarishShape(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}var init_texture_layout_strategy=__esm({"web/lib/onnxjs/backends/webgl/texture-layout-strategy.ts"(){init_instrument(),init_util(),PreferLogicalStrategy=class{constructor(t){this.maxTextureSize=t}computeTextureWH(t,e){const n=this.computeTexture(t,e);return e&&e.isPacked&&(n[0]/=2,n[1]/=2),e&&e.reverseWH?[n[1],n[0]]:n}computeTexture(t,e){const n=e&&e.isPacked;if(0===t.length)return n?[2,2]:[1,1];let B=this.maxTextureSize;if(e&&void 0!==e.breakAxis){const n=e.breakAxis>=t.length?1:t.slice(e.breakAxis).reduce(((t,e)=>t*e)),s=e.breakAxis<=0?1:t.slice(0,e.breakAxis).reduce(((t,e)=>t*e));if(!(n>B||s>B))return[n,s];Logger.verbose("TextureLayout",`Given width/height preferences were unattainable: shape:${t}, breakAxis:${e.breakAxis}`)}let s=t.slice(0);if(n&&(B*=2,s=s.map(((t,e)=>e>=s.length-2?s[e]%2==0?s[e]:s[e]+1:s[e])),1===s.length&&(s=[2,s[0]])),2!==s.length){const t=squeezeShape(s);s=t.newShape}const F=sizeFromShape(s);return s.length<=1&&F<=B?[1,F]:2===s.length&&s[0]<=B&&s[1]<=B?s:3===s.length&&s[0]*s[1]<=B&&s[2]<=B?[s[0]*s[1],s[2]]:3===s.length&&s[0]<=B&&s[1]*s[2]<=B?[s[0],s[1]*s[2]]:4===s.length&&s[0]*s[1]*s[2]<=B&&s[3]<=B?[s[0]*s[1]*s[2],s[3]]:4===s.length&&s[0]<=B&&s[1]*s[2]*s[3]<=B?[s[0],s[1]*s[2]*s[3]]:n?sizeToSquarishShape(F/4).map((t=>2*t)):sizeToSquarishShape(F)}}}}),CoordsGlslLib,init_glsl_coordinate_lib=__esm({"web/lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts"(){init_util(),init_glsl_definitions(),init_glsl_source(),init_texture_layout_strategy(),init_utils(),CoordsGlslLib=class extends GlslLib{constructor(t){super(t)}getFunctions(){return{...this.offsetToCoords(),...this.coordsToOffset(),...this.toVec(),...this.valueFrom(),...this.getCommonUtilFuncs(),...this.getInputsSamplingSnippets(),...this.getOutputSamplingSnippet()}}getCustomTypes(){return{}}offsetToCoords(){return{offsetToCoords:new GlslLibRoutine("\n      vec2 offsetToCoords(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      ")}}coordsToOffset(){return{coordsToOffset:new GlslLibRoutine("\n      int coordsToOffset(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      ")}}getOutputSamplingSnippet(){const t=this.context.outputTextureLayout;return t.isPacked?this.getPackedOutputSamplingSnippet(t):this.getUnpackedOutputSamplingSnippet(t)}getPackedOutputSamplingSnippet(t){const e=t.unpackedShape,n=[t.width,t.height],B={},s="getOutputCoords";switch(e.length){case 0:B[s]=this.getOutputScalarCoords();break;case 1:B[s]=this.getOutputPacked1DCoords(e,n);break;case 2:B[s]=this.getOutputPacked2DCoords(e,n);break;case 3:B[s]=this.getOutputPacked3DCoords(e,n);break;default:B[s]=this.getOutputPackedNDCoords(e,n)}const F=`\n      void setOutput(vec4 val) {\n        ${getGlsl(this.context.glContext.version).output} = val;\n      }\n    `;return B.floatTextureSetRGBA=new GlslLibRoutine(F),B}getUnpackedOutputSamplingSnippet(t){const e=t.unpackedShape,n=[t.width,t.height],B={},s="getOutputCoords";switch(e.length){case 0:B[s]=this.getOutputScalarCoords();break;case 1:B[s]=this.getOutputUnpacked1DCoords(e,n);break;case 2:B[s]=this.getOutputUnpacked2DCoords(e,n);break;case 3:B[s]=this.getOutputUnpacked3DCoords(e,n);break;case 4:B[s]=this.getOutputUnpacked4DCoords(e,n);break;case 5:B[s]=this.getOutputUnpacked5DCoords(e,n);break;case 6:B[s]=this.getOutputUnpacked6DCoords(e,n);break;default:throw new Error(`Unsupported output dimensionality: ${e.length}`)}const F=`\n        void setOutput(float val) {\n          ${getGlsl(this.context.glContext.version).output} = vec4(val, 0, 0, 0);\n        }\n    `;return B.floatTextureSetR=new GlslLibRoutine(F),B}getOutputScalarCoords(){return new GlslLibRoutine("\n      int getOutputCoords() {\n        return 0;\n      }\n    ")}getOutputPacked1DCoords(t,e){const n=e;let B="";return 1===n[0]?(B=`\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${n[1]}.0);\n          }\n        `,new GlslLibRoutine(B)):1===n[1]?(B=`\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${n[0]}.0);\n          }\n        `,new GlslLibRoutine(B)):(B=`\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${n[0]}, ${n[1]}));\n          return 2 * (resTexRC.y * ${n[0]} + resTexRC.x);\n        }\n      `,new GlslLibRoutine(B))}getOutputPacked2DCoords(t,e){let n="";if(ArrayUtil.arraysEqual(t,e))return n=`\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${e[0]}, ${e[1]}));\n        }\n      `,new GlslLibRoutine(n);const B=e,s=Math.ceil(t[1]/2);return n=`\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${B[0]}, ${B[1]}));\n\n          int index = resTexRC.y * ${B[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${s}) * 2;\n          int c = 2 * (index / ${s});\n\n          return ivec2(r, c);\n        }\n      `,new GlslLibRoutine(n)}getOutputPacked3DCoords(t,e){const n=[e[0],e[1]],B=Math.ceil(t[2]/2),s=B*Math.ceil(t[1]/2);return new GlslLibRoutine(`\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${n[0]}, ${n[1]}));\n          int index = resTexRC.y * ${n[0]} + resTexRC.x;\n\n          int b = index / ${s};\n          index -= b * ${s};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${B}) * 2;\n          int c = 2 * (index / ${B});\n\n          return ivec3(b, r, c);\n        }\n      `)}getOutputPackedNDCoords(t,e){const n=[e[0],e[1]],B=Math.ceil(t[t.length-1]/2),s=B*Math.ceil(t[t.length-2]/2);let F=s,Q="",U="b, r, c";for(let e=2;e<t.length-1;e++)F*=t[t.length-e-1],Q=`\n      int b${e} = index / ${F};\n      index -= b${e} * ${F};\n    `+Q,U=`b${e}, `+U;const i=`\n      ivec${t.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${n[0]}, ${n[1]}));\n        int index = resTexRC.y * ${n[0]} + resTexRC.x;\n\n        ${Q}\n\n        int b = index / ${s};\n        index -= b * ${s};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${B}) * 2;\n        int c = 2 * (index / ${B});\n\n        return ivec${t.length}(${U});\n      }\n    `;return new GlslLibRoutine(i)}getOutputUnpacked1DCoords(t,e){const n=`\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${e[0]}, ${e[1]}));\n          return resTexRC.y * ${e[0]} + resTexRC.x;\n        }\n      `;return new GlslLibRoutine(n)}getOutputUnpacked2DCoords(t,e){const n=`\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${e[0]}, ${e[1]}));\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\n          int r = index / ${t[1]};\n          int c = index - r * ${t[1]};\n          return ivec2(r, c);\n        }\n      `;return new GlslLibRoutine(n)}getOutputUnpacked3DCoords(t,e){let n="";const B=t.length;let s=null;B<2&&(s=[]),s=new Array(B-1),s[B-2]=t[B-1];for(let e=B-3;e>=0;--e)s[e]=s[e+1]*t[e+1];const F=["r","c","d"],Q=s.map(((t,e)=>`${`int ${F[e]} = index / ${t}`}; ${e===s.length-1?`int ${F[e+1]} = index - ${F[e]} * ${t}`:`index -= ${F[e]} * ${t}`};`)).join("");return n=`\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${e[0]}, ${e[1]}));\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\n          ${Q}\n          return ivec3(r, c, d);\n        }\n      `,new GlslLibRoutine(n)}getOutputUnpacked4DCoords(t,e){let n="";const B=t.length;let s=null;B<2&&(s=[]),s=new Array(B-1),s[B-2]=t[B-1];for(let e=B-3;e>=0;--e)s[e]=s[e+1]*t[e+1];const F=["r","c","d","d2"],Q=s.map(((t,e)=>`${`int ${F[e]} = index / ${t}`}; ${e===s.length-1?`int ${F[e+1]} = index - ${F[e]} * ${t}`:`index -= ${F[e]} * ${t}`};`)).join("");return n=`\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${e[0]}, ${e[1]}));\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\n          ${Q}\n          return ivec4(r, c, d, d2);\n        }\n      `,new GlslLibRoutine(n)}getOutputUnpacked5DCoords(t,e){let n="";const B=t.length;let s=null;B<2&&(s=[]),s=new Array(B-1),s[B-2]=t[B-1];for(let e=B-3;e>=0;--e)s[e]=s[e+1]*t[e+1];const F=["r","c","d","d2","d3"],Q=s.map(((t,e)=>`${`int ${F[e]} = index / ${t}`}; ${e===s.length-1?`int ${F[e+1]} = index - ${F[e]} * ${t}`:`index -= ${F[e]} * ${t}`};`)).join("");return n=`\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${e[0]}, ${e[1]}));\n          int index = resTexRC.y * ${e[0]} + resTexRC.x;\n          ${Q}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `,new GlslLibRoutine(n)}getOutputUnpacked6DCoords(t,e){let n="";const B=t.length;let s=null;B<2&&(s=[]),s=new Array(B-1),s[B-2]=t[B-1];for(let e=B-3;e>=0;--e)s[e]=s[e+1]*t[e+1];const F=["r","c","d","d2","d3","d4"],Q=s.map(((t,e)=>`${`int ${F[e]} = index / ${t}`}; ${e===s.length-1?`int ${F[e+1]} = index - ${F[e]} * ${t}`:`index -= ${F[e]} * ${t}`};`)).join("");return n=`\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${e[0]}, ${e[1]}));\n         int index = resTexRC.y * ${e[0]} + resTexRC.x;\n         ${Q}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `,new GlslLibRoutine(n)}getCommonUtilFuncs(){const t={};let e="uvFromFlat";t[e]=new GlslLibRoutine("\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    "),e="packedUVfrom1D",t[e]=new GlslLibRoutine("\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "),e="packedUVfrom2D",t[e]=new GlslLibRoutine("\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "),e="packedUVfrom3D",t[e]=new GlslLibRoutine("\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "),e="sampleTexture";const n=getGlsl(this.context.glContext.version);return t[e]=new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${n.texture2D}(textureSampler, uv).r;\n        }`),t}getInputsSamplingSnippets(){const t={},e=this.context.outputTextureLayout;return this.context.programInfo.inputNames.forEach(((n,B)=>{const s=this.context.inputTextureLayouts[B],F=generateShaderFuncNameFromInputSamplerName(n);s.isPacked?t[F]=this.getPackedSamplerFromInput(F,n,s):t[F]=this.getUnpackedSamplerFromInput(F,n,s);const Q=generateShaderFuncNameFromInputSamplerNameAtOutCoords(n);s.unpackedShape.length<=e.unpackedShape.length&&(s.isPacked?t[Q]=this.getPackedSamplerAtOutputCoords(Q,s,e,n):t[Q]=this.getUnpackedSamplerAtOutputCoords(Q,s,e,n))})),t}getPackedSamplerAtOutputCoords(t,e,n,B){const s=e.unpackedShape,F=n.unpackedShape,Q=generateShaderFuncNameFromInputSamplerName(B),U=s.length,i=F.length,a=BroadcastUtil.getBroadcastDims(s,F),l=getCoordsDataType(i),c=i-U;let g;const d=getGlChannels();g=0===U?"":i<2&&a.length>=1?"coords = 0;":a.map((t=>`coords.${d[t+c]} = 0;`)).join("\n");let I="";I=i<2&&U>0?"coords":s.map(((t,e)=>`coords.${d[e+c]}`)).join(", ");let o="return outputValue;";const r=1===ShapeUtil.size(s),u=1===ShapeUtil.size(F);if(1!==U||r||u){if(r&&!u)o=1===i?"\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        ":"\n          return vec4(outputValue.x);\n        ";else if(a.length){const t=U-2,e=U-1;a.indexOf(t)>-1&&a.indexOf(e)>-1?o="return vec4(outputValue.x);":a.indexOf(t)>-1?o="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(e)>-1&&(o="return vec4(outputValue.xx, outputValue.zz);")}}else o="\n        return vec4(outputValue.xy, outputValue.xy);\n      ";const b=`\n        int lastDim = coords.${d[i-1]};\n        coords.${d[i-1]} = coords.${d[i-2]};\n        coords.${d[i-2]} = lastDim;\n      `;return new GlslLibRoutine(`\n      vec4 ${t}() {\n        ${l} coords = getOutputCoords();\n        ${b}\n        ${g}\n        vec4 outputValue = ${Q}(${I});\n        ${o}\n      }\n    `,["coordinates.getOutputCoords"])}getUnpackedSamplerAtOutputCoords(t,e,n,B){const s=[n.width,n.height],F=[e.width,e.height],Q=e.unpackedShape.length,U=n.unpackedShape.length,i=e.unpackedShape,a=n.unpackedShape,l=generateShaderFuncNameFromInputSamplerName(B);if(Q===U&&ArrayUtil.arraysEqual(F,s)){return new GlslLibRoutine(`\n          float ${t}() {\n            return sampleTexture(${B}, TexCoords);\n          }\n        `,["coordinates.sampleTexture"])}const c=getCoordsDataType(U),g=BroadcastUtil.getBroadcastDims(i,a),d=U-Q;let I;const o=getGlChannels();I=0===Q?"":U<2&&g.length>=1?"coords = 0;":g.map((t=>`coords.${o[t+d]} = 0;`)).join("\n");let r="";r=U<2&&Q>0?"coords":e.unpackedShape.map(((t,e)=>`coords.${o[e+d]}`)).join(", ");return new GlslLibRoutine(`\n        float ${t}() {\n          ${c} coords = getOutputCoords();\n          ${I}\n          return ${l}(${r});\n        }\n      `,["coordinates.getOutputCoords"])}getPackedSamplerFromInput(t,e,n){switch(n.unpackedShape.length){case 0:return this.getPackedSamplerScalar(t,e);case 1:return this.getPackedSampler1D(t,e,n);case 2:return this.getPackedSampler2D(t,e,n);case 3:return this.getPackedSampler3D(t,e,n);default:return this.getPackedSamplerND(t,e,n)}}getUnpackedSamplerFromInput(t,e,n){const B=n.unpackedShape;switch(B.length){case 0:return this.getUnpackedSamplerScalar(t,e,n);case 1:return this.getUnpackedSampler1D(t,e,n);case 2:return this.getUnpackedSampler2D(t,e,n);case 3:return this.getUnpackedSampler3D(t,e,n);case 4:return this.getUnpackedSampler4D(t,e,n);case 5:return this.getUnpackedSampler5D(t,e,n);case 6:return this.getUnpackedSampler6D(t,e,n);default:throw new Error(`Unsupported dimension ${B.length}-D`)}}getPackedSamplerScalar(t,e){const n=`\n          vec4 ${t}() {\n            return ${getGlsl(this.context.glContext.version).texture2D}(${e}, halfCR);\n          }\n        `;return new GlslLibRoutine(n)}getPackedSampler1D(t,e,n){const B=[n.width,n.height],s=[B[1],B[0]],F=getGlsl(this.context.glContext.version),Q=`vec4 ${t}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${s[0]}, ${s[1]}, index);\n      return ${F.texture2D}(${e}, uv);\n    }`;return new GlslLibRoutine(Q,["coordinates.packedUVfrom1D"])}getPackedSampler2D(t,e,n){const B=n.unpackedShape,s=[n.width,n.height],F=getGlsl(this.context.glContext.version),Q=s[0],U=s[1];if(null!=s&&ArrayUtil.arraysEqual(B,s)){const n=`vec4 ${t}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${U}.0, ${Q}.0);\n        return ${F.texture2D}(${e}, uv);\n      }`;return new GlslLibRoutine(n)}const i=s,a=Math.ceil(B[1]/2),l=`vec4 ${t}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${i[1]}, ${i[0]}, ${a}, row, col);\n      return ${F.texture2D}(${e}, uv);\n    }`;return new GlslLibRoutine(l,["coordinates.packedUVfrom2D"])}getPackedSampler3D(t,e,n){const B=n.unpackedShape,s=[n.width,n.height],F=[s[0],s[1]],Q=getGlsl(this.context.glContext.version);if(1===B[0]){const s=B.slice(1),F=[1,2],Q=squeezeInputShape(B,s),U=["b","row","col"],i=JSON.parse(JSON.stringify(n));i.unpackedShape=Q;const a=this.getPackedSamplerFromInput(t,e,i),l=`${a.routineBody}\n      vec4 ${t}(int b, int row, int col) {\n        return ${t}(${getSqueezedParams(U,F)});\n      } `;return new GlslLibRoutine(l,a.dependencies)}const U=F[0],i=F[1],a=Math.ceil(B[2]/2),l=`vec4 ${t}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${U}, ${a*Math.ceil(B[1]/2)}, ${a}, b, row, col);\n      return ${Q.texture2D}(${e}, uv);}`;return new GlslLibRoutine(l,["coordinates.packedUVfrom3D"])}getPackedSamplerND(t,e,n){const B=n.unpackedShape,s=B.length,F=[n.width,n.height],Q=getGlsl(this.context.glContext.version),U=[F[0],F[1]],i=U[1],a=U[0],l=Math.ceil(B[s-1]/2);let c=l*Math.ceil(B[s-2]/2),g="int b, int row, int col",d=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let t=2;t<s-1;t++)g=`int b${t}, `+g,c*=B[s-t-1],d=`b${t} * ${c} + `+d;const I=`vec4 ${t}(${g}) {\n      int index = ${d};\n      int texR = index / ${a};\n      int texC = index - texR * ${a};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}, ${i});\n      return ${Q.texture2D}(${e}, uv);\n    }`;return new GlslLibRoutine(I)}getUnpackedSamplerScalar(t,e,n){const[B,s]=[n.width,n.height];if(1===B&&1===s){return new GlslLibRoutine(`\n          float ${t}() {\n            return sampleTexture(${e}, halfCR);\n          }\n        `,["coordinates.sampleTexture"])}return new GlslLibRoutine(`\n        float ${t}() {\n          int offset_${e} = coordsToOffset(TexCoords, ${B}, ${s});\n          vec2 uv = uvFromFlat(${B}, ${s}, offset_${e});\n          return sampleTexture(${e}, uv);\n        }\n      `,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler1D(t,e,n){const B=n.width,s=n.height;if(1===s&&1===B){return new GlslLibRoutine(`\n        float ${t}(int index) {\n          return sampleTexture(${e}, halfCR);\n        }\n      `,["coordinates.sampleTexture"])}if(1===s){return new GlslLibRoutine(`\n          float ${t}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${B}.0, 0.5);\n            return sampleTexture(${e}, uv);\n          }\n        `,["coordinates.sampleTexture"])}if(1===B){return new GlslLibRoutine(`\n          float ${t}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${s}.0);\n            return sampleTexture(${e}, uv);\n          }\n        `,["coordinates.sampleTexture"])}return new GlslLibRoutine(`\n        float ${t}(int index) {\n          vec2 uv = uvFromFlat(${B}, ${s}, index);\n          return sampleTexture(${e}, uv);\n        }\n      `,["coordinates.uvFromFlat","coordinates.sampleTexture"])}getUnpackedSampler2D(t,e,n){const B=n.unpackedShape,s=[n.height,n.width];if(null!=s&&ArrayUtil.arraysEqual(B,s)){return new GlslLibRoutine(`\n          float ${t}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${s[1]}.0, ${s[0]}.0);\n            return sampleTexture(${e}, uv);\n          }\n        `,["coordinates.sampleTexture"])}const{newShape:F,keptDims:Q}=squeezeShape(B),U=F;if(U.length<B.length){const s=squeezeInputShape(B,U),F=JSON.parse(JSON.stringify(n));F.unpackedShape=s;const i=["col","row"],a=`\n          ${this.getUnpackedSamplerFromInput(t,e,F).routineBody}\n          float ${t}(int row, int col) {\n            return ${t}(${getSqueezedParams(i,Q)});\n          }\n        `;return new GlslLibRoutine(a,["coordinates.sampleTexture"])}const i=s[1],a=s[0];if(1===a){const n=`\n          float ${t}(int row, int col) {\n            int offset_${e} = coordsToOffset(TexCoords, ${i}, ${a});\n            float index = dot(vec3(row, col, offset_${e}), vec3(${B[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${i}.0);\n            return sampleTexture(${e}, uv);\n          }\n        `;return new GlslLibRoutine(n,["coordinates.sampleTexture","coordinates.coordsToOffset"])}if(1===i){const n=`\n          float ${t}(int row, int col) {\n            int offset_${e} = coordsToOffset(TexCoords, ${i}, ${a});\n            float index = dot(vec3(row, col, offset_${e}), vec3(${B[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${a}.0, 0.5);\n            return sampleTexture(${e}, uv);\n          }\n        `;return new GlslLibRoutine(n,["coordinates.sampleTexture","coordinates.coordsToOffset"])}const l=`\n        float ${t}(int row, int col) {\n          int index = col * ${B[1]} + row;\n          vec2 uv = uvFromFlat(${i}, ${a}, index);\n          return sampleTexture(${e}, uv);\n        }\n      `;return new GlslLibRoutine(l,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler3D(t,e,n){const B=n.unpackedShape,s=B[1]*B[2],F=B[2],{newShape:Q,keptDims:U}=squeezeShape(B),i=Q;if(i.length<B.length){const s=squeezeInputShape(B,i),F=["batch","col","row"],Q=JSON.parse(JSON.stringify(n));Q.unpackedShape=s;const a=this.getUnpackedSamplerFromInput(t,e,Q),l=U.reverse(),c=`\n          ${a.routineBody}\n          float ${t}(int batch, int row, int col) {\n            return ${t}(${getSqueezedParams(F,l)});\n          }\n        `;return new GlslLibRoutine(c,a.dependencies)}const a=n.width,l=n.height;return new GlslLibRoutine(`\n          float ${t}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${s} + col * ${F} + row;\n            vec2 uv = uvFromFlat(${a}, ${l}, index);\n            return sampleTexture(${e}, uv);\n          }\n      `,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}getUnpackedSampler4D(t,e,n){const B=n.unpackedShape,s=B[3],F=B[2]*s,Q=B[1]*F,U=n.width,i=n.height;return new GlslLibRoutine(`\n        float ${t}(int row, int col, int depth, int depth2) {\n          int index = row * ${Q} + col * ${F} +\n              depth2 * ${s} + depth;\n          vec2 uv = uvFromFlat(${U}, ${i}, index);\n          return sampleTexture(${e}, uv);\n        }\n      `,["coordinates.uvFromFlat","coordinates.sampleTexture"])}getUnpackedSampler5D(t,e,n){const B=n.unpackedShape,s=B[4],F=B[3]*s,Q=B[2]*F,U=B[1]*Q,{newShape:i,keptDims:a}=squeezeShape(B);if(i.length<B.length){const s=squeezeInputShape(B,i),F=["row","col","depth","depth2","depth3"],Q=JSON.parse(JSON.stringify(n));Q.unpackedShape=s;const U=`\n          ${this.getUnpackedSamplerFromInput(t,e,Q).routineBody}\n          float ${t}(int row, int col, int depth, int depth2, int depth3) {\n            return ${t}(${getSqueezedParams(F,a)});\n          }\n        `;return new GlslLibRoutine(U,["coordinates.sampleTexture","coordinates.uvFromFlat"])}const l=n.width,c=n.height;return new GlslLibRoutine(`\n        float ${t}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${U} + col * ${Q} + depth * ${F} +\n          depth3 * ${s} + depth2;\n          vec2 uv = uvFromFlat(${l}, ${c}, index);\n          return sampleTexture(${e}, uv);\n        }\n      `,["coordinates.sampleTexture","coordinates.uvFromFlat"])}getUnpackedSampler6D(t,e,n){const B=n.unpackedShape,s=B[5],F=B[4]*s,Q=B[3]*F,U=B[2]*Q,i=B[1]*U,{newShape:a,keptDims:l}=squeezeShape(B);if(a.length<B.length){const s=squeezeInputShape(B,a),F=["row","col","depth","depth2","depth3","depth4"],Q=JSON.parse(JSON.stringify(n));Q.unpackedShape=s;const U=`\n            ${this.getUnpackedSamplerFromInput(t,e,Q).routineBody}\n            float ${t}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${t}(${getSqueezedParams(F,l)});\n            }\n          `;return new GlslLibRoutine(U,["coordinates.sampleTexture","coordinates.uvFromFlat"])}const c=n.width,g=n.height;return new GlslLibRoutine(`\n          float ${t}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${i} + col * ${U} + depth * ${Q} +\n            depth2 * ${F} + depth3 * ${s} + depth4;\n            vec2 uv = uvFromFlat(${c}, ${g}, index);\n            return sampleTexture(${e}, uv);\n          }\n        `,["coordinates.uvFromFlat","coordinates.sampleTexture","coordinates.coordsToOffset"])}toVec(){const t=this.context.outputTextureLayout,e=t.shape.length,n=t.strides,B=t.width,s=t.height,F=[];for(let t=0;t<e-1;++t)F.push(`\n        c[${t}] = offset / ${n[t]};`),F.push(`\n        offset -= c[${t}] * ${n[t]};`);F.push(`\n        c[${e-1}] = offset;`);const Q=`\n      void toVec(vec2 texCoords, out int c[${e}]) {\n        int offset = coordsToOffset(texCoords, ${B}, ${s});\n        ${F.join("")}\n      }\n      void toVec(int offset, out int c[${e}]) {\n        ${F.join("")}\n      }\n    `;return{toVec:new GlslLibRoutine(Q,["coordinates.coordsToOffset"])}}valueFrom(){const t={};return this.context.programInfo.inputNames.forEach(((e,n)=>{const B=this.context.inputTextureLayouts[n],s=(B.unpackedShape.length>0?B.unpackedShape:B.shape).length;let F=`_${e}`;t[F]=new GlslLibRoutine(this.getValueFromSingle(e,s,B.width,B.height,!1),[`shapeUtils.indicesToOffset${F}`,"coordinates.offsetToCoords","fragcolor.getColorAsFloat"]),F+="_T",t[F]=new GlslLibRoutine(this.getValueFromSingle(e,s,B.width,B.height,!0),[`shapeUtils.indicesToOffset${F}`,"coordinates.offsetToCoords","fragcolor.getColorAsFloat"])})),t}getValueFromSingle(t,e,n,B,s){let F=`_${t}`;s&&(F+="_T");return`\n        float ${F}(int m[${e}]) {\n          int offset = indicesToOffset${F}(m);\n          vec2 coords = offsetToCoords(offset, ${n}, ${B});\n          float value = getColorAsFloat(${getGlsl(this.context.glContext.version).texture2D}(${t}, coords));\n          return value;\n        }\n        `}getPackedValueFrom(t,e,n,B,s){let F=`_${t}_Pack`;s&&(F+="_T");return`\n        vec4 ${F}(int m[${e}]) {\n          int offset = indicesToOffset_${t}(m);\n          vec2 coords = offsetToCoords(offset, ${n}, ${B});\n          return ${getGlsl(this.context.glContext.version).texture2D}(${t}, coords);\n        }\n        `}}}}),EncodingGlslLib,init_glsl_encoding_lib=__esm({"web/lib/onnxjs/backends/webgl/glsl-encoding-lib.ts"(){init_glsl_definitions(),EncodingGlslLib=class t extends GlslLib{constructor(t){super(t)}getFunctions(){return{...this.encodeFloat32(),...this.decodeFloat32()}}getCustomTypes(){return{}}encodeFloat32(){return{encode:new GlslLibRoutine("highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        ")}}decodeFloat32(){return{decode:new GlslLibRoutine("highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        ")}}encodeUint8(){const e=t.isLittleEndian()?"rgba.rgba=rgba.abgr;":"";return{encode:new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${e}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)}}decodeUint8(){const e=t.isLittleEndian()?"rgba.rgba=rgba.abgr;":"";return{decode:new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${e}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)}}static isLittleEndian(){const t=new ArrayBuffer(4),e=new Uint32Array(t),n=new Uint8Array(t);if(e[0]=3735928559,239===n[0])return!0;if(222===n[0])return!1;throw new Error("unknown endianness")}}}}),FragColorGlslLib,init_glsl_fragcolor_lib=__esm({"web/lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts"(){init_glsl_definitions(),init_glsl_source(),FragColorGlslLib=class extends GlslLib{constructor(t){super(t)}getFunctions(){return{...this.setFragColor(),...this.getColorAsFloat()}}getCustomTypes(){return{}}setFragColor(){const t=getGlsl(this.context.glContext.version);return{setFragColor:new GlslLibRoutine(`\n        void setFragColor(float value) {\n            ${t.output} = encode(value);\n        }\n        `,["encoding.encode"])}}getColorAsFloat(){return{getColorAsFloat:new GlslLibRoutine("\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        ",["encoding.decode"])}}}}}),ShapeUtilsGlslLib,init_glsl_shape_utils_lib=__esm({"web/lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts"(){init_glsl_definitions(),ShapeUtilsGlslLib=class t extends GlslLib{constructor(t){super(t)}getFunctions(){return{...this.bcastIndex(),...this.bcastMatmulIndex(),...this.offsetToIndices(),...this.indicesToOffset(),...this.incrementIndices()}}getCustomTypes(){return{}}bcastIndex(){const t=this.context.outputTextureLayout.shape.length,e={};return this.context.programInfo.inputNames.forEach(((n,B)=>{const s=this.context.inputTextureLayouts[B].unpackedShape;if(s.length<=t){const B=s.length,F=t-B,Q=`bcastIndices_${n}`;let U="";for(let t=0;t<B;++t)U+=`\n          realIndices[${t}] = int( mod(float(bcastedIndices[${F+t}]), ${s[t]}.0) );\n          `;const i=`\n        void ${Q} (int bcastedIndices[${t}], out int realIndices[${B}]) {\n          ${U}\n        }\n        `;e[Q]=new GlslLibRoutine(i)}})),e}bcastMatmulIndex(){const t=this.context.outputTextureLayout.shape.length,e={};return this.context.programInfo.inputNames.forEach(((n,B)=>{const s=this.context.inputTextureLayouts[B].shape;if(!(s.length<2||s.length>t)){const B=s.length,F=t-B,Q=`bcastMatmulIndices_${n}`;let U="";for(let t=0;t<B-2;++t)U+=`\n          realIndices[${t}] = int( mod(float(bcastedIndices[${F+t}]), ${s[t]}.0) );\n          `;const i=`\n        void ${Q}(int bcastedIndices[${t}], out int realIndices[${B}]) {\n          ${U}\n          realIndices[${B-1}] = bcastedIndices[${t-1}];\n          realIndices[${B-2}] = bcastedIndices[${t-2}];\n        }\n        `;e[Q]=new GlslLibRoutine(i)}})),e}indicesToOffset(){const e={};return this.context.programInfo.inputNames.forEach(((n,B)=>{const s=this.context.inputTextureLayouts[B].shape,F=this.context.inputTextureLayouts[B].strides,Q=s.length;let U=`indicesToOffset_${n}`;e[U]=new GlslLibRoutine(t.indexToOffsetSingle(U,Q,F)),U=`indicesToOffset_${n}_T`,e[U]=new GlslLibRoutine(t.indexToOffsetSingle(U,Q,F.slice().reverse()))})),e}static indexToOffsetSingle(t,e,n){let B="";for(let t=e-1;t>=0;--t)B+=`\n        offset += indices[${t}] * ${n[t]};\n        `;return`\n      int ${t}(int indices[${e}]) {\n        int offset = 0;\n        ${B}\n        return offset;\n      }\n      `}offsetToIndices(){const e={};return this.context.programInfo.inputNames.forEach(((n,B)=>{const s=this.context.inputTextureLayouts[B].shape,F=this.context.inputTextureLayouts[B].strides,Q=s.length;let U=`offsetToIndices_${n}`;e[U]=new GlslLibRoutine(t.offsetToIndicesSingle(U,Q,F)),U=`offsetToIndices_${n}_T`,e[U]=new GlslLibRoutine(t.offsetToIndicesSingle(U,Q,F.slice().reverse()))})),e}static offsetToIndicesSingle(t,e,n){const B=[];for(let t=0;t<e-1;++t)B.push(`\n      indices[${t}] = offset / ${n[t]};`),B.push(`\n        offset -= indices[${t}] * ${n[t]};`);return B.push(`\n      indices[${e-1}] = offset;`),`\n      void ${t}(int offset, out int indices[${e}]) {\n        ${B.join("")}\n      }\n      `}incrementIndices(){const t={};return this.context.programInfo.inputNames.forEach(((e,n)=>{const B=this.context.inputTextureLayouts[n].shape,s=B.length,F=`incrementIndices_${e}`;let Q="";for(let t=0;t<s;++t)Q+=`\n        shape[${t}] = ${B[t]};`;const U=`\n        void ${F}(int axis, out int indices[${s}]) {\n          int shape[${s}];\n          ${Q};\n          for(int i = ${s} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;t[F]=new GlslLibRoutine(U)})),t}}}}),VecGlslLib,init_glsl_vec_lib=__esm({"web/lib/onnxjs/backends/webgl/glsl-vec-lib.ts"(){init_glsl_definitions(),VecGlslLib=class extends GlslLib{constructor(t){super(t)}getCustomTypes(){return{}}getFunctions(){return{...this.binaryVecFunctions(),...this.copyVec(),...this.setVecItem(),...this.getVecItem()}}binaryVecFunctions(){const t=this.context.outputTextureLayout.shape.length,e={add:"+=",sub:"-=",mul:"*=",div:"/="},n={};for(const B in e){const s=`${B}Vec`;let F="";for(let n=0;n<t;++n)F+=`\n          dest[${n}] ${e[B]} src[${n}];\n          `;const Q=`\n        void ${s}(int src[${t}], out int dest[${t}]) {\n          ${F}\n        }\n        `;n[s]=new GlslLibRoutine(Q)}return n}copyVec(){const t=this.context.outputTextureLayout.shape.length;let e="";for(let n=0;n<t;++n)e+=`\n        dest[${n}] = src[${n}];\n        `;return{copyVec:new GlslLibRoutine(`\n      void copyVec(int src[${t}], out int dest[${t}]) {\n        ${e}\n      }\n      `)}}setVecItem(){const t=this.context.outputTextureLayout.shape.length;let e=`\n        if(index < 0)\n            index =${t} + index;\n        if (index == 0)\n            m[0] = value;\n        `;for(let n=1;n<t-1;++n)e+=`\n        else if (index == ${n})\n            m[${n}] = value;\n            `;e+=`\n        else\n            m[${t-1}] = value;\n        `;return{setVecItem:new GlslLibRoutine(`\n      void setVecItem(out int m[${t}], int index, int value) {\n        ${e}\n      }\n        `)}}getVecItem(){const t=this.context.outputTextureLayout.shape.length;let e=`\n        if(index < 0)\n            index = ${t} + index;\n        if (index == 0)\n            return m[0];\n      `;for(let n=1;n<t-1;++n)e+=`\n        else if (index == ${n})\n            return m[${n}];\n      `;e+=`\n        else\n            return m[${t-1}];\n        `;return{getVecItem:new GlslLibRoutine(`\n      int getVecItem(int m[${t}], int index) {\n        ${e}\n      }\n    `)}}}}}),glslRegistry,init_glsl_registered_libs=__esm({"web/lib/onnxjs/backends/webgl/glsl-registered-libs.ts"(){init_glsl_coordinate_lib(),init_glsl_encoding_lib(),init_glsl_fragcolor_lib(),init_glsl_shape_utils_lib(),init_glsl_vec_lib(),glslRegistry={encoding:EncodingGlslLib,fragcolor:FragColorGlslLib,vec:VecGlslLib,shapeUtils:ShapeUtilsGlslLib,coordinates:CoordsGlslLib}}}),GlslPreprocessor,init_glsl_preprocessor=__esm({"web/lib/onnxjs/backends/webgl/glsl-preprocessor.ts"(){init_glsl_definitions(),init_glsl_function_inliner(),init_glsl_registered_libs(),init_glsl_source(),GlslPreprocessor=class{constructor(t,e,n,B){this.libs={},this.glslLibRoutineDependencyGraph={},this.context=new GlslContext(t,e,n,B),Object.keys(glslRegistry).forEach((t=>{const e=new glslRegistry[t](this.context);this.libs[t]=e}));const s=this.glslLibRoutineDependencyGraph;for(const t in this.libs){const e=this.libs[t].getFunctions();for(const n in e){const B=t+"."+n;let F;s[B]?(F=s[B],F.routineBody=e[n].routineBody):(F=new GlslLibRoutineNode(B,e[n].routineBody),s[B]=F);const Q=e[n].dependencies;if(Q)for(let t=0;t<Q.length;++t)if(s[Q[t]])F.addDependency(s[Q[t]]);else{const e=new GlslLibRoutineNode(Q[t]);s[Q[t]]=e,F.addDependency(e)}}}}preprocess(){const t=this.context.programInfo;let e=t.shaderSource;return this.context.programInfo.hasMain||(e=`${e}\n      ${getDefaultFragShaderMain(this.context.glContext.version,this.context.outputTextureLayout.shape.length)}`),e=replaceInlines(e),`${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(t.inputNames,t.variables)}\n    ${this.getImports(e)}\n    ${e}`}getImports(t){const e=this.selectGlslLibRoutinesToBeIncluded(t);if(0===e.length)return"";let n="";for(let t=0;t<e.length;++t){if(!e[t].routineBody)throw new Error(`Missing body for the Glsl Library routine: ${e[t].name}`);n+=e[t].routineBody+"\n"}return n}selectGlslLibRoutinesToBeIncluded(t){const e=[];return Object.keys(this.glslLibRoutineDependencyGraph).forEach((n=>{const B=n.split(".")[1];-1!==t.indexOf(B)&&e.push(this.glslLibRoutineDependencyGraph[n])})),TopologicalSortGlslRoutines.returnOrderedNodes(e)}getUniforms(t,e){const n=[];if(t)for(const e of t)n.push(`uniform sampler2D ${e};`);if(e)for(const t of e)n.push(`uniform ${t.type} ${t.name}${t.arrayLength?`[${t.arrayLength}]`:""};`);return n.join("\n")}}}}),ProgramManager,init_program_manager=__esm({"web/lib/onnxjs/backends/webgl/program-manager.ts"(){init_esm(),init_instrument(),init_glsl_preprocessor(),init_glsl_source(),ProgramManager=class{constructor(t,e,n){this.profiler=t,this.glContext=e,this.textureLayoutStrategy=n,this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,e){this.repo.set(t,e)}run(t,e,n){this.profiler.event("op",`ProgramManager.run ${t.programInfo.name??"unknown kernel"}`,(()=>{const B=this.glContext.gl,s=t.program;B.useProgram(s);try{this.bindOutput(n),this.attributesBound||this.bindAttributes(t.attribLocations),this.bindUniforms(t.uniformLocations,t.programInfo.variables??[],e)}catch(e){throw Logger.error("ProgramManager",t.programInfo.shaderSource),e}this.profiler.event("backend","GlContext.draw()",(()=>{this.glContext.draw()}))}),this.glContext)}dispose(){this.vertexShader&&this.glContext.deleteShader(this.vertexShader),this.repo.forEach((t=>this.glContext.deleteProgram(t.program)))}build(t,e,n){return this.profiler.event("backend","ProgramManager.build",(()=>{const B=new GlslPreprocessor(this.glContext,t,e,n),s=B.preprocess(),F=this.compile(s);return{programInfo:t,program:F,uniformLocations:this.getUniformLocations(F,B.context.programInfo.inputNames,B.context.programInfo.variables),attribLocations:this.getAttribLocations(F)}}))}compile(t){if(!this.vertexShader){Logger.verbose("ProrgramManager","Compiling and caching Vertex shader for the first time");const t=getVertexShaderSource(this.glContext.version);this.vertexShader=this.glContext.compileShader(t,this.glContext.gl.VERTEX_SHADER)}env2.debug&&Logger.verbose("ProrgramManager",`FragShader:\n${t}\n`);const e=this.glContext.compileShader(t,this.glContext.gl.FRAGMENT_SHADER),n=this.glContext.createProgram(this.vertexShader,e);return this.glContext.deleteShader(e),n}bindOutput(t){const e=t.width,n=t.height;Logger.verbose("ProrgramManager",`Binding output texture to Framebuffer: w/h=${e}/${n}, shape=${t.shape}, type=${t.tensor.type}`),this.glContext.attachFramebuffer(t.texture,e,n)}bindAttributes(t){const e=t.position,n=t.textureCoord;this.glContext.setVertexAttributes(e,n),this.attributesBound=!0}bindUniforms(t,e,n){const B=this.glContext.gl;let s=0;for(const{name:F,type:Q,location:U,arrayLength:i}of t){const t=e.find((t=>t.name===F))?.data;if("sampler2D"!==Q&&!t)throw new Error(`variable '${F}' does not have data defined in program info`);switch(Q){case"sampler2D":this.bindTexture(n[s],U,s),s++;break;case"float":i?B.uniform1fv(U,t):B.uniform1f(U,t);break;case"int":i?B.uniform1iv(U,t):B.uniform1i(U,t);break;default:throw new Error(`Uniform not implemented: ${Q}`)}}}bindTexture(t,e,n){this.glContext.bindTextureToUniform(t.texture,n,e)}getAttribLocations(t){return{position:this.getAttribLocation(t,"position"),textureCoord:this.getAttribLocation(t,"textureCoord")}}getUniformLocations(t,e,n){const B=[];if(e)for(const n of e)B.push({name:n,type:"sampler2D",location:this.getUniformLocation(t,n)});if(n)for(const e of n)B.push({...e,location:this.getUniformLocation(t,e.name)});return B}getUniformLocation(t,e){const n=this.glContext.gl.getUniformLocation(t,e);if(null===n)throw new Error(`Uniform ${e} not found.`);return n}getAttribLocation(t,e){return this.glContext.gl.getAttribLocation(t,e)}}}}),TextureManager,init_texture_manager=__esm({"web/lib/onnxjs/backends/webgl/texture-manager.ts"(){init_instrument(),init_texture_data_encoder(),TextureManager=class{constructor(t,e,n,B){this.glContext=t,this.layoutStrategy=e,this.profiler=n,this.config=B,this.pendingRead=new Map,B.reuseTextures&&(this.inUseTextures=new Map,this.idleTextures=new Map,this.textureLookup=new Map)}createTextureFromLayout(t,e,n,B){const s=this.toEncoderType(t),F=this.glContext.getEncoder(s,e.channels||1,B);if(e.isPacked&&1===B)throw new Error("not implemented");const Q=e.width,U=e.height;let i,a;if(this.config.reuseTextures){i=`${Q}x${U}_${F.format}_${F.internalFormat}_${F.textureType}`,a=this.inUseTextures.get(i),a||(a=[],this.inUseTextures.set(i,a));const e=this.idleTextures.get(i);if(e&&e.length>0){const s=e.pop();return a.push(s),1===B&&this.glContext.updateTexture(s,Q,U,F,this.toTextureData(t,n)),s}}Logger.verbose("TextureManager",`Creating new texture of size ${e.width}x${e.height}`);const l=this.glContext.allocateTexture(Q,U,F,this.toTextureData(t,n));return this.config.reuseTextures&&(a.push(l),this.textureLookup.set(l,i)),l}readTexture(t,e,n){return n||(n=1),this.profiler.event("backend","TextureManager.readTexture",(()=>{const B=t.shape.reduce(((t,e)=>t*e))*n,s=this.glContext.readTexture(t.texture,t.width,t.height,B,this.toEncoderType(e),n);return this.toTensorData(e,s)}))}async readTextureAsync(t,e,n){const B=t.tensor.dataId;if(n||(n=1),this.pendingRead.has(B)){const t=this.pendingRead.get(B);return new Promise((e=>t?.push(e)))}return this.profiler.event("backend","TextureManager.readTextureAsync",(async()=>{this.pendingRead.set(B,[]);const s=t.shape.reduce(((t,e)=>t*e))*n;await this.glContext.createAndWaitForFence();const F=this.glContext.readTexture(t.texture,t.width,t.height,s,this.toEncoderType(e),n),Q=this.toTensorData(e,F),U=this.pendingRead.get(B);return this.pendingRead.delete(B),U?.forEach((t=>t(Q))),Q}))}readUint8TextureAsFloat(t){return this.profiler.event("backend","TextureManager.readUint8TextureAsFloat",(()=>{const e=t.shape.reduce(((t,e)=>t*e)),n=this.glContext.readTexture(t.texture,t.width,t.height,4*e,"byte",4);return new Float32Array(n.buffer,n.byteOffset,e)}))}releaseTexture(t,e){let n;if(this.config.reuseTextures&&(n=this.textureLookup.get(t.texture),n)){e&&this.textureLookup.delete(n);const B=this.inUseTextures.get(n);if(B){const e=B.indexOf(t.texture);if(-1!==e){B.splice(e,1);let s=this.idleTextures.get(n);s||(s=[],this.idleTextures.set(n,s)),s.push(t.texture)}}}n&&!e||(Logger.verbose("TextureManager",`Deleting texture of size ${t.width}x${t.height}`),this.glContext.deleteTexture(t.texture))}toTensorData(t,e){switch(t){case"int16":return e instanceof Int16Array?e:Int16Array.from(e);case"int32":return e instanceof Int32Array?e:Int32Array.from(e);case"int8":return e instanceof Int8Array?e:Int8Array.from(e);case"uint16":return e instanceof Uint16Array?e:Uint16Array.from(e);case"uint32":return e instanceof Uint32Array?e:Uint32Array.from(e);case"uint8":case"bool":return e instanceof Uint8Array?e:Uint8Array.from(e);case"float32":return e instanceof Float32Array?e:Float32Array.from(e);case"float64":return e instanceof Float64Array?e:Float64Array.from(e);default:throw new Error(`TensorData type ${t} is not supported`)}}toTextureData(t,e){if(e)return e instanceof Float32Array?e:new Float32Array(e)}toEncoderType(t){return"float"}clearActiveTextures(){this.glContext.clearActiveTextures()}}}}),WebGLSessionHandler,init_session_handler=__esm({"web/lib/onnxjs/backends/webgl/session-handler.ts"(){init_instrument(),init_opset(),init_inference_handler(),init_op_resolve_rules(),init_program_manager(),init_texture_layout_strategy(),init_texture_manager(),WebGLSessionHandler=class{constructor(t,e){this.backend=t,this.context=e,this.layoutStrategy=new PreferLogicalStrategy(t.glContext.maxTextureSize),this.programManager=new ProgramManager(this.context.profiler,t.glContext,this.layoutStrategy),this.textureManager=new TextureManager(t.glContext,this.layoutStrategy,this.context.profiler,{reuseTextures:"full"===t.textureCacheMode}),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache=new Map,this.pack=t.pack,this.pack2unpackMap=new Map,this.unpack2packMap=new Map}createInferenceHandler(){return new WebGLInferenceHandler(this)}onGraphInitialized(t){const e=t.getValues().filter((t=>-1===t.from&&t.tensor)).map((t=>t.tensor.dataId));this.initializers=new Set(e)}isInitializer(t){return!!this.initializers&&this.initializers.has(t)}addInitializer(t){this.initializers.add(t)}getTextureData(t,e){return e?this.packedTextureDataCache.get(t):this.unpackedTextureDataCache.get(t)}setTextureData(t,e,n=!1){Logger.verbose("WebGLSessionHandler","Storing Texture data in cache"),n?this.packedTextureDataCache.set(t,e):this.unpackedTextureDataCache.set(t,e)}dispose(){this.programManager.dispose(),this.textureManager.clearActiveTextures(),this.packedTextureDataCache.forEach((t=>this.textureManager.releaseTexture(t,!0))),this.packedTextureDataCache=new Map,this.unpackedTextureDataCache.forEach((t=>this.textureManager.releaseTexture(t,!0))),this.unpackedTextureDataCache=new Map}resolve(t,e,n){const B=resolveOperator(t,e,WEBGL_OP_RESOLVE_RULES);return{impl:B.opImpl,context:B.opInit?B.opInit(t,n):t}}}}}),WebGLContext;function linearSearchLastTrue(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}var init_webgl_context=__esm({"web/lib/onnxjs/backends/webgl/webgl-context.ts"(){init_esm(),init_texture_data_encoder(),init_texture_data_encoder(),init_utils(),WebGLContext=class{constructor(t,e){this.frameBufferBound=!1,this.itemsToPoll=[],this.gl=t,this.version=e,this.getExtensions(),this.vertexbuffer=this.createVertexbuffer(),this.framebuffer=this.createFramebuffer(),this.queryVitalParameters()}allocateTexture(t,e,n,B){const s=this.gl,F=s.createTexture();s.bindTexture(s.TEXTURE_2D,F),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_MIN_FILTER,s.NEAREST),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_MAG_FILTER,s.NEAREST),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_WRAP_S,s.CLAMP_TO_EDGE),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_WRAP_T,s.CLAMP_TO_EDGE);const Q=B?n.encode(B,t*e):null;return s.texImage2D(s.TEXTURE_2D,0,n.internalFormat,t,e,0,n.format,n.textureType,Q),this.checkError(),F}updateTexture(t,e,n,B,s){const F=this.gl;F.bindTexture(F.TEXTURE_2D,t);const Q=B.encode(s,e*n);F.texSubImage2D(F.TEXTURE_2D,0,0,0,e,n,B.format,B.textureType,Q),this.checkError()}attachFramebuffer(t,e,n){const B=this.gl;B.bindTexture(B.TEXTURE_2D,t),B.bindFramebuffer(B.FRAMEBUFFER,this.framebuffer),B.framebufferTexture2D(B.FRAMEBUFFER,B.COLOR_ATTACHMENT0,B.TEXTURE_2D,t,0),this.checkError(),B.viewport(0,0,e,n),B.scissor(0,0,e,n)}readTexture(t,e,n,B,s,F){const Q=this.gl;F||(F=1),this.frameBufferBound||this.attachFramebuffer(t,e,n);const U=this.getEncoder(s,F),i=U.allocate(e*n);return Q.bindTexture(Q.TEXTURE_2D,t),Q.framebufferTexture2D(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_2D,t,0),Q.readPixels(0,0,e,n,Q.RGBA,U.textureType,i),this.checkError(),U.decode(i,B)}isFramebufferReady(){return!0}getActiveTexture(){const t=this.gl;return"TEXTURE"+(t.getParameter(this.gl.ACTIVE_TEXTURE)-t.TEXTURE0)}getTextureBinding(){return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D)}getFramebufferBinding(){return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING)}setVertexAttributes(t,e){const n=this.gl;n.vertexAttribPointer(t,3,n.FLOAT,!1,20,0),n.enableVertexAttribArray(t),-1!==e&&(n.vertexAttribPointer(e,2,n.FLOAT,!1,20,12),n.enableVertexAttribArray(e)),this.checkError()}createProgram(t,e){const n=this.gl,B=n.createProgram();return n.attachShader(B,t),n.attachShader(B,e),n.linkProgram(B),B}compileShader(t,e){const n=this.gl,B=n.createShader(e);if(!B)throw new Error(`createShader() returned null with type ${e}`);if(n.shaderSource(B,t),n.compileShader(B),!1===n.getShaderParameter(B,n.COMPILE_STATUS))throw new Error(`Failed to compile shader: ${n.getShaderInfoLog(B)}\nShader source:\n${t}`);return B}deleteShader(t){this.gl.deleteShader(t)}bindTextureToUniform(t,e,n){const B=this.gl;B.activeTexture(B.TEXTURE0+e),this.checkError(),B.bindTexture(B.TEXTURE_2D,t),this.checkError(),B.uniform1i(n,e),this.checkError()}draw(){this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4),this.checkError()}checkError(){if(env2.debug){const t=this.gl,e=t.getError();let n="";switch(e){case t.NO_ERROR:return;case t.INVALID_ENUM:n="INVALID_ENUM";break;case t.INVALID_VALUE:n="INVALID_VALUE";break;case t.INVALID_OPERATION:n="INVALID_OPERATION";break;case t.INVALID_FRAMEBUFFER_OPERATION:n="INVALID_FRAMEBUFFER_OPERATION";break;case t.OUT_OF_MEMORY:n="OUT_OF_MEMORY";break;case t.CONTEXT_LOST_WEBGL:n="CONTEXT_LOST_WEBGL";break;default:n=`Unknown WebGL Error: ${e.toString(16)}`}throw new Error(n)}}deleteTexture(t){this.gl.deleteTexture(t)}deleteProgram(t){this.gl.deleteProgram(t)}getEncoder(t,e,n=0){if(2===this.version)return new RedFloat32DataEncoder(this.gl,e);switch(t){case"float":return 1===n||this.isRenderFloat32Supported?new RGBAFloatDataEncoder(this.gl,e):new RGBAFloatDataEncoder(this.gl,e,this.textureHalfFloatExtension.HALF_FLOAT_OES);case"int":throw new Error("not implemented");case"byte":return new Uint8DataEncoder(this.gl,e);default:throw new Error(`Invalid dataType: ${t}`)}}clearActiveTextures(){const t=this.gl;for(let e=0;e<this.maxTextureImageUnits;++e)t.activeTexture(t.TEXTURE0+e),t.bindTexture(t.TEXTURE_2D,null)}dispose(){if(this.disposed)return;const t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteFramebuffer(this.framebuffer),t.bindBuffer(t.ARRAY_BUFFER,null),t.deleteBuffer(this.vertexbuffer),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.finish(),this.disposed=!0}createDefaultGeometry(){return new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0])}createVertexbuffer(){const t=this.gl,e=t.createBuffer();if(!e)throw new Error("createBuffer() returned null");const n=this.createDefaultGeometry();return t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW),this.checkError(),e}createFramebuffer(){const t=this.gl.createFramebuffer();if(!t)throw new Error("createFramebuffer returned null");return t}queryVitalParameters(){const t=this.gl;if(this.isFloatTextureAttachableToFrameBuffer=this.checkFloatTextureAttachableToFrameBuffer(),this.isRenderFloat32Supported=this.checkRenderFloat32(),this.isFloat32DownloadSupported=this.checkFloat32Download(),1===this.version&&!this.textureHalfFloatExtension&&!this.isRenderFloat32Supported)throw new Error("both float32 and float16 TextureType are not supported");this.isBlendSupported=!this.isRenderFloat32Supported||this.checkFloat32Blend(),this.maxTextureSize=t.getParameter(t.MAX_TEXTURE_SIZE),this.maxTextureImageUnits=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),this.version}getExtensions(){2===this.version?(this.colorBufferFloatExtension=this.gl.getExtension("EXT_color_buffer_float"),this.disjointTimerQueryWebgl2Extension=this.gl.getExtension("EXT_disjoint_timer_query_webgl2")):(this.textureFloatExtension=this.gl.getExtension("OES_texture_float"),this.textureHalfFloatExtension=this.gl.getExtension("OES_texture_half_float"))}checkFloatTextureAttachableToFrameBuffer(){const t=this.gl,e=t.createTexture();t.bindTexture(t.TEXTURE_2D,e);const n=2===this.version?t.RGBA32F:t.RGBA;t.texImage2D(t.TEXTURE_2D,0,n,1,1,0,t.RGBA,t.FLOAT,null);const B=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,B),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(e),t.deleteFramebuffer(B),s}checkRenderFloat32(){if(2===this.version){if(!this.colorBufferFloatExtension)return!1}else if(!this.textureFloatExtension)return!1;return this.isFloatTextureAttachableToFrameBuffer}checkFloat32Download(){if(2===this.version){if(!this.colorBufferFloatExtension)return!1}else{if(!this.textureFloatExtension)return!1;if(!this.gl.getExtension("WEBGL_color_buffer_float"))return!1}return this.isFloatTextureAttachableToFrameBuffer}checkFloat32Blend(){const t=this.gl;let e,n,B,s,F;try{e=t.createTexture(),n=t.createFramebuffer(),t.bindTexture(t.TEXTURE_2D,e);const Q=2===this.version?t.RGBA32F:t.RGBA;return t.texImage2D(t.TEXTURE_2D,0,Q,1,1,0,t.RGBA,t.FLOAT,null),t.bindFramebuffer(t.FRAMEBUFFER,n),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0),t.enable(t.BLEND),B=t.createShader(t.VERTEX_SHADER),B?(t.shaderSource(B,"void main(){}"),t.compileShader(B),s=t.createShader(t.FRAGMENT_SHADER),!!s&&(t.shaderSource(s,"precision highp float;void main(){gl_FragColor=vec4(0.5);}"),t.compileShader(s),F=t.createProgram(),!!F&&(t.attachShader(F,B),t.attachShader(F,s),t.linkProgram(F),t.useProgram(F),t.drawArrays(t.POINTS,0,1),t.getError()===t.NO_ERROR))):!1}finally{t.disable(t.BLEND),F&&t.deleteProgram(F),B&&t.deleteShader(B),s&&t.deleteShader(s),n&&(t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteFramebuffer(n)),e&&(t.bindTexture(t.TEXTURE_2D,null),t.deleteTexture(e))}}beginTimer(){if(2===this.version&&this.disjointTimerQueryWebgl2Extension){const t=this.gl,e=this.disjointTimerQueryWebgl2Extension,n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}throw new Error("WebGL1 profiling currently not supported.")}endTimer(){if(2!==this.version||!this.disjointTimerQueryWebgl2Extension)throw new Error("WebGL1 profiling currently not supported");{const t=this.gl,e=this.disjointTimerQueryWebgl2Extension;t.endQuery(e.TIME_ELAPSED_EXT)}}isTimerResultAvailable(t){let e=!1,n=!1;if(2!==this.version||!this.disjointTimerQueryWebgl2Extension)throw new Error("WebGL1 profiling currently not supported");{const B=this.gl,s=this.disjointTimerQueryWebgl2Extension;e=B.getQueryParameter(t,B.QUERY_RESULT_AVAILABLE),n=B.getParameter(s.GPU_DISJOINT_EXT)}return e&&!n}getTimerResult(t){let e=0;if(2!==this.version)throw new Error("WebGL1 profiling currently not supported");{const n=this.gl;e=n.getQueryParameter(t,n.QUERY_RESULT),n.deleteQuery(t)}return e/1e6}async waitForQueryAndGetTime(t){return await repeatedTry((()=>this.isTimerResultAvailable(t))),this.getTimerResult(t)}async createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e;const n=t,B=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);return t.flush(),e=null===B?()=>!0:()=>{const t=n.clientWaitSync(B,0,0);return t===n.ALREADY_SIGNALED||t===n.CONDITION_SATISFIED},{query:B,isFencePassed:e}}async pollFence(t){return new Promise((e=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>e()))}))}pollItems(){const t=linearSearchLastTrue(this.itemsToPoll.map((t=>t.isDoneFn)));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}async addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||await repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}}}}),cache;function createWebGLContext(t){let e;if(t&&"webgl2"!==t||!("webgl2"in cache)?t&&"webgl"!==t||!("webgl"in cache)||(e=cache.webgl):e=cache.webgl2,!e)try{e=createNewWebGLContext(createOffscreenCanvas(),t)}catch(n){e=createNewWebGLContext(createCanvas(),t)}t=t||1===e.version?"webgl":"webgl2";const n=e.gl;return cache[t]=e,n.isContextLost()?(delete cache[t],createWebGLContext(t)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),e)}function createNewWebGLContext(t,e){let n;const B={alpha:!1,depth:!1,antialias:!1,stencil:!1,preserveDrawingBuffer:!1,premultipliedAlpha:!1,failIfMajorPerformanceCaveat:!1};if((!e||"webgl2"===e)&&(n=t.getContext("webgl2",B),n))try{return new WebGLContext(n,2)}catch(t){Logger.warning("GlContextFactory",`failed to create WebGLContext using contextId 'webgl2'. Error: ${t}`)}if((!e||"webgl"===e)&&(n=t.getContext("webgl",B)||t.getContext("experimental-webgl",B),n))try{return new WebGLContext(n,1)}catch(t){Logger.warning("GlContextFactory",`failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${t}`)}throw new Error("WebGL is not supported")}function createCanvas(){if("undefined"==typeof document)throw new TypeError("failed to create canvas: document is not supported");const t=document.createElement("canvas");return t.width=1,t.height=1,t}function createOffscreenCanvas(){if("undefined"==typeof OffscreenCanvas)throw new TypeError("failed to create offscreen canvas: OffscreenCanvas is not supported");return new OffscreenCanvas(1,1)}var init_webgl_context_factory=__esm({"web/lib/onnxjs/backends/webgl/webgl-context-factory.ts"(){init_instrument(),init_webgl_context(),cache={}}}),WebGLBackend,init_backend_webgl=__esm({"web/lib/onnxjs/backends/backend-webgl.ts"(){init_esm(),init_instrument(),init_session_handler(),init_webgl_context_factory(),WebGLBackend=class{get contextId(){return env2.webgl.contextId}set contextId(t){env2.webgl.contextId=t}get matmulMaxBatchSize(){return env2.webgl.matmulMaxBatchSize}set matmulMaxBatchSize(t){env2.webgl.matmulMaxBatchSize=t}get textureCacheMode(){return env2.webgl.textureCacheMode}set textureCacheMode(t){env2.webgl.textureCacheMode=t}get pack(){return env2.webgl.pack}set pack(t){env2.webgl.pack=t}get async(){return env2.webgl.async}set async(t){env2.webgl.async=t}initialize(){try{return this.glContext=createWebGLContext(this.contextId),"number"!=typeof this.matmulMaxBatchSize&&(this.matmulMaxBatchSize=16),"string"!=typeof this.textureCacheMode&&(this.textureCacheMode="full"),"boolean"!=typeof this.pack&&(this.pack=!1),"boolean"!=typeof this.async&&(this.async=!1),Logger.setWithEnv(env2),env2.webgl.context||Object.defineProperty(env2.webgl,"context",{value:this.glContext.gl}),Logger.verbose("WebGLBackend",`Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`),!0}catch(t){return Logger.warning("WebGLBackend",`Unable to initialize WebGLBackend. ${t}`),!1}}createSessionHandler(t){return new WebGLSessionHandler(this,t)}dispose(){this.glContext.dispose()}}}}),backendsCache,backend;async function resolveBackend2(t){if(!t)return resolveBackend2(["webgl"]);{const e="string"==typeof t?[t]:t;for(const t of e){const e=backendsCache.get(t);if(e)return e;const n=await tryLoadBackend(t);if(n)return n}}throw new Error("no available backend to use")}async function tryLoadBackend(t){const e=backend;if(void 0!==e[t]&&isBackend(e[t])){const n=e[t];let B=n.initialize();if("object"==typeof B&&"then"in B&&(B=await B),B)return backendsCache.set(t,n),n}}function isBackend(t){const e=t;return"initialize"in e&&"function"==typeof e.initialize&&"createSessionHandler"in e&&"function"==typeof e.createSessionHandler&&"dispose"in e&&"function"==typeof e.dispose}var init_backend2=__esm({"web/lib/onnxjs/backend.ts"(){init_backend_webgl(),backendsCache=new Map,backend={webgl:new WebGLBackend}}}),KernelOp,ExecutionPlan,init_execution_plan=__esm({"web/lib/onnxjs/execution-plan.ts"(){init_instrument(),KernelOp=class{constructor(t,e){this.op=t,this.node=e}},ExecutionPlan=class{constructor(t,e,n){this.graph=t,this.profiler=n,this.initialize(e)}initialize(t){this.profiler.event("session","ExecutionPlan.initialize",(()=>{const e=this.graph.getNodes();if(e.length!==t.length)throw new Error("The size of nodes and OPs do not match.");this._ops=t.map(((t,n)=>new KernelOp(t,e[n]))),this.reset(),this._starter=[],this._ops.forEach(((t,e)=>{let n=!0;for(const e of t.node.inputs)if(!this._values[e]&&-1===this.graph.getInputIndices().indexOf(e)){n=!1;break}n&&this._starter.push(e)}))}))}reset(){this._values=this.graph.getValues().map((t=>t.tensor))}async execute(t,e){return this.profiler.event("session","ExecutionPlan.execute",(async()=>{this.reset();const n=t.createInferenceHandler(),B=this.graph.getInputIndices();if(e.length!==B.length)throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${e.length} expected: ${B.length}`);e.forEach(((t,e)=>{const n=B[e];this._values[n]=t}));const s=this._starter.slice(0),F=this.graph.getValues(),Q=this.graph.getNodes();let U=0;for(;U<s.length;){const t=s[U++],e=this._ops[t],B=e.node.inputs.map((t=>this._values[t]));if(-1!==B.indexOf(void 0))throw new Error(`unresolved input detected: op: ${e.node}`);const i=B;Logger.verbose("ExecPlan",`Runing op:${e.node.name} (${i.map(((t,n)=>`'${e.node.inputs[n]}': ${t.type}[${t.dims.join(",")}]`)).join(", ")})`);const a=await this.profiler.event("node",e.node.name,(async()=>e.op.impl(n,i,e.op.context)));if(a.length!==e.node.outputs.length)throw new Error("the size of output does not match model definition.");a.forEach(((t,n)=>{const B=e.node.outputs[n];if(this._values[B])throw new Error(`output [${B}] already has value: op:${e.node.name}`);this._values[B]=t}));const l=new Set;a.forEach(((t,n)=>{const B=e.node.outputs[n];for(const t of F[B].to){const e=Q[t];let n=!0;for(const t of e.inputs)if(!this._values[t]){n=!1;break}n&&l.add(t)}})),s.push(...l)}const i=[];for(let t=0;t<this.graph.getOutputIndices().length;t++){const e=this.graph.getOutputIndices()[t],n=this._values[e];if(void 0===n)throw new Error(`required output [${e}] does not have value`);0===e?await n.getData():n.data,i.push(n)}return Logger.verbose("ExecPlan","disposing of inferenceHandler"),n.dispose(),i}))}}}}),import_onnx3,ortFbs2,Attribute,init_attribute=__esm({"web/lib/onnxjs/attribute.ts"(){init_ort_generated(),import_onnx3=__toESM(require_onnx()),init_tensor2(),init_util(),ortFbs2=onnxruntime.experimental.fbs,Attribute=class t{constructor(e){if(this._attributes=new Map,null!=e){for(const n of e)n instanceof import_onnx3.onnx.AttributeProto?this._attributes.set(n.name,[t.getValue(n),t.getType(n)]):n instanceof ortFbs2.Attribute&&this._attributes.set(n.name(),[t.getValue(n),t.getType(n)]);if(this._attributes.size<e.length)throw new Error("duplicated attribute names")}}set(t,e,n){this._attributes.set(t,[n,e])}delete(t){this._attributes.delete(t)}getFloat(t,e){return this.get(t,"float",e)}getInt(t,e){return this.get(t,"int",e)}getString(t,e){return this.get(t,"string",e)}getTensor(t,e){return this.get(t,"tensor",e)}getFloats(t,e){return this.get(t,"floats",e)}getInts(t,e){return this.get(t,"ints",e)}getStrings(t,e){return this.get(t,"strings",e)}getTensors(t,e){return this.get(t,"tensors",e)}get(t,e,n){const B=this._attributes.get(t);if(void 0===B){if(void 0!==n)return n;throw new Error(`required attribute not found: ${t}`)}if(B[1]!==e)throw new Error(`type mismatch: expected ${e} but got ${B[1]}`);return B[0]}static getType(t){const e=t instanceof import_onnx3.onnx.AttributeProto?t.type:t.type();switch(e){case import_onnx3.onnx.AttributeProto.AttributeType.FLOAT:return"float";case import_onnx3.onnx.AttributeProto.AttributeType.INT:return"int";case import_onnx3.onnx.AttributeProto.AttributeType.STRING:return"string";case import_onnx3.onnx.AttributeProto.AttributeType.TENSOR:return"tensor";case import_onnx3.onnx.AttributeProto.AttributeType.FLOATS:return"floats";case import_onnx3.onnx.AttributeProto.AttributeType.INTS:return"ints";case import_onnx3.onnx.AttributeProto.AttributeType.STRINGS:return"strings";case import_onnx3.onnx.AttributeProto.AttributeType.TENSORS:return"tensors";default:throw new Error(`attribute type is not supported yet: ${import_onnx3.onnx.AttributeProto.AttributeType[e]}`)}}static getValue(t){const e=t instanceof import_onnx3.onnx.AttributeProto?t.type:t.type();if(e===import_onnx3.onnx.AttributeProto.AttributeType.GRAPH||e===import_onnx3.onnx.AttributeProto.AttributeType.GRAPHS)throw new Error("graph attribute is not supported yet");const n=this.getValueNoCheck(t);if(e===import_onnx3.onnx.AttributeProto.AttributeType.INT&&LongUtil.isLong(n))return LongUtil.longToNumber(n);if(e===import_onnx3.onnx.AttributeProto.AttributeType.INTS){const t=n,e=new Array(t.length);for(let n=0;n<t.length;n++){const B=t[n];e[n]=LongUtil.longToNumber(B)}return e}if(e===import_onnx3.onnx.AttributeProto.AttributeType.TENSOR)return t instanceof import_onnx3.onnx.AttributeProto?Tensor3.fromProto(n):Tensor3.fromOrtTensor(n);if(e===import_onnx3.onnx.AttributeProto.AttributeType.TENSORS){if(t instanceof import_onnx3.onnx.AttributeProto){return n.map((t=>Tensor3.fromProto(t)))}if(t instanceof ortFbs2.Attribute){return n.map((t=>Tensor3.fromOrtTensor(t)))}}if(e===import_onnx3.onnx.AttributeProto.AttributeType.STRING&&t instanceof import_onnx3.onnx.AttributeProto){return decodeUtf8String(n)}if(e===import_onnx3.onnx.AttributeProto.AttributeType.STRINGS&&t instanceof import_onnx3.onnx.AttributeProto){return n.map(decodeUtf8String)}return n}static getValueNoCheck(t){return t instanceof import_onnx3.onnx.AttributeProto?this.getValueNoCheckFromOnnxFormat(t):this.getValueNoCheckFromOrtFormat(t)}static getValueNoCheckFromOnnxFormat(t){switch(t.type){case import_onnx3.onnx.AttributeProto.AttributeType.FLOAT:return t.f;case import_onnx3.onnx.AttributeProto.AttributeType.INT:return t.i;case import_onnx3.onnx.AttributeProto.AttributeType.STRING:return t.s;case import_onnx3.onnx.AttributeProto.AttributeType.TENSOR:return t.t;case import_onnx3.onnx.AttributeProto.AttributeType.GRAPH:return t.g;case import_onnx3.onnx.AttributeProto.AttributeType.FLOATS:return t.floats;case import_onnx3.onnx.AttributeProto.AttributeType.INTS:return t.ints;case import_onnx3.onnx.AttributeProto.AttributeType.STRINGS:return t.strings;case import_onnx3.onnx.AttributeProto.AttributeType.TENSORS:return t.tensors;case import_onnx3.onnx.AttributeProto.AttributeType.GRAPHS:return t.graphs;default:throw new Error(`unsupported attribute type: ${import_onnx3.onnx.AttributeProto.AttributeType[t.type]}`)}}static getValueNoCheckFromOrtFormat(t){switch(t.type()){case ortFbs2.AttributeType.FLOAT:return t.f();case ortFbs2.AttributeType.INT:return t.i();case ortFbs2.AttributeType.STRING:return t.s();case ortFbs2.AttributeType.TENSOR:return t.t();case ortFbs2.AttributeType.GRAPH:return t.g();case ortFbs2.AttributeType.FLOATS:return t.floatsArray();case ortFbs2.AttributeType.INTS:{const e=[];for(let n=0;n<t.intsLength();n++)e.push(t.ints(n));return e}case ortFbs2.AttributeType.STRINGS:{const e=[];for(let n=0;n<t.stringsLength();n++)e.push(t.strings(n));return e}case ortFbs2.AttributeType.TENSORS:{const e=[];for(let n=0;n<t.tensorsLength();n++)e.push(t.tensors(n));return e}default:throw new Error(`unsupported attribute type: ${ortFbs2.AttributeType[t.type()]}`)}}}}}),import_onnx4,ortFbs3,Graph,Value,Node,GraphImpl,init_graph=__esm({"web/lib/onnxjs/graph.ts"(){init_attribute(),init_ort_generated(),import_onnx4=__toESM(require_onnx()),init_tensor2(),init_util(),ortFbs3=onnxruntime.experimental.fbs,Graph={from:(t,e)=>new GraphImpl(t,e)},Value=class{constructor(t){this._from=void 0,this._to=[],this.tensor=void 0,this.type=void 0,t&&(this.type=ProtoUtil.tensorValueTypeFromProto(t.type.tensorType))}get from(){return this._from}get to(){return this._to}},Node=class{constructor(t,e){t instanceof import_onnx4.onnx.NodeProto?(this.name=t.name,this.opType=t.opType,this.attributes=new Attribute(t.attribute)):t instanceof ortFbs3.Node&&(this.name=e??t.name(),this.opType=t.opType(),this.attributes=new Attribute(ProtoUtil.tensorAttributesFromORTFormat(t))),this.inputs=[],this.outputs=[],this.executeNode=!0}},GraphImpl=class{constructor(t,e){if(!t)throw new TypeError("graph is empty");this.buildGraph(t),this.transformGraph(e),this.checkIsAcyclic()}getInputIndices(){return this._allInputIndices}getInputNames(){return this._allInputNames}getOutputIndices(){return this._allOutputIndices}getOutputNames(){return this._allOutputNames}getValues(){return this._allData}getNodes(){return this._nodes}buildGraph(t){if(t instanceof import_onnx4.onnx.GraphProto)this.buildGraphFromOnnxFormat(t);else{if(!(t instanceof ortFbs3.Graph))throw new TypeError("Graph type is not supported.");this.buildGraphFromOrtFormat(t)}}buildGraphFromOnnxFormat(t){const e=new Map;this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];const n=new Map;if(!t.input)throw new Error("missing information in graph: input");const B=[];for(const n of t.input){if(e.has(n.name))throw new Error(`duplicated input name: ${n.name}`);const t=this._allData.push(new Value(n))-1;e.set(n.name,t),B.push(n.name)}if(!t.initializer)throw new Error("missing information in graph: initializer");for(const n of t.initializer){let t=e.get(n.name);if(void 0===t){const B=new Value;B.type={shape:{dims:ProtoUtil.tensorDimsFromProto(n.dims)},tensorType:ProtoUtil.tensorDataTypeFromProto(n.dataType)},t=this._allData.push(B)-1,e.set(n.name,t)}this._allData[t]._from=-1,this._allData[t].tensor=Tensor3.fromProto(n)}for(let t=0;t<this._allData.length;t++)this._allData[t].tensor||(this._allInputIndices.push(t),this._allInputNames.push(B[t]));if(!t.output)throw new Error("missing information in graph: output");for(const n of t.output){if(e.has(n.name))throw new Error(`duplicated output name: ${n.name}`);const t=this._allData.push(new Value(n))-1;e.set(n.name,t),this._allOutputIndices.push(t),this._allOutputNames.push(n.name)}if(!t.node)throw new Error("missing information in graph: node");for(const e of t.node){if(!e.name)for(let t=0;;t++){const B=`unnamed_${e.opType}_${t}`;if(!n.has(B)){e.name=B;break}}if(n.has(e.name))throw new Error(`duplicated node name: ${e.name}`);const t=this._nodes.push(new Node(e))-1;n.set(e.name,t)}for(let n=0;n<this._nodes.length;n++){const B=this._nodes[n],s=t.node[n];if(!s.output)throw new Error(`missing output for node: ${s.name}`);for(const t of s.output){let F=e.get(t);if(void 0===F&&(F=this._allData.push(new Value)-1,e.set(t,F)),B.outputs.push(F),void 0!==this._allData[F]._from)throw new Error(`multiple nodes output to one data value: ${F}`);if(this._allData[F]._from=n,"Constant"===s.opType){if(!s.attribute||1!==s.attribute.length||!s.attribute[0].t)throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");if(!s.output||1!==s.output.length)throw new Error("missing output or incorrect number of outputs for this Constant operator");B.outputs.pop(),B.executeNode=!1,this._allData[F]._from=-1,this._allData[F].tensor=Tensor3.fromProto(s.attribute[0].t)}}}for(let n=0;n<this._nodes.length;n++){const B=this._nodes[n],s=t.node[n];if(!s.input)throw new Error(`missing input for node: ${s.name}`);for(const t of s.input){const F=e.get(t);if(void 0===F){if(""===t&&(3===s.input.length||4===s.input.length)&&"Resize"===s.opType)continue;throw new Error(`unrecognized input '${t}' for node: ${s.name}`)}B.inputs.push(F),this._allData[F]._to.push(n)}}return!0}buildGraphFromOrtFormat(t){const e=new Map;this._allData=[],this._allInputIndices=[],this._allInputNames=[],this._allOutputIndices=[],this._allOutputNames=[],this._nodes=[];const n=new Map,B=[];for(let n=0;n<t.inputsLength();n++){const s=t.inputs(n);if(e.has(s))throw new Error(`duplicated input name: ${s}`);for(let n=0;n<t.nodeArgsLength();n++)if(t.nodeArgs(n)?.name()===s){const F=new Value,Q=t.nodeArgs(n)?.type()?.valueType();if(Q!==ortFbs3.TypeInfoValue.tensor_type)throw new Error("Unexpected value type for the nodeArg.");const U=t.nodeArgs(n).type().value(new ortFbs3.TensorTypeAndShape),i=ProtoUtil.tensorDataTypeFromProto(U.elemType()),a=U.shape(),l=[];for(let t=0;t<a.dimLength();t++)l.push(LongUtil.longToNumber(a.dim(t).value().dimValue()));F.type={shape:{dims:l},tensorType:i};const c=this._allData.push(F)-1;e.set(s,c),B.push(s)}}for(let n=0;n<t.initializersLength();n++){const B=t.initializers(n);let s=e.get(B.name());if(void 0===s){const t=new Value,n=ProtoUtil.tensorDimsFromORTFormat(B),F=ProtoUtil.tensorDataTypeFromProto(B.dataType());t.type={shape:{dims:n},tensorType:F},s=this._allData.push(t)-1,e.set(B.name(),s)}this._allData[s]._from=-1,this._allData[s].tensor=Tensor3.fromOrtTensor(B)}for(let t=0;t<this._allData.length;t++)this._allData[t].tensor||(this._allInputIndices.push(t),this._allInputNames.push(B[t]));for(let n=0;n<t.outputsLength();n++){const B=t.outputs(n);if(e.has(B))throw new Error(`duplicated output name: ${B}`);const s=this._allData.push(new Value)-1;e.set(B,s),this._allOutputIndices.push(s),this._allOutputNames.push(B)}if(!t.nodes)throw new Error("missing information in graph: node");for(let e=0;e<t.nodesLength();e++){const B=t.nodes(e);let s=B.name();if(!s)for(let t=0;s=`unnamed_${B.opType()}_${t}`,n.has(s);t++);if(n.has(s))throw new Error(`duplicated node name: ${s}`);const F=this._nodes.push(new Node(B,s))-1;n.set(s,F)}for(let n=0;n<this._nodes.length;n++){const B=this._nodes[n],s=t.nodes(n);if(null==s)throw new Error(`No node exists at index ${n}`);if(0===s?.outputsLength())throw new Error(`missing output for node: ${s.name}`);for(let t=0;t<s?.outputsLength();t++){const F=s?.outputs(t);let Q=e.get(F);if(void 0===Q&&(Q=this._allData.push(new Value)-1,e.set(F,Q)),B.outputs.push(Q),void 0!==this._allData[Q]._from)throw new Error(`multiple nodes output to one data value: ${Q}`);if(this._allData[Q]._from=n,"Constant"===s.opType()){if(1!==s.attributesLength()||!s.attributes(0).t())throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");if(1!==s.outputsLength())throw new Error("missing output or incorrect number of outputs for this Constant operator");B.outputs.pop(),B.executeNode=!1,this._allData[Q]._from=-1,this._allData[Q].tensor=Tensor3.fromOrtTensor(s.attributes(0).t())}}}for(let n=0;n<this._nodes.length;n++){const B=this._nodes[n],s=t.nodes(n);if(0===s.inputsLength())throw new Error(`missing input for node: ${s.name}`);for(let t=0;t<s.inputsLength();t++){const F=s.inputs(t),Q=e.get(F);if(void 0===Q)throw new Error(`unrecognized input '${F}' for node: ${s.name()}`);B.inputs.push(Q),this._allData[Q]._to.push(n)}}}checkIsAcyclic(){const t=new Set;this._allInputIndices.forEach((e=>{this._allData[e]._to.forEach((e=>{t.add(e)}))}));const e=Array.from(t),n=new Array(this._nodes.length).fill("white");for(;e.length>0;){const t=e.pop();"gray"===n[t]?n[t]="black":(e.push(t),n[t]="gray",this._nodes[t].outputs.forEach((B=>{const s=this._allData[B];if(void 0!==s.tensor)throw new Error("node outputs should not be initialized");if(s._from!==t)throw new Error("from property of the Value object doesn't match index of Node being processed");s._to.forEach((t=>{if("gray"===n[t])throw new Error("model graph is cyclic");"white"===n[t]&&e.push(t)}))})))}}transformGraph(t){this.removeAllIdentityNodes(),this.removeAllDropoutNodes(),this.fuseConvActivationNodes(),t&&t.transformGraph(this),this.finalizeGraph()}finalizeGraph(){let t=0;const e=new Array(this._nodes.length,0);let n=0;for(let t=0;t<this._nodes.length;t++)e[t]=n,this._nodes[t].executeNode?(n!==t&&(this._nodes[n]=this._nodes[t]),n++):this._nodes[t].outputs.forEach((t=>{this._allData[t]._from=-2}));this._nodes.splice(n,this._nodes.length-n);for(let t=0;t<this._allData.length;t++){const n=this._allData[t];void 0!==n._from&&-1!==n._from&&-2!==n._from&&(n._from=e[n._from]);for(let t=0;t<n._to.length;t++){if(!(n._to[t]>=0))throw new Error("Trying to update a removed node");n._to[t]=e[n._to[t]]}}t=0;for(let e=0;e<this._allData.length;e++)if(-2!==this._allData[e].from||-1!==this._allOutputIndices.indexOf(e+t)){if(t>0){let n=-1;void 0!==this._allData[e].from&&-1!==this._allData[e].from?(n=this._nodes[this._allData[e].from].outputs.indexOf(e+t),-1!==n&&(this._nodes[this._allData[e].from].outputs[n]=e)):(n=this._allInputIndices.indexOf(e+t),-1!==n&&(this._allInputIndices[n]=e)),this._allData[e].to.forEach((B=>{n=this._nodes[B].inputs.indexOf(e+t),-1!==n&&(this._nodes[B].inputs[n]=e)})),0===this._allData[e].to.length&&(n=this._allOutputIndices.indexOf(e+t),-1!==n&&(this._allOutputIndices[n]=e))}}else t++,this._allData.splice(e,1),e--}deleteNode(t){const e=this._nodes[t];if(e.outputs.length>1)for(let t=1;t<e.outputs.length;t++)if(this._allData[e.outputs[t]].to.length>0)throw new Error("Node deletion with more than one output connected to other nodes is not supported. ");e.executeNode=!1;const n=e.inputs[0],B=e.outputs[0],s=this._allData[B].to;for(let n=0;n<e.inputs.length;n++){const B=this._allData[e.inputs[n]].to.indexOf(t);if(-1===B)throw new Error("The Value object doesn't have the current Node in it's 'to' property ");this._allData[e.inputs[n]].to.splice(B,1)}this._allData[B]._to=[];const F=this._allOutputIndices.indexOf(B);if(-1!==F&&(this._allOutputIndices[F]=n),s&&s.length>0)for(const t of s){const e=this._nodes[t].inputs.indexOf(B);if(-1===e)throw new Error("The Node object doesn't have the output Value in it's 'inputs' property ");this._nodes[t].inputs[e]=n,this._allData[n].to.push(t)}}removeAllDropoutNodes(){let t=0;for(const e of this._nodes){if("Dropout"===e.opType){if(1!==e.inputs.length)throw new Error("Dropout nodes should only contain one input. ");if(1!==e.outputs.length&&2!==e.outputs.length)throw new Error("Dropout nodes should contain either 1 or 2 output(s)");if(2===e.outputs.length&&0!==this._allData[e.outputs[1]]._to.length)throw new Error("Dropout nodes's second output should not be referenced by other nodes");this.deleteNode(t)}t++}}removeAllIdentityNodes(){let t=0;for(const e of this._nodes)"Identity"===e.opType&&this.deleteNode(t),t++}isActivation(t){switch(t.opType){case"Relu":case"Sigmoid":case"Clip":return!0;default:return!1}}fuseConvActivationNodes(){for(const t of this._nodes)if("Conv"===t.opType){const e=this._allData[t.outputs[0]]._to;if(1===e.length&&this.isActivation(this._nodes[e[0]])){const n=this._nodes[e[0]];if("Clip"===n.opType)if(1===n.inputs.length)try{t.attributes.set("activation_params","floats",[n.attributes.getFloat("min"),n.attributes.getFloat("max")])}catch(e){t.attributes.set("activation_params","floats",[MIN_CLIP,MAX_CLIP])}else{if(!(n.inputs.length>=3&&void 0!==this._allData[n.inputs[1]].tensor&&void 0!==this._allData[n.inputs[2]].tensor))continue;t.attributes.set("activation_params","floats",[this._allData[n.inputs[1]].tensor.floatData[0],this._allData[n.inputs[2]].tensor.floatData[0]])}t.attributes.set("activation","string",n.opType),this.deleteNode(e[0])}}}}}}),import_onnx5,ortFbs4,Model,init_model=__esm({"web/lib/onnxjs/model.ts"(){init_flatbuffers(),init_graph(),init_ort_generated(),import_onnx5=__toESM(require_onnx()),init_util(),ortFbs4=onnxruntime.experimental.fbs,Model=class{constructor(){}load(t,e,n){if(!n)try{return void this.loadFromOnnxFormat(t,e)}catch(t){if(void 0!==n)throw t}this.loadFromOrtFormat(t,e)}loadFromOnnxFormat(t,e){const n=import_onnx5.onnx.ModelProto.decode(t);if(LongUtil.longToNumber(n.irVersion)<3)throw new Error("only support ONNX model with IR_VERSION>=3");this._opsets=n.opsetImport.map((t=>({domain:t.domain,version:LongUtil.longToNumber(t.version)}))),this._graph=Graph.from(n.graph,e)}loadFromOrtFormat(t,e){const n=new flatbuffers.ByteBuffer(t),B=ortFbs4.InferenceSession.getRootAsInferenceSession(n).model();if(LongUtil.longToNumber(B.irVersion())<3)throw new Error("only support ONNX model with IR_VERSION>=3");this._opsets=[];for(let t=0;t<B.opsetImportLength();t++){const e=B.opsetImport(t);this._opsets.push({domain:e?.domain(),version:LongUtil.longToNumber(e.version())})}this._graph=Graph.from(B.graph(),e)}get graph(){return this._graph}get opsets(){return this._opsets}}}}),Session,init_session=__esm({"web/lib/onnxjs/session.ts"(){init_promises(),init_backend2(),init_execution_plan(),init_instrument(),init_model(),Session=class{constructor(t={}){this._initialized=!1,this.backendHint=t.backendHint,this.profiler=Profiler.create(t.profiler),this.context={profiler:this.profiler,graphInputTypes:[],graphInputDims:[]}}get inputNames(){return this._model.graph.getInputNames()}get outputNames(){return this._model.graph.getOutputNames()}startProfiling(){this.profiler.start()}endProfiling(){this.profiler.stop()}async loadModel(t,e,n){await this.profiler.event("session","Session.loadModel",(async()=>{const B=await resolveBackend2(this.backendHint);if(this.sessionHandler=B.createSessionHandler(this.context),this._model=new Model,"string"==typeof t){const e=t.endsWith(".ort");if("undefined"!=typeof process&&process.versions&&process.versions.node){const n=await readFile(t);this.initialize(n,e)}else{const n=await fetch(t),B=await n.arrayBuffer();this.initialize(new Uint8Array(B),e)}}else if(ArrayBuffer.isView(t))this.initialize(t);else{const B=new Uint8Array(t,e||0,n||t.byteLength);this.initialize(B)}}))}initialize(t,e){if(this._initialized)throw new Error("already initialized");this.profiler.event("session","Session.initialize",(()=>{const n=this.sessionHandler.transformGraph?this.sessionHandler:void 0;this._model.load(t,n,e),this.sessionHandler.onGraphInitialized&&this.sessionHandler.onGraphInitialized(this._model.graph),this.initializeOps(this._model.graph),this._executionPlan=new ExecutionPlan(this._model.graph,this._ops,this.profiler)})),this._initialized=!0}async run(t){if(!this._initialized)throw new Error("session not initialized yet");return this.profiler.event("session","Session.run",(async()=>{const e=this.normalizeAndValidateInputs(t),n=await this._executionPlan.execute(this.sessionHandler,e);return this.createOutput(n)}))}normalizeAndValidateInputs(t){const e=this._model.graph.getInputNames();if(Array.isArray(t)){if(t.length!==e.length)throw new Error(`incorrect input array length: expected ${e.length} but got ${t.length}`)}else{if(t.size!==e.length)throw new Error(`incorrect input map size: expected ${e.length} but got ${t.size}`);const n=new Array(t.size);let B=0;for(let s=0;s<e.length;++s){const F=t.get(e[s]);if(!F)throw new Error(`missing input tensor for: '${name}'`);n[B++]=F}t=n}if(this.context.graphInputTypes&&0!==this.context.graphInputTypes.length&&this.context.graphInputDims&&0!==this.context.graphInputDims.length)this.validateInputTensorDims(this.context.graphInputDims,t,!1);else{const e=this._model.graph.getInputIndices(),n=this._model.graph.getValues(),B=new Array(e.length);for(let s=0;s<e.length;++s){const F=n[e[s]];B[s]=F.type.shape.dims,this.context.graphInputTypes.push(F.type.tensorType),this.context.graphInputDims.push(t[s].dims)}this.validateInputTensorDims(B,t,!0)}return this.validateInputTensorTypes(this.context.graphInputTypes,t),t}validateInputTensorTypes(t,e){for(let n=0;n<e.length;n++){const B=t[n],s=e[n].type;if(B!==s)throw new Error(`input tensor[${n}] check failed: expected type '${B}' but got ${s}`)}}validateInputTensorDims(t,e,n){for(let B=0;B<e.length;B++){const s=t[B],F=e[B].dims;if(!this.compareTensorDims(s,F,n))throw new Error(`input tensor[${B}] check failed: expected shape '[${s.join(",")}]' but got [${F.join(",")}]`)}}compareTensorDims(t,e,n){if(t.length!==e.length)return!1;for(let B=0;B<t.length;++B)if(t[B]!==e[B]&&(!n||0!==t[B]))return!1;return!0}createOutput(t){const e=this._model.graph.getOutputNames();if(t.length!==e.length)throw new Error("expected number of outputs do not match number of generated outputs");const n=new Map;for(let B=0;B<e.length;++B)n.set(e[B],t[B]);return n}initializeOps(t){const e=t.getNodes();this._ops=new Array(e.length);for(let n=0;n<e.length;n++)this._ops[n]=this.sessionHandler.resolve(e[n],this._model.opsets,t)}}}}),OnnxjsSessionHandler,init_session_handler_inference=__esm({"web/lib/onnxjs/session-handler-inference.ts"(){init_esm(),init_tensor2(),OnnxjsSessionHandler=class{constructor(t){this.session=t,this.inputNames=this.session.inputNames,this.outputNames=this.session.outputNames}async dispose(){}async run(t,e,n){const B=new Map;for(const e in t)if(Object.hasOwnProperty.call(t,e)){const n=t[e];B.set(e,new Tensor3(n.dims,n.type,void 0,void 0,n.data))}const s=await this.session.run(B),F={};return s.forEach(((t,e)=>{F[e]=new Tensor2(t.type,t.data,t.dims)})),F}startProfiling(){this.session.startProfiling()}endProfiling(){this.session.endProfiling()}}}}),backend_onnxjs_exports={},OnnxjsBackend,onnxjsBackend;__export(backend_onnxjs_exports,{onnxjsBackend:()=>onnxjsBackend});var init_backend_onnxjs=__esm({"web/lib/backend-onnxjs.ts"(){init_session(),init_session_handler_inference(),onnxjsBackend=new(OnnxjsBackend=class{async init(){}async createInferenceSessionHandler(t,e){const n=new Session(e);return await n.loadModel(t),new OnnxjsSessionHandler(n)}})}}),cpus,init_node_os=__esm({"nodejs-ignore:node:os"(){cpus=void 0}}),join,init_node_path=__esm({"nodejs-ignore:node:path"(){join=void 0}}),fs_exports={},readFile2,readFileSync,createReadStream;__export(fs_exports,{createReadStream:()=>createReadStream,readFile:()=>readFile2,readFileSync:()=>readFileSync});var init_fs=__esm({"nodejs-ignore:fs"(){readFile2=void 0,readFileSync=void 0,createReadStream=void 0}}),path_exports={},join2;__export(path_exports,{join:()=>join2});var init_path=__esm({"nodejs-ignore:path"(){join2=void 0}}),require_ort_wasm_simd_jsep=__commonJS({"web/lib/wasm/binding/ort-wasm-simd.jsep.js"(t,e){var n,B=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,"undefined"!=typeof __filename&&(n=n||__filename),function(t={}){var e,B,s=t;s.ready=new Promise(((t,n)=>{e=t,B=n})),s.mountExternalData=(t,e)=>{(s.Fa||(s.Fa=new Map)).set(t,e)},s.unmountExternalData=()=>{delete s.Fa},s.jsepInit=(t,e,n,B,F,Q,U,i)=>{s.ab=t,s.Qa=e,s.Sa=n,s.La=B,s.Ra=F,s.sa=Q,s.Ta=U,s.Ua=i,e=(t,e,n)=>(...B)=>{const s=gt,F=e?.();B=t(...B);const Q=e?.();return F!==Q&&(t=Q,n(F),e=n=null),gt!=s?new Promise(((t,e)=>{bt={resolve:t,reject:e}})):B},n=e=>async(...n)=>{try{if(s.Ea)throw Error("Session already started");const B=s.Ea={Va:n[0],errors:[]},F=await e(...n);if(s.Ea!==B)throw Error("Session mismatch");t.flush();const Q=B.errors;if(0<Q.length){let t=await Promise.all(Q);if(t=t.filter((t=>t)),0<t.length)throw Error(t.join("\n"))}return F}finally{s.Ea=null}},s._OrtRun=n(e(s._OrtRun,(()=>s._OrtRun),(t=>s._OrtRun=t))),s._OrtRunWithBinding=n(e(s._OrtRunWithBinding,(()=>s._OrtRunWithBinding),(t=>s._OrtRunWithBinding=t))),s._OrtBindInput=e(s._OrtBindInput,(()=>s._OrtBindInput),(t=>s._OrtBindInput=t)),s.jsepRegisterBuffer=(e,n,B,s)=>t.registerBuffer(e,n,B,s),s.jsepUnregisterBuffers=e=>{t.unregisterBuffers(e)},s.jsepGetBuffer=e=>t.getBuffer(e),s.jsepCreateDownloader=(e,n,B)=>t.createDownloader(e,n,B)};var F,Q,U,i=Object.assign({},s),a="./this.program",l=(t,e)=>{throw e},c="object"==typeof window,g="function"==typeof importScripts,d="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,I="";if(d){var o=(init_fs(),__toCommonJS(fs_exports)),r=(init_path(),__toCommonJS(path_exports));I=g?r.dirname(I)+"/":__dirname+"/",F=(t,e)=>(t=H(t)?new URL(t):r.normalize(t),o.readFileSync(t,e?void 0:"utf8")),U=t=>((t=F(t,!0)).buffer||(t=new Uint8Array(t)),t),Q=(t,e,n,B=!0)=>{t=H(t)?new URL(t):r.normalize(t),o.readFile(t,B?void 0:"utf8",((t,s)=>{t?n(t):e(B?s.buffer:s)}))},!s.thisProgram&&1<process.argv.length&&(a=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),l=(t,e)=>{throw process.exitCode=t,e},s.inspect=()=>"[Emscripten Module object]"}else(c||g)&&(g?I=self.location.href:"undefined"!=typeof document&&document.currentScript&&(I=document.currentScript.src),n&&(I=n),I=0!==I.indexOf("blob:")?I.substr(0,I.replace(/[?#].*/,"").lastIndexOf("/")+1):"",F=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},g&&(U=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),Q=(t,e,n)=>{var B=new XMLHttpRequest;B.open("GET",t,!0),B.responseType="arraybuffer",B.onload=()=>{200==B.status||0==B.status&&B.response?e(B.response):n()},B.onerror=n,B.send(null)});var u=console.log.bind(console),b=console.error.bind(console);Object.assign(s,i),i=null,"object"!=typeof WebAssembly&&E("no native wasm support detected");var C,p,m,G,V,x,h,Z,S=!1;function y(){var t=C.buffer;s.HEAP8=m=new Int8Array(t),s.HEAP16=new Int16Array(t),s.HEAPU8=G=new Uint8Array(t),s.HEAPU16=new Uint16Array(t),s.HEAP32=V=new Int32Array(t),s.HEAPU32=x=new Uint32Array(t),s.HEAPF32=h=new Float32Array(t),s.HEAPF64=Z=new Float64Array(t)}var A=[],X=[],R=[],L=0,W=null,N=null;function E(t){throw b(t="Aborted("+t+")"),S=!0,p=1,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),B(t),t}var T,Y=t=>t.startsWith("data:application/octet-stream;base64,"),H=t=>t.startsWith("file://");if(!Y(T="ort-wasm-simd.wasm")){var J=T;T=s.locateFile?s.locateFile(J,I):I+J}function f(t){if(U)return U(t);throw"both async and sync fetching of the wasm failed"}function k(t,e,n){return function(t){if(c||g){if("function"==typeof fetch&&!H(t))return fetch(t,{credentials:"same-origin"}).then((e=>{if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((()=>f(t)));if(Q)return new Promise(((e,n)=>{Q(t,(t=>e(new Uint8Array(t))),n)}))}return Promise.resolve().then((()=>f(t)))}(t).then((t=>WebAssembly.instantiate(t,e))).then((t=>t)).then(n,(t=>{b(`failed to asynchronously prepare wasm: ${t}`),E(t)}))}var w,v={931056:(t,e,n,B)=>{if(void 0===s||!s.Fa)return 1;if((t=j(t>>>0)).startsWith("./")&&(t=t.substring(2)),!(t=s.Fa.get(t)))return 2;if((e>>>=0)+(n>>>=0)>t.byteLength)return 3;try{return G.set(t.subarray(e,e+n),B>>>0>>>0),0}catch{return 4}},931557:t=>s.Qa(t),931590:t=>s.Sa(t),931622:(t,e,n)=>{s.La(t,e,n,!0)},931661:(t,e,n)=>{s.La(t,e,n)},931694:t=>{s.sa("Abs",t,void 0)},931745:t=>{s.sa("Neg",t,void 0)},931796:t=>{s.sa("Floor",t,void 0)},931849:t=>{s.sa("Ceil",t,void 0)},931901:t=>{s.sa("Reciprocal",t,void 0)},931959:t=>{s.sa("Sqrt",t,void 0)},932011:t=>{s.sa("Exp",t,void 0)},932062:t=>{s.sa("Erf",t,void 0)},932113:t=>{s.sa("Sigmoid",t,void 0)},932168:t=>{s.sa("Log",t,void 0)},932219:t=>{s.sa("Sin",t,void 0)},932270:t=>{s.sa("Cos",t,void 0)},932321:t=>{s.sa("Tan",t,void 0)},932372:t=>{s.sa("Asin",t,void 0)},932424:t=>{s.sa("Acos",t,void 0)},932476:t=>{s.sa("Atan",t,void 0)},932528:t=>{s.sa("Sinh",t,void 0)},932580:t=>{s.sa("Cosh",t,void 0)},932632:t=>{s.sa("Asinh",t,void 0)},932685:t=>{s.sa("Acosh",t,void 0)},932738:t=>{s.sa("Atanh",t,void 0)},932791:t=>{s.sa("Tanh",t,void 0)},932843:t=>{s.sa("Not",t,void 0)},932894:(t,e,n)=>{s.sa("Clip",t,{min:e,max:n})},932963:t=>{s.sa("Clip",t,void 0)},933015:(t,e)=>{s.sa("Elu",t,{alpha:e})},933073:t=>{s.sa("Relu",t,void 0)},933125:(t,e)=>{s.sa("LeakyRelu",t,{alpha:e})},933189:(t,e)=>{s.sa("ThresholdedRelu",t,{alpha:e})},933259:(t,e)=>{s.sa("Cast",t,{to:e})},933317:t=>{s.sa("Add",t,void 0)},933368:t=>{s.sa("Sub",t,void 0)},933419:t=>{s.sa("Mul",t,void 0)},933470:t=>{s.sa("Div",t,void 0)},933521:t=>{s.sa("Pow",t,void 0)},933572:t=>{s.sa("Equal",t,void 0)},933625:t=>{s.sa("Greater",t,void 0)},933680:t=>{s.sa("GreaterOrEqual",t,void 0)},933742:t=>{s.sa("Less",t,void 0)},933794:t=>{s.sa("LessOrEqual",t,void 0)},933853:(t,e,n,B,F)=>{s.sa("ReduceMean",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},934012:(t,e,n,B,F)=>{s.sa("ReduceMax",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},934170:(t,e,n,B,F)=>{s.sa("ReduceMin",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},934328:(t,e,n,B,F)=>{s.sa("ReduceProd",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},934487:(t,e,n,B,F)=>{s.sa("ReduceSum",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},934645:(t,e,n,B,F)=>{s.sa("ReduceL1",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},934802:(t,e,n,B,F)=>{s.sa("ReduceL2",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},934959:(t,e,n,B,F)=>{s.sa("ReduceLogSum",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},935120:(t,e,n,B,F)=>{s.sa("ReduceSumSquare",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},935284:(t,e,n,B,F)=>{s.sa("ReduceLogSumExp",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},935448:t=>{s.sa("Where",t,void 0)},935501:(t,e,n)=>{s.sa("Transpose",t,{perm:e?Array.from(V.subarray(e>>>0,n>>>0)):[]})},935609:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I,o)=>{s.sa("ConvTranspose",t,{format:a?"NHWC":"NCHW",autoPad:e,dilations:[n],group:B,kernel_shape:[F],pads:[Q,U],strides:[i],wIsConst:()=>!!m[l>>>0],outputPadding:c?Array.from(V.subarray(c>>>0,g>>>0)):[],outputShape:d?Array.from(V.subarray(d>>>0,I>>>0)):[],activation:j(o)})},936011:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I)=>{s.sa("ConvTranspose",t,{format:i?"NHWC":"NCHW",autoPad:e,dilations:Array.from(V.subarray(n>>>0,2+(n>>>0)>>>0)),group:B,kernelShape:Array.from(V.subarray(F>>>0,2+(F>>>0)>>>0)),pads:Array.from(V.subarray(Q>>>0,4+(Q>>>0)>>>0)),strides:Array.from(V.subarray(U>>>0,2+(U>>>0)>>>0)),wIsConst:()=>!!m[a>>>0],outputPadding:l?Array.from(V.subarray(l>>>0,c>>>0)):[],outputShape:g?Array.from(V.subarray(g>>>0,d>>>0)):[],activation:j(I)})},936576:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I,o)=>{s.sa("ConvTranspose",t,{format:a?"NHWC":"NCHW",autoPad:e,dilations:[n],group:B,kernel_shape:[F],pads:[Q,U],strides:[i],wIsConst:()=>!!m[l>>>0],outputPadding:c?Array.from(V.subarray(c>>>0,g>>>0)):[],outputShape:d?Array.from(V.subarray(d>>>0,I>>>0)):[],activation:j(o)})},936978:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I)=>{s.sa("ConvTranspose",t,{format:i?"NHWC":"NCHW",autoPad:e,dilations:Array.from(V.subarray(n>>>0,2+(n>>>0)>>>0)),group:B,kernelShape:Array.from(V.subarray(F>>>0,2+(F>>>0)>>>0)),pads:Array.from(V.subarray(Q>>>0,4+(Q>>>0)>>>0)),strides:Array.from(V.subarray(U>>>0,2+(U>>>0)>>>0)),wIsConst:()=>!!m[a>>>0],outputPadding:l?Array.from(V.subarray(l>>>0,c>>>0)):[],outputShape:g?Array.from(V.subarray(g>>>0,d>>>0)):[],activation:j(I)})},937543:(t,e)=>{s.sa("GlobalAveragePool",t,{format:e?"NHWC":"NCHW"})},937634:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I,o,r)=>{s.sa("AveragePool",t,{format:r?"NHWC":"NCHW",auto_pad:e,ceil_mode:n,count_include_pad:B,storage_order:F,dilations:[Q,U],kernel_shape:[i,a],pads:[l,c,g,d],strides:[I,o]})},937918:(t,e)=>{s.sa("GlobalAveragePool",t,{format:e?"NHWC":"NCHW"})},938009:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I,o,r)=>{s.sa("AveragePool",t,{format:r?"NHWC":"NCHW",auto_pad:e,ceil_mode:n,count_include_pad:B,storage_order:F,dilations:[Q,U],kernel_shape:[i,a],pads:[l,c,g,d],strides:[I,o]})},938293:(t,e)=>{s.sa("GlobalMaxPool",t,{format:e?"NHWC":"NCHW"})},938380:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I,o,r)=>{s.sa("MaxPool",t,{format:r?"NHWC":"NCHW",auto_pad:e,ceil_mode:n,count_include_pad:B,storage_order:F,dilations:[Q,U],kernel_shape:[i,a],pads:[l,c,g,d],strides:[I,o]})},938660:(t,e)=>{s.sa("GlobalMaxPool",t,{format:e?"NHWC":"NCHW"})},938747:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I,o,r)=>{s.sa("MaxPool",t,{format:r?"NHWC":"NCHW",auto_pad:e,ceil_mode:n,count_include_pad:B,storage_order:F,dilations:[Q,U],kernel_shape:[i,a],pads:[l,c,g,d],strides:[I,o]})},939027:(t,e,n,B,F)=>{s.sa("Gemm",t,{alpha:e,beta:n,transA:B,transB:F})},939131:t=>{s.sa("MatMul",t,void 0)},939185:(t,e,n,B)=>{s.sa("ArgMax",t,{keepDims:!!e,selectLastIndex:!!n,axis:B})},939293:(t,e,n,B)=>{s.sa("ArgMin",t,{keepDims:!!e,selectLastIndex:!!n,axis:B})},939401:(t,e)=>{s.sa("Softmax",t,{axis:e})},939464:(t,e)=>{s.sa("Concat",t,{axis:e})},939524:(t,e,n,B,F)=>{s.sa("Split",t,{axis:e,numOutputs:n,splitSizes:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},939664:t=>{s.sa("Expand",t,void 0)},939718:(t,e)=>{s.sa("Gather",t,{axis:Number(e)})},939789:(t,e)=>{s.sa("GatherElements",t,{axis:Number(e)})},939868:(t,e,n,B,F,Q,U,i,a,l,c)=>{s.sa("Resize",t,{antialias:e,axes:n?Array.from(V.subarray(n>>>0,B>>>0)):[],coordinateTransformMode:j(F),cubicCoeffA:Q,excludeOutside:U,extrapolationValue:i,keepAspectRatioPolicy:j(a),mode:j(l),nearestMode:j(c)})},940214:(t,e,n,B,F,Q,U)=>{s.sa("Slice",t,{starts:e?Array.from(V.subarray(e>>>0,n>>>0)):[],ends:B?Array.from(V.subarray(B>>>0,F>>>0)):[],axes:Q?Array.from(V.subarray(Q>>>0,U>>>0)):[]})},940430:t=>{s.sa("Tile",t,void 0)},940482:(t,e,n)=>{s.sa("LayerNormalization",t,{axis:Number(e),epsilon:Number(n)})},940589:(t,e,n)=>{s.sa("InstanceNormalization",t,{epsilon:e,format:n?"NHWC":"NCHW"})},940703:(t,e,n)=>{s.sa("InstanceNormalization",t,{epsilon:e,format:n?"NHWC":"NCHW"})},940817:t=>{s.sa("Range",t,void 0)},940870:(t,e)=>{s.sa("Einsum",t,{equation:j(e)})},940951:(t,e,n,B,F)=>{s.sa("Pad",t,{mode:e,value:n,pads:B?Array.from(V.subarray(B>>>0,F>>>0)):[]})},941078:(t,e,n,B,F,Q)=>{s.sa("BatchNormalization",t,{epsilon:e,momentum:n,spatial:!!F,trainingMode:!!B,format:Q?"NHWC":"NCHW"})},941247:(t,e,n,B,F,Q)=>{s.sa("BatchNormalization",t,{epsilon:e,momentum:n,spatial:!!F,trainingMode:!!B,format:Q?"NHWC":"NCHW"})},941416:(t,e,n)=>{s.sa("CumSum",t,{exclusive:Number(e),reverse:Number(n)})},941513:(t,e,n,B,F,Q,U,i,a)=>{s.sa("Attention",t,{numHeads:e,isUnidirectional:n,maskFilterValue:B,scale:F,doRotary:Q,qkvHiddenSizes:U?Array.from(V.subarray(Number(i)>>>0,Number(i)+U>>>0)):[],pastPresentShareBuffer:!!a})},941785:t=>{s.sa("Gelu",t,void 0)},941837:(t,e,n,B,F,Q)=>{s.sa("MultiHeadAttention",t,{numHeads:e,isUnidirectional:n,maskFilterValue:B,scale:F,doRotary:Q})},941996:t=>{s.sa("BiasAdd",t,void 0)},942051:t=>{s.sa("BiasSplitGelu",t,void 0)},942112:(t,e)=>{s.sa("SkipLayerNormalization",t,{epsilon:e})},942193:(t,e,n,B,F,Q,U,i,a,l,c,g,d)=>{s.sa("Conv",t,{format:a?"NHWC":"NCHW",auto_pad:e,dilations:[n],group:B,kernel_shape:[F],pads:Q?Array.from(V.subarray(Q>>>0,U>>>0)):[],strides:[i],w_is_const:()=>!!m[l>>>0],activation:j(c),activation_params:g?Array.from(h.subarray(g>>>0,d>>>0)):[]})},942563:(t,e,n,B,F,Q,U,i,a,l,c,g,d,I,o,r)=>{s.sa("Conv",t,{format:g?"NHWC":"NCHW",auto_pad:e,dilations:[n,B],group:F,kernel_shape:[Q,U],pads:i?Array.from(V.subarray(i>>>0,a>>>0)):[],strides:[l,c],w_is_const:()=>!!m[d>>>0],activation:j(I),activation_params:o?Array.from(h.subarray(o>>>0,r>>>0)):[]})},942954:t=>{s.Ta(t)},942988:(t,e)=>s.Ua(t,e,s.Ea.Va,s.Ea.errors)};function z(t){this.name="ExitStatus",this.message=`Program terminated with exit(${t})`,this.status=t}function D(t){this.Ja=t-24,this.Oa=function(t){x[this.Ja+4>>>2>>>0]=t},this.Na=function(t){x[this.Ja+8>>>2>>>0]=t},this.$a=function(t,e){this.Ma(),this.Oa(t),this.Na(e)},this.Ma=function(){x[this.Ja+16>>>2>>>0]=0}}var M,O="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,P=(t,e,n)=>{var B=(e>>>=0)+n;for(n=e;t[n]&&!(n>=B);)++n;if(16<n-e&&t.buffer&&O)return O.decode(t.subarray(e,n));for(B="";e<n;){var s=t[e++];if(128&s){var F=63&t[e++];if(192==(224&s))B+=String.fromCharCode((31&s)<<6|F);else{var Q=63&t[e++];65536>(s=224==(240&s)?(15&s)<<12|F<<6|Q:(7&s)<<18|F<<12|Q<<6|63&t[e++])?B+=String.fromCharCode(s):(s-=65536,B+=String.fromCharCode(55296|s>>10,56320|1023&s))}}else B+=String.fromCharCode(s)}return B},j=(t,e)=>(t>>>=0)?P(G,t,e):"",_=t=>{for(var e=0,n=0;n<t.length;++n){var B=t.charCodeAt(n);127>=B?e++:2047>=B?e+=2:55296<=B&&57343>=B?(e+=4,++n):e+=3}return e},K=(t,e,n,B)=>{if(!(0<B))return 0;var s=n>>>=0;B=n+B-1;for(var F=0;F<t.length;++F){var Q=t.charCodeAt(F);if(55296<=Q&&57343>=Q&&(Q=65536+((1023&Q)<<10)|1023&t.charCodeAt(++F)),127>=Q){if(n>=B)break;e[n++>>>0]=Q}else{if(2047>=Q){if(n+1>=B)break;e[n++>>>0]=192|Q>>6}else{if(65535>=Q){if(n+2>=B)break;e[n++>>>0]=224|Q>>12}else{if(n+3>=B)break;e[n++>>>0]=240|Q>>18,e[n++>>>0]=128|Q>>12&63}e[n++>>>0]=128|Q>>6&63}e[n++>>>0]=128|63&Q}}return e[n>>>0]=0,n-s},$=t=>0==t%4&&(0!=t%100||0==t%400),q=[0,31,60,91,121,152,182,213,244,274,305,335],tt=[0,31,59,90,120,151,181,212,243,273,304,334],et=t=>{var e=_(t)+1,n=ht(e);return n&&K(t,G,n,e),n},nt=[],Bt=(t,e)=>{nt.length=0;for(var n;n=G[t++>>>0];){var B=105!=n;e+=(B&=112!=n)&&e%8?4:0,nt.push(112==n?x[e>>>2>>>0]:105==n?V[e>>>2>>>0]:Z[e>>>3>>>0]),e+=B?8:4}return nt},st={},Ft=()=>{if(!M){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:a||"./this.program"};for(t in st)void 0===st[t]?delete e[t]:e[t]=st[t];var n=[];for(t in e)n.push(`${t}=${e[t]}`);M=n}return M},Qt=[null,[],[]],Ut=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31];function at(t,e,n,B){function s(t,e,n){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=n[0]+t;return t}function F(t,e){return s(t,e,"0")}function Q(t,e){function n(t){return 0>t?-1:0<t?1:0}var B;return 0===(B=n(t.getFullYear()-e.getFullYear()))&&0===(B=n(t.getMonth()-e.getMonth()))&&(B=n(t.getDate()-e.getDate())),B}function U(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function i(t){var e=t.Ca;for(t=new Date(new Date(t.Da+1900,0,1).getTime());0<e;){var n=t.getMonth(),B=($(t.getFullYear())?Ut:it)[n];if(!(e>B-t.getDate())){t.setDate(t.getDate()+e);break}e-=B-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=U(new Date(t.getFullYear(),0,4)),n=U(n),0>=Q(e,t)?0>=Q(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}t>>>=0,e>>>=0,n>>>=0;var a=x[40+(B>>>=0)>>>2>>>0];for(var l in B={Ya:V[B>>>2>>>0],Xa:V[B+4>>>2>>>0],Ga:V[B+8>>>2>>>0],Ka:V[B+12>>>2>>>0],Ha:V[B+16>>>2>>>0],Da:V[B+20>>>2>>>0],xa:V[B+24>>>2>>>0],Ca:V[B+28>>>2>>>0],bb:V[B+32>>>2>>>0],Wa:V[B+36>>>2>>>0],Za:a?j(a):""},n=j(n),a={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})n=n.replace(new RegExp(l,"g"),a[l]);var c="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),g="January February March April May June July August September October November December".split(" ");for(l in a={"%a":t=>c[t.xa].substring(0,3),"%A":t=>c[t.xa],"%b":t=>g[t.Ha].substring(0,3),"%B":t=>g[t.Ha],"%C":t=>F((t.Da+1900)/100|0,2),"%d":t=>F(t.Ka,2),"%e":t=>s(t.Ka,2," "),"%g":t=>i(t).toString().substring(2),"%G":t=>i(t),"%H":t=>F(t.Ga,2),"%I":t=>(0==(t=t.Ga)?t=12:12<t&&(t-=12),F(t,2)),"%j":t=>{for(var e=0,n=0;n<=t.Ha-1;e+=($(t.Da+1900)?Ut:it)[n++]);return F(t.Ka+e,3)},"%m":t=>F(t.Ha+1,2),"%M":t=>F(t.Xa,2),"%n":()=>"\n","%p":t=>0<=t.Ga&&12>t.Ga?"AM":"PM","%S":t=>F(t.Ya,2),"%t":()=>"\t","%u":t=>t.xa||7,"%U":t=>F(Math.floor((t.Ca+7-t.xa)/7),2),"%V":t=>{var e=Math.floor((t.Ca+7-(t.xa+6)%7)/7);if(2>=(t.xa+371-t.Ca-2)%7&&e++,e)53==e&&(4==(n=(t.xa+371-t.Ca)%7)||3==n&&$(t.Da)||(e=1));else{e=52;var n=(t.xa+7-t.Ca-1)%7;(4==n||5==n&&$(t.Da%400-1))&&e++}return F(e,2)},"%w":t=>t.xa,"%W":t=>F(Math.floor((t.Ca+7-(t.xa+6)%7)/7),2),"%y":t=>(t.Da+1900).toString().substring(2),"%Y":t=>t.Da+1900,"%z":t=>{var e=0<=(t=t.Wa);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":t=>t.Za,"%%":()=>"%"},n=n.replace(/%%/g,"\0\0"),a)n.includes(l)&&(n=n.replace(new RegExp(l,"g"),a[l](B)));return l=function(t){var e=Array(_(t)+1);return K(t,e,0,e.length),e}(n=n.replace(/\0\0/g,"%")),l.length>e?0:(m.set(l,t>>>0),l.length-1)}var lt=t=>{try{t()}catch(t){E(t)}},ct=0,gt=null,dt=0,It=[],ot={},rt={},ut=0,bt=null,Ct=[];function pt(t){if(!S){if(0===ct){var e=!1,n=!1;t(((t=0)=>{if(!S&&(dt=t,e=!0,n)){ct=2,lt((()=>Wt(gt))),"undefined"!=typeof Browser&&Browser.Ia.Pa&&Browser.Ia.resume(),t=!1;try{var B=(0,Gt[rt[V[gt+8>>>2>>>0]]])()}catch(e){B=e,t=!0}var s=!1;if(!gt){var F=bt;F&&(bt=null,(t?F.reject:F.resolve)(B),s=!0)}if(t&&!s)throw B}})),n=!0,e||(ct=1,gt=function(){var t=ht(65548),e=t+12;x[t>>>2>>>0]=e,x[t+4>>>2>>>0]=e+65536,e=It[0];var n=ot[e];return void 0===n&&(n=ut++,ot[e]=n,rt[n]=e),V[t+8>>>2>>>0]=n,t}(),"undefined"!=typeof Browser&&Browser.Ia.Pa&&Browser.Ia.pause(),lt((()=>Rt(gt))))}else 2===ct?(ct=0,lt(Nt),Zt(gt),gt=null,Ct.forEach((t=>{if(!S)try{t();try{p=p=t=p,s.onExit?.(t),S=!0,l(t,new z(t))}catch(t){t instanceof z||"unwind"==t||l(1,t)}}catch(t){t instanceof z||"unwind"==t||l(1,t)}}))):E(`invalid state: ${ct}`);return dt}}var mt={n:function(t,e,n){return function(t){return pt((e=>{t().then(e)}))}((async()=>{await s.Ra(t,e,n)}))},a:function(t,e,n){throw new D(t>>>=0).$a(e>>>0,n>>>0),t},g:function(){return 0},J:function(){},A:function(){},C:function(){},L:function(){return 0},H:function(){},D:function(){},G:function(){},l:function(){},B:function(){},y:function(){},I:function(){},z:function(){},m:()=>1,q:function(t,e,n){t=e+2097152>>>0<4194305-!!t?(t>>>0)+4294967296*e:NaN,n>>>=0,t=new Date(1e3*t),V[n>>>2>>>0]=t.getUTCSeconds(),V[n+4>>>2>>>0]=t.getUTCMinutes(),V[n+8>>>2>>>0]=t.getUTCHours(),V[n+12>>>2>>>0]=t.getUTCDate(),V[n+16>>>2>>>0]=t.getUTCMonth(),V[n+20>>>2>>>0]=t.getUTCFullYear()-1900,V[n+24>>>2>>>0]=t.getUTCDay(),V[n+28>>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(t,e,n){t=e+2097152>>>0<4194305-!!t?(t>>>0)+4294967296*e:NaN,n>>>=0,t=new Date(1e3*t),V[n>>>2>>>0]=t.getSeconds(),V[n+4>>>2>>>0]=t.getMinutes(),V[n+8>>>2>>>0]=t.getHours(),V[n+12>>>2>>>0]=t.getDate(),V[n+16>>>2>>>0]=t.getMonth(),V[n+20>>>2>>>0]=t.getFullYear()-1900,V[n+24>>>2>>>0]=t.getDay(),V[n+28>>>2>>>0]=($(t.getFullYear())?q:tt)[t.getMonth()]+t.getDate()-1|0,V[n+36>>>2>>>0]=-60*t.getTimezoneOffset(),e=new Date(t.getFullYear(),6,1).getTimezoneOffset();var B=new Date(t.getFullYear(),0,1).getTimezoneOffset();V[n+32>>>2>>>0]=0|(e!=B&&t.getTimezoneOffset()==Math.min(B,e))},s:function(t){t>>>=0;var e=new Date(V[t+20>>>2>>>0]+1900,V[t+16>>>2>>>0],V[t+12>>>2>>>0],V[t+8>>>2>>>0],V[t+4>>>2>>>0],V[t>>>2>>>0],0),n=V[t+32>>>2>>>0],B=e.getTimezoneOffset(),s=new Date(e.getFullYear(),6,1).getTimezoneOffset(),F=new Date(e.getFullYear(),0,1).getTimezoneOffset(),Q=Math.min(F,s);return 0>n?V[t+32>>>2>>>0]=Number(s!=F&&Q==B):0<n!=(Q==B)&&(s=Math.max(F,s),e.setTime(e.getTime()+6e4*((0<n?Q:s)-B))),V[t+24>>>2>>>0]=e.getDay(),V[t+28>>>2>>>0]=($(e.getFullYear())?q:tt)[e.getMonth()]+e.getDate()-1|0,V[t>>>2>>>0]=e.getSeconds(),V[t+4>>>2>>>0]=e.getMinutes(),V[t+8>>>2>>>0]=e.getHours(),V[t+12>>>2>>>0]=e.getDate(),V[t+16>>>2>>>0]=e.getMonth(),V[t+20>>>2>>>0]=e.getYear(),t=e.getTime(),isNaN(t)?(V[xt()>>>2>>>0]=61,t=-1):t/=1e3,St((w=t,1<=+Math.abs(w)?0<w?+Math.floor(w/4294967296)>>>0:~~+Math.ceil((w-+(~~w>>>0))/4294967296)>>>0:0)),t>>>0},o:function(){return-52},p:function(){},w:function(t,e,n){function B(t){return(t=t.toTimeString().match(/\(([A-Za-z ]+)\)$/))?t[1]:"GMT"}n>>>=0;var s=(new Date).getFullYear(),F=new Date(s,0,1),Q=new Date(s,6,1);s=F.getTimezoneOffset();var U=Q.getTimezoneOffset();x[t>>>0>>>2>>>0]=60*Math.max(s,U),V[e>>>0>>>2>>>0]=Number(s!=U),t=B(F),e=B(Q),t=et(t),e=et(e),U<s?(x[n>>>2>>>0]=t,x[n+4>>>2>>>0]=e):(x[n>>>2>>>0]=e,x[n+4>>>2>>>0]=t)},e:()=>{E("")},b:function(t,e,n){return t>>>=0,e=Bt(e>>>0,n>>>0),v[t].apply(null,e)},i:function(t,e,n){return t>>>=0,e=Bt(e>>>0,n>>>0),v[t].apply(null,e)},h:()=>Date.now(),x:function(){return 4294901760},c:()=>performance.now(),K:function(t,e,n){return e>>>=0,G.copyWithin(t>>>0>>>0,e>>>0,e+(n>>>0)>>>0)},u:function(t){t>>>=0;var e=G.length;if(4294901760<t)return!1;for(var n=1;4>=n;n*=2){var B=e*(1+.2/n);B=Math.min(B,t+100663296);var s=Math;B=Math.max(t,B);t:{s=(s.min.call(s,4294901760,B+(65536-B%65536)%65536)-C.buffer.byteLength+65535)/65536;try{C.grow(s),y();var F=1;break t}catch(t){}F=void 0}if(F)return!0}return!1},E:function(t,e){t>>>=0,e>>>=0;var n=0;return Ft().forEach(((B,s)=>{var F=e+n;for(s=x[t+4*s>>>2>>>0]=F,F=0;F<B.length;++F)m[s++>>>0>>>0]=B.charCodeAt(F);m[s>>>0>>>0]=0,n+=B.length+1})),0},F:function(t,e){t>>>=0,e>>>=0;var n=Ft();x[t>>>2>>>0]=n.length;var B=0;return n.forEach((t=>B+=t.length+1)),x[e>>>2>>>0]=B,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(t,e,n,B){e>>>=0,n>>>=0,B>>>=0;for(var s=0,F=0;F<n;F++){var Q=x[e>>>2>>>0],U=x[e+4>>>2>>>0];e+=8;for(var i=0;i<U;i++){var a=G[Q+i>>>0],l=Qt[t];0===a||10===a?((1===t?u:b)(P(l,0)),l.length=0):l.push(a)}s+=U}return x[B>>>2>>>0]=s,0},v:at,d:function(t,e,n,B){return at(t>>>0,e>>>0,n>>>0,B>>>0)}},Gt=function(){function t(t){return Gt=t.exports,Gt=function(){var t=Gt,e={};for(let[n,B]of Object.entries(t))e[n]="function"==typeof B?function(){It.push(n);try{return B.apply(null,arguments)}finally{S||(It.pop(),gt&&1===ct&&0===It.length&&(ct=0,lt(Lt),"undefined"!=typeof Fibers&&Fibers.cb()))}}:B;return e}(),Gt=function(){var t=Gt;t=Object.assign({},t);var e=t=>()=>t()>>>0,n=t=>e=>t(e)>>>0;return t.pa=e(t.pa),t.qa=n(t.qa),t.ua=e(t.ua),t.wa=n(t.wa),t}(),C=Gt.M,y(),X.unshift(Gt.N),0==--L&&(null!==W&&(clearInterval(W),W=null),N&&(t=N,N=null,t())),Gt}var e={a:mt};if(L++,s.instantiateWasm)try{return s.instantiateWasm(e,t)}catch(t){b(`Module.instantiateWasm callback failed with error: ${t}`),B(t)}return function(t,e){var n=T;return"function"!=typeof WebAssembly.instantiateStreaming||Y(n)||H(n)||d||"function"!=typeof fetch?k(n,t,e):fetch(n,{credentials:"same-origin"}).then((B=>WebAssembly.instantiateStreaming(B,t).then(e,(function(B){return b(`wasm streaming compile failed: ${B}`),b("falling back to ArrayBuffer instantiation"),k(n,t,e)}))))}(e,(function(e){t(e.instance)})).catch(B),{}}();s._OrtInit=(t,e)=>(s._OrtInit=Gt.O)(t,e),s._OrtGetLastError=(t,e)=>(s._OrtGetLastError=Gt.P)(t,e),s._OrtCreateSessionOptions=(t,e,n,B,F,Q,U,i,a,l)=>(s._OrtCreateSessionOptions=Gt.Q)(t,e,n,B,F,Q,U,i,a,l),s._OrtAppendExecutionProvider=(t,e)=>(s._OrtAppendExecutionProvider=Gt.R)(t,e),s._OrtAddFreeDimensionOverride=(t,e,n)=>(s._OrtAddFreeDimensionOverride=Gt.S)(t,e,n),s._OrtAddSessionConfigEntry=(t,e,n)=>(s._OrtAddSessionConfigEntry=Gt.T)(t,e,n),s._OrtReleaseSessionOptions=t=>(s._OrtReleaseSessionOptions=Gt.U)(t),s._OrtCreateSession=(t,e,n)=>(s._OrtCreateSession=Gt.V)(t,e,n),s._OrtReleaseSession=t=>(s._OrtReleaseSession=Gt.W)(t),s._OrtGetInputOutputCount=(t,e,n)=>(s._OrtGetInputOutputCount=Gt.X)(t,e,n),s._OrtGetInputName=(t,e)=>(s._OrtGetInputName=Gt.Y)(t,e),s._OrtGetOutputName=(t,e)=>(s._OrtGetOutputName=Gt.Z)(t,e),s._OrtFree=t=>(s._OrtFree=Gt._)(t),s._OrtCreateTensor=(t,e,n,B,F,Q)=>(s._OrtCreateTensor=Gt.$)(t,e,n,B,F,Q),s._OrtGetTensorData=(t,e,n,B,F)=>(s._OrtGetTensorData=Gt.aa)(t,e,n,B,F),s._OrtReleaseTensor=t=>(s._OrtReleaseTensor=Gt.ba)(t),s._OrtCreateRunOptions=(t,e,n,B)=>(s._OrtCreateRunOptions=Gt.ca)(t,e,n,B),s._OrtAddRunConfigEntry=(t,e,n)=>(s._OrtAddRunConfigEntry=Gt.da)(t,e,n),s._OrtReleaseRunOptions=t=>(s._OrtReleaseRunOptions=Gt.ea)(t),s._OrtCreateBinding=t=>(s._OrtCreateBinding=Gt.fa)(t),s._OrtBindInput=(t,e,n)=>(s._OrtBindInput=Gt.ga)(t,e,n),s._OrtBindOutput=(t,e,n,B)=>(s._OrtBindOutput=Gt.ha)(t,e,n,B),s._OrtClearBoundOutputs=t=>(s._OrtClearBoundOutputs=Gt.ia)(t),s._OrtReleaseBinding=t=>(s._OrtReleaseBinding=Gt.ja)(t),s._OrtRunWithBinding=(t,e,n,B,F)=>(s._OrtRunWithBinding=Gt.ka)(t,e,n,B,F),s._OrtRun=(t,e,n,B,F,Q,U,i)=>(s._OrtRun=Gt.la)(t,e,n,B,F,Q,U,i),s._OrtEndProfiling=t=>(s._OrtEndProfiling=Gt.ma)(t),s._JsepOutput=(t,e,n)=>(s._JsepOutput=Gt.na)(t,e,n),s._JsepGetNodeName=t=>(s._JsepGetNodeName=Gt.oa)(t);var Vt,xt=()=>(xt=Gt.pa)(),ht=s._malloc=t=>(ht=s._malloc=Gt.qa)(t),Zt=s._free=t=>(Zt=s._free=Gt.ra)(t),St=t=>(St=Gt.ta)(t),yt=()=>(yt=Gt.ua)(),At=t=>(At=Gt.va)(t),Xt=t=>(Xt=Gt.wa)(t),Rt=t=>(Rt=Gt.ya)(t),Lt=()=>(Lt=Gt.za)(),Wt=t=>(Wt=Gt.Aa)(t),Nt=()=>(Nt=Gt.Ba)();function Et(){if(!(0<L)){if(s.preRun)for("function"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;){var t=s.preRun.shift();A.unshift(t)}for(;0<A.length;)A.shift()(s);if(!(0<L||Vt||(Vt=!0,s.calledRun=!0,S))){for(;0<X.length;)X.shift()(s);for(e(s);0<R.length;)R.shift()(s)}}}return s.___start_em_js=943100,s.___stop_em_js=943261,s.stackAlloc=Xt,s.stackSave=yt,s.stackRestore=At,s.UTF8ToString=j,s.stringToUTF8=(t,e,n)=>K(t,G,e,n),s.lengthBytesUTF8=_,N=function t(){Vt||Et(),Vt||(N=t)},Et(),t.ready});"object"==typeof t&&"object"==typeof e?e.exports=B:"function"==typeof define&&define.amd&&define([],(()=>B))}}),require_worker_threads=__commonJS({"nodejs-ignore:worker_threads"(){}}),require_perf_hooks=__commonJS({"nodejs-ignore:perf_hooks"(){}}),os_exports={},cpus2;__export(os_exports,{cpus:()=>cpus2});var init_os=__esm({"nodejs-ignore:os"(){cpus2=void 0}}),require_ort_wasm_simd_threaded_jsep=__commonJS({"web/lib/wasm/binding/ort-wasm-simd-threaded.jsep.js"(t,e){var n,B=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,"undefined"!=typeof __filename&&(n=n||__filename),function(t={}){function e(){return A.buffer!=L.buffer&&J(),L}function B(){return A.buffer!=L.buffer&&J(),W}function s(){return A.buffer!=L.buffer&&J(),N}function F(){return A.buffer!=L.buffer&&J(),E}function Q(){return A.buffer!=L.buffer&&J(),T}function U(){return A.buffer!=L.buffer&&J(),Y}var i,a,l=t;l.ready=new Promise(((t,e)=>{i=t,a=e})),l.mountExternalData=(t,e)=>{(l.cb||(l.cb=new Map)).set(t,e)},l.unmountExternalData=()=>{delete l.cb},l.jsepInit=(t,e,n,B,s,F,Q,U)=>{l.Mb=t,l.wb=e,l.yb=n,l.kb=B,l.xb=s,l.Ea=F,l.zb=Q,l.Ab=U,e=(t,e,n)=>(...B)=>{const s=ce,F=e?.();B=t(...B);const Q=e?.();return F!==Q&&(t=Q,n(F),e=n=null),ce!=s?new Promise(((t,e)=>{ue={resolve:t,reject:e}})):B},n=e=>async(...n)=>{try{if(l.bb)throw Error("Session already started");const B=l.bb={Cb:n[0],errors:[]},s=await e(...n);if(l.bb!==B)throw Error("Session mismatch");t.flush();const F=B.errors;if(0<F.length){let t=await Promise.all(F);if(t=t.filter((t=>t)),0<t.length)throw Error(t.join("\n"))}return s}finally{l.bb=null}},l._OrtRun=n(e(l._OrtRun,(()=>l._OrtRun),(t=>l._OrtRun=t))),l._OrtRunWithBinding=n(e(l._OrtRunWithBinding,(()=>l._OrtRunWithBinding),(t=>l._OrtRunWithBinding=t))),l._OrtBindInput=e(l._OrtBindInput,(()=>l._OrtBindInput),(t=>l._OrtBindInput=t)),l.jsepRegisterBuffer=(e,n,B,s)=>t.registerBuffer(e,n,B,s),l.jsepUnregisterBuffers=e=>{t.unregisterBuffers(e)},l.jsepGetBuffer=e=>t.getBuffer(e),l.jsepCreateDownloader=(e,n,B)=>t.createDownloader(e,n,B)};var c,g,d,I=Object.assign({},l),o="./this.program",r=(t,e)=>{throw e},u="object"==typeof window,b="function"==typeof importScripts,C="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,p=l.ENVIRONMENT_IS_PTHREAD||!1,m="";function G(t){return l.locateFile?l.locateFile(t,m):m+t}if(C){var V=(init_fs(),__toCommonJS(fs_exports)),x=(init_path(),__toCommonJS(path_exports));let t;m=b?x.dirname(m)+"/":__dirname+"/",c=(t,e)=>(t=K(t)?new URL(t):x.normalize(t),V.readFileSync(t,e?void 0:"utf8")),d=t=>((t=c(t,!0)).buffer||(t=new Uint8Array(t)),t),g=(t,e,n,B=!0)=>{t=K(t)?new URL(t):x.normalize(t),V.readFile(t,B?void 0:"utf8",((t,s)=>{t?n(t):e(B?s.buffer:s)}))},!l.thisProgram&&1<process.argv.length&&(o=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),r=(t,e)=>{throw process.exitCode=t,e},l.inspect=()=>"[Emscripten Module object]";try{t=require_worker_threads()}catch(t){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),t}global.Worker=t.Worker}else(u||b)&&(b?m=self.location.href:"undefined"!=typeof document&&document.currentScript&&(m=document.currentScript.src),void 0!==n&&n&&(m=n),m=0!==m.indexOf("blob:")?m.substr(0,m.replace(/[?#].*/,"").lastIndexOf("/")+1):"",C||(c=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},b&&(d=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),g=(t,e,n)=>{var B=new XMLHttpRequest;B.open("GET",t,!0),B.responseType="arraybuffer",B.onload=()=>{200==B.status||0==B.status&&B.response?e(B.response):n()},B.onerror=n,B.send(null)}));C&&"undefined"==typeof performance&&(global.performance=require_perf_hooks().performance);var h=console.log.bind(console),Z=console.error.bind(console);C&&(h=(...t)=>V.writeSync(1,t.join(" ")+"\n"),Z=(...t)=>V.writeSync(2,t.join(" ")+"\n"));var S=h,y=Z;Object.assign(l,I),I=null,"object"!=typeof WebAssembly&&P("no native wasm support detected");var A,X,R,L,W,N,E,T,Y,H=!1;function J(){var t=A.buffer;l.HEAP8=L=new Int8Array(t),l.HEAP16=new Int16Array(t),l.HEAPU8=W=new Uint8Array(t),l.HEAPU16=new Uint16Array(t),l.HEAP32=N=new Int32Array(t),l.HEAPU32=E=new Uint32Array(t),l.HEAPF32=T=new Float32Array(t),l.HEAPF64=Y=new Float64Array(t)}var f=16777216;if(p)A=l.wasmMemory;else if(l.wasmMemory)A=l.wasmMemory;else if(!((A=new WebAssembly.Memory({initial:f/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw y("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&y("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");J(),f=A.buffer.byteLength;var k=[],w=[],v=[],z=0,D=null,M=null;function O(){if(0==--z&&(null!==D&&(clearInterval(D),D=null),M)){var t=M;M=null,t()}}function P(t){throw y(t="Aborted("+t+")"),H=!0,R=1,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),a(t),t}var j,_=t=>t.startsWith("data:application/octet-stream;base64,"),K=t=>t.startsWith("file://");function $(t){if(d)return d(t);throw"both async and sync fetching of the wasm failed"}function q(t,e,n){return function(t){if(u||b){if("function"==typeof fetch&&!K(t))return fetch(t,{credentials:"same-origin"}).then((e=>{if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((()=>$(t)));if(g)return new Promise(((e,n)=>{g(t,(t=>e(new Uint8Array(t))),n)}))}return Promise.resolve().then((()=>$(t)))}(t).then((t=>WebAssembly.instantiate(t,e))).then((t=>t)).then(n,(t=>{y(`failed to asynchronously prepare wasm: ${t}`),P(t)}))}_(j="ort-wasm-simd-threaded.wasm")||(j=G(j));var tt,et={932428:(t,e,n,s)=>{if(void 0===l||!l.cb)return 1;if((t=it(t>>>0)).startsWith("./")&&(t=t.substring(2)),!(t=l.cb.get(t)))return 2;if(s>>>=0,(e>>>=0)+(n>>>=0)>t.byteLength)return 3;try{return B().set(t.subarray(e,e+n),s>>>0),0}catch{return 4}},932929:t=>l.wb(t),932962:t=>l.yb(t),932994:(t,e,n)=>{l.kb(t,e,n,!0)},933033:(t,e,n)=>{l.kb(t,e,n)},933066:t=>{l.Ea("Abs",t,void 0)},933117:t=>{l.Ea("Neg",t,void 0)},933168:t=>{l.Ea("Floor",t,void 0)},933221:t=>{l.Ea("Ceil",t,void 0)},933273:t=>{l.Ea("Reciprocal",t,void 0)},933331:t=>{l.Ea("Sqrt",t,void 0)},933383:t=>{l.Ea("Exp",t,void 0)},933434:t=>{l.Ea("Erf",t,void 0)},933485:t=>{l.Ea("Sigmoid",t,void 0)},933540:t=>{l.Ea("Log",t,void 0)},933591:t=>{l.Ea("Sin",t,void 0)},933642:t=>{l.Ea("Cos",t,void 0)},933693:t=>{l.Ea("Tan",t,void 0)},933744:t=>{l.Ea("Asin",t,void 0)},933796:t=>{l.Ea("Acos",t,void 0)},933848:t=>{l.Ea("Atan",t,void 0)},933900:t=>{l.Ea("Sinh",t,void 0)},933952:t=>{l.Ea("Cosh",t,void 0)},934004:t=>{l.Ea("Asinh",t,void 0)},934057:t=>{l.Ea("Acosh",t,void 0)},934110:t=>{l.Ea("Atanh",t,void 0)},934163:t=>{l.Ea("Tanh",t,void 0)},934215:t=>{l.Ea("Not",t,void 0)},934266:(t,e,n)=>{l.Ea("Clip",t,{min:e,max:n})},934335:t=>{l.Ea("Clip",t,void 0)},934387:(t,e)=>{l.Ea("Elu",t,{alpha:e})},934445:t=>{l.Ea("Relu",t,void 0)},934497:(t,e)=>{l.Ea("LeakyRelu",t,{alpha:e})},934561:(t,e)=>{l.Ea("ThresholdedRelu",t,{alpha:e})},934631:(t,e)=>{l.Ea("Cast",t,{to:e})},934689:t=>{l.Ea("Add",t,void 0)},934740:t=>{l.Ea("Sub",t,void 0)},934791:t=>{l.Ea("Mul",t,void 0)},934842:t=>{l.Ea("Div",t,void 0)},934893:t=>{l.Ea("Pow",t,void 0)},934944:t=>{l.Ea("Equal",t,void 0)},934997:t=>{l.Ea("Greater",t,void 0)},935052:t=>{l.Ea("GreaterOrEqual",t,void 0)},935114:t=>{l.Ea("Less",t,void 0)},935166:t=>{l.Ea("LessOrEqual",t,void 0)},935225:(t,e,n,B,F)=>{l.Ea("ReduceMean",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},935384:(t,e,n,B,F)=>{l.Ea("ReduceMax",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},935542:(t,e,n,B,F)=>{l.Ea("ReduceMin",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},935700:(t,e,n,B,F)=>{l.Ea("ReduceProd",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},935859:(t,e,n,B,F)=>{l.Ea("ReduceSum",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},936017:(t,e,n,B,F)=>{l.Ea("ReduceL1",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},936174:(t,e,n,B,F)=>{l.Ea("ReduceL2",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},936331:(t,e,n,B,F)=>{l.Ea("ReduceLogSum",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},936492:(t,e,n,B,F)=>{l.Ea("ReduceSumSquare",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},936656:(t,e,n,B,F)=>{l.Ea("ReduceLogSumExp",t,{keepDims:!!e,noopWithEmptyAxes:!!n,axes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},936820:t=>{l.Ea("Where",t,void 0)},936873:(t,e,n)=>{l.Ea("Transpose",t,{perm:e?Array.from(s().subarray(e>>>0,n>>>0)):[]})},936981:(t,n,B,F,Q,U,i,a,c,g,d,I,o,r,u)=>{l.Ea("ConvTranspose",t,{format:c?"NHWC":"NCHW",autoPad:n,dilations:[B],group:F,kernel_shape:[Q],pads:[U,i],strides:[a],wIsConst:()=>!!e()[g>>>0],outputPadding:d?Array.from(s().subarray(d>>>0,I>>>0)):[],outputShape:o?Array.from(s().subarray(o>>>0,r>>>0)):[],activation:it(u)})},937383:(t,n,B,F,Q,U,i,a,c,g,d,I,o,r)=>{l.Ea("ConvTranspose",t,{format:a?"NHWC":"NCHW",autoPad:n,dilations:Array.from(s().subarray(B>>>0,2+(B>>>0)>>>0)),group:F,kernelShape:Array.from(s().subarray(Q>>>0,2+(Q>>>0)>>>0)),pads:Array.from(s().subarray(U>>>0,4+(U>>>0)>>>0)),strides:Array.from(s().subarray(i>>>0,2+(i>>>0)>>>0)),wIsConst:()=>!!e()[c>>>0],outputPadding:g?Array.from(s().subarray(g>>>0,d>>>0)):[],outputShape:I?Array.from(s().subarray(I>>>0,o>>>0)):[],activation:it(r)})},937948:(t,n,B,F,Q,U,i,a,c,g,d,I,o,r,u)=>{l.Ea("ConvTranspose",t,{format:c?"NHWC":"NCHW",autoPad:n,dilations:[B],group:F,kernel_shape:[Q],pads:[U,i],strides:[a],wIsConst:()=>!!e()[g>>>0],outputPadding:d?Array.from(s().subarray(d>>>0,I>>>0)):[],outputShape:o?Array.from(s().subarray(o>>>0,r>>>0)):[],activation:it(u)})},938350:(t,n,B,F,Q,U,i,a,c,g,d,I,o,r)=>{l.Ea("ConvTranspose",t,{format:a?"NHWC":"NCHW",autoPad:n,dilations:Array.from(s().subarray(B>>>0,2+(B>>>0)>>>0)),group:F,kernelShape:Array.from(s().subarray(Q>>>0,2+(Q>>>0)>>>0)),pads:Array.from(s().subarray(U>>>0,4+(U>>>0)>>>0)),strides:Array.from(s().subarray(i>>>0,2+(i>>>0)>>>0)),wIsConst:()=>!!e()[c>>>0],outputPadding:g?Array.from(s().subarray(g>>>0,d>>>0)):[],outputShape:I?Array.from(s().subarray(I>>>0,o>>>0)):[],activation:it(r)})},938915:(t,e)=>{l.Ea("GlobalAveragePool",t,{format:e?"NHWC":"NCHW"})},939006:(t,e,n,B,s,F,Q,U,i,a,c,g,d,I,o,r)=>{l.Ea("AveragePool",t,{format:r?"NHWC":"NCHW",auto_pad:e,ceil_mode:n,count_include_pad:B,storage_order:s,dilations:[F,Q],kernel_shape:[U,i],pads:[a,c,g,d],strides:[I,o]})},939290:(t,e)=>{l.Ea("GlobalAveragePool",t,{format:e?"NHWC":"NCHW"})},939381:(t,e,n,B,s,F,Q,U,i,a,c,g,d,I,o,r)=>{l.Ea("AveragePool",t,{format:r?"NHWC":"NCHW",auto_pad:e,ceil_mode:n,count_include_pad:B,storage_order:s,dilations:[F,Q],kernel_shape:[U,i],pads:[a,c,g,d],strides:[I,o]})},939665:(t,e)=>{l.Ea("GlobalMaxPool",t,{format:e?"NHWC":"NCHW"})},939752:(t,e,n,B,s,F,Q,U,i,a,c,g,d,I,o,r)=>{l.Ea("MaxPool",t,{format:r?"NHWC":"NCHW",auto_pad:e,ceil_mode:n,count_include_pad:B,storage_order:s,dilations:[F,Q],kernel_shape:[U,i],pads:[a,c,g,d],strides:[I,o]})},940032:(t,e)=>{l.Ea("GlobalMaxPool",t,{format:e?"NHWC":"NCHW"})},940119:(t,e,n,B,s,F,Q,U,i,a,c,g,d,I,o,r)=>{l.Ea("MaxPool",t,{format:r?"NHWC":"NCHW",auto_pad:e,ceil_mode:n,count_include_pad:B,storage_order:s,dilations:[F,Q],kernel_shape:[U,i],pads:[a,c,g,d],strides:[I,o]})},940399:(t,e,n,B,s)=>{l.Ea("Gemm",t,{alpha:e,beta:n,transA:B,transB:s})},940503:t=>{l.Ea("MatMul",t,void 0)},940557:(t,e,n,B)=>{l.Ea("ArgMax",t,{keepDims:!!e,selectLastIndex:!!n,axis:B})},940665:(t,e,n,B)=>{l.Ea("ArgMin",t,{keepDims:!!e,selectLastIndex:!!n,axis:B})},940773:(t,e)=>{l.Ea("Softmax",t,{axis:e})},940836:(t,e)=>{l.Ea("Concat",t,{axis:e})},940896:(t,e,n,B,F)=>{l.Ea("Split",t,{axis:e,numOutputs:n,splitSizes:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},941036:t=>{l.Ea("Expand",t,void 0)},941090:(t,e)=>{l.Ea("Gather",t,{axis:Number(e)})},941161:(t,e)=>{l.Ea("GatherElements",t,{axis:Number(e)})},941240:(t,e,n,B,F,Q,U,i,a,c,g)=>{l.Ea("Resize",t,{antialias:e,axes:n?Array.from(s().subarray(n>>>0,B>>>0)):[],coordinateTransformMode:it(F),cubicCoeffA:Q,excludeOutside:U,extrapolationValue:i,keepAspectRatioPolicy:it(a),mode:it(c),nearestMode:it(g)})},941586:(t,e,n,B,F,Q,U)=>{l.Ea("Slice",t,{starts:e?Array.from(s().subarray(e>>>0,n>>>0)):[],ends:B?Array.from(s().subarray(B>>>0,F>>>0)):[],axes:Q?Array.from(s().subarray(Q>>>0,U>>>0)):[]})},941802:t=>{l.Ea("Tile",t,void 0)},941854:(t,e,n)=>{l.Ea("LayerNormalization",t,{axis:Number(e),epsilon:Number(n)})},941961:(t,e,n)=>{l.Ea("InstanceNormalization",t,{epsilon:e,format:n?"NHWC":"NCHW"})},942075:(t,e,n)=>{l.Ea("InstanceNormalization",t,{epsilon:e,format:n?"NHWC":"NCHW"})},942189:t=>{l.Ea("Range",t,void 0)},942242:(t,e)=>{l.Ea("Einsum",t,{equation:it(e)})},942323:(t,e,n,B,F)=>{l.Ea("Pad",t,{mode:e,value:n,pads:B?Array.from(s().subarray(B>>>0,F>>>0)):[]})},942450:(t,e,n,B,s,F)=>{l.Ea("BatchNormalization",t,{epsilon:e,momentum:n,spatial:!!s,trainingMode:!!B,format:F?"NHWC":"NCHW"})},942619:(t,e,n,B,s,F)=>{l.Ea("BatchNormalization",t,{epsilon:e,momentum:n,spatial:!!s,trainingMode:!!B,format:F?"NHWC":"NCHW"})},942788:(t,e,n)=>{l.Ea("CumSum",t,{exclusive:Number(e),reverse:Number(n)})},942885:(t,e,n,B,F,Q,U,i,a)=>{l.Ea("Attention",t,{numHeads:e,isUnidirectional:n,maskFilterValue:B,scale:F,doRotary:Q,qkvHiddenSizes:U?Array.from(s().subarray(Number(i)>>>0,Number(i)+U>>>0)):[],pastPresentShareBuffer:!!a})},943157:t=>{l.Ea("Gelu",t,void 0)},943209:(t,e,n,B,s,F)=>{l.Ea("MultiHeadAttention",t,{numHeads:e,isUnidirectional:n,maskFilterValue:B,scale:s,doRotary:F})},943368:t=>{l.Ea("BiasAdd",t,void 0)},943423:t=>{l.Ea("BiasSplitGelu",t,void 0)},943484:(t,e)=>{l.Ea("SkipLayerNormalization",t,{epsilon:e})},943565:(t,n,B,F,U,i,a,c,g,d,I,o,r)=>{l.Ea("Conv",t,{format:g?"NHWC":"NCHW",auto_pad:n,dilations:[B],group:F,kernel_shape:[U],pads:i?Array.from(s().subarray(i>>>0,a>>>0)):[],strides:[c],w_is_const:()=>!!e()[d>>>0],activation:it(I),activation_params:o?Array.from(Q().subarray(o>>>0,r>>>0)):[]})},943935:(t,n,B,F,U,i,a,c,g,d,I,o,r,u,b,C)=>{l.Ea("Conv",t,{format:o?"NHWC":"NCHW",auto_pad:n,dilations:[B,F],group:U,kernel_shape:[i,a],pads:c?Array.from(s().subarray(c>>>0,g>>>0)):[],strides:[d,I],w_is_const:()=>!!e()[r>>>0],activation:it(u),activation_params:b?Array.from(Q().subarray(b>>>0,C>>>0)):[]})},944326:t=>{l.zb(t)},944360:(t,e)=>l.Ab(t,e,l.bb.Cb,l.bb.errors)};function nt(t){this.name="ExitStatus",this.message=`Program terminated with exit(${t})`,this.status=t}var Bt=t=>{t.terminate(),t.onmessage=()=>{}},st=t=>{0==rt.Ya.length&&(ot(),rt.lb(rt.Ya[0]));var e=rt.Ya.pop();if(!e)return 6;rt.Za.push(e),rt.Qa[t.Xa]=e,e.Xa=t.Xa;var n={cmd:"run",start_routine:t.Db,arg:t.tb,pthread_ptr:t.Xa};return C&&e.unref(),e.postMessage(n,t.Jb),0},Ft=0,Qt="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,Ut=(t,e,n)=>{var B=(e>>>=0)+n;for(n=e;t[n]&&!(n>=B);)++n;if(16<n-e&&t.buffer&&Qt)return Qt.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(B="";e<n;){var s=t[e++];if(128&s){var F=63&t[e++];if(192==(224&s))B+=String.fromCharCode((31&s)<<6|F);else{var Q=63&t[e++];65536>(s=224==(240&s)?(15&s)<<12|F<<6|Q:(7&s)<<18|F<<12|Q<<6|63&t[e++])?B+=String.fromCharCode(s):(s-=65536,B+=String.fromCharCode(55296|s>>10,56320|1023&s))}}else B+=String.fromCharCode(s)}return B},it=(t,e)=>(t>>>=0)?Ut(B(),t,e):"",at=t=>{var e=Ee();return t=t(),Te(e),t};function lt(t,e){var n=arguments.length-2,B=arguments;return at((()=>{for(var s=Ye(8*n),F=s>>>3,Q=0;Q<n;Q++){var i=B[2+Q];U()[F+Q>>>0]=i}return Ae(t,n,s,e)}))}function ct(t){if(p)return lt(0,1,t);R=t,0<Ft||(rt.Eb(),l.onExit?.(t),H=!0),r(t,new nt(t))}var gt=t=>{if(R=t,p)throw bt(t),"unwind";ct(t)},dt=t=>{t instanceof nt||"unwind"==t||r(1,t)};function It(){for(var t=l.numThreads;t--;)ot();k.unshift((()=>{z++,function(t){p?t():Promise.all(rt.Ya.map(rt.lb)).then(t)}((()=>O()))}))}function ot(){var t=G("ort-wasm-simd-threaded.worker.js");t=new Worker(t),rt.Ya.push(t)}var rt={Ya:[],Za:[],pb:[],Qa:{},hb(){p?(rt.receiveObjectTransfer=rt.Bb,rt.threadInitTLS=rt.ob,rt.setExitStatus=rt.nb):It()},nb:t=>R=t,Nb:["$terminateWorker"],Eb:()=>{for(var t of rt.Za)Bt(t);for(t of rt.Ya)Bt(t);rt.Ya=[],rt.Za=[],rt.Qa=[]},mb:t=>{var e=t.Xa;delete rt.Qa[e],rt.Ya.push(t),rt.Za.splice(rt.Za.indexOf(t),1),t.Xa=0,Xe(e)},Bb(){},ob(){rt.pb.forEach((t=>t()))},lb:t=>new Promise((e=>{t.onmessage=n=>{var B=(n=n.data).cmd;if(n.targetThread&&n.targetThread!=xe()){var s=rt.Qa[n.targetThread];s?s.postMessage(n,n.transferList):y(`Internal error! Worker sent a message "${B}" to target pthread ${n.targetThread}, but that thread no longer exists!`)}else"checkMailbox"===B?ft():"spawnThread"===B?st(n):"cleanupThread"===B?rt.mb(rt.Qa[n.thread]):"killThread"===B?(n=n.thread,B=rt.Qa[n],delete rt.Qa[n],Bt(B),Xe(n),rt.Za.splice(rt.Za.indexOf(B),1),B.Xa=0):"cancelThread"===B?rt.Qa[n.thread].postMessage({cmd:"cancel"}):"loaded"===B?(t.loaded=!0,C&&!t.Xa&&t.unref(),e(t)):"alert"===B?alert(`Thread ${n.threadId}: ${n.text}`):"setimmediate"===n.target?t.postMessage(n):"callHandler"===B?l[n.handler](...n.args):B&&y(`worker sent an unknown command ${B}`)},t.onerror=t=>{throw y(`worker sent an error! ${t.filename}:${t.lineno}: ${t.message}`),t},C&&(t.on("message",(e=>t.onmessage({data:e}))),t.on("error",(e=>t.onerror(e))));var B,s=[];for(B of["onExit"])l.hasOwnProperty(B)&&s.push(B);t.postMessage({cmd:"load",handlers:s,urlOrBlob:l.mainScriptUrlOrBlob||n,wasmMemory:A,wasmModule:X})}))};l.PThread=rt;var ut=t=>{for(;0<t.length;)t.shift()(l)};function bt(t){if(p)return lt(1,0,t);gt(t)}function Ct(t){this.gb=t-24,this.sb=function(t){F()[this.gb+4>>>2>>>0]=t},this.rb=function(t){F()[this.gb+8>>>2>>>0]=t},this.hb=function(t,e){this.qb(),this.sb(t),this.rb(e)},this.qb=function(){F()[this.gb+16>>>2>>>0]=0}}function pt(t,e,n,B){return p?lt(2,1,t,e,n,B):mt(t,e,n,B)}function mt(t,e,n,B){if(t>>>=0,e>>>=0,n>>>=0,B>>>=0,"undefined"==typeof SharedArrayBuffer)return y("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var s=[];return p&&0===s.length?pt(t,e,n,B):(t={Db:n,Xa:t,tb:B,Jb:s},p?(t.Lb="spawnThread",postMessage(t,s),0):st(t))}function Gt(t,e,n){return p?lt(3,1,t,e,n):0}function Vt(t,e){if(p)return lt(4,1,t,e)}l.establishStackSpace=()=>{var t=xe(),e=F()[t+52>>>2>>>0];t=F()[t+56>>>2>>>0],Ne(e,e-t),Te(e)},l.invokeEntryPoint=(t,e)=>{t=He.apply(null,[t,e]),0<Ft?rt.nb(t):Re(t)};var xt=t=>{for(var e=0,n=0;n<t.length;++n){var B=t.charCodeAt(n);127>=B?e++:2047>=B?e+=2:55296<=B&&57343>=B?(e+=4,++n):e+=3}return e},ht=(t,e,n,B)=>{if(!(0<B))return 0;var s=n>>>=0;B=n+B-1;for(var F=0;F<t.length;++F){var Q=t.charCodeAt(F);if(55296<=Q&&57343>=Q&&(Q=65536+((1023&Q)<<10)|1023&t.charCodeAt(++F)),127>=Q){if(n>=B)break;e[n++>>>0]=Q}else{if(2047>=Q){if(n+1>=B)break;e[n++>>>0]=192|Q>>6}else{if(65535>=Q){if(n+2>=B)break;e[n++>>>0]=224|Q>>12}else{if(n+3>=B)break;e[n++>>>0]=240|Q>>18,e[n++>>>0]=128|Q>>12&63}e[n++>>>0]=128|Q>>6&63}e[n++>>>0]=128|63&Q}}return e[n>>>0]=0,n-s},Zt=(t,e,n)=>ht(t,B(),e,n);function St(t,e){if(p)return lt(5,1,t,e)}function yt(t,e,n){if(p)return lt(6,1,t,e,n)}function At(t,e,n){return p?lt(7,1,t,e,n):0}function Xt(t,e){if(p)return lt(8,1,t,e)}function Rt(t,e,n){if(p)return lt(9,1,t,e,n)}function Lt(t,e,n,B){if(p)return lt(10,1,t,e,n,B)}function Wt(t,e,n,B){if(p)return lt(11,1,t,e,n,B)}function Nt(t,e,n,B){if(p)return lt(12,1,t,e,n,B)}function Et(t){if(p)return lt(13,1,t)}function Tt(t,e){if(p)return lt(14,1,t,e)}function Yt(t,e,n){if(p)return lt(15,1,t,e,n)}var Ht=()=>{if(!(0<Ft))try{p?Re(R):gt(R)}catch(t){dt(t)}};function Jt(t){t>>>=0,"function"==typeof Atomics.Kb&&(Atomics.Kb(s(),t>>>2,t).value.then(ft),t+=128,Atomics.store(s(),t>>>2,1))}l.__emscripten_thread_mailbox_await=Jt;var ft=()=>{var t=xe();if(t&&(Jt(t),!H))try{Le(),Ht()}catch(t){dt(t)}};l.checkMailbox=ft;var kt=[],wt=t=>0==t%4&&(0!=t%100||0==t%400),vt=[0,31,60,91,121,152,182,213,244,274,305,335],zt=[0,31,59,90,120,151,181,212,243,273,304,334];function Dt(t,e,n,B,s,F,Q,U){return p?lt(16,1,t,e,n,B,s,F,Q,U):-52}function Mt(t,e,n,B,s,F,Q){if(p)return lt(17,1,t,e,n,B,s,F,Q)}var Ot,Pt=t=>{var e=xt(t)+1,n=he(e);return n&&Zt(t,n,e),n},jt=[],_t=(t,e)=>{jt.length=0;for(var n;n=B()[t++>>>0];){var Q=105!=n;e+=(Q&=112!=n)&&e%8?4:0,jt.push(112==n?F()[e>>>2>>>0]:105==n?s()[e>>>2>>>0]:U()[e>>>3>>>0]),e+=Q?8:4}return jt},Kt={},$t=()=>{if(!Ot){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:o||"./this.program"};for(t in Kt)void 0===Kt[t]?delete e[t]:e[t]=Kt[t];var n=[];for(t in e)n.push(`${t}=${e[t]}`);Ot=n}return Ot};function qt(t,n){if(p)return lt(18,1,t,n);t>>>=0,n>>>=0;var B=0;return $t().forEach(((s,Q)=>{var U=n+B;for(Q=F()[t+4*Q>>>2>>>0]=U,U=0;U<s.length;++U)e()[Q++>>>0>>>0]=s.charCodeAt(U);e()[Q>>>0>>>0]=0,B+=s.length+1})),0}function te(t,e){if(p)return lt(19,1,t,e);t>>>=0,e>>>=0;var n=$t();F()[t>>>2>>>0]=n.length;var B=0;return n.forEach((t=>B+=t.length+1)),F()[e>>>2>>>0]=B,0}function ee(t){return p?lt(20,1,t):52}function ne(t,e,n,B){return p?lt(21,1,t,e,n,B):52}function Be(t,e,n,B,s){return p?lt(22,1,t,e,n,B,s):70}var se=[null,[],[]];function Fe(t,e,n,s){if(p)return lt(23,1,t,e,n,s);e>>>=0,n>>>=0,s>>>=0;for(var Q=0,U=0;U<n;U++){var i=F()[e>>>2>>>0],a=F()[e+4>>>2>>>0];e+=8;for(var l=0;l<a;l++){var c=B()[i+l>>>0],g=se[t];0===c||10===c?((1===t?S:y)(Ut(g,0)),g.length=0):g.push(c)}Q+=a}return F()[s>>>2>>>0]=Q,0}var Qe=[31,29,31,30,31,30,31,31,30,31,30,31],Ue=[31,28,31,30,31,30,31,31,30,31,30,31];function ie(t,n,B,Q){function U(t,e,n){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=n[0]+t;return t}function i(t,e){return U(t,e,"0")}function a(t,e){function n(t){return 0>t?-1:0<t?1:0}var B;return 0===(B=n(t.getFullYear()-e.getFullYear()))&&0===(B=n(t.getMonth()-e.getMonth()))&&(B=n(t.getDate()-e.getDate())),B}function l(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.$a;for(t=new Date(new Date(t.ab+1900,0,1).getTime());0<e;){var n=t.getMonth(),B=(wt(t.getFullYear())?Qe:Ue)[n];if(!(e>B-t.getDate())){t.setDate(t.getDate()+e);break}e-=B-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=l(new Date(t.getFullYear(),0,4)),n=l(n),0>=a(e,t)?0>=a(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}t>>>=0,n>>>=0,B>>>=0,Q>>>=0;var g=F()[Q+40>>>2>>>0];for(var d in Q={Hb:s()[Q>>>2>>>0],Gb:s()[Q+4>>>2>>>0],eb:s()[Q+8>>>2>>>0],jb:s()[Q+12>>>2>>>0],fb:s()[Q+16>>>2>>>0],ab:s()[Q+20>>>2>>>0],Wa:s()[Q+24>>>2>>>0],$a:s()[Q+28>>>2>>>0],Ob:s()[Q+32>>>2>>>0],Fb:s()[Q+36>>>2>>>0],Ib:g?it(g):""},B=it(B),g={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})B=B.replace(new RegExp(d,"g"),g[d]);var I="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),o="January February March April May June July August September October November December".split(" ");for(d in g={"%a":t=>I[t.Wa].substring(0,3),"%A":t=>I[t.Wa],"%b":t=>o[t.fb].substring(0,3),"%B":t=>o[t.fb],"%C":t=>i((t.ab+1900)/100|0,2),"%d":t=>i(t.jb,2),"%e":t=>U(t.jb,2," "),"%g":t=>c(t).toString().substring(2),"%G":t=>c(t),"%H":t=>i(t.eb,2),"%I":t=>(0==(t=t.eb)?t=12:12<t&&(t-=12),i(t,2)),"%j":t=>{for(var e=0,n=0;n<=t.fb-1;e+=(wt(t.ab+1900)?Qe:Ue)[n++]);return i(t.jb+e,3)},"%m":t=>i(t.fb+1,2),"%M":t=>i(t.Gb,2),"%n":()=>"\n","%p":t=>0<=t.eb&&12>t.eb?"AM":"PM","%S":t=>i(t.Hb,2),"%t":()=>"\t","%u":t=>t.Wa||7,"%U":t=>i(Math.floor((t.$a+7-t.Wa)/7),2),"%V":t=>{var e=Math.floor((t.$a+7-(t.Wa+6)%7)/7);if(2>=(t.Wa+371-t.$a-2)%7&&e++,e)53==e&&(4==(n=(t.Wa+371-t.$a)%7)||3==n&&wt(t.ab)||(e=1));else{e=52;var n=(t.Wa+7-t.$a-1)%7;(4==n||5==n&&wt(t.ab%400-1))&&e++}return i(e,2)},"%w":t=>t.Wa,"%W":t=>i(Math.floor((t.$a+7-(t.Wa+6)%7)/7),2),"%y":t=>(t.ab+1900).toString().substring(2),"%Y":t=>t.ab+1900,"%z":t=>{var e=0<=(t=t.Fb);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":t=>t.Ib,"%%":()=>"%"},B=B.replace(/%%/g,"\0\0"),g)B.includes(d)&&(B=B.replace(new RegExp(d,"g"),g[d](Q)));return d=function(t){var e=Array(xt(t)+1);return ht(t,e,0,e.length),e}(B=B.replace(/\0\0/g,"%")),d.length>n?0:(((t,n)=>{e().set(t,n>>>0)})(d,t),d.length-1)}var ae=t=>{try{t()}catch(t){P(t)}},le=0,ce=null,ge=0,de=[],Ie={},oe={},re=0,ue=null,be=[];function Ce(t){if(!H){if(0===le){var e=!1,n=!1;t(((t=0)=>{if(!H&&(ge=t,e=!0,n)){le=2,ae((()=>ke(ce))),"undefined"!=typeof Browser&&Browser.ib.vb&&Browser.ib.resume(),t=!1;try{var B=function(){var t=s()[ce+8>>>2>>>0];return t=Ge[oe[t]],--Ft,t()}()}catch(e){B=e,t=!0}var F=!1;if(!ce){var Q=ue;Q&&(ue=null,(t?Q.reject:Q.resolve)(B),F=!0)}if(t&&!F)throw B}})),n=!0,e||(le=1,ce=function(){var t=he(65548),e=t+12;F()[t>>>2>>>0]=e,F()[t+4>>>2>>>0]=e+65536,e=de[0];var n=Ie[e];return void 0===n&&(n=re++,Ie[e]=n,oe[n]=e),e=n,s()[t+8>>>2>>>0]=e,t}(),"undefined"!=typeof Browser&&Browser.ib.vb&&Browser.ib.pause(),ae((()=>Je(ce))))}else 2===le?(le=0,ae(we),Ze(ce),ce=null,be.forEach((t=>{if(!H)try{t(),Ht()}catch(t){dt(t)}}))):P(`invalid state: ${le}`);return ge}}rt.hb();var pe=[ct,bt,pt,Gt,Vt,St,yt,At,Xt,Rt,Lt,Wt,Nt,Et,Tt,Yt,Dt,Mt,qt,te,ee,ne,Be,Fe],me={r:function(t,e,n){return function(t){return Ce((e=>{t().then(e)}))}((async()=>{await l.xb(t,e,n)}))},b:function(t,e,n){throw new Ct(t>>>=0).hb(e>>>0,n>>>0),t},N:function(t){Se(t>>>0,!b,1,!u,131072,!1),rt.ob()},l:function(t){t>>>=0,p?postMessage({cmd:"cleanupThread",thread:t}):rt.mb(rt.Qa[t])},J:mt,i:Gt,T:Vt,F:St,H:yt,U:At,R:Xt,L:Rt,Q:Lt,p:Wt,G:Nt,D:Et,S:Tt,E:Yt,q:()=>1,B:function(t,e){(t>>>=0)==e>>>0?setTimeout((()=>ft())):p?postMessage({targetThread:t,cmd:"checkMailbox"}):(t=rt.Qa[t])&&t.postMessage({cmd:"checkMailbox"})},K:function(t,e,n,B){e>>>=0,kt.length=n,B=B>>>0>>>3;for(var s=0;s<n;s++)kt[s]=U()[B+s>>>0];return t=0>t?et[-t-1]:pe[t],rt.ub=e,e=t.apply(null,kt),rt.ub=0,e},M:Jt,W:function(t){C&&rt.Qa[t>>>0].ref()},u:function(t,e,n){t=e+2097152>>>0<4194305-!!t?(t>>>0)+4294967296*e:NaN,n>>>=0,t=new Date(1e3*t),s()[n>>>2>>>0]=t.getUTCSeconds(),s()[n+4>>>2>>>0]=t.getUTCMinutes(),s()[n+8>>>2>>>0]=t.getUTCHours(),s()[n+12>>>2>>>0]=t.getUTCDate(),s()[n+16>>>2>>>0]=t.getUTCMonth(),s()[n+20>>>2>>>0]=t.getUTCFullYear()-1900,s()[n+24>>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,s()[n+28>>>2>>>0]=t},v:function(t,e,n){t=e+2097152>>>0<4194305-!!t?(t>>>0)+4294967296*e:NaN,n>>>=0,t=new Date(1e3*t),s()[n>>>2>>>0]=t.getSeconds(),s()[n+4>>>2>>>0]=t.getMinutes(),s()[n+8>>>2>>>0]=t.getHours(),s()[n+12>>>2>>>0]=t.getDate(),s()[n+16>>>2>>>0]=t.getMonth(),s()[n+20>>>2>>>0]=t.getFullYear()-1900,s()[n+24>>>2>>>0]=t.getDay(),e=(wt(t.getFullYear())?vt:zt)[t.getMonth()]+t.getDate()-1|0,s()[n+28>>>2>>>0]=e,s()[n+36>>>2>>>0]=-60*t.getTimezoneOffset(),e=new Date(t.getFullYear(),6,1).getTimezoneOffset();var B=new Date(t.getFullYear(),0,1).getTimezoneOffset();t=0|(e!=B&&t.getTimezoneOffset()==Math.min(B,e)),s()[n+32>>>2>>>0]=t},w:function(t){t>>>=0;var e=new Date(s()[t+20>>>2>>>0]+1900,s()[t+16>>>2>>>0],s()[t+12>>>2>>>0],s()[t+8>>>2>>>0],s()[t+4>>>2>>>0],s()[t>>>2>>>0],0),n=s()[t+32>>>2>>>0],B=e.getTimezoneOffset(),F=new Date(e.getFullYear(),6,1).getTimezoneOffset(),Q=new Date(e.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(Q,F);return 0>n?s()[t+32>>>2>>>0]=Number(F!=Q&&U==B):0<n!=(U==B)&&(F=Math.max(Q,F),e.setTime(e.getTime()+6e4*((0<n?U:F)-B))),s()[t+24>>>2>>>0]=e.getDay(),n=(wt(e.getFullYear())?vt:zt)[e.getMonth()]+e.getDate()-1|0,s()[t+28>>>2>>>0]=n,s()[t>>>2>>>0]=e.getSeconds(),s()[t+4>>>2>>>0]=e.getMinutes(),s()[t+8>>>2>>>0]=e.getHours(),s()[t+12>>>2>>>0]=e.getDate(),s()[t+16>>>2>>>0]=e.getMonth(),s()[t+20>>>2>>>0]=e.getYear(),t=e.getTime(),isNaN(t)?(s()[Ve()>>>2>>>0]=61,t=-1):t/=1e3,We((tt=t,1<=+Math.abs(tt)?0<tt?+Math.floor(tt/4294967296)>>>0:~~+Math.ceil((tt-+(~~tt>>>0))/4294967296)>>>0:0)),t>>>0},s:Dt,t:Mt,A:function(t,e,n){function B(t){return(t=t.toTimeString().match(/\(([A-Za-z ]+)\)$/))?t[1]:"GMT"}t>>>=0,e>>>=0,n>>>=0;var Q=(new Date).getFullYear(),U=new Date(Q,0,1),i=new Date(Q,6,1);Q=U.getTimezoneOffset();var a=i.getTimezoneOffset(),l=Math.max(Q,a);F()[t>>>2>>>0]=60*l,s()[e>>>2>>>0]=Number(Q!=a),t=B(U),e=B(i),t=Pt(t),e=Pt(e),a<Q?(F()[n>>>2>>>0]=t,F()[n+4>>>2>>>0]=e):(F()[n>>>2>>>0]=e,F()[n+4>>>2>>>0]=t)},d:()=>{P("")},c:function(t,e,n){return t>>>=0,e=_t(e>>>0,n>>>0),et[t].apply(null,e)},k:function(t,e,n){return t>>>=0,e=_t(e>>>0,n>>>0),et[t].apply(null,e)},m:()=>{},j:()=>Date.now(),V:()=>{throw Ft+=1,"unwind"},C:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:()=>C?(init_os(),__toCommonJS(os_exports)).cpus().length:navigator.hardwareConcurrency,y:function(t){t>>>=0;var e=B().length;if(t<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var s=e*(1+.2/n);s=Math.min(s,t+100663296);var F=Math;s=Math.max(t,s);t:{F=(F.min.call(F,4294901760,s+(65536-s%65536)%65536)-A.buffer.byteLength+65535)/65536;try{A.grow(F),J();var Q=1;break t}catch(t){}Q=void 0}if(Q)return!0}return!1},O:qt,P:te,I:gt,h:ee,o:ne,x:Be,n:Fe,a:A||l.wasmMemory,z:ie,e:function(t,e,n,B){return ie(t>>>0,e>>>0,n>>>0,B>>>0)}},Ge=function(){function t(t,e){return Ge=t.exports,Ge=function(){var t=Ge,e={};for(let[n,B]of Object.entries(t))e[n]="function"==typeof B?function(){de.push(n);try{return B.apply(null,arguments)}finally{H||(de.pop(),ce&&1===le&&0===de.length&&(le=0,Ft+=1,ae(fe),"undefined"!=typeof Fibers&&Fibers.Pb()))}}:B;return e}(),Ge=function(){var t=Ge;t=Object.assign({},t);var e=t=>()=>t()>>>0,n=t=>e=>t(e)>>>0;return t.za=e(t.za),t.Aa=e(t.Aa),t.Ba=n(t.Ba),t.emscripten_main_runtime_thread_id=e(t.emscripten_main_runtime_thread_id),t.Na=e(t.Na),t.Pa=n(t.Pa),t}(),rt.pb.push(Ge.Da),w.unshift(Ge.X),X=e,O(),Ge}var e={a:me};if(z++,l.instantiateWasm)try{return l.instantiateWasm(e,t)}catch(t){y(`Module.instantiateWasm callback failed with error: ${t}`),a(t)}return function(t,e){var n=j;return"function"!=typeof WebAssembly.instantiateStreaming||_(n)||K(n)||C||"function"!=typeof fetch?q(n,t,e):fetch(n,{credentials:"same-origin"}).then((B=>WebAssembly.instantiateStreaming(B,t).then(e,(function(B){return y(`wasm streaming compile failed: ${B}`),y("falling back to ArrayBuffer instantiation"),q(n,t,e)}))))}(e,(function(e){t(e.instance,e.module)})).catch(a),{}}();l._OrtInit=(t,e)=>(l._OrtInit=Ge.Y)(t,e),l._OrtGetLastError=(t,e)=>(l._OrtGetLastError=Ge.Z)(t,e),l._OrtCreateSessionOptions=(t,e,n,B,s,F,Q,U,i,a)=>(l._OrtCreateSessionOptions=Ge._)(t,e,n,B,s,F,Q,U,i,a),l._OrtAppendExecutionProvider=(t,e)=>(l._OrtAppendExecutionProvider=Ge.$)(t,e),l._OrtAddFreeDimensionOverride=(t,e,n)=>(l._OrtAddFreeDimensionOverride=Ge.aa)(t,e,n),l._OrtAddSessionConfigEntry=(t,e,n)=>(l._OrtAddSessionConfigEntry=Ge.ba)(t,e,n),l._OrtReleaseSessionOptions=t=>(l._OrtReleaseSessionOptions=Ge.ca)(t),l._OrtCreateSession=(t,e,n)=>(l._OrtCreateSession=Ge.da)(t,e,n),l._OrtReleaseSession=t=>(l._OrtReleaseSession=Ge.ea)(t),l._OrtGetInputOutputCount=(t,e,n)=>(l._OrtGetInputOutputCount=Ge.fa)(t,e,n),l._OrtGetInputName=(t,e)=>(l._OrtGetInputName=Ge.ga)(t,e),l._OrtGetOutputName=(t,e)=>(l._OrtGetOutputName=Ge.ha)(t,e),l._OrtFree=t=>(l._OrtFree=Ge.ia)(t),l._OrtCreateTensor=(t,e,n,B,s,F)=>(l._OrtCreateTensor=Ge.ja)(t,e,n,B,s,F),l._OrtGetTensorData=(t,e,n,B,s)=>(l._OrtGetTensorData=Ge.ka)(t,e,n,B,s),l._OrtReleaseTensor=t=>(l._OrtReleaseTensor=Ge.la)(t),l._OrtCreateRunOptions=(t,e,n,B)=>(l._OrtCreateRunOptions=Ge.ma)(t,e,n,B),l._OrtAddRunConfigEntry=(t,e,n)=>(l._OrtAddRunConfigEntry=Ge.na)(t,e,n),l._OrtReleaseRunOptions=t=>(l._OrtReleaseRunOptions=Ge.oa)(t),l._OrtCreateBinding=t=>(l._OrtCreateBinding=Ge.pa)(t),l._OrtBindInput=(t,e,n)=>(l._OrtBindInput=Ge.qa)(t,e,n),l._OrtBindOutput=(t,e,n,B)=>(l._OrtBindOutput=Ge.ra)(t,e,n,B),l._OrtClearBoundOutputs=t=>(l._OrtClearBoundOutputs=Ge.sa)(t),l._OrtReleaseBinding=t=>(l._OrtReleaseBinding=Ge.ta)(t),l._OrtRunWithBinding=(t,e,n,B,s)=>(l._OrtRunWithBinding=Ge.ua)(t,e,n,B,s),l._OrtRun=(t,e,n,B,s,F,Q,U)=>(l._OrtRun=Ge.va)(t,e,n,B,s,F,Q,U),l._OrtEndProfiling=t=>(l._OrtEndProfiling=Ge.wa)(t),l._JsepOutput=(t,e,n)=>(l._JsepOutput=Ge.xa)(t,e,n),l._JsepGetNodeName=t=>(l._JsepGetNodeName=Ge.ya)(t);var Ve=()=>(Ve=Ge.za)(),xe=l._pthread_self=()=>(xe=l._pthread_self=Ge.Aa)(),he=l._malloc=t=>(he=l._malloc=Ge.Ba)(t),Ze=l._free=t=>(Ze=l._free=Ge.Ca)(t);l.__emscripten_tls_init=()=>(l.__emscripten_tls_init=Ge.Da)();var Se=l.__emscripten_thread_init=(t,e,n,B,s,F)=>(Se=l.__emscripten_thread_init=Ge.Fa)(t,e,n,B,s,F);l.__emscripten_thread_crashed=()=>(l.__emscripten_thread_crashed=Ge.Ga)();var ye,Ae=(t,e,n,B)=>(Ae=Ge.Ha)(t,e,n,B),Xe=t=>(Xe=Ge.Ia)(t),Re=l.__emscripten_thread_exit=t=>(Re=l.__emscripten_thread_exit=Ge.Ja)(t),Le=()=>(Le=Ge.Ka)(),We=t=>(We=Ge.La)(t),Ne=(t,e)=>(Ne=Ge.Ma)(t,e),Ee=()=>(Ee=Ge.Na)(),Te=t=>(Te=Ge.Oa)(t),Ye=t=>(Ye=Ge.Pa)(t),He=l.dynCall_ii=(t,e)=>(He=l.dynCall_ii=Ge.Ra)(t,e),Je=t=>(Je=Ge.Sa)(t),fe=()=>(fe=Ge.Ta)(),ke=t=>(ke=Ge.Ua)(t),we=()=>(we=Ge.Va)();function ve(){if(!(0<z))if(p)i(l),p||ut(w),startWorker(l);else{if(l.preRun)for("function"==typeof l.preRun&&(l.preRun=[l.preRun]);l.preRun.length;)k.unshift(l.preRun.shift());ut(k),0<z||ye||(ye=!0,l.calledRun=!0,H||(p||ut(w),i(l),p||ut(v)))}}return l.___start_em_js=944472,l.___stop_em_js=944633,l.wasmMemory=A,l.stackAlloc=Ye,l.stackSave=Ee,l.stackRestore=Te,l.keepRuntimeAlive=()=>0<Ft,l.UTF8ToString=it,l.stringToUTF8=Zt,l.lengthBytesUTF8=xt,l.ExitStatus=nt,l.PThread=rt,M=function t(){ye||ve(),ye||(M=t)},ve(),t.ready});"object"==typeof t&&"object"==typeof e?e.exports=B:"function"==typeof define&&define.amd&&define([],(()=>B))}}),require_ort_wasm_threaded_worker=__commonJS({"web/lib/wasm/binding/ort-wasm-threaded.worker.js"(t,e){e.exports='"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");var vm=require("vm");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,"utf8"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module["__emscripten_thread_crashed"]?.();throw ex}}self.onmessage=handleMessage;\n'}}),ortWasmFactory,ortWasmFactoryThreaded,wasm2,initialized,initializing,aborted,isMultiThreadSupported,isSimdSupported,getWasmFileName,initializeWebAssembly,getInstance,init_wasm_factory=__esm({"web/lib/wasm/wasm-factory.ts"(){init_node_path(),ortWasmFactory=require_ort_wasm_simd_jsep(),ortWasmFactoryThreaded=require_ort_wasm_simd_threaded_jsep(),initialized=!1,initializing=!1,aborted=!1,isMultiThreadSupported=t=>{if(1===t)return!1;if("undefined"==typeof SharedArrayBuffer)return"undefined"==typeof self||self.crossOriginIsolated||console.warn("env.wasm.numThreads is set to "+t+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;"undefined"!=typeof process&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+t+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return"undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch(t){return!1}},isSimdSupported=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}},getWasmFileName=(t,e)=>t?e?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":e?"ort-wasm-threaded.wasm":"ort-wasm.wasm",initializeWebAssembly=async t=>{if(initialized)return Promise.resolve();if(initializing)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(aborted)throw new Error("previous call to 'initializeWebAssembly()' failed.");initializing=!0;const e=t.initTimeout,n=t.numThreads,B=t.simd,s=isMultiThreadSupported(n),F=B&&isSimdSupported(),Q=t.wasmPaths,U="string"==typeof Q?Q:void 0,i=getWasmFileName(F,s),a="object"==typeof Q?Q[i]:void 0;let l=!1;const c=[];if(e>0&&c.push(new Promise((t=>{setTimeout((()=>{l=!0,t()}),e)}))),c.push(new Promise(((t,e)=>{const B=s?ortWasmFactoryThreaded:ortWasmFactory,F={locateFile:(t,e)=>{if(s&&t.endsWith(".worker.js")&&"undefined"!=typeof Blob)return URL.createObjectURL(new Blob([require_ort_wasm_threaded_worker()],{type:"text/javascript"}));if(t.endsWith(".wasm")){if(a)return a;const t=U??e;return"ort-wasm-simd.wasm"===i?t+"ort-wasm-simd.jsep.wasm":"ort-wasm-simd-threaded.wasm"===i?t+"ort-wasm-simd-threaded.jsep.wasm":t+i}return e+t}};if(s)if(F.numThreads=n,"undefined"==typeof Blob)F.mainScriptUrlOrBlob=join(__dirname,"ort-wasm-threaded.js");else{const t=`var ortWasmThreaded=${B.toString()};`;F.mainScriptUrlOrBlob=new Blob([t],{type:"text/javascript"})}B(F).then((e=>{initializing=!1,initialized=!0,wasm2=e,t()}),(t=>{initializing=!1,aborted=!0,e(t)}))}))),await Promise.race(c),l)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},getInstance=()=>{if(initialized&&wasm2)return wasm2;throw new Error("WebAssembly is not initialized yet.")}}}),allocWasmString,iterateExtraOptions,checkLastError,init_wasm_utils=__esm({"web/lib/wasm/wasm-utils.ts"(){init_wasm_factory(),allocWasmString=(t,e)=>{const n=getInstance(),B=n.lengthBytesUTF8(t)+1,s=n._malloc(B);return n.stringToUTF8(t,s,B),e.push(s),s},iterateExtraOptions=(t,e,n,B)=>{if("object"==typeof t&&null!==t){if(n.has(t))throw new Error("Circular reference in options");n.add(t)}Object.entries(t).forEach((([t,s])=>{const F=e?e+t:t;if("object"==typeof s)iterateExtraOptions(s,F+".",n,B);else if("string"==typeof s||"number"==typeof s)B(F,s.toString());else{if("boolean"!=typeof s)throw new Error("Can't handle extra config type: "+typeof s);B(F,s?"1":"0")}}))},checkLastError=t=>{const e=getInstance(),n=e.stackSave();try{const n=e.stackAlloc(8);e._OrtGetLastError(n,n+4);const B=e.HEAP32[n/4],s=e.HEAPU32[n/4+1],F=s?e.UTF8ToString(s):"";throw new Error(`${t} ERROR_CODE: ${B}, ERROR_MESSAGE: ${F}`)}finally{e.stackRestore(n)}}}}),setRunOptions,init_run_options=__esm({"web/lib/wasm/run-options.ts"(){init_wasm_factory(),init_wasm_utils(),setRunOptions=t=>{const e=getInstance();let n=0;const B=[],s=t||{};try{if(void 0===t?.logSeverityLevel)s.logSeverityLevel=2;else if("number"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===t?.logVerbosityLevel)s.logVerbosityLevel=0;else if("number"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===t?.terminate&&(s.terminate=!1);let F=0;return void 0!==t?.tag&&(F=allocWasmString(t.tag,B)),n=e._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,F),0===n&&checkLastError("Can't create run options."),void 0!==t?.extra&&iterateExtraOptions(t.extra,"",new WeakSet,((t,s)=>{const F=allocWasmString(t,B),Q=allocWasmString(s,B);0!==e._OrtAddRunConfigEntry(n,F,Q)&&checkLastError(`Can't set a run config entry: ${t} - ${s}.`)})),[n,B]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),B.forEach((t=>e._free(t))),t}}}}),getGraphOptimzationLevel,getExecutionMode,appendDefaultOptions,setExecutionProviders,setSessionOptions,init_session_options=__esm({"web/lib/wasm/session-options.ts"(){init_wasm_factory(),init_wasm_utils(),getGraphOptimzationLevel=t=>{switch(t){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}},getExecutionMode=t=>{switch(t){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}},appendDefaultOptions=t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly="1"),t.executionProviders&&t.executionProviders.some((t=>"webgpu"===("string"==typeof t?t:t.name)))&&(t.enableMemPattern=!1)},setExecutionProviders=(t,e,n)=>{for(const B of e){let e="string"==typeof B?B:B.name;switch(e){case"webnn":if(e="WEBNN","string"!=typeof B){const e=B;if(e?.deviceType){const B=allocWasmString("deviceType",n),s=allocWasmString(e.deviceType,n);0!==getInstance()._OrtAddSessionConfigEntry(t,B,s)&&checkLastError(`Can't set a session config entry: 'deviceType' - ${e.deviceType}.`)}if(e?.numThreads){let B=e.numThreads;("number"!=typeof B||!Number.isInteger(B)||B<0)&&(B=0);const s=allocWasmString("numThreads",n),F=allocWasmString(B.toString(),n);0!==getInstance()._OrtAddSessionConfigEntry(t,s,F)&&checkLastError(`Can't set a session config entry: 'numThreads' - ${e.numThreads}.`)}if(e?.powerPreference){const B=allocWasmString("powerPreference",n),s=allocWasmString(e.powerPreference,n);0!==getInstance()._OrtAddSessionConfigEntry(t,B,s)&&checkLastError(`Can't set a session config entry: 'powerPreference' - ${e.powerPreference}.`)}}break;case"webgpu":if(e="JS","string"!=typeof B){const e=B;if(e?.preferredLayout){if("NCHW"!==e.preferredLayout&&"NHWC"!==e.preferredLayout)throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${e.preferredLayout}`);const B=allocWasmString("preferredLayout",n),s=allocWasmString(e.preferredLayout,n);0!==getInstance()._OrtAddSessionConfigEntry(t,B,s)&&checkLastError(`Can't set a session config entry: 'preferredLayout' - ${e.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${e}`)}const s=allocWasmString(e,n);0!==getInstance()._OrtAppendExecutionProvider(t,s)&&checkLastError(`Can't append execution provider: ${e}.`)}},setSessionOptions=t=>{const e=getInstance();let n=0;const B=[],s=t||{};appendDefaultOptions(s);try{const t=getGraphOptimzationLevel(s.graphOptimizationLevel??"all"),F=getExecutionMode(s.executionMode??"sequential"),Q="string"==typeof s.logId?allocWasmString(s.logId,B):0,U=s.logSeverityLevel??2;if(!Number.isInteger(U)||U<0||U>4)throw new Error(`log serverity level is not valid: ${U}`);const i=s.logVerbosityLevel??0;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log verbosity level is not valid: ${i}`);const a="string"==typeof s.optimizedModelFilePath?allocWasmString(s.optimizedModelFilePath,B):0;if(n=e._OrtCreateSessionOptions(t,!!s.enableCpuMemArena,!!s.enableMemPattern,F,!!s.enableProfiling,0,Q,U,i,a),0===n&&checkLastError("Can't create session options."),s.executionProviders&&setExecutionProviders(n,s.executionProviders,B),s.freeDimensionOverrides)for(const[t,F]of Object.entries(s.freeDimensionOverrides)){if("string"!=typeof t)throw new Error(`free dimension override name must be a string: ${t}`);if("number"!=typeof F||!Number.isInteger(F)||F<0)throw new Error(`free dimension override value must be a non-negative integer: ${F}`);const s=allocWasmString(t,B);0!==e._OrtAddFreeDimensionOverride(n,s,F)&&checkLastError(`Can't set a free dimension override: ${t} - ${F}.`)}return void 0!==s.extra&&iterateExtraOptions(s.extra,"",new WeakSet,((t,s)=>{const F=allocWasmString(t,B),Q=allocWasmString(s,B);0!==e._OrtAddSessionConfigEntry(n,F,Q)&&checkLastError(`Can't set a session config entry: ${t} - ${s}.`)})),[n,B]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),B.forEach((t=>e._free(t))),t}}}}),tensorDataTypeStringToEnum,tensorDataTypeEnumToString,getTensorElementSize,tensorTypeToTypedArrayConstructor,logLevelStringToEnum,isGpuBufferSupportedType,dataLocationStringToEnum,init_wasm_common=__esm({"web/lib/wasm/wasm-common.ts"(){tensorDataTypeStringToEnum=t=>{switch(t){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${t}`)}},tensorDataTypeEnumToString=t=>{switch(t){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${t}`)}},getTensorElementSize=t=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][t],tensorTypeToTypedArrayConstructor=t=>{switch(t){case"float16":case"uint16":return Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}},logLevelStringToEnum=t=>{switch(t){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${t}`)}},isGpuBufferSupportedType=t=>"float32"===t||"int32"===t||"int64"===t||"bool"===t||"float16"===t||"uint32"===t,dataLocationStringToEnum=t=>{switch(t){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${t}`)}}}}),loadFile,init_wasm_utils_load_file=__esm({"web/lib/wasm/wasm-utils-load-file.ts"(){init_fs(),init_promises(),loadFile=async t=>{if("string"!=typeof t)return t instanceof Blob?new Uint8Array(await t.arrayBuffer()):t instanceof Uint8Array?t:new Uint8Array(t);if("undefined"==typeof process||!process.versions||!process.versions.node){const e=await fetch(t);if(!e.ok)throw new Error(`failed to load external data file: ${t}`);const n=e.headers.get("Content-Length"),B=n?parseInt(n,10):0;if(B<1073741824)return new Uint8Array(await e.arrayBuffer());{if(!e.body)throw new Error(`failed to load external data file: ${t}, no response body.`);const n=e.body.getReader();let s;try{s=new ArrayBuffer(B)}catch(t){if(!(t instanceof RangeError))throw t;{const t=Math.ceil(B/65536);s=new WebAssembly.Memory({initial:t,maximum:t}).buffer}}let F=0;for(;;){const{done:t,value:e}=await n.read();if(t)break;const B=e.byteLength;new Uint8Array(s,F,B).set(e),F+=B}return new Uint8Array(s,0,B)}}try{return new Uint8Array(await readFile(t))}catch(e){if("ERR_FS_FILE_TOO_LARGE"===e.code){const e=createReadStream(t),n=[];for await(const t of e)n.push(t);return new Uint8Array(Buffer.concat(n))}throw e}}}}),logLevelPrefix,doLog,configLogLevel,debug,configureLogger,LOG,LOG_DEBUG,init_log=__esm({"web/lib/wasm/jsep/log.ts"(){init_wasm_common(),logLevelPrefix=["V","I","W","E","F"],doLog=(t,e)=>{console.log(`[${logLevelPrefix[t]},${(new Date).toISOString()}]${e}`)},configureLogger=(t,e)=>{configLogLevel=t,debug=e},LOG=(t,e)=>{const n=logLevelStringToEnum(t);n>=logLevelStringToEnum(configLogLevel)&&doLog(n,"function"==typeof e?e():e)},LOG_DEBUG=(...t)=>{debug&&LOG(...t)}}}),createView2,init_tensor_view=__esm({"web/lib/wasm/jsep/tensor-view.ts"(){init_wasm_common(),createView2=(t,e)=>new(tensorTypeToTypedArrayConstructor(e))(t)}}),init_types2=__esm({"web/lib/wasm/jsep/webgpu/types.ts"(){}}),calcNormalizedBufferSize,guid,createNewGpuDataId,downloadGpuData,GpuDataManagerImpl,createGpuDataManager,init_gpu_data_manager=__esm({"web/lib/wasm/jsep/webgpu/gpu-data-manager.ts"(){init_log(),init_types2(),calcNormalizedBufferSize=t=>16*Math.ceil(t/16),guid=1,createNewGpuDataId=()=>guid++,downloadGpuData=async(t,e,n,B)=>{const s=calcNormalizedBufferSize(n),F=t.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{const Q=t.getCommandEncoder();t.endComputePass(),Q.copyBufferToBuffer(e,0,F,0,s),t.flush(),await F.mapAsync(GPUMapMode.READ);const U=F.getMappedRange();if(B){const t=B();return t.set(new Uint8Array(U,0,n)),t}return new Uint8Array(U.slice(0,n))}finally{F.destroy()}},GpuDataManagerImpl=class{constructor(t){this.backend=t,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,e){const n=e.buffer,B=e.byteOffset,s=e.byteLength,F=calcNormalizedBufferSize(s),Q=this.storageCache.get(t);if(!Q)throw new Error("gpu data for uploading does not exist");if(Q.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${Q.originalSize}, data size=${s}`);const U=this.backend.device.createBuffer({mappedAtCreation:!0,size:F,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),i=U.getMappedRange();new Uint8Array(i).set(new Uint8Array(n,B,s)),U.unmap();const a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(U,0,Q.gpuData.buffer,0,F),LOG_DEBUG("verbose",(()=>`[WebGPU] GpuDataManager.upload(id=${t})`)),this.buffersForUploadingPending.push(U)}memcpy(t,e){const n=this.storageCache.get(t);if(!n)throw new Error("source gpu data for memcpy does not exist");const B=this.storageCache.get(e);if(!B)throw new Error("destination gpu data for memcpy does not exist");if(n.originalSize!==B.originalSize)throw new Error("inconsistent source and destination gpu data size");const s=calcNormalizedBufferSize(n.originalSize),F=this.backend.getCommandEncoder();this.backend.endComputePass(),F.copyBufferToBuffer(n.gpuData.buffer,0,B.gpuData.buffer,0,s)}registerExternalBuffer(t,e,n){let B;if(n){if(B=this.externalBuffers.get(n),void 0===B)throw new Error("previous buffer is not registered");if(t===n)return LOG_DEBUG("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${e}) => id=${B}, buffer is the same, skip.`)),B;this.externalBuffers.delete(n)}else B=createNewGpuDataId();return this.storageCache.set(B,{gpuData:{id:B,type:0,buffer:t},originalSize:e}),this.externalBuffers.set(t,B),LOG_DEBUG("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${e}) => id=${B}, registered.`)),B}unregisterExternalBuffer(t){const e=this.externalBuffers.get(t);void 0!==e&&(this.storageCache.delete(e),this.externalBuffers.delete(t),LOG_DEBUG("verbose",(()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`)))}create(t,e=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){const n=calcNormalizedBufferSize(t);let B;const s=(e&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,F=(e&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||F){const t=s?this.freeBuffers:this.freeUniformBuffers;let F=t.get(n);F||(F=[],t.set(n,F)),B=F.length>0?F.pop():this.backend.device.createBuffer({size:n,usage:e})}else B=this.backend.device.createBuffer({size:n,usage:e});const Q={id:createNewGpuDataId(),type:0,buffer:B};return this.storageCache.set(Q.id,{gpuData:Q,originalSize:t}),LOG_DEBUG("verbose",(()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${Q.id}`)),Q}get(t){return this.storageCache.get(t)?.gpuData}release(t){const e=this.storageCache.get(t);if(!e)throw new Error("releasing data does not exist");return LOG_DEBUG("verbose",(()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${e.gpuData.id}`)),this.storageCache.delete(t),this.buffersPending.push(e.gpuData.buffer),e.originalSize}async download(t,e){const n=this.storageCache.get(t);if(!n)throw new Error("data does not exist");await downloadGpuData(this.backend,n.gpuData.buffer,n.originalSize,e)}refreshPendingBuffers(){for(const t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(const t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach((t=>{t.forEach((t=>{t.destroy()}))})),this.freeUniformBuffers.forEach((t=>{t.forEach((t=>{t.destroy()}))})),this.storageCache.forEach((t=>{t.gpuData.buffer.destroy()})),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},createGpuDataManager=(...t)=>new GpuDataManagerImpl(...t)}}),AttributeWithCacheKeyImpl2,createAttributeWithCacheKey2,init_attribute_with_cache_key2=__esm({"web/lib/wasm/jsep/webgpu/attribute-with-cache-key.ts"(){AttributeWithCacheKeyImpl2=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map((t=>`${this[t]}`)).join(";")),this.key}},createAttributeWithCacheKey2=t=>new AttributeWithCacheKeyImpl2(t)}}),MatMulUtil2,BroadcastUtil2,ShapeUtil2,PoolConvUtil2,GemmUtil2,MIN_CLIP2,MAX_CLIP2,init_util2=__esm({"web/lib/wasm/jsep/util.ts"(){MatMulUtil2=class{static calcMatMulShape(t,e){return t[1]!==e[0]?void 0:[t[0],e[1]]}},BroadcastUtil2=class{static calcShape(t,e,n=!1){const B=t.length,s=e.length;if(0===B)return e;if(0===s)return t;const F=Math.max(t.length,e.length),Q=new Array(F);if(n){if(B<2||s<2)return;const n=MatMulUtil2.calcMatMulShape([t[B-2],t[B-1]],[e[s-2],e[s-1]]);if(void 0===n)return;[Q[F-2],Q[F-1]]=n}for(let U=n?3:1;U<=F;U++){const n=B-U<0?1:t[B-U],i=s-U<0?1:e[s-U];if(n!==i&&n>1&&i>1)return;Q[F-U]=Math.max(n,i)}return Q}static isValidBroadcast(t,e){const n=t.length,B=e.length;if(n>B)return!1;for(let s=1;s<=n;s++)if(1!==t[n-s]&&t[n-s]!==e[B-s])return!1;return!0}},ShapeUtil2=class t{static size(e){return t.getSizeFromDimensionRange(e,0,e.length)}static sizeFromDimension(e,n){if(n<0||n>e.length)throw new Error(`invalid dimension of ${n} for sizeFromDimension as Tensor has ${e.length} dimensions.`);return t.getSizeFromDimensionRange(e,n,e.length)}static sizeToDimension(e,n){if(n<0||n>e.length)throw new Error(`invalid dimension of ${n} for sizeToDimension as Tensor has ${e.length} dimensions.`);return t.getSizeFromDimensionRange(e,0,n)}static getSizeFromDimensionRange(t,e,n){let B=1;for(let s=e;s<n;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");B*=t[s]}return B}static computeStrides(t){const e=t.length;if(0===e)return[];if(1===e)return[1];const n=new Array(e);n[e-1]=1,n[e-2]=t[e-1];for(let B=e-3;B>=0;--B)n[B]=n[B+1]*t[B+1];return n}static normalizeAxis(t,e){if(t<-e&&t>=e)throw new Error("unsupported axis for this operation.");return t<0?t+e:t}static normalizeAxes(t,e){return t.map((n=>this.normalizeAxis(n,e??t.length)))}static sortBasedOnPerm(t,e){return e?e.map((e=>t[e])):t.slice().reverse()}static padShape(t,e){const n=t.length;return t.map(((t,B)=>t+e[B]+e[B+n]))}static areEqual(t,e){return t.length===e.length&&t.every(((t,n)=>t===e[n]))}},PoolConvUtil2=class t{static adjustPoolAttributes(t,e,n,B,s,F){if(!t&&n.length!==e.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let t=0;t<e.length-2;t++)t>=n.length?n.push(e[t+2]):n[t]=e[t+2];for(let t=0;t<n.length;t++)if(t<B.length){if(B[t]<0)throw new Error("strides should be greater than or equal to 1")}else B.push(1);for(let t=0;t<n.length;t++)if(t<s.length){if(s[t]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let t=0;t<2*n.length;t++)if(t<F.length){if(F[t]<0)throw new Error("pad should be greater than or equal to 1")}else F.push(0);for(let t=0;t<n.length;t++){if(n[t]<=0)throw new Error("kernel shapes need to be greater than 0");if(F[t]>=n[t]||F[t+n.length]>=n[t])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(e,n,B,s,F,Q,U){if(U){if(F.length!==2*(e.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(n.length!==e.length-2)throw new Error("length of strides should be the length of data dimensions");if(s.length!==e.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let i=0;i<e.length-2;i++)t.adjustPadAndReturnShape(e[i+(Q?1:2)],n[i],B[i],s[i],F,i,i+e.length-2,U)}}static computePoolOutputShape(e,n,B,s,F,Q,U){if(n.length<=0)throw new Error("input shape must be of size greater than 0");const i=[n[0],n[1]];return t.computeShapeHelper(e,n,i,B,s,F,Q,U),i}static computeConvOutputShape(e,n,B,s,F,Q,U){if(e.length<=0||n.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");const i=[e[0],n[0]];return t.computeShapeHelper(!1,e,i,B,s,F,Q,U),i}static computeShapeHelper(e,n,B,s,F,Q,U,i){if(e)for(let t=0;t<n.length-2;t++)B.push(1);else for(let e=0;e<n.length-2;e++)B.push(t.adjustPadAndReturnShape(n[e+2],s[e],F[e],Q[e],U,e,e+n.length-2,i))}static adjustPadAndReturnShape(t,e,n,B,s,F,Q,U){const i=n*(B-1)+1;if(!U||"NOTSET"===U)return Math.floor((t+s[F]+s[Q]-i)/e+1);switch(U){case"VALID":return s[F]=0,s[Q]=0,Math.floor((t-i)/e+1);case"SAME_LOWER":case"SAME_UPPER":if(1!==n)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{const n=((t+e-1)/e-1)*e+B-t;return s[F]="SAME_LOWER"===U?Math.floor((n+1)/2):Math.floor(n/2),s[Q]=n-s[F],Math.floor((t+n-B)/e+1)}default:throw new Error("Unsupported AutoPad type")}}},GemmUtil2=class{static getShapeOfGemmResult(t,e,n,B,s){if(2!==t.length||2!==n.length)throw new Error("shape need to be of size 2");let F,Q,U;e?(F=t[1],Q=t[0]):(F=t[0],Q=t[1]);let i=-1;if(B?(U=n[0],i=1):(U=n[1],i=0),n[i]!==Q)throw new Error("dimension mismatch");if(F<=0||U<=0||Q<=0)throw new Error("invalid shape specified");if(s&&!BroadcastUtil2.isValidBroadcast(s,[F,U]))throw new Error("gemm: invalid bias shape for broadcast");return[F,U,Q]}},MIN_CLIP2=-34028234663852886e22,MAX_CLIP2=34028234663852886e22}}),WORKGROUP_SIZE,getWgslMappedType,tensorTypeToWsglStorageType,tensorTypeToWsglValueType,createTensorShapeVariables,getMaxComponents,fillVector,castToF32,sumVector,getElementAt,createIndicesHelper,inputVariable,outputVariable,internalVariable,ShaderHelperImpl,createShaderHelper,getBroadcastDims,enableShapesUniforms,init_common=__esm({"web/lib/wasm/jsep/webgpu/ops/common.ts"(){init_wasm_common(),init_util2(),WORKGROUP_SIZE=64,getWgslMappedType=(t,e)=>{if(3===e)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(t){case 10:return e>1?`vec${e}<f16>`:"f16";case 1:return e>1?`vec${e}<f32>`:"f32";case 6:return e>1?`vec${e}<i32>`:"i32";case 12:return e>1?`vec${e}<u32>`:"u32";case 7:if(e>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(e>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(4!==e)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${t}`)}},tensorTypeToWsglStorageType=(t,e=1)=>{const n=getWgslMappedType(t,e);return"string"==typeof n?n:n[0]},tensorTypeToWsglValueType=(t,e=1)=>{const n=getWgslMappedType(t,e);return"string"==typeof n?n:n[1]},createTensorShapeVariables=t=>0===t.length?[]:[{type:"uint32",data:t},{type:"uint32",data:ShapeUtil2.computeStrides(t)}],getMaxComponents=t=>t%4==0?4:t%2==0?2:1,fillVector=(t="f32",e,n="0")=>e&&1!==e?`vec${e}<${t}>(${n})`:`${t}(${n})`,castToF32=(t,e,n)=>"f32"===t?n:1===e?`f32(${n})`:`vec${e}f(${n})`,sumVector=(t,e)=>4===e?`(${t}.x + ${t}.y + ${t}.z + ${t}.w)`:2===e?`(${t}.x + ${t}.y)`:3===e?`(${t}.x + ${t}.y + ${t}.z)`:t,getElementAt=(t,e,n)=>t.startsWith("uniforms.")&&n>4?"string"==typeof e?`${t}[(${e}) / 4][(${e}) % 4]`:`${t}[${Math.floor(e/4)}][${e%4}]`:n>1?`${t}[${e}]`:t,createIndicesHelper=(t,e,n,B,s)=>{const F="number"==typeof n,Q=F?n:n.length,U=[...new Array(Q).keys()],i=Q<2?"u32":Q<=4?`vec${Q}<u32>`:`array<u32, ${Q}>`,a=getWgslMappedType(e,s),l="string"==typeof a?a:a[1],c="string"==typeof a?a:a[0],g={indices:i,value:l,storage:c,tensor:e},d=t=>"string"==typeof t?t:`${t}u`,I={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},o=F?"uniforms.":"",r=`${o}${t}_shape`,u=`${o}${t}_strides`;let b="";for(let t=0;t<Q-1;t++)b+=`\n    let dim${t} = current / ${getElementAt(u,t,Q)};\n    let rest${t} = current % ${getElementAt(u,t,Q)};\n    indices[${t}] = dim${t};\n    current = rest${t};\n    `;b+=`indices[${Q-1}] = current;`;const C=Q<2?"":`\n  fn o2i_${t}(offset: u32) -> ${g.indices} {\n    var indices: ${g.indices};\n    var current = offset;\n    ${b}\n    return indices;\n  }`,p=[];if(Q>=2)for(let t=Q-1;t>=0;t--)p.push(`${getElementAt(u,t,Q)} * (indices[${t}])`);const m=Q<2?"":`\n  fn i2o_${t}(indices: ${g.indices}) -> u32 {\n    return ${p.join("+")};\n  }`,G=(...t)=>0===Q?"0u":`${g.indices}(${t.map(d).join(",")})`,V=(t,e)=>Q<2?`${t}`:`${getElementAt(t,e,Q)}`,x={},h=(e,n)=>(()=>{if(g.storage===g.value)return`${t}[${e}]=${n};`;if("vec2<u32>"===g.storage&&"i32"===g.value)return`${t}[${e}]=vec2<u32>(u32(${n}), select(0u, 0xFFFFFFFFu, ${n} < 0));`;if("vec2<u32>"===g.storage&&"u32"===g.value)return`${t}[${e}]=vec2<u32>(u32(${n}), 0u);`;if("u32"===g.storage&&"vec4<bool>"===g.value)return`${t}[${e}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${n}));`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),Z=e=>(()=>{if(g.storage===g.value)return`${t}[${e}]`;if("vec2<u32>"===g.storage&&"i32"===g.value)return`i32(${t}[${e}].x)`;if("vec2<u32>"===g.storage&&"u32"===g.value)return`u32(${t}[${e}].x)`;if("u32"===g.storage&&"vec4<bool>"===g.value)return`vec4<bool>(bool(${t}[${e}] & 0xFFu), bool(${t}[${e}] & 0xFF00u), bool(${t}[${e}] & 0xFF0000u), bool(${t}[${e}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),S=Q<2?"":`\n  fn get_${t}ByIndices(indices: ${g.indices}) -> ${l} {\n    return ${Z(`i2o_${t}(indices)`)};\n  }`,y=Q<2?"":(()=>{const e=U.map((t=>`d${t}: u32`)).join(", "),n=U.map((t=>`d${t}`)).join(", ");return`\n  fn get_${t}(${e}) -> ${l} {\n    return get_${t}ByIndices(${G(n)});\n  }`})(),A=Q<2?"":`\n  fn set_${t}ByIndices(indices: ${g.indices}, value: ${l}) {\n    ${h(`i2o_${t}(indices)`,"value")}\n  }`,X=Q<2?"":(()=>{const e=U.map((t=>`d${t}: u32`)).join(", "),n=U.map((t=>`d${t}`)).join(", ");return`\n  fn set_${t}(${e}, value: ${l}) {\n    set_${t}ByIndices(${G(n)}, value);\n  }`})();return{impl:()=>{const t=[];let e=!1;return I.offsetToIndices&&(t.push(C),e=!0),I.indicesToOffset&&(t.push(m),e=!0),I.broadcastedIndicesToOffset&&(Object.values(x).forEach((e=>t.push(e))),e=!0),I.set&&(t.push(X),e=!0),I.setByIndices&&(t.push(A),e=!0),I.get&&(t.push(y),e=!0),I.getByIndices&&(t.push(S),e=!0),!F&&e&&t.unshift(`const ${r} = ${g.indices}(${n.join(",")});`,`const ${u} = ${g.indices}(${ShapeUtil2.computeStrides(n).join(",")});`),t.join("\n")},type:g,offsetToIndices:e=>(I.offsetToIndices=!0,Q<2?e:`o2i_${t}(${e})`),indicesToOffset:e=>(I.indicesToOffset=!0,Q<2?e:`i2o_${t}(${e})`),broadcastedIndicesToOffset:(e,n)=>{I.broadcastedIndicesToOffset=!0;const B=`${n.name}broadcastedIndicesTo${t}Offset`;if(B in x)return`${B}(${e})`;const s=[];for(let t=Q-1;t>=0;t--){const e=n.indicesGet("outputIndices",t+n.rank-Q);s.push(`${V(u,t)} * (${e} % ${V(r,t)})`)}return x[B]=`fn ${B}(outputIndices: ${n.type.indices}) -> u32 {\n             return ${s.length>0?s.join("+"):"0u"};\n           }`,`${B}(${e})`},indices:G,indicesGet:V,indicesSet:(t,e,n)=>Q<2?`${t}=${n};`:`${getElementAt(t,e,Q)}=${n};`,set:(...e)=>{if(e.length!==Q+1)throw new Error(`indices length must be ${Q}`);const n=e[Q];if("string"!=typeof n)throw new Error("value must be string");const B=e.slice(0,Q).map(d).join(",");return 0===Q?h("0u",n):1===Q?h(B[0],n):(I.set=!0,I.setByIndices=!0,I.indicesToOffset=!0,`set_${t}(${B}, ${n})`)},setByOffset:h,setByIndices:(e,n)=>Q<2?h(e,n):(I.setByIndices=!0,I.indicesToOffset=!0,`set_${t}ByIndices(${e}, ${n});`),get:(...e)=>{if(e.length!==Q)throw new Error(`indices length must be ${Q}`);const n=e.map(d).join(",");return 0===Q?Z("0u"):1===Q?Z(n[0]):(I.get=!0,I.getByIndices=!0,I.indicesToOffset=!0,`get_${t}(${n})`)},getByOffset:Z,getByIndices:e=>Q<2?Z(e):(I.getByIndices=!0,I.indicesToOffset=!0,`get_${t}ByIndices(${e})`),usage:B,name:t,strides:u,shape:r,rank:Q}},inputVariable=(t,e,n,B=1)=>createIndicesHelper(t,e,n,"input",B),outputVariable=(t,e,n,B=1)=>createIndicesHelper(t,e,n,"output",B),internalVariable=(t,e,n,B=1)=>createIndicesHelper(t,e,n,"internal",B),ShaderHelperImpl=class{constructor(t){this.normalizedDispatchGroup=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${"number"==typeof t?`${t}u`:t}) { return; }`}mainStart(t=WORKGROUP_SIZE){const e="number"==typeof t?t:t[0],n="number"==typeof t?1:t[1],B="number"==typeof t?1:t[2],s=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${e}, ${n}, ${B})\n  fn main(${s?"@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>":"@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>"}) {\n    ${s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${e*n*B}u + local_idx;`}\n  `}appendVariableUniforms(t){0!==t.rank&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,e){if("internal"===t.usage)throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);const n="input"===t.usage?"read":"read_write",B=t.type.storage;return`@group(0) @binding(${e}) var<storage, ${n}> ${t.name}: array<${B}>;`}declareVariables(...t){return t.map((t=>this.declareVariable(t,this.variableIndex++))).join("\n")}registerInternalVariable(t){if("internal"!==t.usage)throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach((t=>this.registerInternalVariable(t))),this}registerUniform(t,e,n=1){return this.uniforms.push({name:t,type:e,length:n}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(0===this.uniforms.length)return"";const t=[];for(const{name:e,type:n,length:B}of this.uniforms)if(B&&B>4)t.push(`${e}:array<vec4<${n}>, ${Math.ceil(B/4)}>`);else{const s=null==B||1===B?n:`vec${B}<${n}>`;t.push(`${e}:${s}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map((t=>t.impl())).join("\n")+this.internalVariables.map((t=>t.impl())).join("\n")}},createShaderHelper=t=>new ShaderHelperImpl(t),getBroadcastDims=(t,e)=>{const n=t.length,B=[];for(let s=0;s<n;s++){const F=n-1-s,Q=t[F]||1;(e[e.length-1-s]||1)>1&&1===Q&&B.unshift(F)}return B},enableShapesUniforms=t=>!0}}),validateInputs26,getAdjustedPerm2,getOutputShape2,permFunctionBody,createTransposeProgramInfo2,transpose2,parseTransposeAttributes2,init_transpose2=__esm({"web/lib/wasm/jsep/webgpu/ops/transpose.ts"(){init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs26=t=>{if(!t||1!==t.length)throw new Error("Transpose requires 1 input.")},getAdjustedPerm2=(t,e)=>e&&e.length!==t?[...new Array(t).keys()].reverse():e,getOutputShape2=(t,e)=>ShapeUtil2.sortBasedOnPerm(t,getAdjustedPerm2(t.length,e)),permFunctionBody=(t,e,n,B)=>{const s=[];s.push(`fn perm(i: ${B.type.indices}) -> ${n.type.indices} {\n    var a: ${n.type.indices};`);for(let B=0;B<e;++B)s.push(n.indicesSet("a",t[B],`i[${B}]`));return s.push("return a;}"),s.join("\n")},createTransposeProgramInfo2=(t,e)=>{const n=t.dataType,B=t.dims.length,s=getAdjustedPerm2(B,e),F=enableShapesUniforms(B),Q=getOutputShape2(t.dims,s),U=F?Q.length:Q,i=F?B:t.dims,a=outputVariable("output",n,U),l=inputVariable("a",n,i);return{name:"Transpose",shaderCache:{hint:`${e}`,inputDependencies:F?["rank"]:["dims"]},getRunData:t=>{const e=ShapeUtil2.size(Q);return{outputs:[{dims:Q,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(e/64)},programUniforms:F?[{type:"uint32",data:e},...createTensorShapeVariables(t[0].dims),...createTensorShapeVariables(Q)]:[{type:"uint32",data:e}]}},getShaderSource:t=>`\n  ${t.registerUniform("output_size","u32").declareVariables(l,a)}\n\n  ${permFunctionBody(s,B,l,a)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${a.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${a.setByOffset("global_idx",l.getByIndices("aIndices"))}\n  }`}},transpose2=(t,e)=>{validateInputs26(t.inputs),t.compute(createTransposeProgramInfo2(t.inputs[0],e.perm))},parseTransposeAttributes2=t=>createAttributeWithCacheKey2({perm:t.perm})}}),reduceOps,reduceSharedOps,reduceInitValues,reduceOutputValues,getInnerMostAxes,computeOutAndReduceShapes,expandShapeToKeepDim,areAxesInnerMostDims,getAxesPermutation,createReduceSharedProgramInfo,reduceCommon,reduceMeanShared,reduceL1Shared,reduceL2Shared,reduceLogSumExpShared,reduceMaxShared,reduceMinShared,reduceProdShared,reduceSumShared,reduceSumSquareShared,reduceLogSumShared,init_reduce_shared=__esm({"web/lib/wasm/jsep/webgpu/ops/reduce-shared.ts"(){init_util2(),init_common(),init_reduce2(),init_transpose2(),reduceOps={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},reduceSharedOps={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},reduceInitValues={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},reduceOutputValues={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},getInnerMostAxes=(t,e)=>{const n=[];for(let B=e-t;B<e;++B)n.push(B);return n},computeOutAndReduceShapes=(t,e)=>{const n=[],B=t.length;for(let s=0;s<B;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map((e=>t[e]))]},expandShapeToKeepDim=(t,e)=>{const n=t.length+e.length,B=[];let s=0;for(let F=0;F<n;F++)-1===e.indexOf(F)?B.push(t[s++]):B.push(1);return B},areAxesInnerMostDims=(t,e)=>{for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0},getAxesPermutation=(t,e)=>{const n=[];if(!areAxesInnerMostDims(t,e)){for(let B=0;B<e;++B)-1===t.indexOf(B)&&n.push(B);t.forEach((t=>n.push(t)))}return n},createReduceSharedProgramInfo=(t,e,n,B,s,F,Q)=>{const U=n[0].dims,i=ShapeUtil2.size(F),a=ShapeUtil2.size(Q),l=inputVariable("_A",n[0].dataType,U),c=outputVariable("output",s,F),g=`\n          var<workgroup> aBestValues : array<${c.type.storage}, 32>;\n       `;return{name:t,shaderCache:e,getShaderSource:t=>`\n        ${t.registerUniform("reduceSize","u32").declareVariables(l,c)}\n        ${g}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${t.mainStart(32)}\n\n          let outputIndex = global_idx / 32;\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${c.type.storage}(${reduceInitValues[B]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + 32) {\n           let candidate = ${c.type.storage}(${l.getByOffset("offset + k")});\n           bestValue = ${reduceOps[B]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, 32u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${reduceSharedOps[B]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${c.setByOffset("outputIndex",""+("mean"===B?`bestValue / ${c.type.storage}(uniforms.reduceSize)`:`${reduceOutputValues[B]}`))};\n         }\n        }`,getRunData:()=>({outputs:[{dims:F,dataType:s}],dispatchGroup:{x:i},programUniforms:[{type:"uint32",data:a}]})}},reduceCommon=(t,e,n,B)=>{const s=1===t.inputs.length?n:createReduceAttributesFromInputs(t.inputs,n);let F=s.axes;0!==F.length||s.noopWithEmptyAxes||(F=t.inputs[0].dims.map(((t,e)=>e)));const Q=ShapeUtil2.normalizeAxes(F,t.inputs[0].dims.length);let U=Q,i=t.inputs[0];const a=getAxesPermutation(U,t.inputs[0].dims.length);a.length>0&&(i=t.compute(createTransposeProgramInfo2(t.inputs[0],a),{inputs:[0],outputs:[-1]})[0],U=getInnerMostAxes(U.length,i.dims.length));const[l,c]=computeOutAndReduceShapes(i.dims,U);let g=l;s.keepDims&&(g=expandShapeToKeepDim(l,Q)),t.compute(createReduceSharedProgramInfo(e,{hint:s.cacheKey,inputDependencies:["type"]},[i],B,t.inputs[0].dataType,g,c),{inputs:[i]})},reduceMeanShared=(t,e)=>{reduceCommon(t,"ReduceMeanShared",e,"mean")},reduceL1Shared=(t,e)=>{reduceCommon(t,"ReduceL1Shared",e,"l1")},reduceL2Shared=(t,e)=>{reduceCommon(t,"ReduceL2Shared",e,"l2")},reduceLogSumExpShared=(t,e)=>{reduceCommon(t,"ReduceLogSumExpShared",e,"logSumExp")},reduceMaxShared=(t,e)=>{reduceCommon(t,"ReduceMaxShared",e,"max")},reduceMinShared=(t,e)=>{reduceCommon(t,"ReduceMinShared",e,"min")},reduceProdShared=(t,e)=>{reduceCommon(t,"ReduceProdShared",e,"prod")},reduceSumShared=(t,e)=>{reduceCommon(t,"ReduceSumShared",e,"sum")},reduceSumSquareShared=(t,e)=>{reduceCommon(t,"ReduceSumSquareShared",e,"sumSquare")},reduceLogSumShared=(t,e)=>{reduceCommon(t,"ReduceLogSumShared",e,"logSum")}}}),validateInputs27,noOp,createReduceProgramInfo2,createReduceAttributesFromInputs,runReduceProgram,reduceLogSumNaive,reduceL1Naive,reduceL2Naive,reduceLogSumExpNaive,reduceMaxNaive,reduceMeanNaive,reduceMinNaive,reduceProdNaive,reduceSumNaive,reduceSumSquareNaive,useNaiveReduceMethod,reduceMean2,reduceL1,reduceL2,reduceLogSumExp,reduceMax2,reduceMin2,reduceProd2,reduceSum2,reduceSumSquare,reduceLogSum2,init_reduce2=__esm({"web/lib/wasm/jsep/webgpu/ops/reduce.ts"(){init_util2(),init_attribute_with_cache_key2(),init_common(),init_reduce_shared(),validateInputs27=t=>{if(!t||0===t.length||t.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(2===t.length&&1!==t[1].dims.length)throw new Error("Invalid axes input dims.")},noOp=t=>["","",`var value = ${t.getByIndices("input_indices")};`,""],createReduceProgramInfo2=(t,e,n,B,s,F,Q=!1,U=!1)=>{const i=[],a=n[0].dims,l=a.length,c=ShapeUtil2.normalizeAxes(s,l),g=!U&&0===c.length;a.forEach(((t,e)=>{g||c.indexOf(e)>=0?Q&&i.push(1):i.push(t)}));const d=i.length,I=ShapeUtil2.size(i);return{name:t,shaderCache:e,getShaderSource:t=>{const e=[],s=inputVariable("_A",n[0].dataType,l),U=outputVariable("output",F,d),i=B(s,U,c);let I=i[2];for(let t=0,n=0;t<l;t++)g||c.indexOf(t)>=0?(Q&&n++,I=`for(var j${t}: u32 = 0; j${t} < ${a[t]}; j${t}++) {\n                  ${i[2].includes("last_index")?`let last_index = j${t};`:""}\n                  ${s.indicesSet("input_indices",t,`j${t}`)}\n                  ${I}\n                }`):(e.push(`${s.indicesSet("input_indices",t,U.indicesGet("output_indices",n))};`),n++);return`\n\n        ${t.registerUniform("output_size","u32").declareVariables(s,U)}\n\n        ${t.mainStart()}\n          ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${s.type.indices};\n          let output_indices = ${U.offsetToIndices("global_idx")};\n\n          ${e.join("\n")}\n          ${i[0]}       // init ops for reduce max/min\n          ${i[1]}\n          ${I}\n          ${i[3]}\n          ${4===i.length?U.setByOffset("global_idx","value"):i.slice(4).join("\n")}\n        }`},getRunData:()=>({outputs:[{dims:i,dataType:F}],dispatchGroup:{x:Math.ceil(I/64)},programUniforms:[{type:"uint32",data:I},...createTensorShapeVariables(a),...createTensorShapeVariables(i)]})}},createReduceAttributesFromInputs=(t,e)=>{const n=[];return t[1].dims[0]>0&&t[1].getBigInt64Array().forEach((t=>n.push(Number(t)))),createAttributeWithCacheKey2({axes:n,keepDims:e.keepDims,noopWithEmptyAxes:e.noopWithEmptyAxes})},runReduceProgram=(t,e,n,B)=>{const s=t.inputs,F=1===s.length?n:createReduceAttributesFromInputs(s,n);t.compute(createReduceProgramInfo2(e,{hint:F.cacheKey,inputDependencies:["rank"]},[s[0]],F.noopWithEmptyAxes&&0===F.axes.length?noOp:B,F.axes,s[0].dataType,F.keepDims,F.noopWithEmptyAxes),{inputs:[0]})},reduceLogSumNaive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceLogSum",e,((t,e)=>[`var value = ${e.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,"value = log(value);"]))},reduceL1Naive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceL1",e,((t,e)=>[`var value = ${e.type.storage}(0);`,"",`value += abs(${t.getByIndices("input_indices")});`,""]))},reduceL2Naive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceL2",e,((t,e)=>[`var t = ${e.type.value}(0); var value = ${e.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"]))},reduceLogSumExpNaive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceLogSumExp",e,((t,e)=>[`var value = ${e.type.storage}(0);`,"",`value += exp(${t.getByIndices("input_indices")});`,"value = log(value);"]))},reduceMaxNaive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceMax",e,((t,e,n)=>{const B=[];for(let e=0;e<t.rank;e++)(n.indexOf(e)>=0||0===n.length)&&B.push(t.indicesSet("input_indices",e,0));return[`${B.join("\n")}`,`var value = ${t.getByIndices("input_indices")};`,`value = max(value, ${t.getByIndices("input_indices")});`,""]}))},reduceMeanNaive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceMean",e,((e,n,B)=>{let s=1;for(let n=0;n<e.rank;n++)(B.indexOf(n)>=0||0===B.length)&&(s*=t.inputs[0].dims[n]);return["var sum = f32(0);","",`sum += f32(${e.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${s});`]}))},reduceMinNaive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceMin",e,((t,e,n)=>{const B=[];for(let e=0;e<t.rank;e++)(n.indexOf(e)>=0||0===n.length)&&B.push(`input_indices[${e}] = 0;`);return[`${B.join("\n")}`,`var value = ${t.getByIndices("input_indices")};`,`value = min(value, ${t.getByIndices("input_indices")});`,""]}))},reduceProdNaive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceProd",e,((t,e)=>[`var value = ${e.type.storage}(1);`,"",`value *= ${t.getByIndices("input_indices")};`,""]))},reduceSumNaive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceSum",e,((t,e)=>[`var value = ${e.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,""]))},reduceSumSquareNaive=(t,e)=>{validateInputs27(t.inputs);runReduceProgram(t,"ReduceSumSquare",e,((t,e)=>[`var t = ${e.type.value}(0); var value = ${e.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += t * t;`,""]))},useNaiveReduceMethod=(t,e,n)=>{if(0===e.length)return n;let B=1,s=1;for(let n=0;n<e.length;n++)-1===e.indexOf(n)?B*=t[n]:s*=t[n];return s<32&&B>1024},reduceMean2=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceMeanNaive(t,e):reduceMeanShared(t,e)},reduceL1=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceL1Naive(t,e):reduceL1Shared(t,e)},reduceL2=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceL2Naive(t,e):reduceL2Shared(t,e)},reduceLogSumExp=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceLogSumExpNaive(t,e):reduceLogSumExpShared(t,e)},reduceMax2=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceMaxNaive(t,e):reduceMaxShared(t,e)},reduceMin2=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceMinNaive(t,e):reduceMinShared(t,e)},reduceProd2=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceProdNaive(t,e):reduceProdShared(t,e)},reduceSum2=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceSumNaive(t,e):reduceSumShared(t,e)},reduceSumSquare=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceSumSquareNaive(t,e):reduceSumSquareShared(t,e)},reduceLogSum2=(t,e)=>{useNaiveReduceMethod(t.inputs[0].dims,e.axes,e.noopWithEmptyAxes)?reduceLogSumNaive(t,e):reduceLogSumShared(t,e)}}}),validateInputs28,argMin,argMax,parseArgMinMaxAttributes,init_argminmax=__esm({"web/lib/wasm/jsep/webgpu/ops/argminmax.ts"(){init_wasm_common(),init_attribute_with_cache_key2(),init_reduce2(),validateInputs28=t=>{if(!t||0===t.length||t.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(1!==t[0].dataType)throw new Error("Invalid input type.")},argMin=(t,e)=>{validateInputs28(t.inputs);t.compute(createReduceProgramInfo2("ArgMin",{hint:e.cacheKey,inputDependencies:["rank"]},[t.inputs[0]],((t,n,B)=>{const s=[];for(let e=0;e<t.rank;e++)(B.indexOf(e)>=0||0===B.length)&&s.push(`input_indices[${e}] = 0;`);return[`${s.join("\n")}`,`var value = ${t.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${t.getByIndices("input_indices")} ${e.selectLastIndex>0?"<=":"<"} value) {\n         value = ${t.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]}),[e.axis],7,e.keepDims),{inputs:[0]})},argMax=(t,e)=>{validateInputs28(t.inputs);t.compute(createReduceProgramInfo2("argMax",{hint:e.cacheKey,inputDependencies:["rank"]},[t.inputs[0]],((t,n,B)=>{const s=[];for(let e=0;e<t.rank;e++)(B.indexOf(e)>=0||0===B.length)&&s.push(`input_indices[${e}] = 0;`);return[`${s.join("\n")}`,`var value = ${t.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${t.getByIndices("input_indices")} ${e.selectLastIndex>0?">=":">"} value) {\n         value = ${t.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]}),[e.axis],7,e.keepDims),{inputs:[0]})},parseArgMinMaxAttributes=t=>createAttributeWithCacheKey2(t)}}),validateAttentionInputs,computeInPlaceSoftmax,computeAttentionProbs,computeVxAttentionScore,applyAttention,prepare,attention,init_attention=__esm({"web/lib/wasm/jsep/webgpu/ops/attention.ts"(){init_wasm_common(),init_types2(),init_common(),validateAttentionInputs=(t,e)=>{const n=t[0],B=t[1],s=t[2],F=t[3],Q=t[4],U=t[5];if(Q&&U)throw new Error("Attention cannot have both past and relative_position_bias");if(3!==n.dims.length)throw new Error('Input "input" must have 3 dimensions');const i=n.dims[0],a=n.dims[1],l=n.dims[2];if(1!==s.dims.length)throw new Error('Input "bias" is expected to have 1 dimensions');if(2!==B.dims.length)throw new Error('Input "weights" is expected to have 2 dimensions');if(B.dims[0]!==l)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(s.dims[0]!==B.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let c=s.dims[0]/3,g=c,d=g;if(e.qkvHiddenSizes.length>0){if(3!==e.qkvHiddenSizes.length)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(const t of e.qkvHiddenSizes)if(t%e.numHeads!=0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");c=e.qkvHiddenSizes[0],g=e.qkvHiddenSizes[1],d=e.qkvHiddenSizes[2]}const I=a;if(c!==g)throw new Error("qkv_hidden_sizes first element should be same as the second");if(s.dims[0]!==c+g+d)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let o=0;if(Q){if(g!==d)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(5!==Q.dims.length)throw new Error('Input "past" must have 5 dimensions');if(2!==Q.dims[0])throw new Error('Input "past" first dimension must be 2');if(Q.dims[1]!==i)throw new Error('Input "past" second dimension must be batch_size');if(Q.dims[2]!==e.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(Q.dims[4]!==g/e.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');e.pastPresentShareBuffer||(o=Q.dims[3])}const r=I+o;if(F)throw new Error("Mask not supported");if(Q)throw new Error("past is not supported");if(U)throw new Error("relativePositionBias is not supported");return{batchSize:i,sequenceLength:a,pastSequenceLength:o,kvSequenceLength:I,totalSequenceLength:r,maxSequenceLength:-1,inputHiddenSize:l,hiddenSize:c,vHiddenSize:d,headSize:Math.floor(c/e.numHeads),vHeadSize:Math.floor(d/e.numHeads),numHeads:e.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:e.maskFilterValue,maskType:0,scale:e.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},computeInPlaceSoftmax=(t,e,n,B)=>{const s=getMaxComponents(B);let F=64;const Q=B/s;Q<F?F=1:Q/8<64&&(F=Math.ceil(Q/8));const U=Math.ceil(B/s/F),i=[{type:tensorDataTypeEnumToString(e.dataType),data:1/B},{type:"uint32",data:Q},{type:"uint32",data:U}],a=tensorTypeToWsglStorageType(e.dataType,s);t.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${F};${a};${s}`},getShaderSource:t=>{const n=outputVariable("x",e.dataType,e.dims,s);let B="thread_max_vector";2===s?B="max(thread_max_vector.x, thread_max_vector.y)":4===s&&(B="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");const Q=tensorTypeToWsglValueType(e.dataType),U=[{name:"d_inv",type:Q},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${F}>;\n  var<workgroup> wgSum: array<f32, ${F}>;\n  ${t.registerUniforms(U).declareVariables(n)}\n  ${t.mainStart([F,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${fillVector("f32",s,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${castToF32(Q,s,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${B};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${F}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${fillVector("f32",s,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${castToF32(Q,s,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${sumVector("sumVector",s)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${F}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${fillVector("f32",s,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${castToF32(Q,s,"x[offset + i]")};\n        x[offset + i] = ${n.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`},getRunData:()=>({outputs:[],dispatchGroup:{x:n},programUniforms:i})},{inputs:[e],outputs:[]})},computeAttentionProbs=(t,e,n,B,s,F)=>{const Q=[s.batchSize,s.numHeads,s.sequenceLength,s.kvSequenceLength+s.pastSequenceLength],U=0===F.scale?1/Math.sqrt(s.headSize):F.scale,i=getMaxComponents(s.headSize),a=s.headSize/i,l=12,c={x:Math.ceil(s.totalSequenceLength/l),y:Math.ceil(s.sequenceLength/l),z:s.batchSize*s.numHeads},g=tensorDataTypeEnumToString(e.dataType),d=[{type:"uint32",data:s.sequenceLength},{type:"uint32",data:a},{type:"uint32",data:s.totalSequenceLength},{type:"uint32",data:s.kvSequenceLength},{type:g,data:U}],I=[e,n],o=t.compute({name:"AttentionProbs",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:Q,dataType:e.dataType,gpuDataType:0}],dispatchGroup:c,programUniforms:d}),getShaderSource:t=>{const B=inputVariable("q",e.dataType,e.dims,i),s=inputVariable("key",n.dataType,n.dims,i),F=outputVariable("output",e.dataType,Q),U=tensorTypeToWsglStorageType(e.dataType),a=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:U}];return`\n  const beta: ${U} = 1.0;\n  const TILE_SIZE = 12u;\n\n  var<workgroup> tileQ: array<${B.type.storage}, 144>;\n  var<workgroup> tileK: array<${B.type.storage}, 144>;\n  ${t.registerUniforms(a).declareVariables(B,s,F)}\n  ${t.mainStart([l,l,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${fillVector(U,i)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${sumVector("value",i)} * uniforms.alpha;\n    }\n  }`}},{inputs:I,outputs:[-1]})[0];return computeInPlaceSoftmax(t,o,s.batchSize*s.numHeads*s.sequenceLength,s.totalSequenceLength),o},computeVxAttentionScore=(t,e,n,B)=>{const s=[B.batchSize,B.sequenceLength,B.vHiddenSize],F=12,Q={x:Math.ceil(B.vHeadSize/F),y:Math.ceil(B.sequenceLength/F),z:B.batchSize*B.numHeads},U=[{type:"uint32",data:B.sequenceLength},{type:"uint32",data:B.totalSequenceLength},{type:"uint32",data:B.vHeadSize},{type:"uint32",data:B.numHeads},{type:"uint32",data:B.vHiddenSize}];return t.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:s,dataType:e.dataType,gpuDataType:0}],dispatchGroup:Q,programUniforms:U}),getShaderSource:t=>{const B=inputVariable("probs",e.dataType,e.dims),Q=inputVariable("v",n.dataType,n.dims),U=outputVariable("output",e.dataType,s);return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileQ: array<${B.type.value}, 144>;\n  var<workgroup> tileK: array<${B.type.value}, 144>;\n  ${t.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}]).declareVariables(B,Q,U)}\n  ${t.mainStart([F,F,1])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${B.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`}},{inputs:[e,n],outputs:[0]})[0]},applyAttention=(t,e,n,B,s,F,Q,U,i,a,l)=>{const c=computeAttentionProbs(t,e,n,i,a,l);computeVxAttentionScore(t,c,B,a)},prepare=(t,e)=>{const n=[e.batchSize,e.numHeads,e.sequenceLength,e.headSize],B=e.sequenceLength,s=e.inputHiddenSize,F=e.headSize,Q=12,U={x:Math.ceil(e.headSize/Q),y:Math.ceil(e.sequenceLength/Q),z:e.batchSize*e.numHeads},i=[t.inputs[0],t.inputs[1],t.inputs[2]],a=[{type:"uint32",data:B},{type:"uint32",data:s},{type:"uint32",data:F},{type:"uint32",data:e.numHeads},{type:"uint32",data:e.headSize},{type:"uint32",data:e.hiddenSize},{type:"uint32",data:e.hiddenSize+e.hiddenSize+e.vHiddenSize}];return t.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:t.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:t.inputs[0].dataType,gpuDataType:0}],dispatchGroup:U,programUniforms:a}),getShaderSource:t=>{const e=outputVariable("output_q",i[0].dataType,n),B=outputVariable("output_k",i[0].dataType,n),s=outputVariable("output_v",i[0].dataType,n),F=inputVariable("input",i[0].dataType,i[0].dims),U=inputVariable("weight",i[1].dataType,i[1].dims),a=inputVariable("bias",i[2].dataType,i[2].dims),l=F.type.storage;return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileInput: array<${l}, 144>;\n  var<workgroup> tileWeightQ: array<${l}, 144>;\n  var<workgroup> tileWeightK: array<${l}, 144>;\n  var<workgroup> tileWeightV: array<${l}, 144>;\n  ${t.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}]).declareVariables(F,U,a,e,B,s)}\n  ${t.mainStart([Q,Q,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${l}(0);\n    var valueK = ${l}(0);\n    var valueV = ${l}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`}},{inputs:i,outputs:[-1,-1,-1]})},attention=(t,e)=>{const n=validateAttentionInputs(t.inputs,e),[B,s,F]=prepare(t,n);return applyAttention(t,B,s,F,t.inputs[4],void 0,void 0,void 0,t.inputs[5],n,e)}}}),validateInputs29,createBatchNormInferenceProgramInfo,parseBatchNormAttributes,batchNorm,init_batch_norm=__esm({"web/lib/wasm/jsep/webgpu/ops/batch-norm.ts"(){init_esm(),init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs29=(t,e)=>{if(!t||5!==t.length)throw new Error("BatchNormalization requires 5 inputs");const n=(t,e,n)=>{const B=e.length;if(B!==t.length)throw new Error(`${n}: num dimensions != ${B}`);e.forEach(((e,B)=>{if(e!==t[B])throw new Error(`${n}: dim[${B}] do not match`)}))};if(t[0].dims.length>1){const B="NHWC"===e.format?e.spatial?t[0].dims.slice(-1):t[0].dims.slice(-1).concat(t[0].dims.slice(1,t[0].dims.length-1)):t[0].dims.slice(1,e.spatial?2:void 0);n(t[1].dims,B,"Invalid input scale"),n(t[2].dims,B,"Invalid input B"),n(t[3].dims,B,"Invalid input mean"),n(t[4].dims,B,"Invalid input var")}else n(t[1].dims,[1],"Invalid input scale"),n(t[2].dims,[1],"Invalid input B"),n(t[3].dims,[1],"Invalid input mean"),n(t[4].dims,[1],"Invalid input var")},createBatchNormInferenceProgramInfo=(t,e)=>{const{epsilon:n,spatial:B,format:s}=e,F=t[0].dims,Q=B?getMaxComponents(F[F.length-1]):1,U="NHWC"===s&&F.length>1?Q:1,i=ShapeUtil2.size(F)/Q,a=enableShapesUniforms(F.length)&&B,l=a?F.length:F,c=inputVariable("x",t[0].dataType,t[0].dims,Q),g=inputVariable("scale",t[1].dataType,t[1].dims,U),d=inputVariable("bias",t[2].dataType,t[2].dims,U),I=inputVariable("inputMean",t[3].dataType,t[3].dims,U),o=inputVariable("inputVar",t[4].dataType,t[4].dims,U),r=outputVariable("y",t[0].dataType,l,Q);return{name:"BatchNormalization",shaderCache:{hint:`${e.epsilon}_${e.format}_${B}_${Q}`,inputDependencies:a?["rank","type","type","type","type"]:void 0},getShaderSource:t=>`\n  const epsilon = ${n};\n  ${t.registerUniform("outputSize","u32").declareVariables(c,g,d,I,o,r)}\n  ${t.mainStart()}\n  ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${r.offsetToIndices(`global_idx * ${Q}`)};\n    ${(()=>{let t="";if(B)t=`let cOffset = ${1===F.length?"0u":"NHWC"===s?`outputIndices[${F.length-1}] / ${Q}`:"outputIndices[1]"};`;else if("NCHW"===s)t=`\n            ${r.indicesSet("outputIndices","0","0")}\n            let cOffset = ${r.indicesToOffset("outputIndices")};`;else{t=`var cIndices = ${g.type.indices}(0);\n                       cIndices[0] = outputIndices[${F.length-1}];`;for(let e=1;e<g.rank;e++)t+=`cIndices[${e}] = outputIndices[${e}];`;t+=`let cOffset = ${g.indicesToOffset("cIndices")};`}return t})()}\n    let scale = ${g.getByOffset("cOffset")};\n    let bias = ${d.getByOffset("cOffset")};\n    let inputMean = ${I.getByOffset("cOffset")};\n    let inputVar = ${o.getByOffset("cOffset")};\n    let x = ${c.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${r.setByOffset("global_idx","value")}\n  }`,getRunData:()=>({outputs:[{dims:t[0].dims,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:a?[{type:"uint32",data:i},...createTensorShapeVariables(F)]:[{type:"uint32",data:i}]})}},parseBatchNormAttributes=t=>createAttributeWithCacheKey2(t),batchNorm=(t,e)=>{const{inputs:n,outputCount:B}=t,s=parseBatchNormAttributes({...e,outputCount:B});if(env2.webgpu.validateInputContent&&validateInputs29(n,s),e.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");t.compute(createBatchNormInferenceProgramInfo(n,s))}}}),validateInputs30,createBiasAddProgramInfo,biasAdd,init_bias_add=__esm({"web/lib/wasm/jsep/webgpu/ops/bias-add.ts"(){init_util2(),init_common(),validateInputs30=t=>{if(3!==t[0].dims.length)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(t[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(1!==t[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(t[0].dims[2]!==t[1].dims[0])throw new Error("last dimension of input and bias are not the same")},createBiasAddProgramInfo=t=>{const e=t[0].dims,n=t[0].dims[2],B=ShapeUtil2.size(e)/4,s=t[0].dataType,F=inputVariable("input",s,e,4),Q=inputVariable("bias",s,[n],4),U=inputVariable("residual",s,e,4),i=outputVariable("output",s,e,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:e,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(B/64)}}),getShaderSource:t=>`\n  const channels = ${n}u / 4;\n  ${t.declareVariables(F,Q,U,i)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes(B)}\n    let value = ${F.getByOffset("global_idx")}\n      + ${Q.getByOffset("global_idx % channels")} + ${U.getByOffset("global_idx")};\n    ${i.setByOffset("global_idx","value")}\n  }`}},biasAdd=t=>{validateInputs30(t.inputs),t.compute(createBiasAddProgramInfo(t.inputs))}}}),createElementwiseProgramShader,createElementwiseProgramInfo2,abs2,acos2,acosh,asin2,asinh,atan2,atanh,parseCastAttributes2,cast2,generateClipAttributesFromInputs2,clip2,ceil2,cos2,cosh,parseAlphaAttributes,elu2,erfImpl,erf,exp2,floor2,gelu,leakyRelu2,not3,neg2,reciprocal,relu2,sigmoid2,sin2,sinh,sqrt2,tan2,tanh2,thresholdedRelu,log3,init_unary_op2=__esm({"web/lib/wasm/jsep/webgpu/ops/unary-op.ts"(){init_wasm_common(),init_util2(),init_attribute_with_cache_key2(),init_common(),createElementwiseProgramShader=(t,e,n,B,s,F)=>{const Q=Math.ceil(e/4);let U="";U="string"==typeof s?`${s}(a)`:s("a");const i=inputVariable("inputData",n,[Q],4),a=outputVariable("outputData",B,[Q],4);return`\n      ${t.registerUniform("vec_size","u32").declareVariables(i,a)}\n\n  ${F??""}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${i.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx",U)}\n  }`},createElementwiseProgramInfo2=(t,e,n,B,s,F=t.dataType)=>({name:e,shaderCache:{hint:s,inputDependencies:["type"]},getShaderSource:e=>createElementwiseProgramShader(e,ShapeUtil2.size(t.dims),t.dataType,F,n,B),getRunData:e=>({outputs:[{dims:t.dims,dataType:F}],dispatchGroup:{x:Math.ceil(ShapeUtil2.size(e[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(ShapeUtil2.size(t.dims)/4)}]})}),abs2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Abs","abs"))},acos2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Acos","acos"))},acosh=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Acosh","acosh"))},asin2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Asin","asin"))},asinh=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Asinh","asinh"))},atan2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Atan","atan"))},atanh=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Atanh","atanh"))},parseCastAttributes2=t=>createAttributeWithCacheKey2(t),cast2=(t,e)=>{let n;switch(e.to){case 10:n="vec4<f16>";break;case 1:n="vec4<f32>";break;case 12:n="vec4<u32>";break;case 6:n="vec4<i32>";break;case 9:n="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${e.to}`)}t.compute(createElementwiseProgramInfo2(t.inputs[0],"Cast",n,void 0,e.cacheKey,e.to))},generateClipAttributesFromInputs2=t=>{const e=t.length>=2&&0!==t[1].data?t[1].getFloat32Array()[0]:MIN_CLIP2,n=t.length>=3&&0!==t[2].data?t[2].getFloat32Array()[0]:MAX_CLIP2;return createAttributeWithCacheKey2({min:e,max:n})},clip2=(t,e)=>{const n=1===t.inputs.length?e:generateClipAttributesFromInputs2(t.inputs),B=tensorTypeToWsglValueType(t.inputs[0].dataType);t.compute(createElementwiseProgramInfo2(t.inputs[0],"Clip",(t=>`clamp(${t}, clip_min_, clip_max_)`),`\n    const clip_min_: vec4<${B}> = vec4(${B}(${n.min}));\n    const clip_max_: vec4<${B}> = vec4(${B}(${n.max}));\n`,n.cacheKey),{inputs:[0]})},ceil2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Ceil","ceil"))},cos2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Cos","cos"))},cosh=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Cosh","cosh"))},parseAlphaAttributes=t=>createAttributeWithCacheKey2(t),elu2=(t,e)=>{const n=tensorTypeToWsglValueType(t.inputs[0].dataType);t.compute(createElementwiseProgramInfo2(t.inputs[0],"Elu",(t=>`elu_vf32(${t})`),`\n  const elu_alpha_ = ${n}(${e.alpha});\n\n  fn elu_f32(a: ${n}) -> ${n} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${n}>) -> vec4<${n}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,e.cacheKey))},erfImpl=(t,e="f32")=>`\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: ${t}) -> ${t} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,erf=t=>{const e=tensorTypeToWsglValueType(t.inputs[0].dataType);t.compute(createElementwiseProgramInfo2(t.inputs[0],"Erf",(t=>`erf_vf32(${t})`),erfImpl(`vec4<${e}>`,e)))},exp2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Exp","exp"))},floor2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Floor","floor"))},gelu=t=>{const e=tensorTypeToWsglValueType(t.inputs[0].dataType);t.compute(createElementwiseProgramInfo2(t.inputs[0],"Gelu",(t=>`0.5 * ${t} * (1.0 + erf_vf32(${t} * 0.7071067811865475))`),erfImpl(`vec4<${e}>`,e)))},leakyRelu2=(t,e)=>{const n=tensorTypeToWsglValueType(t.inputs[0].dataType);t.compute(createElementwiseProgramInfo2(t.inputs[0],"LeakyRelu",(t=>`select(leaky_relu_alpha_ * ${t}, ${t}, ${t} >= vec4<${n}>(0.0))`),`const leaky_relu_alpha_ = ${n}(${e.alpha});`,e.cacheKey))},not3=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Not",(t=>`!${t}`)))},neg2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Neg",(t=>`-${t}`)))},reciprocal=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Reciprocal",(t=>`1.0/${t}`)))},relu2=t=>{const e=tensorTypeToWsglValueType(t.inputs[0].dataType);t.compute(createElementwiseProgramInfo2(t.inputs[0],"Relu",(t=>`select(vec4<${e}>(0.0), ${t}, ${t} > vec4<${e}>(0.0))`)))},sigmoid2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Sigmoid",(t=>`(1.0 / (1.0 + exp(-${t})))`)))},sin2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Sin","sin"))},sinh=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Sinh","sinh"))},sqrt2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Sqrt","sqrt"))},tan2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Tan","tan"))},tanh2=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Tanh","tanh"))},thresholdedRelu=(t,e)=>{const n=tensorTypeToWsglValueType(t.inputs[0].dataType);return t.compute(createElementwiseProgramInfo2(t.inputs[0],"ThresholdedRelu",(t=>`select(vec4<${n}>(0.0), ${t}, ${t} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_ = vec4<${n}>(${e.alpha});`,e.cacheKey)),0},log3=t=>{t.compute(createElementwiseProgramInfo2(t.inputs[0],"Log","log"))}}}),validateInputs31,createBiasSplitGeluProgramInfo,biasSplitGelu,init_bias_split_gelu=__esm({"web/lib/wasm/jsep/webgpu/ops/bias-split-gelu.ts"(){init_util2(),init_common(),init_unary_op2(),validateInputs31=t=>{if(3!==t[0].dims.length)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(t[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(1!==t[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(t[0].dims[2]!==t[1].dims[0])throw new Error("last dimension of input and bias are not the same")},createBiasSplitGeluProgramInfo=t=>{const e=t[0].dims.slice();e[2]=e[2]/2;const n=inputVariable("input",t[0].dataType,t[0].dims,4),B=inputVariable("bias",t[0].dataType,[t[0].dims[2]],4),s=outputVariable("output",t[0].dataType,e,4),F=ShapeUtil2.size(e)/4,Q=tensorTypeToWsglStorageType(t[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:e,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(F/64)}}),getShaderSource:e=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${t[0].dims[2]/4/2}u;\n\n  ${e.declareVariables(n,B,s)}\n\n  ${erfImpl(`vec4<${Q}>`,Q)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(F)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${s.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},biasSplitGelu=t=>{validateInputs31(t.inputs),t.compute(createBiasSplitGeluProgramInfo(t.inputs))}}}),createBinaryOpProgramShader,createBinaryOpProgramInfo,runBinaryOp,add3,div2,equal2,mul2,pow2,sub2,greater2,less2,greaterOrEqual,lessOrEqual,init_binary_op2=__esm({"web/lib/wasm/jsep/webgpu/ops/binary-op.ts"(){init_wasm_common(),init_util2(),init_common(),createBinaryOpProgramShader=(t,e,n,B,s,F,Q,U,i,a,l,c,g)=>{let d,I;"string"==typeof U?d=I=(t,e)=>`${U}((${t}),(${e}))`:"function"==typeof U?d=I=U:(d=U.scalar,I=U.vector);const o=c?e.length:e,r=c?n.length:n,u=c?B.length:B,b=outputVariable("outputData",l,u,4),C=inputVariable("aData",i,o,4),p=inputVariable("bData",a,r,4);let m;if(s)if(F){const t=1===ShapeUtil2.size(e),B=1===ShapeUtil2.size(n),s=e.length>0&&e[e.length-1]%4==0,F=n.length>0&&n[n.length-1]%4==0;m=t||B?b.setByOffset("global_idx",I(t?`${C.type.value}(${C.getByOffset("0")}.x)`:C.getByOffset("global_idx"),B?`${p.type.value}(${p.getByOffset("0")}.x)`:p.getByOffset("global_idx"))):`\n            let outputIndices = ${b.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${C.broadcastedIndicesToOffset("outputIndices",b)};\n            let offsetB = ${p.broadcastedIndicesToOffset("outputIndices",b)};\n            ${b.setByOffset("global_idx",I(Q||s?C.getByOffset("offsetA / 4u"):`${C.type.value}(${C.getByOffset("offsetA / 4u")}[offsetA % 4u])`,Q||F?p.getByOffset("offsetB / 4u"):`${p.type.value}(${p.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else m=b.setByOffset("global_idx",I(C.getByOffset("global_idx"),p.getByOffset("global_idx")));else{if(!F)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");const t=(t,e,n="")=>{const B=`aData[indexA${e}][componentA${e}]`,s=`bData[indexB${e}][componentB${e}]`;return`\n            let outputIndices${e} = ${b.offsetToIndices(`global_idx * 4u + ${e}u`)};\n            let offsetA${e} = ${C.broadcastedIndicesToOffset(`outputIndices${e}`,b)};\n            let offsetB${e} = ${p.broadcastedIndicesToOffset(`outputIndices${e}`,b)};\n            let indexA${e} = offsetA${e} / 4u;\n            let indexB${e} = offsetB${e} / 4u;\n            let componentA${e} = offsetA${e} % 4u;\n            let componentB${e} = offsetB${e} % 4u;\n            ${t}[${e}] = ${n}(${d(B,s)});\n          `};m=9===l?`\n            var data = vec4<u32>(0);\n            ${t("data",0,"u32")}\n            ${t("data",1,"u32")}\n            ${t("data",2,"u32")}\n            ${t("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${t("outputData[global_idx]",0)}\n            ${t("outputData[global_idx]",1)}\n            ${t("outputData[global_idx]",2)}\n            ${t("outputData[global_idx]",3)}\n          `}return`\n        ${t.registerUniform("vec_size","u32").declareVariables(C,p,b)}\n\n        ${g??""}\n\n        ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${m}\n      }`},createBinaryOpProgramInfo=(t,e,n,B,s,F,Q=n.dataType)=>{const U=!ShapeUtil2.areEqual(n.dims,B.dims);let i=n.dims,a=ShapeUtil2.size(n.dims),l=!1,c=!1;const g=[U];if(U){const t=BroadcastUtil2.calcShape(n.dims,B.dims,!1);if(!t)throw new Error("Can't perform binary op on the given tensors");i=t,a=ShapeUtil2.size(i);const e=1===ShapeUtil2.size(n.dims),s=1===ShapeUtil2.size(B.dims),F=n.dims.length>0&&n.dims[n.dims.length-1]%4==0,Q=B.dims.length>0&&B.dims[B.dims.length-1]%4==0;g.push(e),g.push(s),g.push(F),g.push(Q);let U=1;for(let t=1;t<i.length;t++){const e=n.dims[n.dims.length-t]??1;if(e!==(B.dims[B.dims.length-t]??1))break;U*=e}U%4==0?(c=!0,l=!0):(e||s||F||Q)&&(l=!0)}else l=!0;g.push(l);const d=enableShapesUniforms(n.dims.length)&&enableShapesUniforms(B.dims.length)&&enableShapesUniforms(i.length);return{name:t,shaderCache:{hint:e+g.map((t=>t.toString())).join("_"),inputDependencies:d?["rank","rank"]:["dims","dims"]},getShaderSource:t=>createBinaryOpProgramShader(t,n.dims,B.dims,i,l,U,c,s,n.dataType,B.dataType,Q,d,F),getRunData:()=>({outputs:[{dims:i,dataType:Q}],dispatchGroup:{x:Math.ceil(a/64/4)},programUniforms:d?[{type:"uint32",data:Math.ceil(ShapeUtil2.size(i)/4)},...createTensorShapeVariables(n.dims),...createTensorShapeVariables(B.dims),...createTensorShapeVariables(i)]:[{type:"uint32",data:Math.ceil(ShapeUtil2.size(i)/4)}]})}},runBinaryOp=(t,e,n,B,s,F)=>{t.compute(createBinaryOpProgramInfo(e,s??"",t.inputs[0],t.inputs[1],n,B,F))},add3=t=>{runBinaryOp(t,"Add",((t,e)=>`${t}+${e}`))},div2=t=>{runBinaryOp(t,"Div",((t,e)=>`${t}/${e}`))},equal2=t=>{runBinaryOp(t,"Equal",{scalar:(t,e)=>`u32(${t}==${e})`,vector:(t,e)=>`vec4<u32>(${t}==${e})`},void 0,void 0,9)},mul2=t=>{runBinaryOp(t,"Mul",((t,e)=>`${t}*${e}`))},pow2=t=>{const e=inputVariable("input",t.inputs[0].dataType,t.inputs[0].dims).type.value;runBinaryOp(t,"Pow",{scalar:(t,e)=>`pow_custom(${t},${e})`,vector:(t,e)=>`pow_vector_custom(${t},${e})`},`\n    fn pow_custom(a : ${e}, b : ${e}) -> ${e} {\n      if (b == ${e}(0.0)) {\n        return ${e}(1.0);\n      } else if (a < ${e}(0.0) && f32(b) != floor(f32(b))) {\n        return ${e}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${e}(1.0), round(f32(abs(b) % ${e}(2.0))) != 1.0) * ${e}(${"i32"===e?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${e}>, b : vec4<${e}>) -> vec4<${e}> {\n      // TODO: implement vectorized pow\n      return vec4<${e}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},sub2=t=>{runBinaryOp(t,"Sub",((t,e)=>`${t}-${e}`))},greater2=t=>{runBinaryOp(t,"Greater",{scalar:(t,e)=>`u32(${t}>${e})`,vector:(t,e)=>`vec4<u32>(${t}>${e})`},void 0,void 0,9)},less2=t=>{runBinaryOp(t,"Less",{scalar:(t,e)=>`u32(${t}<${e})`,vector:(t,e)=>`vec4<u32>(${t}<${e})`},void 0,void 0,9)},greaterOrEqual=t=>{runBinaryOp(t,"GreaterOrEqual",{scalar:(t,e)=>`u32(${t}>=${e})`,vector:(t,e)=>`vec4<u32>(${t}>=${e})`},void 0,void 0,9)},lessOrEqual=t=>{runBinaryOp(t,"LessOrEqual",{scalar:(t,e)=>`u32(${t}<=${e})`,vector:(t,e)=>`vec4<u32>(${t}<=${e})`},void 0,void 0,9)}}}),validateInputs32,calculateInputIndexImpl,assignOutputData,createConcatProgramInfo,concat2,parseConcatAttributes2,init_concat2=__esm({"web/lib/wasm/jsep/webgpu/ops/concat.ts"(){init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs32=t=>{if(!t||t.length<1)throw new Error("too few inputs");const e=t[0].dataType,n=t[0].dims.length;for(const B of t){if(B.dataType!==e)throw new Error("input tensors should be one type");if(B.dims.length!==n)throw new Error("input tensors should have the same shape")}},calculateInputIndexImpl=(t,e)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${t}u>(${e});\n    for (var i: u32 = 0u; i < ${t}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${t}u;\n  }`,assignOutputData=(t,e)=>{const n=t.length,B=[];for(let s=0;s<n;++s){const F=e.setByOffset("global_idx",t[s].getByIndices("indices"));1===n?B.push(F):0===s?B.push(`if (inputIndex == ${s}u) { ${F} }`):s===n-1?B.push(`else { ${F} }`):B.push(`else if (inputIndex == ${s}) { ${F} }`)}return B.join("\n")},createConcatProgramInfo=(t,e)=>{const n=t[0].dims.slice();if(e>=n.length||e<-1*n.length)throw new Error("axis specified for concat doesn't match input dimensionality");const B=e<0?n.length+e:e,s=n.slice(0);for(let e=1;e<t.length;e++){const F=t[e].dims.slice();for(let t=0;t<n.length;t++)if(t===B)s[B]+=F[t];else if(n[t]!==F[t])throw new Error("non concat dimensions must match")}const F=ShapeUtil2.size(s),Q=new Array(t.length),U=new Array(t.length),i=t[0].dataType;let a=0;const l=[],c=[],g=[],d=[{type:"uint32",data:F}];for(let e=0;e<t.length;++e)a+=t[e].dims[B],Q[e]=a,g.push(enableShapesUniforms(t[e].dims.length)),c.push(g[e]?t[e].dims.length:t[e].dims),U[e]=inputVariable(`input${e}`,i,c[e]),l.push(g[e]?"rank":"dims"),d.push({type:"uint32",data:Q[e]});for(let e=0;e<t.length;++e)g[e]&&d.push(...createTensorShapeVariables(t[e].dims));const I=enableShapesUniforms(s.length);I&&d.push(...createTensorShapeVariables(s));const o=I?s.length:s,r=outputVariable("output",i,o),u=r.indicesGet("indices",B),b=Array.from(Array(Q.length).keys()).map((t=>`uniforms.sizeInConcatAxis${t}`)).join(",");return{name:"Concat",shaderCache:{hint:`${e}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(F/64)},programUniforms:d}),getShaderSource:e=>`\n\n  ${(()=>{e.registerUniform("outputSize","u32");for(let n=0;n<t.length;n++)e.registerUniform(`sizeInConcatAxis${n}`,"u32");return e.declareVariables(...U,r)})()}\n\n  ${calculateInputIndexImpl(Q.length,b)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${r.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${u});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${Q.length}u>(${b});\n      ${u} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${assignOutputData(U,r)}\n  }`}},concat2=(t,e)=>{validateInputs32(t.inputs),t.compute(createConcatProgramInfo(t.inputs,e.axis))},parseConcatAttributes2=t=>createAttributeWithCacheKey2({axis:t.axis})}}),getActivationSnippet2,parseInternalActivationAttributes2,init_fuse_utils2=__esm({"web/lib/wasm/jsep/webgpu/ops/fuse-utils.ts"(){init_util2(),getActivationSnippet2=(t,e)=>{switch(t.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${e}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${e}(1.0) / (${e}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${e}(${t.clipMin});const clip_max_=${e}(${t.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},parseInternalActivationAttributes2=t=>{const e=t?.activation||"";if("Clip"===e){const[n,B]=t?.activation_params||[MIN_CLIP2,MAX_CLIP2];return{activation:e,clipMax:B,clipMin:n,activationCacheKey:`${e}:${n},${B}`}}return{activation:e,activationCacheKey:e}}}}),typeSnippet,biasSnippet,init_activation_util=__esm({"web/lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts"(){typeSnippet=(t,e)=>{switch(t){case 1:return e;case 2:return`vec2<${e}>`;case 3:return`vec3<${e}>`;case 4:return`vec4<${e}>`;default:throw new Error(`${t}-component is not supported.`)}},biasSnippet=t=>`\n      ${t?"value = value + getBiasByOutputCoords(coords);":""}\n      `}}),utilFunctions,init_conv_util=__esm({"web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts"(){utilFunctions=t=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${t}.x), i32(${t}.y), i32(${t}.z), 1));\n}\n`}}),writeDataToSubAVec4Snippet,calculateResultSnippet,makeMatMulPackedVec4Source,writeDataToSubASnippet,readDataFromSubASnippet,makeMatMulPackedSource,matMulReadWriteFnSource,createMatmulProgramInfo2,init_matmul_packed_webgpu=__esm({"web/lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts"(){init_util2(),init_common(),init_fuse_utils2(),init_activation_util(),writeDataToSubAVec4Snippet=(t,e)=>t?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${e?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${e?", batchIndices":""});\n        `,calculateResultSnippet=(t,e)=>t?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${3===e?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${3===e?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${3===e?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,makeMatMulPackedVec4Source=(t,e,n="f32",B,s=!1,F=32,Q=!1,U=32)=>{const i=e[1]*t[1],a=e[0]*t[0],l=s?i:F,c=s?F:i,g=l/e[0],d=F/e[1];if((!s||4!==g||4!==t[1])&&(s||3!==g&&4!==g)||l%e[0]!=0||F%e[1]!=0||4!==t[0])throw new Error(`If transposeA ${s} is true, innerElementSize ${g} and workPerThread[1] ${t[1]} must be 4.\n      Otherwise, innerElementSize ${g} must be 3 or 4.\n  tileAWidth ${l} must be divisible by workgroupSize[0]${e[0]}. tileInner ${F} must be divisible by workgroupSize[1] ${e[1]}. colPerThread ${t[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${g}<${n}>, ${l/g}>, ${c}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${n}>, ${a/t[0]}>, ${F}>;\n\nconst rowPerThread = ${t[1]};\nconst colPerThread = ${t[0]};\nconst innerElementSize = ${g};\nconst tileInner = ${F};\n\n@compute @workgroup_size(${e[0]}, ${e[1]}, ${e[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${Q?"0":"i32(globalId.z)"};\n  ${B?`let batchIndices = ${B.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${i};\n\n  let numTiles = ${Q?`${Math.ceil(U/F)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${Q?`i32(globalId.z) * ${U}`:"0"};\n\n  var acc: array<vec4<${n}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${d};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(s,B)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${B?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${3===g?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${calculateResultSnippet(s,g)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},writeDataToSubASnippet=(t,e)=>t?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${e?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${e?", batchIndices":""});\n            `,readDataFromSubASnippet=t=>t?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",makeMatMulPackedSource=(t,e,n="f32",B,s=!1,F=32,Q=!1,U=32,i=!1)=>{const a=t[1]*e[1],l=t[0]*e[0],c=s?a:F,g=s?F:a;if(g%e[1]!=0||c%e[0]!=0||F%e[1]!=0)throw new Error(`tileAHight ${g} must be divisible by workgroupSize[1]${e[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${e[0]}, tileInner ${F} must be divisible by workgroupSize[1]${e[1]}`);const d=g/e[1],I=c/e[0],o=F/e[1],r=i?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${a};\n    let globalColStart = i32(workgroupId.x) * ${l};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${g}; inputRow = inputRow + ${e[1]}) {\n        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${e[0]}) {\n          ${writeDataToSubASnippet(s,B)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${F}; inputRow = inputRow + ${e[1]}) {\n            for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${e[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${B?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${n}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${e[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${s?`mm_Asub[k][localRow + innerRow * ${e[1]}];`:`mm_Asub[localRow + innerRow * ${e[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${e[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${e[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${a};\n\nlet tileRowA = i32(localId.y) * ${d};\nlet tileColA = i32(localId.x) * ${I};\nlet tileRowB = i32(localId.y) * ${o};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${I}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(s,B)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${o}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${B?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${n}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(s)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${n}, ${c}>, ${g}>;\n  var<workgroup> mm_Bsub : array<array<${n}, ${l}>, ${F}>;\n  const rowPerThread = ${t[1]};\n  const colPerThread = ${t[0]};\n  const tileInner = ${F};\n\n@compute @workgroup_size(${e[0]}, ${e[1]}, ${e[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${Q?"0":"i32(globalId.z)"};\n    ${B?`let batchIndices = ${B.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${Q?`${Math.ceil(U/F)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${Q?`i32(globalId.z) * ${U}`:"0"};\n\n    var acc : array<array<${n}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${r}\n  }\n`},matMulReadWriteFnSource=(t,e,n,B,s,F=!1)=>{const[Q,U,i]=s,[a,l,c,g]=B,d=getBroadcastDims(Q,i),I=getBroadcastDims(U,i),o=tensorTypeToWsglStorageType(B[0].type.tensor);return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${a.type.indices}) -> ${typeSnippet(t,o)} {\n      var value = ${typeSnippet(t,o)}(0.0);\n      let col = colIn * ${t};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${(()=>{const t=l.rank,e=a.rank;let n=`var aIndices: ${l.type.indices};`;for(let B=t-2-1,s=e-1;B>=0;B--,s--)n+=`\naIndices[${B}] = ${e>1?`batchIndices[${s}]`:"batchIndices"};`;return d.forEach((t=>{n+=`\naIndices[${t}] = 0;`})),n+=`\naIndices[${t-2}] = u32(row);\n                   aIndices[${t-1}] = u32(colIn);`,n})()}\n        value = ${l.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${a.type.indices}) -> ${typeSnippet(t,o)} {\n      var value = ${typeSnippet(t,o)}(0.0);\n      let col = colIn * ${t};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${(()=>{const t=c.rank,e=a.rank;let n=`var bIndices: ${c.type.indices};`;for(let B=t-2-1,s=e-1;B>=0;B--,s--)n+=`\nbIndices[${B}] = ${e>1?`batchIndices[${s}]`:"batchIndices"};`;return I.forEach((t=>{n+=`\nbIndices[${t}] = 0;`})),n+=`\nbIndices[${t-2}] = u32(row);\n                   bIndices[${t-1}] = u32(colIn);`,n})()}\n        value = ${c.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${typeSnippet(t,o)}) {\n      let col = colIn * ${t};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${e?`value = value + ${F?"bias[colIn]":`${typeSnippet(t,o)}(bias[row])`};`:""}\n        ${n}\n        ${g.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},createMatmulProgramInfo2=(t,e,n,B,s=!1)=>{const F=t[0].dims,Q=t[1].dims,U=F.slice(0,-2),i=Q.slice(0,-2),a=B?B.slice(0,-2):n.slice(0,-2),l=enableShapesUniforms(a.length),c=l?a.length:a,g=internalVariable("batchDims",t[0].dataType,c,1),d=ShapeUtil2.size(a),I=F[F.length-2],o=F[F.length-1],r=Q[Q.length-1],u=o%4==0&&r%4==0,b=I<=8?[4,1,1]:[4,4,1],C=[8,8,1],p=[Math.ceil(r/C[0]/b[0]),Math.ceil(I/C[1]/b[1]),Math.ceil(d/C[2]/b[2])],m=tensorTypeToWsglStorageType(t[0].dataType),G=u?4:1,V=[...U,I,o/G],x=enableShapesUniforms(V.length),h=x?V.length:V,Z=[...i,o,r/G],S=enableShapesUniforms(Z.length),y=S?Z.length:Z,A=[d,I,r/G],X=inputVariable("a",t[0].dataType,h,G),R=inputVariable("b",t[1].dataType,y,G),L=outputVariable("result",t[0].dataType,A.length,G),W=[X,R],N=[{type:"int32",data:I},{type:"int32",data:r},{type:"int32",data:o}];l&&N.push(...createTensorShapeVariables(a)),x&&N.push(...createTensorShapeVariables(V)),S&&N.push(...createTensorShapeVariables(Z));const E=[];E.push(x?"rank":"dims"),E.push(S?"rank":"dims");const T=t.length>2,{activationFunction:Y,applyActivation:H}=getActivationSnippet2(e,L.type.value),J=matMulReadWriteFnSource(G,T,H,[g,X,R,L],[U,i,a],s);if(T){const e=s?G:1;W.push(inputVariable("bias",t[2].dataType,t[2].dims.length,e)),N.push(...createTensorShapeVariables(t[2].dims)),E.push("rank")}N.push(...createTensorShapeVariables(A));return{name:"MatMul",shaderCache:{hint:e.activationCacheKey+`${b}${u}${s}`,inputDependencies:E},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:p[0],y:p[1],z:p[2]},programUniforms:N}),getShaderSource:t=>`\n  ${t.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(g).declareVariables(...W,L)}\n  ${Y}\n  ${J}\n  ${u?makeMatMulPackedVec4Source(b,C,m,g):makeMatMulPackedSource(b,C,m,g)}\n                   `}}}}),conv2dCommonSnippet,createConv2DMatMulProgramInfo,init_conv2d_mm_webgpu=__esm({"web/lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts"(){init_log(),init_common(),init_fuse_utils2(),init_activation_util(),init_conv_util(),init_matmul_packed_webgpu(),conv2dCommonSnippet=(t,e,n,B,s=!1,F,Q=4,U=4,i=4,a="f32")=>{const l=t?"\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ":"\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    ",c=t?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",g=t?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",d=t?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=t?"row":"col",o=t?"col":"row",r=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${t?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${o} / (filterDims[1] * inChannels);\n    let WCol = ${o} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${o} % inChannels;\n    var resData = ${typeSnippet(Q,a)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${g} && xCol >= 0 && xCol < ${d}) {\n      ${l}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${(t=>{switch(t){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${a}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${t} is not supported.`)}})(Q)}\n    }\n    return resData;`,u=t?e&&B?`\n    let col = colIn * ${Q};\n    ${r}`:`\n    let col = colIn * ${Q};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${r}\n    }\n    return ${typeSnippet(Q,a)}(0.0);`:B&&n?`\n    let col = colIn * ${Q};\n    ${r}`:`\n    let col = colIn * ${Q};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${r}\n    }\n    return ${typeSnippet(Q,a)}(0.0);`,b=`${(t=>{switch(t){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${t} is not supported.`)}})(U)}`,C=typeSnippet(i,a),p=typeSnippet(t?Q:U,a),m=typeSnippet(t?U:Q,a),{activationFunction:G,applyActivation:V}=getActivationSnippet2(F,C);return`\n    ${G}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${p} {\n      ${t?u:b}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${m} {\n      ${t?b:u}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${C}) {\n      let col = colIn * ${i};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${t?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${c}\n      ${biasSnippet(s)}\n      ${V}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},createConv2DMatMulProgramInfo=(t,e,n,B,s,F,Q,U)=>{const i="NHWC"===e.format,a=i?t[0].dims[3]:t[0].dims[1],l=n[0],c=i?n[2]:n[3],g=i?n[1]:n[2],d=i?n[3]:n[1],I=i&&(a%4==0||a%3==0)&&d%4==0,o=i?d:c*g,r=i?c*g:d,u=[8,8,1],b=B<=8?[4,1,1]:[4,4,1],C=[Math.ceil(o/u[0]/b[0]),Math.ceil(r/u[1]/b[1]),Math.ceil(l/u[2]/b[2])];LOG_DEBUG("verbose",(()=>`[conv2d_mm_webgpu] dispatch = ${C}`));const p=I?i&&a%4!=0?3:4:1,m=u[1]*b[1],G=u[0]*b[0],V=Math.max(u[0]*p,u[1]),x=B%m==0,h=s%G==0,Z=F%V==0,S=I?[p,4,4]:[1,1,1],y=tensorTypeToWsglStorageType(t[0].dataType),A=I?4:1,X=[{type:"int32",data:B},{type:"int32",data:s},{type:"int32",data:F}],R=[inputVariable("x",t[0].dataType,t[0].dims.length,3===p?1:p),inputVariable("w",t[1].dataType,t[1].dims.length,A)];X.push(...createTensorShapeVariables(t[0].dims)),X.push(...createTensorShapeVariables(t[1].dims));let L=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${I?`vec4<${y}>`:y}) {\n        result[flatIndex] = ${I?`vec4<${y}>`:y}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${I?`vec4<${y}>`:y}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${I?"/ 4":""}, value);\n      }`;if(Q){const e=inputVariable("bias",t[2].dataType,t[2].dims.length,A);R.push(e),X.push(...createTensorShapeVariables(t[2].dims)),L+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${I?`vec4<${y}>`:y} {\n          return bias[coords.${i?"w":"y"}${I?"/ 4":""}];\n        }`}const W=outputVariable("result",t[0].dataType,n.length,A);return X.push(...createTensorShapeVariables(n)),{name:"Conv2DMatMul",shaderCache:{hint:e.cacheKey},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:C[0],y:C[1],z:C[2]},programUniforms:X}),getShaderSource:t=>`\n        ${utilFunctions("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${t.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...R,W)}\n        const filterDims : vec2<i32> = vec2<i32>(${e.kernelShape[0]}, ${e.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${e.pads[0]}, ${e.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${e.strides[0]}, ${e.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${e.dilations[0]}, ${e.dilations[1]});\n        ${L}\n        ${conv2dCommonSnippet(i,x,h,Z,Q,e,S[0],S[1],S[2],y)}\n            ${I?makeMatMulPackedVec4Source(b,u,y,void 0,!i,V):makeMatMulPackedSource(b,u,y,void 0,!i,V,!1,void 0,U)}`}}}}),createGroupedConvProgramInfo,createGroupedConvVectorizeProgramInfo,init_conv_grouped2=__esm({"web/lib/wasm/jsep/webgpu/ops/conv-grouped.ts"(){init_util2(),init_common(),init_conv2(),init_fuse_utils2(),createGroupedConvProgramInfo=(t,e,n)=>{const B=t.length>2,s=B?"value += b[output_channel];":"",F=t[0].dims,Q=t[1].dims,U=Q[0]/e.group,i="NHWC"===e.format,a=calculateOutputShape2(F,Q,e.dilations,e.pads,e.strides,i),l=ShapeUtil2.size(a),c=outputVariable("output",t[0].dataType,a),{activationFunction:g,applyActivation:d}=getActivationSnippet2(e,c.type.value),I=inputVariable("x",t[0].dataType,F),o=inputVariable("w",t[1].dataType,Q),r=[I,o];B&&r.push(inputVariable("b",t[2].dataType,t[2].dims));return{name:"GroupedConv",shaderCache:{hint:e.cacheKey},getRunData:()=>({outputs:[{dims:n?n(a):a,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)}}),getShaderSource:t=>`\n  const strides: vec2<u32> = vec2(${e.strides[0]}u, ${e.strides[1]}u);\n  const pads: vec2<u32> = vec2(${e.pads[0]}u, ${e.pads[1]}u);\n\n  ${t.declareVariables(...r,c)}\n\n  ${g}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes(l)}\n\n    let outputIndices = ${c.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${i?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${i?1:2}], outputIndices[${i?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${U}u;\n\n    var value: ${c.type.value} = ${c.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${Q[1]}u; wInChannel++) {\n      let input_channel = group_id * ${Q[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${Q[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${e.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${F[i?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${Q[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${e.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${F[i?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${i?I.get("batch","xHeight","xWidth","input_channel"):I.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${o.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${s}\n    ${d}\n    ${c.setByOffset("global_idx","value")}\n  }`}},createGroupedConvVectorizeProgramInfo=(t,e,n)=>{const B=t.length>2,s=getMaxComponents(n[3]),F=getMaxComponents(n[2]),Q=ShapeUtil2.size(n)/s/F,U=[t[0].dims[0],t[0].dims[1],t[0].dims[2],t[0].dims[3]/s],i=[t[1].dims[0],t[1].dims[1],t[1].dims[2],t[1].dims[3]/s],a=[n[0],n[1],n[2],n[3]/s],l=[{type:"uint32",data:Q},{type:"int32",data:e.strides},{type:"int32",data:e.pads},...createTensorShapeVariables(U),...createTensorShapeVariables(i),...createTensorShapeVariables(a)],c=(F-1)*e.strides[1]+i[1];return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${e.activationCacheKey};${s};${F};${c};${i[0]};${i[1]}`,inputDependencies:B?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(Q/64)},programUniforms:l}),getShaderSource:n=>{const Q=outputVariable("output",t[0].dataType,a.length,s),{activationFunction:l,applyActivation:g}=getActivationSnippet2(e,Q.type.value),d=inputVariable("x",t[0].dataType,U.length,s),I=inputVariable("w",t[1].dataType,i.length,s),o=[d,I];B&&o.push(inputVariable("b",t[2].dataType,t[2].dims,s));const r=B?"value += b[output_channel];":"";return`\n  ${n.registerUniform("output_size","u32").registerUniform("strides","i32",2).registerUniform("pads","i32",2).declareVariables(...o,Q)}\n  ${l}\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${F}u;\n    let col = (index1 % width1) * ${F}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${d.type.value}, ${c}>;\n    var values: array<${Q.type.value}, ${F}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w's height/width.\n    for (var w_height: u32 = 0u; w_height < ${i[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 || u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${c}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${d.get("batch","u32(x_height)","u32(x_width)","input_channel")};\n          } else {\n            x_vals[i] = ${d.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${i[1]}; w_width++) {\n          let w_val = ${I.get("w_height","w_width","0","output_channel")};\n          for (var i = 0u; i < ${F}u; i++) {\n            values[i] = fma(x_vals[i * ${e.strides[1]}u + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${F}u; i++) {\n      var value = values[i];\n      ${r}\n      ${g}\n      ${Q.set("batch","row","col + i","output_channel","value")};\n    }\n  }`}}}}}),createNaiveMatmulProgramInfo,validateInputs33,matMul2,init_matmul2=__esm({"web/lib/wasm/jsep/webgpu/ops/matmul.ts"(){init_util2(),init_matmul_packed_webgpu(),init_common(),init_fuse_utils2(),createNaiveMatmulProgramInfo=(t,e,n,B,s=!1)=>{const F=t[0].dims,Q=t[1].dims,U=F[F.length-2],i=Q[Q.length-1],a=F[F.length-1],l=getMaxComponents(i),c=getMaxComponents(a),g=getMaxComponents(U),d=ShapeUtil2.size(n)/l/g,I=t.length>2,o=B?B.slice(0,-2):n.slice(0,-2),r=[ShapeUtil2.size(o),U,i],u=[{type:"uint32",data:d},{type:"uint32",data:U},{type:"uint32",data:i},{type:"uint32",data:a},...createTensorShapeVariables(o),...createTensorShapeVariables(F),...createTensorShapeVariables(Q)];I&&u.push(...createTensorShapeVariables(t[2].dims)),u.push(...createTensorShapeVariables(r));return{name:"MatMulNaive",shaderCache:{hint:`${e.activationCacheKey}_${l}_${c}_${g}_${s}`,inputDependencies:I?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:u}),getShaderSource:B=>{const U=internalVariable("batch_dims",t[0].dataType,o.length),i=inputVariable("a",t[0].dataType,F.length,c),a=inputVariable("b",t[1].dataType,Q.length,l),d=outputVariable("output",t[0].dataType,r.length,l),{activationFunction:u,applyActivation:b}=getActivationSnippet2(e,d.type.value),C=[i,a];let p="";if(I){const e=s?l:1;C.push(inputVariable("bias",t[2].dataType,t[2].dims.length,e)),p=""+(s?`value += bias[col / ${e}];`:`value += ${d.type.value}(bias[row + i]);`)}const m=F.slice(0,-2),G=Q.slice(0,-2),V=getBroadcastDims(m,o),x=getBroadcastDims(G,o),h=(t,e)=>{const n=t.rank,B=t.name;if(2===n)return`var ${B}_indices = ${t.type.indices}(0u, 0u);`;const s=U.rank;let F=`var ${B}_indices: ${t.type.indices};`;for(let t=n-2-1,e=s-1;t>=0;t--,e--)F+=`\n${B}_indices[${t}] = ${s>1?`batch_indices[${e}]`:"batch_indices"};`;return e.forEach((t=>{F+=`\n${B}_indices[${t}] = 0;`})),F+=`${B}_indices[${n-2}] = 0u;\n                     ${B}_indices[${n-1}] = 0u;`,F};return`\n  ${B.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(U).declareVariables(...C,d)}\n  ${u}\n  ${B.mainStart()}\n    ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    let col = (global_idx % (uniforms.N / ${l})) * ${l};\n    var index1 = global_idx / (uniforms.N / ${l});\n    let stride1 = uniforms.M / ${g};\n    let row = (index1 % stride1) * ${g};\n    let batch = index1 / stride1;\n\n    ${2===n.length?"":`let batch_indices = ${U.offsetToIndices("batch")};`}\n    ${h(i,V)}\n    let a_offset = ${i.indicesToOffset("a_indices")};\n    ${h(a,x)}\n    let b_offset = ${a.indicesToOffset("b_indices")};\n    var values: array<${d.type.value}, ${g}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${c}) {\n      ${(()=>{let t=`var a_data: ${i.type.value};`;for(let e=0;e<c;e++)t+=`\n              let b_data${e} = b[(b_offset + (k + ${e}) * uniforms.N + col) / ${l}];`;for(let e=0;e<g;e++){t+=`a_data = a[(a_offset + (row + ${e}) * uniforms.K + k) / ${c}];`;for(let n=0;n<c;n++)t+=`\n            values[${e}] = fma(${a.type.value}(a_data${1===c?"":`[${n}]`}), b_data${n}, values[${e}]);\n`}return t})()}\n    }\n    for (var i = 0u; i < ${g}u; i++) {\n      var value = values[i];\n      ${p}\n      ${b}\n      let cur_indices = ${d.type.indices}(batch, row + i, col);\n      let offset = ${d.indicesToOffset("cur_indices")};\n      ${d.setByOffset(`offset / ${l}`,"value")};\n    }\n  }\n  `}}},validateInputs33=t=>{if(!t||2!==t.length)throw new Error("MatMul requires 2 inputs.");if(t[0].dims[t[0].dims.length-1]!==t[1].dims[t[1].dims.length-2])throw new Error("shared dimension does not match.")},matMul2=t=>{validateInputs33(t.inputs);const e=BroadcastUtil2.calcShape(t.inputs[0].dims,t.inputs[1].dims,!0);if(!e)throw new Error("Can't use matmul on the given tensors");const n=e[e.length-1],B=t.inputs[0].dims[t.inputs[0].dims.length-1];n<8&&B<8?t.compute(createNaiveMatmulProgramInfo(t.inputs,{activation:"",activationCacheKey:""},e)):t.compute(createMatmulProgramInfo2(t.inputs,{activation:"",activationCacheKey:""},e))}}}),calculateOutputShape2,weightTransposeAttribute,validateInputs34,getAdjustedConvAttributes2,parseConvAttributes2,conv2d2,conv1d,conv2,init_conv2=__esm({"web/lib/wasm/jsep/webgpu/ops/conv.ts"(){init_util2(),init_attribute_with_cache_key2(),init_conv2d_mm_webgpu(),init_matmul_packed_webgpu(),init_conv_grouped2(),init_fuse_utils2(),init_matmul2(),init_transpose2(),calculateOutputShape2=(t,e,n,B,s,F)=>{const Q=t[0],U=t.slice(F?1:2,F?3:4),i=U.length,a=e[0],l=e.slice(2).map(((t,e)=>t+(t-1)*(n[e]-1))),c=U.map(((t,e)=>t+B[e]+B[e+i])).map(((t,e)=>Math.floor((t-l[e]+s[e])/s[e])));return c.splice(0,0,Q),c.splice(F?3:1,0,a),c},weightTransposeAttribute=[2,3,1,0],validateInputs34=(t,e)=>{if(!t||2!==t.length&&3!==t.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==t[0].dims.length&&3!==t[0].dims.length)throw new Error("currently only support conv 1D and 2D");if(t[0].dims.length!==t[1].dims.length)throw new Error("filter does not have same dimension as input");if(t[0].dims["NHWC"===e.format?t[0].dims.length-1:1]!==t[1].dims[1]*e.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(3===t.length&&(1!==t[2].dims.length||t[1].dims[0]!==t[2].dims[0]))throw new Error("invalid bias");const n=t[0].dims.length-2;if(e.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(e.strides.length!==n)throw new Error(`strides should be ${n}D`);if(e.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==e.kernelShape.length&&e.kernelShape.length!==t[1].dims.length-2)throw new Error("invalid kernel shape")},getAdjustedConvAttributes2=(t,e)=>{const n=t.kernelShape.slice();for(let t=2;t<e[1].dims.length;++t)0===n[t-2]&&(n[t-2]=e[1].dims[t]);const B=t.pads.slice();PoolConvUtil2.adjustPadsBasedOnAutoPad(e[0].dims,t.strides,t.dilations,n,B,"NHWC"===t.format,t.autoPad);const s=Object.assign({},t);return Object.assign(s,{kernelShape:n,pads:B,cacheKey:t.cacheKey}),s},parseConvAttributes2=t=>{const e=parseInternalActivationAttributes2(t),n=t.format,B=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][t.auto_pad],s=t.dilations,F=t.group,Q=t.kernel_shape,U=t.pads,i=t.strides,a=t.w_is_const();return createAttributeWithCacheKey2({autoPad:B,format:n,dilations:s,group:F,kernelShape:Q,pads:U,strides:i,wIsConst:a,...e})},conv2d2=(t,e,n)=>{const B=getAdjustedConvAttributes2(n,e),s="NHWC"===n.format;if(1!==n.group){if(!!0&&s&&e[1].dims[0]===n.group&&1===e[1].dims[1]&&1===n.dilations[0]&&1===n.dilations[1]){const F=calculateOutputShape2(e[0].dims,e[1].dims,n.dilations,B.pads,n.strides,s),Q=t.kernelCustomData.wT??t.compute(createTransposeProgramInfo2(e[1],weightTransposeAttribute),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!t.kernelCustomData.wT&&(t.kernelCustomData.wT=Q);const U=[e[0],Q];3===e.length&&U.push(e[2]),t.compute(createGroupedConvVectorizeProgramInfo(U,B,F),{inputs:U})}else t.compute(createGroupedConvProgramInfo(e,B));return}const F=3===e.length,Q=e[0].dims[s?1:2],U=e[0].dims[s?2:3],i=e[0].dims[s?3:1],a=e[1].dims[2],l=e[1].dims[3],c=calculateOutputShape2(e[0].dims,e[1].dims,n.dilations,B.pads,n.strides,s),g=c[s?1:2],d=c[s?2:3],I=c[s?3:1],o=s&&a===Q&&l===U&&0===n.pads[0]&&0===n.pads[1];if(o||1===a&&1===l&&1===n.dilations[0]&&1===n.dilations[1]&&1===n.strides[0]&&1===n.strides[1]&&0===n.pads[0]&&0===n.pads[1]){const a=c[0];let l,r,u;const b=[];if(s){const B=t.kernelCustomData.wT??t.compute(createTransposeProgramInfo2(e[1],weightTransposeAttribute),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];if(n.wIsConst&&!t.kernelCustomData.wT&&(t.kernelCustomData.wT=B),o){const t=Q*U*i;l=e[0].reshape([1,a,t]),r=B.reshape([1,t,I]),u=[1,a,I]}else l=e[0].reshape([a,Q*U,i]),r=B.reshape([1,i,I]),u=[a,g*d,I];b.push(l),b.push(r)}else l=e[0].reshape([a,i,Q*U]),r=e[1].reshape([1,I,i]),u=[a,I,g*d],b.push(r),b.push(l);F&&b.push(e[2]);const C=u[2],p=b[0].dims[b[0].dims.length-1];return void(C<8&&p<8?t.compute(createNaiveMatmulProgramInfo(b,B,c,u,s),{inputs:b}):t.compute(createMatmulProgramInfo2(b,B,c,u,s),{inputs:b}))}const r=t.kernelCustomData.wT??t.compute(createTransposeProgramInfo2(e[1],weightTransposeAttribute),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!t.kernelCustomData.wT&&(t.kernelCustomData.wT=r);const u=[e[0],r];F&&u.push(e[2]);const b=s?g*d:I,C=s?I:g*d,p=a*l*i;t.compute(createConv2DMatMulProgramInfo(u,B,c,b,C,p,F,!0),{inputs:u})},conv1d=(t,e)=>{const n="NHWC"===e.format,B=[t.inputs[0].reshape(n?[t.inputs[0].dims[0],1,t.inputs[0].dims[1],t.inputs[0].dims[2]]:[t.inputs[0].dims[0],t.inputs[0].dims[1],1,t.inputs[0].dims[2]]),t.inputs[1].reshape([t.inputs[1].dims[0],t.inputs[1].dims[1],1,t.inputs[1].dims[2]])];3===t.inputs.length&&B.push(t.inputs[2]);const s=[0,e.pads[0],0,e.pads[1]],F=[1].concat(e.strides),Q=[1].concat(e.dilations),U=[1].concat(e.kernelShape),i=getAdjustedConvAttributes2({...e,pads:s,strides:F,dilations:Q,kernelShape:U},B);t.compute(createGroupedConvProgramInfo(B,i,(t=>n?[t[0],t[2],t[3]]:[])))},conv2=(t,e)=>{validateInputs34(t.inputs,e),3===t.inputs[0].dims.length?conv1d(t,e):conv2d2(t,t.inputs,e)}}}),conv2dTransposeCommonSnippet,createConv2DTransposeMatMulProgramInfo,init_conv_backprop_mm_webgpu=__esm({"web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_mm_webgpu.ts"(){init_log(),init_common(),init_fuse_utils2(),init_activation_util(),init_conv_util(),init_matmul_packed_webgpu(),conv2dTransposeCommonSnippet=(t,e=!1,n,B=4)=>{const s=typeSnippet(B,"f32"),F=t?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",Q=t?"row":"col",U=t?"col":"row",i=`\n      let inChannels = ${t?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${t?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${Q} / outWidth;\n      let outCol = ${Q} % outWidth;\n\n      let WRow = ${U} / (filterDims[1] * inChannels);\n      let WCol = ${U} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${t?"outBackprop[1]":"outBackprop[2]"}) || fract(xR) > 0.0) {\n        return ${s}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${t?"outBackprop[2]":"outBackprop[3]"}) || fract(xC) > 0.0) {\n        return ${s}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${U} % inChannels;\n      ${t?"\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      "}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${B}];`,a=t?`\n      let col = colIn * ${B};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${i}\n      }\n      return ${s}(0.0);`:`\n      let col = colIn * ${B};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${i}\n      }\n      return ${s}(0.0);`,l=`\n      let col = colIn * ${B};\n      let inChannels = ${t?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${t?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${(t=>{switch(t){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return"\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            ";default:throw new Error(`innerElementSize ${t} is not supported.`)}})(B)}\n      }\n      return ${s}(0.0);\n      `,{activationFunction:c,applyActivation:g}=getActivationSnippet2(n,s);return`\n      ${c}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${s} {\n    ${t?a:l}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${s} {\n    ${t?l:a}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${s}) {\n    let col = colIn * ${B};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${t?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${F}\n      ${biasSnippet(e)}\n      ${g}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${B}] = value;\n    }\n  }`},createConv2DTransposeMatMulProgramInfo=(t,e,n,B,s,F,Q,U)=>{const i="NHWC"===e.format,a=i?t[0].dims[3]:t[0].dims[1],l=n[0],c=i?n[2]:n[3],g=i?n[1]:n[2],d=i?n[3]:n[1],I=i?a%4==0&&d%4==0:c%4==0&&d%4==0,o=i?d:c*g,r=i?c*g:d,u=I?[8,8,1]:[o<=4||r<=4?4:16,o>4&&r<=4?4:16,1],b=I?[4,4,1]:[o<=4?1:4,o>4&&r<=4?1:4,1],C=[Math.ceil(o/u[0]/b[0]),Math.ceil(r/u[1]/b[1]),Math.ceil(l/u[2]/b[2])];LOG_DEBUG("verbose",(()=>`[conv_backprop_mm_webgpu] dispatch = ${C}`));const p=I?4:1,m=Math.max(u[0]*p,u[1]),G=I?4:1,V=[{type:"int32",data:B},{type:"int32",data:s},{type:"int32",data:F}],x=inputVariable("x",t[0].dataType,t[0].dims.length,G),h=inputVariable("w",t[1].dataType,t[1].dims.length,1),Z=outputVariable("result",t[0].dataType,n.length,G),S=[x,h];V.push(...createTensorShapeVariables(t[0].dims)),V.push(...createTensorShapeVariables(t[1].dims));let y="";if(Q){const e=inputVariable("bias",t[2].dataType,t[2].dims.length,G);S.push(e),V.push(...createTensorShapeVariables(t[2].dims)),y+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${I?"vec4<f32>":"f32"} {\n          return bias[coords.${i?"w":"y"}${I?"/ 4":""}];\n        }`}return V.push(...createTensorShapeVariables(n)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:e.cacheKey},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:C[0],y:C[1],z:C[2]},programUniforms:V}),getShaderSource:n=>`\n        ${utilFunctions("uniforms.result_strides")}\n        ${n.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...S,Z)};\n        const outBackprop : vec4<i32> = vec4<i32>(${t[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${e.kernelShape[i?1:2]}, ${e.kernelShape[i?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${e.dilations[0]<=1?0:(e.kernelShape[i?1:2]-1)*(e.dilations[0]-1)},\n              ${e.dilations[1]<=1?0:(e.kernelShape[i?2:3]-1)*(e.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${e.pads[0]+e.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${e.pads[1]+e.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${e.strides[0]}, ${e.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${e.dilations[0]}, ${e.dilations[1]});\n        const dimAOuter : i32 = ${B};\n        const dimBOuter : i32 = ${s};\n        const dimInner : i32 = ${F};\n        ${y}\n        ${conv2dTransposeCommonSnippet(i,Q,e,p)}\n        ${I?makeMatMulPackedVec4Source(b,u,"f32",void 0,!i,m):makeMatMulPackedSource(b,u,"f32",void 0,!i,m,!1,void 0,U)}`}}}}),createConvTranspose2DOpProgramShaderSource,createConvTranspose2DProgramInfo,init_conv_backprop_webgpu=__esm({"web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts"(){init_log(),init_util2(),init_common(),createConvTranspose2DOpProgramShaderSource=(t,e,n,B,s,F,Q=!1,U)=>{const i="NHWC"===n.format,a=i?1:2,l=i?2:3,c=i?3:1,g=ShapeUtil2.size(B),d=Q?2:1,I=n.group,o=e[1].dims,r=o[0]/I,u=o[1];let b=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${Q?`vec4<${U}>`:U}) {\n    result[flatIndex] = ${Q?`vec4<${U}>`:U}(value);\n  }`;s&&(b+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${Q?`vec4<${U}>`:U} {\n      return bias[coords.${i?"w":"y"}${Q?"/ 4":""}];\n    }`);const C=Q?4:1,p=inputVariable("W",e[1].dataType,e[1].dims,C),m=inputVariable("Dy",e[0].dataType,e[0].dims,C),G=[m,p];s&&G.push(inputVariable("bias",e[2].dataType,[B[c]],C));const V=outputVariable("result",e[0].dataType,B,C),x=`{\n        let batch: u32 = ${F?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${F?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${F?"global_id.y":"workgroup_id.y"} * ${d};\n        let d1: u32 = ${F?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${U}>, ${d}>;\n        for (var i = 0; i < ${d}; i++) {\n          dotProd[i] = vec4<${U}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${U}(dyCorner.x) + ${U}(wR)) / ${U}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${U}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${U}(dyCorner.y) + ${U}(wC)) / ${U}(strides.y);\n            let dyC2 = (${U}(dyCorner.y) + 1.0 + ${U}(wC)) / ${U}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${U}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${U}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${m.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${U}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${m.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${U}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${c}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${m.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${U}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${p.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${m.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${U}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${d}; i = i + 1) {\n          let value = dotProd[i] + ${s?"bias[c+i]":`vec4<${U}>(0.0)`};\n          ${V.set("batch","r","c + i","d1","value")};\n        }\n      }`,h=`\n          let outputIndices = ${V.offsetToIndices("global_idx")};\n          let batch = ${V.indicesGet("outputIndices",0)};\n          let d1 = ${V.indicesGet("outputIndices",c)};\n          let r = ${V.indicesGet("outputIndices",a)};\n          let c = ${V.indicesGet("outputIndices",l)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${u};\n          let wOutChannel = d1 - groupId * ${u};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${U}(0.0);\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${U}(dyRCorner) + ${U}(wR)) / ${U}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${U}(outBackprop[${a}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${U}(dyCCorner) + ${U}(wC)) / ${U}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${U}(outBackprop[${l}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${r};\n              for (var d2: u32 = 0; d2 < ${r}; d2 = d2 + 1) {\n                let xValue = ${i?m.get("batch","idyR","idyC","inputChannel"):m.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${p.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${s?"bias[d1]":`${U}(0.0)`};\n          ${V.setByOffset("global_idx","value")};\n        `;return`\n  ${t.declareVariables(...G,V)}\n  ${b}\n  const outShape : vec4<u32> = vec4<u32>(${B.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${e[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${n.strides[0]}, ${n.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${n.kernelShape[i?1:2]}, ${n.kernelShape[i?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${n.dilations[0]}, ${n.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${n.dilations[0]<=1?0:(n.kernelShape[i?1:2]-1)*(n.dilations[0]-1)},\n          ${n.dilations[1]<=1?0:(n.kernelShape[i?2:3]-1)*(n.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${n.pads[0]+n.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${n.pads[1]+n.pads[3]})/2);\n    ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes(g)};\n  ${Q?x:h}}`},createConvTranspose2DProgramInfo=(t,e,n)=>{const B=t.length>2,s=e.outputShape,F=ShapeUtil2.size(s),Q=[Math.ceil(F/64),1,1];LOG_DEBUG("verbose",(()=>`[conv2d_backprop_webgpu] dispatch = ${Q}`));const U=tensorTypeToWsglStorageType(t[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:e.cacheKey},getRunData:()=>({dispatchGroup:{x:Q[0],y:Q[1],z:Q[2]},outputs:[{dims:n?n(s):s,dataType:t[0].dataType}]}),getShaderSource:n=>createConvTranspose2DOpProgramShaderSource(n,t,e,s,B,1===Q[1]&&1===Q[2],!1,U)}}}}),computeTotalPad2,distributePadding2,calculateOutputShapeAndPads2,getAdjustedConvTransposeAttributes2,parseConvTransposeAttributes2,validateInputs35,weightTransposePerm,convTranspose2d2,convTranspose1d,convTranspose2,init_conv_transpose2=__esm({"web/lib/wasm/jsep/webgpu/ops/conv-transpose.ts"(){init_attribute_with_cache_key2(),init_conv_backprop_mm_webgpu(),init_conv_backprop_webgpu(),init_fuse_utils2(),init_transpose2(),computeTotalPad2=(t,e,n,B,s,F)=>(t-1)*e+n+(B-1)*s+1-F,distributePadding2=(t,e,n,B,s)=>{const F=Math.floor(t/2);"SAME_UPPER"===e?(n[B]=F,n[s]=t-F):"SAME_LOWER"===e&&(n[B]=t-F,n[s]=F)},calculateOutputShapeAndPads2=(t,e,n,B,s,F,Q,U,i,a)=>{const l=t.length-2,c=0===a.length;if(0===i.length)for(let t=0;t<l;++t)i.push(0);const g=t[0],d=e[U?3:1]*s;for(let s=0,g=t.length-l-(U?1:0);s<l;++s,++g){const U=t[g],d=c?U*Q[s]:a[s],I=computeTotalPad2(U,Q[s],F[s],e[g],n[s],d);distributePadding2(I,B,F,s,s+l),c&&a.push(Q[s]*(U-1)+i[s]+(e[g]-1)*n[s]+1-F[s]-F[s+l])}a.splice(0,0,g),a.splice(U?3:1,0,d)},getAdjustedConvTransposeAttributes2=(t,e)=>{const n=t.kernelShape.slice();if(0===t.kernelShape.length||0===t.kernelShape.reduce(((t,e)=>t*e),1)){n.length=0;for(let t=2;t<e[1].dims.length;++t)n.push(e[1].dims[t])}const B="NHWC"===t.format;n.splice(0,0,e[1].dims[0]),n.splice(B?3:1,0,e[1].dims[1]);const s=t.pads.slice(),F=t.outputShape.slice(),Q=t.outputPadding.slice(),U=e[0].dims;let i=t.dilations.slice();if(0===i.reduce(((t,e)=>t+e),0)){const t=e[0].dims.length-2;i=new Array(t).fill(1)}let a=t.strides.slice();if(0===a.reduce(((t,e)=>t+e),0)){const t=e[0].dims.length-2;a=new Array(t).fill(1)}calculateOutputShapeAndPads2(U,n,i,t.autoPad,t.group,s,a,B,Q,F);const l=Object.assign({},t),c=t.cacheKey+[n.join("n,"),s.join(","),a.join(","),Q.join(","),F.join(","),i.join(",")].join("_");return Object.assign(l,{kernelShape:n,pads:s,outputPadding:Q,outputShape:F,dilations:i,strides:a,cacheKey:c}),l},parseConvTransposeAttributes2=t=>{const e=parseInternalActivationAttributes2(t),n=t.format,B=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][void 0===t.autoPad?0:t.autoPad],s=t.dilations,F=t.group,Q=t.kernelShape,U=t.pads,i=t.strides,a=t.wIsConst(),l=t.outputPadding,c=t.outputShape;return createAttributeWithCacheKey2({autoPad:B,format:n,dilations:s,group:F,kernelShape:Q,outputPadding:l,outputShape:c,pads:U,strides:i,wIsConst:a,...e})},validateInputs35=(t,e)=>{if(!t||2!==t.length&&3!==t.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==t[0].dims.length&&3!==t[0].dims.length)throw new Error("currently only support 2-dimensional conv");if(t[0].dims.length!==t[1].dims.length)throw new Error("filter does not have same dimension as input");if(t[0].dims["NHWC"===e.format?t[0].dims.length-1:1]!==t[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");const n=t[1].dims[1]*e.group;if(3===t.length&&(1!==t[2].dims.length||t[2].dims[0]!==n))throw new Error("invalid bias");const B=t[0].dims.length-2;if(e.dilations.reduce(((t,e)=>t+e),0)>0&&e.dilations.length!==B)throw new Error(`dilations should be ${B}D`);if(e.strides.reduce(((t,e)=>t+e),0)>0&&e.strides.length!==B)throw new Error(`strides should be ${B}D`);if(e.pads.reduce(((t,e)=>t+e),0)>0&&e.pads.length!==2*B)throw new Error(`pads should be ${2*B}D`);if(e.outputPadding.length!==B&&0!==e.outputPadding.length)throw new Error(`output_padding should be ${B}D`);if(e.kernelShape.reduce(((t,e)=>t+e),0)>0&&0!==e.kernelShape.length&&e.kernelShape.length!==t[1].dims.length-2)throw new Error("invalid kernel shape");if(0!==e.outputShape.length&&e.outputShape.length!==t[0].dims.length-2)throw new Error("invalid output shape")},weightTransposePerm=[2,3,1,0],convTranspose2d2=(t,e,n)=>{const B=getAdjustedConvTransposeAttributes2(n,e),s="NHWC"===n.format,F=B.outputShape,Q=F[s?3:1],U=e[0].dims[s?3:1];if(1!==B.group||1===Q&&1===U)return void t.compute(createConvTranspose2DProgramInfo(e,B));const i=F[s?1:2],a=F[s?2:3],l=s?i*a:Q,c=s?Q:i*a,g=e[1].dims[2]*e[1].dims[3]*U,d=t.kernelCustomData.wT??t.compute(createTransposeProgramInfo2(e[1],weightTransposePerm),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!t.kernelCustomData.wT&&(t.kernelCustomData.wT=d);const I=[e[0],d],o=3===e.length;o&&(s||1!==e[2].dims.length?I.push(e[2]):I.push(e[2].reshape([e[2].dims[0],1,1]))),t.compute(createConv2DTransposeMatMulProgramInfo(I,B,F,l,c,g,o,!0),{inputs:I})},convTranspose1d=(t,e)=>{const n="NHWC"===e.format,B=[t.inputs[0].reshape(n?[t.inputs[0].dims[0],1,t.inputs[0].dims[1],t.inputs[0].dims[2]]:[t.inputs[0].dims[0],t.inputs[0].dims[1],1,t.inputs[0].dims[2]]),t.inputs[1].reshape([t.inputs[1].dims[0],t.inputs[1].dims[1],1,t.inputs[1].dims[2]])];3===B.length&&B.push(t.inputs[2]);let s=e.kernelShape;0!==s.length&&0!==s[0]||(s=[t.inputs[1].dims[2]]);let F=e.dilations;0!==F.length&&0!==F[0]||(F=[1]);let Q=e.strides;0!==Q.length&&0!==Q[0]||(Q=[1]);let U=e.pads;0===U.length&&(U=[0,0]),U=[0,U[0],0,U[1]],Q=[1].concat(Q),F=[1].concat(F),s=[1].concat(s);const i=getAdjustedConvTransposeAttributes2({...e,pads:U,strides:Q,dilations:F,kernelShape:s},B);t.compute(createConvTranspose2DProgramInfo(B,i,(t=>n?[t[0],t[2],t[3]]:[t[0],t[1],t[3]])))},convTranspose2=(t,e)=>{validateInputs35(t.inputs,e),3===t.inputs[0].dims.length?convTranspose1d(t,e):convTranspose2d2(t,t.inputs,e)}}}),createCumsumProgramInfo,cumsum,parseCumSumAttributes,init_cumsum=__esm({"web/lib/wasm/jsep/webgpu/ops/cumsum.ts"(){init_wasm_common(),init_util2(),init_attribute_with_cache_key2(),init_common(),createCumsumProgramInfo=(t,e,n,B)=>{const s=ShapeUtil2.size(e),F=e.length,Q=inputVariable("input",t,F),U=outputVariable("output",t,F),i=6===n.dataType?n.getInt32Array()[0]:Number(n.getBigInt64Array()[0]),a=ShapeUtil2.normalizeAxis(i,F);return{name:"CumSum",shaderCache:{hint:B.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:e,dataType:t}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:"uint32",data:s},{type:"int32",data:a},...createTensorShapeVariables(e),...createTensorShapeVariables(e)]}),getShaderSource:t=>{const e=` i32(${Q.indicesGet("inputIndices","uniforms.axis")}) `,n=getElementAt("uniforms.input_shape","uniforms.axis",F),s=B.reverse?e+(B.exclusive?" + 1":""):"0",i=B.reverse?n:e+(B.exclusive?"":" + 1");return`\n                ${t.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(Q,U)}\n                ${t.mainStart()}\n                  ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${U.offsetToIndices("global_idx")};\n                  var sum = ${U.type.value}(0);\n                  let first : i32 = ${s};\n                  let last : i32 = ${i};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${Q.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${Q.getByIndices("inputIndices")};\n                  }\n                  ${U.setByOffset("global_idx","sum")};\n                }`}}},cumsum=(t,e)=>{const n=t.inputs[0].dims,B=t.inputs[0].dataType,s=t.inputs[1];t.compute(createCumsumProgramInfo(B,n,s,e),{inputs:[0]})},parseCumSumAttributes=t=>{const e=1===t.exclusive,n=1===t.reverse;return createAttributeWithCacheKey2({exclusive:e,reverse:n})}}}),symbolPattern,termPattern,termPatternOnly,lhsPattern,lhsPatternOnly,EinsumTerm,EinsumEquation,appendMax,createEinsumProgramInfo,einsum,parseEinsumAttributes,init_einsum=__esm({"web/lib/wasm/jsep/webgpu/ops/einsum.ts"(){init_util2(),init_attribute_with_cache_key2(),init_common(),termPatternOnly="^"+(termPattern="("+(symbolPattern="[a-zA-Z]|\\.\\.\\.")+")+")+"$",lhsPatternOnly="^"+(lhsPattern="("+termPattern+",)*"+termPattern)+"$",EinsumTerm=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,e){let n=this.symbolToIndices.get(t);void 0===n?n=[e]:n.push(e),this.symbolToIndices.set(t,n)}},EinsumEquation=class{constructor(t,e){this.equation=e,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[n,B]=e.includes("->")?e.split("->",2):[e,""];if(!n.match(RegExp(lhsPatternOnly)))throw new Error("Invalid LHS term");if(n.split(",").forEach(((e,n)=>{const B=t[n].dims.slice();if(!e.match(RegExp(termPatternOnly)))throw new Error("Invalid LHS term");const s=this.processTerm(e,!0,B,n);this.lhs.push(s)})),""===B)B+=[...this.symbolToInfo.entries()].filter((([t,e])=>1===e.count||"..."===t)).map((([t])=>t)).join("");else if(!B.match(RegExp(termPattern)))throw new Error("Invalid RHS");const s=B.match(RegExp(symbolPattern,"g"));s?.forEach((t=>{if("..."===t)this.outputDims=this.outputDims.concat(this.ellipsisDims);else{const e=this.symbolToInfo.get(t);if(void 0===e)throw new Error("Invalid RHS symbol");this.outputDims.push(e.dimValue)}})),this.rhs=this.processTerm(B,!1,this.outputDims)}addSymbol(t,e,n){let B=this.symbolToInfo.get(t);if(void 0!==B){if(B.dimValue!==e&&1!==B.count)throw new Error("Dimension mismatch");B.count++,B.inputIndices.push(n)}else B={count:1,dimValue:e,inputIndices:[n]};this.symbolToInfo.set(t,B)}processTerm(t,e,n,B=-1){const s=n.length;let F=!1,Q=[],U=0;if(!t.match(RegExp(termPatternOnly))&&!e&&""!==t)throw new Error("Invalid LHS term");const i=t.match(RegExp(symbolPattern,"g")),a=new EinsumTerm(B);return i?.forEach(((t,l)=>{if("..."===t){if(F)throw new Error("Only one ellipsis is allowed per input term");F=!0;const t=s-i.length+1;if(t<0)throw new Error("Ellipsis out of bounds");if(Q=n.slice(U,U+t),this.hasEllipsis){if(this.ellipsisDims.length!==Q.length||this.ellipsisDims.toString()!==Q.toString())throw new Error("Ellipsis dimensions mismatch")}else{if(!e)throw new Error("Ellipsis must be specified in the LHS");this.hasEllipsis=!0,this.ellipsisDims=Q}for(let t=0;t<Q.length;t++){const e=String.fromCharCode("0".charCodeAt(0)+t);a.addSymbol(e,l+t),this.addSymbol(e,n[U++],B)}}else a.addSymbol(t,l+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(t,n[U++],B)})),a}},appendMax=t=>t+"_max",createEinsumProgramInfo=(t,e,n,B,s)=>{const F=e.map(((e,n)=>t[n]?e.length:e)).map(((t,e)=>inputVariable(`input${e}`,n,t))),Q=ShapeUtil2.size(s),U=enableShapesUniforms(s.length),i=U?s.length:s,a=outputVariable("output",n,i),l=[...B.symbolToInfo.keys()].filter((t=>!B.rhs.symbolToIndices.has(t)));return{name:"Einsum",shaderCache:{hint:B.equation,inputDependencies:t.map((t=>t?"rank":"dims"))},getRunData:()=>{const F=l.filter((t=>B.symbolToInfo.has(t))).map((t=>({type:"uint32",data:B.symbolToInfo.get(t)?.dimValue||0})));F.push({type:"uint32",data:Q});const i=e.filter(((e,n)=>t[n])).map(((t,e)=>[...createTensorShapeVariables(t)])).reduce(((t,e)=>t.concat(e)),F);return U&&i.push(...createTensorShapeVariables(s)),{outputs:[{dims:s,dataType:n}],dispatchGroup:{x:Math.ceil(Q/64)},programUniforms:i}},getShaderSource:t=>{const e=[],n=[],s=[],Q=[],U=[],i=B.symbolToInfo.size===B.rhs.symbolToIndices.size;B.symbolToInfo.forEach(((t,i)=>{if(B.rhs.symbolToIndices.has(i)){const n=B.rhs.symbolToIndices.get(i)?.[0];void 0!==n&&B.lhs.forEach(((B,s)=>{if(t.inputIndices.includes(s)){const t=B.symbolToIndices.get(i);if(void 0===t)throw new Error("Invalid symbol error");t.forEach((t=>{e.push(`${F[s].indicesSet(`input${s}Indices`,t,a.indicesGet("outputIndices",n))}`)}))}}))}else B.lhs.forEach(((e,B)=>{if(t.inputIndices.includes(B)){const t=e.symbolToIndices.get(i);if(void 0===t)throw new Error("Invalid symbol error");t.forEach((t=>{n.push(`${F[B].indicesSet(`input${B}Indices`,t,`${i}`)}`)})),U.push(`prod *= ${F[B].getByIndices(`input${B}Indices`)};`)}})),s.push(`for(var ${i}: u32 = 0; ${i} < uniforms.${appendMax(i)}; ${i}++) {`),Q.push("}")}));const c=i?[...e,`let sum = ${F.map(((t,e)=>t.getByIndices(`input${e}Indices`))).join(" * ")};`]:[...e,"var sum = 0.0;",...s,...n,"var prod = 1.0;",...U,"sum += prod;",...Q];return`\n            ${t.registerUniforms(l.map((t=>({name:`${appendMax(t)}`,type:"u32"})))).registerUniform("outputSize","u32").declareVariables(...F,a)}\n\n            ${t.mainStart()}\n            ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${a.offsetToIndices("global_idx")};\n            ${F.map(((t,e)=>`var input${e}Indices: ${F[e].type.indices};`)).join("\n")}\n            ${c.join("\n")};\n            ${a.setByOffset("global_idx","sum")};\n          }`}}},einsum=(t,e)=>{const n=new EinsumEquation(t.inputs,e.equation),B=t.inputs.map(((t,e)=>enableShapesUniforms(t.dims.length))),s=n.outputDims,F=t.inputs.map(((t,e)=>t.dims));t.compute(createEinsumProgramInfo(B,F,t.inputs[0].dataType,n,s))},parseEinsumAttributes=t=>{const e=t.equation.replace(/\s+/g,"");return createAttributeWithCacheKey2({equation:e})}}}),validateInputs36,getAdjustedShape,calculateOutputShape3,createExpandProgramInfo,expand,init_expand=__esm({"web/lib/wasm/jsep/webgpu/ops/expand.ts"(){init_wasm_common(),init_util2(),init_common(),validateInputs36=t=>{if(!t||2!==t.length)throw new Error("Expand requires 2 input.");const e=t[0].dims,n=Array.from(t[1].getBigInt64Array(),Number);let B=n.length<e.length?0:n.length-e.length,s=e.length<n.length?0:e.length-n.length;for(;B<n.length&&s<e.length;++B,++s)if(n[B]!==e[s]&&1!==n[B]&&1!==e[s])throw new Error("Expand requires shape to be broadcastable to input")},getAdjustedShape=(t,e)=>{const n=t.length-e.length,B=[];for(let e=0;e<n;++e)B.push(t[e]);for(let s=0;s<e.length;++s)B.push(1===e[s]?t[s+n]:e[s]);return B},calculateOutputShape3=(t,e)=>t.length>e.length?getAdjustedShape(t,e):getAdjustedShape(e,t),createExpandProgramInfo=t=>{const e=t[0].dims,n=Array.from(t[1].getBigInt64Array(),Number),B=calculateOutputShape3(e,n),s=t[0].dataType,F=9===s?4:1,Q=Math.ceil(ShapeUtil2.size(B)/F),U=enableShapesUniforms(e.length),i=enableShapesUniforms(B.length),a=[{type:"uint32",data:Q}];return U&&a.push(...createTensorShapeVariables(e)),i&&a.push(...createTensorShapeVariables(B)),{name:"Expand",shaderCache:{hint:`${B.length}`,inputDependencies:[U?"rank":"dims"]},getShaderSource:t=>{const n=U?e.length:e,Q=i?B.length:B,a=inputVariable("input",s,n,F),l=outputVariable("output",s,Q,F);let c;if(9===s){const t=(t,e,n="")=>`\n          let outputIndices${e} = ${l.offsetToIndices(`outputOffset + ${e}u`)};\n          let offset${e} = ${a.broadcastedIndicesToOffset(`outputIndices${e}`,l)};\n          let index${e} = offset${e} / 4u;\n          let component${e} = offset${e} % 4u;\n          ${t}[${e}] = ${n}(${a.getByOffset(`index${e}`)}[component${e}]);\n        `;c=`\n        let outputOffset = global_idx * ${F};\n        var data = vec4<u32>(0);\n        ${t("data",0,"u32")}\n        ${t("data",1,"u32")}\n        ${t("data",2,"u32")}\n        ${t("data",3,"u32")}\n        ${l.setByOffset("global_idx","data")}\n      }`}else c=`\n        let outputIndices = ${l.offsetToIndices("global_idx")};\n        let inputOffset = ${a.broadcastedIndicesToOffset("outputIndices",l)};\n        ${l.setByOffset("global_idx",a.getByOffset("inputOffset"))}\n      }`;return`\n    ${t.registerUniform("vec_size","u32").declareVariables(a,l)}\n    ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${c}`},getRunData:()=>({outputs:[{dims:B,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(Q/64)},programUniforms:a})}},expand=t=>{validateInputs36(t.inputs),t.compute(createExpandProgramInfo(t.inputs),{inputs:[0]})}}}),validateInputs37,createGatherProgramInfo2,parseGatherAttributes2,gather2,init_gather2=__esm({"web/lib/wasm/jsep/webgpu/ops/gather.ts"(){init_wasm_common(),init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs37=t=>{if(!t||2!==t.length)throw new Error("Gather requires 2 inputs.")},createGatherProgramInfo2=(t,e)=>{const n=t[0].dims,B=t[1].dims,s=n.length,F=ShapeUtil2.normalizeAxis(e.axis,s),Q=n.slice(0);Q.splice(F,1,...B);const U=n[F],i=9===t[0].dataType?4:1,a=Math.ceil(ShapeUtil2.size(Q)/i),l=enableShapesUniforms(t[0].dims.length),c=l?t[0].dims.length:t[0].dims,g=enableShapesUniforms(t[1].dims.length),d=g?t[1].dims.length:t[1].dims,I=enableShapesUniforms(Q.length),o=I?Q.length:Q,r=[{type:"uint32",data:a},{type:"int32",data:U},{type:"uint32",data:F}];l&&r.push(...createTensorShapeVariables(t[0].dims)),g&&r.push(...createTensorShapeVariables(t[1].dims)),I&&r.push(...createTensorShapeVariables(Q));const u=[];u.push(l?"rank":"dims"),u.push(g?"rank":"dims");return{name:"Gather",shaderCache:{hint:e.cacheKey,inputDependencies:u},getRunData:()=>({outputs:[{dims:Q,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:r}),getShaderSource:e=>{const n=inputVariable("data",t[0].dataType,c,i),U=inputVariable("inputIndices",t[1].dataType,d),a=outputVariable("output",t[0].dataType,o,i),l=t=>{const e=B.length;let i=`var indicesIndices${t}  = ${U.type.indices}(0);`;for(let n=0;n<e;n++)i+=`${e>1?`indicesIndices${t}[${n}]`:`indicesIndices${t}`} = ${Q.length>1?`outputIndices${t}[uniforms.axis + ${n}]`:`outputIndices${t}`};`;i+=`\n          var idx${t} = ${U.getByIndices(`indicesIndices${t}`)};\n          if (idx${t} < 0) {\n            idx${t} = idx${t} + uniforms.axisDimLimit;\n          }\n          var dataIndices${t} = ${n.type.indices}(0);\n        `;for(let n=0,B=0;n<s;n++)n===F?(i+=`${s>1?`dataIndices${t}[${n}]`:`dataIndices${t}`} = u32(idx${t});`,B+=e):(i+=`${s>1?`dataIndices${t}[${n}]`:`dataIndices${t}`} = ${Q.length>1?`outputIndices${t}[${B}]`:`outputIndices${t}`};`,B++);return i};let g;if(9===t[0].dataType){const t=(t,e,B="")=>`\n          let outputIndices${e} = ${a.offsetToIndices(`outputOffset + ${e}u`)};\n          ${l(e)};\n          let offset${e} = ${n.indicesToOffset(`dataIndices${e}`)};\n          let index${e} = offset${e} / 4u;\n          let component${e} = offset${e} % 4u;\n          ${t}[${e}] = ${B}(${n.getByOffset(`index${e}`)}[component${e}]);\n        `;g=`\n        let outputOffset = global_idx * ${i};\n        var value = vec4<u32>(0);\n        ${t("value",0,"u32")}\n        ${t("value",1,"u32")}\n        ${t("value",2,"u32")}\n        ${t("value",3,"u32")}\n        ${a.setByOffset("global_idx","value")}\n      `}else g=`\n      let outputIndices = ${a.offsetToIndices("global_idx")};\n      ${l("")};\n      let value = ${n.getByIndices("dataIndices")};\n      ${a.setByOffset("global_idx","value")};\n      `;return`\n      ${e.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(n,U,a)}\n      ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${g}\n      }`}}},parseGatherAttributes2=t=>createAttributeWithCacheKey2({axis:t.axis}),gather2=(t,e)=>{const n=t.inputs;validateInputs37(n),t.compute(createGatherProgramInfo2(t.inputs,e))}}}),validateInputs38,createGatherElementsProgramInfo,parseGatherElementsAttributes,gatherElements,init_gather_elements=__esm({"web/lib/wasm/jsep/webgpu/ops/gather-elements.ts"(){init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs38=t=>{if(!t||2!==t.length)throw new Error("GatherElements requires 2 inputs.");if(t[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(t[0].dims.length!==t[1].dims.length)throw new Error("GatherElements requires that the data input and\n                     indices input tensors be of same rank.")},createGatherElementsProgramInfo=(t,e)=>{const n=t[0].dims,B=t[0].dataType,s=n.length,F=t[1].dims,Q=t[1].dataType,U=ShapeUtil2.normalizeAxis(e.axis,s),i=n[U],a=F.slice(0),l=ShapeUtil2.size(a),c=inputVariable("input",B,s),g=inputVariable("indicesInput",Q,F.length),d=outputVariable("output",B,a.length),I=[{type:"uint32",data:l},{type:"int32",data:i},{type:"uint32",data:U}];I.push(...createTensorShapeVariables(n)),I.push(...createTensorShapeVariables(F)),I.push(...createTensorShapeVariables(a));return{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:I}),getShaderSource:t=>`\n      ${t.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(c,g,d)}\n      ${t.mainStart()}\n      ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n\n      var idx = ${g.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${c.type.indices}(outputIndices);\n      ${c.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${c.getByIndices("inputIndices")};\n\n      ${d.setByOffset("global_idx","value")};\n  }`}},parseGatherElementsAttributes=t=>createAttributeWithCacheKey2({axis:t.axis}),gatherElements=(t,e)=>{const n=t.inputs;validateInputs38(n),t.compute(createGatherElementsProgramInfo(t.inputs,e))}}}),validateInputs39,createGemmProgramInfo2,parseGemmAttributes2,gemm2,init_gemm2=__esm({"web/lib/wasm/jsep/webgpu/ops/gemm.ts"(){init_util2(),init_common(),validateInputs39=t=>{if(!t)throw new Error("Input is missing");if(t.length<2||t.length>3)throw new Error("Invaid input number.");if(3===t.length&&t[2].dims.length>2)throw new Error("Invalid input shape of C");if(t[0].dataType!==t[1].dataType||3===t.length&&t[0].dataType!==t[2].dataType)throw new Error("Input types are mismatched")},createGemmProgramInfo2=(t,e)=>{const n=t[0].dims.slice(),B=t[1].dims.slice(),[s,F,Q]=GemmUtil2.getShapeOfGemmResult(n,e.transA,B,e.transB,3===t.length?t[2].dims:void 0),U=[s,F];if(!U)throw new Error("Can't use gemm on the given tensors");const i=ShapeUtil2.size(U),a=[{type:"uint32",data:i},{type:"uint32",data:s},{type:"uint32",data:F},{type:"uint32",data:Q},{type:"float32",data:e.alpha},{type:"float32",data:e.beta}],l=["type","type"];3===t.length&&(a.push(...createTensorShapeVariables(t[2].dims)),l.push("rank")),a.push(...createTensorShapeVariables(U));return{name:"Gemm",shaderCache:{hint:`${e.cacheKey}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:U,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:a}),getShaderSource:n=>{let B="";e.transA&&e.transB?B="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":e.transA&&!e.transB?B="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!e.transA&&e.transB?B="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":e.transA||e.transB||(B="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");const s=1===e.alpha?"":"value *= uniforms.alpha;",F=inputVariable("a",t[0].dataType,t[0].dims),Q=inputVariable("b",t[1].dataType,t[1].dims),i=F.type.value;let a=null;const l=[F,Q];3===t.length&&(a=inputVariable("c",t[2].dataType,t[2].dims.length),l.push(a));const c=outputVariable("output",t[0].dataType,U.length);l.push(c);return`\n  ${n.registerUniforms([{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}]).declareVariables(...l)}\n\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${i}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${B}\n    }\n\n    ${s}\n    ${null!=a?`let cOffset = ${a.broadcastedIndicesToOffset("vec2(m, n)",c)}; value += ${i}(uniforms.beta) * ${a.getByOffset("cOffset")};`:""}\n    output[global_idx] = value;\n  }`}}},parseGemmAttributes2=t=>({transA:t.transA,transB:t.transB,alpha:t.alpha,beta:t.beta,cacheKey:`${t.transA};${t.transB};${1===t.alpha}`}),gemm2=(t,e)=>{validateInputs39(t.inputs),t.compute(createGemmProgramInfo2(t.inputs,e))}}}),createInstanceNormProgramInfo,computeMean,createInstanceNormNHWCProgramInfo,instanceNorm,init_instance_norm=__esm({"web/lib/wasm/jsep/webgpu/ops/instance-norm.ts"(){init_wasm_common(),init_util2(),init_common(),createInstanceNormProgramInfo=(t,e)=>{const n=t[0].dims,B=n,s=ShapeUtil2.sizeToDimension(n,2),F=ShapeUtil2.sizeFromDimension(n,2),Q=getMaxComponents(F),U=F/Q,i=[n[0],n[1],U],a=[{type:"uint32",data:F},{type:"uint32",data:U}];a.push(...createTensorShapeVariables(i),...createTensorShapeVariables(i));return{name:"InstanceNormalization",shaderCache:{hint:`${e.epsilon};${Q}`,inputDependencies:["rank","type","type"]},getRunData:()=>({outputs:[{dims:B,dataType:t[0].dataType}],dispatchGroup:{x:s},programUniforms:a}),getShaderSource:n=>{const B=inputVariable("x",t[0].dataType,i.length,Q),s=inputVariable("scale",t[1].dataType,t[1].dims),F=inputVariable("bias",t[2].dataType,t[2].dims),U=outputVariable("output",t[0].dataType,i.length,Q),a=[B,s,F,U],l=B.type.value,c=1===Q?"f32":`vec${Q}<f32>`;return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${c}, 64>;\n  const workgroupSize = 64u;\n  ${n.registerUniforms([{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}]).declareVariables(...a)}\n  ${n.mainStart(64)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${c}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${c}(${B.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${sumVector("workgroupShared[0]",Q)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${c}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${c}(${B.get("batch","channel","h")}) - ${c}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${sumVector("workgroupShared[0]",Q)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${e.epsilon}));\n    let channelScale = invStdDev * f32(${s.getByOffset("channel")});\n    let channelShift = f32(${F.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${B.get("batch","channel","h")} * ${l}(${c}(channelScale)) + ${l}(${c}(channelShift));\n      ${U.set("batch","channel","h","value")};\n    }\n  }`}}},computeMean=(t,e,n,B,s,F,Q,U)=>{const i=getMaxComponents(Q),a=64,l=1===i?"vec2f":`mat2x${i}f`,c=1===i?"f32":`vec${i}f`,g=(t,e)=>`${l}(${t}, ${e})`,d=s*Q/i,I=[{type:"uint32",data:Math.ceil(F/a)},{type:"uint32",data:F},{type:"uint32",data:Math.floor(Q/i)},{type:"uint32",data:Math.floor(F*Q/i)}],o=t.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${i}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:[s,Q,a,2],dataType:1}],dispatchGroup:{x:s*Q/i},programUniforms:I}),getShaderSource:t=>{const n=inputVariable("input",e.dataType,e.dims,i);return`\n  ${t.declareVariables(n)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${l}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${t.mainStart(a)}\n    let currentImageNumber = global_idx / 64 / uniforms.C;\n    let currentChannelNumber = (global_idx / 64) % uniforms.C;\n    let wgId = global_idx % 64;\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${fillVector("f32",i)};\n    var squaredSum = ${fillVector("f32",i)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${c}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${g("sum","squaredSum")};\n  }`}},{inputs:[e],outputs:[-1]})[0],r=[{type:"uint32",data:d},{type:"uint32",data:F},{type:"uint32",data:Math.floor(Q/i)},{type:"uint32",data:Math.floor(a*Q/i)}];return t.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${i};${U}`,inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:[s,Q,2],dataType:1}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:r}),getShaderSource:t=>{const e=inputVariable("scale",n.dataType,n.dims,i),s=inputVariable("bias",B.dataType,B.dims,i);return`\n  @group(0) @binding(0) var<storage, read> input : array<${l}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${e.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${s.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${l}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${fillVector("f32",i)};\n    var squaredSum = ${fillVector("f32",i)};\n    for (var i: u32 = 0; i < 64; i++) {\n        let value = input[offset + i + currentChannelNumber * 64];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${U}));\n    let channelScale = invStdDev * ${c}(scale[currentChannelNumber]);\n    let channelShift = ${c}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${g("channelScale","channelShift")};\n  }`}},{inputs:[o,n,B],outputs:[-1]})[0]},createInstanceNormNHWCProgramInfo=(t,e,n)=>{const B=e[0].dims,s=B,F=B[0],Q=B[B.length-1],U=ShapeUtil2.sizeFromDimension(B,1)/Q,i=getMaxComponents(Q),a=ShapeUtil2.size(s)/i,l=[{type:"uint32",data:U},{type:"uint32",data:Math.floor(Q/i)}],c=computeMean(t,e[0],e[1],e[2],F,U,Q,n.epsilon);t.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:l}),getShaderSource:t=>{const n=tensorTypeToWsglStorageType(e[0].dataType),B=1===i?"vec2f":`mat2x${i}f`,F=1===i?n:`vec${i}<${n}>`,Q=inputVariable("input",e[0].dataType,e[0].dims,i),U=outputVariable("output",e[0].dataType,s,i);return`\n  @group(0) @binding(0) var<storage, read> input : array<${Q.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${B}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${U.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${t.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${F}(scale[0]), ${F}(scale[1]));\n  }`}},{inputs:[e[0],c]})},instanceNorm=(t,e)=>{"NHWC"===e.format?createInstanceNormNHWCProgramInfo(t,t.inputs,e):t.compute(createInstanceNormProgramInfo(t.inputs,e))}}}),validateInputs40,createLayerNormProgramInfo,layerNorm,init_layer_norm=__esm({"web/lib/wasm/jsep/webgpu/ops/layer-norm.ts"(){init_wasm_common(),init_util2(),init_common(),validateInputs40=t=>{if(!t||t.length<2)throw new Error("layerNorm requires at least 2 inputs.")},createLayerNormProgramInfo=(t,e,n)=>{const B=t[0].dims,s=t[1],F=t[2],Q=B,U=ShapeUtil2.normalizeAxis(e.axis,B.length),i=ShapeUtil2.sizeToDimension(B,U),a=ShapeUtil2.sizeFromDimension(B,U),l=ShapeUtil2.size(s.dims),c=F?ShapeUtil2.size(F.dims):0;if(l!==a||F&&c!==a)throw new Error(`Size of X.shape()[axis:] == ${a}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${l} and bias size of ${c}`);const g=[];for(let t=0;t<B.length;++t)t<U?g.push(B[t]):g.push(1);const d=getMaxComponents(a),I=["type","type"],o=[{type:"uint32",data:i},{type:"float32",data:a},{type:"uint32",data:Math.floor(a/d)},{type:"float32",data:e.epsilon}];F&&I.push("type");const r=n>1,u=n>2,b=[{dims:Q,dataType:t[0].dataType}];return r&&b.push({dims:g,dataType:1}),u&&b.push({dims:g,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${d};${n}`,inputDependencies:I},getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(i/64)},programUniforms:o}),getShaderSource:e=>{const n=tensorTypeToWsglStorageType(t[0].dataType),B=[inputVariable("x",t[0].dataType,t[0].dims,d),inputVariable("scale",s.dataType,s.dims,d)];F&&B.push(inputVariable("bias",F.dataType,F.dims,d)),B.push(outputVariable("output",t[0].dataType,Q,d)),r&&B.push(outputVariable("mean_data_output",1,g)),u&&B.push(outputVariable("inv_std_output",1,g));return`\n  ${e.registerUniforms([{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...B)}\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${fillVector("f32",d)};\n    var meanSquareVector = ${fillVector("f32",d)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${castToF32(n,d,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${sumVector("meanVector",d)} / uniforms.norm_size;\n    let invStdDev =\n        inverseSqrt(${sumVector("meanSquareVector",d)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${castToF32(n,d,"x[j + offset]")};\n      let f32scale = ${castToF32(n,d,"scale[j]")};\n      output[j + offset] = ${B[0].type.value}((f32input - mean) * invStdDev * f32scale\n        ${F?`+ ${castToF32(n,d,"bias[j]")}`:""}\n      );\n    }\n\n    ${r?"mean_data_output[global_idx] = mean":""};\n    ${u?"inv_std_output[global_idx] = invStdDev":""};\n  }`}}},layerNorm=(t,e)=>{validateInputs40(t.inputs),t.compute(createLayerNormProgramInfo(t.inputs,e,t.outputCount))}}}),validateInputs41,parseMultiHeadAttentionAttributes,weightTransposeAttribute2,addBiasTranspose,maybeTransposeToBNSHAndAddBias,multiHeadAttention,init_multi_head_attentiion=__esm({"web/lib/wasm/jsep/webgpu/ops/multi-head-attentiion.ts"(){init_util2(),init_attribute_with_cache_key2(),init_types2(),init_attention(),init_common(),init_transpose2(),validateInputs41=(t,e)=>{const n=t[0],B=t[1],s=t[2],F=t[3],Q=t[4],U=t[5],i=t[6],a=t[7];if(3!==n.dims.length&&5!==n.dims.length)throw new Error("Input query is expected to have 3 or 5 dimensions");const l=n.dims[0],c=n.dims[1],g=3===n.dims.length?n.dims[2]:e.numHeads*n.dims[4];let d=c,I=0,o=0;const r=Math.floor(g/e.numHeads);if(i&&a){if(4!==i.dims.length)throw new Error('Input "past_key" is expected to have 4 dimensions');if(4!==a.dims.length)throw new Error('Input "past_value" is expected to have 4 dimensions');I=i.dims[2],o=i.dims[2]}else if(i||a)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let u;if(B){if(3!==n.dims.length)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(B.dims.length<3||B.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(n.dims[0]!==B.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(3===B.dims.length){if(B.dims[2]!==n.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');u=2,d=B.dims[1]}else if(5===B.dims.length){if(B.dims[2]!==e.numHeads||2!==B.dims[3]||B.dims[4]!==r)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');u=5,d=B.dims[1]}else{if(B.dims[1]!==e.numHeads||B.dims[3]!==r)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');u=0,d=B.dims[2]}}else{if(3!==n.dims.length&&5!==n.dims.length)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(5===n.dims.length&&(n.dims[2]!==e.numHeads||3!==n.dims[3]))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');u=3}if(F){if(1!==F.dims.length)throw new Error('Input "bias" is expected to have 1 dimension');if(s&&5===n.dims.length&&2===n.dims[3])throw new Error("bias is not allowed for packed kv.")}let b=0;if(Q){b=8;const t=Q.dims;if(1===t.length?t[0]===l?b=1:t[0]===3*l+2&&(b=3):2===t.length&&t[0]===l&&t[1]===d&&(b=5),8===b)throw new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)');throw new Error("Mask not supported")}let C=!1,p=g;if(s){if(3!==s.dims.length&&4!==s.dims.length)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(n.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(3===s.dims.length){if(d!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');p=s.dims[2]}else{if(d!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');p=s.dims[1]*s.dims[3],C=!0}}const m=I+d;if(Q)throw new Error("Key padding mask is not supported");if(U)throw new Error("extraAddQk is not supported");if(i)throw new Error("pastKey is not supported");if(a)throw new Error("pastValue is not supported");return{batchSize:l,sequenceLength:c,pastSequenceLength:I,kvSequenceLength:d,totalSequenceLength:m,maxSequenceLength:o,inputHiddenSize:0,hiddenSize:g,vHiddenSize:p,headSize:r,vHeadSize:Math.floor(p/e.numHeads),numHeads:e.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:e.maskFilterValue,maskType:b,scale:e.scale,broadcastResPosBias:!1,passPastInKv:C,qkvFormat:u}},parseMultiHeadAttentionAttributes=t=>createAttributeWithCacheKey2({...t}),weightTransposeAttribute2=createAttributeWithCacheKey2({perm:[0,2,1,3]}),addBiasTranspose=(t,e,n,B,s,F,Q)=>{const U=[B,s,F],i=ShapeUtil2.size(U),a=[{type:"uint32",data:i},{type:"uint32",data:Q},{type:"uint32",data:F}];return t.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:U,dataType:e.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:a}),getShaderSource:t=>{const B=outputVariable("qkv_with_bias",e.dataType,U),s=inputVariable("qkv",e.dataType,U),F=inputVariable("bias",n.dataType,U);return`\n  ${t.registerUniforms([{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}]).declareVariables(s,F,B)}\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`}},{inputs:[e,n],outputs:[-1]})[0]},maybeTransposeToBNSHAndAddBias=(t,e,n,B,s,F,Q,U)=>{let i=F;if(Q){if(1===B)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return i=addBiasTranspose(t,F,Q,e,B,n*s,U),i=i.reshape([e,B,n,s]),t.compute(createTransposeProgramInfo2(i,weightTransposeAttribute2.perm),{inputs:[i],outputs:[-1]})[0]}return 3===F.dims.length&&(i=F.reshape([e,B,n,s])),t.compute(createTransposeProgramInfo2(i,weightTransposeAttribute2.perm),{inputs:[i],outputs:[-1]})[0]},multiHeadAttention=(t,e)=>{const n=validateInputs41(t.inputs,e);if(5===t.inputs[0].dims.length)throw new Error("Packed QKV is not implemented");if(5===t.inputs[1]?.dims.length)throw new Error("Packed KV is not implemented");const B=t.inputs[1]&&t.inputs[2]&&4===t.inputs[1].dims.length&&4===t.inputs[2].dims.length,s=maybeTransposeToBNSHAndAddBias(t,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,t.inputs[0],t.inputs[3],0);if(B)return applyAttention(t,s,t.inputs[1],t.inputs[2],t.inputs[4],void 0,void 0,void 0,t.inputs[5],n,e);const F=maybeTransposeToBNSHAndAddBias(t,n.batchSize,n.numHeads,n.kvSequenceLength,n.headSize,t.inputs[1],t.inputs[3],n.hiddenSize),Q=maybeTransposeToBNSHAndAddBias(t,n.batchSize,n.numHeads,n.kvSequenceLength,n.vHeadSize,t.inputs[2],t.inputs[3],2*n.hiddenSize);applyAttention(t,s,F,Q,t.inputs[4],void 0,t.inputs[6],t.inputs[7],t.inputs[5],n,e)}}}),validateInputs42,getPadConstant2,getPadReflect2,getPadEdge2,getPadWrap,getPadSnippet,createPadProgramInfo2,createPadAttributesFromInputs,pad,init_pad2=__esm({"web/lib/wasm/jsep/webgpu/ops/pad.ts"(){init_wasm_common(),init_util2(),init_common(),validateInputs42=t=>{if(!t||t.length<1)throw new Error("Too few inputs");if(1!==t[0].dataType)throw new Error("Input type must be float.");if(t.length>=2){let e=2*t[0].dims.length===t[1].dims[0];if(4===t.length&&(e=2*t[3].dims[0]===t[1].dims[0]),!e)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},getPadConstant2=(t,e,n)=>{let B="";for(let s=e-1;s>=0;--s)B+=`\n            k = i32(${t.indicesGet("indices",s)}) - ${getElementAt("uniforms.pads",s,n)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${getElementAt("uniforms.x_shape",s,e)})) {\n              break;\n            }\n            offset += k * i32(${getElementAt("uniforms.x_strides",s,e)});\n        `;return`\n          value = ${t.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${B}\n            value = x[offset];\n          }\n      `},getPadReflect2=(t,e,n)=>{let B="";for(let s=e-1;s>=0;--s)B+=`\n                k = i32(${t.indicesGet("indices",s)}) - ${getElementAt("uniforms.pads",s,n)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${getElementAt("uniforms.x_shape",s,e)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${getElementAt("uniforms.x_shape",s,e)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${getElementAt("uniforms.x_strides",s,e)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${B}\n              value = x[offset];\n          `},getPadEdge2=(t,e,n)=>{let B="";for(let s=e-1;s>=0;--s)B+=`\n                k = i32(${t.indicesGet("indices",s)}) - ${getElementAt("uniforms.pads",s,n)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${getElementAt("uniforms.x_shape",s,e)})) {\n                  k = i32(${getElementAt("uniforms.x_shape",s,e)}) - 1;\n                }\n                offset += k * i32(${getElementAt("uniforms.x_strides",s,e)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${B}\n              value = x[offset];\n          `},getPadWrap=(t,e,n)=>{let B="";for(let s=e-1;s>=0;--s)B+=`\n                k = i32(${t.indicesGet("indices",s)}) - ${getElementAt("uniforms.pads",s,n)};\n                if (k < 0)  {\n                  k += i32(${getElementAt("uniforms.x_shape",s,e)}]);\n                }\n                if (k >= i32(${getElementAt("uniforms.x_shape",s,e)})) {\n                  k -= i32(${getElementAt("uniforms.x_shape",s,e)});\n                }\n                offset += k * i32(${getElementAt("uniforms.x_strides",s,e)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${B}\n              value = x[offset];\n          `},getPadSnippet=(t,e,n)=>{switch(n.mode){case 0:return getPadConstant2(t,e,n.pads.length);case 1:return getPadReflect2(t,e,n.pads.length);case 2:return getPadEdge2(t,e,n.pads.length);case 3:return getPadWrap(t,e,n.pads.length);default:throw new Error("Invalid mode")}},createPadProgramInfo2=(t,e)=>{const n=ShapeUtil2.padShape(t[0].dims.slice(),e.pads),B=t[0].dims,s=[{type:"uint32",data:ShapeUtil2.size(n)},{type:"uint32",data:e.pads}];if(0===e.mode){const n=tensorDataTypeEnumToString(t[0].dataType);s.push({type:n,data:e.value})}s.push(...createTensorShapeVariables(t[0].dims),...createTensorShapeVariables(n));return{name:"Pad",shaderCache:{hint:`${e.mode}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(ShapeUtil2.size(n)/64)},programUniforms:s}),getShaderSource:s=>{const F=outputVariable("output",t[0].dataType,n.length),Q=inputVariable("x",t[0].dataType,B.length),U=Q.type.value,i=getPadSnippet(F,B.length,e),a=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:e.pads.length}];return 0===e.mode&&a.push({name:"constant_value",type:U}),`\n            ${s.registerUniforms(a).declareVariables(Q,F)}\n            ${s.mainStart()}\n            ${s.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${F.offsetToIndices("global_idx")};\n\n            var value = ${U}(0);\n            ${i}\n            output[global_idx] = value;\n        }`}}},createPadAttributesFromInputs=(t,e)=>{if(t.length>1){const n=t[1].getBigInt64Array(),B=t.length>=3&&t[2].data?t[2].getFloat32Array()[0]:0,s=t[0].dims.length,F=new Int32Array(2*s).fill(0);if(t.length>=4){const e=t[3].getBigInt64Array();for(let t=0;t<e.length;t++)F[Number(e[t])]=Number(n[t]),F[Number(e[t])+s]=Number(n[t+e.length])}else n.forEach(((t,e)=>F[Number(e)]=Number(t)));const Q=[];return F.forEach((t=>Q.push(t))),{mode:e.mode,value:B,pads:Q}}return e},pad=(t,e)=>{validateInputs42(t.inputs);const n=createPadAttributesFromInputs(t.inputs,e);t.compute(createPadProgramInfo2(t.inputs,n),{inputs:[0]})}}}),validateInputs43,getAdjustedPoolAttributesAndOutputShape2,getUniformAndPadInfo,generatePoolingCode2,createShaderKeyFromAttributes,createAveragePoolShaderKeyFromAttributes,createMaxPoolShaderKeyFromAttributes,parsePoolCommonAttributes,createAveragePoolProgramInfo2,parseAveragePoolAttributes2,averagePool2,globalPoolAttributes,parseGlobalAveragePoolAttributes2,globalAveragePool2,createMaxPoolProgramInfo2,maxPool2,parseMaxPoolAttributes2,parseGlobalMaxPoolAttributes,globalMaxPool2,init_pool2=__esm({"web/lib/wasm/jsep/webgpu/ops/pool.ts"(){init_esm(),init_util2(),init_common(),validateInputs43=t=>{if(env2.webgpu.validateInputContent&&(!t||1!==t.length))throw new Error("Pool ops requires 1 input.")},getAdjustedPoolAttributesAndOutputShape2=(t,e,n)=>{const B="NHWC"===e.format,s=t.dims.slice();B&&s.splice(1,0,s.pop());const F=Object.hasOwnProperty.call(e,"dilations"),Q=e.kernelShape.slice(),U=e.strides.slice(),i=F?e.dilations.slice():[],a=e.pads.slice();PoolConvUtil2.adjustPoolAttributes(n,s,Q,U,i,a);const l=PoolConvUtil2.computePoolOutputShape(n,s,U,i,Q,a,e.autoPad),c=Object.assign({},e);F?Object.assign(c,{kernelShape:Q,strides:U,pads:a,dilations:i,cacheKey:e.cacheKey}):Object.assign(c,{kernelShape:Q,strides:U,pads:a,cacheKey:e.cacheKey});const g=l.slice();return g.push(g.splice(1,1)[0]),[c,B?g:l]},getUniformAndPadInfo=(t,e)=>{const n="NHWC"===e.format,B=[{type:"uint32",data:ShapeUtil2.size(t)},{type:"uint32",data:ShapeUtil2.size(e.kernelShape)}],s=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(e.kernelShape.length<=2){const t=e.kernelShape[e.kernelShape.length-1],n=e.strides[e.strides.length-1],F=e.pads[e.pads.length/2-1],Q=e.pads[e.pads.length-1],U=!!(F+Q);B.push({type:"uint32",data:t},{type:"uint32",data:n},{type:"uint32",data:F},{type:"uint32",data:Q}),s.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let i=!1;if(2===e.kernelShape.length){const t=e.kernelShape[e.kernelShape.length-2],n=e.strides[e.strides.length-2],F=e.pads[e.pads.length/2-2],Q=e.pads[e.pads.length-2];i=!!(F+Q),B.push({type:"uint32",data:t},{type:"uint32",data:n},{type:"uint32",data:F},{type:"uint32",data:Q}),s.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[B,s,!0,U,i]}{if(n)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");const t=ShapeUtil2.computeStrides(e.kernelShape);B.push({type:"uint32",data:t},{type:"uint32",data:e.pads},{type:"uint32",data:e.strides}),s.push({name:"kernelStrides",type:"u32",length:t.length},{name:"pads",type:"u32",length:e.pads.length},{name:"strides",type:"u32",length:e.strides.length});return[B,s,!!e.pads.reduce(((t,e)=>t+e)),!1,!1]}},generatePoolingCode2=(t,e,n,B,s,F,Q,U,i,a,l,c)=>{const g="NHWC"===s.format,d=e.type.value,I=outputVariable("output",e.type.tensor,B);if(s.kernelShape.length<=2){let B="",a="",o="";const r=n-(g?2:1);if(B=l?`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${r}] = indices[${r}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${r}] < 0 || xIndices[${r}]\n                      >= uniforms.x_shape[${r}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${e.indicesToOffset("xIndices")}];\n                  ${F}\n                }`:`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${r}] = indices[${r}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${e.indicesToOffset("xIndices")}];\n                  ${F}\n                }`,2===s.kernelShape.length){const t=n-(g?3:2);a=c?`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${t}] = indices[${t}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${t}] < 0 || xIndices[${t}] >= uniforms.x_shape[${t}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${t}] = indices[${t}] * uniforms.sh - uniforms.phStart + j;\n                `,o="\n              }\n            "}return`\n            ${t.registerUniforms(i).declareVariables(e,I)}\n\n            ${t.mainStart()}\n              ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${I.offsetToIndices("global_idx")};\n              var xIndices = ${I.offsetToIndices("global_idx")};\n\n              var value = ${d}(${U});\n              var pad = 0;\n              ${a}\n              ${B}\n              ${o}\n              ${Q}\n\n              output[global_idx] = value;\n            }`}{if(g)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");const B=s.kernelShape.length,l=s.pads.length;let c="";c=a?`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${e.indicesToOffset("xIndices")}];\n                ${F}\n              }`:`\n              }\n              let x_val = x[${e.indicesToOffset("xIndices")}];\n              ${F}\n            `;return`\n            ${t.registerUniforms(i).declareVariables(e,I)}\n\n            ${t.mainStart()}\n              ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${I.offsetToIndices("global_idx")};\n              var xIndices = ${I.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${B}>;\n\n              var value = ${d}(${U});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${B-1}u; j++) {\n                  offsets[j] = offset / ${getElementAt("uniforms.kernelStrides","j",B)};\n                  offset -= offsets[j] * ${getElementAt("uniforms.kernelStrides","j",B)};\n                }\n                offsets[${B-1}] = offset;\n\n                isPad = false;\n                for (var j = ${n-B}u; j < ${n}u; j++) {\n                  xIndices[j] = indices[j] * ${getElementAt("uniforms.strides",`j - ${n-B}u`,B)}\n                    + offsets[j - ${n-B}u] - ${getElementAt("uniforms.pads","j - 2u",l)};\n                  ${c}\n              }\n              ${Q}\n\n              output[global_idx] = value;\n            }`}},createShaderKeyFromAttributes=t=>`${t.format};${t.ceilMode};${t.autoPad};${t.kernelShape.length}`,createAveragePoolShaderKeyFromAttributes=t=>`${createShaderKeyFromAttributes(t)};${t.countIncludePad}`,createMaxPoolShaderKeyFromAttributes=t=>`${createShaderKeyFromAttributes(t)};${t.storageOrder};${t.dilations}`,parsePoolCommonAttributes=t=>({format:t.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][t.auto_pad],ceilMode:t.ceil_mode,kernelShape:t.kernel_shape,strides:t.strides,pads:t.pads}),createAveragePoolProgramInfo2=(t,e,n,B)=>{const[s,F]=getAdjustedPoolAttributesAndOutputShape2(e,B,n),Q=inputVariable("x",e.dataType,e.dims.length),U=Q.type.value;let i="";s.countIncludePad?i+=`value /= ${U}(uniforms.kernelSize);`:i+=`value /= ${U}(i32(uniforms.kernelSize) - pad);`;const[a,l,c,g,d]=getUniformAndPadInfo(F,s);a.push(...createTensorShapeVariables(e.dims),...createTensorShapeVariables(F));return{name:t,shaderCache:{hint:`${B.cacheKey};${c};${g};${d}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:F,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(ShapeUtil2.size(F)/64)},programUniforms:a}),getShaderSource:t=>generatePoolingCode2(t,Q,e.dims.length,F.length,s,"value += x_val;",i,0,l,c,g,d)}},parseAveragePoolAttributes2=t=>{const e=0!==t.count_include_pad,n=parsePoolCommonAttributes(t);if(0!==n.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");const B={countIncludePad:e,...n,cacheKey:""};return{...B,cacheKey:createAveragePoolShaderKeyFromAttributes(B)}},averagePool2=(t,e)=>{validateInputs43(t.inputs),t.compute(createAveragePoolProgramInfo2("AveragePool",t.inputs[0],!1,e))},globalPoolAttributes={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},parseGlobalAveragePoolAttributes2=t=>{const e=t.format;return{format:e,...globalPoolAttributes,cacheKey:e}},globalAveragePool2=(t,e)=>{validateInputs43(t.inputs),t.compute(createAveragePoolProgramInfo2("GlobalAveragePool",t.inputs[0],!0,e))},createMaxPoolProgramInfo2=(t,e,n,B)=>{const[s,F]=getAdjustedPoolAttributesAndOutputShape2(e,B,n),Q=inputVariable("x",e.dataType,e.dims.length),[U,i,a,l,c]=getUniformAndPadInfo(F,s);return U.push(...createTensorShapeVariables(e.dims),...createTensorShapeVariables(F)),{name:t,shaderCache:{hint:`${B.cacheKey};${a};${l};${c}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:F,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(ShapeUtil2.size(F)/64)},programUniforms:U}),getShaderSource:t=>generatePoolingCode2(t,Q,e.dims.length,F.length,s,"\n      value = max(x_val, value);\n    ","",-1e5,i,a,l,c)}},maxPool2=(t,e)=>{validateInputs43(t.inputs),t.compute(createMaxPoolProgramInfo2("MaxPool",t.inputs[0],!1,e))},parseMaxPoolAttributes2=t=>{const e=t.storage_order,n=t.dilations,B=parsePoolCommonAttributes(t);if(0!==e)throw new Error("column major storage order is not yet supported for MaxPool");if(0!==B.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");const s={storageOrder:e,dilations:n,...B,cacheKey:""};return{...s,cacheKey:createMaxPoolShaderKeyFromAttributes(s)}},parseGlobalMaxPoolAttributes=t=>{const e=t.format;return{format:e,...globalPoolAttributes,cacheKey:e}},globalMaxPool2=(t,e)=>{validateInputs43(t.inputs),t.compute(createMaxPoolProgramInfo2("GlobalMaxPool",t.inputs[0],!0,e))}}}),validateInputsContent,createRangeProgramInfo,range,init_range=__esm({"web/lib/wasm/jsep/webgpu/ops/range.ts"(){init_esm(),init_wasm_common(),init_common(),validateInputsContent=(t,e,n)=>{if(t===e||t<e&&n<0||t>e&&n>0)throw new Error("Range these inputs' contents are invalid.")},createRangeProgramInfo=(t,e,n,B)=>{const s=Math.abs(Math.ceil((e-t)/n)),F=[s],Q=s,U=tensorDataTypeEnumToString(B),i=[{type:"uint32",data:Q},{type:U,data:t},{type:U,data:n},...createTensorShapeVariables(F)];return{name:"Range",shaderCache:{hint:`${B}`},getShaderSource:t=>{const e=outputVariable("output",B,F.length),n=e.type.value,s=[{name:"outputSize",type:"u32"},{name:"start",type:n},{name:"delta",type:n}];return`\n        ${t.registerUniforms(s).declareVariables(e)}\n        ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${n}(global_idx) * uniforms.delta;\n      }`},getRunData:()=>({outputs:[{dims:F,dataType:B}],dispatchGroup:{x:Math.ceil(Q/64)},programUniforms:i})}},range=t=>{let e=0,n=0,B=0;6===t.inputs[0].dataType?(e=t.inputs[0].getInt32Array()[0],n=t.inputs[1].getInt32Array()[0],B=t.inputs[2].getInt32Array()[0]):1===t.inputs[0].dataType&&(e=t.inputs[0].getFloat32Array()[0],n=t.inputs[1].getFloat32Array()[0],B=t.inputs[2].getFloat32Array()[0]),env2.webgpu.validateInputContent&&validateInputsContent(e,n,B),t.compute(createRangeProgramInfo(e,n,B,t.inputs[0].dataType),{inputs:[]})}}}),validateScales,updateScales,validateInputs44,getOriginalCoordinateFromResizedCoordinate,getNearestPixelFromOriginal,updateRoI,initOutputShape,adjustOutputShape,calculateOriginalIndicesFromOutputIndices,calculateInputIndicesFromOutputIndices,checkInputIndices,setChannelAndBatchIndices,bilinearInterpolation,bicubicInterpolation,trilinearInterpolation,createResizeProgramInfo,getOpsetVersionFromCustomDataBuffer,resize2,parseResizeAttributes,init_resize=__esm({"web/lib/wasm/jsep/webgpu/ops/resize.ts"(){init_util2(),init_attribute_with_cache_key2(),init_common(),validateScales=(t,e)=>{if(t.every((t=>t>0||(()=>{throw new Error("Resize requires scales input values to be positive")}))),t.length>0)if("linear"===e.mode){if(!(2===t.length||3===t.length||4===t.length&&1===t[0]&&1===t[1]||4===t.length&&1===t[0]&&1===t[3]||5===t.length&&1===t[0]&&1===t[1]))throw new Error("For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1")}else if("cubic"===e.mode&&!(2===t.length||4===t.length&&1===t[0]&&1===t[1]||4===t.length&&1===t[0]&&1===t[3]))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")},updateScales=(t,e,n)=>{e.every((t=>t>=0&&t<n||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")})));const B=new Array(n).fill(1);return e.forEach(((e,n)=>B[e]=t[n])),B},validateInputs44=(t,e,n,B,s,F)=>{const[Q,U,i]=n>10?[1,2,3]:[-1,t.length>1?1:-1,-1],a=t[0].dims.length;if(Q>0&&t.length>Q&&t[Q].dims.length>0)t[Q].getFloat32Array().forEach((t=>F.push(t)));else if("tf_crop_and_resize"===e.coordinateTransformMode)throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(U>0&&t.length>U&&t[U].dims.length>0){if(t[U].getFloat32Array().forEach((t=>B.push(t))),0!==B.length&&B.length!==a&&n>=18&&B.length!==e.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");validateScales(B,e),e.axes.length>0&&updateScales(B,e.axes,a).forEach(((t,e)=>B[e]=t))}if(i>0&&t.length>i&&(t[i].getBigInt64Array().forEach((t=>s.push(Number(t)))),s.length!==a||n>=18&&s.length===e.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(e.axes.length>0){if(B.length!==e.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(s.length!==e.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(void 0!==B&&void 0!==s&&B.length>0&&s.length>a)throw new Error("Resize requires only of scales or sizes to be specified")},getOriginalCoordinateFromResizedCoordinate=(t,e)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${e} { `+(()=>{switch(t){case"asymmetric":return`return ${e}(xResized) / ${e}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${e}(xResized) + 0.5) / ${e}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${e}(xResized) + 0.5) / ${e}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${e}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${e}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${e}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${e}(roiStart) * ${e}(lengthOriginal - 1) +\n                        (${e}(xResized) * ${e}(roiEnd - roiStart) * ${e}(lengthOriginal - 1)) /\n                        ${e}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${e}(roiStart + roiEnd) * ${e}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${e}xScale * ${e}(lengthResized);\n                  const adjustment = ${e}(lengthResized) / outputWidth;\n                  const center = ${e}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${e}(xResized) + 0.5) / ${e}(xScale)) - 0.5;`;case"half_pixel":return`return ((${e}(xResized) + 0.5) / ${e}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${t} is not supported`)}})()+"}",getNearestPixelFromOriginal=(t,e,n)=>`fn getNearestPixelFromOriginal(xOriginal: ${n}, isDownSample: bool) -> ${n} {`+(()=>{switch(t){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(e<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${t} is not supported`)}})()+"}",updateRoI=(t,e,n)=>{const B=new Array(n).fill(0).concat(new Array(n).fill(1)),s=0===t.length?B:t.slice();return e.length>0?(e.forEach(((t,F)=>{B[t]=s[F],B[F+n]=s[e.length+F]})),B):s},initOutputShape=(t,e,n,B)=>{let s=[];if(n.length>0)if(B.length>0){if(t.forEach((t=>s.push(t))),Math.max(...B)>t.length)throw new Error("axes is out of bound");B.forEach(((t,e)=>s[t]=n[e]))}else n.forEach((t=>s.push(t)));else{if(0===e.length)throw new Error("Resize requires either scales or sizes.");s=t.map(((t,n)=>Math.round(t*e[n])))}return s},adjustOutputShape=(t,e,n)=>{const B=(()=>{switch(n.keepAspectRatioPolicy){case"not_larger":return n.axes.length>0?Math.min(...n.axes.map((t=>e[t])),Number.MAX_VALUE):Math.min(...e,Number.MAX_VALUE);case"not_smaller":return n.axes.length>0?Math.max(...n.axes.map((t=>e[t])),Number.MIN_VALUE):Math.max(...e,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${n.keepAspectRatioPolicy} is not supported`)}})();e.fill(1,0,e.length);const s=t.slice();return n.axes.length>0?(n.axes.forEach((t=>e[t]=B)),n.axes.forEach((n=>s[n]=Math.round(t[n]*e[n])))):(e.fill(B,0,e.length),s.forEach(((t,n)=>s[n]=Math.round(t*e[n])))),s},calculateOriginalIndicesFromOutputIndices=(t,e,n,B,s)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> array<${t.type.value}, ${n.length}> {\n      var original_indices: array<${t.type.value}, ${n.length}>;\n      for (var i:u32 = 0; i < ${n.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var scale = ${getElementAt("uniforms.scales","i",B)};\n        var roi_low = ${getElementAt("uniforms.roi","i",s)};\n        var roi_hi = ${getElementAt("uniforms.roi",`i + ${e.length}`,s)};\n        if (scale == 1.0) {\n          original_indices[i] = ${t.type.value}(output_index);\n        } else {\n          var input_shape_i = ${getElementAt("uniforms.input_shape","i",e.length)};\n          var output_shape_i = ${getElementAt("uniforms.output_shape","i",n.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,calculateInputIndicesFromOutputIndices=(t,e,n,B,s,F,Q)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> ${t.type.indices} {\n      var input_indices: ${t.type.indices};\n      for (var i:u32 = 0; i < ${B.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${getElementAt("uniforms.scales","i",s)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${getElementAt("uniforms.roi","i",F)};\n          var roi_hi = ${getElementAt("uniforms.roi",`i + ${n.length}`,F)};\n          var input_shape_i = ${getElementAt("uniforms.input_shape","i",n.length)};\n          var output_shape_i = ${getElementAt("uniforms.output_shape","i",B.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${Q} || (original_idx >= 0 && original_idx < ${e.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${e.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${t.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,checkInputIndices=(t,e)=>`\n    fn checkInputIndices(input_indices: ${t.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${e.length}; i++) {\n        var input_index = ${t.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${getElementAt("uniforms.input_shape","i",e.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,setChannelAndBatchIndices=(t,e,n,B)=>t.rank>B?`\n    ${t.indicesSet("input_indices",e,"channel")};\n    ${t.indicesSet("input_indices",n,"batch")};\n`:"",bilinearInterpolation=(t,e,n,B,s)=>{const[F,Q,U,i]=2===n.length?[-1,0,1,-1]:[0,2,3,1],a=t.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${a} {\n      var input_indices: ${t.type.indices};\n      ${t.indicesSet("input_indices",Q,`max(0, min(row, ${n[Q]} - 1))`)};\n      ${t.indicesSet("input_indices",U,`max(0, min(col, ${n[U]} - 1))`)};\n      ${setChannelAndBatchIndices(t,i,F,2)}\n      return ${t.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${e.type.indices}) -> ${a} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${a} = originalIndices[${Q}];\n      var col:${a} = originalIndices[${U}];\n      ${B?`if (row < 0 || row > (${n[Q]} - 1) || col < 0 || col > (${n[U]} - 1)) {\n        return ${s};\n      }`:""};\n      row = max(0, min(row, ${n[Q]} - 1));\n      col = max(0, min(col, ${n[U]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${n.length>2?`u32(originalIndices[${i}])`:"0"};\n      var batch: u32 =  ${n.length>2?`u32(originalIndices[${F}])`:"0"};\n      var x11: ${a} = getInputValue(batch, channel, row1, col1);\n      var x12: ${a} = getInputValue(batch, channel, row1, col2);\n      var x21: ${a} = getInputValue(batch, channel, row2, col1);\n      var x22: ${a} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${a} = abs(row - ${a}(row1));\n      var dx2: ${a} = abs(${a}(row2) - row);\n      var dy1: ${a} = abs(col - ${a}(col1));\n      var dy2: ${a} = abs(${a}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},bicubicInterpolation=(t,e,n,B,s,F,Q,U,i,a)=>{const l=2===n.length,[c,g]=l?[0,1]:[2,3],d=t.type.value,I=Q=>{const l=Q===c?"row":"col";return`\n      fn ${l}CubicInterpolation(input_indices: ${t.type.indices}, output_indices: ${e.type.indices}) -> ${d} {\n        var output_index = ${e.indicesGet("output_indices",Q)};\n        var originalIdx: ${d} = getOriginalCoordinateFromResizedCoordinate(output_index, ${s[Q]},\n        ${B[Q]}, ${n[Q]}, ${F[Q]}, ${F[Q]} + ${n.length});\n        var fractOriginalIdx: ${d} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${U} && (originalIdx < 0 || originalIdx > (${n[Q]} - 1))) {\n          return ${i};\n        }\n        var data: array<${d}, 4> = array<${d}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${l}: ${d} = originalIdx + ${d}(i);\n          if (${l} < 0 || ${l} >= ${n[Q]}) {\n            ${a?"coefs[i + 1] = 0.0;\n                        continue;":U?`return ${i};`:`${l} = max(0, min(${l}, ${n[Q]} - 1));`};\n          }\n        var input_indices_copy: ${t.type.indices} = input_indices;\n          ${t.indicesSet("input_indices_copy",Q,`u32(${l})`)};\n          data[i + 1] = ${Q===c?t.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${I(c)};\n    ${I(g)};\n  fn getCubicInterpolationCoefs(s: ${d}) -> array<${d}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${d}, 4> = array<${d}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${d} = 1.0 - absS;\n    var twoMinusAbsS: ${d} = 2.0 - absS;\n    var onePlusAbsS: ${d} = 1.0 + absS;\n    coeffs[0] = ((${Q} * onePlusAbsS - 5 * ${Q}) * onePlusAbsS + 8 * ${Q}) * onePlusAbsS - 4 * ${Q};\n    coeffs[1] = ((${Q} + 2) * absS - (${Q} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${Q} + 2) * oneMinusAbsS - (${Q} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${Q} * twoMinusAbsS - 5 * ${Q}) * twoMinusAbsS + 8 * ${Q}) * twoMinusAbsS - 4 * ${Q};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${d}, 4>, coefs: array<${d}, 4>) -> ${d} {\n    var coefsSum: ${d} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${e.type.indices}) -> ${d} {\n    var input_indices: ${t.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},trilinearInterpolation=(t,e,n,B,s)=>{const[F,Q,U,i,a]=3===n.length?[-1,0,1,2,-1]:[0,2,3,4,1],l=t.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${l} {\n      var input_indices: ${t.type.indices};\n      ${t.indicesSet("input_indices",Q,`max(0, min(depth, ${n[Q]} - 1))`)};\n      ${t.indicesSet("input_indices",U,`max(0, min(height, ${n[U]} - 1))`)};\n      ${t.indicesSet("input_indices",i,`max(0, min(width, ${n[i]} - 1))`)};\n      ${setChannelAndBatchIndices(t,a,F,3)}\n      return ${t.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${e.type.indices}) -> ${l} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${l} = originalIndices[${Q}];\n      var height:${l} = originalIndices[${U}];\n      var width:${l} = originalIndices[${i}];\n      ${B?`if (depth < 0 || depth > (${n[Q]} - 1) || height < 0 || height > (${n[U]} - 1) || width < 0 || (width > ${n[i]} - 1)) {\n      return ${s};\n        }`:""};\n\n    depth = max(0, min(depth, ${n[Q]} - 1));\n      height = max(0, min(height, ${n[U]} - 1));\n      width = max(0, min(width, ${n[i]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${n.length>3?`u32(originalIndices[${a}])`:"0"};\n      var batch: u32 =  ${n.length>3?`u32(originalIndices[${F}])`:"0"};\n\n      var x111: ${l} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${l} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${l} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${l} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${l} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${l} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${l} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${l} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${l} = abs(depth - ${l}(depth1));\n      var dx2: ${l} = abs(${l}(depth2) - depth);\n      var dy1: ${l} = abs(height - ${l}(height1));\n      var dy2: ${l} = abs(${l}(height2) - height);\n      var dz1: ${l} = abs(width - ${l}(width1));\n      var dz2: ${l} = abs(${l}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},createResizeProgramInfo=(t,e,n,B,s,F)=>{const Q=t.dims,U=updateRoI(F,e.axes,Q.length);let i=initOutputShape(Q,B,s,e.axes),a=B.slice();0===B.length&&(a=Q.map(((t,e)=>0===t?1:i[e]/t)),"stretch"!==e.keepAspectRatioPolicy&&(i=adjustOutputShape(Q,a,e)));const l=outputVariable("output",t.dataType,i.length),c=inputVariable("input",t.dataType,Q.length),g=ShapeUtil2.size(i),d=Q.length===i.length&&Q.every(((t,e)=>t===i[e])),I="tf_crop_and_resize"===e.coordinateTransformMode,o=e.extrapolationValue,r=c.type.value;return{name:"Resize",shaderCache:{hint:`${e.cacheKey}|${n}|${a.length>0?a:""}|${s.length>0?s:""}|${U.length>0?U:""}|${d}|${Q}`,inputDependencies:["rank"]},getShaderSource:t=>`\n      ${d?"":`\n      ${getOriginalCoordinateFromResizedCoordinate(e.coordinateTransformMode,r)};\n      ${(()=>{switch(e.mode){case"nearest":return`\n              ${checkInputIndices(c,Q)};\n              ${getNearestPixelFromOriginal(e.nearestMode,n,r)};\n              ${calculateInputIndicesFromOutputIndices(c,l,Q,i,a.length,U.length,I)};\n              `;case"linear":return`\n              ${calculateOriginalIndicesFromOutputIndices(l,Q,i,a.length,U.length)};\n              ${(()=>{if(2===Q.length||4===Q.length)return`${bilinearInterpolation(c,l,Q,I,o)}`;if(3===Q.length||5===Q.length)return`${trilinearInterpolation(c,l,Q,I,o)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(2===Q.length||4===Q.length)return`${bicubicInterpolation(c,l,Q,i,a,U,e.cubicCoeffA,I,e.extrapolationValue,e.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${t.registerUniform("output_size","u32").registerUniform("scales","f32",a.length).registerUniform("roi","f32",U.length).declareVariables(c,l)}\n      ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${d?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${l.offsetToIndices("global_idx")};\n        var input_indices: ${c.type.indices};\n        ${(()=>{switch(e.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${c.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${e.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${2===Q.length||4===Q.length?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${e.mode}`)}})()};\n`}\n      }`,getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:[{type:"uint32",data:g},{type:"float32",data:a},{type:"float32",data:U},...createTensorShapeVariables(Q),...createTensorShapeVariables(i)]})}},getOpsetVersionFromCustomDataBuffer=t=>{const e=t.customDataBuffer;return new Uint32Array(e,e.byteOffset,1)[0]},resize2=(t,e)=>{const n=[],B=[],s=[],F=getOpsetVersionFromCustomDataBuffer(t);if(0!==e.antialias)throw Error("Only default value (0) for Antialias attribute is supported");validateInputs44(t.inputs,e,F,n,B,s),t.compute(createResizeProgramInfo(t.inputs[0],e,F,n,B,s),{inputs:[0]})},parseResizeAttributes=t=>{const e=t.antialias,n=t.axes,B=t.coordinateTransformMode,s=t.cubicCoeffA,F=0!==t.excludeOutside,Q=t.extrapolationValue,U=t.keepAspectRatioPolicy,i=t.mode,a=""===t.nearestMode?"simple":t.nearestMode;return createAttributeWithCacheKey2({antialias:e,axes:n,coordinateTransformMode:B,cubicCoeffA:s,excludeOutside:F,extrapolationValue:Q,keepAspectRatioPolicy:U,mode:i,nearestMode:a})}}}),validateInputs45,createSkipLayerNormProgramInfo,skipLayerNorm,parseSkipLayerNormAttributes,init_skip_layer_norm=__esm({"web/lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts"(){init_wasm_common(),init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs45=t=>{if(!t||t.length<3)throw new Error("layerNorm requires at least 3 inputs.");const e=t[0],n=t[1],B=t[2];if(e.dataType!==n.dataType||e.dataType!==B.dataType)throw new Error("All inputs must have the same data type");if(3!==e.dims.length&&2!==e.dims.length)throw new Error("Input must be 2D or 3D");if(3!==n.dims.length&&2!==n.dims.length)throw new Error("Skip must be 2D or 3D");const s=e.dims[e.dims.length-1],F=e.dims[e.dims.length-2];if(n.dims[n.dims.length-1]!==s)throw new Error("Skip must have the same hidden size as input");if(n.dims[n.dims.length-2]!==F)throw new Error("Skip must have the same sequence length as input");if(1!==B.dims.length)throw new Error("Gamma must be 1D");if(B.dims[B.dims.length-1]!==s)throw new Error("Gamma must have the same hidden size as input");if(t.length>3){const e=t[3];if(1!==e.dims.length)throw new Error("Beta must be 1D");if(e.dims[e.dims.length-1]!==s)throw new Error("Beta must have the same hidden size as input")}if(t.length>4){const e=t[4];if(1!==e.dims.length)throw new Error("Bias must be 1D");if(e.dims[e.dims.length-1]!==s)throw new Error("Bias must have the same hidden size as input")}},createSkipLayerNormProgramInfo=(t,e,n,B)=>{const s=t[0].dims,F=s,Q=ShapeUtil2.size(s),U=s.slice(-1)[0],i=B?s.slice(0,-1).concat(1):[],a=t.length>3,l=t.length>4,c=B&&n>1,g=B&&n>2,d=n>3,I=getMaxComponents(U),o=[inputVariable("x",t[0].dataType,t[0].dims,I),inputVariable("skip",t[1].dataType,t[1].dims,I),inputVariable("gamma",t[2].dataType,t[2].dims,I)];a&&o.push(inputVariable("beta",t[3].dataType,t[3].dims,I)),l&&o.push(inputVariable("bias",t[4].dataType,t[4].dims,I)),o.push(outputVariable("output",t[0].dataType,F,I)),c&&o.push(outputVariable("meanOutput",1,i)),g&&o.push(outputVariable("invStdOutput",1,i)),d&&o.push(outputVariable("inputSkipBiasSum",t[0].dataType,F,I));const r=tensorTypeToWsglStorageType(t[0].dataType),u=[{dims:F,dataType:t[0].dataType}];return n>1&&u.push({dims:i,dataType:1}),n>2&&u.push({dims:i,dataType:1}),n>3&&u.push({dims:s,dataType:t[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:e.cacheKey},getShaderSource:t=>`\n      const hiddenSize: f32 = ${U};\n      const hiddenSizeVectorized: u32 = ${U/I};\n      const epsilon: f32 = ${e.epsilon};\n\n      ${t.declareVariables(...o)}\n\n      ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes(Q/U)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${fillVector("f32",I)};\n        var squareSum = ${fillVector("f32",I)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${l?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${d?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${castToF32(r,I,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${sumVector("sum",I)} / hiddenSize;\n        let invStdDev = inverseSqrt(${sumVector("squareSum",I)} / hiddenSize - mean * mean + epsilon);\n        ${c?"meanOutput[global_idx] = mean;":""}\n        ${g?"invStdOutput[global_idx] = invStdDev;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${r}(mean)) * ${r}(invStdDev) * gamma[i]\n           + ${a?"beta[i]":"0.0"};\n        }\n      }`,getRunData:()=>({outputs:u,dispatchGroup:{x:Math.ceil(Q/U/64)}})}},skipLayerNorm=(t,e)=>{const n=!1;validateInputs45(t.inputs);const B=[0];t.outputCount>1&&B.push(-3),t.outputCount>2&&B.push(-3),t.outputCount>3&&B.push(3),t.compute(createSkipLayerNormProgramInfo(t.inputs,e,t.outputCount,n),{outputs:B})},parseSkipLayerNormAttributes=t=>{const e=t.epsilon;return createAttributeWithCacheKey2({epsilon:e})}}}),validateInputs46,readInput,createSliceAttributesFromInputs,fixStartEndValues,calculateInputIndicesImpl,createSliceProgramInfo2,slice2,parseSliceAttributes2,init_slice2=__esm({"web/lib/wasm/jsep/webgpu/ops/slice.ts"(){init_wasm_common(),init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs46=(t,e)=>{if(!t||t.length<1)throw new Error("too few inputs");if(0!==e.axes.length){if(e.axes.length!==e.starts.length||e.axes.length!==e.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(e.starts.length!==e.ends.length)throw new Error("starts and ends must have the same length");t.slice(1).forEach(((e,n)=>{if(6!==t[n+1].dataType&&7!==t[n+1].dataType)throw new Error(`Input ${n} must be an array of int32 or int64`)}))},readInput=(t,e)=>{const n=[];if(t.length>e)if(7===t[e].dataType)t[e].getBigInt64Array().forEach((t=>n.push(Number(t))));else{if(6!==t[e].dataType)throw new Error(`Input ${e} must be an array of int32 or int64`);t[e].getInt32Array().forEach((t=>n.push(Number(t))))}return n},createSliceAttributesFromInputs=(t,e)=>{if(t.length>1){const e=readInput(t,1),n=readInput(t,2);let B=readInput(t,3);return 0===B.length&&(B=[...Array(t[0].dims.length).keys()]),createAttributeWithCacheKey2({starts:e,ends:n,axes:B})}return e},fixStartEndValues=(t,e,n,B,s)=>{let F=t;return t<0&&(F+=n[B[e]]),s[e]<0?Math.max(0,Math.min(F,n[B[e]]-1)):Math.max(0,Math.min(F,n[B[e]]))},calculateInputIndicesImpl=(t,e,n)=>`fn calculateInputIndices(output_indices: ${e.type.indices}) -> ${t.type.indices} {\n          var input_indices: ${t.type.indices};\n          var carry = 0u;\n          for (var i = ${n.length}; i >= 0; i--) {\n            let input_shape_i = ${getElementAt("uniforms.input_shape","i",n.length)};\n            let steps_i = ${getElementAt("uniforms.steps","i",n.length)};\n            let signs_i = ${getElementAt("uniforms.signs","i",n.length)};\n            let starts_i = ${getElementAt("uniforms.starts","i",n.length)};\n            var output_index = ${e.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${t.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,createSliceProgramInfo2=(t,e)=>{const n=t[0].dims,B=ShapeUtil2.size(n),s=e.axes.length>0?ShapeUtil2.normalizeAxes(e.axes,n.length):[...Array(n.length).keys()];let F=readInput(t,4);F.forEach((t=>0!==t||(()=>{throw new Error("step cannot be 0")}))),0===F.length&&(F=Array(s.length).fill(1));const Q=e.starts.map(((t,e)=>fixStartEndValues(t,e,n,s,F))),U=e.ends.map(((t,e)=>fixStartEndValues(t,e,n,s,F)));if(s.length!==Q.length||s.length!==U.length)throw new Error("start, ends and axes should have the same number of elements");if(s.length!==n.length)for(let t=0;t<n.length;++t)s.includes(t)||(Q.splice(t,0,0),U.splice(t,0,n[t]),F.splice(t,0,1));const i=F.map((t=>Math.sign(t)));F.forEach(((t,e,n)=>{if(t<0){const B=(U[e]-Q[e])/t,s=Q[e],i=s+B*F[e];Q[e]=i,U[e]=s,n[e]=-t}}));const a=n.slice(0);s.forEach(((t,e)=>{a[t]=Math.ceil((U[t]-Q[t])/F[t])}));const l={dims:a,dataType:t[0].dataType},c=outputVariable("output",t[0].dataType,a.length),g=inputVariable("input",t[0].dataType,t[0].dims.length),d=ShapeUtil2.size(a),I=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:Q.length},{name:"signs",type:"i32",length:i.length},{name:"steps",type:"u32",length:F.length}],o=[{type:"uint32",data:d},{type:"uint32",data:Q},{type:"int32",data:i},{type:"uint32",data:F},...createTensorShapeVariables(t[0].dims),...createTensorShapeVariables(a)];return{name:"Slice",shaderCache:{hint:`${i.length}_${Q.length}_${F.length}`,inputDependencies:["rank"]},getShaderSource:t=>`\n      ${t.registerUniforms(I).declareVariables(g,c)}\n        ${calculateInputIndicesImpl(g,c,n)}\n        ${t.mainStart()}\n          ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${c.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${c.setByOffset("global_idx",g.getByIndices("input_indices"))}\n      }`,getRunData:()=>({outputs:[l],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:o})}},slice2=(t,e)=>{validateInputs46(t.inputs,e);const n=createSliceAttributesFromInputs(t.inputs,e);t.compute(createSliceProgramInfo2(t.inputs,n),{inputs:[0]})},parseSliceAttributes2=t=>{const e=t.starts,n=t.ends,B=t.axes;return createAttributeWithCacheKey2({starts:e,ends:n,axes:B})}}}),validateInputs47,createSoftmaxProgramInfo,softmax2,parseSoftmaxAttributes2,init_softmax2=__esm({"web/lib/wasm/jsep/webgpu/ops/softmax.ts"(){init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs47=t=>{if(!t||1!==t.length)throw new Error("Softmax op requires 1 input.")},createSoftmaxProgramInfo=(t,e)=>{const n=t.dims,B=ShapeUtil2.size(n);let s=e.axis;if(s<0&&(s=n.length+s),s<n.length-1)throw new Error("softmax only supports last axis for now.");const F=n[s],Q=B/F,U=getMaxComponents(F),i=F/U,a=inputVariable("x",t.dataType,t.dims,U),l=outputVariable("result",t.dataType,t.dims,U),c=a.type.value,g="f32"===tensorTypeToWsglStorageType(t.dataType)?`var threadMax = ${c}(-3.402823e+38f);`:`var threadMax = ${c}(-65504.0h);`;return{name:"Softmax",shaderCache:{hint:`${U}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType}],dispatchGroup:{x:Q},programUniforms:[{type:"uint32",data:i}]}),getShaderSource:t=>{return`\n      var<workgroup> rowMaxShared : ${c};\n      var<workgroup> rowSumShared : ${c};\n      var<workgroup> threadShared : array<${c}, 64>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${c} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${c}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${t.registerUniform("packedCols","i32").declareVariables(a,l)}\n      ${t.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = 64;\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${g}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${c}(${e="threadShared[0]",n=U,4===n?`max(max(${e}.x, ${e}.y), max(${e}.z, ${e}.w))`:2===n?`max(${e}.x, ${e}.y)`:3===n?`max(max(${e}.x, ${e}.y), ${e}.z)`:e});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${c}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${c}(${sumVector("threadShared[0]",U)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;var e,n}}},softmax2=(t,e)=>{validateInputs47(t.inputs),t.compute(createSoftmaxProgramInfo(t.inputs[0],e))},parseSoftmaxAttributes2=t=>createAttributeWithCacheKey2({axis:t.axis})}}),validateInputs48,createSplitAttributesFromInputs,calculateOutputIndexImpl,writeBufferDataImpl,createSplitProgramInfo2,split2,parseSplitAttributes2,init_split2=__esm({"web/lib/wasm/jsep/webgpu/ops/split.ts"(){init_util2(),init_attribute_with_cache_key2(),init_common(),validateInputs48=t=>{if(!t||t.length<1)throw new Error("too few inputs")},createSplitAttributesFromInputs=(t,e)=>{const n=[];let B=e.numOutputs;return t[1].dims[0]>0&&(t[1].getBigInt64Array().forEach((t=>n.push(Number(t)))),B=n.length),createAttributeWithCacheKey2({numOutputs:B,axis:e.axis,splitSizes:n})},calculateOutputIndexImpl=t=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${t}u; i += 1u ) {\n    if (index < ${getElementAt("uniforms.size_in_split_axis","i",t)}) {\n        return i;\n    }\n    }\n    return ${t}u;\n}`,writeBufferDataImpl=t=>{const e=t.length,n=[];for(let B=0;B<e;++B){const s=t[B].setByIndices("indices","input[global_idx]");1===e?n.push(s):0===B?n.push(`if (output_number == ${B}u) { ${s} }`):B===e-1?n.push(`else { ${s} }`):n.push(`else if (output_number == ${B}) { ${s} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${t[0].type.indices}, global_idx: u32) {\n        ${n.join("\n")}\n      }`},createSplitProgramInfo2=(t,e)=>{const n=t[0].dims,B=ShapeUtil2.size(n),s=t[0].dataType,F=ShapeUtil2.normalizeAxis(e.axis,n.length),Q=new Array(e.numOutputs),U=inputVariable("input",s,n),i=new Array(e.numOutputs),a=[],l=[];let c=0;const g=[{type:"uint32",data:B}];for(let B=0;B<e.numOutputs;B++){c+=e.splitSizes[B],i[B]=c;const F=n.slice();F[e.axis]=e.splitSizes[B],l.push(F),Q[B]=outputVariable(`output${B}`,s,F),a.push({dims:l[B],dataType:t[0].dataType})}g.push({type:"uint32",data:i}),g.push(...createTensorShapeVariables(n)),l.forEach((t=>g.push(...createTensorShapeVariables(t))));return{name:"Split",shaderCache:{hint:e.cacheKey,inputDependencies:["rank"]},getShaderSource:t=>`\n  ${t.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",i.length).declareVariables(U,...Q)}\n  ${calculateOutputIndexImpl(i.length)}\n  ${writeBufferDataImpl(Q)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${U.offsetToIndices("global_idx")};\n    var index = ${U.indicesGet("indices",F)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${getElementAt("uniforms.size_in_split_axis","output_number - 1u",i.length)};\n      ${U.indicesSet("indices",F,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`,getRunData:()=>({outputs:a,dispatchGroup:{x:Math.ceil(B/64)},programUniforms:g})}},split2=(t,e)=>{validateInputs48(t.inputs);const n=1===t.inputs.length?e:createSplitAttributesFromInputs(t.inputs,e);t.compute(createSplitProgramInfo2(t.inputs,n),{inputs:[0]})},parseSplitAttributes2=t=>{const e=t.axis,n=t.splitSizes,B=t.numOutputs<0?n.length:t.numOutputs;if(B!==n.length)throw new Error("numOutputs and splitSizes lengh must be equal");return createAttributeWithCacheKey2({axis:e,numOutputs:B,splitSizes:n})}}}),getRepeats,validateInputs49,getOutputShape3,createTileProgramInfo2,tile2,init_tile2=__esm({"web/lib/wasm/jsep/webgpu/ops/tile.ts"(){init_wasm_common(),init_util2(),init_common(),getRepeats=t=>Array.from(t.getBigInt64Array(),Number),validateInputs49=t=>{if(!t||2!==t.length)throw new Error("Tile requires 2 inputs.");if(1!==t[0].dataType&&6!==t[0].dataType&&12!==t[0].dataType)throw new Error("Tile only support float, int32, and uint32 data types");if(7!==t[1].dataType)throw new Error("Tile `repeats` input should be of int64 data type");if(1!==t[1].dims.length)throw new Error("Tile `repeats` input should be 1-D");if(getRepeats(t[1]).length!==t[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},getOutputShape3=(t,e)=>{const n=[];for(let B=0;B<t.length;++B)n.push(t[B]*e[B]);return n},createTileProgramInfo2=t=>{const e=t[0].dims,n=getRepeats(t[1]),B=getOutputShape3(e,n),s=ShapeUtil2.size(B),F=t[0].dataType,Q=inputVariable("input",F,e.length),U=outputVariable("output",F,B.length);return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:B,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:"uint32",data:s},...createTensorShapeVariables(t[0].dims),...createTensorShapeVariables(B)]}),getShaderSource:t=>`\n      const inputShape = ${Q.indices(...e)};\n      ${t.registerUniform("output_size","u32").declareVariables(Q,U)}\n      ${t.mainStart()}\n      ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${U.offsetToIndices("global_idx")};\n      var input_indices: ${Q.type.indices};\n      for (var i = 0; i < ${e.length}; i++) {\n        let input_dim_i = ${Q.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${U.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${Q.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${U.setByOffset("global_idx",Q.getByIndices("input_indices"))}\n    }`}},tile2=t=>{validateInputs49(t.inputs),t.compute(createTileProgramInfo2(t.inputs),{inputs:[0]})}}}),createWhereOpProgramShader,createWhereOpProgramInfo,where,init_where=__esm({"web/lib/wasm/jsep/webgpu/ops/where.ts"(){init_wasm_common(),init_util2(),init_common(),createWhereOpProgramShader=(t,e,n,B,s)=>{const F=outputVariable("output_data",s,n.length,4),Q=inputVariable("a_data",e[1].dataType,e[1].dims.length,4),U=inputVariable("b_data",e[2].dataType,e[2].dims.length,4),i=inputVariable("c_data",e[0].dataType,e[0].dims.length,4);let a;const l=(t,e,n)=>`select(${e}, ${t}, ${n})`;if(B){const t=(t,e,n="")=>{const B=`a_data[index_a${e}][component_a${e}]`,s=`b_data[index_b${e}][component_b${e}]`,a=`bool(c_data[index_c${e}] & ${4278190080>>>8*(3-e)}u)`;return`\n            let output_indices${e} = ${F.offsetToIndices(`global_idx * 4u + ${e}u`)};\n            let offset_a${e} = ${Q.broadcastedIndicesToOffset(`output_indices${e}`,F)};\n            let offset_b${e} = ${U.broadcastedIndicesToOffset(`output_indices${e}`,F)};\n            let offset_c${e} = ${i.broadcastedIndicesToOffset(`output_indices${e}`,F)};\n            let index_a${e} = offset_a${e} / 4u;\n            let index_b${e} = offset_b${e} / 4u;\n            let index_c${e} = offset_c${e} / 4u;\n            let component_a${e} = offset_a${e} % 4u;\n            let component_b${e} = offset_b${e} % 4u;\n            ${t}[${e}] = ${n}(${l(B,s,a)});\n          `};a=9===s?`\n            var data = vec4<u32>(0);\n            ${t("data",0,"u32")}\n            ${t("data",1,"u32")}\n            ${t("data",2,"u32")}\n            ${t("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${t("output_data[global_idx]",0)}\n            ${t("output_data[global_idx]",1)}\n            ${t("output_data[global_idx]",2)}\n            ${t("output_data[global_idx]",3)}\n          `}else a=F.setByOffset("global_idx",l(Q.getByOffset("global_idx"),U.getByOffset("global_idx"),i.getByOffset("global_idx")));return`\n        ${t.registerUniform("vec_size","u32").declareVariables(i,Q,U,F)}\n        ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${a}\n      }`},createWhereOpProgramInfo=t=>{const e=t[1].dims,n=t[2].dims,B=t[0].dims,s=t[1].dataType,F=!(ShapeUtil2.areEqual(e,n)&&ShapeUtil2.areEqual(n,B));let Q=e,U=ShapeUtil2.size(e);if(F){const t=BroadcastUtil2.calcShape(BroadcastUtil2.calcShape(e,n,!1),B,!1);if(!t)throw new Error("Can't perform where op on the given tensors");Q=t,U=ShapeUtil2.size(Q)}const i=Math.ceil(U/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:e=>createWhereOpProgramShader(e,t,Q,F,s),getRunData:()=>({outputs:[{dims:Q,dataType:s}],dispatchGroup:{x:Math.ceil(U/64/4)},programUniforms:[{type:"uint32",data:i},...createTensorShapeVariables(B),...createTensorShapeVariables(e),...createTensorShapeVariables(n),...createTensorShapeVariables(Q)]})}},where=t=>{t.compute(createWhereOpProgramInfo(t.inputs))}}}),WEBGPU_OP_RESOLVE_RULES,init_op_resolve_rules2=__esm({"web/lib/wasm/jsep/webgpu/op-resolve-rules.ts"(){init_argminmax(),init_attention(),init_batch_norm(),init_bias_add(),init_bias_split_gelu(),init_binary_op2(),init_concat2(),init_conv2(),init_conv_transpose2(),init_cumsum(),init_einsum(),init_expand(),init_gather2(),init_gather_elements(),init_gemm2(),init_instance_norm(),init_layer_norm(),init_matmul2(),init_multi_head_attentiion(),init_pad2(),init_pool2(),init_range(),init_reduce2(),init_resize(),init_skip_layer_norm(),init_slice2(),init_softmax2(),init_split2(),init_tile2(),init_transpose2(),init_unary_op2(),init_where(),WEBGPU_OP_RESOLVE_RULES=new Map([["Abs",[abs2]],["Acos",[acos2]],["Acosh",[acosh]],["Add",[add3]],["ArgMax",[argMax,parseArgMinMaxAttributes]],["ArgMin",[argMin,parseArgMinMaxAttributes]],["Asin",[asin2]],["Asinh",[asinh]],["Atan",[atan2]],["Atanh",[atanh]],["Attention",[attention]],["AveragePool",[averagePool2,parseAveragePoolAttributes2]],["BatchNormalization",[batchNorm]],["BiasAdd",[biasAdd]],["BiasSplitGelu",[biasSplitGelu]],["Cast",[cast2,parseCastAttributes2]],["Ceil",[ceil2]],["Clip",[clip2]],["Concat",[concat2,parseConcatAttributes2]],["Conv",[conv2,parseConvAttributes2]],["ConvTranspose",[convTranspose2,parseConvTransposeAttributes2]],["Cos",[cos2]],["Cosh",[cosh]],["CumSum",[cumsum,parseCumSumAttributes]],["Div",[div2]],["Einsum",[einsum,parseEinsumAttributes]],["Elu",[elu2,parseAlphaAttributes]],["Equal",[equal2]],["Erf",[erf]],["Exp",[exp2]],["Expand",[expand]],["Floor",[floor2]],["FusedConv",[conv2,parseConvAttributes2]],["Gather",[gather2,parseGatherAttributes2]],["GatherElements",[gatherElements,parseGatherElementsAttributes]],["Gelu",[gelu]],["Gemm",[gemm2,parseGemmAttributes2]],["GlobalAveragePool",[globalAveragePool2,parseGlobalAveragePoolAttributes2]],["GlobalMaxPool",[globalMaxPool2,parseGlobalMaxPoolAttributes]],["Greater",[greater2]],["GreaterOrEqual",[greaterOrEqual]],["InstanceNormalization",[instanceNorm]],["LayerNormalization",[layerNorm]],["LeakyRelu",[leakyRelu2,parseAlphaAttributes]],["Less",[less2]],["LessOrEqual",[lessOrEqual]],["Log",[log3]],["MatMul",[matMul2]],["MaxPool",[maxPool2,parseMaxPoolAttributes2]],["Mul",[mul2]],["MultiHeadAttention",[multiHeadAttention,parseMultiHeadAttentionAttributes]],["Neg",[neg2]],["Not",[not3]],["Pad",[pad]],["Pow",[pow2]],["Range",[range]],["Reciprocal",[reciprocal]],["ReduceMin",[reduceMin2]],["ReduceMean",[reduceMean2]],["ReduceMax",[reduceMax2]],["ReduceSum",[reduceSum2]],["ReduceProd",[reduceProd2]],["ReduceL1",[reduceL1]],["ReduceL2",[reduceL2]],["ReduceLogSum",[reduceLogSum2]],["ReduceLogSumExp",[reduceLogSumExp]],["ReduceSumSquare",[reduceSumSquare]],["Relu",[relu2]],["Resize",[resize2,parseResizeAttributes]],["Sigmoid",[sigmoid2]],["Sin",[sin2]],["Sinh",[sinh]],["Slice",[slice2,parseSliceAttributes2]],["SkipLayerNormalization",[skipLayerNorm,parseSkipLayerNormAttributes]],["Split",[split2,parseSplitAttributes2]],["Sqrt",[sqrt2]],["Softmax",[softmax2,parseSoftmaxAttributes2]],["Sub",[sub2]],["Tan",[tan2]],["Tanh",[tanh2]],["ThresholdedRelu",[thresholdedRelu,parseAlphaAttributes]],["Tile",[tile2]],["Transpose",[transpose2,parseTransposeAttributes2]],["Where",[where]]])}}),ProgramManager2,init_program_manager2=__esm({"web/lib/wasm/jsep/webgpu/program-manager.ts"(){init_esm(),init_log(),init_common(),ProgramManager2=class{constructor(t){this.backend=t,this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,e){this.repo.set(t,e)}run(t,e,n,B,s){TRACE_FUNC_BEGIN(t.programInfo.name);const F=this.backend.device,Q=this.backend.getComputePassEncoder();this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber),Q.setPipeline(t.computePipeline);const U=[];for(const t of e)U.push({binding:U.length,resource:{buffer:t.buffer}});for(const t of n)U.push({binding:U.length,resource:{buffer:t.buffer}});s&&U.push({binding:U.length,resource:s});const i=F.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:U,label:t.programInfo.name});Q.setBindGroup(0,i),Q.dispatchWorkgroups(...B),this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||"at-passes"===this.backend.queryType)&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),TRACE_FUNC_END(t.programInfo.name)}dispose(){}build(t,e){TRACE_FUNC_BEGIN(t.name);const n=this.backend.device,B=[];n.features.has("shader-f16")&&B.push("enable f16;");const s=createShaderHelper(e),F=t.getShaderSource(s),Q=`${B.join("\n")}\n${s.additionalImplementations}\n${F}`,U=n.createShaderModule({code:Q,label:t.name});LOG_DEBUG("verbose",(()=>`[WebGPU] ${t.name} shader code: ${Q}`));const i=n.createComputePipeline({compute:{module:U,entryPoint:"main"},layout:"auto",label:t.name});return TRACE_FUNC_END(t.name),{programInfo:t,computePipeline:i}}normalizeDispatchGroupSize(t){const e="number"==typeof t?t:t.x,n="number"==typeof t?1:t.y||1,B="number"==typeof t?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(e<=s&&n<=s&&B<=s)return[e,n,B];const F=e*n*B;let Q=Math.ceil(Math.sqrt(F));if(Q>s){if(Q=Math.ceil(Math.cbrt(F)),Q>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[Q,Q,Q]}return[Q,Q,1]}}}}),getProgramInputTensorInfoDependencyKey,getProgramInfoUniqueKey2,WebGpuBackend,init_backend_webgpu=__esm({"web/lib/wasm/jsep/backend-webgpu.ts"(){init_esm(),init_wasm_common(),init_log(),init_tensor_view(),init_gpu_data_manager(),init_op_resolve_rules2(),init_program_manager2(),getProgramInputTensorInfoDependencyKey=(t,e)=>{if(e.length!==t.length)throw new Error(`inputDependencies length ${e.length} is not equal to inputTensors length ${t.length}.`);const n=[];for(let B=0;B<t.length;++B){const s=t[B].dataType;switch(e[B]){case"none":n.push("");break;case"type":n.push(`${s}`);break;case"rank":{const e=t[B].dims.length;n.push(`${s};${e}`);break}case"dims":{const e=t[B].dims.join(",");n.push(`${s};${e}`);break}default:throw new Error(`unsupported input dependency: ${e[B]}`)}}return n.join("|")},getProgramInfoUniqueKey2=(t,e,n)=>{let B=t.name;return t.shaderCache?.hint&&(B+="["+t.shaderCache.hint+"]"),B+=":"+n+`:${getProgramInputTensorInfoDependencyKey(e,t.shaderCache?.inputDependencies??new Array(e.length).fill("dims"))}`,B},WebGpuBackend=class{constructor(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,e){this.env=t;const n=[],B={requiredLimits:{maxComputeWorkgroupStorageSize:e.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:e.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:e.limits.maxStorageBufferBindingSize,maxBufferSize:e.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:e.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:e.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:e.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:e.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n};e.features.has("chromium-experimental-timestamp-query-inside-passes")?n.push("chromium-experimental-timestamp-query-inside-passes"):e.features.has("timestamp-query")&&n.push("timestamp-query"),e.features.has("shader-f16")&&n.push("shader-f16"),this.device=await e.requestDevice(B),this.gpuDataManager=createGpuDataManager(this),this.programManager=new ProgramManager2(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,configureLogger(t.logLevel,!!t.debug),this.device.onuncapturederror=t=>{t.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${t.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){void 0!==this.querySet&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder(),this.setQueryType(),"none"!==this.queryType&&void 0===this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2*this.maxDispatchNumber}),this.queryResolveBuffer=this.device.createBuffer({size:2*this.maxDispatchNumber*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE}))),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){const t={};"at-passes"===this.queryType&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:2*this.pendingDispatchNumber,endOfPassWriteIndex:2*this.pendingDispatchNumber+1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;let t;TRACE_FUNC_BEGIN(),this.endComputePass(),"none"!==this.queryType&&(this.commandEncoder.resolveQuerySet(this.querySet,0,2*this.pendingDispatchNumber,this.queryResolveBuffer,0),t=this.device.createBuffer({size:2*this.pendingDispatchNumber*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,2*this.pendingDispatchNumber*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,"none"!==this.queryType&&t.mapAsync(GPUMapMode.READ).then((()=>{const e=new BigUint64Array(t.getMappedRange()),n=this.pendingQueries.get(t);for(let t=0;t<e.length/2;t++){const B=n[t],s=B.kernelId,F=this.kernels.get(s),Q=F.kernelType,U=F.kernelName,i=B.programName,a=B.inputTensorViews,l=B.outputTensorViews,c=e[2*t],g=e[2*t+1];void 0===this.queryTimeBase&&(this.queryTimeBase=c);const d=Number(c-this.queryTimeBase),I=Number(g-this.queryTimeBase);if(!Number.isSafeInteger(d)||!Number.isSafeInteger(I))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:a.map((t=>({dims:t.dims,dataType:tensorDataTypeEnumToString(t.dataType)}))),outputsMetadata:l.map((t=>({dims:t.dims,dataType:tensorDataTypeEnumToString(t.dataType)}))),kernelId:s,kernelType:Q,kernelName:U,programName:i,startTime:d,endTime:I});else{let t="";a.forEach(((e,n)=>{t+=`input[${n}]: [${e.dims}] | ${tensorDataTypeEnumToString(e.dataType)}, `}));let e="";l.forEach(((t,n)=>{e+=`output[${n}]: [${t.dims}] | ${tensorDataTypeEnumToString(t.dataType)}, `})),console.log(`[profiling] kernel "${s}|${Q}|${U}|${i}" ${t}${e}execution time: ${I-d} ns`)}TRACE("GPU",`${i}::${c}::${g}`)}t.unmap(),this.pendingQueries.delete(t)})),TRACE_FUNC_END()}run(t,e,n,B,s){TRACE_FUNC_BEGIN(t.name);const F=[];for(let t=0;t<e.length;++t){const n=this.gpuDataManager.get(e[t].data);if(!n)throw new Error(`no GPU data for input: ${e[t].data}`);F[t]=n}const{outputs:Q,dispatchGroup:U,programUniforms:i}=t.getRunData(e),a=0===n.length?Q.map(((t,e)=>e)):n;if(a.length!==Q.length)throw new Error(`Output size ${a.length} must be equal to ${Q.length}.`);const l=[],c=[];for(let t=0;t<Q.length;++t){if(!Number.isInteger(a[t])||a[t]<-3||a[t]>=Q.length)throw new Error(`Invalid output index: ${a[t]}`);if(-3===a[t])continue;const e=-1===a[t],n=-2===a[t],F=e||n?s(Q[t].dataType,Q[t].dims):B(a[t],Q[t].dataType,Q[t].dims),U=this.gpuDataManager.get(F.data);if(!U)throw new Error(`no GPU data for output: ${F.data}`);if(e&&this.temporaryData.push(U),n){let t=this.kernelPersistentData.get(this.currentKernelId);t||(t=[],this.kernelPersistentData.set(this.currentKernelId,t)),t.push(U)}l.push(F),c.push(U)}let g;if(i){let t=0;const e=[];i.forEach((n=>{const B="number"==typeof n.data?[n.data]:n.data;if(0===B.length)return;const s=B.length<=2?4*B.length:16;t=Math.ceil(t/s)*s,e.push(t),t+=B.length>4?16*Math.ceil(B.length/4):4*B.length}));const n=16;t=Math.ceil(t/n)*n;const B=new ArrayBuffer(t);i.forEach(((t,n)=>{const s=e[n],F="number"==typeof t.data?[t.data]:t.data;"int32"===t.type?new Int32Array(B,s,F.length).set(F):"uint32"===t.type?new Uint32Array(B,s,F.length).set(F):new Float32Array(B,s,F.length).set(F)}));const s=this.gpuDataManager.create(t,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(s.buffer,0,B,0,t),this.gpuDataManager.release(s.id),g={offset:0,size:t,buffer:s.buffer}}const d=this.programManager.normalizeDispatchGroupSize(U),I=1===d[1]&&1===d[2],o=getProgramInfoUniqueKey2(t,e,I);let r=this.programManager.getArtifact(o);if(r||(r=this.programManager.build(t,d),this.programManager.setArtifact(o,r),LOG_DEBUG("info",(()=>`[artifact] key: ${o}, programName: ${t.name}`))),LOG_DEBUG("info",(()=>`[ProgramManager] run "${t.name}" (key=${o}) with ${d[0]}x${d[1]}x${d[2]}`)),"none"!==this.queryType){const t={kernelId:this.currentKernelId,programName:r.programInfo.name,inputTensorViews:e,outputTensorViews:l};this.pendingKernels.push(t)}return this.programManager.run(r,F,c,d,g),TRACE_FUNC_END(t.name),l}upload(t,e){this.gpuDataManager.upload(t,e)}memcpy(t,e){this.gpuDataManager.memcpy(t,e)}async download(t,e){await this.gpuDataManager.download(t,e)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,e,n,B){const s=WEBGPU_OP_RESOLVE_RULES.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);const F={kernelType:t,kernelName:B,kernelEntry:s[0],attributes:[s[1],n]};this.kernels.set(e,F)}releaseKernel(t){const e=this.kernelPersistentData.get(t);if(e){for(const t of e)this.gpuDataManager.release(t.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,e,n){const B=this.kernels.get(t);if(!B)throw new Error(`kernel not created: ${t}`);const s=B.kernelType,F=B.kernelName,Q=B.kernelEntry,U=B.attributes;if(null!==this.currentKernelId)throw new Error(`kernel "[${s}] ${F}" is not allowed to be called recursively`);this.currentKernelId=t,U[0]&&(U[1]=U[0](U[1]),U[0]=void 0),LOG_DEBUG("info",(()=>`[WebGPU] Start to run kernel "[${s}] ${F}"...`));const i=this.env.debug;this.temporaryData=[];try{return i&&this.device.pushErrorScope("validation"),Q(e,U[1]),0}catch(t){return n.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${F}" failed. ${t}`)),1}finally{i&&n.push(this.device.popErrorScope().then((t=>t?`GPU validation error for kernel "[${s}] ${F}": ${t.message}`:null)));for(const t of this.temporaryData)this.gpuDataManager.release(t.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,e,n,B){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));const F=s.get(e),Q=this.gpuDataManager.registerExternalBuffer(n,B,F?.[1]);return s.set(e,[Q,n]),Q}unregisterBuffers(t){const e=this.sessionExternalDataMapping.get(t);e&&(e.forEach((t=>this.gpuDataManager.unregisterExternalBuffer(t[1]))),this.sessionExternalDataMapping.delete(t))}getBuffer(t){const e=this.gpuDataManager.get(t);if(!e)throw new Error(`no GPU data for buffer: ${t}`);return e.buffer}createDownloader(t,e,n){return async()=>{const B=await downloadGpuData(this,t,e);return createView2(B.buffer,n)}}writeTimestamp(t){"inside-passes"===this.queryType&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",("default"===this.env.webgpu.profiling?.mode||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"))}}}}),init_exports={},TensorViewImpl,ComputeContextImpl,init;__export(init_exports,{init:()=>init});var init_init=__esm({"web/lib/wasm/jsep/init.ts"(){init_wasm_common(),init_backend_webgpu(),init_log(),init_util2(),TensorViewImpl=class t{constructor(t,e,n,B){this.module=t,this.dataType=e,this.data=n,this.dims=B}getFloat32Array(){if(1!==this.dataType)throw new Error("Invalid data type");const t=ShapeUtil2.size(this.dims);return 0===t?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(7!==this.dataType)throw new Error("Invalid data type");const t=ShapeUtil2.size(this.dims);return 0===t?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(6!==this.dataType)throw new Error("Invalid data type");const t=ShapeUtil2.size(this.dims);return 0===t?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(e){if(ShapeUtil2.size(e)!==ShapeUtil2.size(this.dims))throw new Error("Invalid new shape");return new t(this.module,this.dataType,this.data,e)}},ComputeContextImpl=class{constructor(t,e,n){this.module=t,this.backend=e,this.customDataOffset=0,this.customDataSize=0;const B=t.HEAPU32;let s=n>>>2;this.opKernelContext=B[s++];const F=B[s++];this.outputCount=B[s++],this.customDataOffset=B[s++],this.customDataSize=B[s++];const Q=[];for(let e=0;e<F;e++){const e=B[s++],n=B[s++],F=B[s++],U=[];for(let t=0;t<F;t++)U.push(B[s++]);Q.push(new TensorViewImpl(t,e,n,U))}this.inputs=Q}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,e){const n=e?.inputs?.map((t=>"number"==typeof t?this.inputs[t]:t))??this.inputs,B=e?.outputs??[];return this.backend.run(t,n,B,((t,e,n)=>new TensorViewImpl(this.module,e,this.output(t,n),n)),((t,e)=>{const n=getTensorElementSize(t);if(!n)throw new Error(`Unsupported data type: ${t}`);const B=n*ShapeUtil2.size(e);return new TensorViewImpl(this.module,t,this.backend.gpuDataManager.create(B).id,e)}))}output(t,e){const n=this.module.stackSave();try{const n=this.module.stackAlloc(4*(1+e.length));let B=n>>2;this.module.HEAPU32[B++]=e.length;for(let t=0;t<e.length;t++)this.module.HEAPU32[B++]=e[t];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${e}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(n)}}},init=async(t,e,n)=>{const B=t.jsepInit;if(!B)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");const s=new WebGpuBackend;await s.initialize(e,n),B(s,(t=>s.alloc(t)),(t=>s.free(t)),((e,n,B,F=!1)=>{if(F)LOG_DEBUG("verbose",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${e}, dst=${n}, size=${B}`)),s.memcpy(e,n);else{LOG_DEBUG("verbose",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${e}, gpuDataId=${n}, size=${B}`));const F=t.HEAPU8.subarray(e>>>0,(e>>>0)+B);s.upload(n,F)}}),(async(e,n,B)=>{LOG_DEBUG("verbose",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${e}, dataOffset=${n}, size=${B}`)),await s.download(e,(()=>t.HEAPU8.subarray(n>>>0,(n>>>0)+B)))}),((e,n,B)=>s.createKernel(e,n,B,t.UTF8ToString(t._JsepGetNodeName(n)))),(t=>s.releaseKernel(t)),((e,n,B,F)=>{LOG_DEBUG("verbose",(()=>`[WebGPU] jsepRun: sessionHandle=${B}, kernel=${e}, contextDataOffset=${n}`));const Q=new ComputeContextImpl(t,s,n);return s.computeKernel(e,Q,F)}))}}}),initOrt,initRuntime,initEp,activeSessions,getSessionInputOutputCount,copyFromExternalBuffer,createSession,releaseSession,prepareInputOutputTensor,run,endProfiling,extractTransferableBuffers,init_wasm_core_impl=__esm({"web/lib/wasm/wasm-core-impl.ts"(){init_run_options(),init_session_options(),init_wasm_common(),init_wasm_factory(),init_wasm_utils(),init_wasm_utils_load_file(),initOrt=(t,e)=>{0!==getInstance()._OrtInit(t,e)&&checkLastError("Can't initialize onnxruntime.")},initRuntime=async t=>{initOrt(t.wasm.numThreads,logLevelStringToEnum(t.logLevel))},initEp=async(t,e)=>{if("webgpu"===e){if("undefined"==typeof navigator||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");const e=await navigator.gpu.requestAdapter();if(!e)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.');if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");const n=(init_init(),__toCommonJS(init_exports)).init;await n(getInstance(),t,e)}},activeSessions=new Map,getSessionInputOutputCount=t=>{const e=getInstance(),n=e.stackSave();try{const n=e.stackAlloc(8);return 0!==e._OrtGetInputOutputCount(t,n,n+4)&&checkLastError("Can't get session input/output count."),[e.HEAP32[n/4],e.HEAP32[n/4+1]]}finally{e.stackRestore(n)}},copyFromExternalBuffer=t=>{const e=getInstance(),n=e._malloc(t.byteLength);if(0===n)throw new Error(`Can't create a session. failed to allocate a buffer of size ${t.byteLength}.`);return e.HEAPU8.set(t,n),[n,t.byteLength]},createSession=async(t,e)=>{let n,B;const s=getInstance();Array.isArray(t)?[n,B]=t:t.buffer===s.HEAPU8.buffer?[n,B]=[t.byteOffset,t.byteLength]:[n,B]=copyFromExternalBuffer(t);let F=0,Q=0,U=0,i=[];const a=[],l=[];try{if([Q,i]=setSessionOptions(e),e?.externalData&&s.mountExternalData){const t=[];for(const n of e.externalData){const e="string"==typeof n?n:n.path;t.push(loadFile("string"==typeof n?n:n.data).then((t=>{s.mountExternalData(e,t)})))}await Promise.all(t)}F=s._OrtCreateSession(n,B,Q),0===F&&checkLastError("Can't create a session.");const[t,c]=getSessionInputOutputCount(F),g=[],d=[],I=[];for(let e=0;e<t;e++){const t=s._OrtGetInputName(F,e);0===t&&checkLastError("Can't get an input name."),a.push(t),g.push(s.UTF8ToString(t))}for(let t=0;t<c;t++){const n=s._OrtGetOutputName(F,t);0===n&&checkLastError("Can't get an output name."),l.push(n);const B=s.UTF8ToString(n);d.push(B);{const t="string"==typeof e?.preferredOutputLocation?e.preferredOutputLocation:e?.preferredOutputLocation?.[B]??"cpu";if("cpu"!==t&&"cpu-pinned"!==t&&"gpu-buffer"!==t)throw new Error(`Not supported preferred output location: ${t}.`);I.push(t)}}let o=null;return I.some((t=>"gpu-buffer"===t))&&(U=s._OrtCreateBinding(F),0===U&&checkLastError("Can't create IO binding."),o={handle:U,outputPreferredLocations:I,outputPreferredLocationsEncoded:I.map((t=>dataLocationStringToEnum(t)))}),activeSessions.set(F,[F,a,l,o]),[F,g,d]}catch(t){throw a.forEach((t=>s._OrtFree(t))),l.forEach((t=>s._OrtFree(t))),0!==U&&s._OrtReleaseBinding(U),0!==F&&s._OrtReleaseSession(F),t}finally{s._free(n),0!==Q&&s._OrtReleaseSessionOptions(Q),i.forEach((t=>s._free(t))),s.unmountExternalData?.()}},releaseSession=t=>{const e=getInstance(),n=activeSessions.get(t);if(!n)throw new Error(`cannot release session. invalid session id: ${t}`);const[B,s,F,Q]=n;Q&&e._OrtReleaseBinding(Q.handle),e.jsepUnregisterBuffers?.(t),s.forEach((t=>e._OrtFree(t))),F.forEach((t=>e._OrtFree(t))),e._OrtReleaseSession(B),activeSessions.delete(t)},prepareInputOutputTensor=(t,e,n,B,s)=>{if(!t)return void e.push(0);const F=getInstance(),Q=t[0],U=t[1],i=t[3];let a,l;if("string"===Q&&"gpu-buffer"===i)throw new Error("String tensor is not supported on GPU.");if("gpu-buffer"===i){const e=t[2].gpuBuffer,n=getTensorElementSize(tensorDataTypeStringToEnum(Q));l=U.reduce(((t,e)=>t*e),1)*n,a=F.jsepRegisterBuffer(B,s,e,l)}else{const e=t[2];if(Array.isArray(e)){l=4*e.length,a=F._malloc(l),n.push(a);let t=a/4;for(let B=0;B<e.length;B++){if("string"!=typeof e[B])throw new TypeError(`tensor data at index ${B} is not a string`);F.HEAPU32[t++]=allocWasmString(e[B],n)}}else l=e.byteLength,a=F._malloc(l),n.push(a),F.HEAPU8.set(new Uint8Array(e.buffer,e.byteOffset,l),a)}const c=F.stackSave(),g=F.stackAlloc(4*U.length);try{let t=g/4;U.forEach((e=>F.HEAP32[t++]=e));const n=F._OrtCreateTensor(tensorDataTypeStringToEnum(Q),a,l,g,U.length,dataLocationStringToEnum(i));0===n&&checkLastError(`Can't create tensor for input/output. session=${B}, index=${s}.`),e.push(n)}finally{F.stackRestore(c)}},run=async(t,e,n,B,s,F)=>{const Q=getInstance(),U=activeSessions.get(t);if(!U)throw new Error(`cannot run inference. invalid session id: ${t}`);const[i,a,l,c]=U,g=e.length,d=B.length;let I=0,o=[];const r=[],u=[],b=[],C=Q.stackSave(),p=Q.stackAlloc(4*g),m=Q.stackAlloc(4*g),G=Q.stackAlloc(4*d),V=Q.stackAlloc(4*d);try{[I,o]=setRunOptions(F);for(let B=0;B<g;B++)prepareInputOutputTensor(n[B],r,b,t,e[B]);for(let e=0;e<d;e++)prepareInputOutputTensor(s[e],u,b,t,g+B[e]);let U,C=p/4,x=m/4,h=G/4,Z=V/4;for(let t=0;t<g;t++)Q.HEAPU32[C++]=r[t],Q.HEAPU32[x++]=a[e[t]];for(let t=0;t<d;t++)Q.HEAPU32[h++]=u[t],Q.HEAPU32[Z++]=l[B[t]];if(c){const{handle:n,outputPreferredLocations:F,outputPreferredLocationsEncoded:U}=c;if(a.length!==g)throw new Error(`input count from feeds (${g}) is expected to be always equal to model's input count (${a.length}).`);for(let B=0;B<g;B++){const s=e[B];0!==await Q._OrtBindInput(n,a[s],r[B])&&checkLastError(`Can't bind input[${B}] for session=${t}.`)}for(let e=0;e<d;e++){const i=B[e],a=s[e]?.[3];if(a){0!==Q._OrtBindOutput(n,l[i],u[e],0)&&checkLastError(`Can't bind pre-allocated output[${e}] for session=${t}.`)}else{0!==Q._OrtBindOutput(n,l[i],0,U[i])&&checkLastError(`Can't bind output[${e}] to ${F[e]} for session=${t}.`)}}}U=c?await Q._OrtRunWithBinding(i,c.handle,d,G,I):await Q._OrtRun(i,m,p,g,V,d,G,I),0!==U&&checkLastError("failed to call OrtRun().");const S=[];for(let t=0;t<d;t++){const e=Q.HEAPU32[G/4+t];if(e===u[t]){S.push(s[t]);continue}const n=Q.stackSave(),F=Q.stackAlloc(16);let U,i=!1,a=0;try{0!==Q._OrtGetTensorData(e,F,F+4,F+8,F+12)&&checkLastError(`Can't access output tensor data on index ${t}.`);let n=F/4;const s=Q.HEAPU32[n++];a=Q.HEAPU32[n++];const l=Q.HEAPU32[n++],g=Q.HEAPU32[n++],d=[];for(let t=0;t<g;t++)d.push(Q.HEAPU32[l/4+t]);Q._OrtFree(l);const I=d.reduce(((t,e)=>t*e),1);U=tensorDataTypeEnumToString(s);const o=c?.outputPreferredLocations[B[t]];if("string"===U){if("gpu-buffer"===o)throw new Error("String tensor is not supported on GPU.");const t=[];let e=a/4;for(let n=0;n<I;n++){const B=Q.HEAPU32[e++],s=n===I-1?void 0:Q.HEAPU32[e]-B;t.push(Q.UTF8ToString(B,s))}S.push([U,d,t,"cpu"])}else if("gpu-buffer"===o&&I>0){const t=Q.jsepGetBuffer(a),n=getTensorElementSize(s);if(void 0===n||!isGpuBufferSupportedType(U))throw new Error(`Unsupported data type: ${U}`);i=!0,S.push([U,d,{gpuBuffer:t,download:Q.jsepCreateDownloader(t,I*n,U),dispose:()=>{Q._OrtReleaseTensor(e)}},"gpu-buffer"])}else{const t=new(tensorTypeToTypedArrayConstructor(U))(I);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(Q.HEAPU8.subarray(a,a+t.byteLength)),S.push([U,d,t,"cpu"])}}finally{Q.stackRestore(n),"string"===U&&a&&Q._free(a),i||Q._OrtReleaseTensor(e)}}return c&&Q._OrtClearBoundOutputs(c.handle),S}finally{Q.stackRestore(C),r.forEach((t=>Q._OrtReleaseTensor(t))),u.forEach((t=>Q._OrtReleaseTensor(t))),b.forEach((t=>Q._free(t))),0!==I&&Q._OrtReleaseRunOptions(I),o.forEach((t=>Q._free(t)))}},endProfiling=t=>{const e=getInstance(),n=activeSessions.get(t);if(!n)throw new Error("invalid session id");const B=n[0],s=e._OrtEndProfiling(B);0===s&&checkLastError("Can't get an profile file name."),e._OrtFree(s)},extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&"buffer"in t&&e.push(t.buffer)}return e}}}),require_main=__commonJS({"proxy-worker:./proxy-worker/main"(t,e){e.exports='/*!\n * ONNX Runtime Web v1.17.1\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    createReadStream: () => createReadStream,\n    readFile: () => readFile,\n    readFileSync: () => readFileSync\n  });\n  var readFile, readFileSync, createReadStream;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n      readFileSync = void 0;\n      createReadStream = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-simd.jsep.js\n  var require_ort_wasm_simd_jsep = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-simd.jsep.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var d = moduleArg, aa, k;\n          d.ready = new Promise((a, b) => {\n            aa = a;\n            k = b;\n          });\n          "use strict";\n          d.mountExternalData = (a, b) => {\n            (d.Fa || (d.Fa = /* @__PURE__ */ new Map())).set(a, b);\n          };\n          d.unmountExternalData = () => {\n            delete d.Fa;\n          };\n          d.jsepInit = (a, b, c, e, g, h, l, t) => {\n            d.ab = a;\n            d.Qa = b;\n            d.Sa = c;\n            d.La = e;\n            d.Ra = g;\n            d.sa = h;\n            d.Ta = l;\n            d.Ua = t;\n            b = (m, n, q) => (...u) => {\n              const w = p, f = n?.();\n              u = m(...u);\n              const r = n?.();\n              f !== r && (m = r, q(f), n = q = null);\n              return p != w ? ba() : u;\n            };\n            c = (m) => async (...n) => {\n              try {\n                if (d.Ea)\n                  throw Error("Session already started");\n                const q = d.Ea = { Va: n[0], errors: [] }, u = await m(...n);\n                if (d.Ea !== q)\n                  throw Error("Session mismatch");\n                a.flush();\n                const w = q.errors;\n                if (0 < w.length) {\n                  let f = await Promise.all(w);\n                  f = f.filter((r) => r);\n                  if (0 < f.length)\n                    throw Error(f.join("\\n"));\n                }\n                return u;\n              } finally {\n                d.Ea = null;\n              }\n            };\n            d._OrtRun = c(b(d._OrtRun, () => d._OrtRun, (m) => d._OrtRun = m));\n            d._OrtRunWithBinding = c(b(d._OrtRunWithBinding, () => d._OrtRunWithBinding, (m) => d._OrtRunWithBinding = m));\n            d._OrtBindInput = b(d._OrtBindInput, () => d._OrtBindInput, (m) => d._OrtBindInput = m);\n            d.jsepRegisterBuffer = (m, n, q, u) => a.registerBuffer(m, n, q, u);\n            d.jsepUnregisterBuffers = (m) => {\n              a.unregisterBuffers(m);\n            };\n            d.jsepGetBuffer = (m) => a.getBuffer(m);\n            d.jsepCreateDownloader = (m, n, q) => a.createDownloader(m, n, q);\n          };\n          var ca = Object.assign({}, d), da = "./this.program", x = (a, b) => {\n            throw b;\n          }, ea = "object" == typeof window, y = "function" == typeof importScripts, fa = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, z = "", A, B, C;\n          if (fa) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), D = (init_path(), __toCommonJS(path_exports));\n            z = y ? D.dirname(z) + "/" : __dirname + "/";\n            A = (a, b) => {\n              a = E(a) ? new URL(a) : D.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            C = (a) => {\n              a = A(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            B = (a, b, c, e = true) => {\n              a = E(a) ? new URL(a) : D.normalize(a);\n              fs.readFile(a, e ? void 0 : "utf8", (g, h) => {\n                g ? c(g) : b(e ? h.buffer : h);\n              });\n            };\n            !d.thisProgram && 1 < process.argv.length && (da = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            x = (a, b) => {\n              process.exitCode = a;\n              throw b;\n            };\n            d.inspect = () => "[Emscripten Module object]";\n          } else if (ea || y)\n            y ? z = self.location.href : "undefined" != typeof document && document.currentScript && (z = document.currentScript.src), _scriptDir && (z = _scriptDir), 0 !== z.indexOf("blob:") ? z = z.substr(0, z.replace(/[?#].*/, "").lastIndexOf("/") + 1) : z = "", A = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, y && (C = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), B = (a, b, c) => {\n              var e = new XMLHttpRequest();\n              e.open("GET", a, true);\n              e.responseType = "arraybuffer";\n              e.onload = () => {\n                200 == e.status || 0 == e.status && e.response ? b(e.response) : c();\n              };\n              e.onerror = c;\n              e.send(null);\n            };\n          var ha = console.log.bind(console), G = console.error.bind(console);\n          Object.assign(d, ca);\n          ca = null;\n          "object" != typeof WebAssembly && H("no native wasm support detected");\n          var I, J = false, K, L, M, N, O, ia, ja;\n          function ka() {\n            var a = I.buffer;\n            d.HEAP8 = L = new Int8Array(a);\n            d.HEAP16 = new Int16Array(a);\n            d.HEAPU8 = M = new Uint8Array(a);\n            d.HEAPU16 = new Uint16Array(a);\n            d.HEAP32 = N = new Int32Array(a);\n            d.HEAPU32 = O = new Uint32Array(a);\n            d.HEAPF32 = ia = new Float32Array(a);\n            d.HEAPF64 = ja = new Float64Array(a);\n          }\n          var la = [], ma = [], na = [], P = 0, oa = null, Q = null;\n          function H(a) {\n            a = "Aborted(" + a + ")";\n            G(a);\n            J = true;\n            K = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            k(a);\n            throw a;\n          }\n          var pa = (a) => a.startsWith("data:application/octet-stream;base64,"), E = (a) => a.startsWith("file://"), R;\n          R = "ort-wasm-simd.wasm";\n          if (!pa(R)) {\n            var qa = R;\n            R = d.locateFile ? d.locateFile(qa, z) : z + qa;\n          }\n          function ra(a) {\n            if (C)\n              return C(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function sa(a) {\n            if (ea || y) {\n              if ("function" == typeof fetch && !E(a))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => ra(a));\n              if (B)\n                return new Promise((b, c) => {\n                  B(a, (e) => b(new Uint8Array(e)), c);\n                });\n            }\n            return Promise.resolve().then(() => ra(a));\n          }\n          function ta(a, b, c) {\n            return sa(a).then((e) => WebAssembly.instantiate(e, b)).then((e) => e).then(c, (e) => {\n              G(`failed to asynchronously prepare wasm: ${e}`);\n              H(e);\n            });\n          }\n          function ua(a, b) {\n            var c = R;\n            return "function" != typeof WebAssembly.instantiateStreaming || pa(c) || E(c) || fa || "function" != typeof fetch ? ta(c, a, b) : fetch(c, { credentials: "same-origin" }).then((e) => WebAssembly.instantiateStreaming(e, a).then(b, function(g) {\n              G(`wasm streaming compile failed: ${g}`);\n              G("falling back to ArrayBuffer instantiation");\n              return ta(c, a, b);\n            }));\n          }\n          var S, va = {\n            931056: (a, b, c, e) => {\n              if ("undefined" == typeof d || !d.Fa)\n                return 1;\n              a = T(a >>> 0);\n              a.startsWith("./") && (a = a.substring(2));\n              a = d.Fa.get(a);\n              if (!a)\n                return 2;\n              b >>>= 0;\n              c >>>= 0;\n              if (b + c > a.byteLength)\n                return 3;\n              try {\n                return M.set(a.subarray(b, b + c), e >>> 0 >>> 0), 0;\n              } catch {\n                return 4;\n              }\n            },\n            931557: (a) => d.Qa(a),\n            931590: (a) => d.Sa(a),\n            931622: (a, b, c) => {\n              d.La(a, b, c, true);\n            },\n            931661: (a, b, c) => {\n              d.La(a, b, c);\n            },\n            931694: (a) => {\n              d.sa("Abs", a, void 0);\n            },\n            931745: (a) => {\n              d.sa("Neg", a, void 0);\n            },\n            931796: (a) => {\n              d.sa("Floor", a, void 0);\n            },\n            931849: (a) => {\n              d.sa("Ceil", a, void 0);\n            },\n            931901: (a) => {\n              d.sa("Reciprocal", a, void 0);\n            },\n            931959: (a) => {\n              d.sa("Sqrt", a, void 0);\n            },\n            932011: (a) => {\n              d.sa("Exp", a, void 0);\n            },\n            932062: (a) => {\n              d.sa("Erf", a, void 0);\n            },\n            932113: (a) => {\n              d.sa("Sigmoid", a, void 0);\n            },\n            932168: (a) => {\n              d.sa("Log", a, void 0);\n            },\n            932219: (a) => {\n              d.sa("Sin", a, void 0);\n            },\n            932270: (a) => {\n              d.sa("Cos", a, void 0);\n            },\n            932321: (a) => {\n              d.sa("Tan", a, void 0);\n            },\n            932372: (a) => {\n              d.sa("Asin", a, void 0);\n            },\n            932424: (a) => {\n              d.sa("Acos", a, void 0);\n            },\n            932476: (a) => {\n              d.sa("Atan", a, void 0);\n            },\n            932528: (a) => {\n              d.sa("Sinh", a, void 0);\n            },\n            932580: (a) => {\n              d.sa("Cosh", a, void 0);\n            },\n            932632: (a) => {\n              d.sa("Asinh", a, void 0);\n            },\n            932685: (a) => {\n              d.sa("Acosh", a, void 0);\n            },\n            932738: (a) => {\n              d.sa("Atanh", a, void 0);\n            },\n            932791: (a) => {\n              d.sa("Tanh", a, void 0);\n            },\n            932843: (a) => {\n              d.sa("Not", a, void 0);\n            },\n            932894: (a, b, c) => {\n              d.sa("Clip", a, { min: b, max: c });\n            },\n            932963: (a) => {\n              d.sa("Clip", a, void 0);\n            },\n            933015: (a, b) => {\n              d.sa("Elu", a, { alpha: b });\n            },\n            933073: (a) => {\n              d.sa("Relu", a, void 0);\n            },\n            933125: (a, b) => {\n              d.sa("LeakyRelu", a, { alpha: b });\n            },\n            933189: (a, b) => {\n              d.sa("ThresholdedRelu", a, { alpha: b });\n            },\n            933259: (a, b) => {\n              d.sa("Cast", a, { to: b });\n            },\n            933317: (a) => {\n              d.sa("Add", a, void 0);\n            },\n            933368: (a) => {\n              d.sa("Sub", a, void 0);\n            },\n            933419: (a) => {\n              d.sa("Mul", a, void 0);\n            },\n            933470: (a) => {\n              d.sa("Div", a, void 0);\n            },\n            933521: (a) => {\n              d.sa("Pow", a, void 0);\n            },\n            933572: (a) => {\n              d.sa("Equal", a, void 0);\n            },\n            933625: (a) => {\n              d.sa("Greater", a, void 0);\n            },\n            933680: (a) => {\n              d.sa("GreaterOrEqual", a, void 0);\n            },\n            933742: (a) => {\n              d.sa("Less", a, void 0);\n            },\n            933794: (a) => {\n              d.sa("LessOrEqual", a, void 0);\n            },\n            933853: (a, b, c, e, g) => {\n              d.sa("ReduceMean", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            934012: (a, b, c, e, g) => {\n              d.sa("ReduceMax", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            934170: (a, b, c, e, g) => {\n              d.sa("ReduceMin", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            934328: (a, b, c, e, g) => {\n              d.sa("ReduceProd", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            934487: (a, b, c, e, g) => {\n              d.sa("ReduceSum", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            934645: (a, b, c, e, g) => {\n              d.sa("ReduceL1", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(\n                e >>> 0,\n                g >>> 0\n              )) : [] });\n            },\n            934802: (a, b, c, e, g) => {\n              d.sa("ReduceL2", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            934959: (a, b, c, e, g) => {\n              d.sa("ReduceLogSum", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            935120: (a, b, c, e, g) => {\n              d.sa("ReduceSumSquare", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            935284: (a, b, c, e, g) => {\n              d.sa("ReduceLogSumExp", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            935448: (a) => {\n              d.sa("Where", a, void 0);\n            },\n            935501: (a, b, c) => {\n              d.sa("Transpose", a, { perm: b ? Array.from(N.subarray(b >>> 0, c >>> 0)) : [] });\n            },\n            935609: (a, b, c, e, g, h, l, t, m, n, q, u, w, f, r) => {\n              d.sa("ConvTranspose", a, { format: m ? "NHWC" : "NCHW", autoPad: b, dilations: [c], group: e, kernel_shape: [g], pads: [h, l], strides: [t], wIsConst: () => !!L[n >>> 0], outputPadding: q ? Array.from(N.subarray(q >>> 0, u >>> 0)) : [], outputShape: w ? Array.from(N.subarray(w >>> 0, f >>> 0)) : [], activation: T(r) });\n            },\n            936011: (a, b, c, e, g, h, l, t, m, n, q, u, w, f) => {\n              d.sa(\n                "ConvTranspose",\n                a,\n                { format: t ? "NHWC" : "NCHW", autoPad: b, dilations: Array.from(N.subarray(c >>> 0, (c >>> 0) + 2 >>> 0)), group: e, kernelShape: Array.from(N.subarray(g >>> 0, (g >>> 0) + 2 >>> 0)), pads: Array.from(N.subarray(h >>> 0, (h >>> 0) + 4 >>> 0)), strides: Array.from(N.subarray(l >>> 0, (l >>> 0) + 2 >>> 0)), wIsConst: () => !!L[m >>> 0], outputPadding: n ? Array.from(N.subarray(n >>> 0, q >>> 0)) : [], outputShape: u ? Array.from(N.subarray(u >>> 0, w >>> 0)) : [], activation: T(f) }\n              );\n            },\n            936576: (a, b, c, e, g, h, l, t, m, n, q, u, w, f, r) => {\n              d.sa("ConvTranspose", a, {\n                format: m ? "NHWC" : "NCHW",\n                autoPad: b,\n                dilations: [c],\n                group: e,\n                kernel_shape: [g],\n                pads: [h, l],\n                strides: [t],\n                wIsConst: () => !!L[n >>> 0],\n                outputPadding: q ? Array.from(N.subarray(q >>> 0, u >>> 0)) : [],\n                outputShape: w ? Array.from(N.subarray(w >>> 0, f >>> 0)) : [],\n                activation: T(r)\n              });\n            },\n            936978: (a, b, c, e, g, h, l, t, m, n, q, u, w, f) => {\n              d.sa("ConvTranspose", a, { format: t ? "NHWC" : "NCHW", autoPad: b, dilations: Array.from(N.subarray(c >>> 0, (c >>> 0) + 2 >>> 0)), group: e, kernelShape: Array.from(N.subarray(g >>> 0, (g >>> 0) + 2 >>> 0)), pads: Array.from(N.subarray(h >>> 0, (h >>> 0) + 4 >>> 0)), strides: Array.from(N.subarray(l >>> 0, (l >>> 0) + 2 >>> 0)), wIsConst: () => !!L[m >>> 0], outputPadding: n ? Array.from(N.subarray(n >>> 0, q >>> 0)) : [], outputShape: u ? Array.from(N.subarray(u >>> 0, w >>> 0)) : [], activation: T(f) });\n            },\n            937543: (a, b) => {\n              d.sa("GlobalAveragePool", a, { format: b ? "NHWC" : "NCHW" });\n            },\n            937634: (a, b, c, e, g, h, l, t, m, n, q, u, w, f, r, v) => {\n              d.sa("AveragePool", a, { format: v ? "NHWC" : "NCHW", auto_pad: b, ceil_mode: c, count_include_pad: e, storage_order: g, dilations: [h, l], kernel_shape: [t, m], pads: [n, q, u, w], strides: [f, r] });\n            },\n            937918: (a, b) => {\n              d.sa("GlobalAveragePool", a, { format: b ? "NHWC" : "NCHW" });\n            },\n            938009: (a, b, c, e, g, h, l, t, m, n, q, u, w, f, r, v) => {\n              d.sa("AveragePool", a, { format: v ? "NHWC" : "NCHW", auto_pad: b, ceil_mode: c, count_include_pad: e, storage_order: g, dilations: [h, l], kernel_shape: [t, m], pads: [n, q, u, w], strides: [f, r] });\n            },\n            938293: (a, b) => {\n              d.sa("GlobalMaxPool", a, { format: b ? "NHWC" : "NCHW" });\n            },\n            938380: (a, b, c, e, g, h, l, t, m, n, q, u, w, f, r, v) => {\n              d.sa("MaxPool", a, { format: v ? "NHWC" : "NCHW", auto_pad: b, ceil_mode: c, count_include_pad: e, storage_order: g, dilations: [h, l], kernel_shape: [t, m], pads: [n, q, u, w], strides: [f, r] });\n            },\n            938660: (a, b) => {\n              d.sa("GlobalMaxPool", a, { format: b ? "NHWC" : "NCHW" });\n            },\n            938747: (a, b, c, e, g, h, l, t, m, n, q, u, w, f, r, v) => {\n              d.sa("MaxPool", a, { format: v ? "NHWC" : "NCHW", auto_pad: b, ceil_mode: c, count_include_pad: e, storage_order: g, dilations: [h, l], kernel_shape: [t, m], pads: [n, q, u, w], strides: [f, r] });\n            },\n            939027: (a, b, c, e, g) => {\n              d.sa("Gemm", a, { alpha: b, beta: c, transA: e, transB: g });\n            },\n            939131: (a) => {\n              d.sa("MatMul", a, void 0);\n            },\n            939185: (a, b, c, e) => {\n              d.sa("ArgMax", a, { keepDims: !!b, selectLastIndex: !!c, axis: e });\n            },\n            939293: (a, b, c, e) => {\n              d.sa("ArgMin", a, {\n                keepDims: !!b,\n                selectLastIndex: !!c,\n                axis: e\n              });\n            },\n            939401: (a, b) => {\n              d.sa("Softmax", a, { axis: b });\n            },\n            939464: (a, b) => {\n              d.sa("Concat", a, { axis: b });\n            },\n            939524: (a, b, c, e, g) => {\n              d.sa("Split", a, { axis: b, numOutputs: c, splitSizes: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            939664: (a) => {\n              d.sa("Expand", a, void 0);\n            },\n            939718: (a, b) => {\n              d.sa("Gather", a, { axis: Number(b) });\n            },\n            939789: (a, b) => {\n              d.sa("GatherElements", a, { axis: Number(b) });\n            },\n            939868: (a, b, c, e, g, h, l, t, m, n, q) => {\n              d.sa("Resize", a, {\n                antialias: b,\n                axes: c ? Array.from(N.subarray(c >>> 0, e >>> 0)) : [],\n                coordinateTransformMode: T(g),\n                cubicCoeffA: h,\n                excludeOutside: l,\n                extrapolationValue: t,\n                keepAspectRatioPolicy: T(m),\n                mode: T(n),\n                nearestMode: T(q)\n              });\n            },\n            940214: (a, b, c, e, g, h, l) => {\n              d.sa("Slice", a, { starts: b ? Array.from(N.subarray(b >>> 0, c >>> 0)) : [], ends: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [], axes: h ? Array.from(N.subarray(h >>> 0, l >>> 0)) : [] });\n            },\n            940430: (a) => {\n              d.sa("Tile", a, void 0);\n            },\n            940482: (a, b, c) => {\n              d.sa("LayerNormalization", a, { axis: Number(b), epsilon: Number(c) });\n            },\n            940589: (a, b, c) => {\n              d.sa("InstanceNormalization", a, { epsilon: b, format: c ? "NHWC" : "NCHW" });\n            },\n            940703: (a, b, c) => {\n              d.sa("InstanceNormalization", a, { epsilon: b, format: c ? "NHWC" : "NCHW" });\n            },\n            940817: (a) => {\n              d.sa("Range", a, void 0);\n            },\n            940870: (a, b) => {\n              d.sa("Einsum", a, { equation: T(b) });\n            },\n            940951: (a, b, c, e, g) => {\n              d.sa("Pad", a, { mode: b, value: c, pads: e ? Array.from(N.subarray(e >>> 0, g >>> 0)) : [] });\n            },\n            941078: (a, b, c, e, g, h) => {\n              d.sa("BatchNormalization", a, { epsilon: b, momentum: c, spatial: !!g, trainingMode: !!e, format: h ? "NHWC" : "NCHW" });\n            },\n            941247: (a, b, c, e, g, h) => {\n              d.sa("BatchNormalization", a, { epsilon: b, momentum: c, spatial: !!g, trainingMode: !!e, format: h ? "NHWC" : "NCHW" });\n            },\n            941416: (a, b, c) => {\n              d.sa("CumSum", a, { exclusive: Number(b), reverse: Number(c) });\n            },\n            941513: (a, b, c, e, g, h, l, t, m) => {\n              d.sa("Attention", a, { numHeads: b, isUnidirectional: c, maskFilterValue: e, scale: g, doRotary: h, qkvHiddenSizes: l ? Array.from(N.subarray(Number(t) >>> 0, Number(t) + l >>> 0)) : [], pastPresentShareBuffer: !!m });\n            },\n            941785: (a) => {\n              d.sa("Gelu", a, void 0);\n            },\n            941837: (a, b, c, e, g, h) => {\n              d.sa("MultiHeadAttention", a, { numHeads: b, isUnidirectional: c, maskFilterValue: e, scale: g, doRotary: h });\n            },\n            941996: (a) => {\n              d.sa("BiasAdd", a, void 0);\n            },\n            942051: (a) => {\n              d.sa("BiasSplitGelu", a, void 0);\n            },\n            942112: (a, b) => {\n              d.sa("SkipLayerNormalization", a, { epsilon: b });\n            },\n            942193: (a, b, c, e, g, h, l, t, m, n, q, u, w) => {\n              d.sa("Conv", a, { format: m ? "NHWC" : "NCHW", auto_pad: b, dilations: [c], group: e, kernel_shape: [g], pads: h ? Array.from(N.subarray(h >>> 0, l >>> 0)) : [], strides: [t], w_is_const: () => !!L[n >>> 0], activation: T(q), activation_params: u ? Array.from(ia.subarray(u >>> 0, w >>> 0)) : [] });\n            },\n            942563: (a, b, c, e, g, h, l, t, m, n, q, u, w, f, r, v) => {\n              d.sa("Conv", a, { format: u ? "NHWC" : "NCHW", auto_pad: b, dilations: [c, e], group: g, kernel_shape: [\n                h,\n                l\n              ], pads: t ? Array.from(N.subarray(t >>> 0, m >>> 0)) : [], strides: [n, q], w_is_const: () => !!L[w >>> 0], activation: T(f), activation_params: r ? Array.from(ia.subarray(r >>> 0, v >>> 0)) : [] });\n            },\n            942954: (a) => {\n              d.Ta(a);\n            },\n            942988: (a, b) => d.Ua(a, b, d.Ea.Va, d.Ea.errors)\n          };\n          function wa(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          function xa(a) {\n            this.Ja = a - 24;\n            this.Oa = function(b) {\n              O[this.Ja + 4 >>> 2 >>> 0] = b;\n            };\n            this.Na = function(b) {\n              O[this.Ja + 8 >>> 2 >>> 0] = b;\n            };\n            this.$a = function(b, c) {\n              this.Ma();\n              this.Oa(b);\n              this.Na(c);\n            };\n            this.Ma = function() {\n              O[this.Ja + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var ya = 0, za = 0, Aa = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ba = (a, b, c) => {\n            b >>>= 0;\n            var e = b + c;\n            for (c = b; a[c] && !(c >= e); )\n              ++c;\n            if (16 < c - b && a.buffer && Aa)\n              return Aa.decode(a.subarray(b, c));\n            for (e = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  e += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var l = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | l : (g & 7) << 18 | h << 12 | l << 6 | a[b++] & 63;\n                  65536 > g ? e += String.fromCharCode(g) : (g -= 65536, e += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                e += String.fromCharCode(g);\n            }\n            return e;\n          }, T = (a, b) => (a >>>= 0) ? Ba(M, a, b) : "", Ca = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var e = a.charCodeAt(c);\n              127 >= e ? b++ : 2047 >= e ? b += 2 : 55296 <= e && 57343 >= e ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, Da = (a, b, c, e) => {\n            c >>>= 0;\n            if (!(0 < e))\n              return 0;\n            var g = c;\n            e = c + e - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var l = a.charCodeAt(h);\n              if (55296 <= l && 57343 >= l) {\n                var t = a.charCodeAt(++h);\n                l = 65536 + ((l & 1023) << 10) | t & 1023;\n              }\n              if (127 >= l) {\n                if (c >= e)\n                  break;\n                b[c++ >>> 0] = l;\n              } else {\n                if (2047 >= l) {\n                  if (c + 1 >= e)\n                    break;\n                  b[c++ >>> 0] = 192 | l >> 6;\n                } else {\n                  if (65535 >= l) {\n                    if (c + 2 >= e)\n                      break;\n                    b[c++ >>> 0] = 224 | l >> 12;\n                  } else {\n                    if (c + 3 >= e)\n                      break;\n                    b[c++ >>> 0] = 240 | l >> 18;\n                    b[c++ >>> 0] = 128 | l >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | l >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | l & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, U = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), Ea = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], Fa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ha = (a) => {\n            var b = Ca(a) + 1, c = Ga(b);\n            c && Da(a, M, c, b);\n            return c;\n          }, Ia = [], Ja = (a, b) => {\n            Ia.length = 0;\n            for (var c; c = M[a++ >>> 0]; ) {\n              var e = 105 != c;\n              e &= 112 != c;\n              b += e && b % 8 ? 4 : 0;\n              Ia.push(112 == c ? O[b >>> 2 >>> 0] : 105 == c ? N[b >>> 2 >>> 0] : ja[b >>> 3 >>> 0]);\n              b += e ? 8 : 4;\n            }\n            return Ia;\n          }, Ka = {}, Na = () => {\n            if (!Ma) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: da || "./this.program" }, b;\n              for (b in Ka)\n                void 0 === Ka[b] ? delete a[b] : a[b] = Ka[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Ma = c;\n            }\n            return Ma;\n          }, Ma, Oa = [null, [], []], Pa = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Qa = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ra(a) {\n            var b = Array(Ca(a) + 1);\n            Da(a, b, 0, b.length);\n            return b;\n          }\n          function Sa(a, b, c, e) {\n            function g(f, r, v) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < r; )\n                f = v[0] + f;\n              return f;\n            }\n            function h(f, r) {\n              return g(f, r, "0");\n            }\n            function l(f, r) {\n              function v(La) {\n                return 0 > La ? -1 : 0 < La ? 1 : 0;\n              }\n              var F;\n              0 === (F = v(f.getFullYear() - r.getFullYear())) && 0 === (F = v(f.getMonth() - r.getMonth())) && (F = v(f.getDate() - r.getDate()));\n              return F;\n            }\n            function t(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function m(f) {\n              var r = f.Ca;\n              for (f = new Date(new Date(f.Da + 1900, 0, 1).getTime()); 0 < r; ) {\n                var v = f.getMonth(), F = (U(f.getFullYear()) ? Pa : Qa)[v];\n                if (r > F - f.getDate())\n                  r -= F - f.getDate() + 1, f.setDate(1), 11 > v ? f.setMonth(v + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + r);\n                  break;\n                }\n              }\n              v = new Date(f.getFullYear() + 1, 0, 4);\n              r = t(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              v = t(v);\n              return 0 >= l(r, f) ? 0 >= l(v, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            var n = O[e + 40 >>> 2 >>> 0];\n            e = { Ya: N[e >>> 2 >>> 0], Xa: N[e + 4 >>> 2 >>> 0], Ga: N[e + 8 >>> 2 >>> 0], Ka: N[e + 12 >>> 2 >>> 0], Ha: N[e + 16 >>> 2 >>> 0], Da: N[e + 20 >>> 2 >>> 0], xa: N[e + 24 >>> 2 >>> 0], Ca: N[e + 28 >>> 2 >>> 0], bb: N[e + 32 >>> 2 >>> 0], Wa: N[e + 36 >>> 2 >>> 0], Za: n ? T(n) : "" };\n            c = T(c);\n            n = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var q in n)\n              c = c.replace(new RegExp(q, "g"), n[q]);\n            var u = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), w = "January February March April May June July August September October November December".split(" ");\n            n = { "%a": (f) => u[f.xa].substring(0, 3), "%A": (f) => u[f.xa], "%b": (f) => w[f.Ha].substring(0, 3), "%B": (f) => w[f.Ha], "%C": (f) => h((f.Da + 1900) / 100 | 0, 2), "%d": (f) => h(f.Ka, 2), "%e": (f) => g(f.Ka, 2, " "), "%g": (f) => m(f).toString().substring(2), "%G": (f) => m(f), "%H": (f) => h(f.Ga, 2), "%I": (f) => {\n              f = f.Ga;\n              0 == f ? f = 12 : 12 < f && (f -= 12);\n              return h(f, 2);\n            }, "%j": (f) => {\n              for (var r = 0, v = 0; v <= f.Ha - 1; r += (U(f.Da + 1900) ? Pa : Qa)[v++])\n                ;\n              return h(f.Ka + r, 3);\n            }, "%m": (f) => h(f.Ha + 1, 2), "%M": (f) => h(f.Xa, 2), "%n": () => "\\n", "%p": (f) => 0 <= f.Ga && 12 > f.Ga ? "AM" : "PM", "%S": (f) => h(f.Ya, 2), "%t": () => "\t", "%u": (f) => f.xa || 7, "%U": (f) => h(Math.floor((f.Ca + 7 - f.xa) / 7), 2), "%V": (f) => {\n              var r = Math.floor((f.Ca + 7 - (f.xa + 6) % 7) / 7);\n              2 >= (f.xa + 371 - f.Ca - 2) % 7 && r++;\n              if (r)\n                53 == r && (v = (f.xa + 371 - f.Ca) % 7, 4 == v || 3 == v && U(f.Da) || (r = 1));\n              else {\n                r = 52;\n                var v = (f.xa + 7 - f.Ca - 1) % 7;\n                (4 == v || 5 == v && U(f.Da % 400 - 1)) && r++;\n              }\n              return h(r, 2);\n            }, "%w": (f) => f.xa, "%W": (f) => h(Math.floor((f.Ca + 7 - (f.xa + 6) % 7) / 7), 2), "%y": (f) => (f.Da + 1900).toString().substring(2), "%Y": (f) => f.Da + 1900, "%z": (f) => {\n              f = f.Wa;\n              var r = 0 <= f;\n              f = Math.abs(f) / 60;\n              return (r ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n            }, "%Z": (f) => f.Za, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (q in n)\n              c.includes(q) && (c = c.replace(new RegExp(q, "g"), n[q](e)));\n            c = c.replace(/\\0\\0/g, "%");\n            q = Ra(c);\n            if (q.length > b)\n              return 0;\n            L.set(q, a >>> 0);\n            return q.length - 1;\n          }\n          var V = (a) => {\n            try {\n              a();\n            } catch (b) {\n              H(b);\n            }\n          };\n          function Ta() {\n            var a = W, b = {};\n            for (let [c, e] of Object.entries(a))\n              b[c] = "function" == typeof e ? function() {\n                X.push(c);\n                try {\n                  return e.apply(null, arguments);\n                } finally {\n                  J || (X.pop(), p && 1 === Y && 0 === X.length && (Y = 0, V(Ua), "undefined" != typeof Fibers && Fibers.cb()));\n                }\n              } : e;\n            return b;\n          }\n          var Y = 0, p = null, Va = 0, X = [], Wa = {}, Xa = {}, Ya = 0, Za = null, $a = [];\n          function ba() {\n            return new Promise((a, b) => {\n              Za = { resolve: a, reject: b };\n            });\n          }\n          function ab() {\n            var a = Ga(65548), b = a + 12;\n            O[a >>> 2 >>> 0] = b;\n            O[a + 4 >>> 2 >>> 0] = b + 65536;\n            b = X[0];\n            var c = Wa[b];\n            void 0 === c && (c = Ya++, Wa[b] = c, Xa[c] = b);\n            N[a + 8 >>> 2 >>> 0] = c;\n            return a;\n          }\n          function bb(a) {\n            if (!J) {\n              if (0 === Y) {\n                var b = false, c = false;\n                a((e = 0) => {\n                  if (!J && (Va = e, b = true, c)) {\n                    Y = 2;\n                    V(() => cb(p));\n                    "undefined" != typeof Browser && Browser.Ia.Pa && Browser.Ia.resume();\n                    e = false;\n                    try {\n                      var g = (0, W[Xa[N[p + 8 >>> 2 >>> 0]]])();\n                    } catch (t) {\n                      g = t, e = true;\n                    }\n                    var h = false;\n                    if (!p) {\n                      var l = Za;\n                      l && (Za = null, (e ? l.reject : l.resolve)(g), h = true);\n                    }\n                    if (e && !h)\n                      throw g;\n                  }\n                });\n                c = true;\n                b || (Y = 1, p = ab(), "undefined" != typeof Browser && Browser.Ia.Pa && Browser.Ia.pause(), V(() => db(p)));\n              } else\n                2 === Y ? (Y = 0, V(eb), fb(p), p = null, $a.forEach((e) => {\n                  if (!J)\n                    try {\n                      e();\n                      try {\n                        K = K = e = K, d.onExit?.(e), J = true, x(e, new wa(e));\n                      } catch (g) {\n                        g instanceof wa || "unwind" == g || x(1, g);\n                      }\n                    } catch (g) {\n                      g instanceof wa || "unwind" == g || x(1, g);\n                    }\n                })) : H(`invalid state: ${Y}`);\n              return Va;\n            }\n          }\n          function gb(a) {\n            return bb((b) => {\n              a().then(b);\n            });\n          }\n          var jb = { n: function(a, b, c) {\n            return gb(async () => {\n              await d.Ra(a, b, c);\n            });\n          }, a: function(a, b, c) {\n            a >>>= 0;\n            new xa(a).$a(b >>> 0, c >>> 0);\n            ya = a;\n            za++;\n            throw ya;\n          }, g: function() {\n            return 0;\n          }, J: function() {\n          }, A: function() {\n          }, C: function() {\n          }, L: function() {\n            return 0;\n          }, H: function() {\n          }, D: function() {\n          }, G: function() {\n          }, l: function() {\n          }, B: function() {\n          }, y: function() {\n          }, I: function() {\n          }, z: function() {\n          }, m: () => 1, q: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            N[c >>> 2 >>> 0] = a.getUTCSeconds();\n            N[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n            N[c + 8 >>> 2 >>> 0] = a.getUTCHours();\n            N[c + 12 >>> 2 >>> 0] = a.getUTCDate();\n            N[c + 16 >>> 2 >>> 0] = a.getUTCMonth();\n            N[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n            N[c + 24 >>> 2 >>> 0] = a.getUTCDay();\n            N[c + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n          }, r: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            N[c >>> 2 >>> 0] = a.getSeconds();\n            N[c + 4 >>> 2 >>> 0] = a.getMinutes();\n            N[c + 8 >>> 2 >>> 0] = a.getHours();\n            N[c + 12 >>> 2 >>> 0] = a.getDate();\n            N[c + 16 >>> 2 >>> 0] = a.getMonth();\n            N[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n            N[c + 24 >>> 2 >>> 0] = a.getDay();\n            N[c + 28 >>> 2 >>> 0] = (U(a.getFullYear()) ? Ea : Fa)[a.getMonth()] + a.getDate() - 1 | 0;\n            N[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n            var e = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n            N[c + 32 >>> 2 >>> 0] = (b != e && a.getTimezoneOffset() == Math.min(e, b)) | 0;\n          }, s: function(a) {\n            a >>>= 0;\n            var b = new Date(N[a + 20 >>> 2 >>> 0] + 1900, N[a + 16 >>> 2 >>> 0], N[a + 12 >>> 2 >>> 0], N[a + 8 >>> 2 >>> 0], N[a + 4 >>> 2 >>> 0], N[a >>> 2 >>> 0], 0), c = N[a + 32 >>> 2 >>> 0], e = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), l = Math.min(h, g);\n            0 > c ? N[a + 32 >>> 2 >>> 0] = Number(g != h && l == e) : 0 < c != (l == e) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? l : g) - e)));\n            N[a + 24 >>> 2 >>> 0] = b.getDay();\n            N[a + 28 >>> 2 >>> 0] = (U(b.getFullYear()) ? Ea : Fa)[b.getMonth()] + b.getDate() - 1 | 0;\n            N[a >>> 2 >>> 0] = b.getSeconds();\n            N[a + 4 >>> 2 >>> 0] = b.getMinutes();\n            N[a + 8 >>> 2 >>> 0] = b.getHours();\n            N[a + 12 >>> 2 >>> 0] = b.getDate();\n            N[a + 16 >>> 2 >>> 0] = b.getMonth();\n            N[a + 20 >>> 2 >>> 0] = b.getYear();\n            a = b.getTime();\n            isNaN(a) ? (N[hb() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;\n            return ib((S = a, 1 <= +Math.abs(S) ? 0 < S ? +Math.floor(S / 4294967296) >>> 0 : ~~+Math.ceil((S - +(~~S >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n          }, o: function() {\n            return -52;\n          }, p: function() {\n          }, w: function(a, b, c) {\n            function e(m) {\n              return (m = m.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? m[1] : "GMT";\n            }\n            c >>>= 0;\n            var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), l = new Date(g, 6, 1);\n            g = h.getTimezoneOffset();\n            var t = l.getTimezoneOffset();\n            O[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(g, t);\n            N[b >>> 0 >>> 2 >>> 0] = Number(g != t);\n            a = e(h);\n            b = e(l);\n            a = Ha(a);\n            b = Ha(b);\n            t < g ? (O[c >>> 2 >>> 0] = a, O[c + 4 >>> 2 >>> 0] = b) : (O[c >>> 2 >>> 0] = b, O[c + 4 >>> 2 >>> 0] = a);\n          }, e: () => {\n            H("");\n          }, b: function(a, b, c) {\n            a >>>= 0;\n            b = Ja(b >>> 0, c >>> 0);\n            return va[a].apply(null, b);\n          }, i: function(a, b, c) {\n            a >>>= 0;\n            b = Ja(b >>> 0, c >>> 0);\n            return va[a].apply(null, b);\n          }, h: () => Date.now(), x: function() {\n            return 4294901760;\n          }, c: () => performance.now(), K: function(a, b, c) {\n            b >>>= 0;\n            return M.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n          }, u: function(a) {\n            a >>>= 0;\n            var b = M.length;\n            if (4294901760 < a)\n              return false;\n            for (var c = 1; 4 >= c; c *= 2) {\n              var e = b * (1 + 0.2 / c);\n              e = Math.min(e, a + 100663296);\n              var g = Math;\n              e = Math.max(a, e);\n              a: {\n                g = (g.min.call(g, 4294901760, e + (65536 - e % 65536) % 65536) - I.buffer.byteLength + 65535) / 65536;\n                try {\n                  I.grow(g);\n                  ka();\n                  var h = 1;\n                  break a;\n                } catch (l) {\n                }\n                h = void 0;\n              }\n              if (h)\n                return true;\n            }\n            return false;\n          }, E: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Na().forEach((e, g) => {\n              var h = b + c;\n              g = O[a + 4 * g >>> 2 >>> 0] = h;\n              for (h = 0; h < e.length; ++h)\n                L[g++ >>> 0 >>> 0] = e.charCodeAt(h);\n              L[g >>> 0 >>> 0] = 0;\n              c += e.length + 1;\n            });\n            return 0;\n          }, F: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = Na();\n            O[a >>> 2 >>> 0] = c.length;\n            var e = 0;\n            c.forEach((g) => e += g.length + 1);\n            O[b >>> 2 >>> 0] = e;\n            return 0;\n          }, f: () => 52, k: function() {\n            return 52;\n          }, t: function() {\n            return 70;\n          }, j: function(a, b, c, e) {\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            for (var g = 0, h = 0; h < c; h++) {\n              var l = O[b >>> 2 >>> 0], t = O[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var m = 0; m < t; m++) {\n                var n = M[l + m >>> 0], q = Oa[a];\n                0 === n || 10 === n ? ((1 === a ? ha : G)(Ba(q, 0)), q.length = 0) : q.push(n);\n              }\n              g += t;\n            }\n            O[e >>> 2 >>> 0] = g;\n            return 0;\n          }, v: Sa, d: function(a, b, c, e) {\n            return Sa(a >>> 0, b >>> 0, c >>> 0, e >>> 0);\n          } }, W = function() {\n            function a(c) {\n              W = c.exports;\n              W = Ta();\n              W = kb();\n              I = W.M;\n              ka();\n              ma.unshift(W.N);\n              P--;\n              0 == P && (null !== oa && (clearInterval(oa), oa = null), Q && (c = Q, Q = null, c()));\n              return W;\n            }\n            var b = { a: jb };\n            P++;\n            if (d.instantiateWasm)\n              try {\n                return d.instantiateWasm(b, a);\n              } catch (c) {\n                G(`Module.instantiateWasm callback failed with error: ${c}`), k(c);\n              }\n            ua(b, function(c) {\n              a(c.instance);\n            }).catch(k);\n            return {};\n          }();\n          d._OrtInit = (a, b) => (d._OrtInit = W.O)(a, b);\n          d._OrtGetLastError = (a, b) => (d._OrtGetLastError = W.P)(a, b);\n          d._OrtCreateSessionOptions = (a, b, c, e, g, h, l, t, m, n) => (d._OrtCreateSessionOptions = W.Q)(a, b, c, e, g, h, l, t, m, n);\n          d._OrtAppendExecutionProvider = (a, b) => (d._OrtAppendExecutionProvider = W.R)(a, b);\n          d._OrtAddFreeDimensionOverride = (a, b, c) => (d._OrtAddFreeDimensionOverride = W.S)(a, b, c);\n          d._OrtAddSessionConfigEntry = (a, b, c) => (d._OrtAddSessionConfigEntry = W.T)(a, b, c);\n          d._OrtReleaseSessionOptions = (a) => (d._OrtReleaseSessionOptions = W.U)(a);\n          d._OrtCreateSession = (a, b, c) => (d._OrtCreateSession = W.V)(a, b, c);\n          d._OrtReleaseSession = (a) => (d._OrtReleaseSession = W.W)(a);\n          d._OrtGetInputOutputCount = (a, b, c) => (d._OrtGetInputOutputCount = W.X)(a, b, c);\n          d._OrtGetInputName = (a, b) => (d._OrtGetInputName = W.Y)(a, b);\n          d._OrtGetOutputName = (a, b) => (d._OrtGetOutputName = W.Z)(a, b);\n          d._OrtFree = (a) => (d._OrtFree = W._)(a);\n          d._OrtCreateTensor = (a, b, c, e, g, h) => (d._OrtCreateTensor = W.$)(a, b, c, e, g, h);\n          d._OrtGetTensorData = (a, b, c, e, g) => (d._OrtGetTensorData = W.aa)(a, b, c, e, g);\n          d._OrtReleaseTensor = (a) => (d._OrtReleaseTensor = W.ba)(a);\n          d._OrtCreateRunOptions = (a, b, c, e) => (d._OrtCreateRunOptions = W.ca)(a, b, c, e);\n          d._OrtAddRunConfigEntry = (a, b, c) => (d._OrtAddRunConfigEntry = W.da)(a, b, c);\n          d._OrtReleaseRunOptions = (a) => (d._OrtReleaseRunOptions = W.ea)(a);\n          d._OrtCreateBinding = (a) => (d._OrtCreateBinding = W.fa)(a);\n          d._OrtBindInput = (a, b, c) => (d._OrtBindInput = W.ga)(a, b, c);\n          d._OrtBindOutput = (a, b, c, e) => (d._OrtBindOutput = W.ha)(a, b, c, e);\n          d._OrtClearBoundOutputs = (a) => (d._OrtClearBoundOutputs = W.ia)(a);\n          d._OrtReleaseBinding = (a) => (d._OrtReleaseBinding = W.ja)(a);\n          d._OrtRunWithBinding = (a, b, c, e, g) => (d._OrtRunWithBinding = W.ka)(a, b, c, e, g);\n          d._OrtRun = (a, b, c, e, g, h, l, t) => (d._OrtRun = W.la)(a, b, c, e, g, h, l, t);\n          d._OrtEndProfiling = (a) => (d._OrtEndProfiling = W.ma)(a);\n          d._JsepOutput = (a, b, c) => (d._JsepOutput = W.na)(a, b, c);\n          d._JsepGetNodeName = (a) => (d._JsepGetNodeName = W.oa)(a);\n          var hb = () => (hb = W.pa)(), Ga = d._malloc = (a) => (Ga = d._malloc = W.qa)(a), fb = d._free = (a) => (fb = d._free = W.ra)(a), ib = (a) => (ib = W.ta)(a), lb = () => (lb = W.ua)(), mb = (a) => (mb = W.va)(a), nb = (a) => (nb = W.wa)(a), db = (a) => (db = W.ya)(a), Ua = () => (Ua = W.za)(), cb = (a) => (cb = W.Aa)(a), eb = () => (eb = W.Ba)();\n          d.___start_em_js = 943100;\n          d.___stop_em_js = 943261;\n          function kb() {\n            var a = W;\n            a = Object.assign({}, a);\n            var b = (e) => () => e() >>> 0, c = (e) => (g) => e(g) >>> 0;\n            a.pa = b(a.pa);\n            a.qa = c(a.qa);\n            a.ua = b(a.ua);\n            a.wa = c(a.wa);\n            return a;\n          }\n          d.stackAlloc = nb;\n          d.stackSave = lb;\n          d.stackRestore = mb;\n          d.UTF8ToString = T;\n          d.stringToUTF8 = (a, b, c) => Da(a, M, b, c);\n          d.lengthBytesUTF8 = Ca;\n          var Z;\n          Q = function ob() {\n            Z || pb();\n            Z || (Q = ob);\n          };\n          function pb() {\n            if (!(0 < P)) {\n              if (d.preRun)\n                for ("function" == typeof d.preRun && (d.preRun = [d.preRun]); d.preRun.length; ) {\n                  var a = d.preRun.shift();\n                  la.unshift(a);\n                }\n              for (; 0 < la.length; )\n                la.shift()(d);\n              if (!(0 < P || Z || (Z = true, d.calledRun = true, J))) {\n                for (; 0 < ma.length; )\n                  ma.shift()(d);\n                for (aa(d); 0 < na.length; )\n                  na.shift()(d);\n              }\n            }\n          }\n          pb();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-simd-threaded.jsep.js\n  var require_ort_wasm_simd_threaded_jsep = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-simd-threaded.jsep.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function d() {\n            l.buffer != m.buffer && u();\n            return m;\n          }\n          function v() {\n            l.buffer != m.buffer && u();\n            return aa;\n          }\n          function z() {\n            l.buffer != m.buffer && u();\n            return ba;\n          }\n          function A() {\n            l.buffer != m.buffer && u();\n            return ca;\n          }\n          function da() {\n            l.buffer != m.buffer && u();\n            return ea;\n          }\n          function fa() {\n            l.buffer != m.buffer && u();\n            return ha;\n          }\n          var B = moduleArg, ia, C;\n          B.ready = new Promise((a, b) => {\n            ia = a;\n            C = b;\n          });\n          "use strict";\n          B.mountExternalData = (a, b) => {\n            (B.cb || (B.cb = /* @__PURE__ */ new Map())).set(a, b);\n          };\n          B.unmountExternalData = () => {\n            delete B.cb;\n          };\n          B.jsepInit = (a, b, c, e, f, h, k, q) => {\n            B.Mb = a;\n            B.wb = b;\n            B.yb = c;\n            B.kb = e;\n            B.xb = f;\n            B.Ea = h;\n            B.zb = k;\n            B.Ab = q;\n            b = (n, p, r) => (...w) => {\n              const y = D, g = p?.();\n              w = n(...w);\n              const t = p?.();\n              g !== t && (n = t, r(g), p = r = null);\n              return D != y ? ja() : w;\n            };\n            c = (n) => async (...p) => {\n              try {\n                if (B.bb)\n                  throw Error("Session already started");\n                const r = B.bb = { Cb: p[0], errors: [] }, w = await n(...p);\n                if (B.bb !== r)\n                  throw Error("Session mismatch");\n                a.flush();\n                const y = r.errors;\n                if (0 < y.length) {\n                  let g = await Promise.all(y);\n                  g = g.filter((t) => t);\n                  if (0 < g.length)\n                    throw Error(g.join("\\n"));\n                }\n                return w;\n              } finally {\n                B.bb = null;\n              }\n            };\n            B._OrtRun = c(b(B._OrtRun, () => B._OrtRun, (n) => B._OrtRun = n));\n            B._OrtRunWithBinding = c(b(B._OrtRunWithBinding, () => B._OrtRunWithBinding, (n) => B._OrtRunWithBinding = n));\n            B._OrtBindInput = b(B._OrtBindInput, () => B._OrtBindInput, (n) => B._OrtBindInput = n);\n            B.jsepRegisterBuffer = (n, p, r, w) => a.registerBuffer(n, p, r, w);\n            B.jsepUnregisterBuffers = (n) => {\n              a.unregisterBuffers(n);\n            };\n            B.jsepGetBuffer = (n) => a.getBuffer(n);\n            B.jsepCreateDownloader = (n, p, r) => a.createDownloader(n, p, r);\n          };\n          var ka = Object.assign({}, B), la = "./this.program", ma = (a, b) => {\n            throw b;\n          }, na = "object" == typeof window, E = "function" == typeof importScripts, F = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, G = B.ENVIRONMENT_IS_PTHREAD || false, H = "";\n          function oa(a) {\n            return B.locateFile ? B.locateFile(a, H) : H + a;\n          }\n          var pa, I, J;\n          if (F) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), qa = (init_path(), __toCommonJS(path_exports));\n            H = E ? qa.dirname(H) + "/" : __dirname + "/";\n            pa = (b, c) => {\n              b = ra(b) ? new URL(b) : qa.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            J = (b) => {\n              b = pa(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            I = (b, c, e, f = true) => {\n              b = ra(b) ? new URL(b) : qa.normalize(b);\n              fs.readFile(b, f ? void 0 : "utf8", (h, k) => {\n                h ? e(h) : c(f ? k.buffer : k);\n              });\n            };\n            !B.thisProgram && 1 < process.argv.length && (la = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            ma = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            B.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (na || E)\n            E ? H = self.location.href : "undefined" != typeof document && document.currentScript && (H = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (H = _scriptDir), 0 !== H.indexOf("blob:") ? H = H.substr(0, H.replace(/[?#].*/, "").lastIndexOf("/") + 1) : H = "", F || (pa = (a) => {\n              var b = new XMLHttpRequest();\n              b.open(\n                "GET",\n                a,\n                false\n              );\n              b.send(null);\n              return b.responseText;\n            }, E && (J = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), I = (a, b, c) => {\n              var e = new XMLHttpRequest();\n              e.open("GET", a, true);\n              e.responseType = "arraybuffer";\n              e.onload = () => {\n                200 == e.status || 0 == e.status && e.response ? b(e.response) : c();\n              };\n              e.onerror = c;\n              e.send(null);\n            });\n          F && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var sa = console.log.bind(console), ta = console.error.bind(console);\n          F && (sa = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), ta = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var ua = sa, K = ta;\n          Object.assign(B, ka);\n          ka = null;\n          "object" != typeof WebAssembly && L("no native wasm support detected");\n          var l, va, M = false, O, m, aa, ba, ca, ea, ha;\n          function u() {\n            var a = l.buffer;\n            B.HEAP8 = m = new Int8Array(a);\n            B.HEAP16 = new Int16Array(a);\n            B.HEAPU8 = aa = new Uint8Array(a);\n            B.HEAPU16 = new Uint16Array(a);\n            B.HEAP32 = ba = new Int32Array(a);\n            B.HEAPU32 = ca = new Uint32Array(a);\n            B.HEAPF32 = ea = new Float32Array(a);\n            B.HEAPF64 = ha = new Float64Array(a);\n          }\n          var wa = 16777216;\n          if (G)\n            l = B.wasmMemory;\n          else if (B.wasmMemory)\n            l = B.wasmMemory;\n          else if (l = new WebAssembly.Memory({ initial: wa / 65536, maximum: 65536, shared: true }), !(l.buffer instanceof SharedArrayBuffer))\n            throw K("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), F && K("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          u();\n          wa = l.buffer.byteLength;\n          var xa = [], ya = [], za = [], P = 0, Aa = null, Q = null;\n          function Ba() {\n            P--;\n            if (0 == P && (null !== Aa && (clearInterval(Aa), Aa = null), Q)) {\n              var a = Q;\n              Q = null;\n              a();\n            }\n          }\n          function L(a) {\n            a = "Aborted(" + a + ")";\n            K(a);\n            M = true;\n            O = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            C(a);\n            throw a;\n          }\n          var Ca = (a) => a.startsWith("data:application/octet-stream;base64,"), ra = (a) => a.startsWith("file://"), R;\n          R = "ort-wasm-simd-threaded.wasm";\n          Ca(R) || (R = oa(R));\n          function Da(a) {\n            if (J)\n              return J(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function Ea(a) {\n            if (na || E) {\n              if ("function" == typeof fetch && !ra(a))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Da(a));\n              if (I)\n                return new Promise((b, c) => {\n                  I(a, (e) => b(new Uint8Array(e)), c);\n                });\n            }\n            return Promise.resolve().then(() => Da(a));\n          }\n          function Fa(a, b, c) {\n            return Ea(a).then((e) => WebAssembly.instantiate(e, b)).then((e) => e).then(c, (e) => {\n              K(`failed to asynchronously prepare wasm: ${e}`);\n              L(e);\n            });\n          }\n          function Ga(a, b) {\n            var c = R;\n            return "function" != typeof WebAssembly.instantiateStreaming || Ca(c) || ra(c) || F || "function" != typeof fetch ? Fa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((e) => WebAssembly.instantiateStreaming(e, a).then(b, function(f) {\n              K(`wasm streaming compile failed: ${f}`);\n              K("falling back to ArrayBuffer instantiation");\n              return Fa(c, a, b);\n            }));\n          }\n          var S, Ha = {\n            932428: (a, b, c, e) => {\n              if ("undefined" == typeof B || !B.cb)\n                return 1;\n              a = T(a >>> 0);\n              a.startsWith("./") && (a = a.substring(2));\n              a = B.cb.get(a);\n              if (!a)\n                return 2;\n              b >>>= 0;\n              c >>>= 0;\n              e >>>= 0;\n              if (b + c > a.byteLength)\n                return 3;\n              try {\n                return v().set(a.subarray(b, b + c), e >>> 0), 0;\n              } catch {\n                return 4;\n              }\n            },\n            932929: (a) => B.wb(a),\n            932962: (a) => B.yb(a),\n            932994: (a, b, c) => {\n              B.kb(a, b, c, true);\n            },\n            933033: (a, b, c) => {\n              B.kb(a, b, c);\n            },\n            933066: (a) => {\n              B.Ea("Abs", a, void 0);\n            },\n            933117: (a) => {\n              B.Ea("Neg", a, void 0);\n            },\n            933168: (a) => {\n              B.Ea("Floor", a, void 0);\n            },\n            933221: (a) => {\n              B.Ea("Ceil", a, void 0);\n            },\n            933273: (a) => {\n              B.Ea("Reciprocal", a, void 0);\n            },\n            933331: (a) => {\n              B.Ea("Sqrt", a, void 0);\n            },\n            933383: (a) => {\n              B.Ea("Exp", a, void 0);\n            },\n            933434: (a) => {\n              B.Ea("Erf", a, void 0);\n            },\n            933485: (a) => {\n              B.Ea("Sigmoid", a, void 0);\n            },\n            933540: (a) => {\n              B.Ea("Log", a, void 0);\n            },\n            933591: (a) => {\n              B.Ea("Sin", a, void 0);\n            },\n            933642: (a) => {\n              B.Ea("Cos", a, void 0);\n            },\n            933693: (a) => {\n              B.Ea("Tan", a, void 0);\n            },\n            933744: (a) => {\n              B.Ea("Asin", a, void 0);\n            },\n            933796: (a) => {\n              B.Ea("Acos", a, void 0);\n            },\n            933848: (a) => {\n              B.Ea("Atan", a, void 0);\n            },\n            933900: (a) => {\n              B.Ea("Sinh", a, void 0);\n            },\n            933952: (a) => {\n              B.Ea("Cosh", a, void 0);\n            },\n            934004: (a) => {\n              B.Ea("Asinh", a, void 0);\n            },\n            934057: (a) => {\n              B.Ea("Acosh", a, void 0);\n            },\n            934110: (a) => {\n              B.Ea("Atanh", a, void 0);\n            },\n            934163: (a) => {\n              B.Ea("Tanh", a, void 0);\n            },\n            934215: (a) => {\n              B.Ea("Not", a, void 0);\n            },\n            934266: (a, b, c) => {\n              B.Ea("Clip", a, { min: b, max: c });\n            },\n            934335: (a) => {\n              B.Ea("Clip", a, void 0);\n            },\n            934387: (a, b) => {\n              B.Ea("Elu", a, { alpha: b });\n            },\n            934445: (a) => {\n              B.Ea("Relu", a, void 0);\n            },\n            934497: (a, b) => {\n              B.Ea("LeakyRelu", a, { alpha: b });\n            },\n            934561: (a, b) => {\n              B.Ea("ThresholdedRelu", a, { alpha: b });\n            },\n            934631: (a, b) => {\n              B.Ea("Cast", a, { to: b });\n            },\n            934689: (a) => {\n              B.Ea("Add", a, void 0);\n            },\n            934740: (a) => {\n              B.Ea("Sub", a, void 0);\n            },\n            934791: (a) => {\n              B.Ea("Mul", a, void 0);\n            },\n            934842: (a) => {\n              B.Ea("Div", a, void 0);\n            },\n            934893: (a) => {\n              B.Ea("Pow", a, void 0);\n            },\n            934944: (a) => {\n              B.Ea("Equal", a, void 0);\n            },\n            934997: (a) => {\n              B.Ea("Greater", a, void 0);\n            },\n            935052: (a) => {\n              B.Ea("GreaterOrEqual", a, void 0);\n            },\n            935114: (a) => {\n              B.Ea("Less", a, void 0);\n            },\n            935166: (a) => {\n              B.Ea("LessOrEqual", a, void 0);\n            },\n            935225: (a, b, c, e, f) => {\n              B.Ea("ReduceMean", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            935384: (a, b, c, e, f) => {\n              B.Ea("ReduceMax", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            935542: (a, b, c, e, f) => {\n              B.Ea("ReduceMin", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            935700: (a, b, c, e, f) => {\n              B.Ea("ReduceProd", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            935859: (a, b, c, e, f) => {\n              B.Ea("ReduceSum", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            936017: (a, b, c, e, f) => {\n              B.Ea("ReduceL1", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            936174: (a, b, c, e, f) => {\n              B.Ea("ReduceL2", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            936331: (a, b, c, e, f) => {\n              B.Ea("ReduceLogSum", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            936492: (a, b, c, e, f) => {\n              B.Ea("ReduceSumSquare", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            936656: (a, b, c, e, f) => {\n              B.Ea("ReduceLogSumExp", a, { keepDims: !!b, noopWithEmptyAxes: !!c, axes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            936820: (a) => {\n              B.Ea("Where", a, void 0);\n            },\n            936873: (a, b, c) => {\n              B.Ea("Transpose", a, { perm: b ? Array.from(z().subarray(b >>> 0, c >>> 0)) : [] });\n            },\n            936981: (a, b, c, e, f, h, k, q, n, p, r, w, y, g, t) => {\n              B.Ea("ConvTranspose", a, { format: n ? "NHWC" : "NCHW", autoPad: b, dilations: [c], group: e, kernel_shape: [f], pads: [h, k], strides: [q], wIsConst: () => !!d()[p >>> 0], outputPadding: r ? Array.from(z().subarray(r >>> 0, w >>> 0)) : [], outputShape: y ? Array.from(z().subarray(y >>> 0, g >>> 0)) : [], activation: T(t) });\n            },\n            937383: (a, b, c, e, f, h, k, q, n, p, r, w, y, g) => {\n              B.Ea(\n                "ConvTranspose",\n                a,\n                { format: q ? "NHWC" : "NCHW", autoPad: b, dilations: Array.from(z().subarray(c >>> 0, (c >>> 0) + 2 >>> 0)), group: e, kernelShape: Array.from(z().subarray(f >>> 0, (f >>> 0) + 2 >>> 0)), pads: Array.from(z().subarray(h >>> 0, (h >>> 0) + 4 >>> 0)), strides: Array.from(z().subarray(k >>> 0, (k >>> 0) + 2 >>> 0)), wIsConst: () => !!d()[n >>> 0], outputPadding: p ? Array.from(z().subarray(p >>> 0, r >>> 0)) : [], outputShape: w ? Array.from(z().subarray(w >>> 0, y >>> 0)) : [], activation: T(g) }\n              );\n            },\n            937948: (a, b, c, e, f, h, k, q, n, p, r, w, y, g, t) => {\n              B.Ea("ConvTranspose", a, { format: n ? "NHWC" : "NCHW", autoPad: b, dilations: [c], group: e, kernel_shape: [f], pads: [h, k], strides: [q], wIsConst: () => !!d()[p >>> 0], outputPadding: r ? Array.from(z().subarray(r >>> 0, w >>> 0)) : [], outputShape: y ? Array.from(z().subarray(y >>> 0, g >>> 0)) : [], activation: T(t) });\n            },\n            938350: (a, b, c, e, f, h, k, q, n, p, r, w, y, g) => {\n              B.Ea("ConvTranspose", a, { format: q ? "NHWC" : "NCHW", autoPad: b, dilations: Array.from(z().subarray(c >>> 0, (c >>> 0) + 2 >>> 0)), group: e, kernelShape: Array.from(z().subarray(f >>> 0, (f >>> 0) + 2 >>> 0)), pads: Array.from(z().subarray(h >>> 0, (h >>> 0) + 4 >>> 0)), strides: Array.from(z().subarray(k >>> 0, (k >>> 0) + 2 >>> 0)), wIsConst: () => !!d()[n >>> 0], outputPadding: p ? Array.from(z().subarray(p >>> 0, r >>> 0)) : [], outputShape: w ? Array.from(z().subarray(w >>> 0, y >>> 0)) : [], activation: T(g) });\n            },\n            938915: (a, b) => {\n              B.Ea("GlobalAveragePool", a, { format: b ? "NHWC" : "NCHW" });\n            },\n            939006: (a, b, c, e, f, h, k, q, n, p, r, w, y, g, t, x) => {\n              B.Ea("AveragePool", a, { format: x ? "NHWC" : "NCHW", auto_pad: b, ceil_mode: c, count_include_pad: e, storage_order: f, dilations: [h, k], kernel_shape: [q, n], pads: [p, r, w, y], strides: [g, t] });\n            },\n            939290: (a, b) => {\n              B.Ea("GlobalAveragePool", a, { format: b ? "NHWC" : "NCHW" });\n            },\n            939381: (a, b, c, e, f, h, k, q, n, p, r, w, y, g, t, x) => {\n              B.Ea("AveragePool", a, { format: x ? "NHWC" : "NCHW", auto_pad: b, ceil_mode: c, count_include_pad: e, storage_order: f, dilations: [h, k], kernel_shape: [q, n], pads: [p, r, w, y], strides: [g, t] });\n            },\n            939665: (a, b) => {\n              B.Ea("GlobalMaxPool", a, { format: b ? "NHWC" : "NCHW" });\n            },\n            939752: (a, b, c, e, f, h, k, q, n, p, r, w, y, g, t, x) => {\n              B.Ea("MaxPool", a, { format: x ? "NHWC" : "NCHW", auto_pad: b, ceil_mode: c, count_include_pad: e, storage_order: f, dilations: [h, k], kernel_shape: [\n                q,\n                n\n              ], pads: [p, r, w, y], strides: [g, t] });\n            },\n            940032: (a, b) => {\n              B.Ea("GlobalMaxPool", a, { format: b ? "NHWC" : "NCHW" });\n            },\n            940119: (a, b, c, e, f, h, k, q, n, p, r, w, y, g, t, x) => {\n              B.Ea("MaxPool", a, { format: x ? "NHWC" : "NCHW", auto_pad: b, ceil_mode: c, count_include_pad: e, storage_order: f, dilations: [h, k], kernel_shape: [q, n], pads: [p, r, w, y], strides: [g, t] });\n            },\n            940399: (a, b, c, e, f) => {\n              B.Ea("Gemm", a, { alpha: b, beta: c, transA: e, transB: f });\n            },\n            940503: (a) => {\n              B.Ea("MatMul", a, void 0);\n            },\n            940557: (a, b, c, e) => {\n              B.Ea("ArgMax", a, { keepDims: !!b, selectLastIndex: !!c, axis: e });\n            },\n            940665: (a, b, c, e) => {\n              B.Ea("ArgMin", a, { keepDims: !!b, selectLastIndex: !!c, axis: e });\n            },\n            940773: (a, b) => {\n              B.Ea("Softmax", a, { axis: b });\n            },\n            940836: (a, b) => {\n              B.Ea("Concat", a, { axis: b });\n            },\n            940896: (a, b, c, e, f) => {\n              B.Ea("Split", a, { axis: b, numOutputs: c, splitSizes: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            941036: (a) => {\n              B.Ea("Expand", a, void 0);\n            },\n            941090: (a, b) => {\n              B.Ea("Gather", a, { axis: Number(b) });\n            },\n            941161: (a, b) => {\n              B.Ea("GatherElements", a, { axis: Number(b) });\n            },\n            941240: (a, b, c, e, f, h, k, q, n, p, r) => {\n              B.Ea("Resize", a, { antialias: b, axes: c ? Array.from(z().subarray(c >>> 0, e >>> 0)) : [], coordinateTransformMode: T(f), cubicCoeffA: h, excludeOutside: k, extrapolationValue: q, keepAspectRatioPolicy: T(n), mode: T(p), nearestMode: T(r) });\n            },\n            941586: (a, b, c, e, f, h, k) => {\n              B.Ea("Slice", a, { starts: b ? Array.from(z().subarray(b >>> 0, c >>> 0)) : [], ends: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [], axes: h ? Array.from(z().subarray(h >>> 0, k >>> 0)) : [] });\n            },\n            941802: (a) => {\n              B.Ea("Tile", a, void 0);\n            },\n            941854: (a, b, c) => {\n              B.Ea("LayerNormalization", a, { axis: Number(b), epsilon: Number(c) });\n            },\n            941961: (a, b, c) => {\n              B.Ea(\n                "InstanceNormalization",\n                a,\n                { epsilon: b, format: c ? "NHWC" : "NCHW" }\n              );\n            },\n            942075: (a, b, c) => {\n              B.Ea("InstanceNormalization", a, { epsilon: b, format: c ? "NHWC" : "NCHW" });\n            },\n            942189: (a) => {\n              B.Ea("Range", a, void 0);\n            },\n            942242: (a, b) => {\n              B.Ea("Einsum", a, { equation: T(b) });\n            },\n            942323: (a, b, c, e, f) => {\n              B.Ea("Pad", a, { mode: b, value: c, pads: e ? Array.from(z().subarray(e >>> 0, f >>> 0)) : [] });\n            },\n            942450: (a, b, c, e, f, h) => {\n              B.Ea("BatchNormalization", a, { epsilon: b, momentum: c, spatial: !!f, trainingMode: !!e, format: h ? "NHWC" : "NCHW" });\n            },\n            942619: (a, b, c, e, f, h) => {\n              B.Ea("BatchNormalization", a, {\n                epsilon: b,\n                momentum: c,\n                spatial: !!f,\n                trainingMode: !!e,\n                format: h ? "NHWC" : "NCHW"\n              });\n            },\n            942788: (a, b, c) => {\n              B.Ea("CumSum", a, { exclusive: Number(b), reverse: Number(c) });\n            },\n            942885: (a, b, c, e, f, h, k, q, n) => {\n              B.Ea("Attention", a, { numHeads: b, isUnidirectional: c, maskFilterValue: e, scale: f, doRotary: h, qkvHiddenSizes: k ? Array.from(z().subarray(Number(q) >>> 0, Number(q) + k >>> 0)) : [], pastPresentShareBuffer: !!n });\n            },\n            943157: (a) => {\n              B.Ea("Gelu", a, void 0);\n            },\n            943209: (a, b, c, e, f, h) => {\n              B.Ea("MultiHeadAttention", a, { numHeads: b, isUnidirectional: c, maskFilterValue: e, scale: f, doRotary: h });\n            },\n            943368: (a) => {\n              B.Ea("BiasAdd", a, void 0);\n            },\n            943423: (a) => {\n              B.Ea("BiasSplitGelu", a, void 0);\n            },\n            943484: (a, b) => {\n              B.Ea("SkipLayerNormalization", a, { epsilon: b });\n            },\n            943565: (a, b, c, e, f, h, k, q, n, p, r, w, y) => {\n              B.Ea("Conv", a, { format: n ? "NHWC" : "NCHW", auto_pad: b, dilations: [c], group: e, kernel_shape: [f], pads: h ? Array.from(z().subarray(h >>> 0, k >>> 0)) : [], strides: [q], w_is_const: () => !!d()[p >>> 0], activation: T(r), activation_params: w ? Array.from(da().subarray(w >>> 0, y >>> 0)) : [] });\n            },\n            943935: (a, b, c, e, f, h, k, q, n, p, r, w, y, g, t, x) => {\n              B.Ea("Conv", a, { format: w ? "NHWC" : "NCHW", auto_pad: b, dilations: [c, e], group: f, kernel_shape: [h, k], pads: q ? Array.from(z().subarray(q >>> 0, n >>> 0)) : [], strides: [p, r], w_is_const: () => !!d()[y >>> 0], activation: T(g), activation_params: t ? Array.from(da().subarray(t >>> 0, x >>> 0)) : [] });\n            },\n            944326: (a) => {\n              B.zb(a);\n            },\n            944360: (a, b) => B.Ab(a, b, B.bb.Cb, B.bb.errors)\n          };\n          function Ia(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          var Ja = (a) => {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }, La = (a) => {\n            0 == U.Ya.length && (Ka(), U.lb(U.Ya[0]));\n            var b = U.Ya.pop();\n            if (!b)\n              return 6;\n            U.Za.push(b);\n            U.Qa[a.Xa] = b;\n            b.Xa = a.Xa;\n            var c = { cmd: "run", start_routine: a.Db, arg: a.tb, pthread_ptr: a.Xa };\n            F && b.unref();\n            b.postMessage(c, a.Jb);\n            return 0;\n          }, V = 0, Ma = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Na = (a, b, c) => {\n            b >>>= 0;\n            var e = b + c;\n            for (c = b; a[c] && !(c >= e); )\n              ++c;\n            if (16 < c - b && a.buffer && Ma)\n              return Ma.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (e = ""; b < c; ) {\n              var f = a[b++];\n              if (f & 128) {\n                var h = a[b++] & 63;\n                if (192 == (f & 224))\n                  e += String.fromCharCode((f & 31) << 6 | h);\n                else {\n                  var k = a[b++] & 63;\n                  f = 224 == (f & 240) ? (f & 15) << 12 | h << 6 | k : (f & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;\n                  65536 > f ? e += String.fromCharCode(f) : (f -= 65536, e += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));\n                }\n              } else\n                e += String.fromCharCode(f);\n            }\n            return e;\n          }, T = (a, b) => (a >>>= 0) ? Na(v(), a, b) : "", Qa = (a) => {\n            var b = Oa();\n            a = a();\n            Pa(b);\n            return a;\n          };\n          function W(a, b) {\n            var c = arguments.length - 2, e = arguments;\n            return Qa(() => {\n              for (var f = Ra(8 * c), h = f >>> 3, k = 0; k < c; k++) {\n                var q = e[2 + k];\n                fa()[h + k >>> 0] = q;\n              }\n              return Sa(a, c, f, b);\n            });\n          }\n          function Ta(a) {\n            if (G)\n              return W(0, 1, a);\n            O = a;\n            0 < V || (U.Eb(), B.onExit?.(a), M = true);\n            ma(a, new Ia(a));\n          }\n          var Va = (a) => {\n            O = a;\n            if (G)\n              throw Ua(a), "unwind";\n            Ta(a);\n          }, Wa = (a) => {\n            a instanceof Ia || "unwind" == a || ma(1, a);\n          };\n          function Xa() {\n            for (var a = B.numThreads; a--; )\n              Ka();\n            xa.unshift(() => {\n              P++;\n              Ya(() => Ba());\n            });\n          }\n          function Ka() {\n            var a = oa("ort-wasm-simd-threaded.worker.js");\n            a = new Worker(a);\n            U.Ya.push(a);\n          }\n          function Ya(a) {\n            G ? a() : Promise.all(U.Ya.map(U.lb)).then(a);\n          }\n          var U = { Ya: [], Za: [], pb: [], Qa: {}, hb() {\n            G ? (U.receiveObjectTransfer = U.Bb, U.threadInitTLS = U.ob, U.setExitStatus = U.nb) : Xa();\n          }, nb: (a) => O = a, Nb: ["$terminateWorker"], Eb: () => {\n            for (var a of U.Za)\n              Ja(a);\n            for (a of U.Ya)\n              Ja(a);\n            U.Ya = [];\n            U.Za = [];\n            U.Qa = [];\n          }, mb: (a) => {\n            var b = a.Xa;\n            delete U.Qa[b];\n            U.Ya.push(a);\n            U.Za.splice(U.Za.indexOf(a), 1);\n            a.Xa = 0;\n            Za(b);\n          }, Bb() {\n          }, ob() {\n            U.pb.forEach((a) => a());\n          }, lb: (a) => new Promise((b) => {\n            a.onmessage = (h) => {\n              h = h.data;\n              var k = h.cmd;\n              if (h.targetThread && h.targetThread != $a()) {\n                var q = U.Qa[h.targetThread];\n                q ? q.postMessage(h, h.transferList) : K(`Internal error! Worker sent a message "${k}" to target pthread ${h.targetThread}, but that thread no longer exists!`);\n              } else if ("checkMailbox" === k)\n                ab();\n              else if ("spawnThread" === k)\n                La(h);\n              else if ("cleanupThread" === k)\n                U.mb(U.Qa[h.thread]);\n              else if ("killThread" === k)\n                h = h.thread, k = U.Qa[h], delete U.Qa[h], Ja(k), Za(h), U.Za.splice(U.Za.indexOf(k), 1), k.Xa = 0;\n              else if ("cancelThread" === k)\n                U.Qa[h.thread].postMessage({ cmd: "cancel" });\n              else if ("loaded" === k)\n                a.loaded = true, F && !a.Xa && a.unref(), b(a);\n              else if ("alert" === k)\n                alert(`Thread ${h.threadId}: ${h.text}`);\n              else if ("setimmediate" === h.target)\n                a.postMessage(h);\n              else if ("callHandler" === k)\n                B[h.handler](...h.args);\n              else\n                k && K(`worker sent an unknown command ${k}`);\n            };\n            a.onerror = (h) => {\n              K(`${"worker sent an error!"} ${h.filename}:${h.lineno}: ${h.message}`);\n              throw h;\n            };\n            F && (a.on("message", (h) => a.onmessage({ data: h })), a.on("error", (h) => a.onerror(h)));\n            var c = [], e = ["onExit"], f;\n            for (f of e)\n              B.hasOwnProperty(f) && c.push(f);\n            a.postMessage({ cmd: "load", handlers: c, urlOrBlob: B.mainScriptUrlOrBlob || _scriptDir, wasmMemory: l, wasmModule: va });\n          }) };\n          B.PThread = U;\n          var bb = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(B);\n          };\n          B.establishStackSpace = () => {\n            var a = $a(), b = A()[a + 52 >>> 2 >>> 0];\n            a = A()[a + 56 >>> 2 >>> 0];\n            cb(b, b - a);\n            Pa(b);\n          };\n          function Ua(a) {\n            if (G)\n              return W(1, 0, a);\n            Va(a);\n          }\n          B.invokeEntryPoint = (a, b) => {\n            a = db.apply(null, [a, b]);\n            0 < V ? U.nb(a) : eb(a);\n          };\n          function fb(a) {\n            this.gb = a - 24;\n            this.sb = function(b) {\n              A()[this.gb + 4 >>> 2 >>> 0] = b;\n            };\n            this.rb = function(b) {\n              A()[this.gb + 8 >>> 2 >>> 0] = b;\n            };\n            this.hb = function(b, c) {\n              this.qb();\n              this.sb(b);\n              this.rb(c);\n            };\n            this.qb = function() {\n              A()[this.gb + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var gb = 0, hb = 0;\n          function ib(a, b, c, e) {\n            return G ? W(2, 1, a, b, c, e) : jb(a, b, c, e);\n          }\n          function jb(a, b, c, e) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return K("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var f = [];\n            if (G && 0 === f.length)\n              return ib(a, b, c, e);\n            a = { Db: c, Xa: a, tb: e, Jb: f };\n            return G ? (a.Lb = "spawnThread", postMessage(a, f), 0) : La(a);\n          }\n          function kb(a, b, c) {\n            return G ? W(3, 1, a, b, c) : 0;\n          }\n          function lb(a, b) {\n            if (G)\n              return W(4, 1, a, b);\n          }\n          var mb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var e = a.charCodeAt(c);\n              127 >= e ? b++ : 2047 >= e ? b += 2 : 55296 <= e && 57343 >= e ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, nb = (a, b, c, e) => {\n            c >>>= 0;\n            if (!(0 < e))\n              return 0;\n            var f = c;\n            e = c + e - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var k = a.charCodeAt(h);\n              if (55296 <= k && 57343 >= k) {\n                var q = a.charCodeAt(++h);\n                k = 65536 + ((k & 1023) << 10) | q & 1023;\n              }\n              if (127 >= k) {\n                if (c >= e)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= e)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= e)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= e)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - f;\n          }, ob = (a, b, c) => nb(a, v(), b, c);\n          function pb(a, b) {\n            if (G)\n              return W(5, 1, a, b);\n          }\n          function qb(a, b, c) {\n            if (G)\n              return W(6, 1, a, b, c);\n          }\n          function rb(a, b, c) {\n            return G ? W(7, 1, a, b, c) : 0;\n          }\n          function sb(a, b) {\n            if (G)\n              return W(8, 1, a, b);\n          }\n          function tb(a, b, c) {\n            if (G)\n              return W(9, 1, a, b, c);\n          }\n          function ub(a, b, c, e) {\n            if (G)\n              return W(10, 1, a, b, c, e);\n          }\n          function vb(a, b, c, e) {\n            if (G)\n              return W(11, 1, a, b, c, e);\n          }\n          function wb(a, b, c, e) {\n            if (G)\n              return W(12, 1, a, b, c, e);\n          }\n          function xb(a) {\n            if (G)\n              return W(13, 1, a);\n          }\n          function yb(a, b) {\n            if (G)\n              return W(14, 1, a, b);\n          }\n          function zb(a, b, c) {\n            if (G)\n              return W(15, 1, a, b, c);\n          }\n          var Ab = () => {\n            if (!(0 < V))\n              try {\n                G ? eb(O) : Va(O);\n              } catch (a) {\n                Wa(a);\n              }\n          };\n          function Bb(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.Kb && (Atomics.Kb(z(), a >>> 2, a).value.then(ab), a += 128, Atomics.store(z(), a >>> 2, 1));\n          }\n          B.__emscripten_thread_mailbox_await = Bb;\n          var ab = () => {\n            var a = $a();\n            if (a && (Bb(a), !M))\n              try {\n                Cb(), Ab();\n              } catch (b) {\n                Wa(b);\n              }\n          };\n          B.checkMailbox = ab;\n          var Db = [], X = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), Eb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], Fb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function Gb(a, b, c, e, f, h, k, q) {\n            return G ? W(16, 1, a, b, c, e, f, h, k, q) : -52;\n          }\n          function Hb(a, b, c, e, f, h, k) {\n            if (G)\n              return W(17, 1, a, b, c, e, f, h, k);\n          }\n          var Jb = (a) => {\n            var b = mb(a) + 1, c = Ib(b);\n            c && ob(a, c, b);\n            return c;\n          }, Kb = [], Lb = (a, b) => {\n            Kb.length = 0;\n            for (var c; c = v()[a++ >>> 0]; ) {\n              var e = 105 != c;\n              e &= 112 != c;\n              b += e && b % 8 ? 4 : 0;\n              Kb.push(112 == c ? A()[b >>> 2 >>> 0] : 105 == c ? z()[b >>> 2 >>> 0] : fa()[b >>> 3 >>> 0]);\n              b += e ? 8 : 4;\n            }\n            return Kb;\n          }, Mb = {}, Ob = () => {\n            if (!Nb) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: la || "./this.program" }, b;\n              for (b in Mb)\n                void 0 === Mb[b] ? delete a[b] : a[b] = Mb[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Nb = c;\n            }\n            return Nb;\n          }, Nb;\n          function Pb(a, b) {\n            if (G)\n              return W(18, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Ob().forEach((e, f) => {\n              var h = b + c;\n              f = A()[a + 4 * f >>> 2 >>> 0] = h;\n              for (h = 0; h < e.length; ++h)\n                d()[f++ >>> 0 >>> 0] = e.charCodeAt(h);\n              d()[f >>> 0 >>> 0] = 0;\n              c += e.length + 1;\n            });\n            return 0;\n          }\n          function Qb(a, b) {\n            if (G)\n              return W(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = Ob();\n            A()[a >>> 2 >>> 0] = c.length;\n            var e = 0;\n            c.forEach((f) => e += f.length + 1);\n            A()[b >>> 2 >>> 0] = e;\n            return 0;\n          }\n          function Rb(a) {\n            return G ? W(20, 1, a) : 52;\n          }\n          function Tb(a, b, c, e) {\n            return G ? W(21, 1, a, b, c, e) : 52;\n          }\n          function Ub(a, b, c, e, f) {\n            return G ? W(22, 1, a, b, c, e, f) : 70;\n          }\n          var Vb = [null, [], []];\n          function Wb(a, b, c, e) {\n            if (G)\n              return W(23, 1, a, b, c, e);\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            for (var f = 0, h = 0; h < c; h++) {\n              var k = A()[b >>> 2 >>> 0], q = A()[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var n = 0; n < q; n++) {\n                var p = v()[k + n >>> 0], r = Vb[a];\n                0 === p || 10 === p ? ((1 === a ? ua : K)(Na(r, 0)), r.length = 0) : r.push(p);\n              }\n              f += q;\n            }\n            A()[e >>> 2 >>> 0] = f;\n            return 0;\n          }\n          var Xb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Yb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Zb(a) {\n            var b = Array(mb(a) + 1);\n            nb(a, b, 0, b.length);\n            return b;\n          }\n          var $b = (a, b) => {\n            d().set(a, b >>> 0);\n          };\n          function ac(a, b, c, e) {\n            function f(g, t, x) {\n              for (g = "number" == typeof g ? g.toString() : g || ""; g.length < t; )\n                g = x[0] + g;\n              return g;\n            }\n            function h(g, t) {\n              return f(g, t, "0");\n            }\n            function k(g, t) {\n              function x(Sb) {\n                return 0 > Sb ? -1 : 0 < Sb ? 1 : 0;\n              }\n              var N;\n              0 === (N = x(g.getFullYear() - t.getFullYear())) && 0 === (N = x(g.getMonth() - t.getMonth())) && (N = x(g.getDate() - t.getDate()));\n              return N;\n            }\n            function q(g) {\n              switch (g.getDay()) {\n                case 0:\n                  return new Date(g.getFullYear() - 1, 11, 29);\n                case 1:\n                  return g;\n                case 2:\n                  return new Date(g.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    g.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(g.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(g.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(g.getFullYear() - 1, 11, 30);\n              }\n            }\n            function n(g) {\n              var t = g.$a;\n              for (g = new Date(new Date(g.ab + 1900, 0, 1).getTime()); 0 < t; ) {\n                var x = g.getMonth(), N = (X(g.getFullYear()) ? Xb : Yb)[x];\n                if (t > N - g.getDate())\n                  t -= N - g.getDate() + 1, g.setDate(1), 11 > x ? g.setMonth(x + 1) : (g.setMonth(0), g.setFullYear(g.getFullYear() + 1));\n                else {\n                  g.setDate(g.getDate() + t);\n                  break;\n                }\n              }\n              x = new Date(g.getFullYear() + 1, 0, 4);\n              t = q(new Date(\n                g.getFullYear(),\n                0,\n                4\n              ));\n              x = q(x);\n              return 0 >= k(t, g) ? 0 >= k(x, g) ? g.getFullYear() + 1 : g.getFullYear() : g.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            e >>>= 0;\n            var p = A()[e + 40 >>> 2 >>> 0];\n            e = { Hb: z()[e >>> 2 >>> 0], Gb: z()[e + 4 >>> 2 >>> 0], eb: z()[e + 8 >>> 2 >>> 0], jb: z()[e + 12 >>> 2 >>> 0], fb: z()[e + 16 >>> 2 >>> 0], ab: z()[e + 20 >>> 2 >>> 0], Wa: z()[e + 24 >>> 2 >>> 0], $a: z()[e + 28 >>> 2 >>> 0], Ob: z()[e + 32 >>> 2 >>> 0], Fb: z()[e + 36 >>> 2 >>> 0], Ib: p ? T(p) : "" };\n            c = T(c);\n            p = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var r in p)\n              c = c.replace(new RegExp(r, "g"), p[r]);\n            var w = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), y = "January February March April May June July August September October November December".split(" ");\n            p = { "%a": (g) => w[g.Wa].substring(0, 3), "%A": (g) => w[g.Wa], "%b": (g) => y[g.fb].substring(0, 3), "%B": (g) => y[g.fb], "%C": (g) => h((g.ab + 1900) / 100 | 0, 2), "%d": (g) => h(g.jb, 2), "%e": (g) => f(g.jb, 2, " "), "%g": (g) => n(g).toString().substring(2), "%G": (g) => n(g), "%H": (g) => h(g.eb, 2), "%I": (g) => {\n              g = g.eb;\n              0 == g ? g = 12 : 12 < g && (g -= 12);\n              return h(g, 2);\n            }, "%j": (g) => {\n              for (var t = 0, x = 0; x <= g.fb - 1; t += (X(g.ab + 1900) ? Xb : Yb)[x++])\n                ;\n              return h(g.jb + t, 3);\n            }, "%m": (g) => h(g.fb + 1, 2), "%M": (g) => h(g.Gb, 2), "%n": () => "\\n", "%p": (g) => 0 <= g.eb && 12 > g.eb ? "AM" : "PM", "%S": (g) => h(g.Hb, 2), "%t": () => "\t", "%u": (g) => g.Wa || 7, "%U": (g) => h(Math.floor((g.$a + 7 - g.Wa) / 7), 2), "%V": (g) => {\n              var t = Math.floor((g.$a + 7 - (g.Wa + 6) % 7) / 7);\n              2 >= (g.Wa + 371 - g.$a - 2) % 7 && t++;\n              if (t)\n                53 == t && (x = (g.Wa + 371 - g.$a) % 7, 4 == x || 3 == x && X(g.ab) || (t = 1));\n              else {\n                t = 52;\n                var x = (g.Wa + 7 - g.$a - 1) % 7;\n                (4 == x || 5 == x && X(g.ab % 400 - 1)) && t++;\n              }\n              return h(t, 2);\n            }, "%w": (g) => g.Wa, "%W": (g) => h(Math.floor((g.$a + 7 - (g.Wa + 6) % 7) / 7), 2), "%y": (g) => (g.ab + 1900).toString().substring(2), "%Y": (g) => g.ab + 1900, "%z": (g) => {\n              g = g.Fb;\n              var t = 0 <= g;\n              g = Math.abs(g) / 60;\n              return (t ? "+" : "-") + String("0000" + (g / 60 * 100 + g % 60)).slice(-4);\n            }, "%Z": (g) => g.Ib, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (r in p)\n              c.includes(r) && (c = c.replace(new RegExp(r, "g"), p[r](e)));\n            c = c.replace(/\\0\\0/g, "%");\n            r = Zb(c);\n            if (r.length > b)\n              return 0;\n            $b(r, a);\n            return r.length - 1;\n          }\n          var bc = (a) => {\n            try {\n              a();\n            } catch (b) {\n              L(b);\n            }\n          };\n          function cc() {\n            var a = Y, b = {};\n            for (let [c, e] of Object.entries(a))\n              b[c] = "function" == typeof e ? function() {\n                dc.push(c);\n                try {\n                  return e.apply(null, arguments);\n                } finally {\n                  M || (dc.pop(), D && 1 === Z && 0 === dc.length && (Z = 0, V += 1, bc(ec), "undefined" != typeof Fibers && Fibers.Pb()));\n                }\n              } : e;\n            return b;\n          }\n          var Z = 0, D = null, fc = 0, dc = [], gc = {}, hc = {}, ic = 0, jc = null, kc = [];\n          function ja() {\n            return new Promise((a, b) => {\n              jc = { resolve: a, reject: b };\n            });\n          }\n          function lc() {\n            var a = Ib(65548), b = a + 12;\n            A()[a >>> 2 >>> 0] = b;\n            A()[a + 4 >>> 2 >>> 0] = b + 65536;\n            b = dc[0];\n            var c = gc[b];\n            void 0 === c && (c = ic++, gc[b] = c, hc[c] = b);\n            b = c;\n            z()[a + 8 >>> 2 >>> 0] = b;\n            return a;\n          }\n          function mc() {\n            var a = z()[D + 8 >>> 2 >>> 0];\n            a = Y[hc[a]];\n            --V;\n            return a();\n          }\n          function nc(a) {\n            if (!M) {\n              if (0 === Z) {\n                var b = false, c = false;\n                a((e = 0) => {\n                  if (!M && (fc = e, b = true, c)) {\n                    Z = 2;\n                    bc(() => oc(D));\n                    "undefined" != typeof Browser && Browser.ib.vb && Browser.ib.resume();\n                    e = false;\n                    try {\n                      var f = mc();\n                    } catch (q) {\n                      f = q, e = true;\n                    }\n                    var h = false;\n                    if (!D) {\n                      var k = jc;\n                      k && (jc = null, (e ? k.reject : k.resolve)(f), h = true);\n                    }\n                    if (e && !h)\n                      throw f;\n                  }\n                });\n                c = true;\n                b || (Z = 1, D = lc(), "undefined" != typeof Browser && Browser.ib.vb && Browser.ib.pause(), bc(() => pc(D)));\n              } else\n                2 === Z ? (Z = 0, bc(qc), rc(D), D = null, kc.forEach((e) => {\n                  if (!M)\n                    try {\n                      e(), Ab();\n                    } catch (f) {\n                      Wa(f);\n                    }\n                })) : L(`invalid state: ${Z}`);\n              return fc;\n            }\n          }\n          function sc(a) {\n            return nc((b) => {\n              a().then(b);\n            });\n          }\n          U.hb();\n          var tc = [Ta, Ua, ib, kb, lb, pb, qb, rb, sb, tb, ub, vb, wb, xb, yb, zb, Gb, Hb, Pb, Qb, Rb, Tb, Ub, Wb], xc = { r: function(a, b, c) {\n            return sc(async () => {\n              await B.xb(a, b, c);\n            });\n          }, b: function(a, b, c) {\n            a >>>= 0;\n            new fb(a).hb(b >>> 0, c >>> 0);\n            gb = a;\n            hb++;\n            throw gb;\n          }, N: function(a) {\n            uc(a >>> 0, !E, 1, !na, 131072, false);\n            U.ob();\n          }, l: function(a) {\n            a >>>= 0;\n            G ? postMessage({ cmd: "cleanupThread", thread: a }) : U.mb(U.Qa[a]);\n          }, J: jb, i: kb, T: lb, F: pb, H: qb, U: rb, R: sb, L: tb, Q: ub, p: vb, G: wb, D: xb, S: yb, E: zb, q: () => 1, B: function(a, b) {\n            a >>>= 0;\n            a == b >>> 0 ? setTimeout(() => ab()) : G ? postMessage({\n              targetThread: a,\n              cmd: "checkMailbox"\n            }) : (a = U.Qa[a]) && a.postMessage({ cmd: "checkMailbox" });\n          }, K: function(a, b, c, e) {\n            b >>>= 0;\n            Db.length = c;\n            e = e >>> 0 >>> 3;\n            for (var f = 0; f < c; f++)\n              Db[f] = fa()[e + f >>> 0];\n            a = 0 > a ? Ha[-a - 1] : tc[a];\n            U.ub = b;\n            b = a.apply(null, Db);\n            U.ub = 0;\n            return b;\n          }, M: Bb, W: function(a) {\n            F && U.Qa[a >>> 0].ref();\n          }, u: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            z()[c >>> 2 >>> 0] = a.getUTCSeconds();\n            z()[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n            z()[c + 8 >>> 2 >>> 0] = a.getUTCHours();\n            z()[c + 12 >>> 2 >>> 0] = a.getUTCDate();\n            z()[c + 16 >>> 2 >>> 0] = a.getUTCMonth();\n            z()[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n            z()[c + 24 >>> 2 >>> 0] = a.getUTCDay();\n            a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n            z()[c + 28 >>> 2 >>> 0] = a;\n          }, v: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            z()[c >>> 2 >>> 0] = a.getSeconds();\n            z()[c + 4 >>> 2 >>> 0] = a.getMinutes();\n            z()[c + 8 >>> 2 >>> 0] = a.getHours();\n            z()[c + 12 >>> 2 >>> 0] = a.getDate();\n            z()[c + 16 >>> 2 >>> 0] = a.getMonth();\n            z()[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n            z()[c + 24 >>> 2 >>> 0] = a.getDay();\n            b = (X(a.getFullYear()) ? Eb : Fb)[a.getMonth()] + a.getDate() - 1 | 0;\n            z()[c + 28 >>> 2 >>> 0] = b;\n            z()[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n            var e = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n            a = (b != e && a.getTimezoneOffset() == Math.min(e, b)) | 0;\n            z()[c + 32 >>> 2 >>> 0] = a;\n          }, w: function(a) {\n            a >>>= 0;\n            var b = new Date(z()[a + 20 >>> 2 >>> 0] + 1900, z()[a + 16 >>> 2 >>> 0], z()[a + 12 >>> 2 >>> 0], z()[a + 8 >>> 2 >>> 0], z()[a + 4 >>> 2 >>> 0], z()[a >>> 2 >>> 0], 0), c = z()[a + 32 >>> 2 >>> 0], e = b.getTimezoneOffset(), f = new Date(\n              b.getFullYear(),\n              6,\n              1\n            ).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(h, f);\n            0 > c ? z()[a + 32 >>> 2 >>> 0] = Number(f != h && k == e) : 0 < c != (k == e) && (f = Math.max(h, f), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : f) - e)));\n            z()[a + 24 >>> 2 >>> 0] = b.getDay();\n            c = (X(b.getFullYear()) ? Eb : Fb)[b.getMonth()] + b.getDate() - 1 | 0;\n            z()[a + 28 >>> 2 >>> 0] = c;\n            z()[a >>> 2 >>> 0] = b.getSeconds();\n            z()[a + 4 >>> 2 >>> 0] = b.getMinutes();\n            z()[a + 8 >>> 2 >>> 0] = b.getHours();\n            z()[a + 12 >>> 2 >>> 0] = b.getDate();\n            z()[a + 16 >>> 2 >>> 0] = b.getMonth();\n            z()[a + 20 >>> 2 >>> 0] = b.getYear();\n            a = b.getTime();\n            isNaN(a) ? (z()[vc() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;\n            return wc((S = a, 1 <= +Math.abs(S) ? 0 < S ? +Math.floor(S / 4294967296) >>> 0 : ~~+Math.ceil((S - +(~~S >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n          }, s: Gb, t: Hb, A: function(a, b, c) {\n            function e(p) {\n              return (p = p.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? p[1] : "GMT";\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            var f = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(f, 0, 1), k = new Date(f, 6, 1);\n            f = h.getTimezoneOffset();\n            var q = k.getTimezoneOffset(), n = Math.max(f, q);\n            A()[a >>> 2 >>> 0] = 60 * n;\n            z()[b >>> 2 >>> 0] = Number(f != q);\n            a = e(h);\n            b = e(k);\n            a = Jb(a);\n            b = Jb(b);\n            q < f ? (A()[c >>> 2 >>> 0] = a, A()[c + 4 >>> 2 >>> 0] = b) : (A()[c >>> 2 >>> 0] = b, A()[c + 4 >>> 2 >>> 0] = a);\n          }, d: () => {\n            L("");\n          }, c: function(a, b, c) {\n            a >>>= 0;\n            b = Lb(b >>> 0, c >>> 0);\n            return Ha[a].apply(null, b);\n          }, k: function(a, b, c) {\n            a >>>= 0;\n            b = Lb(b >>> 0, c >>> 0);\n            return Ha[a].apply(null, b);\n          }, m: () => {\n          }, j: () => Date.now(), V: () => {\n            V += 1;\n            throw "unwind";\n          }, C: function() {\n            return 4294901760;\n          }, f: () => performance.timeOrigin + performance.now(), g: () => F ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency, y: function(a) {\n            a >>>= 0;\n            var b = v().length;\n            if (a <= b || 4294901760 < a)\n              return false;\n            for (var c = 1; 4 >= c; c *= 2) {\n              var e = b * (1 + 0.2 / c);\n              e = Math.min(e, a + 100663296);\n              var f = Math;\n              e = Math.max(a, e);\n              a: {\n                f = (f.min.call(f, 4294901760, e + (65536 - e % 65536) % 65536) - l.buffer.byteLength + 65535) / 65536;\n                try {\n                  l.grow(f);\n                  u();\n                  var h = 1;\n                  break a;\n                } catch (k) {\n                }\n                h = void 0;\n              }\n              if (h)\n                return true;\n            }\n            return false;\n          }, O: Pb, P: Qb, I: Va, h: Rb, o: Tb, x: Ub, n: Wb, a: l || B.wasmMemory, z: ac, e: function(a, b, c, e) {\n            return ac(a >>> 0, b >>> 0, c >>> 0, e >>> 0);\n          } }, Y = function() {\n            function a(c, e) {\n              Y = c.exports;\n              Y = cc();\n              Y = yc();\n              U.pb.push(Y.Da);\n              ya.unshift(Y.X);\n              va = e;\n              Ba();\n              return Y;\n            }\n            var b = { a: xc };\n            P++;\n            if (B.instantiateWasm)\n              try {\n                return B.instantiateWasm(b, a);\n              } catch (c) {\n                K(`Module.instantiateWasm callback failed with error: ${c}`), C(c);\n              }\n            Ga(b, function(c) {\n              a(c.instance, c.module);\n            }).catch(C);\n            return {};\n          }();\n          B._OrtInit = (a, b) => (B._OrtInit = Y.Y)(a, b);\n          B._OrtGetLastError = (a, b) => (B._OrtGetLastError = Y.Z)(a, b);\n          B._OrtCreateSessionOptions = (a, b, c, e, f, h, k, q, n, p) => (B._OrtCreateSessionOptions = Y._)(a, b, c, e, f, h, k, q, n, p);\n          B._OrtAppendExecutionProvider = (a, b) => (B._OrtAppendExecutionProvider = Y.$)(a, b);\n          B._OrtAddFreeDimensionOverride = (a, b, c) => (B._OrtAddFreeDimensionOverride = Y.aa)(a, b, c);\n          B._OrtAddSessionConfigEntry = (a, b, c) => (B._OrtAddSessionConfigEntry = Y.ba)(a, b, c);\n          B._OrtReleaseSessionOptions = (a) => (B._OrtReleaseSessionOptions = Y.ca)(a);\n          B._OrtCreateSession = (a, b, c) => (B._OrtCreateSession = Y.da)(a, b, c);\n          B._OrtReleaseSession = (a) => (B._OrtReleaseSession = Y.ea)(a);\n          B._OrtGetInputOutputCount = (a, b, c) => (B._OrtGetInputOutputCount = Y.fa)(a, b, c);\n          B._OrtGetInputName = (a, b) => (B._OrtGetInputName = Y.ga)(a, b);\n          B._OrtGetOutputName = (a, b) => (B._OrtGetOutputName = Y.ha)(a, b);\n          B._OrtFree = (a) => (B._OrtFree = Y.ia)(a);\n          B._OrtCreateTensor = (a, b, c, e, f, h) => (B._OrtCreateTensor = Y.ja)(a, b, c, e, f, h);\n          B._OrtGetTensorData = (a, b, c, e, f) => (B._OrtGetTensorData = Y.ka)(a, b, c, e, f);\n          B._OrtReleaseTensor = (a) => (B._OrtReleaseTensor = Y.la)(a);\n          B._OrtCreateRunOptions = (a, b, c, e) => (B._OrtCreateRunOptions = Y.ma)(a, b, c, e);\n          B._OrtAddRunConfigEntry = (a, b, c) => (B._OrtAddRunConfigEntry = Y.na)(a, b, c);\n          B._OrtReleaseRunOptions = (a) => (B._OrtReleaseRunOptions = Y.oa)(a);\n          B._OrtCreateBinding = (a) => (B._OrtCreateBinding = Y.pa)(a);\n          B._OrtBindInput = (a, b, c) => (B._OrtBindInput = Y.qa)(a, b, c);\n          B._OrtBindOutput = (a, b, c, e) => (B._OrtBindOutput = Y.ra)(a, b, c, e);\n          B._OrtClearBoundOutputs = (a) => (B._OrtClearBoundOutputs = Y.sa)(a);\n          B._OrtReleaseBinding = (a) => (B._OrtReleaseBinding = Y.ta)(a);\n          B._OrtRunWithBinding = (a, b, c, e, f) => (B._OrtRunWithBinding = Y.ua)(a, b, c, e, f);\n          B._OrtRun = (a, b, c, e, f, h, k, q) => (B._OrtRun = Y.va)(a, b, c, e, f, h, k, q);\n          B._OrtEndProfiling = (a) => (B._OrtEndProfiling = Y.wa)(a);\n          B._JsepOutput = (a, b, c) => (B._JsepOutput = Y.xa)(a, b, c);\n          B._JsepGetNodeName = (a) => (B._JsepGetNodeName = Y.ya)(a);\n          var vc = () => (vc = Y.za)(), $a = B._pthread_self = () => ($a = B._pthread_self = Y.Aa)(), Ib = B._malloc = (a) => (Ib = B._malloc = Y.Ba)(a), rc = B._free = (a) => (rc = B._free = Y.Ca)(a);\n          B.__emscripten_tls_init = () => (B.__emscripten_tls_init = Y.Da)();\n          var uc = B.__emscripten_thread_init = (a, b, c, e, f, h) => (uc = B.__emscripten_thread_init = Y.Fa)(a, b, c, e, f, h);\n          B.__emscripten_thread_crashed = () => (B.__emscripten_thread_crashed = Y.Ga)();\n          var Sa = (a, b, c, e) => (Sa = Y.Ha)(a, b, c, e), Za = (a) => (Za = Y.Ia)(a), eb = B.__emscripten_thread_exit = (a) => (eb = B.__emscripten_thread_exit = Y.Ja)(a), Cb = () => (Cb = Y.Ka)(), wc = (a) => (wc = Y.La)(a), cb = (a, b) => (cb = Y.Ma)(a, b), Oa = () => (Oa = Y.Na)(), Pa = (a) => (Pa = Y.Oa)(a), Ra = (a) => (Ra = Y.Pa)(a), db = B.dynCall_ii = (a, b) => (db = B.dynCall_ii = Y.Ra)(a, b), pc = (a) => (pc = Y.Sa)(a), ec = () => (ec = Y.Ta)(), oc = (a) => (oc = Y.Ua)(a), qc = () => (qc = Y.Va)();\n          B.___start_em_js = 944472;\n          B.___stop_em_js = 944633;\n          function yc() {\n            var a = Y;\n            a = Object.assign({}, a);\n            var b = (e) => () => e() >>> 0, c = (e) => (f) => e(f) >>> 0;\n            a.za = b(a.za);\n            a.Aa = b(a.Aa);\n            a.Ba = c(a.Ba);\n            a.emscripten_main_runtime_thread_id = b(a.emscripten_main_runtime_thread_id);\n            a.Na = b(a.Na);\n            a.Pa = c(a.Pa);\n            return a;\n          }\n          B.wasmMemory = l;\n          B.stackAlloc = Ra;\n          B.stackSave = Oa;\n          B.stackRestore = Pa;\n          B.keepRuntimeAlive = () => 0 < V;\n          B.UTF8ToString = T;\n          B.stringToUTF8 = ob;\n          B.lengthBytesUTF8 = mb;\n          B.ExitStatus = Ia;\n          B.PThread = U;\n          var zc;\n          Q = function Ac() {\n            zc || Bc();\n            zc || (Q = Ac);\n          };\n          function Bc() {\n            if (!(0 < P))\n              if (G)\n                ia(B), G || bb(ya), startWorker(B);\n              else {\n                if (B.preRun)\n                  for ("function" == typeof B.preRun && (B.preRun = [B.preRun]); B.preRun.length; )\n                    xa.unshift(B.preRun.shift());\n                bb(xa);\n                0 < P || zc || (zc = true, B.calledRun = true, M || (G || bb(ya), ia(B), G || bb(za)));\n              }\n          }\n          Bc();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");var vm=require("vm");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,"utf8"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module["__emscripten_thread_crashed"]?.();throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;\n  var init_wasm_common = __esm({\n    "web/lib/wasm/wasm-common.ts"() {\n      "use strict";\n      tensorDataTypeStringToEnum = (type) => {\n        switch (type) {\n          case "int8":\n            return 3 /* int8 */;\n          case "uint8":\n            return 2 /* uint8 */;\n          case "bool":\n            return 9 /* bool */;\n          case "int16":\n            return 5 /* int16 */;\n          case "uint16":\n            return 4 /* uint16 */;\n          case "int32":\n            return 6 /* int32 */;\n          case "uint32":\n            return 12 /* uint32 */;\n          case "float16":\n            return 10 /* float16 */;\n          case "float32":\n            return 1 /* float */;\n          case "float64":\n            return 11 /* double */;\n          case "string":\n            return 8 /* string */;\n          case "int64":\n            return 7 /* int64 */;\n          case "uint64":\n            return 13 /* uint64 */;\n          default:\n            throw new Error(`unsupported data type: ${type}`);\n        }\n      };\n      tensorDataTypeEnumToString = (typeProto) => {\n        switch (typeProto) {\n          case 3 /* int8 */:\n            return "int8";\n          case 2 /* uint8 */:\n            return "uint8";\n          case 9 /* bool */:\n            return "bool";\n          case 5 /* int16 */:\n            return "int16";\n          case 4 /* uint16 */:\n            return "uint16";\n          case 6 /* int32 */:\n            return "int32";\n          case 12 /* uint32 */:\n            return "uint32";\n          case 10 /* float16 */:\n            return "float16";\n          case 1 /* float */:\n            return "float32";\n          case 11 /* double */:\n            return "float64";\n          case 8 /* string */:\n            return "string";\n          case 7 /* int64 */:\n            return "int64";\n          case 13 /* uint64 */:\n            return "uint64";\n          default:\n            throw new Error(`unsupported data type: ${typeProto}`);\n        }\n      };\n      getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n      tensorTypeToTypedArrayConstructor = (type) => {\n        switch (type) {\n          case "float16":\n            return Uint16Array;\n          case "float32":\n            return Float32Array;\n          case "uint8":\n            return Uint8Array;\n          case "int8":\n            return Int8Array;\n          case "uint16":\n            return Uint16Array;\n          case "int16":\n            return Int16Array;\n          case "int32":\n            return Int32Array;\n          case "bool":\n            return Uint8Array;\n          case "float64":\n            return Float64Array;\n          case "uint32":\n            return Uint32Array;\n          case "int64":\n            return BigInt64Array;\n          case "uint64":\n            return BigUint64Array;\n          default:\n            throw new Error(`unsupported type: ${type}`);\n        }\n      };\n      logLevelStringToEnum = (logLevel) => {\n        switch (logLevel) {\n          case "verbose":\n            return 0;\n          case "info":\n            return 1;\n          case "warning":\n            return 2;\n          case "error":\n            return 3;\n          case "fatal":\n            return 4;\n          default:\n            throw new Error(`unsupported logging level: ${logLevel}`);\n        }\n      };\n      isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n      dataLocationStringToEnum = (location) => {\n        switch (location) {\n          case "none":\n            return 0;\n          case "cpu":\n            return 1;\n          case "cpu-pinned":\n            return 2;\n          case "texture":\n            return 3;\n          case "gpu-buffer":\n            return 4;\n          default:\n            throw new Error(`unsupported data location: ${location}`);\n        }\n      };\n    }\n  });\n\n  // common/dist/esm/backend-impl.js\n  var init_backend_impl = __esm({\n    "common/dist/esm/backend-impl.js"() {\n      "use strict";\n    }\n  });\n\n  // common/dist/esm/backend.js\n  var init_backend = __esm({\n    "common/dist/esm/backend.js"() {\n      "use strict";\n      init_backend_impl();\n    }\n  });\n\n  // common/dist/esm/version.js\n  var version;\n  var init_version = __esm({\n    "common/dist/esm/version.js"() {\n      "use strict";\n      version = "1.17.1";\n    }\n  });\n\n  // common/dist/esm/env-impl.js\n  var logLevelValue, env;\n  var init_env_impl = __esm({\n    "common/dist/esm/env-impl.js"() {\n      "use strict";\n      init_version();\n      logLevelValue = "warning";\n      env = {\n        wasm: {},\n        webgl: {},\n        webgpu: {},\n        versions: { common: version },\n        set logLevel(value) {\n          if (value === void 0) {\n            return;\n          }\n          if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n          }\n          logLevelValue = value;\n        },\n        get logLevel() {\n          return logLevelValue;\n        }\n      };\n      Object.defineProperty(env, "logLevel", { enumerable: true });\n    }\n  });\n\n  // common/dist/esm/env.js\n  var env2;\n  var init_env = __esm({\n    "common/dist/esm/env.js"() {\n      "use strict";\n      init_env_impl();\n      env2 = env;\n    }\n  });\n\n  // common/dist/esm/tensor-conversion-impl.js\n  var init_tensor_conversion_impl = __esm({\n    "common/dist/esm/tensor-conversion-impl.js"() {\n      "use strict";\n    }\n  });\n\n  // common/dist/esm/tensor-factory-impl.js\n  var init_tensor_factory_impl = __esm({\n    "common/dist/esm/tensor-factory-impl.js"() {\n      "use strict";\n      init_tensor_impl();\n    }\n  });\n\n  // common/dist/esm/tensor-impl-type-mapping.js\n  var init_tensor_impl_type_mapping = __esm({\n    "common/dist/esm/tensor-impl-type-mapping.js"() {\n      "use strict";\n    }\n  });\n\n  // common/dist/esm/tensor-utils-impl.js\n  var init_tensor_utils_impl = __esm({\n    "common/dist/esm/tensor-utils-impl.js"() {\n      "use strict";\n      init_tensor_impl();\n    }\n  });\n\n  // common/dist/esm/tensor-impl.js\n  var init_tensor_impl = __esm({\n    "common/dist/esm/tensor-impl.js"() {\n      "use strict";\n      init_tensor_conversion_impl();\n      init_tensor_factory_impl();\n      init_tensor_impl_type_mapping();\n      init_tensor_utils_impl();\n    }\n  });\n\n  // common/dist/esm/tensor.js\n  var init_tensor = __esm({\n    "common/dist/esm/tensor.js"() {\n      "use strict";\n      init_tensor_impl();\n    }\n  });\n\n  // common/dist/esm/trace.js\n  var TRACE, TRACE_FUNC, TRACE_FUNC_BEGIN, TRACE_FUNC_END;\n  var init_trace = __esm({\n    "common/dist/esm/trace.js"() {\n      "use strict";\n      init_env_impl();\n      TRACE = (deviceType, label) => {\n        if (!env.wasm.trace) {\n          return;\n        }\n        console.timeStamp(`${deviceType}::ORT::${label}`);\n      };\n      TRACE_FUNC = (msg, extraMsg) => {\n        const stack = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [];\n        let hasTraceFunc = false;\n        for (let i = 0; i < stack.length; i++) {\n          if (hasTraceFunc && !stack[i].includes("TRACE_FUNC")) {\n            let label = `FUNC_${msg}::${stack[i].trim().split(" ")[1]}`;\n            if (extraMsg) {\n              label += `::${extraMsg}`;\n            }\n            TRACE("CPU", label);\n            return;\n          }\n          if (stack[i].includes("TRACE_FUNC")) {\n            hasTraceFunc = true;\n          }\n        }\n      };\n      TRACE_FUNC_BEGIN = (extraMsg) => {\n        if (!env.wasm.trace) {\n          return;\n        }\n        TRACE_FUNC("BEGIN", extraMsg);\n      };\n      TRACE_FUNC_END = (extraMsg) => {\n        if (!env.wasm.trace) {\n          return;\n        }\n        TRACE_FUNC("END", extraMsg);\n      };\n    }\n  });\n\n  // common/dist/esm/inference-session-impl.js\n  var init_inference_session_impl = __esm({\n    "common/dist/esm/inference-session-impl.js"() {\n      "use strict";\n      init_backend_impl();\n      init_tensor();\n      init_trace();\n    }\n  });\n\n  // common/dist/esm/inference-session.js\n  var init_inference_session = __esm({\n    "common/dist/esm/inference-session.js"() {\n      "use strict";\n      init_inference_session_impl();\n    }\n  });\n\n  // common/dist/esm/onnx-value.js\n  var init_onnx_value = __esm({\n    "common/dist/esm/onnx-value.js"() {\n      "use strict";\n    }\n  });\n\n  // common/dist/esm/training-session-impl.js\n  var init_training_session_impl = __esm({\n    "common/dist/esm/training-session-impl.js"() {\n      "use strict";\n      init_backend_impl();\n      init_tensor();\n    }\n  });\n\n  // common/dist/esm/training-session.js\n  var init_training_session = __esm({\n    "common/dist/esm/training-session.js"() {\n      "use strict";\n      init_training_session_impl();\n    }\n  });\n\n  // common/dist/esm/index.js\n  var init_esm = __esm({\n    "common/dist/esm/index.js"() {\n      "use strict";\n      init_backend();\n      init_env();\n      init_inference_session();\n      init_tensor();\n      init_trace();\n      init_onnx_value();\n      init_training_session();\n    }\n  });\n\n  // web/lib/wasm/jsep/log.ts\n  var logLevelPrefix, doLog, configLogLevel, debug, configureLogger, LOG, LOG_DEBUG;\n  var init_log = __esm({\n    "web/lib/wasm/jsep/log.ts"() {\n      "use strict";\n      init_wasm_common();\n      logLevelPrefix = ["V", "I", "W", "E", "F"];\n      doLog = (level, message) => {\n        console.log(`[${logLevelPrefix[level]},${(/* @__PURE__ */ new Date()).toISOString()}]${message}`);\n      };\n      configureLogger = ($configLogLevel, $debug) => {\n        configLogLevel = $configLogLevel;\n        debug = $debug;\n      };\n      LOG = (logLevel, msg) => {\n        const messageLevel = logLevelStringToEnum(logLevel);\n        const configLevel = logLevelStringToEnum(configLogLevel);\n        if (messageLevel >= configLevel) {\n          doLog(messageLevel, typeof msg === "function" ? msg() : msg);\n        }\n      };\n      LOG_DEBUG = (...args) => {\n        if (debug) {\n          LOG(...args);\n        }\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/tensor-view.ts\n  var createView;\n  var init_tensor_view = __esm({\n    "web/lib/wasm/jsep/tensor-view.ts"() {\n      "use strict";\n      init_wasm_common();\n      createView = (dataBuffer, type) => new (tensorTypeToTypedArrayConstructor(type))(dataBuffer);\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/types.ts\n  var init_types = __esm({\n    "web/lib/wasm/jsep/webgpu/types.ts"() {\n      "use strict";\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/gpu-data-manager.ts\n  var calcNormalizedBufferSize, guid, createNewGpuDataId, downloadGpuData, GpuDataManagerImpl, createGpuDataManager;\n  var init_gpu_data_manager = __esm({\n    "web/lib/wasm/jsep/webgpu/gpu-data-manager.ts"() {\n      "use strict";\n      init_log();\n      init_types();\n      calcNormalizedBufferSize = (size) => Math.ceil(size / 16) * 16;\n      guid = 1;\n      createNewGpuDataId = () => guid++;\n      downloadGpuData = async (backend, gpuBuffer, originalSize, getTargetBuffer) => {\n        const bufferSize = calcNormalizedBufferSize(originalSize);\n        const gpuReadBuffer = backend.device.createBuffer(\n          // eslint-disable-next-line no-bitwise\n          { size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ }\n        );\n        try {\n          const commandEncoder = backend.getCommandEncoder();\n          backend.endComputePass();\n          commandEncoder.copyBufferToBuffer(\n            gpuBuffer,\n            0,\n            gpuReadBuffer,\n            0,\n            bufferSize\n            /* size */\n          );\n          backend.flush();\n          await gpuReadBuffer.mapAsync(GPUMapMode.READ);\n          const arrayBuffer = gpuReadBuffer.getMappedRange();\n          if (getTargetBuffer) {\n            const targetBuffer = getTargetBuffer();\n            targetBuffer.set(new Uint8Array(arrayBuffer, 0, originalSize));\n            return targetBuffer;\n          } else {\n            return new Uint8Array(arrayBuffer.slice(0, originalSize));\n          }\n        } finally {\n          gpuReadBuffer.destroy();\n        }\n      };\n      GpuDataManagerImpl = class {\n        constructor(backend) {\n          this.backend = backend;\n          this.storageCache = /* @__PURE__ */ new Map();\n          this.freeBuffers = /* @__PURE__ */ new Map();\n          this.freeUniformBuffers = /* @__PURE__ */ new Map();\n          this.buffersForUploadingPending = [];\n          this.buffersPending = [];\n          this.externalBuffers = /* @__PURE__ */ new Map();\n        }\n        upload(id, data) {\n          const srcArrayBuffer = data.buffer;\n          const srcOffset = data.byteOffset;\n          const srcLength = data.byteLength;\n          const size = calcNormalizedBufferSize(srcLength);\n          const gpuDataCache = this.storageCache.get(id);\n          if (!gpuDataCache) {\n            throw new Error("gpu data for uploading does not exist");\n          }\n          if (gpuDataCache.originalSize !== srcLength) {\n            throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n          }\n          const gpuBufferForUploading = this.backend.device.createBuffer(\n            // eslint-disable-next-line no-bitwise\n            { mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC }\n          );\n          const arrayBuffer = gpuBufferForUploading.getMappedRange();\n          new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n          gpuBufferForUploading.unmap();\n          const commandEncoder = this.backend.getCommandEncoder();\n          this.backend.endComputePass();\n          commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n          LOG_DEBUG("verbose", () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n          this.buffersForUploadingPending.push(gpuBufferForUploading);\n        }\n        memcpy(sourceId, destinationId) {\n          const sourceGpuDataCache = this.storageCache.get(sourceId);\n          if (!sourceGpuDataCache) {\n            throw new Error("source gpu data for memcpy does not exist");\n          }\n          const destinationGpuDataCache = this.storageCache.get(destinationId);\n          if (!destinationGpuDataCache) {\n            throw new Error("destination gpu data for memcpy does not exist");\n          }\n          if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n            throw new Error("inconsistent source and destination gpu data size");\n          }\n          const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n          const commandEncoder = this.backend.getCommandEncoder();\n          this.backend.endComputePass();\n          commandEncoder.copyBufferToBuffer(\n            sourceGpuDataCache.gpuData.buffer,\n            0,\n            destinationGpuDataCache.gpuData.buffer,\n            0,\n            size\n          );\n        }\n        registerExternalBuffer(buffer, originalSize, previousBuffer) {\n          let id;\n          if (previousBuffer) {\n            id = this.externalBuffers.get(previousBuffer);\n            if (id === void 0) {\n              throw new Error("previous buffer is not registered");\n            }\n            if (buffer === previousBuffer) {\n              LOG_DEBUG(\n                "verbose",\n                () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${originalSize}) => id=${id}, buffer is the same, skip.`\n              );\n              return id;\n            }\n            this.externalBuffers.delete(previousBuffer);\n          } else {\n            id = createNewGpuDataId();\n          }\n          this.storageCache.set(id, { gpuData: { id, type: 0 /* default */, buffer }, originalSize });\n          this.externalBuffers.set(buffer, id);\n          LOG_DEBUG(\n            "verbose",\n            () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${originalSize}) => id=${id}, registered.`\n          );\n          return id;\n        }\n        unregisterExternalBuffer(buffer) {\n          const id = this.externalBuffers.get(buffer);\n          if (id !== void 0) {\n            this.storageCache.delete(id);\n            this.externalBuffers.delete(buffer);\n            LOG_DEBUG("verbose", () => `[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${id}`);\n          }\n        }\n        // eslint-disable-next-line no-bitwise\n        create(size, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST) {\n          const bufferSize = calcNormalizedBufferSize(size);\n          let gpuBuffer;\n          const isStorage = (usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE;\n          const isUniform = (usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM;\n          if (isStorage || isUniform) {\n            const freeBuffers = isStorage ? this.freeBuffers : this.freeUniformBuffers;\n            let buffers = freeBuffers.get(bufferSize);\n            if (!buffers) {\n              buffers = [];\n              freeBuffers.set(bufferSize, buffers);\n            }\n            if (buffers.length > 0) {\n              gpuBuffer = buffers.pop();\n            } else {\n              gpuBuffer = this.backend.device.createBuffer({ size: bufferSize, usage });\n            }\n          } else {\n            gpuBuffer = this.backend.device.createBuffer({ size: bufferSize, usage });\n          }\n          const gpuData = { id: createNewGpuDataId(), type: 0 /* default */, buffer: gpuBuffer };\n          this.storageCache.set(gpuData.id, { gpuData, originalSize: size });\n          LOG_DEBUG("verbose", () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n          return gpuData;\n        }\n        get(id) {\n          return this.storageCache.get(id)?.gpuData;\n        }\n        release(id) {\n          const cachedData = this.storageCache.get(id);\n          if (!cachedData) {\n            throw new Error("releasing data does not exist");\n          }\n          LOG_DEBUG("verbose", () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n          this.storageCache.delete(id);\n          this.buffersPending.push(cachedData.gpuData.buffer);\n          return cachedData.originalSize;\n        }\n        async download(id, getTargetBuffer) {\n          const cachedData = this.storageCache.get(id);\n          if (!cachedData) {\n            throw new Error("data does not exist");\n          }\n          await downloadGpuData(this.backend, cachedData.gpuData.buffer, cachedData.originalSize, getTargetBuffer);\n        }\n        refreshPendingBuffers() {\n          for (const buffer of this.buffersForUploadingPending) {\n            buffer.destroy();\n          }\n          this.buffersForUploadingPending = [];\n          for (const buffer of this.buffersPending) {\n            if ((buffer.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n              this.freeBuffers.get(buffer.size).push(buffer);\n            } else if ((buffer.usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM) {\n              this.freeUniformBuffers.get(buffer.size).push(buffer);\n            } else {\n              buffer.destroy();\n            }\n          }\n          this.buffersPending = [];\n        }\n        dispose() {\n          this.freeBuffers.forEach((buffers) => {\n            buffers.forEach((buffer) => {\n              buffer.destroy();\n            });\n          });\n          this.freeUniformBuffers.forEach((buffers) => {\n            buffers.forEach((buffer) => {\n              buffer.destroy();\n            });\n          });\n          this.storageCache.forEach((storage) => {\n            storage.gpuData.buffer.destroy();\n          });\n          this.storageCache = /* @__PURE__ */ new Map();\n          this.freeBuffers = /* @__PURE__ */ new Map();\n          this.freeUniformBuffers = /* @__PURE__ */ new Map();\n        }\n      };\n      createGpuDataManager = (...args) => new GpuDataManagerImpl(...args);\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/attribute-with-cache-key.ts\n  var AttributeWithCacheKeyImpl, createAttributeWithCacheKey;\n  var init_attribute_with_cache_key = __esm({\n    "web/lib/wasm/jsep/webgpu/attribute-with-cache-key.ts"() {\n      "use strict";\n      AttributeWithCacheKeyImpl = class {\n        constructor(attribute) {\n          Object.assign(this, attribute);\n        }\n        get cacheKey() {\n          if (!this.key) {\n            this.key = Object.getOwnPropertyNames(this).sort().map((name) => `${this[name]}`).join(";");\n          }\n          return this.key;\n        }\n      };\n      createAttributeWithCacheKey = (attribute) => new AttributeWithCacheKeyImpl(attribute);\n    }\n  });\n\n  // web/lib/wasm/jsep/util.ts\n  var MatMulUtil, BroadcastUtil, ShapeUtil, PoolConvUtil, GemmUtil, MIN_CLIP, MAX_CLIP;\n  var init_util = __esm({\n    "web/lib/wasm/jsep/util.ts"() {\n      "use strict";\n      MatMulUtil = class {\n        /**\n         * Calculate the expected shape when matrix multiplication\n         * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n         * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n         * @returns The expected shape of the result, or undefined if N/A\n         */\n        static calcMatMulShape(a, b) {\n          return a[1] !== b[0] ? void 0 : [a[0], b[1]];\n        }\n      };\n      BroadcastUtil = class {\n        /**\n         * Calculate the expected shape when broadcasting 2 tensors\n         * @param a The shape of tensor A. Should be an array of positive integers\n         * @param b The shape of tensor B. Should be an array of positive integers\n         * @param isMatMul Whether the operation is MatMul\n         * @returns The expected shape of the result, or undefined if N/A\n         */\n        static calcShape(adims, bdims, isMatMul = false) {\n          const arank = adims.length;\n          const brank = bdims.length;\n          if (arank === 0) {\n            return bdims;\n          }\n          if (brank === 0) {\n            return adims;\n          }\n          const crank = Math.max(adims.length, bdims.length);\n          const cdims = new Array(crank);\n          if (isMatMul) {\n            if (arank < 2 || brank < 2) {\n              return void 0;\n            }\n            const cShapeMatMul = MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n            if (cShapeMatMul === void 0) {\n              return void 0;\n            }\n            [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n          }\n          for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n            const aLen = arank - i < 0 ? 1 : adims[arank - i];\n            const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n            if (aLen !== bLen && aLen > 1 && bLen > 1) {\n              return void 0;\n            }\n            cdims[crank - i] = Math.max(aLen, bLen);\n          }\n          return cdims;\n        }\n        /**\n         * Determine if a shape is unidirectional broadcastable to another shape\n         * @param shape The input shape\n         * @param finalShape The desired shape after broadcasting\n         */\n        static isValidBroadcast(shape, finalShape) {\n          const inputRank = shape.length;\n          const finalRank = finalShape.length;\n          if (inputRank > finalRank) {\n            return false;\n          }\n          for (let i = 1; i <= inputRank; i++) {\n            if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n              return false;\n            }\n          }\n          return true;\n        }\n      };\n      ShapeUtil = class _ShapeUtil {\n        /**\n         * calculate the size (number of elements)\n         */\n        static size(dims) {\n          return _ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n        }\n        /**\n         * calculate the size (number of elements) from the given axis (inclusive)\n         */\n        static sizeFromDimension(dims, axis) {\n          if (axis < 0 || axis > dims.length) {\n            throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n          }\n          return _ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n        }\n        /**\n         * calculate the size (number of elements) to the given axis (exclusive)\n         */\n        static sizeToDimension(dims, axis) {\n          if (axis < 0 || axis > dims.length) {\n            throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n          }\n          return _ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n        }\n        /**\n         * calculate the size (number of elements) from and to the given axis [start, end)\n         */\n        static getSizeFromDimensionRange(dims, start, end) {\n          let size = 1;\n          for (let i = start; i < end; i++) {\n            if (dims[i] < 0) {\n              throw new Error(\n                // eslint-disable-next-line max-len\n                "cannot get valid size from specified dimension range. Most likely the range contains negative values in them."\n              );\n            }\n            size *= dims[i];\n          }\n          return size;\n        }\n        static computeStrides(dims) {\n          const rank = dims.length;\n          if (rank === 0) {\n            return [];\n          } else if (rank === 1) {\n            return [1];\n          }\n          const strides = new Array(rank);\n          strides[rank - 1] = 1;\n          strides[rank - 2] = dims[rank - 1];\n          for (let i = rank - 3; i >= 0; --i) {\n            strides[i] = strides[i + 1] * dims[i + 1];\n          }\n          return strides;\n        }\n        /**\n         * normailze axis of range [-r, r) into [0, r).\n         */\n        static normalizeAxis(axis, tensorRank) {\n          if (axis < -tensorRank && axis >= tensorRank) {\n            throw new Error("unsupported axis for this operation.");\n          }\n          return axis < 0 ? axis + tensorRank : axis;\n        }\n        static normalizeAxes(axes, tensorRank) {\n          return axes.map((x) => this.normalizeAxis(x, tensorRank ?? axes.length));\n        }\n        /**\n         * Sorts a given array based on the indices in the Perm array\n         * Used in Transpose\n         * @param a Array to be sorted such as dims or strides\n         * @param perm Perm given; if null a will be reversed\n         */\n        static sortBasedOnPerm(a, perm) {\n          if (perm) {\n            return perm.map((v) => a[v]);\n          } else {\n            return a.slice().reverse();\n          }\n        }\n        /**\n         * Pads a given shape according to the padding values\n         * @param dims shape of the Tensor to be padded\n         * @param pad pad values\n         */\n        static padShape(dims, pad2) {\n          const rank = dims.length;\n          return dims.map((v, i) => v + pad2[i] + pad2[i + rank]);\n        }\n        /**\n         * Determines if the two shapes are identical\n         * @param shape1\n         * @param shape2\n         */\n        static areEqual(shape1, shape2) {\n          if (shape1.length !== shape2.length) {\n            return false;\n          }\n          return shape1.every((v, i) => v === shape2[i]);\n        }\n      };\n      PoolConvUtil = class _PoolConvUtil {\n        /**\n         * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n         * @param isGlobalOperator If true, perform global pooling.\n         * @param inputDims The input tensor dimension.\n         * @param kernelShape The size of the kernel along each axis.\n         * @param strides Stride along each axis.\n         * @param dilations Dilation along each axis.\n         * @param pads Padding for the beginning and ending along each axis.\n         */\n        static adjustPoolAttributes(isGlobalOperator, inputDims, kernelShape, strides, dilations, pads) {\n          if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n            throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");\n          }\n          if (isGlobalOperator) {\n            for (let dim = 0; dim < inputDims.length - 2; dim++) {\n              if (dim >= kernelShape.length) {\n                kernelShape.push(inputDims[dim + 2]);\n              } else {\n                kernelShape[dim] = inputDims[dim + 2];\n              }\n            }\n          }\n          for (let dim = 0; dim < kernelShape.length; dim++) {\n            if (dim < strides.length) {\n              if (strides[dim] < 0) {\n                throw new Error("strides should be greater than or equal to 1");\n              }\n            } else {\n              strides.push(1);\n            }\n          }\n          for (let dim = 0; dim < kernelShape.length; dim++) {\n            if (dim < dilations.length) {\n              if (dilations[dim] < 0) {\n                throw new Error("dilations should be greater than or equal to 1");\n              }\n            } else {\n              dilations.push(1);\n            }\n          }\n          for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n            if (dim < pads.length) {\n              if (pads[dim] < 0) {\n                throw new Error("pad should be greater than or equal to 1");\n              }\n            } else {\n              pads.push(0);\n            }\n          }\n          for (let dim = 0; dim < kernelShape.length; dim++) {\n            if (kernelShape[dim] <= 0) {\n              throw new Error("kernel shapes need to be greater than 0");\n            }\n            if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n              throw new Error("pads should be smaller than kernel");\n            }\n          }\n        }\n        // adjust pad values based on \'autoPad\' attribute\n        static adjustPadsBasedOnAutoPad(inputDims, strides, dilations, kernelShape, pads, isChannelLast, autoPad) {\n          if (!autoPad) {\n            return;\n          }\n          if (pads.length !== 2 * (inputDims.length - 2)) {\n            throw new Error("length of pads should be twice the length of data dimensions");\n          }\n          if (strides.length !== inputDims.length - 2) {\n            throw new Error("length of strides should be the length of data dimensions");\n          }\n          if (kernelShape.length !== inputDims.length - 2) {\n            throw new Error("length of kernel shapes should be the length of data dimensions");\n          }\n          for (let dim = 0; dim < inputDims.length - 2; dim++) {\n            _PoolConvUtil.adjustPadAndReturnShape(\n              inputDims[dim + (isChannelLast ? 1 : 2)],\n              strides[dim],\n              dilations[dim],\n              kernelShape[dim],\n              pads,\n              dim,\n              dim + inputDims.length - 2,\n              autoPad\n            );\n          }\n        }\n        /**\n         * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n         * @param isGlobalOperator If true, perform global pooling.\n         * @param inputDims The input tensor dimension. (inputs[0].dims)\n         * @param strides Stride along each axis.\n         * @param dilations Dilation along each axis.\n         * @param kernelShape The size of the kernel along each axis.\n         * @param pads Padding for the beginning and ending along each axis.\n         * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n         *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n         */\n        static computePoolOutputShape(isGlobalOperator, inputDims, strides, dilations, kernelShape, pads, autoPad) {\n          if (inputDims.length <= 0) {\n            throw new Error("input shape must be of size greater than 0");\n          }\n          const outputDims = [inputDims[0], inputDims[1]];\n          _PoolConvUtil.computeShapeHelper(\n            isGlobalOperator,\n            inputDims,\n            outputDims,\n            strides,\n            dilations,\n            kernelShape,\n            pads,\n            autoPad\n          );\n          return outputDims;\n        }\n        /**\n         * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n         * @param inputDims The input tensor dimension. (inputs[0].dims)\n         * @param filterDims The filter tensor dimension. (inputs[1].dims)\n         * @param strides Stride along each axis.\n         * @param kernelShape The size of the kernel along each axis.\n         * @param pads Padding for the beginning and ending along each axis.\n         * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n         *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n         */\n        static computeConvOutputShape(inputDims, filterDims, strides, dilations, kernelShape, pads, autoPad) {\n          if (inputDims.length <= 0 || filterDims.length <= 0) {\n            throw new Error("invalid input tensor dims or invalid filter tensor dims");\n          }\n          const outputDims = [inputDims[0], filterDims[0]];\n          _PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n          return outputDims;\n        }\n        // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n        // called by computePoolOutputShape() and computeConvOutputShape()\n        // adjust pads based on \'autoPad\' attribute prior to shape computation\n        static computeShapeHelper(isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad) {\n          if (isGlobalOperator) {\n            for (let dim = 0; dim < inputDims.length - 2; dim++) {\n              outputDims.push(1);\n            }\n          } else {\n            for (let dim = 0; dim < inputDims.length - 2; dim++) {\n              outputDims.push(_PoolConvUtil.adjustPadAndReturnShape(\n                inputDims[dim + 2],\n                strides[dim],\n                dilations[dim],\n                kernelShape[dim],\n                pads,\n                dim,\n                dim + inputDims.length - 2,\n                autoPad\n              ));\n            }\n          }\n        }\n        // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n        // adjusts pad value for given \'autoPad\' string and computes output shape along a particular dimension\n        static adjustPadAndReturnShape(inSize, stride, dilation, kernel, pads, padHeadIndex, padTailIndex, autoPad) {\n          const dkernel = dilation * (kernel - 1) + 1;\n          if (autoPad && autoPad !== "NOTSET") {\n            switch (autoPad) {\n              case "VALID":\n                pads[padHeadIndex] = 0;\n                pads[padTailIndex] = 0;\n                return Math.floor((inSize - dkernel) / stride + 1);\n              case "SAME_LOWER":\n              case "SAME_UPPER":\n                if (dilation !== 1) {\n                  throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");\n                } else {\n                  const legacyTargetSize = (inSize + stride - 1) / stride;\n                  const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n                  pads[padHeadIndex] = autoPad === "SAME_LOWER" ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n                  pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n                  return Math.floor((inSize + padNeeded - kernel) / stride + 1);\n                }\n              default:\n                throw new Error("Unsupported AutoPad type");\n            }\n          } else {\n            return Math.floor((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride + 1);\n          }\n        }\n      };\n      GemmUtil = class {\n        // will make sure input shapes are compatible for this op\n        // and return back the shape of the output in the form of a tuple\n        // will throw exception if the input shapes are not compatible\n        static getShapeOfGemmResult(leftShape, transLeft, rightShape, transRight, biasShape) {\n          if (leftShape.length !== 2 || rightShape.length !== 2) {\n            throw new Error("shape need to be of size 2");\n          }\n          let M;\n          let K;\n          let N;\n          if (transLeft) {\n            M = leftShape[1];\n            K = leftShape[0];\n          } else {\n            M = leftShape[0];\n            K = leftShape[1];\n          }\n          let kDim = -1;\n          if (transRight) {\n            N = rightShape[0];\n            kDim = 1;\n          } else {\n            N = rightShape[1];\n            kDim = 0;\n          }\n          if (rightShape[kDim] !== K) {\n            throw new Error("dimension mismatch");\n          }\n          if (M <= 0 || N <= 0 || K <= 0) {\n            throw new Error("invalid shape specified");\n          }\n          if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n            throw new Error("gemm: invalid bias shape for broadcast");\n          }\n          return [M, N, K];\n        }\n      };\n      MIN_CLIP = -34028234663852886e22;\n      MAX_CLIP = 34028234663852886e22;\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/common.ts\n  var WORKGROUP_SIZE, getWgslMappedType, tensorTypeToWsglStorageType, tensorTypeToWsglValueType, createTensorShapeVariables, getMaxComponents, fillVector, castToF32, sumVector, getElementAt, createIndicesHelper, inputVariable, outputVariable, internalVariable, ShaderHelperImpl, createShaderHelper, getBroadcastDims, enableShapesUniforms;\n  var init_common = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/common.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      WORKGROUP_SIZE = 64;\n      getWgslMappedType = (type, components) => {\n        if (components === 3) {\n          throw new Error("vec3 has same alignment as vec4, use vec4 instead");\n        }\n        switch (type) {\n          case 10 /* float16 */:\n            return components > 1 ? `vec${components}<f16>` : "f16";\n          case 1 /* float */:\n            return components > 1 ? `vec${components}<f32>` : "f32";\n          case 6 /* int32 */:\n            return components > 1 ? `vec${components}<i32>` : "i32";\n          case 12 /* uint32 */:\n            return components > 1 ? `vec${components}<u32>` : "u32";\n          case 7 /* int64 */:\n            if (components > 1) {\n              throw new Error("currently not supported vecX of uint64 yet");\n            }\n            return ["vec2<u32>", "i32"];\n          case 13 /* uint64 */:\n            if (components > 1) {\n              throw new Error("currently not supported vecX of uint64 yet");\n            }\n            return ["vec2<u32>", "u32"];\n          case 9 /* bool */:\n            if (components !== 4) {\n              throw new Error("bool must be vec4");\n            }\n            return ["u32", "vec4<bool>"];\n          default:\n            throw new Error(`Unknown data type: ${type}`);\n        }\n      };\n      tensorTypeToWsglStorageType = (type, components = 1) => {\n        const mappedType = getWgslMappedType(type, components);\n        return typeof mappedType === "string" ? mappedType : mappedType[0];\n      };\n      tensorTypeToWsglValueType = (type, components = 1) => {\n        const mappedType = getWgslMappedType(type, components);\n        return typeof mappedType === "string" ? mappedType : mappedType[1];\n      };\n      createTensorShapeVariables = (dims) => dims.length === 0 ? [] : [{ type: "uint32", data: dims }, { type: "uint32", data: ShapeUtil.computeStrides(dims) }];\n      getMaxComponents = (size) => {\n        if (size % 4 === 0) {\n          return 4;\n        } else if (size % 2 === 0) {\n          return 2;\n        }\n        return 1;\n      };\n      fillVector = (dataType = "f32", components, value = "0") => {\n        if (!components || components === 1) {\n          return `${dataType}(${value})`;\n        }\n        return `vec${components}<${dataType}>(${value})`;\n      };\n      castToF32 = (dataType, components, value) => {\n        if (dataType === "f32") {\n          return value;\n        }\n        if (components === 1) {\n          return `f32(${value})`;\n        }\n        return `vec${components}f(${value})`;\n      };\n      sumVector = (name, components) => {\n        if (components === 4) {\n          return `(${name}.x + ${name}.y + ${name}.z + ${name}.w)`;\n        } else if (components === 2) {\n          return `(${name}.x + ${name}.y)`;\n        } else if (components === 3) {\n          return `(${name}.x + ${name}.y + ${name}.z)`;\n        }\n        return name;\n      };\n      getElementAt = (name, index, length) => {\n        if (name.startsWith("uniforms.") && length > 4) {\n          if (typeof index === "string") {\n            return `${name}[(${index}) / 4][(${index}) % 4]`;\n          } else {\n            return `${name}[${Math.floor(index / 4)}][${index % 4}]`;\n          }\n        } else {\n          return length > 1 ? `${name}[${index}]` : name;\n        }\n      };\n      createIndicesHelper = (name, tensorType, shapeOrRank, usage, components) => {\n        const useUniform = typeof shapeOrRank === "number";\n        const rank = useUniform ? shapeOrRank : shapeOrRank.length;\n        const rankIdentity = [...new Array(rank).keys()];\n        const indicesType = rank < 2 ? "u32" : rank <= 4 ? `vec${rank}<u32>` : `array<u32, ${rank}>`;\n        const mappedType = getWgslMappedType(tensorType, components);\n        const valueType = typeof mappedType === "string" ? mappedType : mappedType[1];\n        const storageType = typeof mappedType === "string" ? mappedType : mappedType[0];\n        const type = { indices: indicesType, value: valueType, storage: storageType, tensor: tensorType };\n        const normalizeDim = (dim) => typeof dim === "string" ? dim : `${dim}u`;\n        const implementationUsed = {\n          offsetToIndices: false,\n          indicesToOffset: false,\n          broadcastedIndicesToOffset: false,\n          set: false,\n          setByIndices: false,\n          get: false,\n          getByIndices: false\n        };\n        const uniformPrefix = useUniform ? "uniforms." : "";\n        const shape = `${uniformPrefix}${name}_shape`;\n        const strides = `${uniformPrefix}${name}_strides`;\n        let o2iSnippet = "";\n        for (let i = 0; i < rank - 1; i++) {\n          o2iSnippet += `\n    let dim${i} = current / ${getElementAt(strides, i, rank)};\n    let rest${i} = current % ${getElementAt(strides, i, rank)};\n    indices[${i}] = dim${i};\n    current = rest${i};\n    `;\n        }\n        o2iSnippet += `indices[${rank - 1}] = current;`;\n        const offsetToIndicesImplementation = rank < 2 ? "" : `\n  fn o2i_${name}(offset: u32) -> ${type.indices} {\n    var indices: ${type.indices};\n    var current = offset;\n    ${o2iSnippet}\n    return indices;\n  }`;\n        const offsetToIndices = (varOffset) => {\n          implementationUsed.offsetToIndices = true;\n          return rank < 2 ? varOffset : `o2i_${name}(${varOffset})`;\n        };\n        const offsets = [];\n        if (rank >= 2) {\n          for (let i = rank - 1; i >= 0; i--) {\n            offsets.push(`${getElementAt(strides, i, rank)} * (indices[${i}])`);\n          }\n        }\n        const indicesToOffsetImplementation = rank < 2 ? "" : `\n  fn i2o_${name}(indices: ${type.indices}) -> u32 {\n    return ${offsets.join("+")};\n  }`;\n        const indicesToOffset = (varIndices) => {\n          implementationUsed.indicesToOffset = true;\n          return rank < 2 ? varIndices : `i2o_${name}(${varIndices})`;\n        };\n        const indices = (...init2) => rank === 0 ? "0u" : `${type.indices}(${init2.map(normalizeDim).join(",")})`;\n        const indicesGet = (varIndices, idx) => {\n          if (rank < 2) {\n            return `${varIndices}`;\n          } else {\n            return `${getElementAt(varIndices, idx, rank)}`;\n          }\n        };\n        const indicesSet = (varIndices, idx, value) => {\n          if (rank < 2) {\n            return `${varIndices}=${value};`;\n          } else {\n            return `${getElementAt(varIndices, idx, rank)}=${value};`;\n          }\n        };\n        const broadcastedIndicesToOffsetImplementation = {};\n        const broadcastedIndicesToOffset = (varIndices, output) => {\n          implementationUsed.broadcastedIndicesToOffset = true;\n          const implKey = `${output.name}broadcastedIndicesTo${name}Offset`;\n          if (implKey in broadcastedIndicesToOffsetImplementation) {\n            return `${implKey}(${varIndices})`;\n          }\n          const offsets2 = [];\n          for (let i = rank - 1; i >= 0; i--) {\n            const idx = output.indicesGet("outputIndices", i + output.rank - rank);\n            offsets2.push(`${indicesGet(strides, i)} * (${idx} % ${indicesGet(shape, i)})`);\n          }\n          broadcastedIndicesToOffsetImplementation[implKey] = `fn ${implKey}(outputIndices: ${output.type.indices}) -> u32 {\n             return ${offsets2.length > 0 ? offsets2.join("+") : "0u"};\n           }`;\n          return `${implKey}(${varIndices})`;\n        };\n        const setByOffset = (offset, value) => (() => {\n          if (type.storage === type.value) {\n            return `${name}[${offset}]=${value};`;\n          } else if (type.storage === "vec2<u32>" && type.value === "i32") {\n            return `${name}[${offset}]=vec2<u32>(u32(${value}), select(0u, 0xFFFFFFFFu, ${value} < 0));`;\n          } else if (type.storage === "vec2<u32>" && type.value === "u32") {\n            return `${name}[${offset}]=vec2<u32>(u32(${value}), 0u);`;\n          } else if (type.storage === "u32" && type.value === "vec4<bool>") {\n            return `${name}[${offset}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${value}));`;\n          } else {\n            throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n          }\n        })();\n        const getByOffset = (offset) => (() => {\n          if (type.storage === type.value) {\n            return `${name}[${offset}]`;\n          } else if (type.storage === "vec2<u32>" && type.value === "i32") {\n            return `i32(${name}[${offset}].x)`;\n          } else if (type.storage === "vec2<u32>" && type.value === "u32") {\n            return `u32(${name}[${offset}].x)`;\n          } else if (type.storage === "u32" && type.value === "vec4<bool>") {\n            return `vec4<bool>(bool(${name}[${offset}] & 0xFFu), bool(${name}[${offset}] & 0xFF00u), bool(${name}[${offset}] & 0xFF0000u), bool(${name}[${offset}] & 0xFF000000u))`;\n          } else {\n            throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n          }\n        })();\n        const getByIndicesImplementation = rank < 2 ? "" : `\n  fn get_${name}ByIndices(indices: ${type.indices}) -> ${valueType} {\n    return ${getByOffset(`i2o_${name}(indices)`)};\n  }`;\n        const getImplementation = rank < 2 ? "" : (() => {\n          const functionParams = rankIdentity.map((i) => `d${i}: u32`).join(", ");\n          const dimsParams = rankIdentity.map((i) => `d${i}`).join(", ");\n          return `\n  fn get_${name}(${functionParams}) -> ${valueType} {\n    return get_${name}ByIndices(${indices(dimsParams)});\n  }`;\n        })();\n        const get = (...indices2) => {\n          if (indices2.length !== rank) {\n            throw new Error(`indices length must be ${rank}`);\n          }\n          const normalizedIndices = indices2.map(normalizeDim).join(",");\n          if (rank === 0) {\n            return getByOffset("0u");\n          } else if (rank === 1) {\n            return getByOffset(normalizedIndices[0]);\n          } else {\n            implementationUsed.get = true;\n            implementationUsed.getByIndices = true;\n            implementationUsed.indicesToOffset = true;\n            return `get_${name}(${normalizedIndices})`;\n          }\n        };\n        const getByIndices = (varIndices) => {\n          if (rank < 2) {\n            return getByOffset(varIndices);\n          } else {\n            implementationUsed.getByIndices = true;\n            implementationUsed.indicesToOffset = true;\n            return `get_${name}ByIndices(${varIndices})`;\n          }\n        };\n        const setByIndicesImplementation = rank < 2 ? "" : `\n  fn set_${name}ByIndices(indices: ${type.indices}, value: ${valueType}) {\n    ${setByOffset(`i2o_${name}(indices)`, "value")}\n  }`;\n        const setImplementation = rank < 2 ? "" : (() => {\n          const functionParams = rankIdentity.map((i) => `d${i}: u32`).join(", ");\n          const dimsParams = rankIdentity.map((i) => `d${i}`).join(", ");\n          return `\n  fn set_${name}(${functionParams}, value: ${valueType}) {\n    set_${name}ByIndices(${indices(dimsParams)}, value);\n  }`;\n        })();\n        const set = (...indicesAndValue) => {\n          if (indicesAndValue.length !== rank + 1) {\n            throw new Error(`indices length must be ${rank}`);\n          }\n          const value = indicesAndValue[rank];\n          if (typeof value !== "string") {\n            throw new Error("value must be string");\n          }\n          const normalizedIndices = indicesAndValue.slice(0, rank).map(normalizeDim).join(",");\n          if (rank === 0) {\n            return setByOffset("0u", value);\n          } else if (rank === 1) {\n            return setByOffset(normalizedIndices[0], value);\n          } else {\n            implementationUsed.set = true;\n            implementationUsed.setByIndices = true;\n            implementationUsed.indicesToOffset = true;\n            return `set_${name}(${normalizedIndices}, ${value})`;\n          }\n        };\n        const setByIndices = (varIndices, value) => {\n          if (rank < 2) {\n            return setByOffset(varIndices, value);\n          } else {\n            implementationUsed.setByIndices = true;\n            implementationUsed.indicesToOffset = true;\n            return `set_${name}ByIndices(${varIndices}, ${value});`;\n          }\n        };\n        const impl = () => {\n          const impls = [];\n          let needShapeStrides = false;\n          if (implementationUsed.offsetToIndices) {\n            impls.push(offsetToIndicesImplementation);\n            needShapeStrides = true;\n          }\n          if (implementationUsed.indicesToOffset) {\n            impls.push(indicesToOffsetImplementation);\n            needShapeStrides = true;\n          }\n          if (implementationUsed.broadcastedIndicesToOffset) {\n            Object.values(broadcastedIndicesToOffsetImplementation).forEach((impl2) => impls.push(impl2));\n            needShapeStrides = true;\n          }\n          if (implementationUsed.set) {\n            impls.push(setImplementation);\n            needShapeStrides = true;\n          }\n          if (implementationUsed.setByIndices) {\n            impls.push(setByIndicesImplementation);\n            needShapeStrides = true;\n          }\n          if (implementationUsed.get) {\n            impls.push(getImplementation);\n            needShapeStrides = true;\n          }\n          if (implementationUsed.getByIndices) {\n            impls.push(getByIndicesImplementation);\n            needShapeStrides = true;\n          }\n          if (!useUniform && needShapeStrides) {\n            impls.unshift(\n              `const ${shape} = ${type.indices}(${shapeOrRank.join(",")});`,\n              `const ${strides} = ${type.indices}(${ShapeUtil.computeStrides(shapeOrRank).join(",")});`\n            );\n          }\n          return impls.join("\\n");\n        };\n        return {\n          impl,\n          type,\n          offsetToIndices,\n          indicesToOffset,\n          broadcastedIndicesToOffset,\n          indices,\n          indicesGet,\n          indicesSet,\n          set,\n          setByOffset,\n          setByIndices,\n          get,\n          getByOffset,\n          getByIndices,\n          // isVec4,\n          usage,\n          name,\n          strides,\n          shape,\n          rank\n        };\n      };\n      inputVariable = (name, type, shapeOrRank, components = 1) => createIndicesHelper(name, type, shapeOrRank, "input", components);\n      outputVariable = (name, type, shapeOrRank, components = 1) => createIndicesHelper(name, type, shapeOrRank, "output", components);\n      internalVariable = (name, type, shapeOrRank, components = 1) => createIndicesHelper(name, type, shapeOrRank, "internal", components);\n      ShaderHelperImpl = class {\n        constructor(normalizedDispatchGroup) {\n          this.normalizedDispatchGroup = normalizedDispatchGroup;\n          this.internalVariables = [];\n          this.variables = [];\n          this.uniforms = [];\n          this.variableIndex = 0;\n        }\n        guardAgainstOutOfBoundsWorkgroupSizes(size) {\n          const sizeInCode = typeof size === "number" ? `${size}u` : size;\n          return `if (global_idx >= ${sizeInCode}) { return; }`;\n        }\n        mainStart(workgroupSize = WORKGROUP_SIZE) {\n          const workgroupSizeX = typeof workgroupSize === "number" ? workgroupSize : workgroupSize[0];\n          const workgroupSizeY = typeof workgroupSize === "number" ? 1 : workgroupSize[1];\n          const workgroupSizeZ = typeof workgroupSize === "number" ? 1 : workgroupSize[2];\n          const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n          const paramList = is1DimensionDispatch ? `@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>` : `@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`;\n          const globalIdxDefinition = is1DimensionDispatch ? "let global_idx = global_id.x; let local_idx = local_id.x;" : `let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_idx;`;\n          return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n        }\n        appendVariableUniforms(variable) {\n          if (variable.rank !== 0) {\n            if (variable.shape.startsWith("uniforms.")) {\n              this.uniforms.push({ name: variable.shape.replace("uniforms.", ""), type: "u32", length: variable.rank });\n            }\n            if (variable.strides.startsWith("uniforms.")) {\n              this.uniforms.push({ name: variable.strides.replace("uniforms.", ""), type: "u32", length: variable.rank });\n            }\n          }\n        }\n        declareVariable(variable, bindingIndex) {\n          if (variable.usage === "internal") {\n            throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");\n          }\n          this.variables.push(variable);\n          this.appendVariableUniforms(variable);\n          const access = variable.usage === "input" ? "read" : "read_write";\n          const storageType = variable.type.storage;\n          return `@group(0) @binding(${bindingIndex}) var<storage, ${access}> ${variable.name}: array<${storageType}>;`;\n        }\n        declareVariables(...variables) {\n          return variables.map((v) => this.declareVariable(v, this.variableIndex++)).join("\\n");\n        }\n        registerInternalVariable(variable) {\n          if (variable.usage !== "internal") {\n            throw new Error(\n              "cannot use input or output variable with registerInternalVariable(). use declareVariables() instead."\n            );\n          }\n          this.internalVariables.push(variable);\n          this.appendVariableUniforms(variable);\n        }\n        registerInternalVariables(...variables) {\n          variables.forEach((v) => this.registerInternalVariable(v));\n          return this;\n        }\n        registerUniform(name, type, length = 1) {\n          this.uniforms.push({ name, type, length });\n          return this;\n        }\n        registerUniforms(additionalUniforms) {\n          this.uniforms = this.uniforms.concat(additionalUniforms);\n          return this;\n        }\n        uniformDeclaration() {\n          if (this.uniforms.length === 0) {\n            return "";\n          }\n          const uniformSnippets = [];\n          for (const { name, type, length } of this.uniforms) {\n            if (length && length > 4) {\n              uniformSnippets.push(`${name}:array<vec4<${type}>, ${Math.ceil(length / 4)}>`);\n            } else {\n              const typeTemp = length == null || length === 1 ? type : `vec${length}<${type}>`;\n              uniformSnippets.push(`${name}:${typeTemp}`);\n            }\n          }\n          return `\n      struct Uniforms { ${uniformSnippets.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`;\n        }\n        /**\n         * Get additional implementation that needs to be added to the shader source.\n         */\n        get additionalImplementations() {\n          return this.uniformDeclaration() + this.variables.map((i) => i.impl()).join("\\n") + this.internalVariables.map((i) => i.impl()).join("\\n");\n        }\n      };\n      createShaderHelper = (dispatchGroup) => new ShaderHelperImpl(dispatchGroup);\n      getBroadcastDims = (inShape, outShape) => {\n        const inRank = inShape.length;\n        const dims = [];\n        for (let i = 0; i < inRank; i++) {\n          const dim = inRank - 1 - i;\n          const a = inShape[dim] || 1;\n          const b = outShape[outShape.length - 1 - i] || 1;\n          if (b > 1 && a === 1) {\n            dims.unshift(dim);\n          }\n        }\n        return dims;\n      };\n      enableShapesUniforms = (_rank) => true;\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/transpose.ts\n  var validateInputs, getAdjustedPerm, getOutputShape, permFunctionBody, createTransposeProgramInfo, transpose, parseTransposeAttributes;\n  var init_transpose = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/transpose.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs = (inputs) => {\n        if (!inputs || inputs.length !== 1) {\n          throw new Error("Transpose requires 1 input.");\n        }\n      };\n      getAdjustedPerm = (inputRank, perm) => perm && perm.length !== inputRank ? [...new Array(inputRank).keys()].reverse() : perm;\n      getOutputShape = (inputShape, perm) => ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape.length, perm));\n      permFunctionBody = (perm, rank, input, output) => {\n        const reverseFunc = [];\n        reverseFunc.push(`fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\n    var a: ${input.type.indices};`);\n        for (let i = 0; i < rank; ++i) {\n          reverseFunc.push(input.indicesSet("a", perm[i], `i[${i}]`));\n        }\n        reverseFunc.push("return a;}");\n        return reverseFunc.join("\\n");\n      };\n      createTransposeProgramInfo = (inputTensor, permAttr) => {\n        const inputDataType = inputTensor.dataType;\n        const inputRank = inputTensor.dims.length;\n        const perm = getAdjustedPerm(inputRank, permAttr);\n        const useShapesUniforms = enableShapesUniforms(inputRank);\n        const outputShape = getOutputShape(inputTensor.dims, perm);\n        const outShapeOrRank = useShapesUniforms ? outputShape.length : outputShape;\n        const inShapeOrRank = useShapesUniforms ? inputRank : inputTensor.dims;\n        const output = outputVariable("output", inputDataType, outShapeOrRank);\n        const input = inputVariable("a", inputDataType, inShapeOrRank);\n        const getShaderSource = (shaderHelper) => `\n  ${shaderHelper.registerUniform("output_size", "u32").declareVariables(input, output)}\n\n  ${permFunctionBody(perm, inputRank, input, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${output.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${output.setByOffset("global_idx", input.getByIndices("aIndices"))}\n  }`;\n        return {\n          name: "Transpose",\n          shaderCache: { hint: `${permAttr}`, inputDependencies: useShapesUniforms ? ["rank"] : ["dims"] },\n          getRunData: (inputs) => {\n            const outputSize = ShapeUtil.size(outputShape);\n            return {\n              outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n              dispatchGroup: { x: Math.ceil(\n                outputSize / 64\n                /* workgroup size */\n              ) },\n              programUniforms: useShapesUniforms ? [\n                { type: "uint32", data: outputSize },\n                ...createTensorShapeVariables(inputs[0].dims),\n                ...createTensorShapeVariables(outputShape)\n              ] : [\n                { type: "uint32", data: outputSize }\n              ]\n            };\n          },\n          getShaderSource\n        };\n      };\n      transpose = (context, attributes) => {\n        validateInputs(context.inputs);\n        context.compute(createTransposeProgramInfo(context.inputs[0], attributes.perm));\n      };\n      parseTransposeAttributes = (attributes) => createAttributeWithCacheKey({ perm: attributes.perm });\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/reduce-shared.ts\n  var reduceOps, reduceSharedOps, reduceInitValues, reduceOutputValues, getInnerMostAxes, computeOutAndReduceShapes, expandShapeToKeepDim, areAxesInnerMostDims, getAxesPermutation, createReduceSharedProgramInfo, reduceCommon, reduceMeanShared, reduceL1Shared, reduceL2Shared, reduceLogSumExpShared, reduceMaxShared, reduceMinShared, reduceProdShared, reduceSumShared, reduceSumSquareShared, reduceLogSumShared;\n  var init_reduce_shared = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/reduce-shared.ts"() {\n      "use strict";\n      init_util();\n      init_common();\n      init_reduce();\n      init_transpose();\n      reduceOps = {\n        max: "select(bestValue, candidate, candidate > bestValue)",\n        min: "select(bestValue, candidate, candidate < bestValue)",\n        mean: "bestValue + candidate",\n        sum: "bestValue + candidate",\n        prod: "bestValue * candidate",\n        sumSquare: "bestValue + candidate * candidate",\n        logSumExp: "bestValue + exp(candidate)",\n        l1: "bestValue + abs(candidate)",\n        l2: "bestValue + candidate * candidate",\n        logSum: "bestValue + candidate"\n      };\n      reduceSharedOps = {\n        max: "select(bestValue, candidate, candidate > bestValue)",\n        min: "select(bestValue, candidate, candidate < bestValue)",\n        mean: "bestValue + candidate",\n        sum: "bestValue + candidate",\n        prod: "bestValue * candidate",\n        sumSquare: "bestValue + candidate",\n        logSumExp: "bestValue + candidate",\n        l1: "bestValue + candidate",\n        l2: "bestValue + candidate",\n        logSum: "bestValue + candidate"\n      };\n      reduceInitValues = {\n        max: "_A[offset]",\n        min: "_A[offset]",\n        mean: "0",\n        sum: "0",\n        prod: "1",\n        sumSquare: "0",\n        logSumExp: "0",\n        l1: "0",\n        l2: "0",\n        logSum: "0"\n      };\n      reduceOutputValues = {\n        max: "bestValue",\n        min: "bestValue",\n        sum: "bestValue",\n        prod: "bestValue",\n        sumSquare: "bestValue",\n        logSumExp: "log(bestValue)",\n        l1: "bestValue",\n        l2: "sqrt(bestValue)",\n        logSum: "log(bestValue)"\n      };\n      getInnerMostAxes = (numInnerAxes, rank) => {\n        const res = [];\n        for (let i = rank - numInnerAxes; i < rank; ++i) {\n          res.push(i);\n        }\n        return res;\n      };\n      computeOutAndReduceShapes = (shape, axes) => {\n        const outputShape = [];\n        const rank = shape.length;\n        for (let dim = 0; dim < rank; dim++) {\n          if (axes.indexOf(dim) === -1) {\n            outputShape.push(shape[dim]);\n          }\n        }\n        const reduceShape = axes.map((dim) => shape[dim]);\n        return [outputShape, reduceShape];\n      };\n      expandShapeToKeepDim = (shape, axes) => {\n        const rank = shape.length + axes.length;\n        const expandShape = [];\n        let shapeIdx = 0;\n        for (let dim = 0; dim < rank; dim++) {\n          if (axes.indexOf(dim) === -1) {\n            expandShape.push(shape[shapeIdx++]);\n          } else {\n            expandShape.push(1);\n          }\n        }\n        return expandShape;\n      };\n      areAxesInnerMostDims = (axes, rank) => {\n        for (let i = 0; i < axes.length; ++i) {\n          if (axes[axes.length - i - 1] !== rank - 1 - i) {\n            return false;\n          }\n        }\n        return true;\n      };\n      getAxesPermutation = (axes, rank) => {\n        const res = [];\n        if (!areAxesInnerMostDims(axes, rank)) {\n          for (let i = 0; i < rank; ++i) {\n            if (axes.indexOf(i) === -1) {\n              res.push(i);\n            }\n          }\n          axes.forEach((axis) => res.push(axis));\n        }\n        return res;\n      };\n      createReduceSharedProgramInfo = (name, shaderCache, inputs, reduceType, outputDataType, outputShape, reduceShape) => {\n        const inputShape = inputs[0].dims;\n        const outputSize = ShapeUtil.size(outputShape);\n        const reduceSize = ShapeUtil.size(reduceShape);\n        const input = inputVariable("_A", inputs[0].dataType, inputShape);\n        const output = outputVariable("output", outputDataType, outputShape);\n        const workgroupSize = 32;\n        const sharedMemorySnippet = `\n          var<workgroup> aBestValues : array<${output.type.storage}, ${workgroupSize}>;\n       `;\n        const getShaderSource = (shaderHelper) => `\n        ${shaderHelper.registerUniform("reduceSize", "u32").declareVariables(input, output)}\n        ${sharedMemorySnippet}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${shaderHelper.mainStart(workgroupSize)}\n\n          let outputIndex = global_idx / ${workgroupSize};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${output.type.storage}(${reduceInitValues[reduceType]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${workgroupSize}) {\n           let candidate = ${output.type.storage}(${input.getByOffset("offset + k")});\n           bestValue = ${reduceOps[reduceType]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${workgroupSize}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${reduceSharedOps[reduceType]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${output.setByOffset(\n          "outputIndex",\n          `${reduceType === "mean" ? `bestValue / ${output.type.storage}(uniforms.reduceSize)` : `${reduceOutputValues[reduceType]}`}`\n        )};\n         }\n        }`;\n        return {\n          name,\n          shaderCache,\n          getShaderSource,\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: outputDataType }],\n            dispatchGroup: { x: outputSize },\n            programUniforms: [{ type: "uint32", data: reduceSize }]\n          })\n        };\n      };\n      reduceCommon = (context, name, attributes, reduceType) => {\n        const updatedAttributes = context.inputs.length === 1 ? attributes : createReduceAttributesFromInputs(context.inputs, attributes);\n        let updatedAxes = updatedAttributes.axes;\n        if (updatedAxes.length === 0 && !updatedAttributes.noopWithEmptyAxes) {\n          updatedAxes = context.inputs[0].dims.map((_dim, i) => i);\n        }\n        const normalizeAxes = ShapeUtil.normalizeAxes(updatedAxes, context.inputs[0].dims.length);\n        let axes = normalizeAxes;\n        let input = context.inputs[0];\n        const permutedAxes = getAxesPermutation(axes, context.inputs[0].dims.length);\n        if (permutedAxes.length > 0) {\n          input = context.compute(\n            createTransposeProgramInfo(context.inputs[0], permutedAxes),\n            { inputs: [0], outputs: [-1] }\n          )[0];\n          axes = getInnerMostAxes(axes.length, input.dims.length);\n        }\n        const [outputShape, reduceShape] = computeOutAndReduceShapes(input.dims, axes);\n        let finalOutputShape = outputShape;\n        if (updatedAttributes.keepDims) {\n          finalOutputShape = expandShapeToKeepDim(outputShape, normalizeAxes);\n        }\n        context.compute(\n          createReduceSharedProgramInfo(\n            name,\n            { hint: updatedAttributes.cacheKey, inputDependencies: ["type"] },\n            [input],\n            reduceType,\n            context.inputs[0].dataType,\n            finalOutputShape,\n            reduceShape\n          ),\n          { inputs: [input] }\n        );\n      };\n      reduceMeanShared = (context, attributes) => {\n        reduceCommon(context, "ReduceMeanShared", attributes, "mean");\n      };\n      reduceL1Shared = (context, attributes) => {\n        reduceCommon(context, "ReduceL1Shared", attributes, "l1");\n      };\n      reduceL2Shared = (context, attributes) => {\n        reduceCommon(context, "ReduceL2Shared", attributes, "l2");\n      };\n      reduceLogSumExpShared = (context, attributes) => {\n        reduceCommon(context, "ReduceLogSumExpShared", attributes, "logSumExp");\n      };\n      reduceMaxShared = (context, attributes) => {\n        reduceCommon(context, "ReduceMaxShared", attributes, "max");\n      };\n      reduceMinShared = (context, attributes) => {\n        reduceCommon(context, "ReduceMinShared", attributes, "min");\n      };\n      reduceProdShared = (context, attributes) => {\n        reduceCommon(context, "ReduceProdShared", attributes, "prod");\n      };\n      reduceSumShared = (context, attributes) => {\n        reduceCommon(context, "ReduceSumShared", attributes, "sum");\n      };\n      reduceSumSquareShared = (context, attributes) => {\n        reduceCommon(context, "ReduceSumSquareShared", attributes, "sumSquare");\n      };\n      reduceLogSumShared = (context, attributes) => {\n        reduceCommon(context, "ReduceLogSumShared", attributes, "logSum");\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/reduce.ts\n  var validateInputs2, noOp, createReduceProgramInfo, createReduceAttributesFromInputs, runReduceProgram, reduceLogSumNaive, reduceL1Naive, reduceL2Naive, reduceLogSumExpNaive, reduceMaxNaive, reduceMeanNaive, reduceMinNaive, reduceProdNaive, reduceSumNaive, reduceSumSquareNaive, useNaiveReduceMethod, reduceMean, reduceL1, reduceL2, reduceLogSumExp, reduceMax, reduceMin, reduceProd, reduceSum, reduceSumSquare, reduceLogSum;\n  var init_reduce = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/reduce.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      init_reduce_shared();\n      validateInputs2 = (inputs) => {\n        if (!inputs || inputs.length === 0 || inputs.length > 2) {\n          throw new Error("Reduce op requires 1 or 2 inputs.");\n        }\n        if (inputs.length === 2 && inputs[1].dims.length !== 1) {\n          throw new Error("Invalid axes input dims.");\n        }\n      };\n      noOp = (input) => ["", "", `var value = ${input.getByIndices("input_indices")};`, ""];\n      createReduceProgramInfo = (name, shaderCache, inputs, reduceOp, axesInput, outputDataType, keepDims = false, noopWithEmptyAxes = false) => {\n        const outputShape = [];\n        const inputShape = inputs[0].dims;\n        const inputRank = inputShape.length;\n        const axes = ShapeUtil.normalizeAxes(axesInput, inputRank);\n        const reduceOnAllAxes = !noopWithEmptyAxes && axes.length === 0;\n        inputShape.forEach((d, i) => {\n          if (reduceOnAllAxes || axes.indexOf(i) >= 0) {\n            if (keepDims) {\n              outputShape.push(1);\n            }\n          } else {\n            outputShape.push(d);\n          }\n        });\n        const outputRank = outputShape.length;\n        const outputSize = ShapeUtil.size(outputShape);\n        const getShaderSource = (shaderHelper) => {\n          const idxCopy = [];\n          const input = inputVariable("_A", inputs[0].dataType, inputRank);\n          const output = outputVariable("output", outputDataType, outputRank);\n          const ops = reduceOp(input, output, axes);\n          let reduceOps2 = ops[2];\n          for (let k = 0, l = 0; k < inputRank; k++) {\n            if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\n              if (keepDims) {\n                l++;\n              }\n              reduceOps2 = `for(var j${k}: u32 = 0; j${k} < ${inputShape[k]}; j${k}++) {\n                  ${ops[2].includes("last_index") ? `let last_index = j${k};` : ""}\n                  ${input.indicesSet("input_indices", k, `j${k}`)}\n                  ${reduceOps2}\n                }`;\n            } else {\n              idxCopy.push(`${input.indicesSet("input_indices", k, output.indicesGet("output_indices", l))};`);\n              l++;\n            }\n          }\n          return `\n\n        ${shaderHelper.registerUniform("output_size", "u32").declareVariables(input, output)}\n\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${input.type.indices};\n          let output_indices = ${output.offsetToIndices("global_idx")};\n\n          ${idxCopy.join("\\n")}\n          ${ops[0]}       // init ops for reduce max/min\n          ${ops[1]}\n          ${reduceOps2}\n          ${ops[3]}\n          ${ops.length === 4 ? output.setByOffset("global_idx", "value") : ops.slice(4).join("\\n")}\n        }`;\n        };\n        return {\n          name,\n          shaderCache,\n          getShaderSource,\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: outputDataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms: [\n              { type: "uint32", data: outputSize },\n              ...createTensorShapeVariables(inputShape),\n              ...createTensorShapeVariables(outputShape)\n            ]\n          })\n        };\n      };\n      createReduceAttributesFromInputs = (inputs, attributes) => {\n        const axes = [];\n        if (inputs[1].dims[0] > 0) {\n          inputs[1].getBigInt64Array().forEach((v) => axes.push(Number(v)));\n        }\n        return createAttributeWithCacheKey(\n          { axes, keepDims: attributes.keepDims, noopWithEmptyAxes: attributes.noopWithEmptyAxes }\n        );\n      };\n      runReduceProgram = (context, name, attributes, reduceOp) => {\n        const inputs = context.inputs;\n        const updatedAttributes = inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\n        context.compute(\n          createReduceProgramInfo(\n            name,\n            { hint: updatedAttributes.cacheKey, inputDependencies: ["rank"] },\n            [inputs[0]],\n            updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp,\n            updatedAttributes.axes,\n            inputs[0].dataType,\n            updatedAttributes.keepDims,\n            updatedAttributes.noopWithEmptyAxes\n          ),\n          { inputs: [0] }\n        );\n      };\n      reduceLogSumNaive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, output) => [\n          `var value = ${output.type.storage}(0);`,\n          "",\n          `value += ${input.getByIndices("input_indices")};`,\n          "value = log(value);"\n        ];\n        runReduceProgram(context, "ReduceLogSum", attributes, reduceOp);\n      };\n      reduceL1Naive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, output) => [\n          `var value = ${output.type.storage}(0);`,\n          "",\n          `value += abs(${input.getByIndices("input_indices")});`,\n          ""\n        ];\n        runReduceProgram(context, "ReduceL1", attributes, reduceOp);\n      };\n      reduceL2Naive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, output) => [\n          `var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n          "",\n          `t = ${input.getByIndices("input_indices")}; value += (t * t);`,\n          "value = sqrt(value);"\n        ];\n        runReduceProgram(context, "ReduceL2", attributes, reduceOp);\n      };\n      reduceLogSumExpNaive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, output) => [\n          `var value = ${output.type.storage}(0);`,\n          "",\n          `value += exp(${input.getByIndices("input_indices")});`,\n          "value = log(value);"\n        ];\n        runReduceProgram(context, "ReduceLogSumExp", attributes, reduceOp);\n      };\n      reduceMaxNaive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, _output, axes) => {\n          const idxZero = [];\n          for (let k = 0; k < input.rank; k++) {\n            if (axes.indexOf(k) >= 0 || axes.length === 0) {\n              idxZero.push(input.indicesSet("input_indices", k, 0));\n            }\n          }\n          return [\n            `${idxZero.join("\\n")}`,\n            `var value = ${input.getByIndices("input_indices")};`,\n            `value = max(value, ${input.getByIndices("input_indices")});`,\n            ""\n          ];\n        };\n        runReduceProgram(context, "ReduceMax", attributes, reduceOp);\n      };\n      reduceMeanNaive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, output, axes) => {\n          let size = 1;\n          for (let k = 0; k < input.rank; k++) {\n            if (axes.indexOf(k) >= 0 || axes.length === 0) {\n              size *= context.inputs[0].dims[k];\n            }\n          }\n          return [\n            "var sum = f32(0);",\n            "",\n            `sum += f32(${input.getByIndices("input_indices")});`,\n            `let value = ${output.type.value}(sum / ${size});`\n          ];\n        };\n        runReduceProgram(context, "ReduceMean", attributes, reduceOp);\n      };\n      reduceMinNaive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, _output, axes) => {\n          const idxZero = [];\n          for (let k = 0; k < input.rank; k++) {\n            if (axes.indexOf(k) >= 0 || axes.length === 0) {\n              idxZero.push(`input_indices[${k}] = 0;`);\n            }\n          }\n          return [\n            `${idxZero.join("\\n")}`,\n            `var value = ${input.getByIndices("input_indices")};`,\n            `value = min(value, ${input.getByIndices("input_indices")});`,\n            ""\n          ];\n        };\n        runReduceProgram(context, "ReduceMin", attributes, reduceOp);\n      };\n      reduceProdNaive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, output) => [\n          `var value = ${output.type.storage}(1);`,\n          "",\n          `value *= ${input.getByIndices("input_indices")};`,\n          ""\n        ];\n        runReduceProgram(context, "ReduceProd", attributes, reduceOp);\n      };\n      reduceSumNaive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, output) => [\n          `var value = ${output.type.storage}(0);`,\n          "",\n          `value += ${input.getByIndices("input_indices")};`,\n          ""\n        ];\n        runReduceProgram(context, "ReduceSum", attributes, reduceOp);\n      };\n      reduceSumSquareNaive = (context, attributes) => {\n        validateInputs2(context.inputs);\n        const reduceOp = (input, output) => [\n          `var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n          "",\n          `t = ${input.getByIndices("input_indices")}; value += t * t;`,\n          ""\n        ];\n        runReduceProgram(context, "ReduceSumSquare", attributes, reduceOp);\n      };\n      useNaiveReduceMethod = (shape, axes, noopWithEmptyAxes) => {\n        if (axes.length === 0) {\n          return noopWithEmptyAxes;\n        }\n        let outputSize = 1;\n        let reduceSize = 1;\n        for (let dim = 0; dim < axes.length; dim++) {\n          if (axes.indexOf(dim) === -1) {\n            outputSize *= shape[dim];\n          } else {\n            reduceSize *= shape[dim];\n          }\n        }\n        return reduceSize < 32 && outputSize > 1024;\n      };\n      reduceMean = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceMeanNaive(context, attributes);\n        } else {\n          reduceMeanShared(context, attributes);\n        }\n      };\n      reduceL1 = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceL1Naive(context, attributes);\n        } else {\n          reduceL1Shared(context, attributes);\n        }\n      };\n      reduceL2 = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceL2Naive(context, attributes);\n        } else {\n          reduceL2Shared(context, attributes);\n        }\n      };\n      reduceLogSumExp = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceLogSumExpNaive(context, attributes);\n        } else {\n          reduceLogSumExpShared(context, attributes);\n        }\n      };\n      reduceMax = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceMaxNaive(context, attributes);\n        } else {\n          reduceMaxShared(context, attributes);\n        }\n      };\n      reduceMin = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceMinNaive(context, attributes);\n        } else {\n          reduceMinShared(context, attributes);\n        }\n      };\n      reduceProd = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceProdNaive(context, attributes);\n        } else {\n          reduceProdShared(context, attributes);\n        }\n      };\n      reduceSum = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceSumNaive(context, attributes);\n        } else {\n          reduceSumShared(context, attributes);\n        }\n      };\n      reduceSumSquare = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceSumSquareNaive(context, attributes);\n        } else {\n          reduceSumSquareShared(context, attributes);\n        }\n      };\n      reduceLogSum = (context, attributes) => {\n        if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n          reduceLogSumNaive(context, attributes);\n        } else {\n          reduceLogSumShared(context, attributes);\n        }\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/argminmax.ts\n  var validateInputs3, argMin, argMax, parseArgMinMaxAttributes;\n  var init_argminmax = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/argminmax.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_attribute_with_cache_key();\n      init_reduce();\n      validateInputs3 = (inputs) => {\n        if (!inputs || inputs.length === 0 || inputs.length > 2) {\n          throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");\n        }\n        if (inputs[0].dataType !== 1 /* float */) {\n          throw new Error("Invalid input type.");\n        }\n      };\n      argMin = (context, attributes) => {\n        validateInputs3(context.inputs);\n        const argMinMaxOp = (input, output, axes) => {\n          const idxZero = [];\n          for (let k = 0; k < input.rank; k++) {\n            if (axes.indexOf(k) >= 0 || axes.length === 0) {\n              idxZero.push(`input_indices[${k}] = 0;`);\n            }\n          }\n          return [\n            `${idxZero.join("\\n")}`,\n            `var value = ${input.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,\n            `if (${input.getByIndices("input_indices")} ${attributes.selectLastIndex > 0 ? "<=" : "<"} value) {\n         value = ${input.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,\n            "",\n            output.setByOffset("global_idx", "best_index")\n          ];\n        };\n        context.compute(\n          createReduceProgramInfo(\n            "ArgMin",\n            { hint: attributes.cacheKey, inputDependencies: ["rank"] },\n            [context.inputs[0]],\n            argMinMaxOp,\n            [attributes.axis],\n            7 /* int64 */,\n            attributes.keepDims\n          ),\n          { inputs: [0] }\n        );\n      };\n      argMax = (context, attributes) => {\n        validateInputs3(context.inputs);\n        const argMinMaxOp = (input, output, axes) => {\n          const idxZero = [];\n          for (let k = 0; k < input.rank; k++) {\n            if (axes.indexOf(k) >= 0 || axes.length === 0) {\n              idxZero.push(`input_indices[${k}] = 0;`);\n            }\n          }\n          return [\n            `${idxZero.join("\\n")}`,\n            `var value = ${input.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,\n            `if (${input.getByIndices("input_indices")} ${attributes.selectLastIndex > 0 ? ">=" : ">"} value) {\n         value = ${input.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,\n            "",\n            output.setByOffset("global_idx", "best_index")\n          ];\n        };\n        context.compute(\n          createReduceProgramInfo(\n            "argMax",\n            { hint: attributes.cacheKey, inputDependencies: ["rank"] },\n            [context.inputs[0]],\n            argMinMaxOp,\n            [attributes.axis],\n            7 /* int64 */,\n            attributes.keepDims\n          ),\n          { inputs: [0] }\n        );\n      };\n      parseArgMinMaxAttributes = (attributes) => createAttributeWithCacheKey(attributes);\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/attention.ts\n  var validateAttentionInputs, computeInPlaceSoftmax, computeAttentionProbs, computeVxAttentionScore, applyAttention, prepare, attention;\n  var init_attention = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/attention.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_types();\n      init_common();\n      validateAttentionInputs = (inputs, attributes) => {\n        const input = inputs[0];\n        const weights = inputs[1];\n        const bias = inputs[2];\n        const maskIndex = inputs[3];\n        const past = inputs[4];\n        const relativePositionBias = inputs[5];\n        if (past && relativePositionBias) {\n          throw new Error("Attention cannot have both past and relative_position_bias");\n        }\n        if (input.dims.length !== 3) {\n          throw new Error(\'Input "input" must have 3 dimensions\');\n        }\n        const batchSize = input.dims[0];\n        const sequenceLength = input.dims[1];\n        const inputHiddenSize = input.dims[2];\n        if (bias.dims.length !== 1) {\n          throw new Error(\'Input "bias" is expected to have 1 dimensions\');\n        }\n        if (weights.dims.length !== 2) {\n          throw new Error(\'Input "weights" is expected to have 2 dimensions\');\n        }\n        if (weights.dims[0] !== inputHiddenSize) {\n          throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");\n        }\n        if (bias.dims[0] !== weights.dims[1]) {\n          throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');\n        }\n        let qHiddenSize = bias.dims[0] / 3;\n        let kHiddenSize = qHiddenSize;\n        let vHiddenSize = kHiddenSize;\n        if (attributes.qkvHiddenSizes.length > 0) {\n          if (attributes.qkvHiddenSizes.length !== 3) {\n            throw new Error("qkv_hidden_sizes attribute should have 3 elements");\n          }\n          for (const sz of attributes.qkvHiddenSizes) {\n            if (sz % attributes.numHeads !== 0) {\n              throw new Error("qkv_hidden_sizes should be divisible by num_heads");\n            }\n          }\n          qHiddenSize = attributes.qkvHiddenSizes[0];\n          kHiddenSize = attributes.qkvHiddenSizes[1];\n          vHiddenSize = attributes.qkvHiddenSizes[2];\n        }\n        const kvSequenceLength = sequenceLength;\n        if (qHiddenSize !== kHiddenSize) {\n          throw new Error("qkv_hidden_sizes first element should be same as the second");\n        }\n        if (bias.dims[0] !== qHiddenSize + kHiddenSize + vHiddenSize) {\n          throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');\n        }\n        let pastSequenceLength = 0;\n        if (past) {\n          if (kHiddenSize !== vHiddenSize) {\n            throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');\n          }\n          if (past.dims.length !== 5) {\n            throw new Error(\'Input "past" must have 5 dimensions\');\n          }\n          if (past.dims[0] !== 2) {\n            throw new Error(\'Input "past" first dimension must be 2\');\n          }\n          if (past.dims[1] !== batchSize) {\n            throw new Error(\'Input "past" second dimension must be batch_size\');\n          }\n          if (past.dims[2] !== attributes.numHeads) {\n            throw new Error(\'Input "past" third dimension must be num_heads\');\n          }\n          if (past.dims[4] !== kHiddenSize / attributes.numHeads) {\n            throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');\n          }\n          if (!attributes.pastPresentShareBuffer) {\n            pastSequenceLength = past.dims[3];\n          }\n        }\n        const totalSequenceLength = kvSequenceLength + pastSequenceLength;\n        const maxSequenceLength = -1;\n        const maskType = 0 /* none */;\n        if (maskIndex) {\n          throw new Error("Mask not supported");\n        }\n        if (past) {\n          throw new Error("past is not supported");\n        }\n        if (relativePositionBias) {\n          throw new Error("relativePositionBias is not supported");\n        }\n        return {\n          batchSize,\n          sequenceLength,\n          pastSequenceLength,\n          kvSequenceLength,\n          totalSequenceLength,\n          maxSequenceLength,\n          inputHiddenSize,\n          hiddenSize: qHiddenSize,\n          vHiddenSize,\n          headSize: Math.floor(qHiddenSize / attributes.numHeads),\n          vHeadSize: Math.floor(vHiddenSize / attributes.numHeads),\n          numHeads: attributes.numHeads,\n          isUnidirectional: false,\n          pastPresentShareBuffer: false,\n          maskFilterValue: attributes.maskFilterValue,\n          maskType,\n          scale: attributes.scale,\n          broadcastResPosBias: false,\n          passPastInKv: false,\n          qkvFormat: 1 /* qkvBNSH */\n        };\n      };\n      computeInPlaceSoftmax = (context, input, n, d) => {\n        const components = getMaxComponents(d);\n        let WG = 64;\n        const dComp = d / components;\n        if (dComp < WG) {\n          WG = 1;\n        } else if (dComp / 8 < 64) {\n          WG = Math.ceil(dComp / 8);\n        }\n        const elementsPerWG = Math.ceil(d / components / WG);\n        const tensorDataType = tensorDataTypeEnumToString(input.dataType);\n        const programUniforms = [{ type: tensorDataType, data: 1 / d }, { type: "uint32", data: dComp }, { type: "uint32", data: elementsPerWG }];\n        const dataType = tensorTypeToWsglStorageType(input.dataType, components);\n        const getShaderSource = (shaderHelper) => {\n          const inputHelper = outputVariable("x", input.dataType, input.dims, components);\n          let threadMaxValue = "thread_max_vector";\n          if (components === 2) {\n            threadMaxValue = "max(thread_max_vector.x, thread_max_vector.y)";\n          } else if (components === 4) {\n            threadMaxValue = "max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";\n          }\n          const elemValueType = tensorTypeToWsglValueType(input.dataType);\n          const uniforms = [\n            { name: "d_inv", type: elemValueType },\n            { name: "d_comp", type: "u32" },\n            { name: "elements_per_wg", type: "u32" }\n          ];\n          return `\n  var<workgroup> wgMax: array<f32, ${WG}>;\n  var<workgroup> wgSum: array<f32, ${WG}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(inputHelper)}\n  ${shaderHelper.mainStart([\n            WG,\n            1,\n            1\n          ])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${fillVector("f32", components, "-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${castToF32(elemValueType, components, "x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${threadMaxValue};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${WG}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${fillVector("f32", components, "0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${castToF32(elemValueType, components, "x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${sumVector("sumVector", components)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${WG}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${fillVector("f32", components, "uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${castToF32(elemValueType, components, "x[offset + i]")};\n        x[offset + i] = ${inputHelper.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`;\n        };\n        context.compute(\n          {\n            name: "AttentionProbsSoftmax",\n            shaderCache: { hint: `${WG};${dataType};${components}` },\n            getShaderSource,\n            getRunData: () => ({ outputs: [], dispatchGroup: { x: n }, programUniforms })\n          },\n          { inputs: [input], outputs: [] }\n        );\n      };\n      computeAttentionProbs = (context, q, key, _bias, parameters, attributes) => {\n        const probsShape = [\n          parameters.batchSize,\n          parameters.numHeads,\n          parameters.sequenceLength,\n          parameters.kvSequenceLength + parameters.pastSequenceLength\n        ];\n        const alpha = attributes.scale === 0 ? 1 / Math.sqrt(parameters.headSize) : attributes.scale;\n        const components = getMaxComponents(parameters.headSize);\n        const vectorizedHeadSize = parameters.headSize / components;\n        const TILE_SIZE = 12;\n        const dispatch = {\n          x: Math.ceil(parameters.totalSequenceLength / TILE_SIZE),\n          y: Math.ceil(parameters.sequenceLength / TILE_SIZE),\n          z: parameters.batchSize * parameters.numHeads\n        };\n        const tensorDataType = tensorDataTypeEnumToString(q.dataType);\n        const programUniforms = [\n          { type: "uint32", data: parameters.sequenceLength },\n          { type: "uint32", data: vectorizedHeadSize },\n          { type: "uint32", data: parameters.totalSequenceLength },\n          { type: "uint32", data: parameters.kvSequenceLength },\n          { type: tensorDataType, data: alpha }\n        ];\n        const inputs = [q, key];\n        const getShaderSource = (shaderHelper) => {\n          const qInput = inputVariable("q", q.dataType, q.dims, components);\n          const kInput = inputVariable("key", key.dataType, key.dims, components);\n          const output = outputVariable("output", q.dataType, probsShape);\n          const dataType = tensorTypeToWsglStorageType(q.dataType);\n          const uniforms = [\n            { name: "M", type: "u32" },\n            { name: "K", type: "u32" },\n            { name: "N", type: "u32" },\n            { name: "kv_sequence_length", type: "u32" },\n            { name: "alpha", type: dataType }\n          ];\n          return `\n  const beta: ${dataType} = 1.0;\n  const TILE_SIZE = ${TILE_SIZE}u;\n\n  var<workgroup> tileQ: array<${qInput.type.storage}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileK: array<${qInput.type.storage}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(qInput, kInput, output)}\n  ${shaderHelper.mainStart([\n            TILE_SIZE,\n            TILE_SIZE,\n            1\n          ])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${fillVector(dataType, components)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${sumVector("value", components)} * uniforms.alpha;\n    }\n  }`;\n        };\n        const probs = context.compute(\n          {\n            name: "AttentionProbs",\n            shaderCache: { hint: `${components}`, inputDependencies: ["type", "type"] },\n            getRunData: () => ({\n              outputs: [{ dims: probsShape, dataType: q.dataType, gpuDataType: 0 /* default */ }],\n              dispatchGroup: dispatch,\n              programUniforms\n            }),\n            getShaderSource\n          },\n          { inputs, outputs: [-1] }\n        )[0];\n        computeInPlaceSoftmax(\n          context,\n          probs,\n          parameters.batchSize * parameters.numHeads * parameters.sequenceLength,\n          parameters.totalSequenceLength\n        );\n        return probs;\n      };\n      computeVxAttentionScore = (context, probs, v, params) => {\n        const outputShape = [params.batchSize, params.sequenceLength, params.vHiddenSize];\n        const TILE_SIZE = 12;\n        const dispatch = {\n          x: Math.ceil(params.vHeadSize / TILE_SIZE),\n          y: Math.ceil(params.sequenceLength / TILE_SIZE),\n          z: params.batchSize * params.numHeads\n        };\n        const programUniforms = [\n          { type: "uint32", data: params.sequenceLength },\n          { type: "uint32", data: params.totalSequenceLength },\n          { type: "uint32", data: params.vHeadSize },\n          { type: "uint32", data: params.numHeads },\n          { type: "uint32", data: params.vHiddenSize }\n        ];\n        const getShaderSource = (shaderHelper) => {\n          const probsHelper = inputVariable("probs", probs.dataType, probs.dims);\n          const vHelper = inputVariable("v", v.dataType, v.dims);\n          const output = outputVariable("output", probs.dataType, outputShape);\n          const uniforms = [\n            { name: "M", type: "u32" },\n            { name: "K", type: "u32" },\n            { name: "N", type: "u32" },\n            { name: "num_heads", type: "u32" },\n            { name: "v_hidden_size", type: "u32" }\n          ];\n          return `\n  const TILE_SIZE = ${TILE_SIZE}u;\n  var<workgroup> tileQ: array<${probsHelper.type.value}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileK: array<${probsHelper.type.value}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(probsHelper, vHelper, output)}\n  ${shaderHelper.mainStart([\n            TILE_SIZE,\n            TILE_SIZE,\n            1\n          ])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${probsHelper.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`;\n        };\n        return context.compute(\n          {\n            name: "AttentionScore",\n            shaderCache: { inputDependencies: ["type", "type"] },\n            getRunData: () => ({\n              outputs: [{ dims: outputShape, dataType: probs.dataType, gpuDataType: 0 /* default */ }],\n              dispatchGroup: dispatch,\n              programUniforms\n            }),\n            getShaderSource\n          },\n          { inputs: [probs, v], outputs: [0] }\n        )[0];\n      };\n      applyAttention = (context, q, k, v, _maskIndex, _past, _pastKey, _pastValue, relativePositionBias, parameters, attributes) => {\n        const probs = computeAttentionProbs(context, q, k, relativePositionBias, parameters, attributes);\n        computeVxAttentionScore(context, probs, v, parameters);\n      };\n      prepare = (context, parameters) => {\n        const outputShape = [\n          parameters.batchSize,\n          parameters.numHeads,\n          parameters.sequenceLength,\n          parameters.headSize\n        ];\n        const M = parameters.sequenceLength;\n        const K = parameters.inputHiddenSize;\n        const N = parameters.headSize;\n        const TILE_SIZE = 12;\n        const dispatch = {\n          x: Math.ceil(parameters.headSize / TILE_SIZE),\n          y: Math.ceil(parameters.sequenceLength / TILE_SIZE),\n          z: parameters.batchSize * parameters.numHeads\n        };\n        const inputs = [context.inputs[0], context.inputs[1], context.inputs[2]];\n        const programUniforms = [\n          { type: "uint32", data: M },\n          { type: "uint32", data: K },\n          { type: "uint32", data: N },\n          { type: "uint32", data: parameters.numHeads },\n          { type: "uint32", data: parameters.headSize },\n          { type: "uint32", data: parameters.hiddenSize },\n          { type: "uint32", data: parameters.hiddenSize + parameters.hiddenSize + parameters.vHiddenSize }\n        ];\n        const getShaderSource = (shaderHelper) => {\n          const outputQ = outputVariable("output_q", inputs[0].dataType, outputShape);\n          const outputK = outputVariable("output_k", inputs[0].dataType, outputShape);\n          const outputV = outputVariable("output_v", inputs[0].dataType, outputShape);\n          const input = inputVariable("input", inputs[0].dataType, inputs[0].dims);\n          const weight = inputVariable("weight", inputs[1].dataType, inputs[1].dims);\n          const bias = inputVariable("bias", inputs[2].dataType, inputs[2].dims);\n          const dataType = input.type.storage;\n          const uniforms = [\n            { name: "M", type: "u32" },\n            { name: "K", type: "u32" },\n            { name: "N", type: "u32" },\n            { name: "num_heads", type: "u32" },\n            { name: "head_size", type: "u32" },\n            { name: "hidden_size", type: "u32" },\n            { name: "ldb", type: "u32" }\n          ];\n          return `\n  const TILE_SIZE = ${TILE_SIZE}u;\n  var<workgroup> tileInput: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightQ: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightK: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightV: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(input, weight, bias, outputQ, outputK, outputV)}\n  ${shaderHelper.mainStart([\n            TILE_SIZE,\n            TILE_SIZE,\n            1\n          ])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${dataType}(0);\n    var valueK = ${dataType}(0);\n    var valueV = ${dataType}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`;\n        };\n        return context.compute(\n          {\n            name: "AttentionPrepare",\n            shaderCache: { inputDependencies: ["type", "type", "type"] },\n            getRunData: () => ({\n              outputs: [\n                { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: 0 /* default */ },\n                { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: 0 /* default */ },\n                { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: 0 /* default */ }\n              ],\n              dispatchGroup: dispatch,\n              programUniforms\n            }),\n            getShaderSource\n          },\n          { inputs, outputs: [-1, -1, -1] }\n        );\n      };\n      attention = (context, attributes) => {\n        const params = validateAttentionInputs(context.inputs, attributes);\n        const [q, k, v] = prepare(context, params);\n        return applyAttention(\n          context,\n          q,\n          k,\n          v,\n          context.inputs[4],\n          void 0,\n          void 0,\n          void 0,\n          context.inputs[5],\n          params,\n          attributes\n        );\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/batch-norm.ts\n  var validateInputs4, createBatchNormInferenceProgramInfo, parseBatchNormAttributes, batchNorm;\n  var init_batch_norm = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/batch-norm.ts"() {\n      "use strict";\n      init_esm();\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs4 = (inputs, attributes) => {\n        if (!inputs || inputs.length !== 5) {\n          throw new Error("BatchNormalization requires 5 inputs");\n        }\n        const checkShapeEqual = (actual, expected, message) => {\n          const r = expected.length;\n          if (r !== actual.length) {\n            throw new Error(`${message}: num dimensions != ${r}`);\n          }\n          expected.forEach((v, i) => {\n            if (v !== actual[i]) {\n              throw new Error(`${message}: dim[${i}] do not match`);\n            }\n          });\n        };\n        if (inputs[0].dims.length > 1) {\n          const shape = attributes.format === "NHWC" ? attributes.spatial ? inputs[0].dims.slice(-1) : inputs[0].dims.slice(-1).concat(inputs[0].dims.slice(1, inputs[0].dims.length - 1)) : inputs[0].dims.slice(1, attributes.spatial ? 2 : void 0);\n          checkShapeEqual(inputs[1].dims, shape, "Invalid input scale");\n          checkShapeEqual(inputs[2].dims, shape, "Invalid input B");\n          checkShapeEqual(inputs[3].dims, shape, "Invalid input mean");\n          checkShapeEqual(inputs[4].dims, shape, "Invalid input var");\n        } else {\n          checkShapeEqual(inputs[1].dims, [1], "Invalid input scale");\n          checkShapeEqual(inputs[2].dims, [1], "Invalid input B");\n          checkShapeEqual(inputs[3].dims, [1], "Invalid input mean");\n          checkShapeEqual(inputs[4].dims, [1], "Invalid input var");\n        }\n      };\n      createBatchNormInferenceProgramInfo = (inputs, attributes) => {\n        const { epsilon, spatial, format } = attributes;\n        const yShape = inputs[0].dims;\n        const components = spatial ? getMaxComponents(yShape[yShape.length - 1]) : 1;\n        const cComponents = format === "NHWC" && yShape.length > 1 ? components : 1;\n        const outputSize = ShapeUtil.size(yShape) / components;\n        const useShapesUniforms = enableShapesUniforms(yShape.length) && spatial;\n        const shapeOrRank = useShapesUniforms ? yShape.length : yShape;\n        const x = inputVariable("x", inputs[0].dataType, inputs[0].dims, components);\n        const scale = inputVariable("scale", inputs[1].dataType, inputs[1].dims, cComponents);\n        const bias = inputVariable("bias", inputs[2].dataType, inputs[2].dims, cComponents);\n        const inputMean = inputVariable("inputMean", inputs[3].dataType, inputs[3].dims, cComponents);\n        const inputVar = inputVariable("inputVar", inputs[4].dataType, inputs[4].dims, cComponents);\n        const y = outputVariable("y", inputs[0].dataType, shapeOrRank, components);\n        const calcCOffset = () => {\n          let cOffset = "";\n          if (spatial) {\n            cOffset = `let cOffset = ${yShape.length === 1 ? "0u" : format === "NHWC" ? `outputIndices[${yShape.length - 1}] / ${components}` : "outputIndices[1]"};`;\n          } else {\n            if (format === "NCHW") {\n              cOffset = `\n            ${y.indicesSet("outputIndices", "0", "0")}\n            let cOffset = ${y.indicesToOffset("outputIndices")};`;\n            } else {\n              cOffset = `var cIndices = ${scale.type.indices}(0);\n                       cIndices[0] = outputIndices[${yShape.length - 1}];`;\n              for (let i = 1; i < scale.rank; i++) {\n                cOffset += `cIndices[${i}] = outputIndices[${i}];`;\n              }\n              cOffset += `let cOffset = ${scale.indicesToOffset("cIndices")};`;\n            }\n          }\n          return cOffset;\n        };\n        const getInferenceModeShaderSource = (helper) => `\n  const epsilon = ${epsilon};\n  ${helper.registerUniform("outputSize", "u32").declareVariables(x, scale, bias, inputMean, inputVar, y)}\n  ${helper.mainStart()}\n  ${helper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${y.offsetToIndices(`global_idx * ${components}`)};\n    ${calcCOffset()}\n    let scale = ${scale.getByOffset("cOffset")};\n    let bias = ${bias.getByOffset("cOffset")};\n    let inputMean = ${inputMean.getByOffset("cOffset")};\n    let inputVar = ${inputVar.getByOffset("cOffset")};\n    let x = ${x.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${y.setByOffset("global_idx", "value")}\n  }`;\n        return {\n          name: "BatchNormalization",\n          shaderCache: {\n            hint: `${attributes.epsilon}_${attributes.format}_${spatial}_${components}`,\n            inputDependencies: useShapesUniforms ? ["rank", "type", "type", "type", "type"] : void 0\n          },\n          getShaderSource: getInferenceModeShaderSource,\n          getRunData: () => ({\n            outputs: [{ dims: inputs[0].dims, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms: useShapesUniforms ? [\n              { type: "uint32", data: outputSize },\n              ...createTensorShapeVariables(yShape)\n            ] : [\n              { type: "uint32", data: outputSize }\n            ]\n          })\n        };\n      };\n      parseBatchNormAttributes = (attributes) => createAttributeWithCacheKey(attributes);\n      batchNorm = (context, attributes) => {\n        const { inputs, outputCount } = context;\n        const updatedAttributes = parseBatchNormAttributes({ ...attributes, outputCount });\n        if (env2.webgpu.validateInputContent) {\n          validateInputs4(inputs, updatedAttributes);\n        }\n        if (attributes.trainingMode) {\n          throw new Error("BatchNormalization trainingMode is not supported yet.");\n        } else {\n          context.compute(createBatchNormInferenceProgramInfo(inputs, updatedAttributes));\n        }\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/bias-add.ts\n  var validateInputs5, createBiasAddProgramInfo, biasAdd;\n  var init_bias_add = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/bias-add.ts"() {\n      "use strict";\n      init_util();\n      init_common();\n      validateInputs5 = (inputs) => {\n        if (inputs[0].dims.length !== 3) {\n          throw new Error("input should have 3 dimensions");\n        }\n        if (![320, 640, 1280].includes(inputs[0].dims[2])) {\n          throw new Error("number of channels should be 320, 640 or 1280");\n        }\n        if (inputs[1].dims.length !== 1) {\n          throw new Error("bias is expected to have 1 dimensions");\n        }\n        if (inputs[0].dims[2] !== inputs[1].dims[0]) {\n          throw new Error("last dimension of input and bias are not the same");\n        }\n      };\n      createBiasAddProgramInfo = (inputs) => {\n        const outputShape = inputs[0].dims;\n        const channels = inputs[0].dims[2];\n        const outputSize = ShapeUtil.size(outputShape) / 4;\n        const dataType = inputs[0].dataType;\n        const input = inputVariable("input", dataType, outputShape, 4);\n        const bias = inputVariable("bias", dataType, [channels], 4);\n        const residual = inputVariable("residual", dataType, outputShape, 4);\n        const output = outputVariable("output", dataType, outputShape, 4);\n        const getShaderSource = (shaderHelper) => `\n  const channels = ${channels}u / 4;\n  ${shaderHelper.declareVariables(input, bias, residual, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let value = ${input.getByOffset("global_idx")}\n      + ${bias.getByOffset("global_idx % channels")} + ${residual.getByOffset("global_idx")};\n    ${output.setByOffset("global_idx", "value")}\n  }`;\n        return {\n          name: "BiasAdd",\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) }\n          }),\n          getShaderSource\n        };\n      };\n      biasAdd = (context) => {\n        validateInputs5(context.inputs);\n        context.compute(createBiasAddProgramInfo(context.inputs));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/unary-op.ts\n  var createElementwiseProgramShader, createElementwiseProgramInfo, abs, acos, acosh, asin, asinh, atan, atanh, parseCastAttributes, cast, generateClipAttributesFromInputs, clip, ceil, cos, cosh, parseAlphaAttributes, elu, erfImpl, erf, exp, floor, gelu, leakyRelu, not, neg, reciprocal, relu, sigmoid, sin, sinh, sqrt, tan, tanh, thresholdedRelu, log;\n  var init_unary_op = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/unary-op.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      createElementwiseProgramShader = (shaderHelper, datasize, inputDataType, outputDataType, funcCall, additionalImplementation) => {\n        const vecSize = Math.ceil(datasize / 4);\n        let expression = "";\n        if (typeof funcCall === "string") {\n          expression = `${funcCall}(a)`;\n        } else {\n          expression = funcCall("a");\n        }\n        const input = inputVariable("inputData", inputDataType, [vecSize], 4);\n        const output = outputVariable("outputData", outputDataType, [vecSize], 4);\n        return `\n      ${shaderHelper.registerUniform("vec_size", "u32").declareVariables(input, output)}\n\n  ${additionalImplementation ?? ""}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${input.getByOffset("global_idx")};\n    ${output.setByOffset("global_idx", expression)}\n  }`;\n      };\n      createElementwiseProgramInfo = (input, name, funcCall, additionalImplementation, cacheKey, outputDataType = input.dataType) => ({\n        name,\n        shaderCache: { hint: cacheKey, inputDependencies: ["type"] },\n        getShaderSource: (shaderHelper) => createElementwiseProgramShader(\n          shaderHelper,\n          ShapeUtil.size(input.dims),\n          input.dataType,\n          outputDataType,\n          funcCall,\n          additionalImplementation\n        ),\n        getRunData: (inputTensors) => ({\n          outputs: [{ dims: input.dims, dataType: outputDataType }],\n          dispatchGroup: { x: Math.ceil(\n            ShapeUtil.size(inputTensors[0].dims) / 64 / 4\n            /* vec size */\n          ) },\n          programUniforms: [\n            { type: "uint32", data: Math.ceil(ShapeUtil.size(input.dims) / 4) }\n          ]\n        })\n      });\n      abs = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Abs", "abs"));\n      };\n      acos = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Acos", "acos"));\n      };\n      acosh = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Acosh", "acosh"));\n      };\n      asin = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Asin", "asin"));\n      };\n      asinh = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Asinh", "asinh"));\n      };\n      atan = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Atan", "atan"));\n      };\n      atanh = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Atanh", "atanh"));\n      };\n      parseCastAttributes = (attributes) => createAttributeWithCacheKey(attributes);\n      cast = (context, attributes) => {\n        let func;\n        switch (attributes.to) {\n          case 10 /* float16 */:\n            func = "vec4<f16>";\n            break;\n          case 1 /* float */:\n            func = "vec4<f32>";\n            break;\n          case 12 /* uint32 */:\n            func = "vec4<u32>";\n            break;\n          case 6 /* int32 */:\n            func = "vec4<i32>";\n            break;\n          case 9 /* bool */:\n            func = "vec4<bool>";\n            break;\n          default:\n            throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${attributes.to}`);\n        }\n        context.compute(\n          createElementwiseProgramInfo(context.inputs[0], "Cast", func, void 0, attributes.cacheKey, attributes.to)\n        );\n      };\n      generateClipAttributesFromInputs = (inputs) => {\n        const min = inputs.length >= 2 && inputs[1].data !== 0 ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n        const max = inputs.length >= 3 && inputs[2].data !== 0 ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n        return createAttributeWithCacheKey({ min, max });\n      };\n      clip = (context, clipAttributes) => {\n        const attributes = context.inputs.length === 1 ? clipAttributes : generateClipAttributesFromInputs(context.inputs);\n        const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n        context.compute(\n          createElementwiseProgramInfo(\n            context.inputs[0],\n            "Clip",\n            (a) => `clamp(${a}, clip_min_, clip_max_)`,\n            `\n    const clip_min_: vec4<${dataType}> = vec4(${dataType}(${attributes.min}));\n    const clip_max_: vec4<${dataType}> = vec4(${dataType}(${attributes.max}));\n`,\n            attributes.cacheKey\n          ),\n          { inputs: [0] }\n        );\n      };\n      ceil = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Ceil", "ceil"));\n      };\n      cos = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Cos", "cos"));\n      };\n      cosh = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Cosh", "cosh"));\n      };\n      parseAlphaAttributes = (attributes) => createAttributeWithCacheKey(attributes);\n      elu = (context, attributes) => {\n        const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n        context.compute(createElementwiseProgramInfo(\n          context.inputs[0],\n          "Elu",\n          (a) => `elu_vf32(${a})`,\n          `\n  const elu_alpha_ = ${dataType}(${attributes.alpha});\n\n  fn elu_f32(a: ${dataType}) -> ${dataType} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${dataType}>) -> vec4<${dataType}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n          attributes.cacheKey\n        ));\n      };\n      erfImpl = (dataType, varType = "f32") => `\nconst r0: ${varType} = 0.3275911;\nconst r1: ${varType} = 0.254829592;\nconst r2: ${varType} = -0.284496736;\nconst r3: ${varType} = 1.421413741;\nconst r4: ${varType} = -1.453152027;\nconst r5: ${varType} = 1.061405429;\n\nfn erf_vf32(v: ${dataType}) -> ${dataType} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`;\n      erf = (context) => {\n        const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n        context.compute(createElementwiseProgramInfo(\n          context.inputs[0],\n          "Erf",\n          (a) => `erf_vf32(${a})`,\n          erfImpl(`vec4<${dataType}>`, dataType)\n        ));\n      };\n      exp = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Exp", "exp"));\n      };\n      floor = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Floor", "floor"));\n      };\n      gelu = (context) => {\n        const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n        context.compute(createElementwiseProgramInfo(\n          context.inputs[0],\n          "Gelu",\n          (a) => `0.5 * ${a} * (1.0 + erf_vf32(${a} * 0.7071067811865475))`,\n          erfImpl(`vec4<${dataType}>`, dataType)\n        ));\n      };\n      leakyRelu = (context, attributes) => {\n        const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n        context.compute(createElementwiseProgramInfo(\n          context.inputs[0],\n          "LeakyRelu",\n          (a) => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<${dataType}>(0.0))`,\n          `const leaky_relu_alpha_ = ${dataType}(${attributes.alpha});`,\n          attributes.cacheKey\n        ));\n      };\n      not = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Not", (a) => `!${a}`));\n      };\n      neg = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Neg", (a) => `-${a}`));\n      };\n      reciprocal = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Reciprocal", (a) => `1.0/${a}`));\n      };\n      relu = (context) => {\n        const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n        context.compute(createElementwiseProgramInfo(\n          context.inputs[0],\n          "Relu",\n          (a) => `select(vec4<${dataType}>(0.0), ${a}, ${a} > vec4<${dataType}>(0.0))`\n        ));\n      };\n      sigmoid = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Sigmoid", (a) => `(1.0 / (1.0 + exp(-${a})))`));\n      };\n      sin = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Sin", "sin"));\n      };\n      sinh = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Sinh", "sinh"));\n      };\n      sqrt = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Sqrt", "sqrt"));\n      };\n      tan = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Tan", "tan"));\n      };\n      tanh = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Tanh", "tanh"));\n      };\n      thresholdedRelu = (context, attributes) => {\n        const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n        context.compute(createElementwiseProgramInfo(\n          context.inputs[0],\n          "ThresholdedRelu",\n          (a) => `select(vec4<${dataType}>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n          `const thresholded_relu_alpha_ = vec4<${dataType}>(${attributes.alpha});`,\n          attributes.cacheKey\n        ));\n        return 0;\n      };\n      log = (context) => {\n        context.compute(createElementwiseProgramInfo(context.inputs[0], "Log", "log"));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/bias-split-gelu.ts\n  var validateInputs6, createBiasSplitGeluProgramInfo, biasSplitGelu;\n  var init_bias_split_gelu = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/bias-split-gelu.ts"() {\n      "use strict";\n      init_util();\n      init_common();\n      init_unary_op();\n      validateInputs6 = (inputs) => {\n        if (inputs[0].dims.length !== 3) {\n          throw new Error("input should have 3 dimensions");\n        }\n        if (![2560, 5120, 10240].includes(inputs[0].dims[2])) {\n          throw new Error("hidden state should be 2560, 5120 or 10240");\n        }\n        if (inputs[1].dims.length !== 1) {\n          throw new Error("bias is expected to have 1 dimensions");\n        }\n        if (inputs[0].dims[2] !== inputs[1].dims[0]) {\n          throw new Error("last dimension of input and bias are not the same");\n        }\n      };\n      createBiasSplitGeluProgramInfo = (inputs) => {\n        const outputShape = inputs[0].dims.slice();\n        outputShape[2] = outputShape[2] / 2;\n        const input = inputVariable("input", inputs[0].dataType, inputs[0].dims, 4);\n        const bias = inputVariable("bias", inputs[0].dataType, [inputs[0].dims[2]], 4);\n        const output = outputVariable("output", inputs[0].dataType, outputShape, 4);\n        const outputSize = ShapeUtil.size(outputShape) / 4;\n        const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n        const getShaderSource = (shaderHelper) => `\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${inputs[0].dims[2] / 4 / 2}u;\n\n  ${shaderHelper.declareVariables(input, bias, output)}\n\n  ${erfImpl(`vec4<${dataType}>`, dataType)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${output.setByOffset("global_idx", "valueLeft * geluRight")}\n  }`;\n        return {\n          name: "BiasSplitGelu",\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) }\n          }),\n          getShaderSource\n        };\n      };\n      biasSplitGelu = (context) => {\n        validateInputs6(context.inputs);\n        context.compute(createBiasSplitGeluProgramInfo(context.inputs));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/binary-op.ts\n  var createBinaryOpProgramShader, createBinaryOpProgramInfo, runBinaryOp, add, div, equal, mul, pow, sub, greater, less, greaterOrEqual, lessOrEqual;\n  var init_binary_op = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/binary-op.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_common();\n      createBinaryOpProgramShader = (shaderHelper, dimsA, dimsB, dimsOutput, vectorize, doBroadcast, sharedDimensionDivisibleBy4, funcCall, typeA, typeB, typeOutput, useShapesUniforms, additionalImplementation) => {\n        let expressionScalar;\n        let expressionVector;\n        if (typeof funcCall === "string") {\n          expressionScalar = expressionVector = (a2, b2) => `${funcCall}((${a2}),(${b2}))`;\n        } else if (typeof funcCall === "function") {\n          expressionScalar = expressionVector = funcCall;\n        } else {\n          expressionScalar = funcCall.scalar;\n          expressionVector = funcCall.vector;\n        }\n        const inputAShapeOrRank = useShapesUniforms ? dimsA.length : dimsA;\n        const inputBShapeOrRank = useShapesUniforms ? dimsB.length : dimsB;\n        const outputShapeOrRank = useShapesUniforms ? dimsOutput.length : dimsOutput;\n        const output = outputVariable("outputData", typeOutput, outputShapeOrRank, 4);\n        const a = inputVariable("aData", typeA, inputAShapeOrRank, 4);\n        const b = inputVariable("bData", typeB, inputBShapeOrRank, 4);\n        let assignment;\n        if (vectorize) {\n          if (doBroadcast) {\n            const isAOneElement = ShapeUtil.size(dimsA) === 1;\n            const isBOneElement = ShapeUtil.size(dimsB) === 1;\n            const aLastDimDivisibleBy4 = dimsA.length > 0 && dimsA[dimsA.length - 1] % 4 === 0;\n            const bLastDimDivisibleBy4 = dimsB.length > 0 && dimsB[dimsB.length - 1] % 4 === 0;\n            if (isAOneElement || isBOneElement) {\n              assignment = output.setByOffset(\n                "global_idx",\n                expressionVector(\n                  isAOneElement ? `${a.type.value}(${a.getByOffset("0")}.x)` : a.getByOffset("global_idx"),\n                  isBOneElement ? `${b.type.value}(${b.getByOffset("0")}.x)` : b.getByOffset("global_idx")\n                )\n              );\n            } else {\n              assignment = `\n            let outputIndices = ${output.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${a.broadcastedIndicesToOffset("outputIndices", output)};\n            let offsetB = ${b.broadcastedIndicesToOffset("outputIndices", output)};\n            ${output.setByOffset(\n                "global_idx",\n                expressionVector(\n                  sharedDimensionDivisibleBy4 || aLastDimDivisibleBy4 ? a.getByOffset("offsetA / 4u") : `${a.type.value}(${a.getByOffset("offsetA / 4u")}[offsetA % 4u])`,\n                  sharedDimensionDivisibleBy4 || bLastDimDivisibleBy4 ? b.getByOffset("offsetB / 4u") : `${b.type.value}(${b.getByOffset("offsetB / 4u")}[offsetB % 4u])`\n                )\n              )}\n          `;\n            }\n          } else {\n            assignment = output.setByOffset(\n              "global_idx",\n              expressionVector(a.getByOffset("global_idx"), b.getByOffset("global_idx"))\n            );\n          }\n        } else {\n          if (!doBroadcast) {\n            throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");\n          }\n          const singleAssignment = (resStr, x, typeCast = "") => {\n            const expressionA = `aData[indexA${x}][componentA${x}]`;\n            const expressionB = `bData[indexB${x}][componentB${x}]`;\n            return `\n            let outputIndices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offsetA${x} = ${a.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let offsetB${x} = ${b.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let indexA${x} = offsetA${x} / 4u;\n            let indexB${x} = offsetB${x} / 4u;\n            let componentA${x} = offsetA${x} % 4u;\n            let componentB${x} = offsetB${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expressionScalar(expressionA, expressionB)});\n          `;\n          };\n          if (typeOutput === 9 /* bool */) {\n            assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment("data", 0, "u32")}\n            ${singleAssignment("data", 1, "u32")}\n            ${singleAssignment("data", 2, "u32")}\n            ${singleAssignment("data", 3, "u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n          } else {\n            assignment = `\n            ${singleAssignment("outputData[global_idx]", 0)}\n            ${singleAssignment("outputData[global_idx]", 1)}\n            ${singleAssignment("outputData[global_idx]", 2)}\n            ${singleAssignment("outputData[global_idx]", 3)}\n          `;\n          }\n        }\n        return `\n        ${shaderHelper.registerUniform("vec_size", "u32").declareVariables(a, b, output)}\n\n        ${additionalImplementation ?? ""}\n\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${assignment}\n      }`;\n      };\n      createBinaryOpProgramInfo = (name, cacheKey, a, b, funcCall, additionalImplementation, outputDataType = a.dataType) => {\n        const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n        let outputShape = a.dims;\n        let outputSize = ShapeUtil.size(a.dims);\n        let vectorize = false;\n        let sharedDimensionDivisibleBy4 = false;\n        const cacheKeyAux = [isBroadcast];\n        if (isBroadcast) {\n          const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n          if (!calculatedShape) {\n            throw new Error("Can\'t perform binary op on the given tensors");\n          }\n          outputShape = calculatedShape;\n          outputSize = ShapeUtil.size(outputShape);\n          const isAOneElement = ShapeUtil.size(a.dims) === 1;\n          const isBOneElement = ShapeUtil.size(b.dims) === 1;\n          const aLastDimDivisibleBy4 = a.dims.length > 0 && a.dims[a.dims.length - 1] % 4 === 0;\n          const bLastDimDivisibleBy4 = b.dims.length > 0 && b.dims[b.dims.length - 1] % 4 === 0;\n          cacheKeyAux.push(isAOneElement);\n          cacheKeyAux.push(isBOneElement);\n          cacheKeyAux.push(aLastDimDivisibleBy4);\n          cacheKeyAux.push(bLastDimDivisibleBy4);\n          let sharedDimension = 1;\n          for (let i = 1; i < outputShape.length; i++) {\n            const dimA = a.dims[a.dims.length - i] ?? 1;\n            const dimB = b.dims[b.dims.length - i] ?? 1;\n            if (dimA === dimB) {\n              sharedDimension *= dimA;\n            } else {\n              break;\n            }\n          }\n          if (sharedDimension % 4 === 0) {\n            sharedDimensionDivisibleBy4 = true;\n            vectorize = true;\n          } else if (isAOneElement || isBOneElement || aLastDimDivisibleBy4 || bLastDimDivisibleBy4) {\n            vectorize = true;\n          }\n        } else {\n          vectorize = true;\n        }\n        cacheKeyAux.push(vectorize);\n        const useShapesUniforms = enableShapesUniforms(a.dims.length) && enableShapesUniforms(b.dims.length) && enableShapesUniforms(outputShape.length);\n        return {\n          name,\n          shaderCache: {\n            hint: cacheKey + cacheKeyAux.map((x) => x.toString()).join("_"),\n            inputDependencies: useShapesUniforms ? ["rank", "rank"] : ["dims", "dims"]\n          },\n          getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper,\n            a.dims,\n            b.dims,\n            outputShape,\n            vectorize,\n            isBroadcast,\n            sharedDimensionDivisibleBy4,\n            funcCall,\n            a.dataType,\n            b.dataType,\n            outputDataType,\n            useShapesUniforms,\n            additionalImplementation\n          ),\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: outputDataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64 / 4\n              /* component size */\n            ) },\n            programUniforms: useShapesUniforms ? [\n              { type: "uint32", data: Math.ceil(ShapeUtil.size(outputShape) / 4) },\n              ...createTensorShapeVariables(a.dims),\n              ...createTensorShapeVariables(b.dims),\n              ...createTensorShapeVariables(outputShape)\n            ] : [\n              { type: "uint32", data: Math.ceil(ShapeUtil.size(outputShape) / 4) }\n            ]\n          })\n        };\n      };\n      runBinaryOp = (context, name, funcCall, additionalImplementation, cacheKey, outputDataType) => {\n        context.compute(createBinaryOpProgramInfo(\n          name,\n          cacheKey ?? "",\n          context.inputs[0],\n          context.inputs[1],\n          funcCall,\n          additionalImplementation,\n          outputDataType\n        ));\n      };\n      add = (context) => {\n        runBinaryOp(context, "Add", (a, b) => `${a}+${b}`);\n      };\n      div = (context) => {\n        runBinaryOp(context, "Div", (a, b) => `${a}/${b}`);\n      };\n      equal = (context) => {\n        runBinaryOp(\n          context,\n          "Equal",\n          { scalar: (a, b) => `u32(${a}==${b})`, vector: (a, b) => `vec4<u32>(${a}==${b})` },\n          void 0,\n          void 0,\n          9 /* bool */\n        );\n      };\n      mul = (context) => {\n        runBinaryOp(context, "Mul", (a, b) => `${a}*${b}`);\n      };\n      pow = (context) => {\n        const type = inputVariable("input", context.inputs[0].dataType, context.inputs[0].dims).type.value;\n        const roundStr = type === "i32" ? "round" : "";\n        runBinaryOp(\n          context,\n          "Pow",\n          { scalar: (a, b) => `pow_custom(${a},${b})`, vector: (a, b) => `pow_vector_custom(${a},${b})` },\n          `\n    fn pow_custom(a : ${type}, b : ${type}) -> ${type} {\n      if (b == ${type}(0.0)) {\n        return ${type}(1.0);\n      } else if (a < ${type}(0.0) && f32(b) != floor(f32(b))) {\n        return ${type}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${type}(1.0), round(f32(abs(b) % ${type}(2.0))) != 1.0) * ${type}(${roundStr}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${type}>, b : vec4<${type}>) -> vec4<${type}> {\n      // TODO: implement vectorized pow\n      return vec4<${type}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `\n        );\n      };\n      sub = (context) => {\n        runBinaryOp(context, "Sub", (a, b) => `${a}-${b}`);\n      };\n      greater = (context) => {\n        runBinaryOp(\n          context,\n          "Greater",\n          { scalar: (a, b) => `u32(${a}>${b})`, vector: (a, b) => `vec4<u32>(${a}>${b})` },\n          void 0,\n          void 0,\n          9 /* bool */\n        );\n      };\n      less = (context) => {\n        runBinaryOp(\n          context,\n          "Less",\n          { scalar: (a, b) => `u32(${a}<${b})`, vector: (a, b) => `vec4<u32>(${a}<${b})` },\n          void 0,\n          void 0,\n          9 /* bool */\n        );\n      };\n      greaterOrEqual = (context) => {\n        runBinaryOp(\n          context,\n          "GreaterOrEqual",\n          { scalar: (a, b) => `u32(${a}>=${b})`, vector: (a, b) => `vec4<u32>(${a}>=${b})` },\n          void 0,\n          void 0,\n          9 /* bool */\n        );\n      };\n      lessOrEqual = (context) => {\n        runBinaryOp(\n          context,\n          "LessOrEqual",\n          { scalar: (a, b) => `u32(${a}<=${b})`, vector: (a, b) => `vec4<u32>(${a}<=${b})` },\n          void 0,\n          void 0,\n          9 /* bool */\n        );\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/concat.ts\n  var validateInputs7, calculateInputIndexImpl, assignOutputData, createConcatProgramInfo, concat, parseConcatAttributes;\n  var init_concat = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/concat.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs7 = (inputs) => {\n        if (!inputs || inputs.length < 1) {\n          throw new Error("too few inputs");\n        }\n        const inputType = inputs[0].dataType;\n        const inputDimensionality = inputs[0].dims.length;\n        for (const input of inputs) {\n          if (input.dataType !== inputType) {\n            throw new Error("input tensors should be one type");\n          }\n          if (input.dims.length !== inputDimensionality) {\n            throw new Error("input tensors should have the same shape");\n          }\n        }\n      };\n      calculateInputIndexImpl = (numberOfTensors, sizeInConcatAxisStr) => `\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${numberOfTensors}u>(${sizeInConcatAxisStr});\n    for (var i: u32 = 0u; i < ${numberOfTensors}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${numberOfTensors}u;\n  }`;\n      assignOutputData = (inputs, output) => {\n        const numberOfTensors = inputs.length;\n        const codeLines = [];\n        for (let i = 0; i < numberOfTensors; ++i) {\n          const returnSnippet = output.setByOffset("global_idx", inputs[i].getByIndices("indices"));\n          if (numberOfTensors === 1) {\n            codeLines.push(returnSnippet);\n          } else if (i === 0) {\n            codeLines.push(`if (inputIndex == ${i}u) { ${returnSnippet} }`);\n          } else if (i === numberOfTensors - 1) {\n            codeLines.push(`else { ${returnSnippet} }`);\n          } else {\n            codeLines.push(`else if (inputIndex == ${i}) { ${returnSnippet} }`);\n          }\n        }\n        return codeLines.join("\\n");\n      };\n      createConcatProgramInfo = (inputs, axis) => {\n        const inputShape = inputs[0].dims.slice();\n        if (axis >= inputShape.length || axis < -1 * inputShape.length) {\n          throw new Error("axis specified for concat doesn\'t match input dimensionality");\n        }\n        const adjustedAxis = axis < 0 ? inputShape.length + axis : axis;\n        const outputShape = inputShape.slice(0);\n        for (let i = 1; i < inputs.length; i++) {\n          const dataNShape = inputs[i].dims.slice();\n          for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n            if (axisIndex === adjustedAxis) {\n              outputShape[adjustedAxis] += dataNShape[axisIndex];\n            } else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n              throw new Error("non concat dimensions must match");\n            }\n          }\n        }\n        const outputSize = ShapeUtil.size(outputShape);\n        const sizeInConcatAxis = new Array(inputs.length);\n        const inputVars = new Array(inputs.length);\n        const dataType = inputs[0].dataType;\n        let previousSum = 0;\n        const inputDependencies = [];\n        const inputShapeOrRanks = [];\n        const enableInputShapesUniforms = [];\n        const programUniforms = [{ type: "uint32", data: outputSize }];\n        for (let i = 0; i < inputs.length; ++i) {\n          previousSum += inputs[i].dims[adjustedAxis];\n          sizeInConcatAxis[i] = previousSum;\n          enableInputShapesUniforms.push(enableShapesUniforms(inputs[i].dims.length));\n          inputShapeOrRanks.push(enableInputShapesUniforms[i] ? inputs[i].dims.length : inputs[i].dims);\n          inputVars[i] = inputVariable(`input${i}`, dataType, inputShapeOrRanks[i]);\n          inputDependencies.push(enableInputShapesUniforms[i] ? "rank" : "dims");\n          programUniforms.push({ type: "uint32", data: sizeInConcatAxis[i] });\n        }\n        for (let i = 0; i < inputs.length; ++i) {\n          if (enableInputShapesUniforms[i]) {\n            programUniforms.push(...createTensorShapeVariables(inputs[i].dims));\n          }\n        }\n        const enableOutputShapesUniforms = enableShapesUniforms(outputShape.length);\n        if (enableOutputShapesUniforms) {\n          programUniforms.push(...createTensorShapeVariables(outputShape));\n        }\n        const outputShapeOrRank = enableOutputShapesUniforms ? outputShape.length : outputShape;\n        const output = outputVariable("output", dataType, outputShapeOrRank);\n        const indicesAxis = output.indicesGet("indices", adjustedAxis);\n        const sizeInConcatAxisStr = Array.from(Array(sizeInConcatAxis.length).keys()).map((i) => `uniforms.sizeInConcatAxis${i}`).join(",");\n        const getShaderSource = (shaderHelper) => `\n\n  ${(() => {\n          shaderHelper.registerUniform("outputSize", "u32");\n          for (let i = 0; i < inputs.length; i++) {\n            shaderHelper.registerUniform(`sizeInConcatAxis${i}`, "u32");\n          }\n          return shaderHelper.declareVariables(...inputVars, output);\n        })()}\n\n  ${calculateInputIndexImpl(sizeInConcatAxis.length, sizeInConcatAxisStr)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${output.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${indicesAxis});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}u>(${sizeInConcatAxisStr});\n      ${indicesAxis} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${assignOutputData(inputVars, output)}\n  }`;\n        return {\n          name: "Concat",\n          shaderCache: { hint: `${axis}`, inputDependencies },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n      concat = (context, attributes) => {\n        validateInputs7(context.inputs);\n        context.compute(createConcatProgramInfo(context.inputs, attributes.axis));\n      };\n      parseConcatAttributes = (attributes) => createAttributeWithCacheKey({ axis: attributes.axis });\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/fuse-utils.ts\n  var getActivationSnippet, parseInternalActivationAttributes;\n  var init_fuse_utils = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/fuse-utils.ts"() {\n      "use strict";\n      init_util();\n      getActivationSnippet = (attributes, valueType) => {\n        switch (attributes.activation) {\n          case "Relu":\n            return { activationFunction: "", applyActivation: `value = max(value, ${valueType}(0.0));` };\n          case "Sigmoid":\n            return {\n              activationFunction: "",\n              applyActivation: `value = (${valueType}(1.0) / (${valueType}(1.0) + exp(-value)));`\n            };\n          case "Clip":\n            return {\n              activationFunction: `const clip_min_=${valueType}(${attributes.clipMin});const clip_max_=${valueType}(${attributes.clipMax});`,\n              applyActivation: "value = clamp(value, clip_min_, clip_max_);"\n            };\n          default:\n            return { activationFunction: "", applyActivation: "" };\n        }\n      };\n      parseInternalActivationAttributes = (attributes) => {\n        const activation = attributes?.activation || "";\n        if (activation === "Clip") {\n          const [clipMin, clipMax] = attributes?.activation_params || [MIN_CLIP, MAX_CLIP];\n          return { activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}` };\n        }\n        return { activation, activationCacheKey: activation };\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts\n  var typeSnippet, biasSnippet;\n  var init_activation_util = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts"() {\n      "use strict";\n      typeSnippet = (component, dataType) => {\n        switch (component) {\n          case 1:\n            return dataType;\n          case 2:\n            return `vec2<${dataType}>`;\n          case 3:\n            return `vec3<${dataType}>`;\n          case 4:\n            return `vec4<${dataType}>`;\n          default:\n            throw new Error(`${component}-component is not supported.`);\n        }\n      };\n      biasSnippet = (hasBias) => `\n      ${hasBias ? "value = value + getBiasByOutputCoords(coords);" : ""}\n      `;\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts\n  var utilFunctions;\n  var init_conv_util = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts"() {\n      "use strict";\n      utilFunctions = (strideStr) => `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${strideStr}.x), i32(${strideStr}.y), i32(${strideStr}.z), 1));\n}\n`;\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts\n  var writeDataToSubAVec4Snippet, calculateResultSnippet, makeMatMulPackedVec4Source, writeDataToSubASnippet, readDataFromSubASnippet, makeMatMulPackedSource, matMulReadWriteFnSource, createMatmulProgramInfo;\n  var init_matmul_packed_webgpu = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts"() {\n      "use strict";\n      init_util();\n      init_common();\n      init_fuse_utils();\n      init_activation_util();\n      writeDataToSubAVec4Snippet = (transpose2, batchDims) => {\n        if (transpose2) {\n          return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${batchDims ? ", batchIndices" : ""});\n        `;\n        } else {\n          return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${batchDims ? ", batchIndices" : ""});\n        `;\n        }\n      };\n      calculateResultSnippet = (transposeA, innerElementSize) => {\n        if (transposeA) {\n          return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? "" : "let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? "" : "acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`;\n        } else {\n          return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? "" : "acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`;\n        }\n      };\n      makeMatMulPackedVec4Source = (workPerThread, workgroupSize, type = "f32", batchDims, transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32) => {\n        const tileAOuter = workgroupSize[1] * workPerThread[1];\n        const tileBOuter = workgroupSize[0] * workPerThread[0];\n        const tileAWidth = transposeA ? tileAOuter : tileInner;\n        const tileAHight = transposeA ? tileInner : tileAOuter;\n        const innerElementSize = tileAWidth / workgroupSize[0];\n        const rowPerThreadB = tileInner / workgroupSize[1];\n        if (!((transposeA && innerElementSize === 4 && workPerThread[1] === 4 || !transposeA && (innerElementSize === 3 || innerElementSize === 4)) && tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n          throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${workPerThread[0]} must be 4.`);\n        }\n        return `\nvar<workgroup> mm_Asub: array<array<vec${innerElementSize}<${type}>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${type}>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? "0" : "i32(globalId.z)"};\n  ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices("u32(batch)")};` : ""}\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : "(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : "0"};\n\n  var acc: array<vec4<${type}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA, batchDims)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${batchDims ? ", batchIndices" : ""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? "" : "let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n      };\n      writeDataToSubASnippet = (transpose2, batchDims) => {\n        if (transpose2) {\n          return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${batchDims ? ", batchIndices" : ""});\n            `;\n        } else {\n          return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${batchDims ? ", batchIndices" : ""});\n            `;\n        }\n      };\n      readDataFromSubASnippet = (transposeA) => transposeA ? "let ACached = mm_Asub[k][tileRow + innerRow];" : "let ACached = mm_Asub[tileRow + innerRow][k];";\n      makeMatMulPackedSource = (workPerThread, workgroupSize, type = "f32", batchDims, transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false) => {\n        const tileAOuter = workPerThread[1] * workgroupSize[1];\n        const tileBOuter = workPerThread[0] * workgroupSize[0];\n        const tileAWidth = transposeA ? tileAOuter : tileInner;\n        const tileAHight = transposeA ? tileInner : tileAOuter;\n        if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0)) {\n          throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n        }\n        const rowPerThreadA = tileAHight / workgroupSize[1];\n        const colPerThreadA = tileAWidth / workgroupSize[0];\n        const rowPerThreadB = tileInner / workgroupSize[1];\n        const matmulSnippet = sequentialAccessByThreads ? `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA, batchDims)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${batchDims ? ", batchIndices" : ""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${type}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` : `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` : `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA, batchDims)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${batchDims ? ", batchIndices" : ""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${type}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n        return `\n  var<workgroup> mm_Asub : array<array<${type}, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<${type}, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? "0" : "i32(globalId.z)"};\n    ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices("u32(batch)")};` : ""}\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : "(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : "0"};\n\n    var acc : array<array<${type}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n      };\n      matMulReadWriteFnSource = (component, hasBias, applyActivation, variables, batchShapes, isChannelsLast = false) => {\n        const [batchAShape, batchBShape, batchShape] = batchShapes;\n        const [batchVariable, aVariable, bVariable, outputVariable2] = variables;\n        const broadCastADims = getBroadcastDims(batchAShape, batchShape);\n        const broadCastBDims = getBroadcastDims(batchBShape, batchShape);\n        const dataType = tensorTypeToWsglStorageType(variables[0].type.tensor);\n        const getAIndices = () => {\n          const aRank = aVariable.rank;\n          const batchRank = batchVariable.rank;\n          let resStr = `var aIndices: ${aVariable.type.indices};`;\n          for (let i = aRank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n            resStr += `\naIndices[${i}] = ${batchRank > 1 ? `batchIndices[${j}]` : "batchIndices"};`;\n          }\n          broadCastADims.forEach((i) => {\n            resStr += `\naIndices[${i}] = 0;`;\n          });\n          resStr += `\naIndices[${aRank - 2}] = u32(row);\n                   aIndices[${aRank - 1}] = u32(colIn);`;\n          return resStr;\n        };\n        const getBIndices = () => {\n          const bRank = bVariable.rank;\n          const batchRank = batchVariable.rank;\n          let resStr = `var bIndices: ${bVariable.type.indices};`;\n          for (let i = bRank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n            resStr += `\nbIndices[${i}] = ${batchRank > 1 ? `batchIndices[${j}]` : "batchIndices"};`;\n          }\n          broadCastBDims.forEach((i) => {\n            resStr += `\nbIndices[${i}] = 0;`;\n          });\n          resStr += `\nbIndices[${bRank - 2}] = u32(row);\n                   bIndices[${bRank - 1}] = u32(colIn);`;\n          return resStr;\n        };\n        const source = `\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${typeSnippet(component, dataType)} {\n      var value = ${typeSnippet(component, dataType)}(0.0);\n      let col = colIn * ${component};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${getAIndices()}\n        value = ${aVariable.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${typeSnippet(component, dataType)} {\n      var value = ${typeSnippet(component, dataType)}(0.0);\n      let col = colIn * ${component};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${getBIndices()}\n        value = ${bVariable.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${typeSnippet(component, dataType)}) {\n      let col = colIn * ${component};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${hasBias ? `value = value + ${isChannelsLast ? "bias[colIn]" : `${typeSnippet(component, dataType)}(bias[row])`};` : ""}\n        ${applyActivation}\n        ${outputVariable2.setByIndices("vec3<u32>(coords)", "value")}\n      }\n    }\n    `;\n        return source;\n      };\n      createMatmulProgramInfo = (inputs, activationAttributes, outputShape, reshapedOutputShape, isChannelsLast = false) => {\n        const aShape = inputs[0].dims;\n        const bShape = inputs[1].dims;\n        const outerDimsA = aShape.slice(0, -2);\n        const outerDimsB = bShape.slice(0, -2);\n        const outerDims = reshapedOutputShape ? reshapedOutputShape.slice(0, -2) : outputShape.slice(0, -2);\n        const enableBatchUniforms = enableShapesUniforms(outerDims.length);\n        const batchShapeOrRank = enableBatchUniforms ? outerDims.length : outerDims;\n        const batchDims = internalVariable("batchDims", inputs[0].dataType, batchShapeOrRank, 1);\n        const batchSize = ShapeUtil.size(outerDims);\n        const dimAOuter = aShape[aShape.length - 2];\n        const dimInner = aShape[aShape.length - 1];\n        const dimBOuter = bShape[bShape.length - 1];\n        const isVec4 = dimInner % 4 === 0 && dimBOuter % 4 === 0;\n        const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n        const workgroupSize = [8, 8, 1];\n        const dispatch = [\n          Math.ceil(dimBOuter / workgroupSize[0] / elementsPerThread[0]),\n          Math.ceil(dimAOuter / workgroupSize[1] / elementsPerThread[1]),\n          Math.ceil(batchSize / workgroupSize[2] / elementsPerThread[2])\n        ];\n        const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n        const components = isVec4 ? 4 : 1;\n        const aShapeTemp = [...outerDimsA, dimAOuter, dimInner / components];\n        const enableAShapesUniforms = enableShapesUniforms(aShapeTemp.length);\n        const aShapeOrRank = enableAShapesUniforms ? aShapeTemp.length : aShapeTemp;\n        const bShapeTemp = [...outerDimsB, dimInner, dimBOuter / components];\n        const enableBShapesUniforms = enableShapesUniforms(bShapeTemp.length);\n        const bShapeOrRank = enableBShapesUniforms ? bShapeTemp.length : bShapeTemp;\n        const outputShapeTemp = [batchSize, dimAOuter, dimBOuter / components];\n        const A = inputVariable("a", inputs[0].dataType, aShapeOrRank, components);\n        const B = inputVariable("b", inputs[1].dataType, bShapeOrRank, components);\n        const output = outputVariable("result", inputs[0].dataType, outputShapeTemp.length, components);\n        const inputVariables = [A, B];\n        const programUniforms = [{ type: "int32", data: dimAOuter }, { type: "int32", data: dimBOuter }, { type: "int32", data: dimInner }];\n        if (enableBatchUniforms) {\n          programUniforms.push(...createTensorShapeVariables(outerDims));\n        }\n        if (enableAShapesUniforms) {\n          programUniforms.push(...createTensorShapeVariables(aShapeTemp));\n        }\n        if (enableBShapesUniforms) {\n          programUniforms.push(...createTensorShapeVariables(bShapeTemp));\n        }\n        const inputDependencies = [];\n        inputDependencies.push(enableAShapesUniforms ? "rank" : "dims");\n        inputDependencies.push(enableBShapesUniforms ? "rank" : "dims");\n        const hasBias = inputs.length > 2;\n        const { activationFunction, applyActivation } = getActivationSnippet(activationAttributes, output.type.value);\n        const declareFunctions = matMulReadWriteFnSource(\n          components,\n          hasBias,\n          applyActivation,\n          [batchDims, A, B, output],\n          [outerDimsA, outerDimsB, outerDims],\n          isChannelsLast\n        );\n        if (hasBias) {\n          const biasComponents = isChannelsLast ? components : 1;\n          inputVariables.push(inputVariable("bias", inputs[2].dataType, inputs[2].dims.length, biasComponents));\n          programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n          inputDependencies.push("rank");\n        }\n        programUniforms.push(...createTensorShapeVariables(outputShapeTemp));\n        const getShaderSource = (shaderHelper) => `\n  ${shaderHelper.registerUniform("dimAOuter", "i32").registerUniform("dimBOuter", "i32").registerUniform("dimInner", "i32").registerInternalVariables(batchDims).declareVariables(...inputVariables, output)}\n  ${activationFunction}\n  ${declareFunctions}\n  ${isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workgroupSize, dataType, batchDims) : makeMatMulPackedSource(elementsPerThread, workgroupSize, dataType, batchDims)}\n                   `;\n        return {\n          name: "MatMul",\n          shaderCache: {\n            hint: activationAttributes.activationCacheKey + `${elementsPerThread}${isVec4}${isChannelsLast}`,\n            inputDependencies\n          },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts\n  var conv2dCommonSnippet, createConv2DMatMulProgramInfo;\n  var init_conv2d_mm_webgpu = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts"() {\n      "use strict";\n      init_log();\n      init_common();\n      init_fuse_utils();\n      init_activation_util();\n      init_conv_util();\n      init_matmul_packed_webgpu();\n      conv2dCommonSnippet = (isChannelsLast, fitAOuter, fitBOuter, fitInner, addBias = false, attributes, innerElementSizeX = 4, innerElementSizeW = 4, innerElementSize = 4, dataType = "f32") => {\n        const getXSnippet = (innerElementSize2) => {\n          switch (innerElementSize2) {\n            case 1:\n              return "resData = x[xIndex];";\n            case 3:\n              return `resData = vec3<${dataType}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;\n            case 4:\n              return "resData = x[xIndex / 4];";\n            default:\n              throw new Error(`innerElementSize ${innerElementSize2} is not supported.`);\n          }\n        };\n        const getWSnippet = (innerElementSize2) => {\n          switch (innerElementSize2) {\n            case 1:\n              return "return w[row * i32(uniforms.w_shape[3]) + colIn];";\n            case 4:\n              return "return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";\n            default:\n              throw new Error(`innerElementSize ${innerElementSize2} is not supported.`);\n          }\n        };\n        const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` : `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n        const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` : `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n        const xHeight = isChannelsLast ? "i32(uniforms.x_shape[1])" : "i32(uniforms.x_shape[2])";\n        const xWidth = isChannelsLast ? "i32(uniforms.x_shape[2])" : "i32(uniforms.x_shape[3])";\n        const row = isChannelsLast ? "row" : "col";\n        const col = isChannelsLast ? "col" : "row";\n        const readXSnippet = `\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${isChannelsLast ? "i32(uniforms.result_shape[2])" : "i32(uniforms.result_shape[3])"};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX, dataType)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n        const sampleX = isChannelsLast ? fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` : `\n    let col = colIn * ${innerElementSizeX};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX, dataType)}(0.0);` : fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` : `\n    let col = colIn * ${innerElementSizeX};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX, dataType)}(0.0);`;\n        const sampleW = `${getWSnippet(innerElementSizeW)}`;\n        const resType = typeSnippet(innerElementSize, dataType);\n        const aType = isChannelsLast ? typeSnippet(innerElementSizeX, dataType) : typeSnippet(innerElementSizeW, dataType);\n        const bType = isChannelsLast ? typeSnippet(innerElementSizeW, dataType) : typeSnippet(innerElementSizeX, dataType);\n        const { activationFunction, applyActivation } = getActivationSnippet(attributes, resType);\n        const userCode = `\n    ${activationFunction}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? "i32(uniforms.result_shape[2])" : "i32(uniforms.result_shape[3])"};\n      ${coordResSnippet}\n      ${biasSnippet(addBias)}\n      ${applyActivation}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n        return userCode;\n      };\n      createConv2DMatMulProgramInfo = (inputs, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias, sequentialAccessByThreads) => {\n        const isChannelsLast = attributes.format === "NHWC";\n        const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n        const batchSize = outputShape[0];\n        const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n        const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n        const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n        const isVec4 = isChannelsLast && (inChannels % 4 === 0 || inChannels % 3 === 0) && outChannels % 4 === 0;\n        const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n        const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n        const workGroupSize = [8, 8, 1];\n        const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n        const dispatch = [\n          Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n          Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n          Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[2])\n        ];\n        LOG_DEBUG("verbose", () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n        const innerElementSize = isVec4 ? isChannelsLast && inChannels % 4 !== 0 ? 3 : 4 : 1;\n        const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n        const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n        const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n        const fitAOuter = dimAOuter % tileAOuter === 0;\n        const fitBOuter = dimBOuter % tileBOuter === 0;\n        const fitInner = dimInner % tileInner === 0;\n        const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n        const t = tensorTypeToWsglStorageType(inputs[0].dataType);\n        const components = isVec4 ? 4 : 1;\n        const programUniforms = [{ type: "int32", data: dimAOuter }, { type: "int32", data: dimBOuter }, { type: "int32", data: dimInner }];\n        const x = inputVariable("x", inputs[0].dataType, inputs[0].dims.length, innerElementSize === 3 ? 1 : innerElementSize);\n        const w = inputVariable("w", inputs[1].dataType, inputs[1].dims.length, components);\n        const inputVariables = [x, w];\n        programUniforms.push(...createTensorShapeVariables(inputs[0].dims));\n        programUniforms.push(...createTensorShapeVariables(inputs[1].dims));\n        let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? `vec4<${t}>` : t}) {\n        result[flatIndex] = ${isVec4 ? `vec4<${t}>` : t}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? `vec4<${t}>` : t}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? "/ 4" : ""}, value);\n      }`;\n        if (hasBias) {\n          const bias = inputVariable("bias", inputs[2].dataType, inputs[2].dims.length, components);\n          inputVariables.push(bias);\n          programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n          declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? `vec4<${t}>` : t} {\n          return bias[coords.${isChannelsLast ? "w" : "y"}${isVec4 ? "/ 4" : ""}];\n        }`;\n        }\n        const output = outputVariable("result", inputs[0].dataType, outputShape.length, components);\n        programUniforms.push(...createTensorShapeVariables(outputShape));\n        return {\n          name: "Conv2DMatMul",\n          shaderCache: { hint: attributes.cacheKey },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n            programUniforms\n          }),\n          getShaderSource: (shaderHelper) => `\n        ${utilFunctions("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${shaderHelper.registerUniform("dimAOuter", "i32").registerUniform("dimBOuter", "i32").registerUniform("dimInner", "i32").declareVariables(...inputVariables, output)}\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        ${declareFunctions}\n        ${conv2dCommonSnippet(\n            isChannelsLast,\n            fitAOuter,\n            fitBOuter,\n            fitInner,\n            hasBias,\n            attributes,\n            elementsSize[0],\n            elementsSize[1],\n            elementsSize[2],\n            t\n          )}\n            ${isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, t, void 0, !isChannelsLast, tileInner) : makeMatMulPackedSource(\n            elementsPerThread,\n            workGroupSize,\n            t,\n            void 0,\n            !isChannelsLast,\n            tileInner,\n            false,\n            void 0,\n            sequentialAccessByThreads\n          )}`\n        };\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/conv-grouped.ts\n  var createGroupedConvProgramInfo, createGroupedConvVectorizeProgramInfo;\n  var init_conv_grouped = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/conv-grouped.ts"() {\n      "use strict";\n      init_util();\n      init_common();\n      init_conv();\n      init_fuse_utils();\n      createGroupedConvProgramInfo = (inputs, attributes, squeezeOutputShapeFunction) => {\n        const hasBias = inputs.length > 2;\n        const processBias = hasBias ? "value += b[output_channel];" : "";\n        const xShape = inputs[0].dims;\n        const wShape = inputs[1].dims;\n        const outputChannelsPerGroup = wShape[0] / attributes.group;\n        const isChannelLast = attributes.format === "NHWC";\n        const outputShape = calculateOutputShape(\n          xShape,\n          wShape,\n          attributes.dilations,\n          attributes.pads,\n          attributes.strides,\n          isChannelLast\n        );\n        const outputSize = ShapeUtil.size(outputShape);\n        const output = outputVariable("output", inputs[0].dataType, outputShape);\n        const { activationFunction, applyActivation } = getActivationSnippet(attributes, output.type.value);\n        const x = inputVariable("x", inputs[0].dataType, xShape);\n        const w = inputVariable("w", inputs[1].dataType, wShape);\n        const inputVars = [x, w];\n        if (hasBias) {\n          inputVars.push(inputVariable("b", inputs[2].dataType, inputs[2].dims));\n        }\n        const getShaderSource = (shaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${shaderHelper.declareVariables(...inputVars, output)}\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let outputIndices = ${output.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${output.type.value} = ${output.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          let xVal = ${isChannelLast ? x.get("batch", "xHeight", "xWidth", "input_channel") : x.get("batch", "input_channel", "xHeight", "xWidth")};\n          let wVal = ${w.get("output_channel", "wInChannel", "wHeight", "wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${output.setByOffset("global_idx", "value")}\n  }`;\n        return {\n          name: "GroupedConv",\n          shaderCache: { hint: attributes.cacheKey },\n          getRunData: () => ({\n            outputs: [{\n              dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n              dataType: inputs[0].dataType\n            }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) }\n          }),\n          getShaderSource\n        };\n      };\n      createGroupedConvVectorizeProgramInfo = (inputs, attributes, outputShape) => {\n        const hasBias = inputs.length > 2;\n        const components = getMaxComponents(outputShape[3]);\n        const outputNumber = getMaxComponents(outputShape[2]);\n        const outputSize = ShapeUtil.size(outputShape) / components / outputNumber;\n        const xShape = [inputs[0].dims[0], inputs[0].dims[1], inputs[0].dims[2], inputs[0].dims[3] / components];\n        const wShape = [inputs[1].dims[0], inputs[1].dims[1], inputs[1].dims[2], inputs[1].dims[3] / components];\n        const outputShapeInShader = [outputShape[0], outputShape[1], outputShape[2], outputShape[3] / components];\n        const programUniforms = [\n          { type: "uint32", data: outputSize },\n          { type: "int32", data: attributes.strides },\n          { type: "int32", data: attributes.pads },\n          ...createTensorShapeVariables(xShape),\n          ...createTensorShapeVariables(wShape),\n          ...createTensorShapeVariables(outputShapeInShader)\n        ];\n        const xNumber = (outputNumber - 1) * attributes.strides[1] + wShape[1];\n        const getShaderSource = (shaderHelper) => {\n          const output = outputVariable("output", inputs[0].dataType, outputShapeInShader.length, components);\n          const { activationFunction, applyActivation } = getActivationSnippet(attributes, output.type.value);\n          const x = inputVariable("x", inputs[0].dataType, xShape.length, components);\n          const w = inputVariable("w", inputs[1].dataType, wShape.length, components);\n          const inputVars = [x, w];\n          if (hasBias) {\n            inputVars.push(inputVariable("b", inputs[2].dataType, inputs[2].dims, components));\n          }\n          const processBias = hasBias ? "value += b[output_channel];" : "";\n          return `\n  ${shaderHelper.registerUniform("output_size", "u32").registerUniform("strides", "i32", 2).registerUniform("pads", "i32", 2).declareVariables(...inputVars, output)}\n  ${activationFunction}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${outputNumber}u;\n    let col = (index1 % width1) * ${outputNumber}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${x.type.value}, ${xNumber}>;\n    var values: array<${output.type.value}, ${outputNumber}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w\'s height/width.\n    for (var w_height: u32 = 0u; w_height < ${wShape[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 || u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${xNumber}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${x.get("batch", "u32(x_height)", "u32(x_width)", "input_channel")};\n          } else {\n            x_vals[i] = ${x.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${wShape[1]}; w_width++) {\n          let w_val = ${w.get("w_height", "w_width", "0", "output_channel")};\n          for (var i = 0u; i < ${outputNumber}u; i++) {\n            values[i] = fma(x_vals[i * ${attributes.strides[1]}u + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${outputNumber}u; i++) {\n      var value = values[i];\n      ${processBias}\n      ${applyActivation}\n      ${output.set("batch", "row", "col + i", "output_channel", "value")};\n    }\n  }`;\n        };\n        return {\n          name: "GroupedConv-Vectorize",\n          shaderCache: {\n            hint: `${attributes.activationCacheKey};${components};${outputNumber};${xNumber};${wShape[0]};${wShape[1]}`,\n            inputDependencies: hasBias ? ["rank", "rank", "type"] : ["rank", "rank"]\n          },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/matmul.ts\n  var createNaiveMatmulProgramInfo, validateInputs8, matMul;\n  var init_matmul = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/matmul.ts"() {\n      "use strict";\n      init_util();\n      init_matmul_packed_webgpu();\n      init_common();\n      init_fuse_utils();\n      createNaiveMatmulProgramInfo = (inputs, activationAttributes, outputShape, reshapedOutputShape, isChannelsLast = false) => {\n        const aShape = inputs[0].dims;\n        const bShape = inputs[1].dims;\n        const M = aShape[aShape.length - 2];\n        const N = bShape[bShape.length - 1];\n        const K = aShape[aShape.length - 1];\n        const components = getMaxComponents(N);\n        const aComponents = getMaxComponents(K);\n        const outputNumber = getMaxComponents(M);\n        const outputSize = ShapeUtil.size(outputShape) / components / outputNumber;\n        const hasBias = inputs.length > 2;\n        const outerDims = reshapedOutputShape ? reshapedOutputShape.slice(0, -2) : outputShape.slice(0, -2);\n        const batchSize = ShapeUtil.size(outerDims);\n        const outputShapeInShader = [batchSize, M, N];\n        const programUniforms = [\n          { type: "uint32", data: outputSize },\n          { type: "uint32", data: M },\n          { type: "uint32", data: N },\n          { type: "uint32", data: K },\n          ...createTensorShapeVariables(outerDims),\n          ...createTensorShapeVariables(aShape),\n          ...createTensorShapeVariables(bShape)\n        ];\n        if (hasBias) {\n          programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n        }\n        programUniforms.push(...createTensorShapeVariables(outputShapeInShader));\n        const getShaderSource = (shaderHelper) => {\n          const batchDims = internalVariable("batch_dims", inputs[0].dataType, outerDims.length);\n          const a = inputVariable("a", inputs[0].dataType, aShape.length, aComponents);\n          const b = inputVariable("b", inputs[1].dataType, bShape.length, components);\n          const output = outputVariable("output", inputs[0].dataType, outputShapeInShader.length, components);\n          const { activationFunction, applyActivation } = getActivationSnippet(activationAttributes, output.type.value);\n          const inputVariables = [a, b];\n          let processBias = "";\n          if (hasBias) {\n            const biasComponents = isChannelsLast ? components : 1;\n            inputVariables.push(inputVariable("bias", inputs[2].dataType, inputs[2].dims.length, biasComponents));\n            processBias = `${isChannelsLast ? `value += bias[col / ${biasComponents}];` : `value += ${output.type.value}(bias[row + i]);`}`;\n          }\n          const outerDimsA = aShape.slice(0, -2);\n          const outerDimsB = bShape.slice(0, -2);\n          const broadCastADims = getBroadcastDims(outerDimsA, outerDims);\n          const broadCastBDims = getBroadcastDims(outerDimsB, outerDims);\n          const getIndices = (variable, broadCastDims) => {\n            const rank = variable.rank;\n            const name = variable.name;\n            if (rank === 2) {\n              return `var ${name}_indices = ${variable.type.indices}(0u, 0u);`;\n            }\n            const batchRank = batchDims.rank;\n            let resStr = `var ${name}_indices: ${variable.type.indices};`;\n            for (let i = rank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n              resStr += `\n${name}_indices[${i}] = ${batchRank > 1 ? `batch_indices[${j}]` : "batch_indices"};`;\n            }\n            broadCastDims.forEach((i) => {\n              resStr += `\n${name}_indices[${i}] = 0;`;\n            });\n            resStr += `${name}_indices[${rank - 2}] = 0u;\n                     ${name}_indices[${rank - 1}] = 0u;`;\n            return resStr;\n          };\n          const calcResult = () => {\n            let calcStr = `var a_data: ${a.type.value};`;\n            for (let i = 0; i < aComponents; i++) {\n              calcStr += `\n              let b_data${i} = b[(b_offset + (k + ${i}) * uniforms.N + col) / ${components}];`;\n            }\n            for (let i = 0; i < outputNumber; i++) {\n              calcStr += `a_data = a[(a_offset + (row + ${i}) * uniforms.K + k) / ${aComponents}];`;\n              for (let j = 0; j < aComponents; j++) {\n                calcStr += `\n            values[${i}] = fma(${b.type.value}(a_data${aComponents === 1 ? "" : `[${j}]`}), b_data${j}, values[${i}]);\n`;\n              }\n            }\n            return calcStr;\n          };\n          return `\n  ${shaderHelper.registerUniform("outputSize", "u32").registerUniform("M", "u32").registerUniform("N", "u32").registerUniform("K", "u32").registerInternalVariables(batchDims).declareVariables(...inputVariables, output)}\n  ${activationFunction}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    let col = (global_idx % (uniforms.N / ${components})) * ${components};\n    var index1 = global_idx / (uniforms.N / ${components});\n    let stride1 = uniforms.M / ${outputNumber};\n    let row = (index1 % stride1) * ${outputNumber};\n    let batch = index1 / stride1;\n\n    ${outputShape.length === 2 ? "" : `let batch_indices = ${batchDims.offsetToIndices("batch")};`}\n    ${getIndices(a, broadCastADims)}\n    let a_offset = ${a.indicesToOffset("a_indices")};\n    ${getIndices(b, broadCastBDims)}\n    let b_offset = ${b.indicesToOffset("b_indices")};\n    var values: array<${output.type.value}, ${outputNumber}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${aComponents}) {\n      ${calcResult()}\n    }\n    for (var i = 0u; i < ${outputNumber}u; i++) {\n      var value = values[i];\n      ${processBias}\n      ${applyActivation}\n      let cur_indices = ${output.type.indices}(batch, row + i, col);\n      let offset = ${output.indicesToOffset("cur_indices")};\n      ${output.setByOffset(`offset / ${components}`, "value")};\n    }\n  }\n  `;\n        };\n        return {\n          name: "MatMulNaive",\n          shaderCache: {\n            hint: `${activationAttributes.activationCacheKey}_${components}_${aComponents}_${outputNumber}_${isChannelsLast}`,\n            inputDependencies: hasBias ? ["rank", "rank", "rank"] : ["rank", "rank"]\n          },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n      validateInputs8 = (inputs) => {\n        if (!inputs || inputs.length !== 2) {\n          throw new Error("MatMul requires 2 inputs.");\n        }\n        if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n          throw new Error("shared dimension does not match.");\n        }\n      };\n      matMul = (context) => {\n        validateInputs8(context.inputs);\n        const outputShape = BroadcastUtil.calcShape(context.inputs[0].dims, context.inputs[1].dims, true);\n        if (!outputShape) {\n          throw new Error("Can\'t use matmul on the given tensors");\n        }\n        const N = outputShape[outputShape.length - 1];\n        const K = context.inputs[0].dims[context.inputs[0].dims.length - 1];\n        if (N < 8 && K < 8) {\n          context.compute(\n            createNaiveMatmulProgramInfo(context.inputs, { activation: "", activationCacheKey: "" }, outputShape)\n          );\n        } else {\n          context.compute(createMatmulProgramInfo(context.inputs, { activation: "", activationCacheKey: "" }, outputShape));\n        }\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/conv.ts\n  var calculateOutputShape, weightTransposeAttribute, validateInputs9, getAdjustedConvAttributes, parseConvAttributes, conv2d, conv1d, conv;\n  var init_conv = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/conv.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_conv2d_mm_webgpu();\n      init_matmul_packed_webgpu();\n      init_conv_grouped();\n      init_fuse_utils();\n      init_matmul();\n      init_transpose();\n      calculateOutputShape = (inputShape, kernelShape, dilations, adjustPads, strides, isChannelLast) => {\n        const batchSize = inputShape[0];\n        const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n        const spatialRank = inputSpatialShape.length;\n        const outChannels = kernelShape[0];\n        const kernelSpatialShape = kernelShape.slice(2);\n        const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n        const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n        const outputShape = inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n        outputShape.splice(0, 0, batchSize);\n        outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n        return outputShape;\n      };\n      weightTransposeAttribute = [2, 3, 1, 0];\n      validateInputs9 = (inputs, attributes) => {\n        if (!inputs || inputs.length !== 2 && inputs.length !== 3) {\n          throw new Error("Conv requires 2 or 3 inputs");\n        }\n        if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n          throw new Error("currently only support conv 1D and 2D");\n        }\n        if (inputs[0].dims.length !== inputs[1].dims.length) {\n          throw new Error("filter does not have same dimension as input");\n        }\n        const dataChannel = inputs[0].dims[attributes.format === "NHWC" ? inputs[0].dims.length - 1 : 1];\n        const filterInChannel = inputs[1].dims[1] * attributes.group;\n        if (dataChannel !== filterInChannel) {\n          throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");\n        }\n        if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n          throw new Error("invalid bias");\n        }\n        const spatialRank = inputs[0].dims.length - 2;\n        if (attributes.dilations.length !== spatialRank) {\n          throw new Error(`dilations should be ${spatialRank}D`);\n        }\n        if (attributes.strides.length !== spatialRank) {\n          throw new Error(`strides should be ${spatialRank}D`);\n        }\n        if (attributes.pads.length !== spatialRank * 2) {\n          throw new Error(`pads should be ${spatialRank * 2}D`);\n        }\n        if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n          throw new Error("invalid kernel shape");\n        }\n      };\n      getAdjustedConvAttributes = (attributes, inputs) => {\n        const kernelShape = attributes.kernelShape.slice();\n        for (let i = 2; i < inputs[1].dims.length; ++i) {\n          if (kernelShape[i - 2] === 0) {\n            kernelShape[i - 2] = inputs[1].dims[i];\n          }\n        }\n        const pads = attributes.pads.slice();\n        PoolConvUtil.adjustPadsBasedOnAutoPad(\n          inputs[0].dims,\n          attributes.strides,\n          attributes.dilations,\n          kernelShape,\n          pads,\n          attributes.format === "NHWC",\n          attributes.autoPad\n        );\n        const newAttributes = Object.assign({}, attributes);\n        Object.assign(newAttributes, { kernelShape, pads, cacheKey: attributes.cacheKey });\n        return newAttributes;\n      };\n      parseConvAttributes = (attributes) => {\n        const activationAttributes = parseInternalActivationAttributes(attributes);\n        const format = attributes.format;\n        const autoPad = ["NOTSET", "VALID", "SAME_UPPER", "SAME_LOWER"][attributes.auto_pad];\n        const dilations = attributes.dilations;\n        const group = attributes.group;\n        const kernelShape = attributes.kernel_shape;\n        const pads = attributes.pads;\n        const strides = attributes.strides;\n        const wIsConst = attributes.w_is_const();\n        return createAttributeWithCacheKey(\n          { autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes }\n        );\n      };\n      conv2d = (context, inputs, attributes) => {\n        const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n        const isChannelsLast = attributes.format === "NHWC";\n        if (attributes.group !== 1) {\n          const disableGroupedConvVectorize = true;\n          if (!disableGroupedConvVectorize && isChannelsLast && inputs[1].dims[0] === attributes.group && inputs[1].dims[1] === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1) {\n            const outputShape2 = calculateOutputShape(\n              inputs[0].dims,\n              inputs[1].dims,\n              attributes.dilations,\n              adjustedAttributes.pads,\n              attributes.strides,\n              isChannelsLast\n            );\n            const transposedWeight2 = context.kernelCustomData.wT ?? context.compute(\n              createTransposeProgramInfo(inputs[1], weightTransposeAttribute),\n              { inputs: [1], outputs: [attributes.wIsConst ? -2 : -1] }\n            )[0];\n            if (attributes.wIsConst && !context.kernelCustomData.wT) {\n              context.kernelCustomData.wT = transposedWeight2;\n            }\n            const convInputs2 = [inputs[0], transposedWeight2];\n            if (inputs.length === 3) {\n              convInputs2.push(inputs[2]);\n            }\n            context.compute(\n              createGroupedConvVectorizeProgramInfo(convInputs2, adjustedAttributes, outputShape2),\n              { inputs: convInputs2 }\n            );\n          } else {\n            context.compute(createGroupedConvProgramInfo(inputs, adjustedAttributes));\n          }\n          return;\n        }\n        const hasBias = inputs.length === 3;\n        const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n        const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n        const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n        const weightHeight = inputs[1].dims[2];\n        const weightWidth = inputs[1].dims[3];\n        const outputShape = calculateOutputShape(\n          inputs[0].dims,\n          inputs[1].dims,\n          attributes.dilations,\n          adjustedAttributes.pads,\n          attributes.strides,\n          isChannelsLast\n        );\n        const outHeight = outputShape[isChannelsLast ? 1 : 2];\n        const outWidth = outputShape[isChannelsLast ? 2 : 3];\n        const outChannels = outputShape[isChannelsLast ? 3 : 1];\n        const sameSize = isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.pads[0] === 0 && attributes.pads[1] === 0;\n        if (sameSize || weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 && attributes.strides[0] === 1 && attributes.strides[1] === 1 && attributes.pads[0] === 0 && attributes.pads[1] === 0) {\n          const batch = outputShape[0];\n          let xReshaped, wReshaped, matmulOutputShape;\n          const matmulInputs = [];\n          if (isChannelsLast) {\n            const transposedWeight2 = context.kernelCustomData.wT ?? context.compute(\n              createTransposeProgramInfo(inputs[1], weightTransposeAttribute),\n              { inputs: [1], outputs: [attributes.wIsConst ? -2 : -1] }\n            )[0];\n            if (attributes.wIsConst && !context.kernelCustomData.wT) {\n              context.kernelCustomData.wT = transposedWeight2;\n            }\n            if (sameSize) {\n              const sharedDim = inputHeight * inputWidth * inputChannels;\n              xReshaped = inputs[0].reshape([1, batch, sharedDim]);\n              wReshaped = transposedWeight2.reshape([1, sharedDim, outChannels]);\n              matmulOutputShape = [1, batch, outChannels];\n            } else {\n              xReshaped = inputs[0].reshape([batch, inputHeight * inputWidth, inputChannels]);\n              wReshaped = transposedWeight2.reshape([1, inputChannels, outChannels]);\n              matmulOutputShape = [batch, outHeight * outWidth, outChannels];\n            }\n            matmulInputs.push(xReshaped);\n            matmulInputs.push(wReshaped);\n          } else {\n            xReshaped = inputs[0].reshape([batch, inputChannels, inputHeight * inputWidth]);\n            wReshaped = inputs[1].reshape([1, outChannels, inputChannels]);\n            matmulOutputShape = [batch, outChannels, outHeight * outWidth];\n            matmulInputs.push(wReshaped);\n            matmulInputs.push(xReshaped);\n          }\n          if (hasBias) {\n            matmulInputs.push(inputs[2]);\n          }\n          const N = matmulOutputShape[2];\n          const K = matmulInputs[0].dims[matmulInputs[0].dims.length - 1];\n          if (N < 8 && K < 8) {\n            context.compute(\n              createNaiveMatmulProgramInfo(\n                matmulInputs,\n                adjustedAttributes,\n                outputShape,\n                matmulOutputShape,\n                isChannelsLast\n              ),\n              { inputs: matmulInputs }\n            );\n          } else {\n            context.compute(\n              createMatmulProgramInfo(matmulInputs, adjustedAttributes, outputShape, matmulOutputShape, isChannelsLast),\n              { inputs: matmulInputs }\n            );\n          }\n          return;\n        }\n        const sequentialAccessByThreads = (\n          /* backend.adapterInfo.isIntel() */\n          true\n        );\n        const transposedWeight = context.kernelCustomData.wT ?? context.compute(\n          createTransposeProgramInfo(inputs[1], weightTransposeAttribute),\n          { inputs: [1], outputs: [attributes.wIsConst ? -2 : -1] }\n        )[0];\n        if (attributes.wIsConst && !context.kernelCustomData.wT) {\n          context.kernelCustomData.wT = transposedWeight;\n        }\n        const convInputs = [inputs[0], transposedWeight];\n        if (hasBias) {\n          convInputs.push(inputs[2]);\n        }\n        const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n        const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n        const dimInner = weightHeight * weightWidth * inputChannels;\n        context.compute(\n          createConv2DMatMulProgramInfo(\n            convInputs,\n            adjustedAttributes,\n            outputShape,\n            dimAOuter,\n            dimBOuter,\n            dimInner,\n            hasBias,\n            sequentialAccessByThreads\n          ),\n          { inputs: convInputs }\n        );\n      };\n      conv1d = (context, attributes) => {\n        const isChannelLast = attributes.format === "NHWC";\n        const inputs = [\n          context.inputs[0].reshape(\n            isChannelLast ? (\n              // [N, W, C] -> [N, H=1, W, C]\n              [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]]\n            ) : (\n              // [N, C, W] -> [N, C, H=1, W]\n              [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]\n            )\n          ),\n          //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n          context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n        ];\n        if (context.inputs.length === 3) {\n          inputs.push(context.inputs[2]);\n        }\n        const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n        const strides = [1].concat(attributes.strides);\n        const dilations = [1].concat(attributes.dilations);\n        const kernelShape = [1].concat(attributes.kernelShape);\n        const adjustedAttributes = getAdjustedConvAttributes({ ...attributes, pads, strides, dilations, kernelShape }, inputs);\n        context.compute(createGroupedConvProgramInfo(\n          inputs,\n          adjustedAttributes,\n          (outputShape) => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []\n        ));\n      };\n      conv = (context, attributes) => {\n        validateInputs9(context.inputs, attributes);\n        if (context.inputs[0].dims.length === 3) {\n          conv1d(context, attributes);\n        } else {\n          conv2d(context, context.inputs, attributes);\n        }\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_mm_webgpu.ts\n  var conv2dTransposeCommonSnippet, createConv2DTransposeMatMulProgramInfo;\n  var init_conv_backprop_mm_webgpu = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_mm_webgpu.ts"() {\n      "use strict";\n      init_log();\n      init_common();\n      init_fuse_utils();\n      init_activation_util();\n      init_conv_util();\n      init_matmul_packed_webgpu();\n      conv2dTransposeCommonSnippet = (isChannelsLast, addBias = false, attributes, innerElementSize = 4) => {\n        const type = typeSnippet(innerElementSize, "f32");\n        const getWSnippet = (innerElementSize2) => {\n          switch (innerElementSize2) {\n            case 1:\n              return "return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";\n            case 4:\n              return `\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;\n            default:\n              throw new Error(`innerElementSize ${innerElementSize2} is not supported.`);\n          }\n        };\n        const coordASnippet = isChannelsLast ? `\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      ` : `\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `;\n        const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` : `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n        const xHeight = isChannelsLast ? "outBackprop[1]" : "outBackprop[2]";\n        const xWidth = isChannelsLast ? "outBackprop[2]" : "outBackprop[3]";\n        const row = isChannelsLast ? "row" : "col";\n        const col = isChannelsLast ? "col" : "row";\n        const readASnippet = `\n      let inChannels = ${isChannelsLast ? "outBackprop[3]" : "outBackprop[1]"};\n      let outWidth = ${isChannelsLast ? "i32(uniforms.result_shape[2])" : "i32(uniforms.result_shape[3])"};\n      let outRow = ${row} / outWidth;\n      let outCol = ${row} % outWidth;\n\n      let WRow = ${col} / (filterDims[1] * inChannels);\n      let WCol = ${col} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${xHeight}) || fract(xR) > 0.0) {\n        return ${type}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${xWidth}) || fract(xC) > 0.0) {\n        return ${type}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${col} % inChannels;\n      ${coordASnippet}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${innerElementSize}];`;\n        const sampleA = isChannelsLast ? `\n      let col = colIn * ${innerElementSize};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readASnippet}\n      }\n      return ${type}(0.0);` : `\n      let col = colIn * ${innerElementSize};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${readASnippet}\n      }\n      return ${type}(0.0);`;\n        const sampleW = `\n      let col = colIn * ${innerElementSize};\n      let inChannels = ${isChannelsLast ? "outBackprop[3]" : "outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${isChannelsLast ? "row < uniforms.dimInner && col < uniforms.dimBOuter" : "row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${getWSnippet(innerElementSize)}\n      }\n      return ${type}(0.0);\n      `;\n        const { activationFunction, applyActivation } = getActivationSnippet(attributes, type);\n        const userCode = `\n      ${activationFunction}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${type} {\n    ${isChannelsLast ? sampleA : sampleW}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${type} {\n    ${isChannelsLast ? sampleW : sampleA}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${type}) {\n    let col = colIn * ${innerElementSize};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${isChannelsLast ? "i32(uniforms.result_shape[2])" : "i32(uniforms.result_shape[3])"};\n      ${coordResSnippet}\n      ${biasSnippet(addBias)}\n      ${applyActivation}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${innerElementSize}] = value;\n    }\n  }`;\n        return userCode;\n      };\n      createConv2DTransposeMatMulProgramInfo = (inputs, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias, sequentialAccessByThreads) => {\n        const isChannelsLast = attributes.format === "NHWC";\n        const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n        const batchSize = outputShape[0];\n        const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n        const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n        const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n        const isVec4 = isChannelsLast ? inChannels % 4 === 0 && outChannels % 4 === 0 : outWidth % 4 === 0 && outChannels % 4 === 0;\n        const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n        const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n        const workGroupSize = isVec4 ? [8, 8, 1] : [dispatchX <= 4 || dispatchY <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n        const elementsPerThread = isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 4, dispatchX > 4 && dispatchY <= 4 ? 1 : 4, 1];\n        const dispatch = [\n          Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n          Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n          Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[2])\n        ];\n        LOG_DEBUG("verbose", () => `[conv_backprop_mm_webgpu] dispatch = ${dispatch}`);\n        const innerElementSize = isVec4 ? 4 : 1;\n        const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n        const components = isVec4 ? 4 : 1;\n        const programUniforms = [{ type: "int32", data: dimAOuter }, { type: "int32", data: dimBOuter }, { type: "int32", data: dimInner }];\n        const x = inputVariable("x", inputs[0].dataType, inputs[0].dims.length, components);\n        const w = inputVariable("w", inputs[1].dataType, inputs[1].dims.length, 1);\n        const output = outputVariable("result", inputs[0].dataType, outputShape.length, components);\n        const inputVariables = [x, w];\n        programUniforms.push(...createTensorShapeVariables(inputs[0].dims));\n        programUniforms.push(...createTensorShapeVariables(inputs[1].dims));\n        let declareFunctions = "";\n        if (hasBias) {\n          const bias = inputVariable("bias", inputs[2].dataType, inputs[2].dims.length, components);\n          inputVariables.push(bias);\n          programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n          declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? "vec4<f32>" : "f32"} {\n          return bias[coords.${isChannelsLast ? "w" : "y"}${isVec4 ? "/ 4" : ""}];\n        }`;\n        }\n        programUniforms.push(...createTensorShapeVariables(outputShape));\n        return {\n          name: "Conv2DTransposeMatMul",\n          shaderCache: { hint: attributes.cacheKey },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n            programUniforms\n          }),\n          getShaderSource: (shaderHelper) => `\n        ${utilFunctions("uniforms.result_strides")}\n        ${shaderHelper.registerUniform("dimAOuter", "i32").registerUniform("dimBOuter", "i32").registerUniform("dimInner", "i32").declareVariables(...inputVariables, output)};\n        const outBackprop : vec4<i32> = vec4<i32>(${inputs[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${attributes.kernelShape[isChannelsLast ? 2 : 3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${attributes.dilations[0] <= 1 ? 0 : (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\n              ${attributes.dilations[1] <= 1 ? 0 : (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${attributes.pads[0] + attributes.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${attributes.pads[1] + attributes.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${conv2dTransposeCommonSnippet(isChannelsLast, hasBias, attributes, innerElementSize)}\n        ${isVec4 ? makeMatMulPackedVec4Source(\n            elementsPerThread,\n            workGroupSize,\n            "f32",\n            void 0,\n            !isChannelsLast,\n            tileInner\n          ) : makeMatMulPackedSource(\n            elementsPerThread,\n            workGroupSize,\n            "f32",\n            void 0,\n            !isChannelsLast,\n            tileInner,\n            false,\n            void 0,\n            sequentialAccessByThreads\n          )}`\n        };\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts\n  var createConvTranspose2DOpProgramShaderSource, createConvTranspose2DProgramInfo;\n  var init_conv_backprop_webgpu = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts"() {\n      "use strict";\n      init_log();\n      init_util();\n      init_common();\n      createConvTranspose2DOpProgramShaderSource = (shaderHelper, inputs, attributes, outputShape, hasBias, is1DimensionDispatch, isVec4 = false, dataType) => {\n        const isChannelsLast = attributes.format === "NHWC";\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const channelDim = isChannelsLast ? 3 : 1;\n        const outputSize = ShapeUtil.size(outputShape);\n        const workPerThread = isVec4 ? 2 : 1;\n        const group = attributes.group;\n        const wShape = inputs[1].dims;\n        const inputChannelsPerGroup = wShape[0] / group;\n        const outputChannelsPerGroup = wShape[1];\n        let declareFunctions = `\n  fn setOutputAtIndex(flatIndex : u32, value : ${isVec4 ? `vec4<${dataType}>` : dataType}) {\n    result[flatIndex] = ${isVec4 ? `vec4<${dataType}>` : dataType}(value);\n  }`;\n        if (hasBias) {\n          declareFunctions += `\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${isVec4 ? `vec4<${dataType}>` : dataType} {\n      return bias[coords.${isChannelsLast ? "w" : "y"}${isVec4 ? "/ 4" : ""}];\n    }`;\n        }\n        const components = isVec4 ? 4 : 1;\n        const w = inputVariable("W", inputs[1].dataType, inputs[1].dims, components);\n        const dy = inputVariable("Dy", inputs[0].dataType, inputs[0].dims, components);\n        const inputVariables = [dy, w];\n        if (hasBias) {\n          inputVariables.push(inputVariable("bias", inputs[2].dataType, [outputShape[channelDim]], components));\n        }\n        const output = outputVariable("result", inputs[0].dataType, outputShape, components);\n        const codeSnippet4 = `{\n        let batch: u32 = ${is1DimensionDispatch ? "global_id.z" : "workgroup_id.z"} / outShape[1];\n        let r = ${is1DimensionDispatch ? "global_id.z" : "workgroup_id.z"} % outShape[1];\n        let c = ${is1DimensionDispatch ? "global_id.y" : "workgroup_id.y"} * ${workPerThread};\n        let d1: u32 = ${is1DimensionDispatch ? "global_id.x" : "workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${dataType}>, ${workPerThread}>;\n        for (var i = 0; i < ${workPerThread}; i++) {\n          dotProd[i] = vec4<${dataType}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${dataType}(dyCorner.x) + ${dataType}(wR)) / ${dataType}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${dataType}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${dataType}(dyCorner.y) + ${dataType}(wC)) / ${dataType}(strides.y);\n            let dyC2 = (${dataType}(dyCorner.y) + 1.0 + ${dataType}(wC)) / ${dataType}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${dataType}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${dataType}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1", "d2")};\n                let wValue1 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 1", "d2")};\n                let wValue2 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 2", "d2")};\n                let wValue3 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 3", "d2")};\n\n                var xValue = ${dy.get("batch", "idyR", "idyC", "d2")};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${dy.get("batch", "idyR", "idyC2", "d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${dataType}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${channelDim}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1", "d2")};\n                let wValue1 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 1", "d2")};\n                let wValue2 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 2", "d2")};\n                let wValue3 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 3", "d2")};\n\n                var xValue = ${dy.get("batch", "idyR", "idyC", "d2")};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1", "d2")};\n                let wValue1 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 1", "d2")};\n                let wValue2 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 2", "d2")};\n                let wValue3 = ${w.get("u32(wRPerm)", "u32(wCPerm)", "d1 + 3", "d2")};\n\n                var xValue = ${dy.get("batch", "idyR", "idyC2", "d2")};\n                let tmpval = vec4<${dataType}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${workPerThread}; i = i + 1) {\n          let value = dotProd[i] + ${hasBias ? "bias[c+i]" : `vec4<${dataType}>(0.0)`};\n          ${output.set("batch", "r", "c + i", "d1", "value")};\n        }\n      }`;\n        const codeSnippet = `\n          let outputIndices = ${output.offsetToIndices("global_idx")};\n          let batch = ${output.indicesGet("outputIndices", 0)};\n          let d1 = ${output.indicesGet("outputIndices", channelDim)};\n          let r = ${output.indicesGet("outputIndices", rowDim)};\n          let c = ${output.indicesGet("outputIndices", colDim)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${outputChannelsPerGroup};\n          let wOutChannel = d1 - groupId * ${outputChannelsPerGroup};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${dataType}(0.0);\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${dataType}(dyRCorner) + ${dataType}(wR)) / ${dataType}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${dataType}(outBackprop[${rowDim}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${dataType}(dyCCorner) + ${dataType}(wC)) / ${dataType}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${dataType}(outBackprop[${colDim}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${inputChannelsPerGroup};\n              for (var d2: u32 = 0; d2 < ${inputChannelsPerGroup}; d2 = d2 + 1) {\n                let xValue = ${isChannelsLast ? dy.get("batch", "idyR", "idyC", "inputChannel") : dy.get("batch", "inputChannel", "idyR", "idyC")};\n                let wValue = ${w.get("inputChannel", "wOutChannel", "u32(wRPerm)", "u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${hasBias ? "bias[d1]" : `${dataType}(0.0)`};\n          ${output.setByOffset("global_idx", "value")};\n        `;\n        return `\n  ${shaderHelper.declareVariables(...inputVariables, output)}\n  ${declareFunctions}\n  const outShape : vec4<u32> = vec4<u32>(${outputShape.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${inputs[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${attributes.strides[0]}, ${attributes.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${attributes.kernelShape[isChannelsLast ? 2 : 3]});\n  const dilations : vec2<u32> = vec2<u32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${attributes.dilations[0] <= 1 ? 0 : (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\n          ${attributes.dilations[1] <= 1 ? 0 : (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${attributes.pads[0] + attributes.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${attributes.pads[1] + attributes.pads[3]})/2);\n    ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)};\n  ${isVec4 ? codeSnippet4 : codeSnippet}}`;\n      };\n      createConvTranspose2DProgramInfo = (inputs, attributes, squeezeOutputShapeFunction) => {\n        const hasBias = inputs.length > 2;\n        const outputShape = attributes.outputShape;\n        const outputSize = ShapeUtil.size(outputShape);\n        const dispatch = [\n          Math.ceil(outputSize / 64),\n          1,\n          1\n        ];\n        LOG_DEBUG("verbose", () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\n        const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n        return {\n          name: "ConvTranspose2D",\n          shaderCache: { hint: attributes.cacheKey },\n          getRunData: () => ({\n            dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n            outputs: [{\n              dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n              dataType: inputs[0].dataType\n            }]\n          }),\n          getShaderSource: (shaderHelper) => createConvTranspose2DOpProgramShaderSource(\n            shaderHelper,\n            inputs,\n            attributes,\n            outputShape,\n            hasBias,\n            dispatch[1] === 1 && dispatch[2] === 1,\n            false,\n            dataType\n          )\n        };\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/conv-transpose.ts\n  var computeTotalPad, distributePadding, calculateOutputShapeAndPads, getAdjustedConvTransposeAttributes, parseConvTransposeAttributes, validateInputs10, weightTransposePerm, convTranspose2d, convTranspose1d, convTranspose;\n  var init_conv_transpose = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/conv-transpose.ts"() {\n      "use strict";\n      init_attribute_with_cache_key();\n      init_conv_backprop_mm_webgpu();\n      init_conv_backprop_webgpu();\n      init_fuse_utils();\n      init_transpose();\n      computeTotalPad = (inDim, stride, adj, kernel, dilation, outSize) => (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n      distributePadding = (totalPad, autoPad, pads, head, tail) => {\n        const smallPad = Math.floor(totalPad / 2);\n        if (autoPad === "SAME_UPPER") {\n          pads[head] = smallPad;\n          pads[tail] = totalPad - smallPad;\n        } else if (autoPad === "SAME_LOWER") {\n          pads[head] = totalPad - smallPad;\n          pads[tail] = smallPad;\n        }\n      };\n      calculateOutputShapeAndPads = (inputShape, kernelShape, dilations, autoPad, group, pads, strides, isChannelLast, outputPadding, outputShape) => {\n        const spatialRank = inputShape.length - 2;\n        const updateOutputShape = outputShape.length === 0;\n        if (outputPadding.length === 0) {\n          for (let i = 0; i < spatialRank; ++i) {\n            outputPadding.push(0);\n          }\n        }\n        const batchSize = inputShape[0];\n        const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\n        for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\n          const inSize = inputShape[j];\n          const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\n          const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\n          distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n          if (updateOutputShape) {\n            outputShape.push(\n              strides[i] * (inSize - 1) + outputPadding[i] + (kernelShape[j] - 1) * dilations[i] + 1 - pads[i] - pads[i + spatialRank]\n            );\n          }\n        }\n        outputShape.splice(0, 0, batchSize);\n        outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      };\n      getAdjustedConvTransposeAttributes = (attributes, inputs) => {\n        const kernelShape = attributes.kernelShape.slice();\n        if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 1) === 0) {\n          kernelShape.length = 0;\n          for (let i = 2; i < inputs[1].dims.length; ++i) {\n            kernelShape.push(inputs[1].dims[i]);\n          }\n        }\n        const isChannelsLast = attributes.format === "NHWC";\n        kernelShape.splice(0, 0, inputs[1].dims[0]);\n        kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\n        const pads = attributes.pads.slice();\n        const outputShape = attributes.outputShape.slice();\n        const outputPadding = attributes.outputPadding.slice();\n        const inputShape = inputs[0].dims;\n        let dilations = attributes.dilations.slice();\n        if (dilations.reduce((a, b) => a + b, 0) === 0) {\n          const spatialRank = inputs[0].dims.length - 2;\n          dilations = new Array(spatialRank).fill(1);\n        }\n        let strides = attributes.strides.slice();\n        if (strides.reduce((a, b) => a + b, 0) === 0) {\n          const spatialRank = inputs[0].dims.length - 2;\n          strides = new Array(spatialRank).fill(1);\n        }\n        calculateOutputShapeAndPads(\n          inputShape,\n          kernelShape,\n          dilations,\n          attributes.autoPad,\n          attributes.group,\n          pads,\n          strides,\n          isChannelsLast,\n          outputPadding,\n          outputShape\n        );\n        const newAttributes = Object.assign({}, attributes);\n        const cacheKey = attributes.cacheKey + [\n          kernelShape.join("n,"),\n          pads.join(","),\n          strides.join(","),\n          outputPadding.join(","),\n          outputShape.join(","),\n          dilations.join(",")\n        ].join("_");\n        Object.assign(newAttributes, { kernelShape, pads, outputPadding, outputShape, dilations, strides, cacheKey });\n        return newAttributes;\n      };\n      parseConvTransposeAttributes = (attributes) => {\n        const activationAttributes = parseInternalActivationAttributes(attributes);\n        const format = attributes.format;\n        const autoPad = [\n          "NOTSET",\n          "VALID",\n          "SAME_UPPER",\n          "SAME_LOWER"\n        ][typeof attributes.autoPad == "undefined" ? 0 : attributes.autoPad];\n        const dilations = attributes.dilations;\n        const group = attributes.group;\n        const kernelShape = attributes.kernelShape;\n        const pads = attributes.pads;\n        const strides = attributes.strides;\n        const wIsConst = attributes.wIsConst();\n        const outputPadding = attributes.outputPadding;\n        const outputShape = attributes.outputShape;\n        return createAttributeWithCacheKey({\n          autoPad,\n          format,\n          dilations,\n          group,\n          kernelShape,\n          outputPadding,\n          outputShape,\n          pads,\n          strides,\n          wIsConst,\n          ...activationAttributes\n        });\n      };\n      validateInputs10 = (inputs, attributes) => {\n        if (!inputs || inputs.length !== 2 && inputs.length !== 3) {\n          throw new Error("Conv requires 2 or 3 inputs");\n        }\n        if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n          throw new Error("currently only support 2-dimensional conv");\n        }\n        if (inputs[0].dims.length !== inputs[1].dims.length) {\n          throw new Error("filter does not have same dimension as input");\n        }\n        const dataChannel = inputs[0].dims[attributes.format === "NHWC" ? inputs[0].dims.length - 1 : 1];\n        const filterInChannel = inputs[1].dims[0];\n        if (dataChannel !== filterInChannel) {\n          throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");\n        }\n        const featureMaps = inputs[1].dims[1] * attributes.group;\n        if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n          throw new Error("invalid bias");\n        }\n        const spatialRank = inputs[0].dims.length - 2;\n        const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\n        if (dilationsSet && attributes.dilations.length !== spatialRank) {\n          throw new Error(`dilations should be ${spatialRank}D`);\n        }\n        const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\n        if (stridesSet && attributes.strides.length !== spatialRank) {\n          throw new Error(`strides should be ${spatialRank}D`);\n        }\n        const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\n        if (padsSet && attributes.pads.length !== spatialRank * 2) {\n          throw new Error(`pads should be ${spatialRank * 2}D`);\n        }\n        if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\n          throw new Error(`output_padding should be ${spatialRank}D`);\n        }\n        const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\n        if (kernelShapeSet && attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n          throw new Error("invalid kernel shape");\n        }\n        if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n          throw new Error("invalid output shape");\n        }\n      };\n      weightTransposePerm = [2, 3, 1, 0];\n      convTranspose2d = (context, inputs, attributes) => {\n        const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n        const isChannelsLast = attributes.format === "NHWC";\n        const outputShape = adjustedAttributes.outputShape;\n        const outChannels = outputShape[isChannelsLast ? 3 : 1];\n        const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n        if (adjustedAttributes.group !== 1 || outChannels === 1 && inputChannels === 1) {\n          context.compute(createConvTranspose2DProgramInfo(inputs, adjustedAttributes));\n          return;\n        }\n        const outHeight = outputShape[isChannelsLast ? 1 : 2];\n        const outWidth = outputShape[isChannelsLast ? 2 : 3];\n        const weightHeight = inputs[1].dims[2];\n        const weightWidth = inputs[1].dims[3];\n        const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n        const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n        const dimInner = weightHeight * weightWidth * inputChannels;\n        const sequentialAccessByThreads = (\n          /* backend.adapterInfo.isIntel() */\n          true\n        );\n        const transposedWeight = context.kernelCustomData.wT ?? context.compute(\n          createTransposeProgramInfo(inputs[1], weightTransposePerm),\n          { inputs: [1], outputs: [attributes.wIsConst ? -2 : -1] }\n        )[0];\n        if (attributes.wIsConst && !context.kernelCustomData.wT) {\n          context.kernelCustomData.wT = transposedWeight;\n        }\n        const convTransposeInputs = [inputs[0], transposedWeight];\n        const hasBias = inputs.length === 3;\n        if (hasBias) {\n          if (!isChannelsLast && inputs[2].dims.length === 1) {\n            convTransposeInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n          } else {\n            convTransposeInputs.push(inputs[2]);\n          }\n        }\n        context.compute(\n          createConv2DTransposeMatMulProgramInfo(\n            convTransposeInputs,\n            adjustedAttributes,\n            outputShape,\n            dimAOuter,\n            dimBOuter,\n            dimInner,\n            hasBias,\n            sequentialAccessByThreads\n          ),\n          { inputs: convTransposeInputs }\n        );\n      };\n      convTranspose1d = (context, attributes) => {\n        const isChannelLast = attributes.format === "NHWC";\n        const inputs = [\n          context.inputs[0].reshape(\n            isChannelLast ? (\n              // [N, W, C] -> [N, H=1, W, C]\n              [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]]\n            ) : (\n              // [N, C, W] -> [N, C, H=1, W]\n              [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]\n            )\n          ),\n          //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n          context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n        ];\n        if (inputs.length === 3) {\n          inputs.push(context.inputs[2]);\n        }\n        let kernelShape = attributes.kernelShape;\n        if (kernelShape.length === 0 || kernelShape[0] === 0) {\n          kernelShape = [context.inputs[1].dims[2]];\n        }\n        let dilations = attributes.dilations;\n        if (dilations.length === 0 || dilations[0] === 0) {\n          dilations = [1];\n        }\n        let strides = attributes.strides;\n        if (strides.length === 0 || strides[0] === 0) {\n          strides = [1];\n        }\n        let pads = attributes.pads;\n        if (pads.length === 0) {\n          pads = [0, 0];\n        }\n        pads = [0, pads[0], 0, pads[1]];\n        strides = [1].concat(strides);\n        dilations = [1].concat(dilations);\n        kernelShape = [1].concat(kernelShape);\n        const adjustedAttributes = getAdjustedConvTransposeAttributes({ ...attributes, pads, strides, dilations, kernelShape }, inputs);\n        context.compute(createConvTranspose2DProgramInfo(\n          inputs,\n          adjustedAttributes,\n          (outputShape) => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : [outputShape[0], outputShape[1], outputShape[3]]\n        ));\n      };\n      convTranspose = (context, attributes) => {\n        validateInputs10(context.inputs, attributes);\n        if (context.inputs[0].dims.length === 3) {\n          convTranspose1d(context, attributes);\n        } else {\n          convTranspose2d(context, context.inputs, attributes);\n        }\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/cumsum.ts\n  var createCumsumProgramInfo, cumsum, parseCumSumAttributes;\n  var init_cumsum = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/cumsum.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      createCumsumProgramInfo = (inputType, inputShape, axisInput, attributes) => {\n        const outputSize = ShapeUtil.size(inputShape);\n        const rank = inputShape.length;\n        const input = inputVariable("input", inputType, rank);\n        const output = outputVariable("output", inputType, rank);\n        const axisValue = axisInput.dataType === 6 /* int32 */ ? axisInput.getInt32Array()[0] : Number(axisInput.getBigInt64Array()[0]);\n        const axis = ShapeUtil.normalizeAxis(axisValue, rank);\n        const getShaderSource = (shaderHelper) => {\n          const index = ` i32(${input.indicesGet("inputIndices", "uniforms.axis")}) `;\n          const max = getElementAt("uniforms.input_shape", "uniforms.axis", rank);\n          const lowerLimit = attributes.reverse ? index + (attributes.exclusive ? " + 1" : "") : "0";\n          const upperLimit = attributes.reverse ? max : index + (attributes.exclusive ? "" : " + 1");\n          return `\n                ${shaderHelper.registerUniform("outputSize", "u32").registerUniform("axis", "u32").declareVariables(input, output)}\n                ${shaderHelper.mainStart()}\n                  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${output.offsetToIndices("global_idx")};\n                  var sum = ${output.type.value}(0);\n                  let first : i32 = ${lowerLimit};\n                  let last : i32 = ${upperLimit};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${input.indicesSet("inputIndices", "uniforms.axis", "u32(i)")};\n                    sum = sum + ${input.getByIndices("inputIndices")};\n                  }\n                  ${output.setByOffset("global_idx", "sum")};\n                }`;\n        };\n        return {\n          name: "CumSum",\n          shaderCache: { hint: attributes.cacheKey, inputDependencies: ["rank"] },\n          getRunData: () => ({\n            outputs: [{ dims: inputShape, dataType: inputType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms: [\n              { type: "uint32", data: outputSize },\n              { type: "int32", data: axis },\n              ...createTensorShapeVariables(inputShape),\n              ...createTensorShapeVariables(inputShape)\n            ]\n          }),\n          getShaderSource\n        };\n      };\n      cumsum = (context, attributes) => {\n        const inputShape = context.inputs[0].dims;\n        const inputType = context.inputs[0].dataType;\n        const axis = context.inputs[1];\n        context.compute(createCumsumProgramInfo(inputType, inputShape, axis, attributes), { inputs: [0] });\n      };\n      parseCumSumAttributes = (attributes) => {\n        const exclusive = attributes.exclusive === 1;\n        const reverse = attributes.reverse === 1;\n        return createAttributeWithCacheKey({ exclusive, reverse });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/einsum.ts\n  var symbolPattern, termPattern, termPatternOnly, lhsPattern, lhsPatternOnly, EinsumTerm, EinsumEquation, appendMax, createEinsumProgramInfo, einsum, parseEinsumAttributes;\n  var init_einsum = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/einsum.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      symbolPattern = "[a-zA-Z]|\\\\.\\\\.\\\\.";\n      termPattern = "(" + symbolPattern + ")+";\n      termPatternOnly = "^" + termPattern + "$";\n      lhsPattern = "(" + termPattern + ",)*" + termPattern;\n      lhsPatternOnly = "^" + lhsPattern + "$";\n      EinsumTerm = class {\n        constructor(inputIndex = -1) {\n          this.symbolToIndices = /* @__PURE__ */ new Map();\n          this.inputIndex = inputIndex;\n        }\n        // Add a symbol to the term\n        addSymbol(symbol, index) {\n          let value = this.symbolToIndices.get(symbol);\n          if (value === void 0) {\n            value = [index];\n          } else {\n            value.push(index);\n          }\n          this.symbolToIndices.set(symbol, value);\n        }\n        // -1 for output and 0, 1, 2, ... for inputs\n      };\n      EinsumEquation = class {\n        constructor(inputs, equation) {\n          this.equation = equation;\n          this.hasEllipsis = false;\n          this.symbolToInfo = /* @__PURE__ */ new Map();\n          this.lhs = new Array();\n          this.outputDims = [];\n          let [lhs, rhs] = equation.includes("->") ? equation.split("->", 2) : [equation, ""];\n          if (!lhs.match(RegExp(lhsPatternOnly))) {\n            throw new Error("Invalid LHS term");\n          }\n          const inputTerms = lhs.split(",");\n          inputTerms.forEach((inputTerm, index) => {\n            const dims = inputs[index].dims.slice();\n            if (!inputTerm.match(RegExp(termPatternOnly))) {\n              throw new Error("Invalid LHS term");\n            }\n            const einsumTerm = this.processTerm(inputTerm, true, dims, index);\n            this.lhs.push(einsumTerm);\n          });\n          if (rhs === "") {\n            rhs += [...this.symbolToInfo.entries()].filter(([sym, info]) => info.count === 1 || sym === "...").map(([sym]) => sym).join("");\n          } else {\n            if (!rhs.match(RegExp(termPattern))) {\n              throw new Error("Invalid RHS");\n            }\n          }\n          const rhsSymbols = rhs.match(RegExp(symbolPattern, "g"));\n          rhsSymbols?.forEach((symbol) => {\n            if (symbol === "...") {\n              this.outputDims = this.outputDims.concat(this.ellipsisDims);\n            } else {\n              const info = this.symbolToInfo.get(symbol);\n              if (info === void 0) {\n                throw new Error("Invalid RHS symbol");\n              }\n              this.outputDims.push(info.dimValue);\n            }\n          });\n          this.rhs = this.processTerm(rhs, false, this.outputDims);\n        }\n        // End of EinsumEqation constructor\n        // Add a symbol to the equation\n        addSymbol(symbol, dimValue, inputIndex) {\n          let info = this.symbolToInfo.get(symbol);\n          if (info !== void 0) {\n            if (info.dimValue !== dimValue && info.count !== 1) {\n              throw new Error("Dimension mismatch");\n            } else {\n              info.count++;\n              info.inputIndices.push(inputIndex);\n            }\n          } else {\n            info = { count: 1, dimValue, inputIndices: [inputIndex] };\n          }\n          this.symbolToInfo.set(symbol, info);\n        }\n        // Process one input/output term\n        processTerm(term, isInput, dims, index = -1) {\n          const rank = dims.length;\n          let ellipsis = false;\n          let ellipsisDims = [];\n          let nextDim = 0;\n          if (!term.match(RegExp(termPatternOnly)) && (!isInput && term !== "")) {\n            throw new Error("Invalid LHS term");\n          }\n          const indexSymbols = term.match(RegExp(symbolPattern, "g"));\n          const einsumTerm = new EinsumTerm(index);\n          indexSymbols?.forEach((symbol, i) => {\n            if (symbol === "...") {\n              if (ellipsis) {\n                throw new Error("Only one ellipsis is allowed per input term");\n              }\n              ellipsis = true;\n              const ellipsisDimLength = rank - indexSymbols.length + 1;\n              if (ellipsisDimLength < 0) {\n                throw new Error("Ellipsis out of bounds");\n              }\n              ellipsisDims = dims.slice(nextDim, nextDim + ellipsisDimLength);\n              if (this.hasEllipsis) {\n                if (this.ellipsisDims.length !== ellipsisDims.length || this.ellipsisDims.toString() !== ellipsisDims.toString()) {\n                  throw new Error("Ellipsis dimensions mismatch");\n                }\n              } else if (isInput) {\n                this.hasEllipsis = true;\n                this.ellipsisDims = ellipsisDims;\n              } else {\n                throw new Error("Ellipsis must be specified in the LHS");\n              }\n              for (let j = 0; j < ellipsisDims.length; j++) {\n                const symbol2 = String.fromCharCode("0".charCodeAt(0) + j);\n                einsumTerm.addSymbol(symbol2, i + j);\n                this.addSymbol(symbol2, dims[nextDim++], index);\n              }\n            } else {\n              einsumTerm.addSymbol(symbol, i + (this.hasEllipsis ? this.ellipsisDims.length - 1 : 0));\n              this.addSymbol(symbol, dims[nextDim++], index);\n            }\n          });\n          return einsumTerm;\n        }\n        // Output dimensions of the equation\n      };\n      appendMax = (name) => name + "_max";\n      createEinsumProgramInfo = (enableInputShapesUniforms, inputShapes, dataType, einsumEquation, outputShape) => {\n        const shapeOrRanks = inputShapes.map((dims, index) => enableInputShapesUniforms[index] ? dims.length : dims);\n        const inputVars = shapeOrRanks.map((shapeOrRank, index) => inputVariable(`input${index}`, dataType, shapeOrRank));\n        const outputSize = ShapeUtil.size(outputShape);\n        const enableOutputShapesUniforms = enableShapesUniforms(outputShape.length);\n        const outputShapeOrRank = enableOutputShapesUniforms ? outputShape.length : outputShape;\n        const output = outputVariable("output", dataType, outputShapeOrRank);\n        const uniformsSymbols = [...einsumEquation.symbolToInfo.keys()].filter((symbol) => !einsumEquation.rhs.symbolToIndices.has(symbol));\n        const getShaderSource = (shaderHelper) => {\n          const idxCopy = [];\n          const initProd = "var prod = 1.0;";\n          const initSum = "var sum = 0.0;";\n          const updateSum = "sum += prod;";\n          const reduceOpsSetIndices = [];\n          const reduceOpsLoopHeaders = [];\n          const reduceOpsLoopFooters = [];\n          const reduceOpCompute = [];\n          const isReduceOpsWithoutLoop = einsumEquation.symbolToInfo.size === einsumEquation.rhs.symbolToIndices.size;\n          einsumEquation.symbolToInfo.forEach((info, symbol) => {\n            if (einsumEquation.rhs.symbolToIndices.has(symbol)) {\n              const outputIndex = einsumEquation.rhs.symbolToIndices.get(symbol)?.[0];\n              if (outputIndex !== void 0) {\n                einsumEquation.lhs.forEach((term, i) => {\n                  if (info.inputIndices.includes(i)) {\n                    const indices = term.symbolToIndices.get(symbol);\n                    if (indices === void 0) {\n                      throw new Error("Invalid symbol error");\n                    }\n                    indices.forEach((index) => {\n                      idxCopy.push(`${inputVars[i].indicesSet(\n                        `input${i}Indices`,\n                        index,\n                        output.indicesGet("outputIndices", outputIndex)\n                      )}`);\n                    });\n                  }\n                });\n              }\n            } else {\n              einsumEquation.lhs.forEach((term, i) => {\n                if (info.inputIndices.includes(i)) {\n                  const indices = term.symbolToIndices.get(symbol);\n                  if (indices === void 0) {\n                    throw new Error("Invalid symbol error");\n                  }\n                  indices.forEach((index) => {\n                    reduceOpsSetIndices.push(`${inputVars[i].indicesSet(`input${i}Indices`, index, `${symbol}`)}`);\n                  });\n                  reduceOpCompute.push(`prod *= ${inputVars[i].getByIndices(`input${i}Indices`)};`);\n                }\n              });\n              reduceOpsLoopHeaders.push(\n                `for(var ${symbol}: u32 = 0; ${symbol} < uniforms.${appendMax(symbol)}; ${symbol}++) {`\n              );\n              reduceOpsLoopFooters.push("}");\n            }\n          });\n          const reduceOps2 = isReduceOpsWithoutLoop ? [\n            ...idxCopy,\n            `let sum = ${inputVars.map((inputVar, i) => inputVar.getByIndices(`input${i}Indices`)).join(" * ")};`\n          ] : [\n            ...idxCopy,\n            initSum,\n            ...reduceOpsLoopHeaders,\n            ...reduceOpsSetIndices,\n            initProd,\n            ...reduceOpCompute,\n            updateSum,\n            ...reduceOpsLoopFooters\n          ];\n          return `\n            ${shaderHelper.registerUniforms(uniformsSymbols.map((symbol) => ({ name: `${appendMax(symbol)}`, type: "u32" }))).registerUniform("outputSize", "u32").declareVariables(...inputVars, output)}\n\n            ${shaderHelper.mainStart()}\n            ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${output.offsetToIndices("global_idx")};\n            ${inputVars.map((_var, i) => `var input${i}Indices: ${inputVars[i].type.indices};`).join("\\n")}\n            ${reduceOps2.join("\\n")};\n            ${output.setByOffset("global_idx", "sum")};\n          }`;\n        };\n        return {\n          name: "Einsum",\n          shaderCache: {\n            hint: einsumEquation.equation,\n            inputDependencies: enableInputShapesUniforms.map((enableShapeUniform) => enableShapeUniform ? "rank" : "dims")\n          },\n          getRunData: () => {\n            const programUniformsInit = uniformsSymbols.filter((symbol) => einsumEquation.symbolToInfo.has(symbol)).map((symbol) => ({ type: "uint32", data: einsumEquation.symbolToInfo.get(symbol)?.dimValue || 0 }));\n            programUniformsInit.push({ type: "uint32", data: outputSize });\n            const programUniforms = inputShapes.filter((_, index) => enableInputShapesUniforms[index]).map((dims, _) => [...createTensorShapeVariables(dims)]).reduce((acc, inputProgramUniforms) => acc.concat(inputProgramUniforms), programUniformsInit);\n            if (enableOutputShapesUniforms) {\n              programUniforms.push(...createTensorShapeVariables(outputShape));\n            }\n            return {\n              outputs: [{ dims: outputShape, dataType }],\n              dispatchGroup: { x: Math.ceil(\n                outputSize / 64\n                /* workgroup size */\n              ) },\n              programUniforms\n            };\n          },\n          getShaderSource\n        };\n      };\n      einsum = (context, attributes) => {\n        const einsumEquation = new EinsumEquation(context.inputs, attributes.equation);\n        const enableInputShapesUniforms = context.inputs.map((input, _) => enableShapesUniforms(input.dims.length));\n        const outputShape = einsumEquation.outputDims;\n        const inputShapes = context.inputs.map((input, _) => input.dims);\n        context.compute(createEinsumProgramInfo(\n          enableInputShapesUniforms,\n          inputShapes,\n          context.inputs[0].dataType,\n          einsumEquation,\n          outputShape\n        ));\n      };\n      parseEinsumAttributes = (attributes) => {\n        const equation = attributes.equation.replace(/\\s+/g, "");\n        return createAttributeWithCacheKey({ equation });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/expand.ts\n  var validateInputs11, getAdjustedShape, calculateOutputShape2, createExpandProgramInfo, expand;\n  var init_expand = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/expand.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_common();\n      validateInputs11 = (inputs) => {\n        if (!inputs || inputs.length !== 2) {\n          throw new Error("Expand requires 2 input.");\n        }\n        const inputShape = inputs[0].dims;\n        const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n        let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\n        let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\n        for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\n          if (shape[shapeIndex] !== inputShape[inputShapeIndex] && shape[shapeIndex] !== 1 && inputShape[inputShapeIndex] !== 1) {\n            throw new Error("Expand requires shape to be broadcastable to input");\n          }\n        }\n      };\n      getAdjustedShape = (shape1, shape2) => {\n        const diff = shape1.length - shape2.length;\n        const shape = [];\n        for (let i = 0; i < diff; ++i) {\n          shape.push(shape1[i]);\n        }\n        for (let i = 0; i < shape2.length; ++i) {\n          shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\n        }\n        return shape;\n      };\n      calculateOutputShape2 = (inputShape, shape) => inputShape.length > shape.length ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\n      createExpandProgramInfo = (inputs) => {\n        const inputShape = inputs[0].dims;\n        const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n        const outputShape = calculateOutputShape2(inputShape, shape);\n        const dataType = inputs[0].dataType;\n        const components = dataType === 9 /* bool */ ? 4 : 1;\n        const outputSize = Math.ceil(ShapeUtil.size(outputShape) / components);\n        const enableInputShapeUniform = enableShapesUniforms(inputShape.length);\n        const enableOutputShapeUniform = enableShapesUniforms(outputShape.length);\n        const getShaderSource = (shaderHelper) => {\n          const inputShapeOrRank = enableInputShapeUniform ? inputShape.length : inputShape;\n          const outputShapeOrRank = enableOutputShapeUniform ? outputShape.length : outputShape;\n          const input = inputVariable("input", dataType, inputShapeOrRank, components);\n          const output = outputVariable("output", dataType, outputShapeOrRank, components);\n          let assignment;\n          if (dataType === 9 /* bool */) {\n            const singleAssignment = (resStr, x, typeCast = "") => `\n          let outputIndices${x} = ${output.offsetToIndices(`outputOffset + ${x}u`)};\n          let offset${x} = ${input.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n          let index${x} = offset${x} / 4u;\n          let component${x} = offset${x} % 4u;\n          ${resStr}[${x}] = ${typeCast}(${input.getByOffset(`index${x}`)}[component${x}]);\n        `;\n            assignment = `\n        let outputOffset = global_idx * ${components};\n        var data = vec4<u32>(0);\n        ${singleAssignment("data", 0, "u32")}\n        ${singleAssignment("data", 1, "u32")}\n        ${singleAssignment("data", 2, "u32")}\n        ${singleAssignment("data", 3, "u32")}\n        ${output.setByOffset("global_idx", "data")}\n      }`;\n          } else {\n            assignment = `\n        let outputIndices = ${output.offsetToIndices("global_idx")};\n        let inputOffset = ${input.broadcastedIndicesToOffset("outputIndices", output)};\n        ${output.setByOffset("global_idx", input.getByOffset("inputOffset"))}\n      }`;\n          }\n          return `\n    ${shaderHelper.registerUniform("vec_size", "u32").declareVariables(input, output)}\n    ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${assignment}`;\n        };\n        const programUniforms = [{ type: "uint32", data: outputSize }];\n        if (enableInputShapeUniform) {\n          programUniforms.push(...createTensorShapeVariables(inputShape));\n        }\n        if (enableOutputShapeUniform) {\n          programUniforms.push(...createTensorShapeVariables(outputShape));\n        }\n        return {\n          name: "Expand",\n          shaderCache: { hint: `${outputShape.length}`, inputDependencies: [enableInputShapeUniform ? "rank" : "dims"] },\n          getShaderSource,\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          })\n        };\n      };\n      expand = (context) => {\n        validateInputs11(context.inputs);\n        context.compute(createExpandProgramInfo(context.inputs), { inputs: [0] });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/gather.ts\n  var validateInputs12, createGatherProgramInfo, parseGatherAttributes, gather;\n  var init_gather = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/gather.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs12 = (inputs) => {\n        if (!inputs || inputs.length !== 2) {\n          throw new Error("Gather requires 2 inputs.");\n        }\n      };\n      createGatherProgramInfo = (inputs, attributes) => {\n        const inputShape = inputs[0].dims;\n        const indicesShape = inputs[1].dims;\n        const inputRank = inputShape.length;\n        const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n        const outputShape = inputShape.slice(0);\n        outputShape.splice(axis, 1, ...indicesShape);\n        const axisDimLimit = inputShape[axis];\n        const components = inputs[0].dataType === 9 /* bool */ ? 4 : 1;\n        const outputSize = Math.ceil(ShapeUtil.size(outputShape) / components);\n        const enableInputShapesUniforms = enableShapesUniforms(inputs[0].dims.length);\n        const inputShapeOrRank = enableInputShapesUniforms ? inputs[0].dims.length : inputs[0].dims;\n        const enableIndicesShapesUniforms = enableShapesUniforms(inputs[1].dims.length);\n        const indicesShapeOrRank = enableIndicesShapesUniforms ? inputs[1].dims.length : inputs[1].dims;\n        const enableOutputShapesUniforms = enableShapesUniforms(outputShape.length);\n        const outputShapeOrRank = enableOutputShapesUniforms ? outputShape.length : outputShape;\n        const programUniforms = [{ type: "uint32", data: outputSize }, { type: "int32", data: axisDimLimit }, { type: "uint32", data: axis }];\n        if (enableInputShapesUniforms) {\n          programUniforms.push(...createTensorShapeVariables(inputs[0].dims));\n        }\n        if (enableIndicesShapesUniforms) {\n          programUniforms.push(...createTensorShapeVariables(inputs[1].dims));\n        }\n        if (enableOutputShapesUniforms) {\n          programUniforms.push(...createTensorShapeVariables(outputShape));\n        }\n        const inputDependencies = [];\n        inputDependencies.push(enableInputShapesUniforms ? "rank" : "dims");\n        inputDependencies.push(enableIndicesShapesUniforms ? "rank" : "dims");\n        const getShaderSource = (shaderHelper) => {\n          const data = inputVariable("data", inputs[0].dataType, inputShapeOrRank, components);\n          const indices = inputVariable("inputIndices", inputs[1].dataType, indicesShapeOrRank);\n          const output = outputVariable("output", inputs[0].dataType, outputShapeOrRank, components);\n          const calcDataIndices = (x) => {\n            const indicesRank = indicesShape.length;\n            let calcStr = `var indicesIndices${x}  = ${indices.type.indices}(0);`;\n            for (let i = 0; i < indicesRank; i++) {\n              calcStr += `${indicesRank > 1 ? `indicesIndices${x}[${i}]` : `indicesIndices${x}`} = ${outputShape.length > 1 ? `outputIndices${x}[uniforms.axis + ${i}]` : `outputIndices${x}`};`;\n            }\n            calcStr += `\n          var idx${x} = ${indices.getByIndices(`indicesIndices${x}`)};\n          if (idx${x} < 0) {\n            idx${x} = idx${x} + uniforms.axisDimLimit;\n          }\n          var dataIndices${x} = ${data.type.indices}(0);\n        `;\n            for (let i = 0, j = 0; i < inputRank; i++) {\n              if (i === axis) {\n                calcStr += `${inputRank > 1 ? `dataIndices${x}[${i}]` : `dataIndices${x}`} = u32(idx${x});`;\n                j += indicesRank;\n              } else {\n                calcStr += `${inputRank > 1 ? `dataIndices${x}[${i}]` : `dataIndices${x}`} = ${outputShape.length > 1 ? `outputIndices${x}[${j}]` : `outputIndices${x}`};`;\n                j++;\n              }\n            }\n            return calcStr;\n          };\n          let assignment;\n          if (inputs[0].dataType === 9 /* bool */) {\n            const singleAssignment = (resStr, x, typeCast = "") => `\n          let outputIndices${x} = ${output.offsetToIndices(`outputOffset + ${x}u`)};\n          ${calcDataIndices(x)};\n          let offset${x} = ${data.indicesToOffset(`dataIndices${x}`)};\n          let index${x} = offset${x} / 4u;\n          let component${x} = offset${x} % 4u;\n          ${resStr}[${x}] = ${typeCast}(${data.getByOffset(`index${x}`)}[component${x}]);\n        `;\n            assignment = `\n        let outputOffset = global_idx * ${components};\n        var value = vec4<u32>(0);\n        ${singleAssignment("value", 0, "u32")}\n        ${singleAssignment("value", 1, "u32")}\n        ${singleAssignment("value", 2, "u32")}\n        ${singleAssignment("value", 3, "u32")}\n        ${output.setByOffset("global_idx", "value")}\n      `;\n          } else {\n            assignment = `\n      let outputIndices = ${output.offsetToIndices("global_idx")};\n      ${calcDataIndices("")};\n      let value = ${data.getByIndices("dataIndices")};\n      ${output.setByOffset("global_idx", "value")};\n      `;\n          }\n          return `\n      ${shaderHelper.registerUniform("outputSize", "u32").registerUniform("axisDimLimit", "i32").registerUniform("axis", "u32").declareVariables(data, indices, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${assignment}\n      }`;\n        };\n        return {\n          name: "Gather",\n          shaderCache: { hint: attributes.cacheKey, inputDependencies },\n          getRunData: () => ({\n            outputs: [\n              { dims: outputShape, dataType: inputs[0].dataType }\n            ],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n      parseGatherAttributes = (attributes) => createAttributeWithCacheKey({ axis: attributes.axis });\n      gather = (context, attributes) => {\n        const inputs = context.inputs;\n        validateInputs12(inputs);\n        context.compute(createGatherProgramInfo(context.inputs, attributes));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/gather-elements.ts\n  var validateInputs13, createGatherElementsProgramInfo, parseGatherElementsAttributes, gatherElements;\n  var init_gather_elements = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/gather-elements.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs13 = (inputs) => {\n        if (!inputs || inputs.length !== 2) {\n          throw new Error("GatherElements requires 2 inputs.");\n        }\n        if (inputs[0].dims.length < 1) {\n          throw new Error("GatherElements requires that the data input be rank >= 1.");\n        }\n        if (inputs[0].dims.length !== inputs[1].dims.length) {\n          throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`);\n        }\n      };\n      createGatherElementsProgramInfo = (inputs, attributes) => {\n        const inputShape = inputs[0].dims;\n        const inputOutputDataType = inputs[0].dataType;\n        const inputRank = inputShape.length;\n        const indicesShape = inputs[1].dims;\n        const indicesDataType = inputs[1].dataType;\n        const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n        const axisDimLimit = inputShape[axis];\n        const outputShape = indicesShape.slice(0);\n        const outputSize = ShapeUtil.size(outputShape);\n        const input = inputVariable("input", inputOutputDataType, inputRank);\n        const indices = inputVariable("indicesInput", indicesDataType, indicesShape.length);\n        const output = outputVariable("output", inputOutputDataType, outputShape.length);\n        const programUniforms = [{ type: "uint32", data: outputSize }, { type: "int32", data: axisDimLimit }, { type: "uint32", data: axis }];\n        programUniforms.push(...createTensorShapeVariables(inputShape));\n        programUniforms.push(...createTensorShapeVariables(indicesShape));\n        programUniforms.push(...createTensorShapeVariables(outputShape));\n        const inputDependencies = ["rank", "rank"];\n        const getShaderSource = (shaderHelper) => `\n      ${shaderHelper.registerUniform("outputSize", "u32").registerUniform("axisDimLimit", "i32").registerUniform("axis", "u32").declareVariables(input, indices, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${output.offsetToIndices("global_idx")};\n\n      var idx = ${indices.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${input.type.indices}(outputIndices);\n      ${input.indicesSet("inputIndices", "uniforms.axis", "u32(idx)")};\n      let value = ${input.getByIndices("inputIndices")};\n\n      ${output.setByOffset("global_idx", "value")};\n  }`;\n        return {\n          name: "GatherElements",\n          shaderCache: { inputDependencies },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n      parseGatherElementsAttributes = (attributes) => createAttributeWithCacheKey({ axis: attributes.axis });\n      gatherElements = (context, attributes) => {\n        const inputs = context.inputs;\n        validateInputs13(inputs);\n        context.compute(createGatherElementsProgramInfo(context.inputs, attributes));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/gemm.ts\n  var validateInputs14, createGemmProgramInfo, parseGemmAttributes, gemm;\n  var init_gemm = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/gemm.ts"() {\n      "use strict";\n      init_util();\n      init_common();\n      validateInputs14 = (inputs) => {\n        if (!inputs) {\n          throw new Error("Input is missing");\n        }\n        if (inputs.length < 2 || inputs.length > 3) {\n          throw new Error("Invaid input number.");\n        }\n        if (inputs.length === 3 && inputs[2].dims.length > 2) {\n          throw new Error("Invalid input shape of C");\n        }\n        if (inputs[0].dataType !== inputs[1].dataType || inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType) {\n          throw new Error("Input types are mismatched");\n        }\n      };\n      createGemmProgramInfo = (inputs, attributes) => {\n        const aShape = inputs[0].dims.slice();\n        const bShape = inputs[1].dims.slice();\n        const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape,\n          attributes.transA,\n          bShape,\n          attributes.transB,\n          inputs.length === 3 ? inputs[2].dims : void 0\n        );\n        const outputShape = [M, N];\n        if (!outputShape) {\n          throw new Error("Can\'t use gemm on the given tensors");\n        }\n        const outputSize = ShapeUtil.size(outputShape);\n        const programUniforms = [\n          { type: "uint32", data: outputSize },\n          { type: "uint32", data: M },\n          { type: "uint32", data: N },\n          { type: "uint32", data: K },\n          { type: "float32", data: attributes.alpha },\n          { type: "float32", data: attributes.beta }\n        ];\n        const inputDependencies = ["type", "type"];\n        if (inputs.length === 3) {\n          programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n          inputDependencies.push("rank");\n        }\n        programUniforms.push(...createTensorShapeVariables(outputShape));\n        const getShaderSource = (shaderHelper) => {\n          let line = "";\n          if (attributes.transA && attributes.transB) {\n            line = "value += a[k * uniforms.M + m] * b[n * uniforms.K + k];";\n          } else if (attributes.transA && !attributes.transB) {\n            line = "value += a[k * uniforms.M + m] * b[k * uniforms.N + n];";\n          } else if (!attributes.transA && attributes.transB) {\n            line = "value += a[m * uniforms.K + k] * b[n * uniforms.K + k];";\n          } else if (!attributes.transA && !attributes.transB) {\n            line = "value += a[m * uniforms.K + k] * b[k * uniforms.N + n];";\n          }\n          const calculateAlpha = attributes.alpha === 1 ? "" : "value *= uniforms.alpha;";\n          const a = inputVariable("a", inputs[0].dataType, inputs[0].dims);\n          const b = inputVariable("b", inputs[1].dataType, inputs[1].dims);\n          const dataType = a.type.value;\n          let c = null;\n          const variables = [a, b];\n          if (inputs.length === 3) {\n            c = inputVariable("c", inputs[2].dataType, inputs[2].dims.length);\n            variables.push(c);\n          }\n          const output = outputVariable("output", inputs[0].dataType, outputShape.length);\n          variables.push(output);\n          const uniforms = [\n            { name: "output_size", type: "u32" },\n            { name: "M", type: "u32" },\n            { name: "N", type: "u32" },\n            { name: "K", type: "u32" },\n            { name: "alpha", type: "f32" },\n            { name: "beta", type: "f32" }\n          ];\n          return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${(() => {\n            if (c != null) {\n              return `let cOffset = ${c.broadcastedIndicesToOffset("vec2(m, n)", output)}; value += ${dataType}(uniforms.beta) * ${c.getByOffset("cOffset")};`;\n            }\n            return "";\n          })()}\n    output[global_idx] = value;\n  }`;\n        };\n        return {\n          name: "Gemm",\n          shaderCache: { hint: `${attributes.cacheKey}`, inputDependencies },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n      parseGemmAttributes = (attributes) => {\n        const transA = attributes.transA;\n        const transB = attributes.transB;\n        const alpha = attributes.alpha;\n        const beta = attributes.beta;\n        return { transA, transB, alpha, beta, cacheKey: `${attributes.transA};${attributes.transB};${attributes.alpha === 1}` };\n      };\n      gemm = (context, attributes) => {\n        validateInputs14(context.inputs);\n        context.compute(createGemmProgramInfo(context.inputs, attributes));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/instance-norm.ts\n  var createInstanceNormProgramInfo, computeMean, createInstanceNormNHWCProgramInfo, instanceNorm;\n  var init_instance_norm = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/instance-norm.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_common();\n      createInstanceNormProgramInfo = (inputs, attributes) => {\n        const xShape = inputs[0].dims;\n        const outputShape = xShape;\n        const axis = 2;\n        const normCount = ShapeUtil.sizeToDimension(xShape, axis);\n        const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\n        const components = getMaxComponents(normSize);\n        const normPackedSize = normSize / components;\n        const inputShape = [xShape[0], xShape[1], normPackedSize];\n        const inputDependencies = ["rank", "type", "type"];\n        const programUniforms = [{ type: "uint32", data: normSize }, { type: "uint32", data: normPackedSize }];\n        programUniforms.push(...createTensorShapeVariables(inputShape), ...createTensorShapeVariables(inputShape));\n        const getShaderSource = (shaderHelper) => {\n          const x = inputVariable("x", inputs[0].dataType, inputShape.length, components);\n          const scale = inputVariable("scale", inputs[1].dataType, inputs[1].dims);\n          const bias = inputVariable("bias", inputs[2].dataType, inputs[2].dims);\n          const output = outputVariable("output", inputs[0].dataType, inputShape.length, components);\n          const variables = [x, scale, bias, output];\n          const dataType = x.type.value;\n          const f32Type = components === 1 ? "f32" : `vec${components}<f32>`;\n          const workgroupSize = 64;\n          const uniforms = [{ name: "normSize", type: "u32" }, { name: "normPackedSize", type: "u32" }];\n          return `\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${f32Type}, ${workgroupSize}>;\n  const workgroupSize = ${workgroupSize}u;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n  ${shaderHelper.mainStart(workgroupSize)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${f32Type}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${f32Type}(${x.get("batch", "channel", "h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${sumVector("workgroupShared[0]", components)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${f32Type}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${f32Type}(${x.get("batch", "channel", "h")}) - ${f32Type}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${sumVector("workgroupShared[0]", components)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${attributes.epsilon}));\n    let channelScale = invStdDev * f32(${scale.getByOffset("channel")});\n    let channelShift = f32(${bias.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${x.get("batch", "channel", "h")} * ${dataType}(${f32Type}(channelScale)) + ${dataType}(${f32Type}(channelShift));\n      ${output.set("batch", "channel", "h", "value")};\n    }\n  }`;\n        };\n        return {\n          ...{ name: "InstanceNormalization" },\n          // TODO: use epsilon as uniform. Currently epsilon as uniform fails test_instancenorm_epsilon.\n          shaderCache: { hint: `${attributes.epsilon};${components}`, inputDependencies },\n          getRunData: () => ({\n            outputs: [\n              { dims: outputShape, dataType: inputs[0].dataType }\n            ],\n            dispatchGroup: { x: normCount },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n      computeMean = (context, input, scale, bias, n, h, c, epsilon) => {\n        const components = getMaxComponents(c);\n        const WG = 64;\n        const outputType = components === 1 ? "vec2f" : `mat2x${components}f`;\n        const sumCastType = components === 1 ? "f32" : `vec${components}f`;\n        const setOutputValue = (var1, var2) => `${outputType}(${var1}, ${var2})`;\n        const unitsOfWork = n * c / components;\n        const wgSize = Math.ceil(h / WG);\n        const meanInputDependencies = ["type"];\n        const meanProgramUniforms = [\n          { type: "uint32", data: wgSize },\n          { type: "uint32", data: h },\n          { type: "uint32", data: Math.floor(c / components) },\n          { type: "uint32", data: Math.floor(h * c / components) }\n        ];\n        const getMeanShaderSource = (shaderHelper) => {\n          const inputHelper = inputVariable("input", input.dataType, input.dims, components);\n          return `\n  ${shaderHelper.declareVariables(inputHelper)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${outputType}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${shaderHelper.mainStart(WG)}\n    let currentImageNumber = global_idx / ${WG} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${WG}) % uniforms.C;\n    let wgId = global_idx % ${WG};\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${fillVector("f32", components)};\n    var squaredSum = ${fillVector("f32", components)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${sumCastType}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${setOutputValue("sum", "squaredSum")};\n  }`;\n        };\n        const meanValues = context.compute(\n          {\n            name: "InstanceNormComputeMean",\n            shaderCache: { hint: `${components}`, inputDependencies: meanInputDependencies },\n            getRunData: () => ({\n              outputs: [\n                { dims: [n, c, WG, 2], dataType: 1 /* float */ }\n              ],\n              dispatchGroup: { x: n * c / components },\n              programUniforms: meanProgramUniforms\n            }),\n            getShaderSource: getMeanShaderSource\n          },\n          { inputs: [input], outputs: [-1] }\n        )[0];\n        const programUniforms = [\n          { type: "uint32", data: unitsOfWork },\n          { type: "uint32", data: h },\n          { type: "uint32", data: Math.floor(c / components) },\n          { type: "uint32", data: Math.floor(WG * c / components) }\n        ];\n        const inputDependencies = ["type", "type", "type"];\n        const getShaderSource = (shaderHelper) => {\n          const scaleHelper = inputVariable("scale", scale.dataType, scale.dims, components);\n          const biasHelper = inputVariable("bias", bias.dataType, bias.dims, components);\n          return `\n  @group(0) @binding(0) var<storage, read> input : array<${outputType}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${scaleHelper.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${biasHelper.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${outputType}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${fillVector("f32", components)};\n    var squaredSum = ${fillVector("f32", components)};\n    for (var i: u32 = 0; i < ${WG}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${WG}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${epsilon}));\n    let channelScale = invStdDev * ${sumCastType}(scale[currentChannelNumber]);\n    let channelShift = ${sumCastType}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${setOutputValue("channelScale", "channelShift")};\n  }`;\n        };\n        return context.compute(\n          {\n            name: "InstanceNormComputeChannelScaleShift",\n            // TODO: use epsilon as uniform. Currently epsilon as uniform fails test_instancenorm_epsilon.\n            shaderCache: { hint: `${components};${epsilon}`, inputDependencies },\n            getRunData: () => ({\n              outputs: [\n                { dims: [n, c, 2], dataType: 1 /* float */ }\n              ],\n              dispatchGroup: { x: Math.ceil(\n                unitsOfWork / 64\n                /* workgroup size */\n              ) },\n              programUniforms\n            }),\n            getShaderSource\n          },\n          { inputs: [meanValues, scale, bias], outputs: [-1] }\n        )[0];\n      };\n      createInstanceNormNHWCProgramInfo = (context, inputs, attributes) => {\n        const xShape = inputs[0].dims;\n        const outputShape = xShape;\n        const N = xShape[0];\n        const C = xShape[xShape.length - 1];\n        const H = ShapeUtil.sizeFromDimension(xShape, 1) / C;\n        const components = getMaxComponents(C);\n        const outputSize = ShapeUtil.size(outputShape) / components;\n        const programUniforms = [{ type: "uint32", data: H }, { type: "uint32", data: Math.floor(C / components) }];\n        const inputDependencies = ["type", "type"];\n        const channelScaleShift = computeMean(context, inputs[0], inputs[1], inputs[2], N, H, C, attributes.epsilon);\n        const getShaderSource = (shaderHelper) => {\n          const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n          const scaleType = components === 1 ? "vec2f" : `mat2x${components}f`;\n          const scaleCastType = components === 1 ? dataType : `vec${components}<${dataType}>`;\n          const inputHelper = inputVariable("input", inputs[0].dataType, inputs[0].dims, components);\n          const outputHelper = outputVariable("output", inputs[0].dataType, outputShape, components);\n          return `\n  @group(0) @binding(0) var<storage, read> input : array<${inputHelper.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${scaleType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${outputHelper.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${shaderHelper.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${scaleCastType}(scale[0]), ${scaleCastType}(scale[1]));\n  }`;\n        };\n        context.compute(\n          {\n            name: "InstanceNormalizationNHWC",\n            shaderCache: { hint: `${components}`, inputDependencies },\n            getRunData: () => ({\n              outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n              dispatchGroup: { x: Math.ceil(\n                outputSize / 64\n                /* workgroup size */\n              ) },\n              programUniforms\n            }),\n            getShaderSource\n          },\n          { inputs: [inputs[0], channelScaleShift] }\n        );\n      };\n      instanceNorm = (context, attributes) => {\n        if (attributes.format === "NHWC") {\n          createInstanceNormNHWCProgramInfo(context, context.inputs, attributes);\n        } else {\n          context.compute(createInstanceNormProgramInfo(context.inputs, attributes));\n        }\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/layer-norm.ts\n  var validateInputs15, createLayerNormProgramInfo, layerNorm;\n  var init_layer_norm = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/layer-norm.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_common();\n      validateInputs15 = (inputs) => {\n        if (!inputs || inputs.length < 2) {\n          throw new Error("layerNorm requires at least 2 inputs.");\n        }\n      };\n      createLayerNormProgramInfo = (inputs, attributes, outputCount) => {\n        const xShape = inputs[0].dims;\n        const scale = inputs[1];\n        const bias = inputs[2];\n        const outputShape = xShape;\n        const axis = ShapeUtil.normalizeAxis(attributes.axis, xShape.length);\n        const normCount = ShapeUtil.sizeToDimension(xShape, axis);\n        const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\n        const scaleSize = ShapeUtil.size(scale.dims);\n        const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\n        if (scaleSize !== normSize || bias && biasSize !== normSize) {\n          throw new Error(`Size of X.shape()[axis:] == ${normSize}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${scaleSize} and bias size of ${biasSize}`);\n        }\n        const meanInvStdDevDim = [];\n        for (let i = 0; i < xShape.length; ++i) {\n          if (i < axis) {\n            meanInvStdDevDim.push(xShape[i]);\n          } else {\n            meanInvStdDevDim.push(1);\n          }\n        }\n        const components = getMaxComponents(normSize);\n        const inputDependencies = ["type", "type"];\n        const programUniforms = [\n          { type: "uint32", data: normCount },\n          { type: "float32", data: normSize },\n          { type: "uint32", data: Math.floor(normSize / components) },\n          { type: "float32", data: attributes.epsilon }\n        ];\n        if (bias) {\n          inputDependencies.push("type");\n        }\n        const hasMeanDataOutput = outputCount > 1;\n        const hasInvStdOutput = outputCount > 2;\n        const getShaderSource = (shaderHelper) => {\n          const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n          const variables = [\n            inputVariable("x", inputs[0].dataType, inputs[0].dims, components),\n            inputVariable("scale", scale.dataType, scale.dims, components)\n          ];\n          if (bias) {\n            variables.push(inputVariable("bias", bias.dataType, bias.dims, components));\n          }\n          variables.push(outputVariable("output", inputs[0].dataType, outputShape, components));\n          if (hasMeanDataOutput) {\n            variables.push(outputVariable("mean_data_output", 1 /* float */, meanInvStdDevDim));\n          }\n          if (hasInvStdOutput) {\n            variables.push(outputVariable("inv_std_output", 1 /* float */, meanInvStdDevDim));\n          }\n          const uniforms = [\n            { name: "norm_count", type: "u32" },\n            { name: "norm_size", type: "f32" },\n            { name: "norm_size_vectorized", type: "u32" },\n            { name: "epsilon", type: "f32" }\n          ];\n          return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${fillVector("f32", components)};\n    var meanSquareVector = ${fillVector("f32", components)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${castToF32(dataType, components, "x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${sumVector("meanVector", components)} / uniforms.norm_size;\n    let invStdDev =\n        inverseSqrt(${sumVector("meanSquareVector", components)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${castToF32(dataType, components, "x[j + offset]")};\n      let f32scale = ${castToF32(dataType, components, "scale[j]")};\n      output[j + offset] = ${variables[0].type.value}((f32input - mean) * invStdDev * f32scale\n        ${bias ? `+ ${castToF32(dataType, components, "bias[j]")}` : ""}\n      );\n    }\n\n    ${hasMeanDataOutput ? "mean_data_output[global_idx] = mean" : ""};\n    ${hasInvStdOutput ? "inv_std_output[global_idx] = invStdDev" : ""};\n  }`;\n        };\n        const outputs = [{ dims: outputShape, dataType: inputs[0].dataType }];\n        if (hasMeanDataOutput) {\n          outputs.push({ dims: meanInvStdDevDim, dataType: 1 /* float */ });\n        }\n        if (hasInvStdOutput) {\n          outputs.push({ dims: meanInvStdDevDim, dataType: 1 /* float */ });\n        }\n        return {\n          name: "LayerNormalization",\n          shaderCache: { hint: `${components};${outputCount}`, inputDependencies },\n          getRunData: () => ({ outputs, dispatchGroup: { x: Math.ceil(\n            normCount / 64\n            /* workgroup size */\n          ) }, programUniforms }),\n          getShaderSource\n        };\n      };\n      layerNorm = (context, attributes) => {\n        validateInputs15(context.inputs);\n        context.compute(createLayerNormProgramInfo(context.inputs, attributes, context.outputCount));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/multi-head-attentiion.ts\n  var validateInputs16, parseMultiHeadAttentionAttributes, weightTransposeAttribute2, addBiasTranspose, maybeTransposeToBNSHAndAddBias, multiHeadAttention;\n  var init_multi_head_attentiion = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/multi-head-attentiion.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_types();\n      init_attention();\n      init_common();\n      init_transpose();\n      validateInputs16 = (inputs, attributes) => {\n        const query = inputs[0];\n        const key = inputs[1];\n        const value = inputs[2];\n        const bias = inputs[3];\n        const keyPaddingMask = inputs[4];\n        const relativePositionBias = inputs[5];\n        const pastKey = inputs[6];\n        const pastValue = inputs[7];\n        if (query.dims.length !== 3 && query.dims.length !== 5) {\n          throw new Error("Input query is expected to have 3 or 5 dimensions");\n        }\n        const dmmhaPacking = false;\n        const batchSize = query.dims[0];\n        const sequenceLength = query.dims[1];\n        const hiddenSize = query.dims.length === 3 ? dmmhaPacking ? query.dims[2] / 3 : query.dims[2] : attributes.numHeads * query.dims[4];\n        let kvSequenceLength = sequenceLength;\n        let pastSequenceLength = 0;\n        let maxSequenceLength = 0;\n        const headSize = Math.floor(hiddenSize / attributes.numHeads);\n        if (pastKey && pastValue) {\n          if (pastKey.dims.length !== 4) {\n            throw new Error(\'Input "past_key" is expected to have 4 dimensions\');\n          }\n          if (pastValue.dims.length !== 4) {\n            throw new Error(\'Input "past_value" is expected to have 4 dimensions\');\n          }\n          pastSequenceLength = pastKey.dims[2];\n          maxSequenceLength = pastKey.dims[2];\n        } else if (pastKey || pastValue) {\n          throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');\n        }\n        let qkvFormat;\n        if (key) {\n          if (query.dims.length !== 3) {\n            throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');\n          }\n          if (key.dims.length < 3 || key.dims.length > 5) {\n            throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');\n          }\n          if (query.dims[0] !== key.dims[0]) {\n            throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');\n          }\n          if (key.dims.length === 3) {\n            if (key.dims[2] !== query.dims[2]) {\n              throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');\n            }\n            qkvFormat = 2 /* qkvBSNH */;\n            kvSequenceLength = key.dims[1];\n          } else if (key.dims.length === 5) {\n            if (key.dims[2] !== attributes.numHeads || key.dims[3] !== 2 || key.dims[4] !== headSize) {\n              throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');\n            }\n            if (value) {\n              throw new Error(\'Expect "value" be none when "key" has packed kv format.\');\n            }\n            qkvFormat = 5 /* qKvBSNHxBSN2H */;\n            kvSequenceLength = key.dims[1];\n          } else {\n            if (key.dims[1] !== attributes.numHeads || key.dims[3] !== headSize) {\n              throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');\n            }\n            qkvFormat = 0 /* unknown */;\n            kvSequenceLength = key.dims[2];\n          }\n        } else {\n          if (query.dims.length !== 3 && query.dims.length !== 5) {\n            throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');\n          }\n          if (query.dims.length === 5 && (query.dims[2] !== attributes.numHeads || query.dims[3] !== 3)) {\n            throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');\n          }\n          qkvFormat = 3 /* qkvBSN3H */;\n        }\n        if (bias) {\n          if (bias.dims.length !== 1) {\n            throw new Error(\'Input "bias" is expected to have 1 dimension\');\n          }\n          if (value) {\n            if (query.dims.length === 5 && query.dims[3] === 2) {\n              throw new Error("bias is not allowed for packed kv.");\n            }\n          }\n        }\n        let maskType = 0 /* none */;\n        if (keyPaddingMask) {\n          maskType = 8 /* maskUnknown */;\n          const maskDims = keyPaddingMask.dims;\n          if (maskDims.length === 1) {\n            if (maskDims[0] === batchSize) {\n              maskType = 1 /* mask1dKeySeqLen */;\n            } else if (maskDims[0] === 3 * batchSize + 2) {\n              maskType = 3 /* mask1DKeySeqLenStart */;\n            }\n          } else if (maskDims.length === 2 && maskDims[0] === batchSize && maskDims[1] === kvSequenceLength) {\n            maskType = 5 /* mask2dKeyPadding */;\n          }\n          if (maskType === 8 /* maskUnknown */) {\n            throw new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\');\n          }\n          throw new Error("Mask not supported");\n        }\n        let passPastInKv = false;\n        let vHiddenSize = hiddenSize;\n        if (value) {\n          if (value.dims.length !== 3 && value.dims.length !== 4) {\n            throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');\n          }\n          if (query.dims[0] !== value.dims[0]) {\n            throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');\n          }\n          if (value.dims.length === 3) {\n            if (kvSequenceLength !== value.dims[1]) {\n              throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');\n            }\n            vHiddenSize = value.dims[2];\n          } else {\n            if (kvSequenceLength !== value.dims[2]) {\n              throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');\n            }\n            vHiddenSize = value.dims[1] * value.dims[3];\n            passPastInKv = true;\n          }\n        }\n        const totalSequenceLength = pastSequenceLength + kvSequenceLength;\n        const broadcastResPosBias = false;\n        if (keyPaddingMask) {\n          throw new Error("Key padding mask is not supported");\n        }\n        if (relativePositionBias) {\n          throw new Error("extraAddQk is not supported");\n        }\n        if (pastKey) {\n          throw new Error("pastKey is not supported");\n        }\n        if (pastValue) {\n          throw new Error("pastValue is not supported");\n        }\n        return {\n          batchSize,\n          sequenceLength,\n          pastSequenceLength,\n          kvSequenceLength,\n          totalSequenceLength,\n          maxSequenceLength,\n          inputHiddenSize: 0,\n          hiddenSize,\n          vHiddenSize,\n          headSize,\n          vHeadSize: Math.floor(vHiddenSize / attributes.numHeads),\n          numHeads: attributes.numHeads,\n          isUnidirectional: false,\n          pastPresentShareBuffer: false,\n          maskFilterValue: attributes.maskFilterValue,\n          maskType,\n          scale: attributes.scale,\n          broadcastResPosBias,\n          passPastInKv,\n          qkvFormat\n        };\n      };\n      parseMultiHeadAttentionAttributes = (attributes) => createAttributeWithCacheKey({ ...attributes });\n      weightTransposeAttribute2 = createAttributeWithCacheKey({ perm: [0, 2, 1, 3] });\n      addBiasTranspose = (context, qkv, bias, batchSize, sequenceLength, hiddenSize, biasOffset) => {\n        const outputShape = [batchSize, sequenceLength, hiddenSize];\n        const outputSize = ShapeUtil.size(outputShape);\n        const programUniforms = [{ type: "uint32", data: outputSize }, { type: "uint32", data: biasOffset }, { type: "uint32", data: hiddenSize }];\n        const getShaderSource = (shaderHelper) => {\n          const output = outputVariable("qkv_with_bias", qkv.dataType, outputShape);\n          const qkvInput = inputVariable("qkv", qkv.dataType, outputShape);\n          const biasInput = inputVariable("bias", bias.dataType, outputShape);\n          const uniforms = [\n            { name: "output_size", type: "u32" },\n            { name: "bias_offset", type: "u32" },\n            { name: "hidden_size", type: "u32" }\n          ];\n          return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(qkvInput, biasInput, output)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`;\n        };\n        return context.compute(\n          {\n            name: "MultiHeadAttentionAddBias",\n            shaderCache: { inputDependencies: ["type", "type"] },\n            getRunData: () => ({\n              outputs: [{ dims: outputShape, dataType: qkv.dataType, gpuDataType: 0 /* default */ }],\n              dispatchGroup: { x: Math.ceil(\n                outputSize / 64\n                /* workgroup size */\n              ) },\n              programUniforms\n            }),\n            getShaderSource\n          },\n          { inputs: [qkv, bias], outputs: [-1] }\n        )[0];\n      };\n      maybeTransposeToBNSHAndAddBias = (context, batchSize, numHeads, sequenceLength, headSize, input, bias, biasOffset) => {\n        let reshapedInput = input;\n        if (!bias) {\n          if (input.dims.length === 3) {\n            reshapedInput = input.reshape([batchSize, sequenceLength, numHeads, headSize]);\n          }\n          return context.compute(\n            createTransposeProgramInfo(reshapedInput, weightTransposeAttribute2.perm),\n            { inputs: [reshapedInput], outputs: [-1] }\n          )[0];\n        } else {\n          if (sequenceLength === 1) {\n            throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");\n          } else {\n            reshapedInput = addBiasTranspose(context, input, bias, batchSize, sequenceLength, numHeads * headSize, biasOffset);\n            reshapedInput = reshapedInput.reshape([batchSize, sequenceLength, numHeads, headSize]);\n            return context.compute(\n              createTransposeProgramInfo(reshapedInput, weightTransposeAttribute2.perm),\n              { inputs: [reshapedInput], outputs: [-1] }\n            )[0];\n          }\n        }\n      };\n      multiHeadAttention = (context, attributes) => {\n        const params = validateInputs16(context.inputs, attributes);\n        if (context.inputs[0].dims.length === 5) {\n          throw new Error("Packed QKV is not implemented");\n        }\n        if (context.inputs[1]?.dims.length === 5) {\n          throw new Error("Packed KV is not implemented");\n        }\n        const kvBNSH = context.inputs[1] && context.inputs[2] && context.inputs[1].dims.length === 4 && context.inputs[2].dims.length === 4;\n        const Q = maybeTransposeToBNSHAndAddBias(\n          context,\n          params.batchSize,\n          params.numHeads,\n          params.sequenceLength,\n          params.headSize,\n          context.inputs[0],\n          context.inputs[3],\n          0\n        );\n        if (kvBNSH) {\n          return applyAttention(\n            context,\n            Q,\n            context.inputs[1],\n            context.inputs[2],\n            context.inputs[4],\n            void 0,\n            void 0,\n            void 0,\n            context.inputs[5],\n            params,\n            attributes\n          );\n        }\n        const K = maybeTransposeToBNSHAndAddBias(\n          context,\n          params.batchSize,\n          params.numHeads,\n          params.kvSequenceLength,\n          params.headSize,\n          context.inputs[1],\n          context.inputs[3],\n          params.hiddenSize\n        );\n        const V = maybeTransposeToBNSHAndAddBias(\n          context,\n          params.batchSize,\n          params.numHeads,\n          params.kvSequenceLength,\n          params.vHeadSize,\n          context.inputs[2],\n          context.inputs[3],\n          2 * params.hiddenSize\n        );\n        applyAttention(\n          context,\n          Q,\n          K,\n          V,\n          context.inputs[4],\n          void 0,\n          context.inputs[6],\n          context.inputs[7],\n          context.inputs[5],\n          params,\n          attributes\n        );\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/pad.ts\n  var validateInputs17, getPadConstant, getPadReflect, getPadEdge, getPadWrap, getPadSnippet, createPadProgramInfo, createPadAttributesFromInputs, pad;\n  var init_pad = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/pad.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_common();\n      validateInputs17 = (inputs) => {\n        if (!inputs || inputs.length < 1) {\n          throw new Error("Too few inputs");\n        }\n        if (inputs[0].dataType !== 1 /* float */) {\n          throw new Error("Input type must be float.");\n        }\n        if (inputs.length >= 2) {\n          let validPads = inputs[0].dims.length * 2 === inputs[1].dims[0];\n          if (inputs.length === 4) {\n            validPads = inputs[3].dims[0] * 2 === inputs[1].dims[0];\n          }\n          if (!validPads) {\n            throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].");\n          }\n        }\n      };\n      getPadConstant = (output, inputRank, padsLength) => {\n        let block = "";\n        for (let i = inputRank - 1; i >= 0; --i) {\n          block += `\n            k = i32(${output.indicesGet("indices", i)}) - ${getElementAt("uniforms.pads", i, padsLength)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${getElementAt("uniforms.x_shape", i, inputRank)})) {\n              break;\n            }\n            offset += k * i32(${getElementAt("uniforms.x_strides", i, inputRank)});\n        `;\n        }\n        return `\n          value = ${output.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${block}\n            value = x[offset];\n          }\n      `;\n      };\n      getPadReflect = (output, inputRank, padsLength) => {\n        let block = "";\n        for (let i = inputRank - 1; i >= 0; --i) {\n          block += `\n                k = i32(${output.indicesGet("indices", i)}) - ${getElementAt("uniforms.pads", i, padsLength)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${getElementAt("uniforms.x_shape", i, inputRank)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${getElementAt("uniforms.x_shape", i, inputRank)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${getElementAt("uniforms.x_strides", i, inputRank)});\n            `;\n        }\n        return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n      };\n      getPadEdge = (output, inputRank, padsLength) => {\n        let block = "";\n        for (let i = inputRank - 1; i >= 0; --i) {\n          block += `\n                k = i32(${output.indicesGet("indices", i)}) - ${getElementAt("uniforms.pads", i, padsLength)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${getElementAt("uniforms.x_shape", i, inputRank)})) {\n                  k = i32(${getElementAt("uniforms.x_shape", i, inputRank)}) - 1;\n                }\n                offset += k * i32(${getElementAt("uniforms.x_strides", i, inputRank)});\n            `;\n        }\n        return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n      };\n      getPadWrap = (output, inputRank, padsLength) => {\n        let block = "";\n        for (let i = inputRank - 1; i >= 0; --i) {\n          block += `\n                k = i32(${output.indicesGet("indices", i)}) - ${getElementAt("uniforms.pads", i, padsLength)};\n                if (k < 0)  {\n                  k += i32(${getElementAt("uniforms.x_shape", i, inputRank)}]);\n                }\n                if (k >= i32(${getElementAt("uniforms.x_shape", i, inputRank)})) {\n                  k -= i32(${getElementAt("uniforms.x_shape", i, inputRank)});\n                }\n                offset += k * i32(${getElementAt("uniforms.x_strides", i, inputRank)});\n            `;\n        }\n        return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n      };\n      getPadSnippet = (output, inputRank, attributes) => {\n        switch (attributes.mode) {\n          case 0:\n            return getPadConstant(output, inputRank, attributes.pads.length);\n          case 1:\n            return getPadReflect(output, inputRank, attributes.pads.length);\n          case 2:\n            return getPadEdge(output, inputRank, attributes.pads.length);\n          case 3:\n            return getPadWrap(output, inputRank, attributes.pads.length);\n          default:\n            throw new Error("Invalid mode");\n        }\n      };\n      createPadProgramInfo = (inputs, attributes) => {\n        const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), attributes.pads);\n        const inputDims = inputs[0].dims;\n        const outputSize = ShapeUtil.size(outputShape);\n        const programUniforms = [{ type: "uint32", data: outputSize }, { type: "uint32", data: attributes.pads }];\n        if (attributes.mode === 0) {\n          const tensorDataType = tensorDataTypeEnumToString(inputs[0].dataType);\n          programUniforms.push({ type: tensorDataType, data: attributes.value });\n        }\n        programUniforms.push(...createTensorShapeVariables(inputs[0].dims), ...createTensorShapeVariables(outputShape));\n        const inputDependencies = ["rank"];\n        const getShaderSource = (shaderHelper) => {\n          const output = outputVariable("output", inputs[0].dataType, outputShape.length);\n          const input = inputVariable("x", inputs[0].dataType, inputDims.length);\n          const dataType = input.type.value;\n          const padSnippet = getPadSnippet(output, inputDims.length, attributes);\n          const uniforms = [{ name: "output_size", type: "u32" }, { name: "pads", type: "i32", length: attributes.pads.length }];\n          if (attributes.mode === 0) {\n            uniforms.push({ name: "constant_value", type: dataType });\n          }\n          return `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(input, output)}\n            ${shaderHelper.mainStart()}\n            ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${output.offsetToIndices("global_idx")};\n\n            var value = ${dataType}(0);\n            ${padSnippet}\n            output[global_idx] = value;\n        }`;\n        };\n        return {\n          name: "Pad",\n          shaderCache: { hint: `${attributes.mode}`, inputDependencies },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              ShapeUtil.size(outputShape) / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource\n        };\n      };\n      createPadAttributesFromInputs = (inputs, attributes) => {\n        if (inputs.length > 1) {\n          const bigInt64Pads = inputs[1].getBigInt64Array();\n          const value = inputs.length >= 3 && inputs[2].data ? inputs[2].getFloat32Array()[0] : 0;\n          const inputRank = inputs[0].dims.length;\n          const updatePads = new Int32Array(2 * inputRank).fill(0);\n          if (inputs.length >= 4) {\n            const axes = inputs[3].getBigInt64Array();\n            for (let i = 0; i < axes.length; i++) {\n              updatePads[Number(axes[i])] = Number(bigInt64Pads[i]);\n              updatePads[Number(axes[i]) + inputRank] = Number(bigInt64Pads[i + axes.length]);\n            }\n          } else {\n            bigInt64Pads.forEach((v, i) => updatePads[Number(i)] = Number(v));\n          }\n          const pads = [];\n          updatePads.forEach((v) => pads.push(v));\n          return { mode: attributes.mode, value, pads };\n        } else {\n          return attributes;\n        }\n      };\n      pad = (context, attributes) => {\n        validateInputs17(context.inputs);\n        const updatedAttributes = createPadAttributesFromInputs(context.inputs, attributes);\n        context.compute(createPadProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/pool.ts\n  var validateInputs18, getAdjustedPoolAttributesAndOutputShape, getUniformAndPadInfo, generatePoolingCode, createShaderKeyFromAttributes, createAveragePoolShaderKeyFromAttributes, createMaxPoolShaderKeyFromAttributes, parsePoolCommonAttributes, createAveragePoolProgramInfo, parseAveragePoolAttributes, averagePool, globalPoolAttributes, parseGlobalAveragePoolAttributes, globalAveragePool, createMaxPoolProgramInfo, maxPool, parseMaxPoolAttributes, parseGlobalMaxPoolAttributes, globalMaxPool;\n  var init_pool = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/pool.ts"() {\n      "use strict";\n      init_esm();\n      init_util();\n      init_common();\n      validateInputs18 = (inputs) => {\n        if (env2.webgpu.validateInputContent && (!inputs || inputs.length !== 1)) {\n          throw new Error("Pool ops requires 1 input.");\n        }\n      };\n      getAdjustedPoolAttributesAndOutputShape = (input, attributes, isGlobalOperator) => {\n        const isChannelsLast = attributes.format === "NHWC";\n        const inputShapeAsChannelFirst = input.dims.slice();\n        if (isChannelsLast) {\n          inputShapeAsChannelFirst.splice(1, 0, inputShapeAsChannelFirst.pop());\n        }\n        const hasDilations = Object.hasOwnProperty.call(attributes, "dilations");\n        const kernelShape = attributes.kernelShape.slice();\n        const strides = attributes.strides.slice();\n        const dilations = hasDilations ? attributes.dilations.slice() : [];\n        const pads = attributes.pads.slice();\n        PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n        const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n          isGlobalOperator,\n          inputShapeAsChannelFirst,\n          strides,\n          dilations,\n          kernelShape,\n          pads,\n          attributes.autoPad\n        );\n        const newAttributes = Object.assign({}, attributes);\n        if (hasDilations) {\n          Object.assign(newAttributes, { kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey });\n        } else {\n          Object.assign(newAttributes, { kernelShape, strides, pads, cacheKey: attributes.cacheKey });\n        }\n        const outputShapeAsChannelLast = outputShapeAsChannelFirst.slice();\n        outputShapeAsChannelLast.push(outputShapeAsChannelLast.splice(1, 1)[0]);\n        return [newAttributes, isChannelsLast ? outputShapeAsChannelLast : outputShapeAsChannelFirst];\n      };\n      getUniformAndPadInfo = (outputShape, attributes) => {\n        const isChannelsLast = attributes.format === "NHWC";\n        const outputSize = ShapeUtil.size(outputShape);\n        const kernelSize = ShapeUtil.size(attributes.kernelShape);\n        const programUniforms = [{ type: "uint32", data: outputSize }, { type: "uint32", data: kernelSize }];\n        const uniforms = [{ name: "outputSize", type: "u32" }, { name: "kernelSize", type: "u32" }];\n        if (attributes.kernelShape.length <= 2) {\n          const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n          const sw = attributes.strides[attributes.strides.length - 1];\n          const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n          const pwEnd = attributes.pads[attributes.pads.length - 1];\n          const pwStartEndNotZero = !!(pwStart + pwEnd);\n          programUniforms.push(\n            { type: "uint32", data: kw },\n            { type: "uint32", data: sw },\n            { type: "uint32", data: pwStart },\n            { type: "uint32", data: pwEnd }\n          );\n          uniforms.push(\n            { name: "kw", type: "u32" },\n            { name: "sw", type: "u32" },\n            { name: "pwStart", type: "u32" },\n            { name: "pwEnd", type: "u32" }\n          );\n          let phStartEndNotZero = false;\n          if (attributes.kernelShape.length === 2) {\n            const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n            const sh = attributes.strides[attributes.strides.length - 2];\n            const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n            const phEnd = attributes.pads[attributes.pads.length - 2];\n            phStartEndNotZero = !!(phStart + phEnd);\n            programUniforms.push(\n              { type: "uint32", data: kh },\n              { type: "uint32", data: sh },\n              { type: "uint32", data: phStart },\n              { type: "uint32", data: phEnd }\n            );\n            uniforms.push(\n              { name: "kh", type: "u32" },\n              { name: "sh", type: "u32" },\n              { name: "phStart", type: "u32" },\n              { name: "phEnd", type: "u32" }\n            );\n          }\n          return [programUniforms, uniforms, true, pwStartEndNotZero, phStartEndNotZero];\n        } else {\n          if (isChannelsLast) {\n            throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");\n          }\n          const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n          programUniforms.push(\n            { type: "uint32", data: kernelStrides },\n            { type: "uint32", data: attributes.pads },\n            { type: "uint32", data: attributes.strides }\n          );\n          uniforms.push(\n            { name: "kernelStrides", type: "u32", length: kernelStrides.length },\n            { name: "pads", type: "u32", length: attributes.pads.length },\n            { name: "strides", type: "u32", length: attributes.strides.length }\n          );\n          const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n          return [programUniforms, uniforms, !!hasPads, false, false];\n        }\n      };\n      generatePoolingCode = (shaderHelper, x, rank, outputShapeRank, attributes, op1, op2, start, uniforms, hasPads, pwStartEndNotZero, phStartEndNotZero) => {\n        const isChannelsLast = attributes.format === "NHWC";\n        const dataType = x.type.value;\n        const output = outputVariable("output", x.type.tensor, outputShapeRank);\n        if (attributes.kernelShape.length <= 2) {\n          let codeW = "";\n          let codeH = "";\n          let codeHEnd = "";\n          const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n          if (pwStartEndNotZero) {\n            codeW = `\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${dimIdxW}] = indices[${dimIdxW}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}]\n                      >= uniforms.x_shape[${dimIdxW}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${x.indicesToOffset("xIndices")}];\n                  ${op1}\n                }`;\n          } else {\n            codeW = `\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${dimIdxW}] = indices[${dimIdxW}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${x.indicesToOffset("xIndices")}];\n                  ${op1}\n                }`;\n          }\n          if (attributes.kernelShape.length === 2) {\n            const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n            if (phStartEndNotZero) {\n              codeH = `\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= uniforms.x_shape[${dimIdxH}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `;\n            } else {\n              codeH = `\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * uniforms.sh - uniforms.phStart + j;\n                `;\n            }\n            codeHEnd = `\n              }\n            `;\n          }\n          const poolingCode = `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(x, output)}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${output.offsetToIndices("global_idx")};\n              var xIndices = ${output.offsetToIndices("global_idx")};\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n          return poolingCode;\n        } else {\n          if (isChannelsLast) {\n            throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");\n          }\n          const stridesRank = attributes.kernelShape.length;\n          const padsRank = attributes.pads.length;\n          let padCode = "";\n          if (hasPads) {\n            padCode = `\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${x.indicesToOffset("xIndices")}];\n                ${op1}\n              }`;\n          } else {\n            padCode = `\n              }\n              let x_val = x[${x.indicesToOffset("xIndices")}];\n              ${op1}\n            `;\n          }\n          const poolingCode = `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(x, output)}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${output.offsetToIndices("global_idx")};\n              var xIndices = ${output.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / ${getElementAt("uniforms.kernelStrides", "j", stridesRank)};\n                  offset -= offsets[j] * ${getElementAt("uniforms.kernelStrides", "j", stridesRank)};\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * ${getElementAt("uniforms.strides", `j - ${rank - stridesRank}u`, stridesRank)}\n                    + offsets[j - ${rank - stridesRank}u] - ${getElementAt("uniforms.pads", "j - 2u", padsRank)};\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n          return poolingCode;\n        }\n      };\n      createShaderKeyFromAttributes = (attributes) => `${attributes.format};${attributes.ceilMode};${attributes.autoPad};${attributes.kernelShape.length}`;\n      createAveragePoolShaderKeyFromAttributes = (attributes) => `${createShaderKeyFromAttributes(attributes)};${attributes.countIncludePad}`;\n      createMaxPoolShaderKeyFromAttributes = (attributes) => `${createShaderKeyFromAttributes(attributes)};${attributes.storageOrder};${attributes.dilations}`;\n      parsePoolCommonAttributes = (attributes) => ({\n        format: attributes.format,\n        autoPad: ["NOTSET", "VALID", "SAME_UPPER", "SAME_LOWER"][attributes.auto_pad],\n        ceilMode: attributes.ceil_mode,\n        kernelShape: attributes.kernel_shape,\n        strides: attributes.strides,\n        pads: attributes.pads\n      });\n      createAveragePoolProgramInfo = (name, input, isGlobalOperator, attributes) => {\n        const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\n        const x = inputVariable("x", input.dataType, input.dims.length);\n        const dataType = x.type.value;\n        const op1 = "value += x_val;";\n        let op2 = "";\n        if (adjustedAttributes.countIncludePad) {\n          op2 += `value /= ${dataType}(uniforms.kernelSize);`;\n        } else {\n          op2 += `value /= ${dataType}(i32(uniforms.kernelSize) - pad);`;\n        }\n        const [programUniforms, uniforms, hasPads, pwStartEndNotZero, phStartEndNotZero] = getUniformAndPadInfo(outputShape, adjustedAttributes);\n        programUniforms.push(...createTensorShapeVariables(input.dims), ...createTensorShapeVariables(outputShape));\n        const inputDependencies = ["rank"];\n        return {\n          name,\n          shaderCache: { hint: `${attributes.cacheKey};${hasPads};${pwStartEndNotZero};${phStartEndNotZero}`, inputDependencies },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: input.dataType }],\n            dispatchGroup: { x: Math.ceil(\n              ShapeUtil.size(outputShape) / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource: (shaderHelper) => generatePoolingCode(\n            shaderHelper,\n            x,\n            input.dims.length,\n            outputShape.length,\n            adjustedAttributes,\n            op1,\n            op2,\n            0,\n            uniforms,\n            hasPads,\n            pwStartEndNotZero,\n            phStartEndNotZero\n          )\n        };\n      };\n      parseAveragePoolAttributes = (attributes) => {\n        const countIncludePad = attributes.count_include_pad === 0 ? false : true;\n        const attr = parsePoolCommonAttributes(attributes);\n        if (attr.ceilMode !== 0) {\n          throw new Error("using ceil() in shape computation is not yet supported for AveragePool");\n        }\n        const averagePoolAttributes = { countIncludePad, ...attr, cacheKey: "" };\n        return { ...averagePoolAttributes, cacheKey: createAveragePoolShaderKeyFromAttributes(averagePoolAttributes) };\n      };\n      averagePool = (context, attributes) => {\n        validateInputs18(context.inputs);\n        context.compute(createAveragePoolProgramInfo("AveragePool", context.inputs[0], false, attributes));\n      };\n      globalPoolAttributes = {\n        autoPad: "",\n        ceilMode: 0,\n        countIncludePad: false,\n        kernelShape: [],\n        strides: [],\n        pads: [],\n        storageOrder: 0,\n        dilations: []\n      };\n      parseGlobalAveragePoolAttributes = (attributes) => {\n        const format = attributes.format;\n        return { format, ...globalPoolAttributes, cacheKey: format };\n      };\n      globalAveragePool = (context, attributes) => {\n        validateInputs18(context.inputs);\n        context.compute(createAveragePoolProgramInfo("GlobalAveragePool", context.inputs[0], true, attributes));\n      };\n      createMaxPoolProgramInfo = (name, input, isGlobalOperator, attributes) => {\n        const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\n        const op1 = `\n      value = max(x_val, value);\n    `;\n        const op2 = "";\n        const x = inputVariable("x", input.dataType, input.dims.length);\n        const inputDependencies = ["rank"];\n        const [programUniforms, uniforms, hasPads, pwStartEndNotZero, phStartEndNotZero] = getUniformAndPadInfo(outputShape, adjustedAttributes);\n        programUniforms.push(...createTensorShapeVariables(input.dims), ...createTensorShapeVariables(outputShape));\n        return {\n          name,\n          shaderCache: { hint: `${attributes.cacheKey};${hasPads};${pwStartEndNotZero};${phStartEndNotZero}`, inputDependencies },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: input.dataType }],\n            dispatchGroup: { x: Math.ceil(\n              ShapeUtil.size(outputShape) / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          }),\n          getShaderSource: (shaderHelper) => generatePoolingCode(\n            shaderHelper,\n            x,\n            input.dims.length,\n            outputShape.length,\n            adjustedAttributes,\n            op1,\n            op2,\n            -1e5,\n            uniforms,\n            hasPads,\n            pwStartEndNotZero,\n            phStartEndNotZero\n          )\n        };\n      };\n      maxPool = (context, attributes) => {\n        validateInputs18(context.inputs);\n        context.compute(createMaxPoolProgramInfo("MaxPool", context.inputs[0], false, attributes));\n      };\n      parseMaxPoolAttributes = (attributes) => {\n        const storageOrder = attributes.storage_order;\n        const dilations = attributes.dilations;\n        const attr = parsePoolCommonAttributes(attributes);\n        if (storageOrder !== 0) {\n          throw new Error("column major storage order is not yet supported for MaxPool");\n        }\n        if (attr.ceilMode !== 0) {\n          throw new Error("using ceil() in shape computation is not yet supported for MaxPool");\n        }\n        const maxPoolAttributes = { storageOrder, dilations, ...attr, cacheKey: "" };\n        return { ...maxPoolAttributes, cacheKey: createMaxPoolShaderKeyFromAttributes(maxPoolAttributes) };\n      };\n      parseGlobalMaxPoolAttributes = (attributes) => {\n        const format = attributes.format;\n        return { format, ...globalPoolAttributes, cacheKey: format };\n      };\n      globalMaxPool = (context, attributes) => {\n        validateInputs18(context.inputs);\n        context.compute(createMaxPoolProgramInfo("GlobalMaxPool", context.inputs[0], true, attributes));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/range.ts\n  var validateInputsContent, createRangeProgramInfo, range;\n  var init_range = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/range.ts"() {\n      "use strict";\n      init_esm();\n      init_wasm_common();\n      init_common();\n      validateInputsContent = (start, limit, delta) => {\n        const sameStartLimit = start === limit;\n        const increasingRangeNegativeStep = start < limit && delta < 0;\n        const decreasingRangePositiveStep = start > limit && delta > 0;\n        if (sameStartLimit || increasingRangeNegativeStep || decreasingRangePositiveStep) {\n          throw new Error("Range these inputs\' contents are invalid.");\n        }\n      };\n      createRangeProgramInfo = (start, limit, delta, dataType) => {\n        const numElements = Math.abs(Math.ceil((limit - start) / delta));\n        const outputShape = [numElements];\n        const outputSize = numElements;\n        const tensorDataType = tensorDataTypeEnumToString(dataType);\n        const programUniforms = [\n          { type: "uint32", data: outputSize },\n          { type: tensorDataType, data: start },\n          { type: tensorDataType, data: delta },\n          ...createTensorShapeVariables(outputShape)\n        ];\n        const getShaderSource = (shaderHelper) => {\n          const output = outputVariable("output", dataType, outputShape.length);\n          const wgslType = output.type.value;\n          const uniforms = [\n            { name: "outputSize", type: "u32" },\n            { name: "start", type: wgslType },\n            { name: "delta", type: wgslType }\n          ];\n          return `\n        ${shaderHelper.registerUniforms(uniforms).declareVariables(output)}\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${wgslType}(global_idx) * uniforms.delta;\n      }`;\n        };\n        return {\n          name: "Range",\n          shaderCache: { hint: `${dataType}` },\n          getShaderSource,\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          })\n        };\n      };\n      range = (context) => {\n        let start = 0;\n        let limit = 0;\n        let delta = 0;\n        if (context.inputs[0].dataType === 6 /* int32 */) {\n          start = context.inputs[0].getInt32Array()[0];\n          limit = context.inputs[1].getInt32Array()[0];\n          delta = context.inputs[2].getInt32Array()[0];\n        } else if (context.inputs[0].dataType === 1 /* float */) {\n          start = context.inputs[0].getFloat32Array()[0];\n          limit = context.inputs[1].getFloat32Array()[0];\n          delta = context.inputs[2].getFloat32Array()[0];\n        }\n        if (env2.webgpu.validateInputContent) {\n          validateInputsContent(start, limit, delta);\n        }\n        context.compute(createRangeProgramInfo(start, limit, delta, context.inputs[0].dataType), { inputs: [] });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/resize.ts\n  var validateScales, updateScales, validateInputs19, getOriginalCoordinateFromResizedCoordinate, getNearestPixelFromOriginal, updateRoI, initOutputShape, adjustOutputShape, calculateOriginalIndicesFromOutputIndices, calculateInputIndicesFromOutputIndices, checkInputIndices, setChannelAndBatchIndices, bilinearInterpolation, bicubicInterpolation, trilinearInterpolation, createResizeProgramInfo, getOpsetVersionFromCustomDataBuffer, resize, parseResizeAttributes;\n  var init_resize = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/resize.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateScales = (scales, attributes) => {\n        scales.every((value) => value > 0 || (() => {\n          throw new Error("Resize requires scales input values to be positive");\n        }));\n        if (scales.length > 0) {\n          if (attributes.mode === "linear") {\n            if (!(scales.length === 2 || scales.length === 3 || scales.length === 4 && scales[0] === 1 && scales[1] === 1 || scales.length === 4 && scales[0] === 1 && scales[3] === 1 || scales.length === 5 && scales[0] === 1 && scales[1] === 1)) {\n              throw new Error(\n                `For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`\n              );\n            }\n          } else if (attributes.mode === "cubic") {\n            if (!(scales.length === 2 || scales.length === 4 && scales[0] === 1 && scales[1] === 1 || scales.length === 4 && scales[0] === 1 && scales[3] === 1)) {\n              throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode");\n            }\n          }\n        }\n      };\n      updateScales = (scales, axes, rank) => {\n        axes.every((value) => value >= 0 && value < rank || (() => {\n          throw new Error("Resize requires axes input values to be positive and less than rank");\n        }));\n        const newScales = new Array(rank).fill(1);\n        axes.forEach((value, index) => newScales[value] = scales[index]);\n        return newScales;\n      };\n      validateInputs19 = (inputs, attributes, opsetVersion, scales, sizes, roi) => {\n        const [roiInputIndex, scalesInputIndex, sizesInputIndex] = opsetVersion > 10 ? [1, 2, 3] : [-1, inputs.length > 1 ? 1 : -1, -1];\n        const rank = inputs[0].dims.length;\n        if (roiInputIndex > 0 && inputs.length > roiInputIndex && inputs[roiInputIndex].dims.length > 0) {\n          inputs[roiInputIndex].getFloat32Array().forEach((value) => roi.push(value));\n        } else if (attributes.coordinateTransformMode === "tf_crop_and_resize") {\n          throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");\n        }\n        if (scalesInputIndex > 0 && inputs.length > scalesInputIndex && inputs[scalesInputIndex].dims.length > 0) {\n          inputs[scalesInputIndex].getFloat32Array().forEach((value) => scales.push(value));\n          if (scales.length !== 0 && (scales.length !== rank && (opsetVersion >= 18 && scales.length !== attributes.axes.length))) {\n            throw new Error(\n              "Resize requires scales input size to be same as input rank or axes size for opset 18 and up"\n            );\n          }\n          validateScales(scales, attributes);\n          if (attributes.axes.length > 0) {\n            updateScales(scales, attributes.axes, rank).forEach((value, index) => scales[index] = value);\n          }\n        }\n        if (sizesInputIndex > 0 && inputs.length > sizesInputIndex) {\n          inputs[sizesInputIndex].getBigInt64Array().forEach((value) => sizes.push(Number(value)));\n          if (sizes.length !== rank || opsetVersion >= 18 && sizes.length === attributes.axes.length) {\n            throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");\n          }\n        }\n        if (attributes.axes.length > 0) {\n          if (scales.length !== attributes.axes.length) {\n            throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');\n          }\n          if (sizes.length !== attributes.axes.length) {\n            throw new Error(\n              \'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\'\n            );\n          }\n        }\n        if (typeof scales !== "undefined" && typeof sizes !== "undefined" && scales.length > 0 && sizes.length > rank) {\n          throw new Error("Resize requires only of scales or sizes to be specified");\n        }\n      };\n      getOriginalCoordinateFromResizedCoordinate = (coordinateTransferMode, dType) => `fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${dType} { ` + (() => {\n        switch (coordinateTransferMode) {\n          case "asymmetric":\n            return `return ${dType}(xResized) / ${dType}(xScale);`;\n          case "pytorch_half_pixel":\n            return `if (lengthResized > 1) {\n                    return (${dType}(xResized) + 0.5) / ${dType}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;\n          case "tf_half_pixel_for_nn":\n            return `return (${dType}(xResized) + 0.5) / ${dType}(xScale);`;\n          case "align_corners":\n            return `if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${dType}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${dType}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${dType}(lengthResized - 1);\n                    return whole + fract;\n                  }`;\n          case "tf_crop_and_resize":\n            return `if (lengthResized > 1) {\n                    return ${dType}(roiStart) * ${dType}(lengthOriginal - 1) +\n                        (${dType}(xResized) * ${dType}(roiEnd - roiStart) * ${dType}(lengthOriginal - 1)) /\n                        ${dType}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${dType}(roiStart + roiEnd) * ${dType}(lengthOriginal - 1);\n                  }`;\n          case "half_pixel_symmetric":\n            return `const outputWidth = ${dType}xScale * ${dType}(lengthResized);\n                  const adjustment = ${dType}(lengthResized) / outputWidth;\n                  const center = ${dType}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${dType}(xResized) + 0.5) / ${dType}(xScale)) - 0.5;`;\n          case "half_pixel":\n            return `return ((${dType}(xResized) + 0.5) / ${dType}(xScale)) - 0.5;`;\n          default:\n            throw new Error(`Coordinate transform mode ${coordinateTransferMode} is not supported`);\n        }\n      })() + "}";\n      getNearestPixelFromOriginal = (nearestMode, opsetVersion, dType) => `fn getNearestPixelFromOriginal(xOriginal: ${dType}, isDownSample: bool) -> ${dType} {` + (() => {\n        switch (nearestMode) {\n          case "round_prefer_ceil":\n            return "if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";\n          case "floor":\n            return "return floor(xOriginal);";\n          case "ceil":\n            return "return ceil(xOriginal);";\n          case "round_prefer_floor":\n            return "if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";\n          case "simple":\n          default:\n            if (opsetVersion < 11) {\n              return "if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";\n            }\n            throw new Error(`Nearest mode ${nearestMode} is not supported`);\n        }\n      })() + "}";\n      updateRoI = (roi, axes, rank) => {\n        const roiTmp = new Array(rank).fill(0).concat(new Array(rank).fill(1));\n        const roiLocal = roi.length === 0 ? roiTmp : roi.slice();\n        if (axes.length > 0) {\n          axes.forEach((v, i) => {\n            roiTmp[v] = roiLocal[i];\n            roiTmp[i + rank] = roiLocal[axes.length + i];\n          });\n          return roiTmp;\n        }\n        return roiLocal;\n      };\n      initOutputShape = (inputShape, scales, sizes, axes) => {\n        let outputShape = [];\n        if (sizes.length > 0) {\n          if (axes.length > 0) {\n            inputShape.forEach((v) => outputShape.push(v));\n            if (Math.max(...axes) > inputShape.length) {\n              throw new Error("axes is out of bound");\n            }\n            axes.forEach((v, i) => outputShape[v] = sizes[i]);\n          } else {\n            sizes.forEach((v) => outputShape.push(v));\n          }\n        } else {\n          if (scales.length === 0) {\n            throw new Error("Resize requires either scales or sizes.");\n          } else {\n            outputShape = inputShape.map((value, index) => Math.round(value * scales[index]));\n          }\n        }\n        return outputShape;\n      };\n      adjustOutputShape = (inputShape, scales, attributes) => {\n        const scaleInPolicy = (() => {\n          switch (attributes.keepAspectRatioPolicy) {\n            case "not_larger":\n              return attributes.axes.length > 0 ? Math.min(...attributes.axes.map((i) => scales[i]), Number.MAX_VALUE) : Math.min(...scales, Number.MAX_VALUE);\n            case "not_smaller":\n              return attributes.axes.length > 0 ? Math.max(...attributes.axes.map((i) => scales[i]), Number.MIN_VALUE) : Math.max(...scales, Number.MIN_VALUE);\n            default:\n              throw new Error(`Keep aspect ratio policy ${attributes.keepAspectRatioPolicy} is not supported`);\n          }\n        })();\n        scales.fill(1, 0, scales.length);\n        const adjustedOutputShape = inputShape.slice();\n        if (attributes.axes.length > 0) {\n          attributes.axes.forEach((v) => scales[v] = scaleInPolicy);\n          attributes.axes.forEach((v) => adjustedOutputShape[v] = Math.round(inputShape[v] * scales[v]));\n        } else {\n          scales.fill(scaleInPolicy, 0, scales.length);\n          adjustedOutputShape.forEach((v, i) => adjustedOutputShape[i] = Math.round(v * scales[i]));\n        }\n        return adjustedOutputShape;\n      };\n      calculateOriginalIndicesFromOutputIndices = (output, inputShape, outputShape, scalesLength, roiLength) => `\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${output.type.indices}) -> array<${output.type.value}, ${outputShape.length}> {\n      var original_indices: array<${output.type.value}, ${outputShape.length}>;\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n        var output_index = ${output.indicesGet("output_indices", "i")};\n        var scale = ${getElementAt("uniforms.scales", "i", scalesLength)};\n        var roi_low = ${getElementAt("uniforms.roi", "i", roiLength)};\n        var roi_hi = ${getElementAt("uniforms.roi", `i + ${inputShape.length}`, roiLength)};\n        if (scale == 1.0) {\n          original_indices[i] = ${output.type.value}(output_index);\n        } else {\n          var input_shape_i = ${getElementAt("uniforms.input_shape", "i", inputShape.length)};\n          var output_shape_i = ${getElementAt("uniforms.output_shape", "i", outputShape.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`;\n      calculateInputIndicesFromOutputIndices = (input, output, inputShape, outputShape, scalesLength, roiLength, useExtrapolation) => `\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${output.type.indices}) -> ${input.type.indices} {\n      var input_indices: ${input.type.indices};\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n        var output_index = ${output.indicesGet("output_indices", "i")};\n        var input_index: u32;\n        var scale = ${getElementAt("uniforms.scales", "i", scalesLength)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${getElementAt("uniforms.roi", "i", roiLength)};\n          var roi_hi = ${getElementAt("uniforms.roi", `i + ${inputShape.length}`, roiLength)};\n          var input_shape_i = ${getElementAt("uniforms.input_shape", "i", inputShape.length)};\n          var output_shape_i = ${getElementAt("uniforms.output_shape", "i", outputShape.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${useExtrapolation} || (original_idx >= 0 && original_idx < ${output.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${output.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${input.indicesSet("input_indices", "i", " input_index")}\n      }\n      return input_indices;\n    }`;\n      checkInputIndices = (input, inputShape) => `\n    fn checkInputIndices(input_indices: ${input.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${inputShape.length}; i++) {\n        var input_index = ${input.indicesGet("input_indices", "i")};\n        if (input_index < 0 || input_index >= ${getElementAt("uniforms.input_shape", "i", inputShape.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`;\n      setChannelAndBatchIndices = (input, channelIdx, batchIdx, spacialDims) => input.rank > spacialDims ? `\n    ${input.indicesSet("input_indices", channelIdx, "channel")};\n    ${input.indicesSet("input_indices", batchIdx, "batch")};\n` : "";\n      bilinearInterpolation = (input, output, inputShape, useExtrapolation, extrapolationValue) => {\n        const isNchw = true;\n        const [batchIdx, heightIdx, widthIdx, channelIdx] = inputShape.length === 2 ? [-1, 0, 1, -1] : isNchw ? [0, 2, 3, 1] : [0, 1, 2, 3];\n        const dType = input.type.value;\n        return `\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${dType} {\n      var input_indices: ${input.type.indices};\n      ${input.indicesSet("input_indices", heightIdx, `max(0, min(row, ${inputShape[heightIdx]} - 1))`)};\n      ${input.indicesSet("input_indices", widthIdx, `max(0, min(col, ${inputShape[widthIdx]} - 1))`)};\n      ${setChannelAndBatchIndices(input, channelIdx, batchIdx, 2)}\n      return ${input.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${dType} = originalIndices[${heightIdx}];\n      var col:${dType} = originalIndices[${widthIdx}];\n      ${useExtrapolation ? `if (row < 0 || row > (${inputShape[heightIdx]} - 1) || col < 0 || col > (${inputShape[widthIdx]} - 1)) {\n        return ${extrapolationValue};\n      }` : ""};\n      row = max(0, min(row, ${inputShape[heightIdx]} - 1));\n      col = max(0, min(col, ${inputShape[widthIdx]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${inputShape.length > 2 ? `u32(originalIndices[${channelIdx}])` : "0"};\n      var batch: u32 =  ${inputShape.length > 2 ? `u32(originalIndices[${batchIdx}])` : "0"};\n      var x11: ${dType} = getInputValue(batch, channel, row1, col1);\n      var x12: ${dType} = getInputValue(batch, channel, row1, col2);\n      var x21: ${dType} = getInputValue(batch, channel, row2, col1);\n      var x22: ${dType} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${dType} = abs(row - ${dType}(row1));\n      var dx2: ${dType} = abs(${dType}(row2) - row);\n      var dy1: ${dType} = abs(col - ${dType}(col1));\n      var dy2: ${dType} = abs(${dType}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`;\n      };\n      bicubicInterpolation = (input, output, inputShape, outputShape, scales, roi, cubicCoeffA, useExtrapolation, extrapolationValue, excludeOutside) => {\n        const is2D = inputShape.length === 2;\n        const isNchw = true;\n        const [heightIdx, widthIdx] = is2D ? [0, 1] : isNchw ? [2, 3] : [1, 2];\n        const dType = input.type.value;\n        const createCubicInterpolationFunction = (idx) => {\n          const direction = idx === heightIdx ? "row" : "col";\n          return `\n      fn ${direction}CubicInterpolation(input_indices: ${input.type.indices}, output_indices: ${output.type.indices}) -> ${dType} {\n        var output_index = ${output.indicesGet("output_indices", idx)};\n        var originalIdx: ${dType} = getOriginalCoordinateFromResizedCoordinate(output_index, ${scales[idx]},\n        ${outputShape[idx]}, ${inputShape[idx]}, ${roi[idx]}, ${roi[idx]} + ${inputShape.length});\n        var fractOriginalIdx: ${dType} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${useExtrapolation} && (originalIdx < 0 || originalIdx > (${inputShape[idx]} - 1))) {\n          return ${extrapolationValue};\n        }\n        var data: array<${dType}, 4> = array<${dType}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${direction}: ${dType} = originalIdx + ${dType}(i);\n          if (${direction} < 0 || ${direction} >= ${inputShape[idx]}) {\n            ${(() => {\n            if (excludeOutside) {\n              return `coefs[i + 1] = 0.0;\n                        continue;`;\n            } else if (useExtrapolation) {\n              return `return ${extrapolationValue};`;\n            } else {\n              return `${direction} = max(0, min(${direction}, ${inputShape[idx]} - 1));`;\n            }\n          })()};\n          }\n        var input_indices_copy: ${input.type.indices} = input_indices;\n          ${input.indicesSet("input_indices_copy", idx, `u32(${direction})`)};\n          data[i + 1] = ${idx === heightIdx ? input.getByIndices("input_indices_copy") : "rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`;\n        };\n        return `\n    ${createCubicInterpolationFunction(heightIdx)};\n    ${createCubicInterpolationFunction(widthIdx)};\n  fn getCubicInterpolationCoefs(s: ${dType}) -> array<${dType}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${dType}, 4> = array<${dType}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${dType} = 1.0 - absS;\n    var twoMinusAbsS: ${dType} = 2.0 - absS;\n    var onePlusAbsS: ${dType} = 1.0 + absS;\n    coeffs[0] = ((${cubicCoeffA} * onePlusAbsS - 5 * ${cubicCoeffA}) * onePlusAbsS + 8 * ${cubicCoeffA}) * onePlusAbsS - 4 * ${cubicCoeffA};\n    coeffs[1] = ((${cubicCoeffA} + 2) * absS - (${cubicCoeffA} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${cubicCoeffA} + 2) * oneMinusAbsS - (${cubicCoeffA} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${cubicCoeffA} * twoMinusAbsS - 5 * ${cubicCoeffA}) * twoMinusAbsS + 8 * ${cubicCoeffA}) * twoMinusAbsS - 4 * ${cubicCoeffA};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${dType}, 4>, coefs: array<${dType}, 4>) -> ${dType} {\n    var coefsSum: ${dType} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n    var input_indices: ${input.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `;\n      };\n      trilinearInterpolation = (input, output, inputShape, useExtrapolation, extrapolationValue) => {\n        const isNchw = true;\n        const [batchIdx, depthIdx, heightIdx, widthIdx, channelIdx] = inputShape.length === 3 ? [-1, 0, 1, 2, -1] : isNchw ? [0, 2, 3, 4, 1] : [0, 1, 2, 3, 4];\n        const dType = input.type.value;\n        return `\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${dType} {\n      var input_indices: ${input.type.indices};\n      ${input.indicesSet("input_indices", depthIdx, `max(0, min(depth, ${inputShape[depthIdx]} - 1))`)};\n      ${input.indicesSet("input_indices", heightIdx, `max(0, min(height, ${inputShape[heightIdx]} - 1))`)};\n      ${input.indicesSet("input_indices", widthIdx, `max(0, min(width, ${inputShape[widthIdx]} - 1))`)};\n      ${setChannelAndBatchIndices(input, channelIdx, batchIdx, 3)}\n      return ${input.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${dType} = originalIndices[${depthIdx}];\n      var height:${dType} = originalIndices[${heightIdx}];\n      var width:${dType} = originalIndices[${widthIdx}];\n      ${useExtrapolation ? `if (depth < 0 || depth > (${inputShape[depthIdx]} - 1) || height < 0 || height > (${inputShape[heightIdx]} - 1) || width < 0 || (width > ${inputShape[widthIdx]} - 1)) {\n      return ${extrapolationValue};\n        }` : ""};\n\n    depth = max(0, min(depth, ${inputShape[depthIdx]} - 1));\n      height = max(0, min(height, ${inputShape[heightIdx]} - 1));\n      width = max(0, min(width, ${inputShape[widthIdx]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${inputShape.length > 3 ? `u32(originalIndices[${channelIdx}])` : "0"};\n      var batch: u32 =  ${inputShape.length > 3 ? `u32(originalIndices[${batchIdx}])` : "0"};\n\n      var x111: ${dType} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${dType} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${dType} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${dType} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${dType} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${dType} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${dType} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${dType} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${dType} = abs(depth - ${dType}(depth1));\n      var dx2: ${dType} = abs(${dType}(depth2) - depth);\n      var dy1: ${dType} = abs(height - ${dType}(height1));\n      var dy2: ${dType} = abs(${dType}(height2) - height);\n      var dz1: ${dType} = abs(width - ${dType}(width1));\n      var dz2: ${dType} = abs(${dType}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`;\n      };\n      createResizeProgramInfo = (inputTensor, attributes, opsetVersion, scalesInput, sizes, roiInput) => {\n        const inputShape = inputTensor.dims;\n        const roi = updateRoI(roiInput, attributes.axes, inputShape.length);\n        let outputShape = initOutputShape(inputShape, scalesInput, sizes, attributes.axes);\n        let scales = scalesInput.slice();\n        if (scalesInput.length === 0) {\n          scales = inputShape.map((value, index) => value === 0 ? 1 : outputShape[index] / value);\n          if (attributes.keepAspectRatioPolicy !== "stretch") {\n            outputShape = adjustOutputShape(inputShape, scales, attributes);\n          }\n        }\n        const output = outputVariable("output", inputTensor.dataType, outputShape.length);\n        const input = inputVariable("input", inputTensor.dataType, inputShape.length);\n        const outputSize = ShapeUtil.size(outputShape);\n        const noScale = inputShape.length === outputShape.length && inputShape.every((d, i) => d === outputShape[i]);\n        const useExtrapolation = attributes.coordinateTransformMode === "tf_crop_and_resize";\n        const extrapolationValue = attributes.extrapolationValue;\n        const dataType = input.type.value;\n        const getShaderSource = (shaderHelper) => `\n      ${noScale ? "" : `\n      ${getOriginalCoordinateFromResizedCoordinate(attributes.coordinateTransformMode, dataType)};\n      ${(() => {\n          switch (attributes.mode) {\n            case "nearest":\n              return `\n              ${checkInputIndices(input, inputShape)};\n              ${getNearestPixelFromOriginal(attributes.nearestMode, opsetVersion, dataType)};\n              ${calculateInputIndicesFromOutputIndices(\n                input,\n                output,\n                inputShape,\n                outputShape,\n                scales.length,\n                roi.length,\n                useExtrapolation\n              )};\n              `;\n            case "linear":\n              return `\n              ${calculateOriginalIndicesFromOutputIndices(output, inputShape, outputShape, scales.length, roi.length)};\n              ${(() => {\n                if (inputShape.length === 2 || inputShape.length === 4) {\n                  return `${bilinearInterpolation(input, output, inputShape, useExtrapolation, extrapolationValue)}`;\n                } else if (inputShape.length === 3 || inputShape.length === 5) {\n                  return `${trilinearInterpolation(input, output, inputShape, useExtrapolation, extrapolationValue)}`;\n                } else {\n                  throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.");\n                }\n              })()};\n            `;\n            case "cubic":\n              return `\n            ${(() => {\n                if (inputShape.length === 2 || inputShape.length === 4) {\n                  return `${bicubicInterpolation(\n                    input,\n                    output,\n                    inputShape,\n                    outputShape,\n                    scales,\n                    roi,\n                    attributes.cubicCoeffA,\n                    useExtrapolation,\n                    attributes.extrapolationValue,\n                    attributes.excludeOutside\n                  )}`;\n                } else {\n                  throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.");\n                }\n              })()};\n            `;\n            default:\n              throw Error("Invalid resize mode");\n          }\n        })()};\n      `}\n      ${shaderHelper.registerUniform("output_size", "u32").registerUniform("scales", "f32", scales.length).registerUniform("roi", "f32", roi.length).declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${noScale ? "output[global_idx] = input[global_idx];" : `\n        let output_indices = ${output.offsetToIndices("global_idx")};\n        var input_indices: ${input.type.indices};\n        ${(() => {\n          switch (attributes.mode) {\n            case "nearest":\n              return `input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${input.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${attributes.extrapolationValue};\n                }`;\n            case "linear":\n              return `output[global_idx] = ${inputShape.length === 2 || inputShape.length === 4 ? "bilinearInterpolation" : "trilinearInterpolation"}(output_indices);`;\n            case "cubic":\n              return "output[global_idx] = bicubicInterpolation(output_indices);";\n            default:\n              throw Error(`Unsupported resize mode: ${attributes.mode}`);\n          }\n        })()};\n`}\n      }`;\n        return {\n          name: "Resize",\n          shaderCache: {\n            hint: `${attributes.cacheKey}|${opsetVersion}|${scales.length > 0 ? scales : ""}|${sizes.length > 0 ? sizes : ""}|${roi.length > 0 ? roi : ""}|${noScale}|${inputShape}`,\n            inputDependencies: ["rank"]\n          },\n          getShaderSource,\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputTensor.dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms: [\n              { type: "uint32", data: outputSize },\n              { type: "float32", data: scales },\n              { type: "float32", data: roi },\n              ...createTensorShapeVariables(inputShape),\n              ...createTensorShapeVariables(outputShape)\n            ]\n          })\n        };\n      };\n      getOpsetVersionFromCustomDataBuffer = (context) => {\n        const customDataBuffer = context.customDataBuffer;\n        const customDataBuffer32 = new Uint32Array(customDataBuffer, customDataBuffer.byteOffset, 1);\n        const opsetVersion = customDataBuffer32[0];\n        return opsetVersion;\n      };\n      resize = (context, attributes) => {\n        const scales = [];\n        const sizes = [];\n        const roi = [];\n        const opsetVersion = getOpsetVersionFromCustomDataBuffer(context);\n        if (attributes.antialias !== 0) {\n          throw Error("Only default value (0) for Antialias attribute is supported");\n        }\n        validateInputs19(context.inputs, attributes, opsetVersion, scales, sizes, roi);\n        context.compute(\n          createResizeProgramInfo(context.inputs[0], attributes, opsetVersion, scales, sizes, roi),\n          { inputs: [0] }\n        );\n      };\n      parseResizeAttributes = (attributes) => {\n        const antialias = attributes.antialias;\n        const axes = attributes.axes;\n        const coordinateTransformMode = attributes.coordinateTransformMode;\n        const cubicCoeffA = attributes.cubicCoeffA;\n        const excludeOutside = attributes.excludeOutside !== 0;\n        const extrapolationValue = attributes.extrapolationValue;\n        const keepAspectRatioPolicy = attributes.keepAspectRatioPolicy;\n        const mode = attributes.mode;\n        const nearestMode = attributes.nearestMode === "" ? "simple" : attributes.nearestMode;\n        return createAttributeWithCacheKey({\n          antialias,\n          axes,\n          coordinateTransformMode,\n          cubicCoeffA,\n          excludeOutside,\n          extrapolationValue,\n          keepAspectRatioPolicy,\n          mode,\n          nearestMode\n        });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts\n  var validateInputs20, createSkipLayerNormProgramInfo, skipLayerNorm, parseSkipLayerNormAttributes;\n  var init_skip_layer_norm = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs20 = (inputs) => {\n        if (!inputs || inputs.length < 3) {\n          throw new Error("layerNorm requires at least 3 inputs.");\n        }\n        const input = inputs[0];\n        const skip = inputs[1];\n        const gamma = inputs[2];\n        if (input.dataType !== skip.dataType || input.dataType !== gamma.dataType) {\n          throw new Error("All inputs must have the same data type");\n        }\n        if (input.dims.length !== 3 && input.dims.length !== 2) {\n          throw new Error("Input must be 2D or 3D");\n        }\n        if (skip.dims.length !== 3 && skip.dims.length !== 2) {\n          throw new Error("Skip must be 2D or 3D");\n        }\n        const hiddenSize = input.dims[input.dims.length - 1];\n        const sequenceLength = input.dims[input.dims.length - 2];\n        if (skip.dims[skip.dims.length - 1] !== hiddenSize) {\n          throw new Error("Skip must have the same hidden size as input");\n        }\n        if (skip.dims[skip.dims.length - 2] !== sequenceLength) {\n          throw new Error("Skip must have the same sequence length as input");\n        }\n        if (gamma.dims.length !== 1) {\n          throw new Error("Gamma must be 1D");\n        }\n        if (gamma.dims[gamma.dims.length - 1] !== hiddenSize) {\n          throw new Error("Gamma must have the same hidden size as input");\n        }\n        if (inputs.length > 3) {\n          const beta = inputs[3];\n          if (beta.dims.length !== 1) {\n            throw new Error("Beta must be 1D");\n          }\n          if (beta.dims[beta.dims.length - 1] !== hiddenSize) {\n            throw new Error("Beta must have the same hidden size as input");\n          }\n        }\n        if (inputs.length > 4) {\n          const bias = inputs[4];\n          if (bias.dims.length !== 1) {\n            throw new Error("Bias must be 1D");\n          }\n          if (bias.dims[bias.dims.length - 1] !== hiddenSize) {\n            throw new Error("Bias must have the same hidden size as input");\n          }\n        }\n      };\n      createSkipLayerNormProgramInfo = (inputs, attributes, outputCount, isTraining) => {\n        const inputShape = inputs[0].dims;\n        const inputSize = ShapeUtil.size(inputShape);\n        const outputShape = inputShape;\n        const outputSize = inputSize;\n        const hiddenSize = inputShape.slice(-1)[0];\n        const meanInvStdDevDim = isTraining ? inputShape.slice(0, -1).concat(1) : [];\n        const hasBetaInput = inputs.length > 3;\n        const hasBiasInput = inputs.length > 4;\n        const hasMeanOutput = isTraining && outputCount > 1;\n        const hasInvStdDevOutput = isTraining && outputCount > 2;\n        const hasInputSkipBiasSumOutput = outputCount > 3;\n        const components = getMaxComponents(hiddenSize);\n        const variables = [\n          inputVariable("x", inputs[0].dataType, inputs[0].dims, components),\n          inputVariable("skip", inputs[1].dataType, inputs[1].dims, components),\n          inputVariable("gamma", inputs[2].dataType, inputs[2].dims, components)\n        ];\n        if (hasBetaInput) {\n          variables.push(inputVariable("beta", inputs[3].dataType, inputs[3].dims, components));\n        }\n        if (hasBiasInput) {\n          variables.push(inputVariable("bias", inputs[4].dataType, inputs[4].dims, components));\n        }\n        variables.push(outputVariable("output", inputs[0].dataType, outputShape, components));\n        if (hasMeanOutput) {\n          variables.push(outputVariable("meanOutput", 1 /* float */, meanInvStdDevDim));\n        }\n        if (hasInvStdDevOutput) {\n          variables.push(outputVariable("invStdOutput", 1 /* float */, meanInvStdDevDim));\n        }\n        if (hasInputSkipBiasSumOutput) {\n          variables.push(outputVariable("inputSkipBiasSum", inputs[0].dataType, outputShape, components));\n        }\n        const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n        const getShaderSource = (shaderHelper) => `\n      const hiddenSize: f32 = ${hiddenSize};\n      const hiddenSizeVectorized: u32 = ${hiddenSize / components};\n      const epsilon: f32 = ${attributes.epsilon};\n\n      ${shaderHelper.declareVariables(...variables)}\n\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize / hiddenSize)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${fillVector("f32", components)};\n        var squareSum = ${fillVector("f32", components)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${hasBiasInput ? "bias[i]" : "0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${hasInputSkipBiasSumOutput ? "inputSkipBiasSum[offset + i] = value;" : ""}\n          output[offset + i] = value;\n          let f32Value = ${castToF32(dataType, components, "value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${sumVector("sum", components)} / hiddenSize;\n        let invStdDev = inverseSqrt(${sumVector("squareSum", components)} / hiddenSize - mean * mean + epsilon);\n        ${hasMeanOutput ? "meanOutput[global_idx] = mean;" : ""}\n        ${hasInvStdDevOutput ? "invStdOutput[global_idx] = invStdDev;" : ""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${dataType}(mean)) * ${dataType}(invStdDev) * gamma[i]\n           + ${hasBetaInput ? "beta[i]" : "0.0"};\n        }\n      }`;\n        const outputs = [{ dims: outputShape, dataType: inputs[0].dataType }];\n        if (outputCount > 1) {\n          outputs.push({ dims: meanInvStdDevDim, dataType: 1 /* float */ });\n        }\n        if (outputCount > 2) {\n          outputs.push({ dims: meanInvStdDevDim, dataType: 1 /* float */ });\n        }\n        if (outputCount > 3) {\n          outputs.push({ dims: inputShape, dataType: inputs[0].dataType });\n        }\n        return {\n          name: "SkipLayerNormalization",\n          shaderCache: { hint: attributes.cacheKey },\n          getShaderSource,\n          getRunData: () => ({ outputs, dispatchGroup: { x: Math.ceil(outputSize / hiddenSize / 64) } })\n        };\n      };\n      skipLayerNorm = (context, attributes) => {\n        const isTraining = false;\n        validateInputs20(context.inputs);\n        const outputs = [0];\n        if (context.outputCount > 1) {\n          outputs.push(isTraining ? 1 : -3);\n        }\n        if (context.outputCount > 2) {\n          outputs.push(isTraining ? 2 : -3);\n        }\n        if (context.outputCount > 3) {\n          outputs.push(3);\n        }\n        context.compute(\n          createSkipLayerNormProgramInfo(context.inputs, attributes, context.outputCount, isTraining),\n          { outputs }\n        );\n      };\n      parseSkipLayerNormAttributes = (attributes) => {\n        const epsilon = attributes.epsilon;\n        return createAttributeWithCacheKey({ epsilon });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/slice.ts\n  var validateInputs21, readInput, createSliceAttributesFromInputs, fixStartEndValues, calculateInputIndicesImpl, createSliceProgramInfo, slice, parseSliceAttributes;\n  var init_slice = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/slice.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs21 = (inputs, attributes) => {\n        if (!inputs || inputs.length < 1) {\n          throw new Error("too few inputs");\n        }\n        if (attributes.axes.length !== 0) {\n          if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\n            throw new Error("axes, starts and ends must have the same length");\n          }\n        } else if (attributes.starts.length !== attributes.ends.length) {\n          throw new Error("starts and ends must have the same length");\n        }\n        inputs.slice(1).forEach((_, idx) => {\n          if (inputs[idx + 1].dataType !== 6 /* int32 */ && inputs[idx + 1].dataType !== 7 /* int64 */) {\n            throw new Error(`Input ${idx} must be an array of int32 or int64`);\n          }\n        });\n      };\n      readInput = (inputs, idx) => {\n        const input = [];\n        if (inputs.length > idx) {\n          if (inputs[idx].dataType === 7 /* int64 */) {\n            inputs[idx].getBigInt64Array().forEach((v) => input.push(Number(v)));\n          } else if (inputs[idx].dataType === 6 /* int32 */) {\n            inputs[idx].getInt32Array().forEach((v) => input.push(Number(v)));\n          } else {\n            throw new Error(`Input ${idx} must be an array of int32 or int64`);\n          }\n        }\n        return input;\n      };\n      createSliceAttributesFromInputs = (inputs, attributes) => {\n        if (inputs.length > 1) {\n          const starts = readInput(inputs, 1);\n          const ends = readInput(inputs, 2);\n          let axes = readInput(inputs, 3);\n          if (axes.length === 0) {\n            axes = [...Array(inputs[0].dims.length).keys()];\n          }\n          return createAttributeWithCacheKey({ starts, ends, axes });\n        } else {\n          return attributes;\n        }\n      };\n      fixStartEndValues = (value, index, inputShape, axes, steps) => {\n        let newValue = value;\n        if (value < 0) {\n          newValue += inputShape[axes[index]];\n        }\n        if (steps[index] < 0) {\n          return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\n        } else {\n          return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\n        }\n      };\n      calculateInputIndicesImpl = (input, output, inputShape) => `fn calculateInputIndices(output_indices: ${output.type.indices}) -> ${input.type.indices} {\n          var input_indices: ${input.type.indices};\n          var carry = 0u;\n          for (var i = ${inputShape.length}; i >= 0; i--) {\n            let input_shape_i = ${getElementAt("uniforms.input_shape", "i", inputShape.length)};\n            let steps_i = ${getElementAt("uniforms.steps", "i", inputShape.length)};\n            let signs_i = ${getElementAt("uniforms.signs", "i", inputShape.length)};\n            let starts_i = ${getElementAt("uniforms.starts", "i", inputShape.length)};\n            var output_index = ${output.indicesGet("output_indices", "i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${input.indicesSet("input_indices", "i", "input_index")};\n          }\n          return input_indices;\n      }`;\n      createSliceProgramInfo = (inputs, attributes) => {\n        const inputShape = inputs[0].dims;\n        const inputSize = ShapeUtil.size(inputShape);\n        const axes = attributes.axes.length > 0 ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length) : [...Array(inputShape.length).keys()];\n        let steps = readInput(inputs, 4);\n        steps.forEach((step) => step !== 0 || (() => {\n          throw new Error("step cannot be 0");\n        }));\n        if (steps.length === 0) {\n          steps = Array(axes.length).fill(1);\n        }\n        const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\n        const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\n        if (axes.length !== starts.length || axes.length !== ends.length) {\n          throw new Error("start, ends and axes should have the same number of elements");\n        }\n        if (axes.length !== inputShape.length) {\n          for (let i = 0; i < inputShape.length; ++i) {\n            if (!axes.includes(i)) {\n              starts.splice(i, 0, 0);\n              ends.splice(i, 0, inputShape[i]);\n              steps.splice(i, 0, 1);\n            }\n          }\n        }\n        const signs = steps.map((step) => Math.sign(step));\n        steps.forEach((step, i, array) => {\n          if (step < 0) {\n            const numSteps = (ends[i] - starts[i]) / step;\n            const newEnd = starts[i];\n            const newStart = newEnd + numSteps * steps[i];\n            starts[i] = newStart;\n            ends[i] = newEnd;\n            array[i] = -step;\n          }\n        });\n        const outputShape = inputShape.slice(0);\n        axes.forEach((axis, _) => {\n          outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\n        });\n        const outputTensorInfo = { dims: outputShape, dataType: inputs[0].dataType };\n        const output = outputVariable("output", inputs[0].dataType, outputShape.length);\n        const input = inputVariable("input", inputs[0].dataType, inputs[0].dims.length);\n        const outputSize = ShapeUtil.size(outputShape);\n        const uniforms = [\n          { name: "outputSize", type: "u32" },\n          { name: "starts", type: "u32", length: starts.length },\n          { name: "signs", type: "i32", length: signs.length },\n          { name: "steps", type: "u32", length: steps.length }\n        ];\n        const programUniforms = [\n          { type: "uint32", data: outputSize },\n          { type: "uint32", data: starts },\n          { type: "int32", data: signs },\n          { type: "uint32", data: steps },\n          ...createTensorShapeVariables(inputs[0].dims),\n          ...createTensorShapeVariables(outputShape)\n        ];\n        const getShaderSource = (shaderHelper) => `\n      ${shaderHelper.registerUniforms(uniforms).declareVariables(input, output)}\n        ${calculateInputIndicesImpl(input, output, inputShape)}\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${output.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${output.setByOffset("global_idx", input.getByIndices("input_indices"))}\n      }`;\n        return {\n          name: "Slice",\n          shaderCache: { hint: `${signs.length}_${starts.length}_${steps.length}`, inputDependencies: ["rank"] },\n          getShaderSource,\n          getRunData: () => ({\n            outputs: [outputTensorInfo],\n            dispatchGroup: { x: Math.ceil(\n              inputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          })\n        };\n      };\n      slice = (context, attributes) => {\n        validateInputs21(context.inputs, attributes);\n        const updatedAttributes = createSliceAttributesFromInputs(context.inputs, attributes);\n        context.compute(createSliceProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n      };\n      parseSliceAttributes = (attributes) => {\n        const starts = attributes.starts;\n        const ends = attributes.ends;\n        const axes = attributes.axes;\n        return createAttributeWithCacheKey({ starts, ends, axes });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/softmax.ts\n  var validateInputs22, createSoftmaxProgramInfo, softmax, parseSoftmaxAttributes;\n  var init_softmax = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/softmax.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs22 = (inputs) => {\n        if (!inputs || inputs.length !== 1) {\n          throw new Error("Softmax op requires 1 input.");\n        }\n      };\n      createSoftmaxProgramInfo = (input, attributes) => {\n        const shape = input.dims;\n        const outputSize = ShapeUtil.size(shape);\n        const WG = 64;\n        let axis = attributes.axis;\n        if (axis < 0) {\n          axis = shape.length + axis;\n        }\n        if (axis < shape.length - 1) {\n          throw new Error("softmax only supports last axis for now.");\n        }\n        const cols = shape[axis];\n        const rows = outputSize / cols;\n        const components = getMaxComponents(cols);\n        const packedCols = cols / components;\n        const maxVector = (name, components2) => {\n          if (components2 === 4) {\n            return `max(max(${name}.x, ${name}.y), max(${name}.z, ${name}.w))`;\n          } else if (components2 === 2) {\n            return `max(${name}.x, ${name}.y)`;\n          } else if (components2 === 3) {\n            return `max(max(${name}.x, ${name}.y), ${name}.z)`;\n          }\n          return name;\n        };\n        const x = inputVariable("x", input.dataType, input.dims, components);\n        const output = outputVariable("result", input.dataType, input.dims, components);\n        const valueType = x.type.value;\n        const threadMaxDecl = tensorTypeToWsglStorageType(input.dataType) === "f32" ? `var threadMax = ${valueType}(-3.402823e+38f);` : `var threadMax = ${valueType}(-65504.0h);`;\n        const getShaderSource = (shaderHelper) => `\n      var<workgroup> rowMaxShared : ${valueType};\n      var<workgroup> rowSumShared : ${valueType};\n      var<workgroup> threadShared : array<${valueType}, ${WG}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${valueType} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${valueType}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${shaderHelper.registerUniform("packedCols", "i32").declareVariables(x, output)}\n      ${shaderHelper.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${WG};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${threadMaxDecl}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${valueType}(${maxVector("threadShared[0]", components)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${valueType}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${valueType}(${sumVector("threadShared[0]", components)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;\n        return {\n          name: "Softmax",\n          shaderCache: { hint: `${components}`, inputDependencies: ["type"] },\n          getRunData: () => ({\n            outputs: [{ dims: shape, dataType: input.dataType }],\n            dispatchGroup: { x: rows },\n            programUniforms: [{ type: "uint32", data: packedCols }]\n          }),\n          getShaderSource\n        };\n      };\n      softmax = (context, attributes) => {\n        validateInputs22(context.inputs);\n        context.compute(createSoftmaxProgramInfo(context.inputs[0], attributes));\n      };\n      parseSoftmaxAttributes = (attributes) => createAttributeWithCacheKey({ axis: attributes.axis });\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/split.ts\n  var validateInputs23, createSplitAttributesFromInputs, calculateOutputIndexImpl, writeBufferDataImpl, createSplitProgramInfo, split, parseSplitAttributes;\n  var init_split = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/split.ts"() {\n      "use strict";\n      init_util();\n      init_attribute_with_cache_key();\n      init_common();\n      validateInputs23 = (inputs) => {\n        if (!inputs || inputs.length < 1) {\n          throw new Error("too few inputs");\n        }\n      };\n      createSplitAttributesFromInputs = (inputs, attributes) => {\n        const splitSizes = [];\n        let numOutputs = attributes.numOutputs;\n        if (inputs[1].dims[0] > 0) {\n          inputs[1].getBigInt64Array().forEach((v) => splitSizes.push(Number(v)));\n          numOutputs = splitSizes.length;\n        }\n        return createAttributeWithCacheKey({ numOutputs, axis: attributes.axis, splitSizes });\n      };\n      calculateOutputIndexImpl = (numberOfTensors) => `\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n    if (index < ${getElementAt("uniforms.size_in_split_axis", "i", numberOfTensors)}) {\n        return i;\n    }\n    }\n    return ${numberOfTensors}u;\n}`;\n      writeBufferDataImpl = (outputs) => {\n        const numberOfTensors = outputs.length;\n        const codeLines = [];\n        for (let i = 0; i < numberOfTensors; ++i) {\n          const returnSnippet = outputs[i].setByIndices("indices", "input[global_idx]");\n          if (numberOfTensors === 1) {\n            codeLines.push(returnSnippet);\n          } else if (i === 0) {\n            codeLines.push(`if (output_number == ${i}u) { ${returnSnippet} }`);\n          } else if (i === numberOfTensors - 1) {\n            codeLines.push(`else { ${returnSnippet} }`);\n          } else {\n            codeLines.push(`else if (output_number == ${i}) { ${returnSnippet} }`);\n          }\n        }\n        return `\n      fn writeBufferData(output_number: u32, indices: ${outputs[0].type.indices}, global_idx: u32) {\n        ${codeLines.join("\\n")}\n      }`;\n      };\n      createSplitProgramInfo = (inputs, attributes) => {\n        const inputShape = inputs[0].dims;\n        const inputSize = ShapeUtil.size(inputShape);\n        const dataType = inputs[0].dataType;\n        const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n        const outputs = new Array(attributes.numOutputs);\n        const input = inputVariable("input", dataType, inputShape);\n        const sizeInSplitAxis = new Array(attributes.numOutputs);\n        const outputsTensorInfo = [];\n        const outputShapes = [];\n        let previousSum = 0;\n        const programUniforms = [{ type: "uint32", data: inputSize }];\n        for (let i = 0; i < attributes.numOutputs; i++) {\n          previousSum += attributes.splitSizes[i];\n          sizeInSplitAxis[i] = previousSum;\n          const outputShape = inputShape.slice();\n          outputShape[attributes.axis] = attributes.splitSizes[i];\n          outputShapes.push(outputShape);\n          outputs[i] = outputVariable(`output${i}`, dataType, outputShape);\n          outputsTensorInfo.push({ dims: outputShapes[i], dataType: inputs[0].dataType });\n        }\n        programUniforms.push({ type: "uint32", data: sizeInSplitAxis });\n        programUniforms.push(...createTensorShapeVariables(inputShape));\n        outputShapes.forEach((outputShape) => programUniforms.push(...createTensorShapeVariables(outputShape)));\n        const getShaderSource = (shaderHelper) => `\n  ${shaderHelper.registerUniform("input_size", "u32").registerUniform("size_in_split_axis", "u32", sizeInSplitAxis.length).declareVariables(input, ...outputs)}\n  ${calculateOutputIndexImpl(sizeInSplitAxis.length)}\n  ${writeBufferDataImpl(outputs)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${input.offsetToIndices("global_idx")};\n    var index = ${input.indicesGet("indices", axis)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${getElementAt("uniforms.size_in_split_axis", "output_number - 1u", sizeInSplitAxis.length)};\n      ${input.indicesSet("indices", axis, "index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;\n        return {\n          name: "Split",\n          shaderCache: { hint: attributes.cacheKey, inputDependencies: ["rank"] },\n          getShaderSource,\n          getRunData: () => ({\n            outputs: outputsTensorInfo,\n            dispatchGroup: { x: Math.ceil(\n              inputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms\n          })\n        };\n      };\n      split = (context, attributes) => {\n        validateInputs23(context.inputs);\n        const updatedAttributes = context.inputs.length === 1 ? attributes : createSplitAttributesFromInputs(context.inputs, attributes);\n        context.compute(createSplitProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n      };\n      parseSplitAttributes = (attributes) => {\n        const axis = attributes.axis;\n        const splitSizes = attributes.splitSizes;\n        const numOutputs = attributes.numOutputs < 0 ? splitSizes.length : attributes.numOutputs;\n        if (numOutputs !== splitSizes.length) {\n          throw new Error("numOutputs and splitSizes lengh must be equal");\n        }\n        return createAttributeWithCacheKey({ axis, numOutputs, splitSizes });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/tile.ts\n  var getRepeats, validateInputs24, getOutputShape2, createTileProgramInfo, tile;\n  var init_tile = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/tile.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_common();\n      getRepeats = (repeatsTensorView) => Array.from(repeatsTensorView.getBigInt64Array(), Number);\n      validateInputs24 = (inputs) => {\n        if (!inputs || inputs.length !== 2) {\n          throw new Error("Tile requires 2 inputs.");\n        }\n        if (inputs[0].dataType !== 1 /* float */ && inputs[0].dataType !== 6 /* int32 */ && inputs[0].dataType !== 12 /* uint32 */) {\n          throw new Error("Tile only support float, int32, and uint32 data types");\n        }\n        if (inputs[1].dataType !== 7 /* int64 */) {\n          throw new Error("Tile `repeats` input should be of int64 data type");\n        }\n        if (inputs[1].dims.length !== 1) {\n          throw new Error("Tile `repeats` input should be 1-D");\n        }\n        const repeats = getRepeats(inputs[1]);\n        if (repeats.length !== inputs[0].dims.length) {\n          throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor");\n        }\n      };\n      getOutputShape2 = (inputShape, repeats) => {\n        const outputShape = [];\n        for (let i = 0; i < inputShape.length; ++i) {\n          outputShape.push(inputShape[i] * repeats[i]);\n        }\n        return outputShape;\n      };\n      createTileProgramInfo = (inputs) => {\n        const inputShape = inputs[0].dims;\n        const repeats = getRepeats(inputs[1]);\n        const outputShape = getOutputShape2(inputShape, repeats);\n        const outputSize = ShapeUtil.size(outputShape);\n        const dataType = inputs[0].dataType;\n        const input = inputVariable("input", dataType, inputShape.length);\n        const output = outputVariable("output", dataType, outputShape.length);\n        const getShaderSource = (shaderHelper) => `\n      const inputShape = ${input.indices(...inputShape)};\n      ${shaderHelper.registerUniform("output_size", "u32").declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${output.offsetToIndices("global_idx")};\n      var input_indices: ${input.type.indices};\n      for (var i = 0; i < ${inputShape.length}; i++) {\n        let input_dim_i = ${input.indicesGet("uniforms.input_shape", "i")};\n        let input_dim_value = ${output.indicesGet("output_indices", "i")}  % input_dim_i;\n\n        ${input.indicesSet("input_indices", "i", "input_dim_value")}\n      }\n      ${output.setByOffset("global_idx", input.getByIndices("input_indices"))}\n    }`;\n        return {\n          name: "Tile",\n          shaderCache: { hint: `${repeats}`, inputDependencies: ["rank"] },\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64\n              /* workgroup size */\n            ) },\n            programUniforms: [\n              { type: "uint32", data: outputSize },\n              ...createTensorShapeVariables(inputs[0].dims),\n              ...createTensorShapeVariables(outputShape)\n            ]\n          }),\n          getShaderSource\n        };\n      };\n      tile = (context) => {\n        validateInputs24(context.inputs);\n        context.compute(createTileProgramInfo(context.inputs), { inputs: [0] });\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/ops/where.ts\n  var createWhereOpProgramShader, createWhereOpProgramInfo, where;\n  var init_where = __esm({\n    "web/lib/wasm/jsep/webgpu/ops/where.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_util();\n      init_common();\n      createWhereOpProgramShader = (shaderHelper, inputs, dimsOutput, isBroadcast, typeOutput) => {\n        const output = outputVariable("output_data", typeOutput, dimsOutput.length, 4);\n        const a = inputVariable("a_data", inputs[1].dataType, inputs[1].dims.length, 4);\n        const b = inputVariable("b_data", inputs[2].dataType, inputs[2].dims.length, 4);\n        const c = inputVariable("c_data", inputs[0].dataType, inputs[0].dims.length, 4);\n        let assignment;\n        const expression = (a2, b2, c2) => `select(${b2}, ${a2}, ${c2})`;\n        if (!isBroadcast) {\n          assignment = output.setByOffset(\n            "global_idx",\n            expression(a.getByOffset("global_idx"), b.getByOffset("global_idx"), c.getByOffset("global_idx"))\n          );\n        } else {\n          const singleAssignment = (resStr, x, typeCast = "") => {\n            const expressionA = `a_data[index_a${x}][component_a${x}]`;\n            const expressionB = `b_data[index_b${x}][component_b${x}]`;\n            const expressionC = `bool(c_data[index_c${x}] & ${4278190080 >>> (3 - x) * 8}u)`;\n            return `\n            let output_indices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offset_a${x} = ${a.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let offset_b${x} = ${b.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let offset_c${x} = ${c.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let index_a${x} = offset_a${x} / 4u;\n            let index_b${x} = offset_b${x} / 4u;\n            let index_c${x} = offset_c${x} / 4u;\n            let component_a${x} = offset_a${x} % 4u;\n            let component_b${x} = offset_b${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expression(expressionA, expressionB, expressionC)});\n          `;\n          };\n          if (typeOutput === 9 /* bool */) {\n            assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment("data", 0, "u32")}\n            ${singleAssignment("data", 1, "u32")}\n            ${singleAssignment("data", 2, "u32")}\n            ${singleAssignment("data", 3, "u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n          } else {\n            assignment = `\n            ${singleAssignment("output_data[global_idx]", 0)}\n            ${singleAssignment("output_data[global_idx]", 1)}\n            ${singleAssignment("output_data[global_idx]", 2)}\n            ${singleAssignment("output_data[global_idx]", 3)}\n          `;\n          }\n        }\n        return `\n        ${shaderHelper.registerUniform("vec_size", "u32").declareVariables(c, a, b, output)}\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${assignment}\n      }`;\n      };\n      createWhereOpProgramInfo = (inputs) => {\n        const dimsA = inputs[1].dims;\n        const dimsB = inputs[2].dims;\n        const dimsC = inputs[0].dims;\n        const outputDataType = inputs[1].dataType;\n        const isBroadcast = !(ShapeUtil.areEqual(dimsA, dimsB) && ShapeUtil.areEqual(dimsB, dimsC));\n        let outputShape = dimsA;\n        let outputSize = ShapeUtil.size(dimsA);\n        if (isBroadcast) {\n          const calculatedShape = BroadcastUtil.calcShape(BroadcastUtil.calcShape(dimsA, dimsB, false), dimsC, false);\n          if (!calculatedShape) {\n            throw new Error("Can\'t perform where op on the given tensors");\n          }\n          outputShape = calculatedShape;\n          outputSize = ShapeUtil.size(outputShape);\n        }\n        const vecSize = Math.ceil(outputSize / 4);\n        return {\n          name: "Where",\n          shaderCache: { inputDependencies: ["rank", "rank", "rank"] },\n          getShaderSource: (shaderHelper) => createWhereOpProgramShader(shaderHelper, inputs, outputShape, isBroadcast, outputDataType),\n          getRunData: () => ({\n            outputs: [{ dims: outputShape, dataType: outputDataType }],\n            dispatchGroup: { x: Math.ceil(\n              outputSize / 64 / 4\n              /* vec size */\n            ) },\n            programUniforms: [\n              { type: "uint32", data: vecSize },\n              ...createTensorShapeVariables(dimsC),\n              ...createTensorShapeVariables(dimsA),\n              ...createTensorShapeVariables(dimsB),\n              ...createTensorShapeVariables(outputShape)\n            ]\n          })\n        };\n      };\n      where = (context) => {\n        context.compute(createWhereOpProgramInfo(context.inputs));\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/op-resolve-rules.ts\n  var WEBGPU_OP_RESOLVE_RULES;\n  var init_op_resolve_rules = __esm({\n    "web/lib/wasm/jsep/webgpu/op-resolve-rules.ts"() {\n      "use strict";\n      init_argminmax();\n      init_attention();\n      init_batch_norm();\n      init_bias_add();\n      init_bias_split_gelu();\n      init_binary_op();\n      init_concat();\n      init_conv();\n      init_conv_transpose();\n      init_cumsum();\n      init_einsum();\n      init_expand();\n      init_gather();\n      init_gather_elements();\n      init_gemm();\n      init_instance_norm();\n      init_layer_norm();\n      init_matmul();\n      init_multi_head_attentiion();\n      init_pad();\n      init_pool();\n      init_range();\n      init_reduce();\n      init_resize();\n      init_skip_layer_norm();\n      init_slice();\n      init_softmax();\n      init_split();\n      init_tile();\n      init_transpose();\n      init_unary_op();\n      init_where();\n      WEBGPU_OP_RESOLVE_RULES = /* @__PURE__ */ new Map([\n        ["Abs", [abs]],\n        ["Acos", [acos]],\n        ["Acosh", [acosh]],\n        ["Add", [add]],\n        ["ArgMax", [argMax, parseArgMinMaxAttributes]],\n        ["ArgMin", [argMin, parseArgMinMaxAttributes]],\n        ["Asin", [asin]],\n        ["Asinh", [asinh]],\n        ["Atan", [atan]],\n        ["Atanh", [atanh]],\n        ["Attention", [attention]],\n        // TODO: support new attributes for AveragePool-10\n        ["AveragePool", [averagePool, parseAveragePoolAttributes]],\n        ["BatchNormalization", [batchNorm]],\n        ["BiasAdd", [biasAdd]],\n        ["BiasSplitGelu", [biasSplitGelu]],\n        ["Cast", [cast, parseCastAttributes]],\n        ["Ceil", [ceil]],\n        ["Clip", [clip]],\n        ["Concat", [concat, parseConcatAttributes]],\n        ["Conv", [conv, parseConvAttributes]],\n        ["ConvTranspose", [convTranspose, parseConvTransposeAttributes]],\n        ["Cos", [cos]],\n        ["Cosh", [cosh]],\n        ["CumSum", [cumsum, parseCumSumAttributes]],\n        ["Div", [div]],\n        ["Einsum", [einsum, parseEinsumAttributes]],\n        ["Elu", [elu, parseAlphaAttributes]],\n        ["Equal", [equal]],\n        ["Erf", [erf]],\n        ["Exp", [exp]],\n        ["Expand", [expand]],\n        ["Floor", [floor]],\n        ["FusedConv", [conv, parseConvAttributes]],\n        ["Gather", [gather, parseGatherAttributes]],\n        ["GatherElements", [gatherElements, parseGatherElementsAttributes]],\n        ["Gelu", [gelu]],\n        ["Gemm", [gemm, parseGemmAttributes]],\n        ["GlobalAveragePool", [globalAveragePool, parseGlobalAveragePoolAttributes]],\n        ["GlobalMaxPool", [globalMaxPool, parseGlobalMaxPoolAttributes]],\n        ["Greater", [greater]],\n        ["GreaterOrEqual", [greaterOrEqual]],\n        ["InstanceNormalization", [instanceNorm]],\n        ["LayerNormalization", [layerNorm]],\n        ["LeakyRelu", [leakyRelu, parseAlphaAttributes]],\n        ["Less", [less]],\n        ["LessOrEqual", [lessOrEqual]],\n        ["Log", [log]],\n        ["MatMul", [matMul]],\n        // TODO: support new attributes for MaxPool-8 and MaxPool-10\n        ["MaxPool", [maxPool, parseMaxPoolAttributes]],\n        ["Mul", [mul]],\n        ["MultiHeadAttention", [multiHeadAttention, parseMultiHeadAttentionAttributes]],\n        ["Neg", [neg]],\n        ["Not", [not]],\n        ["Pad", [pad]],\n        ["Pow", [pow]],\n        ["Range", [range]],\n        ["Reciprocal", [reciprocal]],\n        ["ReduceMin", [reduceMin]],\n        ["ReduceMean", [reduceMean]],\n        ["ReduceMax", [reduceMax]],\n        ["ReduceSum", [reduceSum]],\n        ["ReduceProd", [reduceProd]],\n        ["ReduceL1", [reduceL1]],\n        ["ReduceL2", [reduceL2]],\n        ["ReduceLogSum", [reduceLogSum]],\n        ["ReduceLogSumExp", [reduceLogSumExp]],\n        ["ReduceSumSquare", [reduceSumSquare]],\n        ["Relu", [relu]],\n        ["Resize", [resize, parseResizeAttributes]],\n        ["Sigmoid", [sigmoid]],\n        ["Sin", [sin]],\n        ["Sinh", [sinh]],\n        ["Slice", [slice, parseSliceAttributes]],\n        ["SkipLayerNormalization", [skipLayerNorm, parseSkipLayerNormAttributes]],\n        ["Split", [split, parseSplitAttributes]],\n        ["Sqrt", [sqrt]],\n        ["Softmax", [softmax, parseSoftmaxAttributes]],\n        ["Sub", [sub]],\n        ["Tan", [tan]],\n        ["Tanh", [tanh]],\n        ["ThresholdedRelu", [thresholdedRelu, parseAlphaAttributes]],\n        ["Tile", [tile]],\n        ["Transpose", [transpose, parseTransposeAttributes]],\n        ["Where", [where]]\n      ]);\n    }\n  });\n\n  // web/lib/wasm/jsep/webgpu/program-manager.ts\n  var ProgramManager;\n  var init_program_manager = __esm({\n    "web/lib/wasm/jsep/webgpu/program-manager.ts"() {\n      "use strict";\n      init_esm();\n      init_log();\n      init_common();\n      ProgramManager = class {\n        constructor(backend) {\n          this.backend = backend;\n          this.repo = /* @__PURE__ */ new Map();\n          this.attributesBound = false;\n        }\n        getArtifact(key) {\n          return this.repo.get(key);\n        }\n        setArtifact(key, artifact) {\n          this.repo.set(key, artifact);\n        }\n        run(buildArtifact, inputs, outputs, dispatchGroup, uniformBufferBinding) {\n          TRACE_FUNC_BEGIN(buildArtifact.programInfo.name);\n          const device = this.backend.device;\n          const computePassEncoder = this.backend.getComputePassEncoder();\n          this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2);\n          computePassEncoder.setPipeline(buildArtifact.computePipeline);\n          const entries = [];\n          for (const input of inputs) {\n            entries.push({ binding: entries.length, resource: { buffer: input.buffer } });\n          }\n          for (const output of outputs) {\n            entries.push({ binding: entries.length, resource: { buffer: output.buffer } });\n          }\n          if (uniformBufferBinding) {\n            entries.push({ binding: entries.length, resource: uniformBufferBinding });\n          }\n          const bindGroup = device.createBindGroup(\n            { layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries, label: buildArtifact.programInfo.name }\n          );\n          computePassEncoder.setBindGroup(0, bindGroup);\n          computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n          this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2 + 1);\n          this.backend.pendingDispatchNumber++;\n          if (this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber || this.backend.queryType === "at-passes") {\n            this.backend.endComputePass();\n          }\n          if (this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber) {\n            this.backend.flush();\n          }\n          TRACE_FUNC_END(buildArtifact.programInfo.name);\n        }\n        dispose() {\n        }\n        build(programInfo, normalizedDispatchGroupSize) {\n          TRACE_FUNC_BEGIN(programInfo.name);\n          const device = this.backend.device;\n          const extensions = [];\n          if (device.features.has("shader-f16")) {\n            extensions.push("enable f16;");\n          }\n          const shaderHelper = createShaderHelper(normalizedDispatchGroupSize);\n          const userCode = programInfo.getShaderSource(shaderHelper);\n          const code = `${extensions.join("\\n")}\n${shaderHelper.additionalImplementations}\n${userCode}`;\n          const shaderModule = device.createShaderModule({ code, label: programInfo.name });\n          LOG_DEBUG("verbose", () => `[WebGPU] ${programInfo.name} shader code: ${code}`);\n          const computePipeline = device.createComputePipeline(\n            { compute: { module: shaderModule, entryPoint: "main" }, layout: "auto", label: programInfo.name }\n          );\n          TRACE_FUNC_END(programInfo.name);\n          return { programInfo, computePipeline };\n        }\n        normalizeDispatchGroupSize(dispatchGroup) {\n          const x = typeof dispatchGroup === "number" ? dispatchGroup : dispatchGroup.x;\n          const y = typeof dispatchGroup === "number" ? 1 : dispatchGroup.y || 1;\n          const z = typeof dispatchGroup === "number" ? 1 : dispatchGroup.z || 1;\n          const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n          if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n            return [x, y, z];\n          }\n          const size = x * y * z;\n          let dispatchAverage = Math.ceil(Math.sqrt(size));\n          if (dispatchAverage > limitPerDimension) {\n            dispatchAverage = Math.ceil(Math.cbrt(size));\n            if (dispatchAverage > limitPerDimension) {\n              throw new Error("Total dispatch size exceeds WebGPU maximum.");\n            }\n            return [dispatchAverage, dispatchAverage, dispatchAverage];\n          } else {\n            return [dispatchAverage, dispatchAverage, 1];\n          }\n        }\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/backend-webgpu.ts\n  var getProgramInputTensorInfoDependencyKey, getProgramInfoUniqueKey, WebGpuBackend;\n  var init_backend_webgpu = __esm({\n    "web/lib/wasm/jsep/backend-webgpu.ts"() {\n      "use strict";\n      init_esm();\n      init_wasm_common();\n      init_log();\n      init_tensor_view();\n      init_gpu_data_manager();\n      init_op_resolve_rules();\n      init_program_manager();\n      getProgramInputTensorInfoDependencyKey = (inputTensors, inputDependencies) => {\n        if (inputDependencies.length !== inputTensors.length) {\n          throw new Error(`inputDependencies length ${inputDependencies.length} is not equal to inputTensors length ${inputTensors.length}.`);\n        }\n        const inputInfos = [];\n        for (let i = 0; i < inputTensors.length; ++i) {\n          const type = inputTensors[i].dataType;\n          switch (inputDependencies[i]) {\n            case "none": {\n              inputInfos.push("");\n              break;\n            }\n            case "type": {\n              inputInfos.push(`${type}`);\n              break;\n            }\n            case "rank": {\n              const rank = inputTensors[i].dims.length;\n              inputInfos.push(`${type};${rank}`);\n              break;\n            }\n            case "dims": {\n              const dims = inputTensors[i].dims.join(",");\n              inputInfos.push(`${type};${dims}`);\n              break;\n            }\n            default:\n              throw new Error(`unsupported input dependency: ${inputDependencies[i]}`);\n          }\n        }\n        return inputInfos.join("|");\n      };\n      getProgramInfoUniqueKey = (programInfo, inputTensors, is1DimensionDispatch) => {\n        let key = programInfo.name;\n        if (programInfo.shaderCache?.hint) {\n          key += "[" + programInfo.shaderCache.hint + "]";\n        }\n        key += ":" + is1DimensionDispatch + `:${getProgramInputTensorInfoDependencyKey(\n          inputTensors,\n          programInfo.shaderCache?.inputDependencies ?? new Array(inputTensors.length).fill("dims")\n        )}`;\n        return key;\n      };\n      WebGpuBackend = class {\n        constructor() {\n          /**\n           * representing the kernel ID of which is currently being computed (CPU code perspective).\n           * `null` means no kernel is being computed.\n           * only one kernel can be computed at a moment.\n           */\n          this.currentKernelId = null;\n          this.commandEncoder = null;\n          this.computePassEncoder = null;\n          this.maxDispatchNumber = 16;\n          this.pendingDispatchNumber = 0;\n          // info of kernels pending submission for a single batch\n          this.pendingKernels = [];\n          // queryReadBuffer -> pendingKernels mapping for all the batches\n          this.pendingQueries = /* @__PURE__ */ new Map();\n          /**\n           * a SessionID -> a Map of (InputOutputIndex -> [ID, GPUBuffer]) mapping.\n           */\n          this.sessionExternalDataMapping = /* @__PURE__ */ new Map();\n        }\n        /**\n         * get the custom data of the current kernel\n         */\n        get currentKernelCustomData() {\n          if (this.currentKernelId === null) {\n            throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");\n          }\n          let data = this.kernelCustomData.get(this.currentKernelId);\n          if (!data) {\n            data = {};\n            this.kernelCustomData.set(this.currentKernelId, data);\n          }\n          return data;\n        }\n        async initialize(env3, adapter) {\n          this.env = env3;\n          const requiredFeatures = [];\n          const deviceDescriptor = {\n            requiredLimits: {\n              maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n              maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n              maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n              maxBufferSize: adapter.limits.maxBufferSize,\n              maxComputeInvocationsPerWorkgroup: adapter.limits.maxComputeInvocationsPerWorkgroup,\n              maxComputeWorkgroupSizeX: adapter.limits.maxComputeWorkgroupSizeX,\n              maxComputeWorkgroupSizeY: adapter.limits.maxComputeWorkgroupSizeY,\n              maxComputeWorkgroupSizeZ: adapter.limits.maxComputeWorkgroupSizeZ\n            },\n            requiredFeatures\n          };\n          if (adapter.features.has("chromium-experimental-timestamp-query-inside-passes")) {\n            requiredFeatures.push("chromium-experimental-timestamp-query-inside-passes");\n          } else if (adapter.features.has("timestamp-query")) {\n            requiredFeatures.push("timestamp-query");\n          }\n          if (adapter.features.has("shader-f16")) {\n            requiredFeatures.push("shader-f16");\n          }\n          this.device = await adapter.requestDevice(deviceDescriptor);\n          this.gpuDataManager = createGpuDataManager(this);\n          this.programManager = new ProgramManager(this);\n          this.kernels = /* @__PURE__ */ new Map();\n          this.kernelPersistentData = /* @__PURE__ */ new Map();\n          this.kernelCustomData = /* @__PURE__ */ new Map();\n          configureLogger(env3.logLevel, !!env3.debug);\n          this.device.onuncapturederror = (ev) => {\n            if (ev.error instanceof GPUValidationError) {\n              console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n            }\n          };\n          Object.defineProperty(this.env.webgpu, "device", { value: this.device });\n          this.setQueryType();\n        }\n        dispose() {\n          if (typeof this.querySet !== "undefined") {\n            this.querySet.destroy();\n          }\n          this.gpuDataManager.dispose();\n        }\n        getCommandEncoder() {\n          if (!this.commandEncoder) {\n            this.commandEncoder = this.device.createCommandEncoder();\n            this.setQueryType();\n            if (this.queryType !== "none" && typeof this.querySet === "undefined") {\n              this.querySet = this.device.createQuerySet({\n                type: "timestamp",\n                count: this.maxDispatchNumber * 2\n              });\n              this.queryResolveBuffer = this.device.createBuffer(\n                // eslint-disable-next-line no-bitwise\n                { size: this.maxDispatchNumber * 2 * 8, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE }\n              );\n            }\n          }\n          return this.commandEncoder;\n        }\n        getComputePassEncoder() {\n          if (!this.computePassEncoder) {\n            const computePassDescriptor = {};\n            if (this.queryType === "at-passes") {\n              computePassDescriptor.timestampWrites = {\n                querySet: this.querySet,\n                beginningOfPassWriteIndex: this.pendingDispatchNumber * 2,\n                endOfPassWriteIndex: this.pendingDispatchNumber * 2 + 1\n              };\n            }\n            this.computePassEncoder = this.getCommandEncoder().beginComputePass(computePassDescriptor);\n          }\n          return this.computePassEncoder;\n        }\n        endComputePass() {\n          if (this.computePassEncoder) {\n            this.computePassEncoder.end();\n            this.computePassEncoder = null;\n          }\n        }\n        flush() {\n          if (!this.commandEncoder) {\n            return;\n          }\n          TRACE_FUNC_BEGIN();\n          this.endComputePass();\n          let queryReadBuffer;\n          if (this.queryType !== "none") {\n            this.commandEncoder.resolveQuerySet(\n              this.querySet,\n              0,\n              this.pendingDispatchNumber * 2,\n              this.queryResolveBuffer,\n              0\n            );\n            queryReadBuffer = this.device.createBuffer(\n              // eslint-disable-next-line no-bitwise\n              { size: this.pendingDispatchNumber * 2 * 8, usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST }\n            );\n            this.pendingQueries.set(queryReadBuffer, this.pendingKernels);\n            this.pendingKernels = [];\n            this.commandEncoder.copyBufferToBuffer(\n              this.queryResolveBuffer,\n              0,\n              queryReadBuffer,\n              0,\n              this.pendingDispatchNumber * 2 * 8\n            );\n          }\n          this.device.queue.submit([this.commandEncoder.finish()]);\n          this.gpuDataManager.refreshPendingBuffers();\n          this.commandEncoder = null;\n          this.pendingDispatchNumber = 0;\n          if (this.queryType !== "none") {\n            void queryReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n              const mappedData = new BigUint64Array(queryReadBuffer.getMappedRange());\n              const pendingKernels = this.pendingQueries.get(queryReadBuffer);\n              for (let i = 0; i < mappedData.length / 2; i++) {\n                const pendingKernelInfo = pendingKernels[i];\n                const kernelId = pendingKernelInfo.kernelId;\n                const kernelInfo = this.kernels.get(kernelId);\n                const kernelType = kernelInfo.kernelType;\n                const kernelName = kernelInfo.kernelName;\n                const programName = pendingKernelInfo.programName;\n                const inputTensorViews = pendingKernelInfo.inputTensorViews;\n                const outputTensorViews = pendingKernelInfo.outputTensorViews;\n                const startTimeU64 = mappedData[i * 2];\n                const endTimeU64 = mappedData[i * 2 + 1];\n                if (typeof this.queryTimeBase === "undefined") {\n                  this.queryTimeBase = startTimeU64;\n                }\n                const startTime = Number(startTimeU64 - this.queryTimeBase);\n                const endTime = Number(endTimeU64 - this.queryTimeBase);\n                if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n                  throw new RangeError("incorrect timestamp range");\n                }\n                if (this.env.webgpu.profiling?.ondata) {\n                  this.env.webgpu.profiling.ondata({\n                    version: 1,\n                    inputsMetadata: inputTensorViews.map(\n                      (value) => ({ dims: value.dims, dataType: tensorDataTypeEnumToString(value.dataType) })\n                    ),\n                    outputsMetadata: outputTensorViews.map(\n                      (value) => ({ dims: value.dims, dataType: tensorDataTypeEnumToString(value.dataType) })\n                    ),\n                    kernelId,\n                    kernelType,\n                    kernelName,\n                    programName,\n                    startTime,\n                    endTime\n                  });\n                } else {\n                  let inputShapes = "";\n                  inputTensorViews.forEach((value, i2) => {\n                    inputShapes += `input[${i2}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n                  });\n                  let outputShapes = "";\n                  outputTensorViews.forEach((value, i2) => {\n                    outputShapes += `output[${i2}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n                  });\n                  console.log(`[profiling] kernel "${kernelId}|${kernelType}|${kernelName}|${programName}" ${inputShapes}${outputShapes}execution time: ${endTime - startTime} ns`);\n                }\n                TRACE("GPU", `${programName}::${startTimeU64}::${endTimeU64}`);\n              }\n              queryReadBuffer.unmap();\n              this.pendingQueries.delete(queryReadBuffer);\n            });\n          }\n          TRACE_FUNC_END();\n        }\n        /**\n         * run a WebGPU program.\n         * @param program a ProgramInfo instance\n         * @param inputTensorViews a TensorView array. each element represents a value already exists in GPU.\n         * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n         * index to the kernel\'s output.\n         * @param createKernelOutput a callback function that create a value to kernel\'s output with the given index\n         * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n         * or persistent (owned by the current kernel)\n         * @returns a TensorView array representing the result.\n         */\n        run(program, inputTensorViews, outputIndices, createKernelOutput, createIntermediateOutput) {\n          TRACE_FUNC_BEGIN(program.name);\n          const inputDatas = [];\n          for (let i = 0; i < inputTensorViews.length; ++i) {\n            const gpuData = this.gpuDataManager.get(inputTensorViews[i].data);\n            if (!gpuData) {\n              throw new Error(`no GPU data for input: ${inputTensorViews[i].data}`);\n            }\n            inputDatas[i] = gpuData;\n          }\n          const { outputs, dispatchGroup, programUniforms } = program.getRunData(inputTensorViews);\n          const validatedOutputIndices = outputIndices.length === 0 ? outputs.map((_, i) => i) : outputIndices;\n          if (validatedOutputIndices.length !== outputs.length) {\n            throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${outputs.length}.`);\n          }\n          const outputTensorViews = [];\n          const outputDatas = [];\n          for (let i = 0; i < outputs.length; ++i) {\n            if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -3 || validatedOutputIndices[i] >= outputs.length) {\n              throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n            }\n            if (validatedOutputIndices[i] === -3) {\n              continue;\n            }\n            const isTemporary = validatedOutputIndices[i] === -1;\n            const isPersistent = validatedOutputIndices[i] === -2;\n            const tensorView = isTemporary || isPersistent ? createIntermediateOutput(outputs[i].dataType, outputs[i].dims) : createKernelOutput(validatedOutputIndices[i], outputs[i].dataType, outputs[i].dims);\n            const gpuData = this.gpuDataManager.get(tensorView.data);\n            if (!gpuData) {\n              throw new Error(`no GPU data for output: ${tensorView.data}`);\n            }\n            if (isTemporary) {\n              this.temporaryData.push(gpuData);\n            }\n            if (isPersistent) {\n              let persistentData = this.kernelPersistentData.get(this.currentKernelId);\n              if (!persistentData) {\n                persistentData = [];\n                this.kernelPersistentData.set(this.currentKernelId, persistentData);\n              }\n              persistentData.push(gpuData);\n            }\n            outputTensorViews.push(tensorView);\n            outputDatas.push(gpuData);\n          }\n          let uniformBufferBinding;\n          if (programUniforms) {\n            let currentOffset = 0;\n            const offsets = [];\n            programUniforms.forEach((v) => {\n              const data = typeof v.data === "number" ? [v.data] : v.data;\n              if (data.length === 0) {\n                return;\n              }\n              const baseAlignment = data.length <= 2 ? data.length * 4 : 16;\n              currentOffset = Math.ceil(currentOffset / baseAlignment) * baseAlignment;\n              offsets.push(currentOffset);\n              currentOffset += data.length > 4 ? Math.ceil(data.length / 4) * 16 : data.length * 4;\n            });\n            const maxAlignmentOfField = 16;\n            currentOffset = Math.ceil(currentOffset / maxAlignmentOfField) * maxAlignmentOfField;\n            const arrayBuffer = new ArrayBuffer(currentOffset);\n            programUniforms.forEach((v, i) => {\n              const offset = offsets[i];\n              const data = typeof v.data === "number" ? [v.data] : v.data;\n              if (v.type === "int32") {\n                new Int32Array(arrayBuffer, offset, data.length).set(data);\n              } else if (v.type === "uint32") {\n                new Uint32Array(arrayBuffer, offset, data.length).set(data);\n              } else {\n                new Float32Array(arrayBuffer, offset, data.length).set(data);\n              }\n            });\n            const uniformBufferData = (\n              // eslint-disable-next-line no-bitwise\n              this.gpuDataManager.create(currentOffset, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM)\n            );\n            this.device.queue.writeBuffer(uniformBufferData.buffer, 0, arrayBuffer, 0, currentOffset);\n            this.gpuDataManager.release(uniformBufferData.id);\n            uniformBufferBinding = { offset: 0, size: currentOffset, buffer: uniformBufferData.buffer };\n          }\n          const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(dispatchGroup);\n          const is1DimensionDispatch = normalizedDispatchGroup[1] === 1 && normalizedDispatchGroup[2] === 1;\n          const key = getProgramInfoUniqueKey(program, inputTensorViews, is1DimensionDispatch);\n          let artifact = this.programManager.getArtifact(key);\n          if (!artifact) {\n            artifact = this.programManager.build(program, normalizedDispatchGroup);\n            this.programManager.setArtifact(key, artifact);\n            LOG_DEBUG("info", () => `[artifact] key: ${key}, programName: ${program.name}`);\n          }\n          LOG_DEBUG(\n            "info",\n            () => `[ProgramManager] run "${program.name}" (key=${key}) with ${normalizedDispatchGroup[0]}x${normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`\n          );\n          if (this.queryType !== "none") {\n            const pendingKernelInfo = {\n              kernelId: this.currentKernelId,\n              programName: artifact.programInfo.name,\n              inputTensorViews,\n              outputTensorViews\n            };\n            this.pendingKernels.push(pendingKernelInfo);\n          }\n          this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup, uniformBufferBinding);\n          TRACE_FUNC_END(program.name);\n          return outputTensorViews;\n        }\n        upload(gpuDataId, data) {\n          this.gpuDataManager.upload(gpuDataId, data);\n        }\n        memcpy(src, dst) {\n          this.gpuDataManager.memcpy(src, dst);\n        }\n        async download(gpuDataId, getTargetBuffer) {\n          await this.gpuDataManager.download(gpuDataId, getTargetBuffer);\n        }\n        alloc(size) {\n          return this.gpuDataManager.create(size).id;\n        }\n        free(ptr) {\n          return this.gpuDataManager.release(ptr);\n        }\n        createKernel(kernelType, kernelId, attribute, kernelName) {\n          const op = WEBGPU_OP_RESOLVE_RULES.get(kernelType);\n          if (!op) {\n            throw new Error(`kernel not implemented: ${kernelType}`);\n          }\n          const kernelInfo = {\n            kernelType,\n            kernelName,\n            kernelEntry: op[0],\n            attributes: [op[1], attribute]\n          };\n          this.kernels.set(kernelId, kernelInfo);\n        }\n        releaseKernel(kernelId) {\n          const persistentData = this.kernelPersistentData.get(kernelId);\n          if (persistentData) {\n            for (const data of persistentData) {\n              this.gpuDataManager.release(data.id);\n            }\n            this.kernelPersistentData.delete(kernelId);\n          }\n          this.kernelCustomData.delete(kernelId);\n          this.kernels.delete(kernelId);\n        }\n        computeKernel(kernelId, context, errors) {\n          const kernel = this.kernels.get(kernelId);\n          if (!kernel) {\n            throw new Error(`kernel not created: ${kernelId}`);\n          }\n          const kernelType = kernel.kernelType;\n          const kernelName = kernel.kernelName;\n          const kernelEntry = kernel.kernelEntry;\n          const attributes = kernel.attributes;\n          if (this.currentKernelId !== null) {\n            throw new Error(`kernel "[${kernelType}] ${kernelName}" is not allowed to be called recursively`);\n          }\n          this.currentKernelId = kernelId;\n          if (attributes[0]) {\n            attributes[1] = attributes[0](attributes[1]);\n            attributes[0] = void 0;\n          }\n          LOG_DEBUG("info", () => `[WebGPU] Start to run kernel "[${kernelType}] ${kernelName}"...`);\n          const useErrorScope = this.env.debug;\n          this.temporaryData = [];\n          try {\n            if (useErrorScope) {\n              this.device.pushErrorScope("validation");\n            }\n            kernelEntry(context, attributes[1]);\n            return 0;\n          } catch (e) {\n            errors.push(Promise.resolve(`[WebGPU] Kernel "[${kernelType}] ${kernelName}" failed. ${e}`));\n            return 1;\n          } finally {\n            if (useErrorScope) {\n              errors.push(this.device.popErrorScope().then(\n                (err) => err ? `GPU validation error for kernel "[${kernelType}] ${kernelName}": ${err.message}` : null\n              ));\n            }\n            for (const data of this.temporaryData) {\n              this.gpuDataManager.release(data.id);\n            }\n            this.temporaryData = [];\n            this.currentKernelId = null;\n          }\n        }\n        // #region external buffer\n        registerBuffer(sessionId, index, buffer, size) {\n          let sessionInputOutputMapping = this.sessionExternalDataMapping.get(sessionId);\n          if (!sessionInputOutputMapping) {\n            sessionInputOutputMapping = /* @__PURE__ */ new Map();\n            this.sessionExternalDataMapping.set(sessionId, sessionInputOutputMapping);\n          }\n          const previousBuffer = sessionInputOutputMapping.get(index);\n          const id = this.gpuDataManager.registerExternalBuffer(buffer, size, previousBuffer?.[1]);\n          sessionInputOutputMapping.set(index, [id, buffer]);\n          return id;\n        }\n        unregisterBuffers(sessionId) {\n          const sessionInputOutputMapping = this.sessionExternalDataMapping.get(sessionId);\n          if (sessionInputOutputMapping) {\n            sessionInputOutputMapping.forEach((bufferInfo) => this.gpuDataManager.unregisterExternalBuffer(bufferInfo[1]));\n            this.sessionExternalDataMapping.delete(sessionId);\n          }\n        }\n        getBuffer(gpuDataId) {\n          const gpuData = this.gpuDataManager.get(gpuDataId);\n          if (!gpuData) {\n            throw new Error(`no GPU data for buffer: ${gpuDataId}`);\n          }\n          return gpuData.buffer;\n        }\n        createDownloader(gpuBuffer, size, type) {\n          return async () => {\n            const data = await downloadGpuData(this, gpuBuffer, size);\n            return createView(data.buffer, type);\n          };\n        }\n        writeTimestamp(index) {\n          if (this.queryType !== "inside-passes") {\n            return;\n          }\n          this.computePassEncoder.writeTimestamp(this.querySet, index);\n        }\n        setQueryType() {\n          this.queryType = "none";\n          if (this.env.webgpu.profiling?.mode === "default" || this.env.wasm.trace) {\n            if (this.device.features.has("chromium-experimental-timestamp-query-inside-passes")) {\n              this.queryType = "inside-passes";\n            } else if (this.device.features.has("timestamp-query")) {\n              this.queryType = "at-passes";\n            }\n          }\n        }\n        // #endregion\n      };\n    }\n  });\n\n  // web/lib/wasm/jsep/init.ts\n  var init_exports = {};\n  __export(init_exports, {\n    init: () => init\n  });\n  var TensorViewImpl, ComputeContextImpl, init;\n  var init_init = __esm({\n    "web/lib/wasm/jsep/init.ts"() {\n      "use strict";\n      init_wasm_common();\n      init_backend_webgpu();\n      init_log();\n      init_util();\n      TensorViewImpl = class _TensorViewImpl {\n        constructor(module, dataType, data, dims) {\n          this.module = module;\n          this.dataType = dataType;\n          this.data = data;\n          this.dims = dims;\n        }\n        getFloat32Array() {\n          if (this.dataType !== 1 /* float */) {\n            throw new Error("Invalid data type");\n          }\n          const elementCount = ShapeUtil.size(this.dims);\n          return elementCount === 0 ? new Float32Array() : new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\n        }\n        getBigInt64Array() {\n          if (this.dataType !== 7 /* int64 */) {\n            throw new Error("Invalid data type");\n          }\n          const elementCount = ShapeUtil.size(this.dims);\n          return elementCount === 0 ? new BigInt64Array() : new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\n        }\n        getInt32Array() {\n          if (this.dataType !== 6 /* int32 */) {\n            throw new Error("Invalid data type");\n          }\n          const elementCount = ShapeUtil.size(this.dims);\n          return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\n        }\n        reshape(newDims) {\n          if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n            throw new Error("Invalid new shape");\n          }\n          return new _TensorViewImpl(this.module, this.dataType, this.data, newDims);\n        }\n      };\n      ComputeContextImpl = class {\n        constructor(module, backend, contextDataOffset) {\n          this.module = module;\n          this.backend = backend;\n          this.customDataOffset = 0;\n          this.customDataSize = 0;\n          const heapU32 = module.HEAPU32;\n          let dataIndex = contextDataOffset >>> 2;\n          this.opKernelContext = heapU32[dataIndex++];\n          const inputCount = heapU32[dataIndex++];\n          this.outputCount = heapU32[dataIndex++];\n          this.customDataOffset = heapU32[dataIndex++];\n          this.customDataSize = heapU32[dataIndex++];\n          const inputs = [];\n          for (let i = 0; i < inputCount; i++) {\n            const dataType = heapU32[dataIndex++];\n            const data = heapU32[dataIndex++];\n            const dim = heapU32[dataIndex++];\n            const dims = [];\n            for (let d = 0; d < dim; d++) {\n              dims.push(heapU32[dataIndex++]);\n            }\n            inputs.push(new TensorViewImpl(module, dataType, data, dims));\n          }\n          this.inputs = inputs;\n        }\n        get kernelCustomData() {\n          return this.backend.currentKernelCustomData;\n        }\n        get customDataBuffer() {\n          return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n        }\n        compute(program, inputsOutputsMapping) {\n          const mappedInputs = inputsOutputsMapping?.inputs?.map((i) => typeof i === "number" ? this.inputs[i] : i) ?? this.inputs;\n          const outputIndices = inputsOutputsMapping?.outputs ?? [];\n          const createKernelOutput = (index, dataType, dims) => new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n          const createTemporaryOutput = (dataType, dims) => {\n            const elementSize = getTensorElementSize(dataType);\n            if (!elementSize) {\n              throw new Error(`Unsupported data type: ${dataType}`);\n            }\n            const bufferSize = elementSize * ShapeUtil.size(dims);\n            return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n          };\n          return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n        }\n        output(index, dims) {\n          const stack = this.module.stackSave();\n          try {\n            const data = this.module.stackAlloc(\n              (1 + dims.length) * 4\n              /* sizeof(size_t) */\n            );\n            let offset = data >> 2;\n            this.module.HEAPU32[offset++] = dims.length;\n            for (let i = 0; i < dims.length; i++) {\n              this.module.HEAPU32[offset++] = dims[i];\n            }\n            return this.module._JsepOutput(this.opKernelContext, index, data);\n          } catch (e) {\n            throw new Error(\n              `Failed to generate kernel\'s output[${index}] with dims [${dims}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${e}`\n            );\n          } finally {\n            this.module.stackRestore(stack);\n          }\n        }\n      };\n      init = async (module, env3, gpuAdapter) => {\n        const jsepInit = module.jsepInit;\n        if (!jsepInit) {\n          throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");\n        }\n        const backend = new WebGpuBackend();\n        await backend.initialize(env3, gpuAdapter);\n        jsepInit(\n          // backend\n          backend,\n          // jsepAlloc()\n          (size) => backend.alloc(size),\n          // jsepFree()\n          (ptr) => backend.free(ptr),\n          // jsepCopy(src, dst, size, isSourceGpu)\n          (src, dst, size, isSourceGpu = false) => {\n            if (isSourceGpu) {\n              LOG_DEBUG("verbose", () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n              backend.memcpy(src, dst);\n            } else {\n              LOG_DEBUG("verbose", () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n              const data = module.HEAPU8.subarray(src >>> 0, (src >>> 0) + size);\n              backend.upload(dst, data);\n            }\n          },\n          // jsepCopyAsync(src, dst, size)\n          async (gpuDataId, dataOffset, size) => {\n            LOG_DEBUG(\n              "verbose",\n              () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`\n            );\n            await backend.download(\n              gpuDataId,\n              () => module.HEAPU8.subarray(dataOffset >>> 0, (dataOffset >>> 0) + size)\n            );\n          },\n          // jsepCreateKernel\n          (kernelType, kernelId, attribute) => backend.createKernel(kernelType, kernelId, attribute, module.UTF8ToString(module._JsepGetNodeName(kernelId))),\n          // jsepReleaseKernel\n          (kernel) => backend.releaseKernel(kernel),\n          // jsepRun\n          (kernel, contextDataOffset, sessionHandle, errors) => {\n            LOG_DEBUG(\n              "verbose",\n              () => `[WebGPU] jsepRun: sessionHandle=${sessionHandle}, kernel=${kernel}, contextDataOffset=${contextDataOffset}`\n            );\n            const context = new ComputeContextImpl(module, backend, contextDataOffset);\n            return backend.computeKernel(kernel, context, errors);\n          }\n        );\n      };\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (false) {\n    ortWasmFactory = null;\n  } else {\n    ortWasmFactory = false ? null : require_ort_wasm_simd_jsep();\n  }\n  var ortWasmFactoryThreaded = true ? false ? null : require_ort_wasm_simd_threaded_jsep() : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = (numThreads) => {\n    if (numThreads === 1) {\n      return false;\n    }\n    if (typeof SharedArrayBuffer === "undefined") {\n      if (typeof self !== "undefined" && !self.crossOriginIsolated) {\n        console.warn(\n          "env.wasm.numThreads is set to " + numThreads + ", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."\n        );\n      }\n      return false;\n    }\n    if (typeof process !== "undefined" && process.versions && process.versions.node) {\n      console.warn(\n        "env.wasm.numThreads is set to " + numThreads + ", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios."\n      );\n    }\n    try {\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (false) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = isMultiThreadSupported(numThreads);\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (true) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        config.numThreads = numThreads;\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  init_wasm_common();\n\n  // web/lib/wasm/wasm-utils-load-file.ts\n  init_fs();\n\n  // nodejs-ignore:node:fs/promises\n  var readFile2 = void 0;\n\n  // web/lib/wasm/wasm-utils-load-file.ts\n  var loadFile = async (file) => {\n    if (typeof file === "string") {\n      if (typeof process !== "undefined" && process.versions && process.versions.node) {\n        try {\n          return new Uint8Array(await readFile2(file));\n        } catch (e) {\n          if (e.code === "ERR_FS_FILE_TOO_LARGE") {\n            const stream = createReadStream(file);\n            const chunks = [];\n            for await (const chunk of stream) {\n              chunks.push(chunk);\n            }\n            return new Uint8Array(Buffer.concat(chunks));\n          }\n          throw e;\n        }\n      } else {\n        const response = await fetch(file);\n        if (!response.ok) {\n          throw new Error(`failed to load external data file: ${file}`);\n        }\n        const contentLengthHeader = response.headers.get("Content-Length");\n        const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n        if (fileSize < 1073741824) {\n          return new Uint8Array(await response.arrayBuffer());\n        } else {\n          if (!response.body) {\n            throw new Error(`failed to load external data file: ${file}, no response body.`);\n          }\n          const reader = response.body.getReader();\n          let buffer;\n          try {\n            buffer = new ArrayBuffer(fileSize);\n          } catch (e) {\n            if (e instanceof RangeError) {\n              const pages = Math.ceil(fileSize / 65536);\n              buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;\n            } else {\n              throw e;\n            }\n          }\n          let offset = 0;\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n              break;\n            }\n            const chunkSize = value.byteLength;\n            const chunk = new Uint8Array(buffer, offset, chunkSize);\n            chunk.set(value);\n            offset += chunkSize;\n          }\n          return new Uint8Array(buffer, 0, fileSize);\n        }\n      }\n    } else if (file instanceof Blob) {\n      return new Uint8Array(await file.arrayBuffer());\n    } else if (file instanceof Uint8Array) {\n      return file;\n    } else {\n      return new Uint8Array(file);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env3) => {\n    initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));\n  };\n  var initEp = async (env3, epName) => {\n    if (epName === "webgpu") {\n      if (typeof navigator === "undefined" || !navigator.gpu) {\n        throw new Error("WebGPU is not supported in current environment");\n      }\n      const adapter = await navigator.gpu.requestAdapter();\n      if (!adapter) {\n        throw new Error(\n          \'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\'\n        );\n      }\n      if (!env3.wasm.simd) {\n        throw new Error(\n          "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"\n        );\n      }\n      const initJsep = (init_init(), __toCommonJS(init_exports)).init;\n      await initJsep(getInstance(), env3, adapter);\n    }\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var copyFromExternalBuffer = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSession = async (modelData, options) => {\n    let modelDataOffset, modelDataLength;\n    const wasm2 = getInstance();\n    if (Array.isArray(modelData)) {\n      [modelDataOffset, modelDataLength] = modelData;\n    } else if (modelData.buffer === wasm2.HEAPU8.buffer) {\n      [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n    } else {\n      [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n    }\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      if (options?.externalData && wasm2.mountExternalData) {\n        const loadingPromises = [];\n        for (const file of options.externalData) {\n          const path = typeof file === "string" ? file : file.path;\n          loadingPromises.push(loadFile(typeof file === "string" ? file : file.data).then((data) => {\n            wasm2.mountExternalData(path, data);\n          }));\n        }\n        await Promise.all(loadingPromises);\n      }\n      sessionHandle = wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (true) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (outputPreferredLocations.some((l) => l === "gpu-buffer")) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelDataOffset);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      wasm2.unmountExternalData?.();\n    }\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (ioBindingState) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (ioBindingState) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    const { type, in: message } = ev.data;\n    try {\n      switch (type) {\n        case "init-wasm":\n          initializeWebAssembly(message.wasm).then(\n            () => {\n              initRuntime(message).then(\n                () => {\n                  postMessage({ type });\n                },\n                (err) => {\n                  postMessage({ type, err });\n                }\n              );\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        case "init-ep": {\n          const { epName, env: env3 } = message;\n          initEp(env3, epName).then(\n            () => {\n              postMessage({ type });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "copy-from": {\n          const { buffer } = message;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({ type, out: bufferData });\n          break;\n        }\n        case "create": {\n          const { model, options } = message;\n          createSession(model, options).then(\n            (sessionMetadata) => {\n              postMessage({ type, out: sessionMetadata });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "release":\n          releaseSession(message);\n          postMessage({ type });\n          break;\n        case "run": {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = message;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== "cpu")) {\n                postMessage({ type, err: "Proxy does not support non-cpu tensor location." });\n              } else {\n                postMessage(\n                  { type, out: outputs },\n                  extractTransferableBuffers(outputs)\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "end-profiling":\n          endProfiling(message);\n          postMessage({ type });\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({ type, err });\n    }\n  };\n})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n//# sourceMappingURL=data:application/json;base64,\n'}}),isProxy,proxyWorker,initializing2,initialized2,aborted2,initWasmCallbacks,queuedCallbacks,enqueueCallbacks,ensureWorker,onProxyWorkerMessage,scriptSrc,initializeWebAssemblyAndOrtRuntime,initializeOrtEp,copyFromExternalBuffer2,createSession2,releaseSession2,run2,endProfiling2,init_proxy_wrapper=__esm({"web/lib/wasm/proxy-wrapper.ts"(){init_esm(),init_wasm_core_impl(),init_wasm_factory(),isProxy=()=>!!env2.wasm.proxy&&"undefined"!=typeof document,initializing2=!1,initialized2=!1,aborted2=!1,queuedCallbacks=new Map,enqueueCallbacks=(t,e)=>{const n=queuedCallbacks.get(t);n?n.push(e):queuedCallbacks.set(t,[e])},ensureWorker=()=>{if(initializing2||!initialized2||aborted2||!proxyWorker)throw new Error("worker not ready")},onProxyWorkerMessage=t=>{switch(t.data.type){case"init-wasm":initializing2=!1,t.data.err?(aborted2=!0,initWasmCallbacks[1](t.data.err)):(initialized2=!0,initWasmCallbacks[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{const e=queuedCallbacks.get(t.data.type);t.data.err?e.shift()[1](t.data.err):e.shift()[0](t.data.out);break}}},scriptSrc="undefined"!=typeof document?document?.currentScript?.src:void 0,initializeWebAssemblyAndOrtRuntime=async()=>{if(!initialized2){if(initializing2)throw new Error("multiple calls to 'initWasm()' detected.");if(aborted2)throw new Error("previous call to 'initWasm()' failed.");if(initializing2=!0,isProxy())return void 0===env2.wasm.wasmPaths&&scriptSrc&&0!==scriptSrc.indexOf("blob:")&&(env2.wasm.wasmPaths=scriptSrc.substr(0,+scriptSrc.lastIndexOf("/")+1)),new Promise(((t,e)=>{proxyWorker?.terminate();const n=URL.createObjectURL(new Blob([require_main()],{type:"text/javascript"}));(proxyWorker=new Worker(n,{name:"ort-wasm-proxy-worker"})).onerror=t=>e(t),proxyWorker.onmessage=onProxyWorkerMessage,URL.revokeObjectURL(n),initWasmCallbacks=[t,e];const B={type:"init-wasm",in:env2};proxyWorker.postMessage(B)}));try{await initializeWebAssembly(env2.wasm),await initRuntime(env2),initialized2=!0}catch(t){throw aborted2=!0,t}finally{initializing2=!1}}},initializeOrtEp=async t=>{if(isProxy())return ensureWorker(),new Promise(((e,n)=>{enqueueCallbacks("init-ep",[e,n]);const B={type:"init-ep",in:{epName:t,env:env2}};proxyWorker.postMessage(B)}));await initEp(env2,t)},copyFromExternalBuffer2=async t=>isProxy()?(ensureWorker(),new Promise(((e,n)=>{enqueueCallbacks("copy-from",[e,n]);const B={type:"copy-from",in:{buffer:t}};proxyWorker.postMessage(B,[t.buffer])}))):copyFromExternalBuffer(t),createSession2=async(t,e)=>{if(isProxy()){if(e?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return ensureWorker(),new Promise(((n,B)=>{enqueueCallbacks("create",[n,B]);const s={type:"create",in:{model:t,options:e}},F=[];t instanceof Uint8Array&&F.push(t.buffer),proxyWorker.postMessage(s,F)}))}return createSession(t,e)},releaseSession2=async t=>{if(isProxy())return ensureWorker(),new Promise(((e,n)=>{enqueueCallbacks("release",[e,n]);const B={type:"release",in:t};proxyWorker.postMessage(B)}));releaseSession(t)},run2=async(t,e,n,B,s,F)=>{if(isProxy()){if(n.some((t=>"cpu"!==t[3])))throw new Error("input tensor on GPU is not supported for proxy.");if(s.some((t=>t)))throw new Error("pre-allocated output tensor is not supported for proxy.");return ensureWorker(),new Promise(((s,Q)=>{enqueueCallbacks("run",[s,Q]);const U=n,i={type:"run",in:{sessionId:t,inputIndices:e,inputs:U,outputIndices:B,options:F}};proxyWorker.postMessage(i,extractTransferableBuffers(U))}))}return run(t,e,n,B,s,F)},endProfiling2=async t=>{if(isProxy())return ensureWorker(),new Promise(((e,n)=>{enqueueCallbacks("end-profiling",[e,n]);const B={type:"end-profiling",in:t};proxyWorker.postMessage(B)}));endProfiling(t)}}}),encodeTensorMetadata,decodeTensorMetadata,OnnxruntimeWebAssemblySessionHandler,init_session_handler_inference2=__esm({"web/lib/wasm/session-handler-inference.ts"(){init_esm(),init_proxy_wrapper(),init_wasm_common(),init_wasm_utils_load_file(),encodeTensorMetadata=(t,e)=>{switch(t.location){case"cpu":return[t.type,t.dims,t.data,"cpu"];case"gpu-buffer":return[t.type,t.dims,{gpuBuffer:t.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${t.location} for ${e()}`)}},decodeTensorMetadata=t=>{switch(t[3]){case"cpu":return new Tensor2(t[0],t[2],t[1]);case"gpu-buffer":{const e=t[0];if(!isGpuBufferSupportedType(e))throw new Error(`not supported data type: ${e} for deserializing GPU tensor`);const{gpuBuffer:n,download:B,dispose:s}=t[2];return Tensor2.fromGpuBuffer(n,{dataType:e,dims:t[1],download:B,dispose:s})}default:throw new Error(`invalid data location: ${t[3]}`)}},OnnxruntimeWebAssemblySessionHandler=class{async fetchModelAndCopyToWasmMemory(t){return copyFromExternalBuffer2(await loadFile(t))}async loadModel(t,e){let n;TRACE_FUNC_BEGIN(),n="string"==typeof t?"undefined"!=typeof process&&process.versions&&process.versions.node?await loadFile(t):await this.fetchModelAndCopyToWasmMemory(t):t,[this.sessionId,this.inputNames,this.outputNames]=await createSession2(n,e),TRACE_FUNC_END()}async dispose(){return releaseSession2(this.sessionId)}async run(t,e,n){TRACE_FUNC_BEGIN();const B=[],s=[];Object.entries(t).forEach((t=>{const e=t[0],n=t[1],F=this.inputNames.indexOf(e);if(-1===F)throw new Error(`invalid input '${e}'`);B.push(n),s.push(F)}));const F=[],Q=[];Object.entries(e).forEach((t=>{const e=t[0],n=t[1],B=this.outputNames.indexOf(e);if(-1===B)throw new Error(`invalid output '${e}'`);F.push(n),Q.push(B)}));const U=B.map(((t,e)=>encodeTensorMetadata(t,(()=>`input "${this.inputNames[s[e]]}"`)))),i=F.map(((t,e)=>t?encodeTensorMetadata(t,(()=>`output "${this.outputNames[Q[e]]}"`)):null)),a=await run2(this.sessionId,s,U,Q,i,n),l={};for(let t=0;t<a.length;t++)l[this.outputNames[Q[t]]]=F[t]??decodeTensorMetadata(a[t]);return TRACE_FUNC_END(),l}startProfiling(){}endProfiling(){endProfiling2(this.sessionId)}}}}),initializeFlags,OnnxruntimeWebAssemblyBackend,init_backend_wasm=__esm({"web/lib/backend-wasm.ts"(){init_node_os(),init_esm(),init_proxy_wrapper(),init_session_handler_inference2(),initializeFlags=()=>{if(("number"!=typeof env2.wasm.initTimeout||env2.wasm.initTimeout<0)&&(env2.wasm.initTimeout=0),"boolean"!=typeof env2.wasm.simd&&(env2.wasm.simd=!0),"boolean"!=typeof env2.wasm.proxy&&(env2.wasm.proxy=!1),"boolean"!=typeof env2.wasm.trace&&(env2.wasm.trace=!1),"number"!=typeof env2.wasm.numThreads||!Number.isInteger(env2.wasm.numThreads)||env2.wasm.numThreads<=0){("undefined"!=typeof self&&!self.crossOriginIsolated||"undefined"!=typeof process&&process.versions&&process.versions.node)&&(env2.wasm.numThreads=1);const t="undefined"==typeof navigator?cpus().length:navigator.hardwareConcurrency;env2.wasm.numThreads=Math.min(4,Math.ceil((t||1)/2))}},OnnxruntimeWebAssemblyBackend=class{async init(t){initializeFlags(),await initializeWebAssemblyAndOrtRuntime(),await initializeOrtEp(t)}async createInferenceSessionHandler(t,e){const n=new OnnxruntimeWebAssemblySessionHandler;return await n.loadModel(t,e),Promise.resolve(n)}}}}),backend_wasm_inference_exports={},wasmBackend;__export(backend_wasm_inference_exports,{wasmBackend:()=>wasmBackend});var init_backend_wasm_inference=__esm({"web/lib/backend-wasm-inference.ts"(){init_backend_wasm(),wasmBackend=new OnnxruntimeWebAssemblyBackend}}),lib_exports={};__export(lib_exports,{InferenceSession:()=>InferenceSession2,TRACE:()=>TRACE,TRACE_FUNC_BEGIN:()=>TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>TRACE_FUNC_END,Tensor:()=>Tensor2,TrainingSession:()=>TrainingSession2,default:()=>lib_default,env:()=>env2,registerBackend:()=>registerBackend}),init_esm(),init_esm(),init_esm();var version2="1.17.1",lib_default=esm_exports;{const t=(init_backend_onnxjs(),__toCommonJS(backend_onnxjs_exports)).onnxjsBackend;registerBackend("webgl",t,-10)}{const t=(init_backend_wasm_inference(),__toCommonJS(backend_wasm_inference_exports)).wasmBackend;registerBackend("webgpu",t,5),registerBackend("cpu",t,10),registerBackend("wasm",t,10),registerBackend("webnn",t,9)}return Object.defineProperty(env2.versions,"web",{value:version2,enumerable:!0}),__toCommonJS(lib_exports)})();