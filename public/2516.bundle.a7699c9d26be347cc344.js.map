{"version":3,"file":"2516.bundle.a7699c9d26be347cc344.js","mappings":"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","sources":["webpack:///../../../node_modules/@itk-wasm/morphological-contour-interpolation/dist/version.js","webpack:///../../../node_modules/@itk-wasm/morphological-contour-interpolation/dist/pipelines-base-url.js","webpack:///../../../node_modules/@itk-wasm/morphological-contour-interpolation/dist/pipeline-worker-url.js","webpack:///../../../node_modules/@itk-wasm/morphological-contour-interpolation/dist/default-web-worker.js","webpack:///../../../node_modules/@itk-wasm/morphological-contour-interpolation/dist/morphological-contour-interpolation.js","webpack:///../../../node_modules/itk-wasm/dist/version.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/pixel-types.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/image-type.js","webpack:///../../../node_modules/itk-wasm/dist/set-matrix-element.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/image.js","webpack:///../../../node_modules/itk-wasm/dist/copy-image.js","webpack:///../../../node_modules/itk-wasm/dist/image-shared-buffer-or-copy.js","webpack:///../../../node_modules/itk-wasm/dist/stack-images.js","webpack:///../../../node_modules/itk-wasm/dist/get-file-extension.js","webpack:///../../../node_modules/itk-wasm/dist/get-matrix-element.js","webpack:///../../../node_modules/itk-wasm/dist/cast-image.js","webpack:///../../../node_modules/itk-wasm/dist/worker-pool/worker-pool.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/mesh-type.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/mesh.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/poly-data-type.js","webpack:///../../../node_modules/itk-wasm/dist/interface-types/poly-data.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/create-web-worker.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/create-worker-proxy.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/internal/load-emscripten-module-main-thread.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/pipelines-base-url.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/pipeline-worker-url.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/run-pipeline.js","webpack:///../../../node_modules/wasm-feature-detect/dist/esm/index.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/default-web-worker.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-dicom-tags.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-dicom-tags-array-buffer.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-dicom-file-series.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-dicom-array-buffer-series.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/mesh-to-poly-data.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/poly-data-to-mesh.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-array-buffer.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-blob.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-file.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-image-file-series.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-mesh-array-buffer.js","webpack:///../../../node_modules/itk-wasm/dist/deprecated/read-mesh-file.js"],"sourcesContent":["const version = \"1.1.0\";\nexport default version;\n//# sourceMappingURL=version.js.map","// Generated file. To retain edits, remove this comment.\n// Generated file. To retain edits, remove this comment.\nimport { getPipelinesBaseUrl as itkWasmGetPipelinesBaseUrl } from 'itk-wasm';\nimport version from './version.js';\nlet pipelinesBaseUrl;\nlet defaultPipelinesBaseUrl = `https://cdn.jsdelivr.net/npm/@itk-wasm/morphological-contour-interpolation@${version}/dist/pipelines`;\nexport function setPipelinesBaseUrl(baseUrl) {\n    pipelinesBaseUrl = baseUrl;\n}\nexport function getPipelinesBaseUrl() {\n    if (typeof pipelinesBaseUrl !== 'undefined') {\n        return pipelinesBaseUrl;\n    }\n    const itkWasmPipelinesBaseUrl = itkWasmGetPipelinesBaseUrl();\n    if (typeof itkWasmPipelinesBaseUrl !== 'undefined') {\n        return itkWasmPipelinesBaseUrl;\n    }\n    return defaultPipelinesBaseUrl;\n}\n//# sourceMappingURL=pipelines-base-url.js.map","// Generated file. To retain edits, remove this comment.\n// Generated file. To retain edits, remove this comment.\nimport { getPipelineWorkerUrl as itkWasmGetPipelineWorkerUrl } from 'itk-wasm';\nlet pipelineWorkerUrl;\n// Use the version shipped with an app's bundler\nconst defaultPipelineWorkerUrl = null;\nexport function setPipelineWorkerUrl(workerUrl) {\n    pipelineWorkerUrl = workerUrl;\n}\nexport function getPipelineWorkerUrl() {\n    if (typeof pipelineWorkerUrl !== 'undefined') {\n        return pipelineWorkerUrl;\n    }\n    const itkWasmPipelineWorkerUrl = itkWasmGetPipelineWorkerUrl();\n    if (typeof itkWasmPipelineWorkerUrl !== 'undefined') {\n        return itkWasmPipelineWorkerUrl;\n    }\n    return defaultPipelineWorkerUrl;\n}\n//# sourceMappingURL=pipeline-worker-url.js.map","// Generated file. To retain edits, remove this comment.\nimport { getDefaultWebWorker as itkWasmGetDefaultWebWorker, createWebWorker } from 'itk-wasm';\nimport { getPipelineWorkerUrl } from './pipeline-worker-url.js';\nlet defaultWebWorker = null;\nasync function createNewWorker() {\n    const pipelineWorkerUrl = getPipelineWorkerUrl();\n    const pipelineWorkerUrlString = typeof pipelineWorkerUrl !== 'string' && typeof pipelineWorkerUrl?.href !== 'undefined' ? pipelineWorkerUrl.href : pipelineWorkerUrl;\n    defaultWebWorker = await createWebWorker(pipelineWorkerUrlString);\n}\nexport function setDefaultWebWorker(webWorker) {\n    defaultWebWorker = webWorker;\n}\nexport async function getDefaultWebWorker() {\n    if (defaultWebWorker !== null) {\n        if (defaultWebWorker.terminated) {\n            await createNewWorker();\n        }\n        return defaultWebWorker;\n    }\n    const itkWasmDefaultWebWorker = itkWasmGetDefaultWebWorker();\n    if (itkWasmDefaultWebWorker !== null) {\n        return itkWasmDefaultWebWorker;\n    }\n    await createNewWorker();\n    return defaultWebWorker;\n}\n//# sourceMappingURL=default-web-worker.js.map","// Generated file. To retain edits, remove this comment.\nimport { InterfaceTypes, runPipeline } from 'itk-wasm';\nimport { getPipelinesBaseUrl } from './pipelines-base-url.js';\nimport { getPipelineWorkerUrl } from './pipeline-worker-url.js';\nimport { getDefaultWebWorker } from './default-web-worker.js';\n/**\n * Interpolates contours between slices.\n *\n * @param {Image} inputImage - The input image\n * @param {MorphologicalContourInterpolationOptions} options - options object\n *\n * @returns {Promise<MorphologicalContourInterpolationResult>} - result object\n */\nasync function morphologicalContourInterpolation(inputImage, options = {}) {\n    const desiredOutputs = [\n        { type: InterfaceTypes.Image },\n    ];\n    const inputs = [\n        { type: InterfaceTypes.Image, data: inputImage },\n    ];\n    const args = [];\n    // Inputs\n    const inputImageName = '0';\n    args.push(inputImageName);\n    // Outputs\n    const outputImageName = '0';\n    args.push(outputImageName);\n    // Options\n    args.push('--memory-io');\n    if (options.label) {\n        args.push('--label', options.label.toString());\n    }\n    if (options.axis) {\n        args.push('--axis', options.axis.toString());\n    }\n    if (options.noHeuristicAlignment) {\n        options.noHeuristicAlignment && args.push('--no-heuristic-alignment');\n    }\n    if (options.noUseDistanceTransform) {\n        options.noUseDistanceTransform && args.push('--no-use-distance-transform');\n    }\n    if (options.useCustomSlicePositions) {\n        options.useCustomSlicePositions && args.push('--use-custom-slice-positions');\n    }\n    if (options.noUseExtrapolation) {\n        options.noUseExtrapolation && args.push('--no-use-extrapolation');\n    }\n    if (options.useBallStructuringElement) {\n        options.useBallStructuringElement && args.push('--use-ball-structuring-element');\n    }\n    if (options.labeledSliceIndicesAxis) {\n        args.push('--labeled-slice-indices-axis', options.labeledSliceIndicesAxis.toString());\n    }\n    if (options.labeledSliceIndicesLabel) {\n        args.push('--labeled-slice-indices-label', options.labeledSliceIndicesLabel.toString());\n    }\n    if (options.labeledSliceIndices) {\n        if (options.labeledSliceIndices.length < 1) {\n            throw new Error('\"labeled-slice-indices\" option must have a length > 1');\n        }\n        args.push('--labeled-slice-indices');\n        await Promise.all(options.labeledSliceIndices.map(async (value) => {\n            args.push(value.toString());\n        }));\n    }\n    const pipelinePath = 'morphological-contour-interpolation';\n    let workerToUse = options?.webWorker;\n    if (workerToUse === undefined) {\n        workerToUse = await getDefaultWebWorker();\n    }\n    const { webWorker: usedWebWorker, returnValue, stderr, outputs } = await runPipeline(pipelinePath, args, desiredOutputs, inputs, { pipelineBaseUrl: getPipelinesBaseUrl(), pipelineWorkerUrl: getPipelineWorkerUrl(), webWorker: workerToUse, noCopy: options?.noCopy });\n    if (returnValue !== 0 && stderr !== \"\") {\n        throw new Error(stderr);\n    }\n    const result = {\n        webWorker: usedWebWorker,\n        outputImage: outputs[0]?.data,\n    };\n    return result;\n}\nexport default morphologicalContourInterpolation;\n//# sourceMappingURL=morphological-contour-interpolation.js.map","const version = \"1.0.0-b.165\";\nexport default version;\n//# sourceMappingURL=version.js.map","const PixelTypes = {\n    Unknown: 'Unknown',\n    Scalar: 'Scalar',\n    RGB: 'RGB',\n    RGBA: 'RGBA',\n    Offset: 'Offset',\n    Vector: 'Vector',\n    Point: 'Point',\n    CovariantVector: 'CovariantVector',\n    SymmetricSecondRankTensor: 'SymmetricSecondRankTensor',\n    DiffusionTensor3D: 'DiffusionTensor3D',\n    Complex: 'Complex',\n    FixedArray: 'FixedArray',\n    Array: 'Array',\n    Matrix: 'Matrix',\n    VariableLengthVector: 'VariableLengthVector',\n    VariableSizeMatrix: 'VariableSizeMatrix'\n};\nexport default PixelTypes;\n//# sourceMappingURL=pixel-types.js.map","import IntTypes from './int-types.js';\nimport PixelTypes from './pixel-types.js';\nclass ImageType {\n    dimension;\n    componentType;\n    pixelType;\n    components;\n    constructor(dimension = 2, componentType = IntTypes.UInt8, pixelType = PixelTypes.Scalar, components = 1) {\n        this.dimension = dimension;\n        this.componentType = componentType;\n        this.pixelType = pixelType;\n        this.components = components;\n    }\n}\nexport default ImageType;\n//# sourceMappingURL=image-type.js.map","function setMatrixElement(matrixData, columns, row, column, value) {\n    matrixData[column + row * columns] = value;\n}\nexport default setMatrixElement;\n//# sourceMappingURL=set-matrix-element.js.map","import ImageType from './image-type.js';\nimport setMatrixElement from '../set-matrix-element.js';\nclass Image {\n    imageType;\n    name = 'image';\n    origin;\n    spacing;\n    direction;\n    size;\n    metadata;\n    data;\n    constructor(imageType = new ImageType()) {\n        this.imageType = imageType;\n        const dimension = imageType.dimension;\n        this.origin = new Array(dimension);\n        this.origin.fill(0.0);\n        this.spacing = new Array(dimension);\n        this.spacing.fill(1.0);\n        this.direction = new Float64Array(dimension * dimension);\n        this.direction.fill(0.0);\n        for (let ii = 0; ii < dimension; ii++) {\n            setMatrixElement(this.direction, dimension, ii, ii, 1.0);\n        }\n        this.size = new Array(dimension);\n        this.size.fill(0);\n        this.metadata = new Map();\n        this.data = null;\n    }\n}\nexport default Image;\n//# sourceMappingURL=image.js.map","import Image from './interface-types/image.js';\nfunction copyImage(image) {\n    const copy = new Image(image.imageType);\n    copy.name = image.name;\n    copy.origin = Array.from(image.origin);\n    copy.spacing = Array.from(image.spacing);\n    copy.direction = image.direction.slice();\n    copy.size = Array.from(image.size);\n    if (image.data !== null) {\n        const CTor = image.data.constructor;\n        copy.data = new CTor(image.data.length);\n        if (copy.data != null) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'\n            copy.data.set(image.data, 0);\n        }\n    }\n    return copy;\n}\nexport default copyImage;\n//# sourceMappingURL=copy-image.js.map","import copyImage from './copy-image.js';\nconst haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === 'function';\n/** If SharedArrayBuffer's are available, ensure an itk.Image's buffer is a\n * SharedArrayBuffer. If SharedArrayBuffer's are not available, return a copy.\n * */\nfunction imageSharedBufferOrCopy(image) {\n    if (image.data === null) {\n        return image;\n    }\n    if (haveSharedArrayBuffer) {\n        if (image.data.buffer instanceof SharedArrayBuffer) { // eslint-disable-line\n            return image;\n        }\n        const sharedBuffer = new SharedArrayBuffer(image.data.buffer.byteLength); // eslint-disable-line\n        const CTor = image.data.constructor;\n        const sharedTypedArray = new CTor(sharedBuffer);\n        if (sharedTypedArray !== null) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'.\n            sharedTypedArray.set(image.data, 0);\n        }\n        image.data = sharedTypedArray;\n        return image;\n    }\n    else {\n        return copyImage(image);\n    }\n}\nexport default imageSharedBufferOrCopy;\n//# sourceMappingURL=image-shared-buffer-or-copy.js.map","import Image from './interface-types/image.js';\n/** Join an array of sequential image slabs into a single image */\nfunction stackImages(images) {\n    if (images.length < 1) {\n        throw Error('At least one images is required.');\n    }\n    const firstImage = images[0];\n    if (firstImage.data === null) {\n        throw Error('Image data is null.');\n    }\n    const result = new Image(firstImage.imageType);\n    result.origin = Array.from(firstImage.origin);\n    result.spacing = Array.from(firstImage.spacing);\n    const dimension = result.imageType.dimension;\n    result.direction = firstImage.direction.slice();\n    const stackOn = dimension - 1;\n    result.size = Array.from(firstImage.size);\n    const stackedSize = images.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue.size[stackOn];\n    }, 0);\n    result.size[stackOn] = stackedSize;\n    const dataSize = result.size.reduce((accumulator, currentValue) => { return accumulator * currentValue; }, 1) * result.imageType.components;\n    const CTor = firstImage.data.constructor;\n    result.data = new CTor(dataSize);\n    let offsetBase = result.imageType.components;\n    for (let subIndex = 0; subIndex < result.size.length - 1; subIndex++) {\n        offsetBase *= result.size[subIndex];\n    }\n    let stackIndex = 0;\n    if (result.data != null) {\n        for (let index = 0; index < images.length; index++) {\n            // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'.\n            result.data.set(images[index].data, offsetBase * stackIndex);\n            stackIndex += images[index].size[stackOn];\n        }\n    }\n    else {\n        throw Error('Could not create result image data.');\n    }\n    return result;\n}\nexport default stackImages;\n//# sourceMappingURL=stack-images.js.map","function getFileExtension(filePath) {\n    let extension = filePath.slice((filePath.lastIndexOf('.') - 1 >>> 0) + 2);\n    if (extension.toLowerCase() === 'gz') {\n        const index = filePath.slice(0, -3).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'cbor') {\n        const index = filePath.slice(0, -5).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'zst') {\n        // .iwi.cbor.zstd\n        const index = filePath.slice(0, -10).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    else if (extension.toLowerCase() === 'zip') {\n        const index = filePath.slice(0, -4).lastIndexOf('.');\n        extension = filePath.slice((index - 1 >>> 0) + 2);\n    }\n    return extension;\n}\nexport default getFileExtension;\n//# sourceMappingURL=get-file-extension.js.map","function getMatrixElement(matrixData, columns, row, column) {\n    return matrixData[column + row * columns];\n}\nexport default getMatrixElement;\n//# sourceMappingURL=get-matrix-element.js.map","import Image from './interface-types/image.js';\nimport PixelTypes from './interface-types/pixel-types.js';\nimport IntTypes from './interface-types/int-types.js';\nimport FloatTypes from './interface-types/float-types.js';\n/**\n * Cast an image to another PixelType and/or ComponentType\n *\n * @param {Image} image - The input image\n * @param {CastImageOptions} options - specify the componentType and/or pixelType of the output\n */\nfunction castImage(inputImage, options) {\n    const outputImageType = { ...inputImage.imageType };\n    if (typeof options !== 'undefined' && typeof options.pixelType !== 'undefined') {\n        outputImageType.pixelType = options.pixelType;\n        if (options.pixelType === PixelTypes.Scalar && outputImageType.components !== 1) {\n            throw new Error('Cannot cast multi-component image to a scalar image');\n        }\n    }\n    if (typeof options !== 'undefined' && typeof options.componentType !== 'undefined' && options.componentType !== inputImage.imageType.componentType) {\n        outputImageType.componentType = options.componentType;\n    }\n    const outputImage = new Image(outputImageType);\n    outputImage.name = inputImage.name;\n    outputImage.origin = Array.from(inputImage.origin);\n    outputImage.spacing = Array.from(inputImage.spacing);\n    outputImage.direction = inputImage.direction.slice();\n    outputImage.size = Array.from(inputImage.size);\n    // Deep copy the map\n    outputImage.metadata = new Map(JSON.parse(JSON.stringify(Array.from(inputImage.metadata))));\n    if (inputImage.data !== null) {\n        if (typeof options !== 'undefined' && typeof options.componentType !== 'undefined' && options.componentType !== inputImage.imageType.componentType) {\n            switch (inputImage.imageType.componentType) {\n                case IntTypes.UInt8:\n                case IntTypes.Int8:\n                case IntTypes.UInt16:\n                case IntTypes.Int16:\n                case IntTypes.UInt32:\n                case IntTypes.Int32:\n                case FloatTypes.Float32:\n                case FloatTypes.Float64:\n                    switch (outputImage.imageType.componentType) {\n                        case IntTypes.UInt8:\n                            outputImage.data = new Uint8Array(inputImage.data);\n                            break;\n                        case IntTypes.Int8:\n                            outputImage.data = new Int8Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt16:\n                            outputImage.data = new Uint16Array(inputImage.data);\n                            break;\n                        case IntTypes.Int16:\n                            outputImage.data = new Int16Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt32:\n                            outputImage.data = new Uint32Array(inputImage.data);\n                            break;\n                        case IntTypes.Int32:\n                            outputImage.data = new Int32Array(inputImage.data);\n                            break;\n                        case FloatTypes.Float32:\n                            outputImage.data = new Float32Array(inputImage.data);\n                            break;\n                        case FloatTypes.Float64:\n                            outputImage.data = new Float64Array(inputImage.data);\n                            break;\n                        case IntTypes.UInt64:\n                            outputImage.data = new BigUint64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = BigInt.asIntN(64, BigInt(inputImage.data[idx]));\n                            }\n                            break;\n                        case IntTypes.Int64:\n                            outputImage.data = new BigInt64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = BigInt.asUintN(64, BigInt(inputImage.data[idx]));\n                            }\n                            break;\n                    }\n                    break;\n                case IntTypes.UInt64:\n                case IntTypes.Int64:\n                    switch (outputImage.imageType.componentType) {\n                        case IntTypes.UInt8:\n                            outputImage.data = new Uint8Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int8:\n                            outputImage.data = new Int8Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt16:\n                            outputImage.data = new Uint16Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int16:\n                            outputImage.data = new Int16Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt32:\n                            outputImage.data = new Uint32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.Int32:\n                            outputImage.data = new Int32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case FloatTypes.Float32:\n                            outputImage.data = new Float32Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case FloatTypes.Float64:\n                            outputImage.data = new Float64Array(inputImage.data.length);\n                            for (let idx = 0; idx < outputImage.data.length; idx++) {\n                                outputImage.data[idx] = Number(inputImage.data[idx]);\n                            }\n                            break;\n                        case IntTypes.UInt64:\n                            outputImage.data = new BigUint64Array(inputImage.data);\n                            break;\n                        case IntTypes.Int64:\n                            outputImage.data = new BigInt64Array(inputImage.data);\n                            break;\n                    }\n                    break;\n            }\n        }\n        else {\n            // copy\n            const CTor = inputImage.data.constructor;\n            outputImage.data = new CTor(inputImage.data.length);\n            if (outputImage.data != null) {\n                // @ts-expect-error: error TS2345: Argument of type 'TypedArray' is not assignable to parameter of type 'ArrayLike<number> & ArrayLike<bigint>'\n                outputImage.data.set(inputImage.data, 0);\n            }\n        }\n    }\n    return outputImage;\n}\nexport default castImage;\n//# sourceMappingURL=cast-image.js.map","/* eslint-disable  @typescript-eslint/no-non-null-assertion */\nclass WorkerPool {\n    fcn;\n    workerQueue;\n    runInfo;\n    /*\n     * poolSize is the maximum number of web workers to create in the pool.\n     *\n     * The function, `fcn,` must accept in its last argument an options object with a\n     * `webWorker` property that is a web worker to use for computation. The\n     * function must also return a promise that resolves to an object with the\n     * with the results of the computation and the used worker in the `webWorker`\n     * property.\n     *\n     **/\n    constructor(poolSize, fcn) {\n        this.fcn = fcn;\n        this.workerQueue = new Array(poolSize);\n        this.workerQueue.fill(null);\n        this.runInfo = [];\n    }\n    /*\n     * Run the tasks specified by the arguments in the taskArgsArray that will\n     * be passed to the pool fcn.\n     *\n     * An optional progressCallback will be called with the number of complete\n     * tasks and the total number of tasks as arguments every time a task has\n     * completed.\n     *\n     * Returns an object containing a promise ('promise') to communicate results\n     * as well as an id ('runId') which can be used to cancel any remaining pending\n     * tasks before they complete.\n     */\n    runTasks(taskArgsArray, progressCallback = null) {\n        const info = {\n            taskQueue: [],\n            results: [],\n            addingTasks: false,\n            postponed: false,\n            runningWorkers: 0,\n            index: 0,\n            completedTasks: 0,\n            progressCallback,\n            canceled: false\n        };\n        this.runInfo.push(info);\n        info.index = this.runInfo.length - 1;\n        return {\n            promise: new Promise((resolve, reject) => {\n                info.resolve = resolve;\n                info.reject = reject;\n                info.results = new Array(taskArgsArray.length);\n                info.completedTasks = 0;\n                info.addingTasks = true;\n                taskArgsArray.forEach((taskArg, index) => {\n                    this.addTask(info.index, index, taskArg);\n                });\n                info.addingTasks = false;\n            }),\n            runId: info.index\n        };\n    }\n    terminateWorkers() {\n        for (let index = 0; index < this.workerQueue.length; index++) {\n            const worker = this.workerQueue[index];\n            if (worker != null) {\n                worker.terminate();\n            }\n            this.workerQueue[index] = null;\n        }\n    }\n    cancel(runId) {\n        const info = this.runInfo[runId];\n        if (info !== null && info !== undefined) {\n            info.canceled = true;\n        }\n    }\n    addTask(infoIndex, resultIndex, taskArgs) {\n        const info = this.runInfo[infoIndex];\n        if (info?.canceled === true) {\n            info.reject('Remaining tasks canceled');\n            this.clearTask(info.index);\n            return;\n        }\n        if (this.workerQueue.length > 0) {\n            const worker = this.workerQueue.pop();\n            info.runningWorkers++;\n            taskArgs[taskArgs.length - 1].webWorker = worker;\n            // @ts-expect-error: TS7031: Binding element 'webWorker' implicitly has an 'any' type.\n            this.fcn(...taskArgs).then(({ webWorker, ...result }) => {\n                this.workerQueue.push(webWorker);\n                // Check if this task was canceled while it was getting done\n                if (this.runInfo[infoIndex] !== null) {\n                    info.runningWorkers--;\n                    info.results[resultIndex] = result;\n                    info.completedTasks++;\n                    if (info.progressCallback != null) {\n                        info.progressCallback(info.completedTasks, info.results.length);\n                    }\n                    if (info.taskQueue.length > 0) {\n                        const reTask = info.taskQueue.shift();\n                        this.addTask(infoIndex, reTask[0], reTask[1]);\n                    }\n                    else if (!info.addingTasks && info.runningWorkers === 0) {\n                        const results = info.results;\n                        info.resolve(results);\n                        this.clearTask(info.index);\n                    }\n                }\n                // @ts-expect-error: TS7006: Parameter 'error' implicitly has an 'any' type.\n            }).catch((error) => {\n                info.reject(error);\n                this.clearTask(info.index);\n            });\n        }\n        else {\n            if (info.runningWorkers !== 0 || info.postponed) {\n                // At least one worker is working on these tasks, and it will pick up\n                // the next item in the taskQueue when done.\n                info.taskQueue.push([resultIndex, taskArgs]);\n            }\n            else {\n                // Try again later.\n                info.postponed = true;\n                setTimeout(() => {\n                    info.postponed = false;\n                    this.addTask(info.index, resultIndex, taskArgs);\n                }, 50);\n            }\n        }\n    }\n    clearTask(clearIndex) {\n        this.runInfo[clearIndex].results = [];\n        this.runInfo[clearIndex].taskQueue = [];\n        this.runInfo[clearIndex].progressCallback = null;\n        this.runInfo[clearIndex].canceled = null;\n        this.runInfo[clearIndex].reject = () => { };\n        this.runInfo[clearIndex].resolve = () => { };\n    }\n}\nexport default WorkerPool;\n//# sourceMappingURL=worker-pool.js.map","import IntTypes from './int-types.js';\nimport FloatTypes from './float-types.js';\nimport PixelTypes from './pixel-types.js';\nclass MeshType {\n    dimension;\n    pointComponentType;\n    pointPixelComponentType;\n    pointPixelType;\n    pointPixelComponents;\n    cellComponentType;\n    cellPixelComponentType;\n    cellPixelType;\n    cellPixelComponents;\n    constructor(dimension = 2, pointComponentType = FloatTypes.Float32, pointPixelComponentType = FloatTypes.Float32, pointPixelType = PixelTypes.Scalar, pointPixelComponents = 1, cellComponentType = IntTypes.Int32, cellPixelComponentType = FloatTypes.Float32, cellPixelType = PixelTypes.Scalar, cellPixelComponents = 1) {\n        this.dimension = dimension;\n        this.pointComponentType = pointComponentType;\n        this.pointPixelComponentType = pointPixelComponentType;\n        this.pointPixelType = pointPixelType;\n        this.pointPixelComponents = pointPixelComponents;\n        this.cellComponentType = cellComponentType;\n        this.cellPixelComponentType = cellPixelComponentType;\n        this.cellPixelType = cellPixelType;\n        this.cellPixelComponents = cellPixelComponents;\n    }\n}\nexport default MeshType;\n//# sourceMappingURL=mesh-type.js.map","import MeshType from './mesh-type.js';\nclass Mesh {\n    mt;\n    meshType;\n    name = 'mesh';\n    numberOfPoints;\n    points;\n    numberOfPointPixels;\n    pointData;\n    numberOfCells;\n    cells;\n    cellBufferSize;\n    numberOfCellPixels;\n    cellData;\n    constructor(mt = new MeshType()) {\n        this.mt = mt;\n        this.meshType = mt;\n        this.name = 'mesh';\n        this.numberOfPoints = 0;\n        this.points = null;\n        this.numberOfPointPixels = 0;\n        this.pointData = null;\n        this.numberOfCells = 0;\n        this.cellBufferSize = 0;\n        this.cells = null;\n        this.numberOfCellPixels = 0;\n        this.cellData = null;\n    }\n}\nexport default Mesh;\n//# sourceMappingURL=mesh.js.map","import FloatTypes from './float-types.js';\nimport PixelTypes from './pixel-types.js';\nclass PolyDataType {\n    pointPixelComponentType;\n    pointPixelType;\n    pointPixelComponents;\n    cellPixelComponentType;\n    cellPixelType;\n    cellPixelComponents;\n    constructor(pointPixelComponentType = FloatTypes.Float32, pointPixelType = PixelTypes.Scalar, pointPixelComponents = 1, cellPixelComponentType = FloatTypes.Float32, cellPixelType = PixelTypes.Scalar, cellPixelComponents = 1) {\n        this.pointPixelComponentType = pointPixelComponentType;\n        this.pointPixelType = pointPixelType;\n        this.pointPixelComponents = pointPixelComponents;\n        this.cellPixelComponentType = cellPixelComponentType;\n        this.cellPixelType = cellPixelType;\n        this.cellPixelComponents = cellPixelComponents;\n    }\n}\nexport default PolyDataType;\n//# sourceMappingURL=poly-data-type.js.map","import PolyDataType from './poly-data-type.js';\nclass PolyData {\n    polyDataType;\n    name = 'PolyData';\n    numberOfPoints;\n    points;\n    verticesBufferSize;\n    vertices;\n    linesBufferSize;\n    lines;\n    polygonsBufferSize;\n    polygons;\n    triangleStripsBufferSize;\n    triangleStrips;\n    numberOfPointPixels;\n    pointData;\n    numberOfCellPixels;\n    cellData;\n    constructor(polyDataType = new PolyDataType()) {\n        this.polyDataType = polyDataType;\n        this.polyDataType = polyDataType;\n        this.name = 'PolyData';\n        this.numberOfPoints = 0;\n        this.points = new Float32Array();\n        this.verticesBufferSize = 0;\n        this.vertices = null;\n        this.linesBufferSize = 0;\n        this.lines = null;\n        this.polygonsBufferSize = 0;\n        this.polygons = null;\n        this.triangleStripsBufferSize = 0;\n        this.triangleStrips = null;\n        this.numberOfPointPixels = 0;\n        this.pointData = null;\n        this.numberOfCellPixels = 0;\n        this.cellData = null;\n    }\n}\nexport default PolyData;\n//# sourceMappingURL=poly-data.js.map","import axios from 'axios';\nasync function createWebWorker(pipelineWorkerUrl) {\n    const workerUrl = pipelineWorkerUrl;\n    let worker = null;\n    if (workerUrl === null) {\n        // Use the version built with the bundler\n        //\n        // Bundlers, e.g. WebPack, Vite, Rollup, see these paths at build time\n        worker = new Worker(new URL('./web-workers/itk-wasm-pipeline.worker.js', import.meta.url), { type: 'module' });\n    }\n    else {\n        if (workerUrl.startsWith('http')) {\n            const response = await axios.get(workerUrl, { responseType: 'blob' });\n            const workerObjectUrl = URL.createObjectURL(response.data);\n            worker = new Worker(workerObjectUrl, { type: 'module' });\n        }\n        else {\n            worker = new Worker(workerUrl, { type: 'module' });\n        }\n    }\n    return worker;\n}\nexport default createWebWorker;\n//# sourceMappingURL=create-web-worker.js.map","import * as Comlink from 'comlink';\nimport createWebWorker from './create-web-worker.js';\nfunction workerToWorkerProxy(worker) {\n    const workerProxy = Comlink.wrap(worker);\n    const itkWebWorker = worker;\n    itkWebWorker.terminated = false;\n    itkWebWorker.workerProxy = workerProxy;\n    itkWebWorker.originalTerminate = itkWebWorker.terminate;\n    itkWebWorker.terminate = () => {\n        itkWebWorker.terminated = true;\n        itkWebWorker.workerProxy[Comlink.releaseProxy]();\n        itkWebWorker.originalTerminate();\n    };\n    return { workerProxy, worker: itkWebWorker };\n}\n// Internal function to create a web worker proxy\nasync function createWorkerProxy(existingWorker, pipelineWorkerUrl) {\n    let workerProxy;\n    if (existingWorker != null) {\n        // See if we have a worker promise attached the worker, if so reuse it. This ensures\n        // that we can safely reuse the worker without issues.\n        const itkWebWorker = existingWorker;\n        if (itkWebWorker.workerProxy !== undefined) {\n            workerProxy = itkWebWorker.workerProxy;\n            return { workerProxy, worker: itkWebWorker };\n        }\n        else {\n            return workerToWorkerProxy(existingWorker);\n        }\n    }\n    const worker = await createWebWorker(pipelineWorkerUrl);\n    return workerToWorkerProxy(worker);\n}\nexport default createWorkerProxy;\n//# sourceMappingURL=create-worker-proxy.js.map","import axios from 'axios';\nasync function loadEmscriptenModuleMainThread(moduleRelativePathOrURL, baseUrl) {\n    let modulePrefix = 'unknown';\n    if (typeof moduleRelativePathOrURL !== 'string') {\n        modulePrefix = moduleRelativePathOrURL.href;\n    }\n    else if (moduleRelativePathOrURL.startsWith('http')) {\n        modulePrefix = moduleRelativePathOrURL;\n    }\n    else {\n        modulePrefix = typeof baseUrl !== 'undefined' ? `${baseUrl}/${moduleRelativePathOrURL}` : moduleRelativePathOrURL;\n    }\n    if (modulePrefix.endsWith('.js')) {\n        modulePrefix = modulePrefix.substring(0, modulePrefix.length - 3);\n    }\n    if (modulePrefix.endsWith('.wasm')) {\n        modulePrefix = modulePrefix.substring(0, modulePrefix.length - 5);\n    }\n    const wasmBinaryPath = `${modulePrefix}.wasm`;\n    const response = await axios.get(wasmBinaryPath, { responseType: 'arraybuffer' });\n    const wasmBinary = response.data;\n    const fullModulePath = `${modulePrefix}.js`;\n    const result = await import(/* webpackIgnore: true */ /* @vite-ignore */ fullModulePath);\n    const instantiated = result.default({ wasmBinary });\n    return instantiated;\n}\nexport default loadEmscriptenModuleMainThread;\n//# sourceMappingURL=load-emscripten-module-main-thread.js.map","let pipelinesBaseUrl;\nexport function setPipelinesBaseUrl(baseUrl) {\n    pipelinesBaseUrl = baseUrl;\n}\nexport function getPipelinesBaseUrl() {\n    return pipelinesBaseUrl;\n}\n//# sourceMappingURL=pipelines-base-url.js.map","let pipelineWorkerUrl;\nexport function setPipelineWorkerUrl(workerUrl) {\n    pipelineWorkerUrl = workerUrl;\n}\nexport function getPipelineWorkerUrl() {\n    return pipelineWorkerUrl;\n}\n//# sourceMappingURL=pipeline-worker-url.js.map","import * as Comlink from 'comlink';\nimport createWorkerProxy from './create-worker-proxy.js';\nimport loadEmscriptenModuleMainThread from './internal/load-emscripten-module-main-thread.js';\nimport { simd } from 'wasm-feature-detect';\nimport InterfaceTypes from '../interface-types/interface-types.js';\nimport runPipelineEmscripten from './internal/run-pipeline-emscripten.js';\nimport getTransferables from '../get-transferables.js';\nimport imageTransferables from './internal/image-transferables.js';\nimport meshTransferables from './internal/mesh-transferables.js';\nimport polyDataTransferables from './internal/poly-data-transferables.js';\nimport { getPipelinesBaseUrl } from './pipelines-base-url.js';\nimport { getPipelineWorkerUrl } from './pipeline-worker-url.js';\n// To cache loaded pipeline modules\nconst pipelineToModule = new Map();\nfunction defaultPipelineWorkerUrl() {\n    let result = getPipelineWorkerUrl();\n    if (typeof result === 'undefined') {\n        result = null;\n    }\n    return result;\n}\nfunction defaultPipelinesBaseUrl() {\n    let result = getPipelinesBaseUrl();\n    if (typeof result === 'undefined') {\n        result = new URL('/pipelines', document.location.origin).href;\n    }\n    return result;\n}\nasync function loadPipelineModule(pipelinePath, pipelineBaseUrl) {\n    let moduleRelativePathOrURL = pipelinePath;\n    let pipeline = pipelinePath;\n    if (typeof pipelinePath !== 'string') {\n        moduleRelativePathOrURL = new URL(pipelinePath.href);\n        pipeline = moduleRelativePathOrURL.href;\n    }\n    if (pipelineToModule.has(pipeline)) {\n        return pipelineToModule.get(pipeline);\n    }\n    else {\n        const pipelineModule = (await loadEmscriptenModuleMainThread(pipelinePath, pipelineBaseUrl?.toString() ?? defaultPipelinesBaseUrl()));\n        pipelineToModule.set(pipeline, pipelineModule);\n        return pipelineModule;\n    }\n}\nasync function runPipeline(pipelinePath, args, outputs, inputs, options) {\n    if (!await simd()) {\n        const simdErrorMessage = 'WebAssembly SIMD support is required -- please update your browser.';\n        alert(simdErrorMessage);\n        throw new Error(simdErrorMessage);\n    }\n    const webWorker = options?.webWorker ?? null;\n    if (webWorker === false) {\n        const pipelineModule = await loadPipelineModule(pipelinePath.toString(), options?.pipelineBaseUrl);\n        const result = runPipelineEmscripten(pipelineModule, args, outputs, inputs);\n        return result;\n    }\n    let worker = webWorker;\n    const pipelineWorkerUrl = options?.pipelineWorkerUrl ?? defaultPipelineWorkerUrl();\n    const pipelineWorkerUrlString = typeof pipelineWorkerUrl !== 'string' && typeof pipelineWorkerUrl?.href !== 'undefined' ? pipelineWorkerUrl.href : pipelineWorkerUrl;\n    const { workerProxy, worker: usedWorker } = await createWorkerProxy(worker, pipelineWorkerUrlString);\n    worker = usedWorker;\n    const transferables = [];\n    if (!(inputs == null) && inputs.length > 0) {\n        inputs.forEach(function (input) {\n            if (input.type === InterfaceTypes.BinaryStream) {\n                // Binary data\n                const dataArray = input.data.data;\n                transferables.push(dataArray);\n            }\n            else if (input.type === InterfaceTypes.BinaryFile) {\n                // Binary data\n                const dataArray = input.data.data;\n                transferables.push(dataArray);\n            }\n            else if (input.type === InterfaceTypes.Image) {\n                // Image data\n                const image = input.data;\n                if (image.data !== null) {\n                    transferables.push(...imageTransferables(image));\n                }\n            }\n            else if (input.type === InterfaceTypes.Mesh) {\n                // Mesh data\n                const mesh = input.data;\n                transferables.push(...meshTransferables(mesh));\n            }\n            else if (input.type === InterfaceTypes.PolyData) {\n                // PolyData data\n                const polyData = input.data;\n                transferables.push(...polyDataTransferables(polyData));\n            }\n        });\n    }\n    const pipelineBaseUrl = options?.pipelineBaseUrl ?? defaultPipelinesBaseUrl();\n    const pipelineBaseUrlString = typeof pipelineBaseUrl !== 'string' && typeof pipelineBaseUrl?.href !== 'undefined' ? pipelineBaseUrl.href : pipelineBaseUrl;\n    const transferedInputs = (inputs != null) ? Comlink.transfer(inputs, getTransferables(transferables, options?.noCopy)) : null;\n    const result = await workerProxy.runPipeline(pipelinePath.toString(), pipelineBaseUrlString, args, outputs, transferedInputs);\n    return {\n        returnValue: result.returnValue,\n        stdout: result.stdout,\n        stderr: result.stderr,\n        outputs: result.outputs,\n        webWorker: worker\n    };\n}\nexport default runPipeline;\n//# sourceMappingURL=run-pipeline.js.map","export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),exceptionsFinal=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob(\"AGFzbQEAAAABBAFgAAADAgEAChABDgACaR9AAQMAAAsACxoL\"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})(),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),jsStringBuiltins=()=>(async()=>{try{return await WebAssembly.instantiate(Uint8Array.from(atob(\"AGFzbQEAAAABBgFgAW8BfwIXAQ53YXNtOmpzLXN0cmluZwR0ZXN0AAA=\"),(e=>e.codePointAt(0))),{},{builtins:[\"js-string\"]}),!0}catch(e){return!1}})(),jspi=()=>(async()=>\"Suspending\"in WebAssembly)(),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),typeReflection=()=>(async()=>\"Function\"in WebAssembly)(),typedFunctionReferences=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob(\"AGFzbQEAAAABEANgAX8Bf2ABZAABf2AAAX8DBAMBAAIJBQEDAAEBChwDCwBBCkEqIAAUAGoLBwAgAEEBagsGANIBEAAL\"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})();\n","let defaultWebWorker = null;\n/**\n * Set the default web worker for functions in a bundle defined with itk-wasm bindgen.\n *\n * Must be created with `createWebWorker`.\n **/\nexport function setDefaultWebWorker(webWorker) {\n    defaultWebWorker = webWorker;\n}\n/**\n * Get the default web worker for functions in a bundle defined with itk-wasm bindgen.\n *\n * A value of `null` indicates that the default web worker has not been set and the default web worker for the\n * bindgen package will be used.\n **/\nexport function getDefaultWebWorker() {\n    return defaultWebWorker;\n}\n//# sourceMappingURL=default-web-worker.js.map","// @ts-nocheck\n/**\n * @deprecated Use readDicomTags from @itk-wasm/dicom instead\n */\nasync function readDICOMTags(webWorker, file, tags = null) {\n    throw new Error('readDICOMTags is deprecated. Use readDicomTags from @itk-wasm/dicom instead.');\n}\nexport default readDICOMTags;\n//# sourceMappingURL=read-dicom-tags.js.map","// @ts-nocheck\n/**\n *\n * @deprecated Use readDicomTags from @itk-wasm/dicom instead\n */\nasync function readDICOMTagsArrayBuffer(webWorker, arrayBuffer, tags = null) {\n    throw new Error('readDICOMTagsArrayBuffer is deprecated. Use readDicomTags from @itk-wasm/dicom instead.');\n}\nexport default readDICOMTagsArrayBuffer;\n//# sourceMappingURL=read-dicom-tags-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageDicomFileSeries from @itk-wasm/dicom instead\n */\nconst readImageDICOMFileSeries = async (fileList, options) => {\n    throw new Error('readImageDICOMFileSeries is deprecated. Use readImageDicomFileSeries from @itk-wasm/dicom instead.');\n};\nexport default readImageDICOMFileSeries;\n//# sourceMappingURL=read-image-dicom-file-series.js.map","// @ts-nocheck\n/**\n *\n * @deprecated Use readImageDicomFileSeries from @itk-wasm/dicom instead\n */\nconst readImageDICOMArrayBufferSeries = async (arrayBuffers, options, fileNamesBackwardsCompatibility) => {\n    throw new Error('readImageDICOMArrayBufferSeries is deprecated. Use readImageDicomFileSeries from @itk-wasm/dicom instead.');\n};\nexport default readImageDICOMArrayBufferSeries;\n//# sourceMappingURL=read-image-dicom-array-buffer-series.js.map","// @ts-nocheck\n/**\n * @deprecated Use meshToPolyData from @itk-wasm/mesh-to-poly-data instead\n */\nasync function meshToPolyData(webWorker, mesh) {\n    throw new Error('This function has been migrated to the @itk-wasm/mesh-to-poly-data package.');\n}\nexport default meshToPolyData;\n//# sourceMappingURL=mesh-to-poly-data.js.map","// @ts-nocheck\n/**\n * @deprecated Use polyDataToMesh from @itk-wasm/mesh-to-poly-data instead\n */\nasync function polyDataToMesh(webWorker, polyData) {\n    throw new Error('This function has been migrated to the @itk-wasm/mesh-to-poly-data package.');\n}\nexport default polyDataToMesh;\n//# sourceMappingURL=poly-data-to-mesh.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageArrayBuffer from @itk-wasm/image-io instead\n */\nasync function readImageArrayBuffer(webWorker, arrayBuffer, fileName, options) {\n    throw new Error('readImageArrayBuffer is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageArrayBuffer;\n//# sourceMappingURL=read-image-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageBlob from @itk-wasm/image-io instead\n */\nasync function readImageBlob(webWorker, blob, fileName, options) {\n    throw new Error('readImageBlob is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageBlob;\n//# sourceMappingURL=read-image-blob.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageFile from @itk-wasm/image-io instead\n */\nasync function readImageFile(webWorker, file, options) {\n    throw new Error('readImageFile is deprecated. Use readImageFile from @itk-wasm/image-io instead.');\n}\nexport default readImageFile;\n//# sourceMappingURL=read-image-file.js.map","// @ts-nocheck\n/**\n * @deprecated Use readImageFileSeries from @itk-wasm/image-io instead\n */\nasync function readImageFileSeries(fileList, options, zOriginBackwardsCompatibility, sortedSeriesBackwardsCompatibility) {\n    throw new Error('readImageFileSeries is deprecated. Use readImageFileSeries from @itk-wasm/image-io instead.');\n}\nexport default readImageFileSeries;\n//# sourceMappingURL=read-image-file-series.js.map","// @ts-nocheck\n/**\n * @deprecated Use readMeshArrayBuffer from @itk-wasm/image-io instead\n */\nasync function readMeshArrayBuffer(webWorker, arrayBuffer, fileName, mimeType) {\n    throw new Error('readMeshArrayBuffer is deprecated. Use readMeshFile from @itk-wasm/mesh-io instead.');\n}\nexport default readMeshArrayBuffer;\n//# sourceMappingURL=read-mesh-array-buffer.js.map","// @ts-nocheck\n/**\n * @deprecated Use readMeshFile from @itk-wasm/mesh-io instead\n */\nasync function readMeshFile(webWorker, file) {\n    throw new Error('readMeshFile is deprecated. Use readMeshFile from @itk-wasm/mesh-io instead.');\n}\nexport default readMeshFile;\n//# sourceMappingURL=read-mesh-file.js.map"],"names":["pipelinesBaseUrl","pipelineWorkerUrl","defaultPipelinesBaseUrl","setPipelinesBaseUrl","baseUrl","getPipelinesBaseUrl","itkWasmPipelinesBaseUrl","defaultPipelineWorkerUrl","setPipelineWorkerUrl","workerUrl","getPipelineWorkerUrl","itkWasmPipelineWorkerUrl","defaultWebWorker","async","createNewWorker","pipelineWorkerUrlString","href","createWebWorker","setDefaultWebWorker","webWorker","getDefaultWebWorker","terminated","itkWasmDefaultWebWorker","inputImage","options","desiredOutputs","type","InterfaceTypes","Image","inputs","data","args","push","label","toString","axis","noHeuristicAlignment","noUseDistanceTransform","useCustomSlicePositions","noUseExtrapolation","useBallStructuringElement","labeledSliceIndicesAxis","labeledSliceIndicesLabel","labeledSliceIndices","length","Error","Promise","all","map","value","workerToUse","undefined","usedWebWorker","returnValue","stderr","outputs","runPipeline","pipelineBaseUrl","noCopy","outputImage","Unknown","Scalar","RGB","RGBA","Offset","Vector","Point","CovariantVector","SymmetricSecondRankTensor","DiffusionTensor3D","Complex","FixedArray","Array","Matrix","VariableLengthVector","VariableSizeMatrix","dimension","componentType","pixelType","components","constructor","UInt8","this","matrixData","columns","row","column","imageType","name","origin","spacing","direction","size","metadata","fill","Float64Array","ii","Map","image","copy","from","slice","CTor","set","haveSharedArrayBuffer","globalThis","SharedArrayBuffer","buffer","sharedBuffer","byteLength","sharedTypedArray","images","firstImage","result","stackOn","stackedSize","reduce","accumulator","currentValue","dataSize","offsetBase","subIndex","stackIndex","index","filePath","extension","lastIndexOf","toLowerCase","outputImageType","JSON","parse","stringify","Int8","UInt16","Int16","UInt32","Int32","Float32","Float64","Uint8Array","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","UInt64","BigUint64Array","idx","BigInt","asIntN","Int64","BigInt64Array","asUintN","Number","fcn","workerQueue","runInfo","poolSize","runTasks","taskArgsArray","progressCallback","info","taskQueue","results","addingTasks","postponed","runningWorkers","completedTasks","canceled","promise","resolve","reject","forEach","taskArg","addTask","runId","terminateWorkers","worker","terminate","cancel","infoIndex","resultIndex","taskArgs","clearTask","pop","then","reTask","shift","catch","error","setTimeout","clearIndex","pointComponentType","pointPixelComponentType","pointPixelType","pointPixelComponents","cellComponentType","cellPixelComponentType","cellPixelType","cellPixelComponents","mt","meshType","numberOfPoints","points","numberOfPointPixels","pointData","numberOfCells","cells","cellBufferSize","numberOfCellPixels","cellData","polyDataType","verticesBufferSize","vertices","linesBufferSize","lines","polygonsBufferSize","polygons","triangleStripsBufferSize","triangleStrips","Worker","URL","startsWith","response","axios","get","responseType","workerObjectUrl","createObjectURL","workerToWorkerProxy","workerProxy","itkWebWorker","originalTerminate","existingWorker","moduleRelativePathOrURL","modulePrefix","endsWith","substring","wasmBinaryPath","wasmBinary","fullModulePath","import","default","pipelineToModule","document","location","pipelinePath","WebAssembly","validate","simd","simdErrorMessage","alert","pipelineModule","pipeline","has","loadPipelineModule","usedWorker","transferables","input","BinaryStream","dataArray","BinaryFile","Mesh","mesh","PolyData","polyData","pipelineBaseUrlString","transferedInputs","stdout","file","tags","arrayBuffer","fileList","arrayBuffers","fileNamesBackwardsCompatibility","fileName","blob","zOriginBackwardsCompatibility","sortedSeriesBackwardsCompatibility","mimeType"],"sourceRoot":""}