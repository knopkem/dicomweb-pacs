{"version":3,"file":"213.bundle.09cdf6a0d520302a9717.js","mappings":"qIAEMA,E,mDAAKC,GACLC,EAAoB,GAAGF,sC,0BCC7B,MAAMG,EAAiB,CACrBC,gCAAiC,mCACjCC,iCAAkC,mCAClCC,+BAAgC,mCAEhCC,gCAAiC,4BACjCC,sDAAuD,+BAGnDC,EAAeC,OAAOC,OAAOR,GAC7BS,EAA+B,CACnCT,EAAeI,gCACfJ,EAAeK,uDAaXK,EAA8BH,OAAOC,OAVT,CAChCG,2BAA4B,0BAC5BC,yCAA0C,0BAC1CC,wCAAyC,0BACzCC,wCAAyC,0BACzCC,kCAAmC,0BACnCC,sBAAuB,0BACvBC,yBAA0B,4B,wNCtB5B,MAAMC,EAAYC,EAAAA,MAAW,IACpB,kCAGHC,EAA+BC,GAEjCF,EAAAA,cAACA,EAAAA,SAAc,CAACG,SAAUH,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAACD,EAAcG,IAgDrB,QAxC4B,CAI1BxB,GAAE,EAQF0B,kBAAiBA,EAAC,gBAAEC,EAAe,iBAAEC,KAW5B,CAAC,CAAEC,KAAM,cAAeC,UAVcN,GAEzCF,EAAAA,cAACC,EAA4BQ,EAAA,CAC3BJ,gBAAiBA,EACjBC,iBAAkBA,GACdJ,MAOZQ,yBDyDa,UAAkC,gBAAEL,EAAe,iBAAEC,IAKlE,MAAO,CACL,CACEC,KAAM,cACNpB,eACAwB,yBAR6BC,GAvEDC,EAACD,EAAWP,EAAiBC,KAC7D,MAAMQ,EAAaR,EAAiBS,sBAAsB,GAC1D,OAAOH,EACJI,QAAOC,IACN,MAAMC,EACJD,EAASE,4BAA8BF,EAASG,mBAAqBH,EAAS,YAEhF,QAAI1B,EAA4B8B,SAASH,IAIrCD,EAASK,cAAgBzC,EAAeE,kCAO1CO,EAA6B+B,SAASJ,EAASK,cAAgBL,EAASM,gBAAkB,EAAE,IAG/FC,KAAIC,IACH,MAAM,SAAEC,EAAQ,eAAEC,EAAc,kBAAEC,EAAoB,QAAO,QAAEC,GAAYJ,GACrE,aAAEK,EAAY,WAAEC,EAAU,kBAAEC,EAAiB,iBAAEC,EAAgB,eAAEV,EAAc,IAAEW,GACrFT,EACIU,EAAWrB,EAAWsB,SAASC,UAAU,CAC7CZ,WACAa,WAAY,QACZC,IAAK,YACLL,QAEIM,EAAa,CAEjBd,WACAe,sBAAuBC,EAAAA,GAAMC,OAC7Bf,oBACAE,eACAC,aACAJ,iBACAK,oBACAC,mBACArD,kBAAiB,EACjBgE,iBAAkB,KAClBC,aAAc,KACdC,aAAcC,EAAAA,MAAAA,aAAqBC,MAEnCb,WACAc,YAAad,EACbvB,UAAW,CAACa,GACZyB,aAAcpC,EAAWsB,SAASC,UAAU,CAC1CZ,WACA0B,YAAa,aACbC,YAAa,aACbb,IAAK,WAEPc,SAAU,CAACxB,GACXyB,qBAAqB,EACrBC,UAAU,EACVpE,eACAqE,eAAgBjC,EAChBE,YAMF,OAJAgC,EAAAA,UAAAA,wBAAgCC,IAAI7B,EAAS,CAC3C8B,KAAM,iBACN1C,SAAU,CAAE2C,SAAUzB,KAEjBK,CAAU,GACjB,EAKK3B,CAA0BD,EAAWP,EAAiBC,IAUjE,E","sources":["webpack:///../../../extensions/dicom-video/src/id.js","webpack:///../../../extensions/dicom-video/src/getSopClassHandlerModule.js","webpack:///../../../extensions/dicom-video/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.dicom-video`;\r\n\r\nexport { SOPClassHandlerId, id };\r\n","import { SOPClassHandlerId } from './id';\r\nimport { utils } from '@ohif/core';\r\nimport { utilities as csUtils, Enums as csEnums } from '@cornerstonejs/core';\r\n\r\nconst SOP_CLASS_UIDS = {\r\n  VIDEO_MICROSCOPIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.2.1',\r\n  VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.4.1',\r\n  VIDEO_ENDOSCOPIC_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.1.1',\r\n  /** Need to use fallback, could be video or image */\r\n  SECONDARY_CAPTURE_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.7',\r\n  MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.7.4',\r\n};\r\n\r\nconst sopClassUids = Object.values(SOP_CLASS_UIDS);\r\nconst secondaryCaptureSopClassUids = [\r\n  SOP_CLASS_UIDS.SECONDARY_CAPTURE_IMAGE_STORAGE,\r\n  SOP_CLASS_UIDS.MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE,\r\n];\r\n\r\nconst SupportedTransferSyntaxes = {\r\n  MPEG4_AVC_264_HIGH_PROFILE: '1.2.840.10008.1.2.4.102',\r\n  MPEG4_AVC_264_BD_COMPATIBLE_HIGH_PROFILE: '1.2.840.10008.1.2.4.103',\r\n  MPEG4_AVC_264_HIGH_PROFILE_FOR_2D_VIDEO: '1.2.840.10008.1.2.4.104',\r\n  MPEG4_AVC_264_HIGH_PROFILE_FOR_3D_VIDEO: '1.2.840.10008.1.2.4.105',\r\n  MPEG4_AVC_264_STEREO_HIGH_PROFILE: '1.2.840.10008.1.2.4.106',\r\n  HEVC_265_MAIN_PROFILE: '1.2.840.10008.1.2.4.107',\r\n  HEVC_265_MAIN_10_PROFILE: '1.2.840.10008.1.2.4.108',\r\n};\r\n\r\nconst supportedTransferSyntaxUIDs = Object.values(SupportedTransferSyntaxes);\r\n\r\nconst _getDisplaySetsFromSeries = (instances, servicesManager, extensionManager) => {\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n  return instances\r\n    .filter(metadata => {\r\n      const tsuid =\r\n        metadata.AvailableTransferSyntaxUID || metadata.TransferSyntaxUID || metadata['00083002'];\r\n\r\n      if (supportedTransferSyntaxUIDs.includes(tsuid)) {\r\n        return true;\r\n      }\r\n\r\n      if (metadata.SOPClassUID === SOP_CLASS_UIDS.VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE) {\r\n        return true;\r\n      }\r\n\r\n      // Assume that an instance with one of the secondary capture SOPClassUIDs and\r\n      // with at least 90 frames (i.e. typically 3 seconds of video) is indeed a video.\r\n      return (\r\n        secondaryCaptureSopClassUids.includes(metadata.SOPClassUID) && metadata.NumberOfFrames >= 90\r\n      );\r\n    })\r\n    .map(instance => {\r\n      const { Modality, SOPInstanceUID, SeriesDescription = 'VIDEO', imageId } = instance;\r\n      const { SeriesNumber, SeriesDate, SeriesInstanceUID, StudyInstanceUID, NumberOfFrames, url } =\r\n        instance;\r\n      const videoUrl = dataSource.retrieve.directURL({\r\n        instance,\r\n        singlepart: 'video',\r\n        tag: 'PixelData',\r\n        url,\r\n      });\r\n      const displaySet = {\r\n        //plugin: id,\r\n        Modality,\r\n        displaySetInstanceUID: utils.guid(),\r\n        SeriesDescription,\r\n        SeriesNumber,\r\n        SeriesDate,\r\n        SOPInstanceUID,\r\n        SeriesInstanceUID,\r\n        StudyInstanceUID,\r\n        SOPClassHandlerId,\r\n        referencedImages: null,\r\n        measurements: null,\r\n        viewportType: csEnums.ViewportType.VIDEO,\r\n        // The videoUrl is deprecated, the preferred URL is renderedUrl\r\n        videoUrl,\r\n        renderedUrl: videoUrl,\r\n        instances: [instance],\r\n        thumbnailSrc: dataSource.retrieve.directURL({\r\n          instance,\r\n          defaultPath: '/thumbnail',\r\n          defaultType: 'image/jpeg',\r\n          tag: 'Absent',\r\n        }),\r\n        imageIds: [imageId],\r\n        isDerivedDisplaySet: true,\r\n        isLoaded: false,\r\n        sopClassUids,\r\n        numImageFrames: NumberOfFrames,\r\n        instance,\r\n      };\r\n      csUtils.genericMetadataProvider.add(imageId, {\r\n        type: 'imageUrlModule',\r\n        metadata: { rendered: videoUrl },\r\n      });\r\n      return displaySet;\r\n    });\r\n};\r\n\r\nexport default function getSopClassHandlerModule({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-video',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n","import React from 'react';\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport { id } from './id';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneVideoViewport');\r\n});\r\n\r\nconst OHIFCornerstoneVideoViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n */\r\nconst dicomVideoExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {object} [configuration={}]\r\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\r\n   */\r\n  getViewportModule({ servicesManager, extensionManager }) {\r\n    const ExtendedOHIFCornerstoneVideoViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneVideoViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-video', component: ExtendedOHIFCornerstoneVideoViewport }];\r\n  },\r\n  getSopClassHandlerModule,\r\n};\r\n\r\nfunction _getToolAlias(toolName) {\r\n  let toolAlias = toolName;\r\n\r\n  switch (toolName) {\r\n    case 'EllipticalRoi':\r\n      toolAlias = 'SREllipticalRoi';\r\n      break;\r\n  }\r\n\r\n  return toolAlias;\r\n}\r\n\r\nexport default dicomVideoExtension;\r\n"],"names":["id","packageJson","SOPClassHandlerId","SOP_CLASS_UIDS","VIDEO_MICROSCOPIC_IMAGE_STORAGE","VIDEO_PHOTOGRAPHIC_IMAGE_STORAGE","VIDEO_ENDOSCOPIC_IMAGE_STORAGE","SECONDARY_CAPTURE_IMAGE_STORAGE","MULTIFRAME_TRUE_COLOR_SECONDARY_CAPTURE_IMAGE_STORAGE","sopClassUids","Object","values","secondaryCaptureSopClassUids","supportedTransferSyntaxUIDs","MPEG4_AVC_264_HIGH_PROFILE","MPEG4_AVC_264_BD_COMPATIBLE_HIGH_PROFILE","MPEG4_AVC_264_HIGH_PROFILE_FOR_2D_VIDEO","MPEG4_AVC_264_HIGH_PROFILE_FOR_3D_VIDEO","MPEG4_AVC_264_STEREO_HIGH_PROFILE","HEVC_265_MAIN_PROFILE","HEVC_265_MAIN_10_PROFILE","Component","React","OHIFCornerstoneVideoViewport","props","fallback","getViewportModule","servicesManager","extensionManager","name","component","_extends","getSopClassHandlerModule","getDisplaySetsFromSeries","instances","_getDisplaySetsFromSeries","dataSource","getActiveDataSource","filter","metadata","tsuid","AvailableTransferSyntaxUID","TransferSyntaxUID","includes","SOPClassUID","NumberOfFrames","map","instance","Modality","SOPInstanceUID","SeriesDescription","imageId","SeriesNumber","SeriesDate","SeriesInstanceUID","StudyInstanceUID","url","videoUrl","retrieve","directURL","singlepart","tag","displaySet","displaySetInstanceUID","utils","guid","referencedImages","measurements","viewportType","csEnums","VIDEO","renderedUrl","thumbnailSrc","defaultPath","defaultType","imageIds","isDerivedDisplaySet","isLoaded","numImageFrames","csUtils","add","type","rendered"],"sourceRoot":""}