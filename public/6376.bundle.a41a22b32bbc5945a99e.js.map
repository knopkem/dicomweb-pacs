{"version":3,"file":"6376.bundle.a41a22b32bbc5945a99e.js","mappings":";uBAAIA,ECAAC,qBCKJ,MAAMC,EAAcC,OAAO,iBACrBC,EAAiBD,OAAO,oBACxBE,EAAeF,OAAO,wBACtBG,EAAYH,OAAO,qBACnBI,EAAcJ,OAAO,kBACrBK,EAAYC,GAAwB,iBAARA,GAA4B,OAARA,GAAgC,mBAARA,EAgDxEC,EAAmB,IAAIC,IAAI,CAC7B,CAAC,QA7CwB,CACzBC,UAAYH,GAAQD,EAASC,IAAQA,EAAIP,GACzC,SAAAW,CAAUC,GACN,MAAM,MAAEC,EAAK,MAAEC,GAAU,IAAIC,eAE7B,OADAC,EAAOJ,EAAKC,GACL,CAACC,EAAO,CAACA,GACpB,EACA,WAAAG,CAAYC,GAER,OADAA,EAAKC,QAiJFC,EAhJSF,EAgJO,GAAIG,GAD/B,IAAkBA,CA9Id,IAoCA,CAAC,QA/BwB,CACzBX,UAAYY,GAAUhB,EAASgB,IAAUjB,KAAeiB,EACxD,SAAAX,EAAU,MAAEW,IACR,IAAIC,EAcJ,OAZIA,EADAD,aAAiBE,MACJ,CACTC,SAAS,EACTH,MAAO,CACHI,QAASJ,EAAMI,QACfC,KAAML,EAAMK,KACZC,MAAON,EAAMM,QAKR,CAAEH,SAAS,EAAOH,SAE5B,CAACC,EAAY,GACxB,EACA,WAAAN,CAAYM,GACR,GAAIA,EAAWE,QACX,MAAMI,OAAOC,OAAO,IAAIN,MAAMD,EAAWD,MAAMI,SAAUH,EAAWD,OAExE,MAAMC,EAAWD,KACrB,MAoBJ,SAASN,EAAOJ,EAAKmB,EAAKC,WAAYC,EAAiB,CAAC,MACpDF,EAAGG,iBAAiB,WAAW,SAASC,EAASC,GAC7C,IAAKA,IAAOA,EAAGC,KACX,OAEJ,IAhBR,SAAyBJ,EAAgBK,GACrC,IAAK,MAAMC,KAAiBN,EAAgB,CACxC,GAAIK,IAAWC,GAAmC,MAAlBA,EAC5B,OAAO,EAEX,GAAIA,aAAyBC,QAAUD,EAAcE,KAAKH,GACtD,OAAO,CAEf,CACA,OAAO,CACX,CAMaI,CAAgBT,EAAgBG,EAAGE,QAEpC,YADAK,QAAQC,KAAK,mBAAmBR,EAAGE,6BAGvC,MAAM,GAAEO,EAAE,KAAEC,EAAI,KAAEC,GAASlB,OAAOC,OAAO,CAAEiB,KAAM,IAAMX,EAAGC,MACpDW,GAAgBZ,EAAGC,KAAKW,cAAgB,IAAIC,IAAIC,GACtD,IAAIC,EACJ,IACI,MAAMC,EAASL,EAAKM,MAAM,GAAI,GAAGC,QAAO,CAAC1C,EAAK2C,IAAS3C,EAAI2C,IAAO3C,GAC5D4C,EAAWT,EAAKO,QAAO,CAAC1C,EAAK2C,IAAS3C,EAAI2C,IAAO3C,GACvD,OAAQkC,GACJ,IAAK,MAEGK,EAAcK,EAElB,MACJ,IAAK,MAEGJ,EAAOL,EAAKM,OAAO,GAAG,IAAMH,EAAcd,EAAGC,KAAKf,OAClD6B,GAAc,EAElB,MACJ,IAAK,QAEGA,EAAcK,EAASC,MAAML,EAAQJ,GAEzC,MACJ,IAAK,YAGGG,EA6KxB,SAAevC,GACX,OAAOiB,OAAOC,OAAOlB,EAAK,CAAE,CAACZ,IAAc,GAC/C,CA/KsC0D,CADA,IAAIF,KAAYR,IAGlC,MACJ,IAAK,WACD,CACI,MAAM,MAAEnC,EAAK,MAAEC,GAAU,IAAIC,eAC7BC,EAAOJ,EAAKE,GACZqC,EAAcQ,EAAS9C,EAAO,CAACA,GACnC,CACA,MACJ,IAAK,UAEGsC,OAAcS,EAElB,MACJ,QACI,OAEZ,CACA,MAAOtC,GACH6B,EAAc,CAAE7B,QAAO,CAACjB,GAAc,EAC1C,CACAwD,QAAQC,QAAQX,GACXY,OAAOzC,IACD,CAAEA,QAAO,CAACjB,GAAc,MAE9B2D,MAAMb,IACP,MAAOc,EAAWC,GAAiBC,EAAYhB,GAC/CpB,EAAGqC,YAAYvC,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGmC,GAAY,CAAEpB,OAAOqB,GACvD,YAATpB,IAEAf,EAAGsC,oBAAoB,UAAWlC,GAClCmC,EAAcvC,GACV3B,KAAaQ,GAAiC,mBAAnBA,EAAIR,IAC/BQ,EAAIR,KAEZ,IAEC2D,OAAOQ,IAER,MAAON,EAAWC,GAAiBC,EAAY,CAC3C7C,MAAO,IAAIkD,UAAU,+BACrB,CAACnE,GAAc,IAEnB0B,EAAGqC,YAAYvC,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGmC,GAAY,CAAEpB,OAAOqB,EAAc,GAE1F,IACInC,EAAGZ,OACHY,EAAGZ,OAEX,CAIA,SAASmD,EAAcG,IAHvB,SAAuBA,GACnB,MAAqC,gBAA9BA,EAASC,YAAY/C,IAChC,EAEQgD,CAAcF,IACdA,EAASG,OACjB,CAIA,SAASC,EAAqBC,GAC1B,GAAIA,EACA,MAAM,IAAItD,MAAM,6CAExB,CACA,SAASuD,EAAgBhD,GACrB,OAAOiD,EAAuBjD,EAAI,CAC9Be,KAAM,YACPkB,MAAK,KACJM,EAAcvC,EAAG,GAEzB,CACA,MAAMkD,EAAe,IAAIC,QACnBC,EAAkB,yBAA0BnD,YAC9C,IAAIoD,sBAAsBrD,IACtB,MAAMsD,GAAYJ,EAAaK,IAAIvD,IAAO,GAAK,EAC/CkD,EAAaM,IAAIxD,EAAIsD,GACJ,IAAbA,GACAN,EAAgBhD,EACpB,IAcR,SAASX,EAAYW,EAAIgB,EAAO,GAAI1B,EAAS,WAAc,GACvD,IAAImE,GAAkB,EACtB,MAAM9B,EAAQ,IAAI+B,MAAMpE,EAAQ,CAC5B,GAAAiE,CAAII,EAASnC,GAET,GADAsB,EAAqBW,GACjBjC,IAASpD,EACT,MAAO,MAXvB,SAAyBuD,GACjByB,GACAA,EAAgBQ,WAAWjC,EAEnC,CAQoBkC,CAAgBlC,GAChBqB,EAAgBhD,GAChByD,GAAkB,CAAI,EAG9B,GAAa,SAATjC,EAAiB,CACjB,GAAoB,IAAhBR,EAAK8C,OACL,MAAO,CAAE7B,KAAM,IAAMN,GAEzB,MAAMoC,EAAId,EAAuBjD,EAAI,CACjCe,KAAM,MACNC,KAAMA,EAAKE,KAAK8C,GAAMA,EAAEC,eACzBhC,KAAKd,GACR,OAAO4C,EAAE9B,KAAKiC,KAAKH,EACvB,CACA,OAAO1E,EAAYW,EAAI,IAAIgB,EAAMQ,GACrC,EACA,GAAAgC,CAAIG,EAASnC,EAAMC,GACfqB,EAAqBW,GAGrB,MAAOlE,EAAO4C,GAAiBC,EAAYX,GAC3C,OAAOwB,EAAuBjD,EAAI,CAC9Be,KAAM,MACNC,KAAM,IAAIA,EAAMQ,GAAMN,KAAK8C,GAAMA,EAAEC,aACnC1E,SACD4C,GAAeF,KAAKd,EAC3B,EACA,KAAAO,CAAMiC,EAASQ,EAAUC,GACrBtB,EAAqBW,GACrB,MAAMY,EAAOrD,EAAKA,EAAK8C,OAAS,GAChC,GAAIO,IAASlG,EACT,OAAO8E,EAAuBjD,EAAI,CAC9Be,KAAM,aACPkB,KAAKd,GAGZ,GAAa,SAATkD,EACA,OAAOhF,EAAYW,EAAIgB,EAAKM,MAAM,GAAI,IAE1C,MAAOL,EAAckB,GAAiBmC,EAAiBF,GACvD,OAAOnB,EAAuBjD,EAAI,CAC9Be,KAAM,QACNC,KAAMA,EAAKE,KAAK8C,GAAMA,EAAEC,aACxBhD,gBACDkB,GAAeF,KAAKd,EAC3B,EACA,SAAAoD,CAAUZ,EAASS,GACftB,EAAqBW,GACrB,MAAOxC,EAAckB,GAAiBmC,EAAiBF,GACvD,OAAOnB,EAAuBjD,EAAI,CAC9Be,KAAM,YACNC,KAAMA,EAAKE,KAAK8C,GAAMA,EAAEC,aACxBhD,gBACDkB,GAAeF,KAAKd,EAC3B,IAGJ,OA7EJ,SAAuBQ,EAAO3B,GAC1B,MAAMsD,GAAYJ,EAAaK,IAAIvD,IAAO,GAAK,EAC/CkD,EAAaM,IAAIxD,EAAIsD,GACjBF,GACAA,EAAgBoB,SAAS7C,EAAO3B,EAAI2B,EAE5C,CAsEI8C,CAAc9C,EAAO3B,GACd2B,CACX,CAIA,SAAS2C,EAAiBrD,GACtB,MAAMyD,EAAYzD,EAAaC,IAAIkB,GACnC,MAAO,CAACsC,EAAUxD,KAAKyD,GAAMA,EAAE,MALnBC,EAK+BF,EAAUxD,KAAKyD,GAAMA,EAAE,KAJ3DE,MAAMC,UAAUC,OAAOrD,MAAM,GAAIkD,KAD5C,IAAgBA,CAMhB,CACA,MAAMI,EAAgB,IAAI7B,QAC1B,SAASvB,EAAS/C,EAAKoG,GAEnB,OADAD,EAAcxB,IAAI3E,EAAKoG,GAChBpG,CACX,CAWA,SAASuD,EAAY7C,GACjB,IAAK,MAAOK,EAAMsF,KAAYzG,EAC1B,GAAIyG,EAAQvG,UAAUY,GAAQ,CAC1B,MAAO4F,EAAiBhD,GAAiB+C,EAAQtG,UAAUW,GAC3D,MAAO,CACH,CACIwB,KAAM,UACNnB,OACAL,MAAO4F,GAEXhD,EAER,CAEJ,MAAO,CACH,CACIpB,KAAM,MACNxB,SAEJyF,EAAczB,IAAIhE,IAAU,GAEpC,CACA,SAAS4B,EAAc5B,GACnB,OAAQA,EAAMwB,MACV,IAAK,UACD,OAAOtC,EAAiB8E,IAAIhE,EAAMK,MAAMV,YAAYK,EAAMA,OAC9D,IAAK,MACD,OAAOA,EAAMA,MAEzB,CACA,SAAS0D,EAAuBjD,EAAIoF,EAAKH,GACrC,OAAO,IAAInD,SAASC,IAChB,MAAMjB,EAeH,IAAI+D,MAAM,GACZQ,KAAK,GACLnE,KAAI,IAAMoE,KAAKC,MAAMD,KAAKE,SAAWC,OAAOC,kBAAkBzB,SAAS,MACvE0B,KAAK,KAjBN3F,EAAGG,iBAAiB,WAAW,SAASyF,EAAEvF,GACjCA,EAAGC,MAASD,EAAGC,KAAKQ,IAAMT,EAAGC,KAAKQ,KAAOA,IAG9Cd,EAAGsC,oBAAoB,UAAWsD,GAClC7D,EAAQ1B,EAAGC,MACf,IACIN,EAAGZ,OACHY,EAAGZ,QAEPY,EAAGqC,YAAYvC,OAAOC,OAAO,CAAEe,MAAMsE,GAAMH,EAAU,GAE7D,8BChVA,IAAIY,EACAC,EACAC,EACJ,MAAMC,EAAgB,CACpBC,IAAK,CACHC,gCAAiC,SAAUC,GACzCJ,EAAO,IAAIK,WAAWN,EAASO,QAAQC,OAAOC,OAChD,IAyEJ,MAAMC,EAAO,+74CC9EPC,EAAU,IDWhB,MACE,IAAAZ,GACE,OAAIA,IAGFA,EAFmB,oBAAVa,MAEFA,MAAM,gCAAkCF,GAAMvE,MAAK0E,GAAYA,EAASC,gBAAe3E,MAAK2E,GAAeC,YAAYC,YAAYF,EAAaZ,KAAgB/D,KAAK8E,KAAKC,OAG1KH,YAAYC,YAAYG,EAAOC,KAAKV,EAAM,UAAWR,GAAe/D,KAAK8E,KAAKC,OAEhFnB,EACT,CACA,KAAAmB,CAAMG,GACJrB,EAAWqB,EAAOrB,SAClBE,EAAcC,IAAIC,gCAAgC,EACpD,CAEA,MAAAkB,CAAOC,EAAOC,EAAmB,GAC/B,IAAKxB,EAAU,MAAM,IAAIrG,MAAM,+CAE/B,MAAM8H,EAAiBF,EAAMG,WACvBC,EAAgB3B,EAASO,QAAQqB,OAAOH,GAC9CxB,EAAKvC,IAAI6D,EAAOI,GAEhBH,EAAmBA,GAAoB7B,OAAOK,EAASO,QAAQsB,0BAA0BF,EAAeF,IACxG,MAAMK,EAAkB9B,EAASO,QAAQqB,OAAOJ,GAC1CO,EAAa/B,EAASO,QAAQyB,gBAAgBF,EAAiBN,EAAkBG,EAAeF,GAEhGQ,EAAMhC,EAAKzE,MAAMsG,EAAiBA,EAAkBC,GAG1D,OAFA/B,EAASO,QAAQ2B,KAAKP,GACtB3B,EAASO,QAAQ2B,KAAKJ,GACfG,CACT,GC1CF,IAAIE,GAAqB,EAmCzB,QA9BAC,eAA6CC,EAAyBC,GAClE,IAAIC,EAAe,KAEfA,EADmC,iBAA5BF,EACQA,EAAwBG,KAElCH,EAAwBI,WAAW,QACzBJ,EAGA,GAAGC,KAAWD,IAE7BE,EAAaG,SAAS,SACtBH,EAAeA,EAAaI,UAAU,EAAGJ,EAAavE,OAAS,IAE/DuE,EAAaG,SAAS,WACtBH,EAAeA,EAAaI,UAAU,EAAGJ,EAAavE,OAAS,IAEnE,MAAM4E,EAAiB,GAAGL,SACpB1B,QAAiBgC,EAAA,GAAMpF,IAAI,GAAGmF,QAAsB,CAAEE,aAAc,gBACrEX,UACKxB,EAAQZ,OACdoC,GAAqB,GAEzB,MACMY,EADoBpC,EAAQW,OAAO,IAAIhB,WAAWO,EAASrG,OAC5BiG,OAC/BuC,EAAa,GAAGT,OAGtB,aAFqBU,OAAoDD,IACzCE,QAAQ,CAAEH,cAE9C,ECnCMI,EAAmB,IAAIvK,IAkB7B,QAjBAwJ,eAAkCgB,EAAcd,GAC5C,IAAID,EAA0Be,EAC1BC,EAAWD,EACXE,EAAiB,KAYrB,MAX4B,iBAAjBF,IACPf,EAA0B,IAAIkB,IAAIH,EAAaZ,MAC/Ca,EAAWhB,EAAwBG,MAEnCW,EAAiBK,IAAIH,IAIrBF,EAAiBzF,IAAI2F,EAAU,EAAqBhB,EAAyBC,IAH7EgB,QAAuBH,EAAiB1F,IAAI4F,GAMzCC,CACX,sECaA,QAzBAlB,eAA2BkB,EAAgBG,EAAMC,EAASC,GACtD,MAAMtC,GAAS,OAAsBiC,EAAgBG,EAAMC,EAASC,GAC9DtH,EAAgB,GAqBtB,OApBAgF,EAAOqC,QAAQE,SAAQ,SAAUC,GAC7B,GAAIA,EAAO5I,OAAS,IAAe6I,cAAgBD,EAAO5I,OAAS,IAAe8I,WAAY,CAE1F,MAAMC,EAASH,EAAOrJ,KACtB6B,EAAc4H,KAAKD,EACvB,MACK,GAAIH,EAAO5I,OAAS,IAAeiJ,MAAO,CAE3C,MAAMC,EAAQN,EAAOrJ,KACrB6B,EAAc4H,SAAQ,OAAmBE,GAC7C,MACK,GAAIN,EAAO5I,OAAS,IAAemJ,KAAM,CAC1C,MAAMC,EAAOR,EAAOrJ,KACpB6B,EAAc4H,SAAQ,OAAkBI,GAC5C,MACK,GAAIR,EAAO5I,OAAS,IAAeqJ,SAAU,CAC9C,MAAMC,EAAWV,EAAOrJ,KACxB6B,EAAc4H,SAAQ,OAAsBM,GAChD,CACJ,IACO,EAAiBlD,GAAQ,OAAiBhF,GAAe,GACpE,ECtBA,EANyB,CACrBmI,YAAapC,eAAgBgB,EAAcqB,EAAiBhB,EAAMC,EAASC,GACvE,MAAML,QAAuB,EAAmBF,EAAcqB,GAC9D,aAAa,EAAYnB,EAAgBG,EAAMC,EAASC,EAC5D,MCNAe,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB7I,IAAjB8I,EACH,OAAOA,EAAatE,QAGrB,IAAIuE,EAASJ,EAAyBE,GAAY,CAGjDrE,QAAS,CAAC,GAOX,OAHAwE,EAAoBH,GAAUE,EAAQA,EAAOvE,QAASoE,GAG/CG,EAAOvE,OACf,CAGAoE,EAAoBK,EAAID,EAGxBJ,EAAoBM,EAAI,KAGvB,IAAIC,EAAsBP,EAAoBQ,OAAEpJ,EAAW,CAAC,OAAO,IAAO4I,EAAoB,SAE9F,OADAO,EAAsBP,EAAoBQ,EAAED,EAClB,ERjCvBjN,EAAW,GACf0M,EAAoBQ,EAAI,CAAC9D,EAAQ+D,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASC,EAAI,EAAGA,EAAIxN,EAAS+F,OAAQyH,IAAK,CACrCL,EAAWnN,EAASwN,GAAG,GACvBJ,EAAKpN,EAASwN,GAAG,GACjBH,EAAWrN,EAASwN,GAAG,GAE3B,IAJA,IAGIC,GAAY,EACPC,EAAI,EAAGA,EAAIP,EAASpH,OAAQ2H,MACpB,EAAXL,GAAsBC,GAAgBD,IAAatL,OAAO4L,KAAKjB,EAAoBQ,GAAGU,OAAOC,GAASnB,EAAoBQ,EAAEW,GAAKV,EAASO,MAC9IP,EAASW,OAAOJ,IAAK,IAErBD,GAAY,EACTJ,EAAWC,IAAcA,EAAeD,IAG7C,GAAGI,EAAW,CACbzN,EAAS8N,OAAON,IAAK,GACrB,IAAIxH,EAAIoH,SACEtJ,IAANkC,IAAiBoD,EAASpD,EAC/B,CACD,CACA,OAAOoD,CArBP,CAJCiE,EAAWA,GAAY,EACvB,IAAI,IAAIG,EAAIxN,EAAS+F,OAAQyH,EAAI,GAAKxN,EAASwN,EAAI,GAAG,GAAKH,EAAUG,IAAKxN,EAASwN,GAAKxN,EAASwN,EAAI,GACrGxN,EAASwN,GAAK,CAACL,EAAUC,EAAIC,EAuBjB,ES3BdX,EAAoBqB,EAAI,CAACzF,EAAS0F,KACjC,IAAI,IAAIH,KAAOG,EACXtB,EAAoBuB,EAAED,EAAYH,KAASnB,EAAoBuB,EAAE3F,EAASuF,IAC5E9L,OAAOmM,eAAe5F,EAASuF,EAAK,CAAEM,YAAY,EAAM3I,IAAKwI,EAAWH,IAE1E,ECNDnB,EAAoB0B,EAAI,CAAC,EAGzB1B,EAAoB2B,EAAKC,GACjBvK,QAAQwK,IAAIxM,OAAO4L,KAAKjB,EAAoB0B,GAAG5K,QAAO,CAACgL,EAAUX,KACvEnB,EAAoB0B,EAAEP,GAAKS,EAASE,GAC7BA,IACL,KCNJ9B,EAAoB+B,EAAKH,GAEZA,EAAL,kCCFR5B,EAAoBgC,SAAYJ,IAEf,ECHjB5B,EAAoBuB,EAAI,CAACnN,EAAK2C,IAAU1B,OAAOgF,UAAU4H,eAAeC,KAAK9N,EAAK2C,GCClFiJ,EAAoB1G,EAAKsC,IACH,oBAAXnI,QAA0BA,OAAO0O,aAC1C9M,OAAOmM,eAAe5F,EAASnI,OAAO0O,YAAa,CAAErN,MAAO,WAE7DO,OAAOmM,eAAe5F,EAAS,aAAc,CAAE9G,OAAO,GAAO,ECL9DkL,EAAoBzG,EAAI,UCIxB,IAAI6I,EAAkB,CACrB,KAAM,GAkBPpC,EAAoB0B,EAAEZ,EAAI,CAACc,EAASE,KAE/BM,EAAgBR,IAElBS,cAAcrC,EAAoBzG,EAAIyG,EAAoB+B,EAAEH,GAE9D,EAGD,IAAIU,EAAqBC,KAAmB,aAAIA,KAAmB,cAAK,GACpEC,EAA6BF,EAAmBhD,KAAK7F,KAAK6I,GAC9DA,EAAmBhD,KAzBCzJ,IACnB,IAAI4K,EAAW5K,EAAK,GAChB4M,EAAc5M,EAAK,GACnB6M,EAAU7M,EAAK,GACnB,IAAI,IAAIoK,KAAYwC,EAChBzC,EAAoBuB,EAAEkB,EAAaxC,KACrCD,EAAoBK,EAAEJ,GAAYwC,EAAYxC,IAIhD,IADGyC,GAASA,EAAQ1C,GACdS,EAASpH,QACd+I,EAAgB3B,EAASkC,OAAS,EACnCH,EAA2B3M,EAAK,MfrB7BtC,EAAOyM,EAAoBM,EAC/BN,EAAoBM,EAAI,IAChBN,EAAoB2B,EAAE,MAAMnK,KAAKjE,GgBDfyM,EAAoBM","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/startup chunk dependencies","webpack:///../../../node_modules/comlink/dist/esm/comlink.mjs","webpack:///../../../node_modules/@thewtex/zstddec/dist/zstddec.modern.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/internal/load-emscripten-module-web-worker.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/web-workers/load-pipeline-module.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/web-workers/run-pipeline.js","webpack:///../../../node_modules/itk-wasm/dist/pipeline/web-workers/itk-wasm-pipeline.worker.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/get mini-css chunk filename","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/importScripts chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(7190).then(next);\n};","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","let init;\nlet instance;\nlet heap;\nconst IMPORT_OBJECT = {\n  env: {\n    emscripten_notify_memory_growth: function (index) {\n      heap = new Uint8Array(instance.exports.memory.buffer);\n    }\n  }\n};\n/**\r\n * ZSTD (Zstandard) decoder.\r\n */\nclass ZSTDDecoder {\n  init() {\n    if (init) return init;\n    if (typeof fetch !== 'undefined') {\n      // Web.\n      init = fetch('data:application/wasm;base64,' + wasm).then(response => response.arrayBuffer()).then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);\n    } else {\n      // Node.js.\n      init = WebAssembly.instantiate(Buffer.from(wasm, 'base64'), IMPORT_OBJECT).then(this._init);\n    }\n    return init;\n  }\n  _init(result) {\n    instance = result.instance;\n    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0); // initialize heap.\n  }\n\n  decode(array, uncompressedSize = 0) {\n    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\n    // Write compressed data into WASM memory.\n    const compressedSize = array.byteLength;\n    const compressedPtr = instance.exports.malloc(compressedSize);\n    heap.set(array, compressedPtr);\n    // Decompress into WASM memory.\n    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\n    const uncompressedPtr = instance.exports.malloc(uncompressedSize);\n    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\n    // Read decompressed data and free WASM memory.\n    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\n    instance.exports.free(compressedPtr);\n    instance.exports.free(uncompressedPtr);\n    return dec;\n  }\n}\n/**\r\n * BSD License\r\n *\r\n * For Zstandard software\r\n *\r\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n *  * Neither the name Facebook nor the names of its contributors may be used to\r\n *    endorse or promote products derived from this software without specific\r\n *    prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\n// wasm:begin\nconst wasm = '';\n// wasm:end\n\nexport { ZSTDDecoder };\n//# sourceMappingURL=zstddec.modern.js.map\n","import axios from 'axios';\nimport { ZSTDDecoder } from '@thewtex/zstddec';\nconst decoder = new ZSTDDecoder();\nlet decoderInitialized = false;\n// Load the Emscripten module in the browser in a WebWorker.\n//\n// baseUrl is usually taken from 'getPipelinesBaseUrl()', but a different value\n// could be passed.\nasync function loadEmscriptenModuleWebWorker(moduleRelativePathOrURL, baseUrl) {\n    let modulePrefix = null;\n    if (typeof moduleRelativePathOrURL !== 'string') {\n        modulePrefix = moduleRelativePathOrURL.href;\n    }\n    else if (moduleRelativePathOrURL.startsWith('http')) {\n        modulePrefix = moduleRelativePathOrURL;\n    }\n    else {\n        modulePrefix = `${baseUrl}/${moduleRelativePathOrURL}`;\n    }\n    if (modulePrefix.endsWith('.js')) {\n        modulePrefix = modulePrefix.substring(0, modulePrefix.length - 3);\n    }\n    if (modulePrefix.endsWith('.wasm')) {\n        modulePrefix = modulePrefix.substring(0, modulePrefix.length - 5);\n    }\n    const wasmBinaryPath = `${modulePrefix}.wasm`;\n    const response = await axios.get(`${wasmBinaryPath}.zst`, { responseType: 'arraybuffer' });\n    if (!decoderInitialized) {\n        await decoder.init();\n        decoderInitialized = true;\n    }\n    const decompressedArray = decoder.decode(new Uint8Array(response.data));\n    const wasmBinary = decompressedArray.buffer;\n    const modulePath = `${modulePrefix}.js`;\n    const result = await import(/* webpackIgnore: true */ /* @vite-ignore */ modulePath);\n    const emscriptenModule = result.default({ wasmBinary });\n    return emscriptenModule;\n}\nexport default loadEmscriptenModuleWebWorker;\n//# sourceMappingURL=load-emscripten-module-web-worker.js.map","import loadEmscriptenModule from '../internal/load-emscripten-module-web-worker.js';\n// To cache loaded pipeline modules wrapped in a Promise\nconst pipelineToModule = new Map();\nasync function loadPipelineModule(pipelinePath, baseUrl) {\n    let moduleRelativePathOrURL = pipelinePath;\n    let pipeline = pipelinePath;\n    let pipelineModule = null;\n    if (typeof pipelinePath !== 'string') {\n        moduleRelativePathOrURL = new URL(pipelinePath.href);\n        pipeline = moduleRelativePathOrURL.href;\n    }\n    if (pipelineToModule.has(pipeline)) {\n        pipelineModule = await pipelineToModule.get(pipeline);\n    }\n    else {\n        pipelineToModule.set(pipeline, loadEmscriptenModule(moduleRelativePathOrURL, baseUrl));\n        pipelineModule = await pipelineToModule.get(pipeline);\n    }\n    return pipelineModule;\n}\nexport default loadPipelineModule;\n//# sourceMappingURL=load-pipeline-module.js.map","import * as Comlink from 'comlink';\nimport runPipelineEmscripten from '../internal/run-pipeline-emscripten.js';\nimport getTransferables from '../../get-transferables.js';\nimport InterfaceTypes from '../../interface-types/interface-types.js';\nimport imageTransferables from '../internal/image-transferables.js';\nimport meshTransferables from '../internal/mesh-transferables.js';\nimport polyDataTransferables from '../internal/poly-data-transferables.js';\nasync function runPipeline(pipelineModule, args, outputs, inputs) {\n    const result = runPipelineEmscripten(pipelineModule, args, outputs, inputs);\n    const transferables = [];\n    result.outputs.forEach(function (output) {\n        if (output.type === InterfaceTypes.BinaryStream || output.type === InterfaceTypes.BinaryFile) {\n            // Binary data\n            const binary = output.data;\n            transferables.push(binary);\n        }\n        else if (output.type === InterfaceTypes.Image) {\n            // Image data\n            const image = output.data;\n            transferables.push(...imageTransferables(image));\n        }\n        else if (output.type === InterfaceTypes.Mesh) {\n            const mesh = output.data;\n            transferables.push(...meshTransferables(mesh));\n        }\n        else if (output.type === InterfaceTypes.PolyData) {\n            const polyData = output.data;\n            transferables.push(...polyDataTransferables(polyData));\n        }\n    });\n    return Comlink.transfer(result, getTransferables(transferables, true));\n}\nexport default runPipeline;\n//# sourceMappingURL=run-pipeline.js.map","import * as Comlink from 'comlink';\nimport loadPipelineModule from './load-pipeline-module.js';\nimport runPipeline from './run-pipeline.js';\nconst workerOperations = {\n    runPipeline: async function (pipelinePath, pipelineBaseUrl, args, outputs, inputs) {\n        const pipelineModule = await loadPipelineModule(pipelinePath, pipelineBaseUrl);\n        return await runPipeline(pipelineModule, args, outputs, inputs);\n    }\n};\nComlink.expose(workerOperations);\n//# sourceMappingURL=itk-wasm-pipeline.worker.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [7190], () => (__webpack_require__(36376)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.\" + \"e234214dff79b602d5bc\" + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t6376: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","createProxy","target","value","serialized","Error","isError","message","name","stack","Object","assign","ep","globalThis","allowedOrigins","addEventListener","callback","ev","data","origin","allowedOrigin","RegExp","test","isAllowedOrigin","console","warn","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","error","TypeError","endpoint","constructor","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","get","set","isProxyReleased","Proxy","_target","unregister","unregisterProxy","length","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","Array","prototype","concat","transferCache","transfers","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","init","instance","heap","IMPORT_OBJECT","env","emscripten_notify_memory_growth","index","Uint8Array","exports","memory","buffer","wasm","decoder","fetch","response","arrayBuffer","WebAssembly","instantiate","this","_init","Buffer","from","result","decode","array","uncompressedSize","compressedSize","byteLength","compressedPtr","malloc","ZSTD_findDecompressedSize","uncompressedPtr","actualSize","ZSTD_decompress","dec","free","decoderInitialized","async","moduleRelativePathOrURL","baseUrl","modulePrefix","href","startsWith","endsWith","substring","wasmBinaryPath","axios","responseType","wasmBinary","modulePath","import","default","pipelineToModule","pipelinePath","pipeline","pipelineModule","URL","has","args","outputs","inputs","forEach","output","BinaryStream","BinaryFile","binary","push","Image","image","Mesh","mesh","PolyData","polyData","runPipeline","pipelineBaseUrl","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","keys","every","key","splice","d","definition","o","defineProperty","enumerable","f","e","chunkId","all","promises","u","miniCssF","hasOwnProperty","call","toStringTag","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","moreModules","runtime","pop"],"sourceRoot":""}